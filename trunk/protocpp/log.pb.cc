// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: log.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "log.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto {
namespace log {

namespace {

const ::google::protobuf::Descriptor* no_batch_save_logs_notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  no_batch_save_logs_notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* go_batch_save_logs_notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  go_batch_save_logs_notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* eo_batch_save_logs_notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  eo_batch_save_logs_notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* save_to_log_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  save_to_log_reflection_ = NULL;
const ::google::protobuf::Descriptor* no_mobile_log_notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  no_mobile_log_notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* no_account_log_notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  no_account_log_notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* do_create_role_log_notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  do_create_role_log_notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* go_role_login_log_notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  go_role_login_log_notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* go_role_logout_log_notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  go_role_logout_log_notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* go_item_log_notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  go_item_log_notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* go_money_log_notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  go_money_log_notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* go_luck_gift_log_notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  go_luck_gift_log_notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* go_hero_log_notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  go_hero_log_notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* go_task_log_notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  go_task_log_notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* go_exp_log_notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  go_exp_log_notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* go_prestige_log_notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  go_prestige_log_notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* go_user_times_log_notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  go_user_times_log_notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* eo_country_log_notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  eo_country_log_notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* eo_family_log_notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  eo_family_log_notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* eo_friend_log_notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  eo_friend_log_notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* eo_mail_log_notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  eo_mail_log_notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* go_pk_log_notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  go_pk_log_notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* go_shop_log_notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  go_shop_log_notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* go_random_shop_log_notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  go_random_shop_log_notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* go_equip_log_notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  go_equip_log_notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* go_achieve_log_notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  go_achieve_log_notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* go_lifeforce_log_notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  go_lifeforce_log_notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* go_dungeon_log_notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  go_dungeon_log_notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* go_role_buff_log_notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  go_role_buff_log_notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* eo_goods_log_notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  eo_goods_log_notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* go_role_new_guide_log_notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  go_role_new_guide_log_notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* go_role_trade_log_notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  go_role_trade_log_notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* go_role_recharge_log_notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  go_role_recharge_log_notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* go_rmb_log_notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  go_rmb_log_notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* go_expedition_log_notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  go_expedition_log_notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* eo_scene_log_notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  eo_scene_log_notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* go_combat_log_notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  go_combat_log_notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* go_hero_exp_log_notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  go_hero_exp_log_notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* eo_redbag_log_notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  eo_redbag_log_notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* go_patrol_hire_log_notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  go_patrol_hire_log_notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* eo_offline_arena_rank_log_notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  eo_offline_arena_rank_log_notify_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_log_2eproto() {
  protobuf_AddDesc_log_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "log.proto");
  GOOGLE_CHECK(file != NULL);
  no_batch_save_logs_notify_descriptor_ = file->message_type(0);
  static const int no_batch_save_logs_notify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(no_batch_save_logs_notify, logs_),
  };
  no_batch_save_logs_notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      no_batch_save_logs_notify_descriptor_,
      no_batch_save_logs_notify::default_instance_,
      no_batch_save_logs_notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(no_batch_save_logs_notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(no_batch_save_logs_notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(no_batch_save_logs_notify));
  go_batch_save_logs_notify_descriptor_ = file->message_type(1);
  static const int go_batch_save_logs_notify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_batch_save_logs_notify, logs_),
  };
  go_batch_save_logs_notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      go_batch_save_logs_notify_descriptor_,
      go_batch_save_logs_notify::default_instance_,
      go_batch_save_logs_notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_batch_save_logs_notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_batch_save_logs_notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(go_batch_save_logs_notify));
  eo_batch_save_logs_notify_descriptor_ = file->message_type(2);
  static const int eo_batch_save_logs_notify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eo_batch_save_logs_notify, logs_),
  };
  eo_batch_save_logs_notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      eo_batch_save_logs_notify_descriptor_,
      eo_batch_save_logs_notify::default_instance_,
      eo_batch_save_logs_notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eo_batch_save_logs_notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eo_batch_save_logs_notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(eo_batch_save_logs_notify));
  save_to_log_descriptor_ = file->message_type(3);
  static const int save_to_log_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(save_to_log, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(save_to_log, data_),
  };
  save_to_log_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      save_to_log_descriptor_,
      save_to_log::default_instance_,
      save_to_log_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(save_to_log, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(save_to_log, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(save_to_log));
  no_mobile_log_notify_descriptor_ = file->message_type(4);
  static const int no_mobile_log_notify_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(no_mobile_log_notify, uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(no_mobile_log_notify, device_model_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(no_mobile_log_notify, device_sys_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(no_mobile_log_notify, cpu_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(no_mobile_log_notify, cpu_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(no_mobile_log_notify, memory_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(no_mobile_log_notify, grph_device_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(no_mobile_log_notify, log_time_),
  };
  no_mobile_log_notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      no_mobile_log_notify_descriptor_,
      no_mobile_log_notify::default_instance_,
      no_mobile_log_notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(no_mobile_log_notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(no_mobile_log_notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(no_mobile_log_notify));
  no_account_log_notify_descriptor_ = file->message_type(5);
  static const int no_account_log_notify_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(no_account_log_notify, account_uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(no_account_log_notify, channel_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(no_account_log_notify, role_uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(no_account_log_notify, mobile_uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(no_account_log_notify, source_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(no_account_log_notify, log_time_),
  };
  no_account_log_notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      no_account_log_notify_descriptor_,
      no_account_log_notify::default_instance_,
      no_account_log_notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(no_account_log_notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(no_account_log_notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(no_account_log_notify));
  do_create_role_log_notify_descriptor_ = file->message_type(6);
  static const int do_create_role_log_notify_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(do_create_role_log_notify, role_uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(do_create_role_log_notify, nickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(do_create_role_log_notify, mobile_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(do_create_role_log_notify, log_time_),
  };
  do_create_role_log_notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      do_create_role_log_notify_descriptor_,
      do_create_role_log_notify::default_instance_,
      do_create_role_log_notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(do_create_role_log_notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(do_create_role_log_notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(do_create_role_log_notify));
  go_role_login_log_notify_descriptor_ = file->message_type(7);
  static const int go_role_login_log_notify_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_role_login_log_notify, role_uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_role_login_log_notify, gate_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_role_login_log_notify, game_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_role_login_log_notify, mobile_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_role_login_log_notify, log_time_),
  };
  go_role_login_log_notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      go_role_login_log_notify_descriptor_,
      go_role_login_log_notify::default_instance_,
      go_role_login_log_notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_role_login_log_notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_role_login_log_notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(go_role_login_log_notify));
  go_role_logout_log_notify_descriptor_ = file->message_type(8);
  static const int go_role_logout_log_notify_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_role_logout_log_notify, role_uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_role_logout_log_notify, online_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_role_logout_log_notify, gate_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_role_logout_log_notify, game_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_role_logout_log_notify, kick_reason_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_role_logout_log_notify, mobile_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_role_logout_log_notify, log_time_),
  };
  go_role_logout_log_notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      go_role_logout_log_notify_descriptor_,
      go_role_logout_log_notify::default_instance_,
      go_role_logout_log_notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_role_logout_log_notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_role_logout_log_notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(go_role_logout_log_notify));
  go_item_log_notify_descriptor_ = file->message_type(9);
  static const int go_item_log_notify_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_item_log_notify, role_uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_item_log_notify, role_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_item_log_notify, item_uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_item_log_notify, item_tid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_item_log_notify, old_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_item_log_notify, up_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_item_log_notify, new_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_item_log_notify, op_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_item_log_notify, source_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_item_log_notify, source_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_item_log_notify, log_time_),
  };
  go_item_log_notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      go_item_log_notify_descriptor_,
      go_item_log_notify::default_instance_,
      go_item_log_notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_item_log_notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_item_log_notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(go_item_log_notify));
  go_money_log_notify_descriptor_ = file->message_type(10);
  static const int go_money_log_notify_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_money_log_notify, role_uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_money_log_notify, role_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_money_log_notify, old_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_money_log_notify, up_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_money_log_notify, new_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_money_log_notify, money_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_money_log_notify, op_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_money_log_notify, source_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_money_log_notify, source_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_money_log_notify, log_time_),
  };
  go_money_log_notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      go_money_log_notify_descriptor_,
      go_money_log_notify::default_instance_,
      go_money_log_notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_money_log_notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_money_log_notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(go_money_log_notify));
  go_luck_gift_log_notify_descriptor_ = file->message_type(11);
  static const int go_luck_gift_log_notify_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_luck_gift_log_notify, src_role_uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_luck_gift_log_notify, grab_role_uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_luck_gift_log_notify, luck_gift_uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_luck_gift_log_notify, old_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_luck_gift_log_notify, up_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_luck_gift_log_notify, new_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_luck_gift_log_notify, log_time_),
  };
  go_luck_gift_log_notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      go_luck_gift_log_notify_descriptor_,
      go_luck_gift_log_notify::default_instance_,
      go_luck_gift_log_notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_luck_gift_log_notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_luck_gift_log_notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(go_luck_gift_log_notify));
  go_hero_log_notify_descriptor_ = file->message_type(12);
  static const int go_hero_log_notify_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_hero_log_notify, role_uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_hero_log_notify, role_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_hero_log_notify, hero_uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_hero_log_notify, hero_tid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_hero_log_notify, op_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_hero_log_notify, source_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_hero_log_notify, log_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_hero_log_notify, old_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_hero_log_notify, up_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_hero_log_notify, new_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_hero_log_notify, source_param_),
  };
  go_hero_log_notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      go_hero_log_notify_descriptor_,
      go_hero_log_notify::default_instance_,
      go_hero_log_notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_hero_log_notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_hero_log_notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(go_hero_log_notify));
  go_task_log_notify_descriptor_ = file->message_type(13);
  static const int go_task_log_notify_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_task_log_notify, role_uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_task_log_notify, task_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_task_log_notify, task_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_task_log_notify, task_progress_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_task_log_notify, accept_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_task_log_notify, op_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_task_log_notify, log_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_task_log_notify, task_type_),
  };
  go_task_log_notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      go_task_log_notify_descriptor_,
      go_task_log_notify::default_instance_,
      go_task_log_notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_task_log_notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_task_log_notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(go_task_log_notify));
  go_exp_log_notify_descriptor_ = file->message_type(14);
  static const int go_exp_log_notify_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_exp_log_notify, role_uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_exp_log_notify, old_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_exp_log_notify, old_exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_exp_log_notify, up_exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_exp_log_notify, new_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_exp_log_notify, new_exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_exp_log_notify, source_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_exp_log_notify, source_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_exp_log_notify, log_time_),
  };
  go_exp_log_notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      go_exp_log_notify_descriptor_,
      go_exp_log_notify::default_instance_,
      go_exp_log_notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_exp_log_notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_exp_log_notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(go_exp_log_notify));
  go_prestige_log_notify_descriptor_ = file->message_type(15);
  static const int go_prestige_log_notify_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_prestige_log_notify, role_uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_prestige_log_notify, role_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_prestige_log_notify, old_prestige_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_prestige_log_notify, old_prestige_total_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_prestige_log_notify, old_prestige_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_prestige_log_notify, up_prestige_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_prestige_log_notify, new_prestige_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_prestige_log_notify, new_prestige_total_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_prestige_log_notify, new_prestige_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_prestige_log_notify, op_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_prestige_log_notify, source_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_prestige_log_notify, source_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_prestige_log_notify, log_time_),
  };
  go_prestige_log_notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      go_prestige_log_notify_descriptor_,
      go_prestige_log_notify::default_instance_,
      go_prestige_log_notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_prestige_log_notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_prestige_log_notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(go_prestige_log_notify));
  go_user_times_log_notify_descriptor_ = file->message_type(16);
  static const int go_user_times_log_notify_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_user_times_log_notify, role_uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_user_times_log_notify, role_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_user_times_log_notify, old_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_user_times_log_notify, up_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_user_times_log_notify, new_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_user_times_log_notify, event_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_user_times_log_notify, sec_event_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_user_times_log_notify, op_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_user_times_log_notify, source_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_user_times_log_notify, source_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_user_times_log_notify, log_time_),
  };
  go_user_times_log_notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      go_user_times_log_notify_descriptor_,
      go_user_times_log_notify::default_instance_,
      go_user_times_log_notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_user_times_log_notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_user_times_log_notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(go_user_times_log_notify));
  eo_country_log_notify_descriptor_ = file->message_type(17);
  static const int eo_country_log_notify_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eo_country_log_notify, country_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eo_country_log_notify, source_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eo_country_log_notify, source_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eo_country_log_notify, source_param2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eo_country_log_notify, source_param3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eo_country_log_notify, log_time_),
  };
  eo_country_log_notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      eo_country_log_notify_descriptor_,
      eo_country_log_notify::default_instance_,
      eo_country_log_notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eo_country_log_notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eo_country_log_notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(eo_country_log_notify));
  eo_family_log_notify_descriptor_ = file->message_type(18);
  static const int eo_family_log_notify_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eo_family_log_notify, family_uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eo_family_log_notify, role_uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eo_family_log_notify, target_uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eo_family_log_notify, source_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eo_family_log_notify, source_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eo_family_log_notify, source_param2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eo_family_log_notify, log_time_),
  };
  eo_family_log_notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      eo_family_log_notify_descriptor_,
      eo_family_log_notify::default_instance_,
      eo_family_log_notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eo_family_log_notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eo_family_log_notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(eo_family_log_notify));
  eo_friend_log_notify_descriptor_ = file->message_type(19);
  static const int eo_friend_log_notify_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eo_friend_log_notify, role_uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eo_friend_log_notify, friend_uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eo_friend_log_notify, old_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eo_friend_log_notify, new_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eo_friend_log_notify, source_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eo_friend_log_notify, source_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eo_friend_log_notify, log_time_),
  };
  eo_friend_log_notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      eo_friend_log_notify_descriptor_,
      eo_friend_log_notify::default_instance_,
      eo_friend_log_notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eo_friend_log_notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eo_friend_log_notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(eo_friend_log_notify));
  eo_mail_log_notify_descriptor_ = file->message_type(20);
  static const int eo_mail_log_notify_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eo_mail_log_notify, role_uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eo_mail_log_notify, mail_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eo_mail_log_notify, mail_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eo_mail_log_notify, item_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eo_mail_log_notify, items_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eo_mail_log_notify, item_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eo_mail_log_notify, source_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eo_mail_log_notify, source_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eo_mail_log_notify, log_time_),
  };
  eo_mail_log_notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      eo_mail_log_notify_descriptor_,
      eo_mail_log_notify::default_instance_,
      eo_mail_log_notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eo_mail_log_notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eo_mail_log_notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(eo_mail_log_notify));
  go_pk_log_notify_descriptor_ = file->message_type(21);
  static const int go_pk_log_notify_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_pk_log_notify, role_uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_pk_log_notify, role_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_pk_log_notify, old_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_pk_log_notify, up_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_pk_log_notify, new_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_pk_log_notify, value_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_pk_log_notify, op_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_pk_log_notify, source_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_pk_log_notify, source_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_pk_log_notify, log_time_),
  };
  go_pk_log_notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      go_pk_log_notify_descriptor_,
      go_pk_log_notify::default_instance_,
      go_pk_log_notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_pk_log_notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_pk_log_notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(go_pk_log_notify));
  go_shop_log_notify_descriptor_ = file->message_type(22);
  static const int go_shop_log_notify_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_shop_log_notify, role_uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_shop_log_notify, goods_tid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_shop_log_notify, goods_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_shop_log_notify, cost_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_shop_log_notify, cost_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_shop_log_notify, item_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_shop_log_notify, item_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_shop_log_notify, source_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_shop_log_notify, source_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_shop_log_notify, log_time_),
  };
  go_shop_log_notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      go_shop_log_notify_descriptor_,
      go_shop_log_notify::default_instance_,
      go_shop_log_notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_shop_log_notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_shop_log_notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(go_shop_log_notify));
  go_random_shop_log_notify_descriptor_ = file->message_type(23);
  static const int go_random_shop_log_notify_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_random_shop_log_notify, role_uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_random_shop_log_notify, shop_tid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_random_shop_log_notify, goods_tid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_random_shop_log_notify, cost_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_random_shop_log_notify, cost_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_random_shop_log_notify, cost_item_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_random_shop_log_notify, cost_item_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_random_shop_log_notify, old_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_random_shop_log_notify, new_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_random_shop_log_notify, source_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_random_shop_log_notify, log_time_),
  };
  go_random_shop_log_notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      go_random_shop_log_notify_descriptor_,
      go_random_shop_log_notify::default_instance_,
      go_random_shop_log_notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_random_shop_log_notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_random_shop_log_notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(go_random_shop_log_notify));
  go_equip_log_notify_descriptor_ = file->message_type(24);
  static const int go_equip_log_notify_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_equip_log_notify, role_uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_equip_log_notify, role_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_equip_log_notify, item_uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_equip_log_notify, item_tid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_equip_log_notify, hero_uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_equip_log_notify, attr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_equip_log_notify, exattr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_equip_log_notify, remake_exattr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_equip_log_notify, op_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_equip_log_notify, source_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_equip_log_notify, source_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_equip_log_notify, log_time_),
  };
  go_equip_log_notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      go_equip_log_notify_descriptor_,
      go_equip_log_notify::default_instance_,
      go_equip_log_notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_equip_log_notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_equip_log_notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(go_equip_log_notify));
  go_achieve_log_notify_descriptor_ = file->message_type(25);
  static const int go_achieve_log_notify_offsets_[20] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_achieve_log_notify, role_uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_achieve_log_notify, achieve_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_achieve_log_notify, old_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_achieve_log_notify, up_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_achieve_log_notify, new_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_achieve_log_notify, old_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_achieve_log_notify, up_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_achieve_log_notify, new_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_achieve_log_notify, old_achieve_point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_achieve_log_notify, add_achieve_point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_achieve_log_notify, new_achieve_point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_achieve_log_notify, old_achieve_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_achieve_log_notify, up_achieve_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_achieve_log_notify, new_achieve_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_achieve_log_notify, old_reward_get_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_achieve_log_notify, new_reward_get_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_achieve_log_notify, source_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_achieve_log_notify, source_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_achieve_log_notify, log_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_achieve_log_notify, sourec_type_str_),
  };
  go_achieve_log_notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      go_achieve_log_notify_descriptor_,
      go_achieve_log_notify::default_instance_,
      go_achieve_log_notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_achieve_log_notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_achieve_log_notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(go_achieve_log_notify));
  go_lifeforce_log_notify_descriptor_ = file->message_type(26);
  static const int go_lifeforce_log_notify_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_lifeforce_log_notify, role_uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_lifeforce_log_notify, old_lifestate_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_lifeforce_log_notify, old_lifestar_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_lifeforce_log_notify, up_lifestate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_lifeforce_log_notify, up_lifestar_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_lifeforce_log_notify, new_lifestate_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_lifeforce_log_notify, new_lifestar_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_lifeforce_log_notify, source_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_lifeforce_log_notify, source_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_lifeforce_log_notify, log_time_),
  };
  go_lifeforce_log_notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      go_lifeforce_log_notify_descriptor_,
      go_lifeforce_log_notify::default_instance_,
      go_lifeforce_log_notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_lifeforce_log_notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_lifeforce_log_notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(go_lifeforce_log_notify));
  go_dungeon_log_notify_descriptor_ = file->message_type(27);
  static const int go_dungeon_log_notify_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_dungeon_log_notify, role_uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_dungeon_log_notify, dungeon_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_dungeon_log_notify, create_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_dungeon_log_notify, create_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_dungeon_log_notify, source_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_dungeon_log_notify, source_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_dungeon_log_notify, log_time_),
  };
  go_dungeon_log_notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      go_dungeon_log_notify_descriptor_,
      go_dungeon_log_notify::default_instance_,
      go_dungeon_log_notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_dungeon_log_notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_dungeon_log_notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(go_dungeon_log_notify));
  go_role_buff_log_notify_descriptor_ = file->message_type(28);
  static const int go_role_buff_log_notify_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_role_buff_log_notify, role_uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_role_buff_log_notify, buff_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_role_buff_log_notify, op_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_role_buff_log_notify, speed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_role_buff_log_notify, source_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_role_buff_log_notify, source_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_role_buff_log_notify, log_time_),
  };
  go_role_buff_log_notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      go_role_buff_log_notify_descriptor_,
      go_role_buff_log_notify::default_instance_,
      go_role_buff_log_notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_role_buff_log_notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_role_buff_log_notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(go_role_buff_log_notify));
  eo_goods_log_notify_descriptor_ = file->message_type(29);
  static const int eo_goods_log_notify_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eo_goods_log_notify, role_uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eo_goods_log_notify, role_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eo_goods_log_notify, goods_uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eo_goods_log_notify, item_tid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eo_goods_log_notify, item_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eo_goods_log_notify, price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eo_goods_log_notify, selled_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eo_goods_log_notify, profit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eo_goods_log_notify, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eo_goods_log_notify, source_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eo_goods_log_notify, log_time_),
  };
  eo_goods_log_notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      eo_goods_log_notify_descriptor_,
      eo_goods_log_notify::default_instance_,
      eo_goods_log_notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eo_goods_log_notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eo_goods_log_notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(eo_goods_log_notify));
  go_role_new_guide_log_notify_descriptor_ = file->message_type(30);
  static const int go_role_new_guide_log_notify_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_role_new_guide_log_notify, role_uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_role_new_guide_log_notify, new_guide_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_role_new_guide_log_notify, source_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_role_new_guide_log_notify, source_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_role_new_guide_log_notify, log_time_),
  };
  go_role_new_guide_log_notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      go_role_new_guide_log_notify_descriptor_,
      go_role_new_guide_log_notify::default_instance_,
      go_role_new_guide_log_notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_role_new_guide_log_notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_role_new_guide_log_notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(go_role_new_guide_log_notify));
  go_role_trade_log_notify_descriptor_ = file->message_type(31);
  static const int go_role_trade_log_notify_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_role_trade_log_notify, role_uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_role_trade_log_notify, item_tid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_role_trade_log_notify, price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_role_trade_log_notify, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_role_trade_log_notify, tax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_role_trade_log_notify, total_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_role_trade_log_notify, total_cost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_role_trade_log_notify, gain_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_role_trade_log_notify, trade_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_role_trade_log_notify, op_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_role_trade_log_notify, source_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_role_trade_log_notify, log_time_),
  };
  go_role_trade_log_notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      go_role_trade_log_notify_descriptor_,
      go_role_trade_log_notify::default_instance_,
      go_role_trade_log_notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_role_trade_log_notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_role_trade_log_notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(go_role_trade_log_notify));
  go_role_recharge_log_notify_descriptor_ = file->message_type(32);
  static const int go_role_recharge_log_notify_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_role_recharge_log_notify, role_uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_role_recharge_log_notify, order_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_role_recharge_log_notify, recharge_tid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_role_recharge_log_notify, recharge_rmb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_role_recharge_log_notify, channel_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_role_recharge_log_notify, log_time_),
  };
  go_role_recharge_log_notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      go_role_recharge_log_notify_descriptor_,
      go_role_recharge_log_notify::default_instance_,
      go_role_recharge_log_notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_role_recharge_log_notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_role_recharge_log_notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(go_role_recharge_log_notify));
  go_rmb_log_notify_descriptor_ = file->message_type(33);
  static const int go_rmb_log_notify_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_rmb_log_notify, role_uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_rmb_log_notify, role_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_rmb_log_notify, old_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_rmb_log_notify, up_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_rmb_log_notify, new_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_rmb_log_notify, op_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_rmb_log_notify, source_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_rmb_log_notify, source_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_rmb_log_notify, log_time_),
  };
  go_rmb_log_notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      go_rmb_log_notify_descriptor_,
      go_rmb_log_notify::default_instance_,
      go_rmb_log_notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_rmb_log_notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_rmb_log_notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(go_rmb_log_notify));
  go_expedition_log_notify_descriptor_ = file->message_type(34);
  static const int go_expedition_log_notify_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_expedition_log_notify, role_uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_expedition_log_notify, role_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_expedition_log_notify, source_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_expedition_log_notify, source_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_expedition_log_notify, log_time_),
  };
  go_expedition_log_notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      go_expedition_log_notify_descriptor_,
      go_expedition_log_notify::default_instance_,
      go_expedition_log_notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_expedition_log_notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_expedition_log_notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(go_expedition_log_notify));
  eo_scene_log_notify_descriptor_ = file->message_type(35);
  static const int eo_scene_log_notify_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eo_scene_log_notify, role_uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eo_scene_log_notify, old_map_tid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eo_scene_log_notify, new_map_tid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eo_scene_log_notify, source_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eo_scene_log_notify, log_time_),
  };
  eo_scene_log_notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      eo_scene_log_notify_descriptor_,
      eo_scene_log_notify::default_instance_,
      eo_scene_log_notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eo_scene_log_notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eo_scene_log_notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(eo_scene_log_notify));
  go_combat_log_notify_descriptor_ = file->message_type(36);
  static const int go_combat_log_notify_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_combat_log_notify, role_uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_combat_log_notify, role_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_combat_log_notify, fight_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_combat_log_notify, combat_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_combat_log_notify, team_members_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_combat_log_notify, targets_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_combat_log_notify, fight_uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_combat_log_notify, is_win_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_combat_log_notify, start_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_combat_log_notify, fight_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_combat_log_notify, finish_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_combat_log_notify, log_time_),
  };
  go_combat_log_notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      go_combat_log_notify_descriptor_,
      go_combat_log_notify::default_instance_,
      go_combat_log_notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_combat_log_notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_combat_log_notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(go_combat_log_notify));
  go_hero_exp_log_notify_descriptor_ = file->message_type(37);
  static const int go_hero_exp_log_notify_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_hero_exp_log_notify, role_uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_hero_exp_log_notify, role_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_hero_exp_log_notify, hero_uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_hero_exp_log_notify, hero_tid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_hero_exp_log_notify, old_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_hero_exp_log_notify, old_exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_hero_exp_log_notify, up_exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_hero_exp_log_notify, new_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_hero_exp_log_notify, new_exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_hero_exp_log_notify, source_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_hero_exp_log_notify, source_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_hero_exp_log_notify, log_time_),
  };
  go_hero_exp_log_notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      go_hero_exp_log_notify_descriptor_,
      go_hero_exp_log_notify::default_instance_,
      go_hero_exp_log_notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_hero_exp_log_notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_hero_exp_log_notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(go_hero_exp_log_notify));
  eo_redbag_log_notify_descriptor_ = file->message_type(38);
  static const int eo_redbag_log_notify_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eo_redbag_log_notify, role_uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eo_redbag_log_notify, role_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eo_redbag_log_notify, redbag_uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eo_redbag_log_notify, total_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eo_redbag_log_notify, total_money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eo_redbag_log_notify, draw_money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eo_redbag_log_notify, rest_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eo_redbag_log_notify, rest_money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eo_redbag_log_notify, source_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eo_redbag_log_notify, log_time_),
  };
  eo_redbag_log_notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      eo_redbag_log_notify_descriptor_,
      eo_redbag_log_notify::default_instance_,
      eo_redbag_log_notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eo_redbag_log_notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eo_redbag_log_notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(eo_redbag_log_notify));
  go_patrol_hire_log_notify_descriptor_ = file->message_type(39);
  static const int go_patrol_hire_log_notify_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_patrol_hire_log_notify, role_uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_patrol_hire_log_notify, begin_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_patrol_hire_log_notify, end_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_patrol_hire_log_notify, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_patrol_hire_log_notify, total_exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_patrol_hire_log_notify, use_multi_point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_patrol_hire_log_notify, map_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_patrol_hire_log_notify, source_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_patrol_hire_log_notify, log_time_),
  };
  go_patrol_hire_log_notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      go_patrol_hire_log_notify_descriptor_,
      go_patrol_hire_log_notify::default_instance_,
      go_patrol_hire_log_notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_patrol_hire_log_notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(go_patrol_hire_log_notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(go_patrol_hire_log_notify));
  eo_offline_arena_rank_log_notify_descriptor_ = file->message_type(40);
  static const int eo_offline_arena_rank_log_notify_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eo_offline_arena_rank_log_notify, role_uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eo_offline_arena_rank_log_notify, role_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eo_offline_arena_rank_log_notify, role_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eo_offline_arena_rank_log_notify, op_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eo_offline_arena_rank_log_notify, old_class_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eo_offline_arena_rank_log_notify, old_rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eo_offline_arena_rank_log_notify, new_class_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eo_offline_arena_rank_log_notify, new_rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eo_offline_arena_rank_log_notify, log_time_),
  };
  eo_offline_arena_rank_log_notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      eo_offline_arena_rank_log_notify_descriptor_,
      eo_offline_arena_rank_log_notify::default_instance_,
      eo_offline_arena_rank_log_notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eo_offline_arena_rank_log_notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eo_offline_arena_rank_log_notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(eo_offline_arena_rank_log_notify));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_log_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    no_batch_save_logs_notify_descriptor_, &no_batch_save_logs_notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    go_batch_save_logs_notify_descriptor_, &go_batch_save_logs_notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    eo_batch_save_logs_notify_descriptor_, &eo_batch_save_logs_notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    save_to_log_descriptor_, &save_to_log::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    no_mobile_log_notify_descriptor_, &no_mobile_log_notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    no_account_log_notify_descriptor_, &no_account_log_notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    do_create_role_log_notify_descriptor_, &do_create_role_log_notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    go_role_login_log_notify_descriptor_, &go_role_login_log_notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    go_role_logout_log_notify_descriptor_, &go_role_logout_log_notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    go_item_log_notify_descriptor_, &go_item_log_notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    go_money_log_notify_descriptor_, &go_money_log_notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    go_luck_gift_log_notify_descriptor_, &go_luck_gift_log_notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    go_hero_log_notify_descriptor_, &go_hero_log_notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    go_task_log_notify_descriptor_, &go_task_log_notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    go_exp_log_notify_descriptor_, &go_exp_log_notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    go_prestige_log_notify_descriptor_, &go_prestige_log_notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    go_user_times_log_notify_descriptor_, &go_user_times_log_notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    eo_country_log_notify_descriptor_, &eo_country_log_notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    eo_family_log_notify_descriptor_, &eo_family_log_notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    eo_friend_log_notify_descriptor_, &eo_friend_log_notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    eo_mail_log_notify_descriptor_, &eo_mail_log_notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    go_pk_log_notify_descriptor_, &go_pk_log_notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    go_shop_log_notify_descriptor_, &go_shop_log_notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    go_random_shop_log_notify_descriptor_, &go_random_shop_log_notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    go_equip_log_notify_descriptor_, &go_equip_log_notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    go_achieve_log_notify_descriptor_, &go_achieve_log_notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    go_lifeforce_log_notify_descriptor_, &go_lifeforce_log_notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    go_dungeon_log_notify_descriptor_, &go_dungeon_log_notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    go_role_buff_log_notify_descriptor_, &go_role_buff_log_notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    eo_goods_log_notify_descriptor_, &eo_goods_log_notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    go_role_new_guide_log_notify_descriptor_, &go_role_new_guide_log_notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    go_role_trade_log_notify_descriptor_, &go_role_trade_log_notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    go_role_recharge_log_notify_descriptor_, &go_role_recharge_log_notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    go_rmb_log_notify_descriptor_, &go_rmb_log_notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    go_expedition_log_notify_descriptor_, &go_expedition_log_notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    eo_scene_log_notify_descriptor_, &eo_scene_log_notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    go_combat_log_notify_descriptor_, &go_combat_log_notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    go_hero_exp_log_notify_descriptor_, &go_hero_exp_log_notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    eo_redbag_log_notify_descriptor_, &eo_redbag_log_notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    go_patrol_hire_log_notify_descriptor_, &go_patrol_hire_log_notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    eo_offline_arena_rank_log_notify_descriptor_, &eo_offline_arena_rank_log_notify::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_log_2eproto() {
  delete no_batch_save_logs_notify::default_instance_;
  delete no_batch_save_logs_notify_reflection_;
  delete go_batch_save_logs_notify::default_instance_;
  delete go_batch_save_logs_notify_reflection_;
  delete eo_batch_save_logs_notify::default_instance_;
  delete eo_batch_save_logs_notify_reflection_;
  delete save_to_log::default_instance_;
  delete save_to_log_reflection_;
  delete no_mobile_log_notify::default_instance_;
  delete no_mobile_log_notify_reflection_;
  delete no_account_log_notify::default_instance_;
  delete no_account_log_notify_reflection_;
  delete do_create_role_log_notify::default_instance_;
  delete do_create_role_log_notify_reflection_;
  delete go_role_login_log_notify::default_instance_;
  delete go_role_login_log_notify_reflection_;
  delete go_role_logout_log_notify::default_instance_;
  delete go_role_logout_log_notify_reflection_;
  delete go_item_log_notify::default_instance_;
  delete go_item_log_notify_reflection_;
  delete go_money_log_notify::default_instance_;
  delete go_money_log_notify_reflection_;
  delete go_luck_gift_log_notify::default_instance_;
  delete go_luck_gift_log_notify_reflection_;
  delete go_hero_log_notify::default_instance_;
  delete go_hero_log_notify_reflection_;
  delete go_task_log_notify::default_instance_;
  delete go_task_log_notify_reflection_;
  delete go_exp_log_notify::default_instance_;
  delete go_exp_log_notify_reflection_;
  delete go_prestige_log_notify::default_instance_;
  delete go_prestige_log_notify_reflection_;
  delete go_user_times_log_notify::default_instance_;
  delete go_user_times_log_notify_reflection_;
  delete eo_country_log_notify::default_instance_;
  delete eo_country_log_notify_reflection_;
  delete eo_family_log_notify::default_instance_;
  delete eo_family_log_notify_reflection_;
  delete eo_friend_log_notify::default_instance_;
  delete eo_friend_log_notify_reflection_;
  delete eo_mail_log_notify::default_instance_;
  delete eo_mail_log_notify_reflection_;
  delete go_pk_log_notify::default_instance_;
  delete go_pk_log_notify_reflection_;
  delete go_shop_log_notify::default_instance_;
  delete go_shop_log_notify_reflection_;
  delete go_random_shop_log_notify::default_instance_;
  delete go_random_shop_log_notify_reflection_;
  delete go_equip_log_notify::default_instance_;
  delete go_equip_log_notify_reflection_;
  delete go_achieve_log_notify::default_instance_;
  delete go_achieve_log_notify_reflection_;
  delete go_lifeforce_log_notify::default_instance_;
  delete go_lifeforce_log_notify_reflection_;
  delete go_dungeon_log_notify::default_instance_;
  delete go_dungeon_log_notify_reflection_;
  delete go_role_buff_log_notify::default_instance_;
  delete go_role_buff_log_notify_reflection_;
  delete eo_goods_log_notify::default_instance_;
  delete eo_goods_log_notify_reflection_;
  delete go_role_new_guide_log_notify::default_instance_;
  delete go_role_new_guide_log_notify_reflection_;
  delete go_role_trade_log_notify::default_instance_;
  delete go_role_trade_log_notify_reflection_;
  delete go_role_recharge_log_notify::default_instance_;
  delete go_role_recharge_log_notify_reflection_;
  delete go_rmb_log_notify::default_instance_;
  delete go_rmb_log_notify_reflection_;
  delete go_expedition_log_notify::default_instance_;
  delete go_expedition_log_notify_reflection_;
  delete eo_scene_log_notify::default_instance_;
  delete eo_scene_log_notify_reflection_;
  delete go_combat_log_notify::default_instance_;
  delete go_combat_log_notify_reflection_;
  delete go_hero_exp_log_notify::default_instance_;
  delete go_hero_exp_log_notify_reflection_;
  delete eo_redbag_log_notify::default_instance_;
  delete eo_redbag_log_notify_reflection_;
  delete go_patrol_hire_log_notify::default_instance_;
  delete go_patrol_hire_log_notify_reflection_;
  delete eo_offline_arena_rank_log_notify::default_instance_;
  delete eo_offline_arena_rank_log_notify_reflection_;
}

void protobuf_AddDesc_log_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::proto::common::protobuf_AddDesc_common_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\tlog.proto\022\tproto.log\032\014common.proto\"A\n\031"
    "no_batch_save_logs_notify\022$\n\004logs\030\001 \003(\0132"
    "\026.proto.log.save_to_log\"A\n\031go_batch_save"
    "_logs_notify\022$\n\004logs\030\001 \003(\0132\026.proto.log.s"
    "ave_to_log\"A\n\031eo_batch_save_logs_notify\022"
    "$\n\004logs\030\001 \003(\0132\026.proto.log.save_to_log\"(\n"
    "\013save_to_log\022\013\n\003cmd\030\001 \002(\r\022\014\n\004data\030\002 \002(\014\""
    "\274\001\n\024no_mobile_log_notify\022\014\n\004uuid\030\001 \001(\t\022\024"
    "\n\014device_model\030\002 \001(\t\022\032\n\022device_sys_versi"
    "on\030\003 \001(\t\022\020\n\010cpu_type\030\004 \001(\t\022\021\n\tcpu_count\030"
    "\005 \001(\005\022\023\n\013memory_size\030\006 \001(\005\022\030\n\020grph_devic"
    "e_name\030\007 \001(\t\022\020\n\010log_time\030\010 \001(\r\"\216\001\n\025no_ac"
    "count_log_notify\022\023\n\013account_uid\030\001 \001(\004\022\022\n"
    "\nchannel_id\030\002 \001(\r\022\020\n\010role_uid\030\003 \001(\004\022\023\n\013m"
    "obile_uuid\030\004 \001(\t\022\023\n\013source_type\030\005 \001(\r\022\020\n"
    "\010log_time\030\006 \001(\r\"|\n\031do_create_role_log_no"
    "tify\022\020\n\010role_uid\030\001 \002(\004\022\020\n\010nickname\030\002 \002(\t"
    "\022)\n\006mobile\030\003 \002(\0132\031.proto.common.mobile_i"
    "nfo\022\020\n\010log_time\030\004 \002(\r\"\213\001\n\030go_role_login_"
    "log_notify\022\020\n\010role_uid\030\001 \002(\004\022\017\n\007gate_id\030"
    "\002 \002(\r\022\017\n\007game_id\030\003 \002(\r\022)\n\006mobile\030\004 \001(\0132\031"
    ".proto.common.mobile_info\022\020\n\010log_time\030\005 "
    "\002(\r\"\266\001\n\031go_role_logout_log_notify\022\020\n\010rol"
    "e_uid\030\001 \002(\004\022\023\n\013online_time\030\002 \002(\r\022\017\n\007gate"
    "_id\030\003 \002(\r\022\017\n\007game_id\030\004 \002(\r\022\023\n\013kick_reaso"
    "n\030\005 \002(\r\022)\n\006mobile\030\006 \001(\0132\031.proto.common.m"
    "obile_info\022\020\n\010log_time\030\007 \002(\r\"\336\001\n\022go_item"
    "_log_notify\022\020\n\010role_uid\030\001 \002(\004\022\022\n\nrole_le"
    "vel\030\002 \002(\r\022\020\n\010item_uid\030\003 \002(\004\022\020\n\010item_tid\030"
    "\004 \002(\r\022\017\n\007old_num\030\005 \001(\r\022\016\n\006up_num\030\006 \001(\r\022\017"
    "\n\007new_num\030\007 \001(\r\022\017\n\007op_type\030\010 \002(\r\022\023\n\013sour"
    "ce_type\030\t \002(\r\022\024\n\014source_param\030\n \001(\r\022\020\n\010l"
    "og_time\030\013 \002(\r\"\317\001\n\023go_money_log_notify\022\020\n"
    "\010role_uid\030\001 \002(\004\022\022\n\nrole_level\030\002 \002(\r\022\017\n\007o"
    "ld_num\030\003 \001(\r\022\016\n\006up_num\030\004 \001(\r\022\017\n\007new_num\030"
    "\005 \001(\r\022\022\n\nmoney_type\030\006 \002(\r\022\017\n\007op_type\030\007 \001"
    "(\r\022\023\n\013source_type\030\010 \002(\r\022\024\n\014source_param\030"
    "\t \001(\r\022\020\n\010log_time\030\n \002(\r\"\241\001\n\027go_luck_gift"
    "_log_notify\022\024\n\014src_role_uid\030\001 \002(\004\022\025\n\rgra"
    "b_role_uid\030\002 \001(\004\022\025\n\rluck_gift_uid\030\003 \002(\004\022"
    "\017\n\007old_num\030\004 \001(\r\022\016\n\006up_num\030\005 \001(\r\022\017\n\007new_"
    "num\030\006 \001(\r\022\020\n\010log_time\030\007 \002(\r\"\336\001\n\022go_hero_"
    "log_notify\022\020\n\010role_uid\030\001 \002(\004\022\022\n\nrole_lev"
    "el\030\002 \002(\r\022\020\n\010hero_uid\030\003 \002(\004\022\020\n\010hero_tid\030\004"
    " \002(\r\022\017\n\007op_type\030\005 \002(\r\022\023\n\013source_type\030\006 \002"
    "(\r\022\020\n\010log_time\030\007 \002(\r\022\017\n\007old_num\030\010 \001(\r\022\016\n"
    "\006up_num\030\t \001(\r\022\017\n\007new_num\030\n \001(\r\022\024\n\014source"
    "_param\030\013 \001(\r\"\255\001\n\022go_task_log_notify\022\020\n\010r"
    "ole_uid\030\001 \002(\004\022\017\n\007task_id\030\002 \002(\r\022\022\n\ntask_s"
    "tate\030\003 \002(\r\022\025\n\rtask_progress\030\004 \002(\t\022\023\n\013acc"
    "ept_time\030\005 \002(\r\022\017\n\007op_type\030\006 \002(\r\022\020\n\010log_t"
    "ime\030\007 \002(\r\022\021\n\ttask_type\030\010 \002(\r\"\272\001\n\021go_exp_"
    "log_notify\022\020\n\010role_uid\030\001 \002(\004\022\021\n\told_leve"
    "l\030\002 \002(\r\022\017\n\007old_exp\030\003 \002(\r\022\016\n\006up_exp\030\004 \002(\r"
    "\022\021\n\tnew_level\030\005 \002(\r\022\017\n\007new_exp\030\006 \002(\r\022\023\n\013"
    "source_type\030\007 \002(\r\022\024\n\014source_param\030\010 \001(\r\022"
    "\020\n\010log_time\030\t \002(\r\"\275\002\n\026go_prestige_log_no"
    "tify\022\020\n\010role_uid\030\001 \002(\004\022\022\n\nrole_level\030\002 \002"
    "(\r\022\024\n\014old_prestige\030\003 \002(\r\022\032\n\022old_prestige"
    "_total\030\004 \002(\r\022\032\n\022old_prestige_level\030\005 \002(\r"
    "\022\023\n\013up_prestige\030\006 \002(\r\022\024\n\014new_prestige\030\007 "
    "\002(\r\022\032\n\022new_prestige_total\030\010 \002(\r\022\032\n\022new_p"
    "restige_level\030\t \002(\r\022\017\n\007op_type\030\n \002(\r\022\023\n\013"
    "source_type\030\013 \002(\r\022\024\n\014source_param\030\014 \001(\r\022"
    "\020\n\010log_time\030\r \002(\r\"\350\001\n\030go_user_times_log_"
    "notify\022\020\n\010role_uid\030\001 \002(\004\022\022\n\nrole_level\030\002"
    " \002(\r\022\017\n\007old_num\030\003 \001(\r\022\016\n\006up_num\030\004 \001(\r\022\017\n"
    "\007new_num\030\005 \001(\r\022\020\n\010event_id\030\006 \002(\r\022\024\n\014sec_"
    "event_id\030\007 \002(\r\022\017\n\007op_type\030\010 \001(\r\022\023\n\013sourc"
    "e_type\030\t \002(\r\022\024\n\014source_param\030\n \001(\r\022\020\n\010lo"
    "g_time\030\013 \002(\r\"\226\001\n\025eo_country_log_notify\022\022"
    "\n\ncountry_id\030\001 \001(\r\022\023\n\013source_type\030\002 \001(\r\022"
    "\024\n\014source_param\030\003 \001(\004\022\025\n\rsource_param2\030\004"
    " \001(\r\022\025\n\rsource_param3\030\005 \001(\r\022\020\n\010log_time\030"
    "\006 \001(\r\"\244\001\n\024eo_family_log_notify\022\022\n\nfamily"
    "_uid\030\001 \001(\004\022\020\n\010role_uid\030\002 \001(\004\022\022\n\ntarget_u"
    "id\030\003 \001(\004\022\023\n\013source_type\030\004 \001(\r\022\024\n\014source_"
    "param\030\005 \001(\r\022\025\n\rsource_param2\030\006 \001(\r\022\020\n\010lo"
    "g_time\030\007 \001(\r\"\235\001\n\024eo_friend_log_notify\022\020\n"
    "\010role_uid\030\001 \001(\004\022\022\n\nfriend_uid\030\002 \001(\004\022\020\n\010o"
    "ld_type\030\003 \001(\r\022\020\n\010new_type\030\004 \001(\r\022\023\n\013sourc"
    "e_type\030\005 \001(\r\022\024\n\014source_param\030\006 \001(\r\022\020\n\010lo"
    "g_time\030\007 \001(\r\"\275\001\n\022eo_mail_log_notify\022\020\n\010r"
    "ole_uid\030\001 \001(\004\022\017\n\007mail_id\030\002 \001(\004\022\021\n\tmail_t"
    "ype\030\003 \001(\r\022\021\n\titem_type\030\004 \001(\r\022\r\n\005items\030\005 "
    "\001(\t\022\022\n\nitem_state\030\006 \001(\r\022\023\n\013source_type\030\007"
    " \001(\r\022\024\n\014source_param\030\010 \001(\r\022\020\n\010log_time\030\t"
    " \001(\r\"\314\001\n\020go_pk_log_notify\022\020\n\010role_uid\030\001 "
    "\002(\004\022\022\n\nrole_level\030\002 \002(\r\022\017\n\007old_num\030\003 \001(\r"
    "\022\016\n\006up_num\030\004 \001(\r\022\017\n\007new_num\030\005 \001(\r\022\022\n\nval"
    "ue_type\030\006 \001(\r\022\017\n\007op_type\030\007 \001(\r\022\023\n\013source"
    "_type\030\010 \001(\r\022\024\n\014source_param\030\t \001(\r\022\020\n\010log"
    "_time\030\n \001(\r\"\323\001\n\022go_shop_log_notify\022\020\n\010ro"
    "le_uid\030\001 \002(\004\022\021\n\tgoods_tid\030\002 \001(\r\022\021\n\tgoods"
    "_num\030\003 \001(\r\022\021\n\tcost_type\030\004 \001(\r\022\022\n\ncost_va"
    "lue\030\005 \001(\r\022\017\n\007item_id\030\006 \001(\r\022\020\n\010item_num\030\007"
    " \001(\r\022\023\n\013source_type\030\010 \001(\r\022\024\n\014source_para"
    "m\030\t \001(\r\022\020\n\010log_time\030\n \001(\r\"\356\001\n\031go_random_"
    "shop_log_notify\022\020\n\010role_uid\030\001 \001(\004\022\020\n\010sho"
    "p_tid\030\002 \001(\r\022\021\n\tgoods_tid\030\003 \001(\r\022\021\n\tcost_t"
    "ype\030\004 \001(\r\022\022\n\ncost_value\030\005 \001(\r\022\021\n\tcost_it"
    "em\030\006 \001(\r\022\027\n\017cost_item_value\030\007 \001(\r\022\017\n\007old"
    "_num\030\010 \001(\r\022\017\n\007new_num\030\t \001(\r\022\023\n\013source_ty"
    "pe\030\n \001(\r\022\020\n\010log_time\030\013 \001(\r\"\216\002\n\023go_equip_"
    "log_notify\022\020\n\010role_uid\030\001 \002(\004\022\022\n\nrole_lev"
    "el\030\002 \002(\r\022\020\n\010item_uid\030\003 \002(\004\022\020\n\010item_tid\030\004"
    " \002(\r\022\020\n\010hero_uid\030\005 \001(\004\022&\n\004attr\030\006 \003(\0132\030.p"
    "roto.common.equip_attr\022\016\n\006exattr\030\007 \003(\r\022\025"
    "\n\rremake_exattr\030\010 \003(\r\022\017\n\007op_type\030\t \002(\r\022\023"
    "\n\013source_type\030\013 \002(\r\022\024\n\014source_param\030\014 \001("
    "\r\022\020\n\010log_time\030\r \002(\r\"\340\003\n\025go_achieve_log_n"
    "otify\022\020\n\010role_uid\030\001 \002(\004\022\022\n\nachieve_id\030\002 "
    "\002(\r\022\021\n\told_level\030\003 \002(\r\022\020\n\010up_level\030\004 \002(\r"
    "\022\021\n\tnew_level\030\005 \002(\r\022\021\n\told_count\030\006 \002(\r\022\020"
    "\n\010up_count\030\007 \002(\r\022\021\n\tnew_count\030\010 \002(\r\022\031\n\021o"
    "ld_achieve_point\030\t \002(\r\022\031\n\021add_achieve_po"
    "int\030\n \002(\r\022\031\n\021new_achieve_point\030\013 \002(\r\022\031\n\021"
    "old_achieve_level\030\014 \002(\r\022\030\n\020up_achieve_le"
    "vel\030\r \002(\r\022\031\n\021new_achieve_level\030\016 \002(\r\022\034\n\024"
    "old_reward_get_level\030\017 \002(\r\022\034\n\024new_reward"
    "_get_level\030\020 \002(\r\022\023\n\013source_type\030\021 \002(\r\022\024\n"
    "\014source_param\030\022 \001(\r\022\020\n\010log_time\030\023 \002(\r\022\027\n"
    "\017sourec_type_str\030\024 \001(\t\"\205\002\n\027go_lifeforce_"
    "log_notify\022\020\n\010role_uid\030\001 \002(\004\022\033\n\023old_life"
    "state_level\030\002 \002(\r\022\032\n\022old_lifestar_level\030"
    "\003 \002(\r\022\024\n\014up_lifestate\030\004 \002(\r\022\023\n\013up_lifest"
    "ar\030\005 \002(\r\022\033\n\023new_lifestate_level\030\006 \002(\r\022\032\n"
    "\022new_lifestar_level\030\007 \002(\r\022\023\n\013source_type"
    "\030\010 \001(\r\022\024\n\014source_param\030\t \001(\r\022\020\n\010log_time"
    "\030\n \002(\r\"\242\001\n\025go_dungeon_log_notify\022\020\n\010role"
    "_uid\030\001 \002(\004\022\022\n\ndungeon_id\030\002 \001(\r\022\023\n\013create"
    "_type\030\003 \001(\r\022\021\n\tcreate_id\030\004 \001(\004\022\023\n\013source"
    "_type\030\005 \001(\r\022\024\n\014source_param\030\006 \001(\r\022\020\n\010log"
    "_time\030\007 \001(\r\"\231\001\n\027go_role_buff_log_notify\022"
    "\020\n\010role_uid\030\001 \002(\004\022\017\n\007buff_id\030\002 \001(\r\022\017\n\007op"
    "_type\030\003 \001(\r\022\r\n\005speed\030\004 \001(\r\022\023\n\013source_typ"
    "e\030\005 \001(\r\022\024\n\014source_param\030\006 \001(\r\022\020\n\010log_tim"
    "e\030\007 \001(\r\"\332\001\n\023eo_goods_log_notify\022\020\n\010role_"
    "uid\030\001 \001(\004\022\021\n\trole_name\030\002 \001(\t\022\021\n\tgoods_ui"
    "d\030\003 \001(\004\022\020\n\010item_tid\030\004 \001(\r\022\020\n\010item_num\030\005 "
    "\001(\r\022\r\n\005price\030\006 \001(\r\022\022\n\nselled_num\030\007 \001(\r\022\016"
    "\n\006profit\030\010 \001(\r\022\r\n\005state\030\t \001(\r\022\023\n\013source_"
    "type\030\013 \001(\r\022\020\n\010log_time\030\r \001(\r\"\203\001\n\034go_role"
    "_new_guide_log_notify\022\020\n\010role_uid\030\001 \002(\004\022"
    "\024\n\014new_guide_id\030\002 \001(\r\022\023\n\013source_type\030\003 \001"
    "(\r\022\024\n\014source_param\030\004 \001(\r\022\020\n\010log_time\030\005 \001"
    "(\r\"\346\001\n\030go_role_trade_log_notify\022\020\n\010role_"
    "uid\030\001 \002(\004\022\020\n\010item_tid\030\002 \001(\r\022\r\n\005price\030\003 \001"
    "(\r\022\013\n\003num\030\004 \001(\r\022\013\n\003tax\030\005 \001(\r\022\021\n\ttotal_nu"
    "m\030\006 \001(\r\022\022\n\ntotal_cost\030\007 \001(\r\022\014\n\004gain\030\010 \001("
    "\r\022\020\n\010trade_id\030\t \001(\r\022\017\n\007op_type\030\n \001(\r\022\023\n\013"
    "source_type\030\013 \001(\r\022\020\n\010log_time\030\014 \001(\r\"\223\001\n\033"
    "go_role_recharge_log_notify\022\020\n\010role_uid\030"
    "\001 \002(\004\022\020\n\010order_id\030\002 \001(\t\022\024\n\014recharge_tid\030"
    "\003 \001(\r\022\024\n\014recharge_rmb\030\004 \001(\r\022\022\n\nchannel_i"
    "d\030\005 \001(\r\022\020\n\010log_time\030\006 \001(\r\"\271\001\n\021go_rmb_log"
    "_notify\022\020\n\010role_uid\030\001 \001(\004\022\022\n\nrole_level\030"
    "\002 \001(\r\022\017\n\007old_num\030\003 \001(\r\022\016\n\006up_num\030\004 \001(\r\022\017"
    "\n\007new_num\030\005 \001(\r\022\017\n\007op_type\030\006 \001(\r\022\023\n\013sour"
    "ce_type\030\007 \001(\r\022\024\n\014source_param\030\010 \001(\r\022\020\n\010l"
    "og_time\030\t \001(\r\"}\n\030go_expedition_log_notif"
    "y\022\020\n\010role_uid\030\001 \002(\004\022\022\n\nrole_level\030\002 \002(\r\022"
    "\023\n\013source_type\030\003 \002(\r\022\024\n\014source_param\030\004 \002"
    "(\r\022\020\n\010log_time\030\005 \002(\r\"x\n\023eo_scene_log_not"
    "ify\022\020\n\010role_uid\030\001 \001(\004\022\023\n\013old_map_tid\030\002 \001"
    "(\r\022\023\n\013new_map_tid\030\003 \001(\r\022\023\n\013source_type\030\004"
    " \001(\r\022\020\n\010log_time\030\005 \001(\r\"\376\001\n\024go_combat_log"
    "_notify\022\020\n\010role_uid\030\001 \001(\004\022\022\n\nrole_level\030"
    "\002 \001(\r\022\022\n\nfight_type\030\003 \001(\r\022\023\n\013combat_type"
    "\030\004 \001(\r\022\024\n\014team_members\030\005 \003(\004\022\017\n\007targets\030"
    "\006 \003(\004\022\021\n\tfight_uid\030\007 \001(\004\022\016\n\006is_win\030\010 \001(\r"
    "\022\022\n\nstart_time\030\t \001(\r\022\022\n\nfight_time\030\n \001(\r"
    "\022\023\n\013finish_time\030\013 \001(\r\022\020\n\010log_time\030\014 \001(\r\""
    "\367\001\n\026go_hero_exp_log_notify\022\020\n\010role_uid\030\001"
    " \002(\004\022\022\n\nrole_level\030\002 \002(\r\022\020\n\010hero_uid\030\003 \002"
    "(\004\022\020\n\010hero_tid\030\004 \002(\r\022\021\n\told_level\030\005 \002(\r\022"
    "\017\n\007old_exp\030\006 \002(\r\022\016\n\006up_exp\030\007 \002(\r\022\021\n\tnew_"
    "level\030\010 \002(\r\022\017\n\007new_exp\030\t \002(\r\022\023\n\013source_t"
    "ype\030\n \002(\r\022\024\n\014source_param\030\013 \001(\r\022\020\n\010log_t"
    "ime\030\014 \002(\r\"\334\001\n\024eo_redbag_log_notify\022\020\n\010ro"
    "le_uid\030\001 \001(\004\022\021\n\trole_name\030\002 \001(\t\022\022\n\nredba"
    "g_uid\030\003 \001(\004\022\023\n\013total_count\030\004 \001(\r\022\023\n\013tota"
    "l_money\030\005 \001(\r\022\022\n\ndraw_money\030\006 \001(\r\022\022\n\nres"
    "t_count\030\007 \001(\r\022\022\n\nrest_money\030\010 \001(\r\022\023\n\013sou"
    "rce_type\030\t \001(\r\022\020\n\010log_time\030\n \001(\r\"\305\001\n\031go_"
    "patrol_hire_log_notify\022\020\n\010role_uid\030\001 \001(\004"
    "\022\022\n\nbegin_time\030\002 \001(\r\022\020\n\010end_time\030\003 \001(\r\022\r"
    "\n\005count\030\004 \001(\r\022\021\n\ttotal_exp\030\005 \001(\r\022\027\n\017use_"
    "multi_point\030\006 \001(\r\022\016\n\006map_id\030\007 \001(\r\022\023\n\013sou"
    "rce_type\030\010 \001(\r\022\020\n\010log_time\030\t \001(\r\"\310\001\n eo_"
    "offline_arena_rank_log_notify\022\020\n\010role_ui"
    "d\030\001 \001(\004\022\021\n\trole_name\030\002 \001(\t\022\022\n\nrole_level"
    "\030\003 \001(\r\022\017\n\007op_type\030\004 \001(\r\022\021\n\told_class\030\005 \001"
    "(\r\022\020\n\010old_rank\030\006 \001(\r\022\021\n\tnew_class\030\007 \001(\r\022"
    "\020\n\010new_rank\030\010 \001(\r\022\020\n\010log_time\030\t \001(\r", 7795);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "log.proto", &protobuf_RegisterTypes);
  no_batch_save_logs_notify::default_instance_ = new no_batch_save_logs_notify();
  go_batch_save_logs_notify::default_instance_ = new go_batch_save_logs_notify();
  eo_batch_save_logs_notify::default_instance_ = new eo_batch_save_logs_notify();
  save_to_log::default_instance_ = new save_to_log();
  no_mobile_log_notify::default_instance_ = new no_mobile_log_notify();
  no_account_log_notify::default_instance_ = new no_account_log_notify();
  do_create_role_log_notify::default_instance_ = new do_create_role_log_notify();
  go_role_login_log_notify::default_instance_ = new go_role_login_log_notify();
  go_role_logout_log_notify::default_instance_ = new go_role_logout_log_notify();
  go_item_log_notify::default_instance_ = new go_item_log_notify();
  go_money_log_notify::default_instance_ = new go_money_log_notify();
  go_luck_gift_log_notify::default_instance_ = new go_luck_gift_log_notify();
  go_hero_log_notify::default_instance_ = new go_hero_log_notify();
  go_task_log_notify::default_instance_ = new go_task_log_notify();
  go_exp_log_notify::default_instance_ = new go_exp_log_notify();
  go_prestige_log_notify::default_instance_ = new go_prestige_log_notify();
  go_user_times_log_notify::default_instance_ = new go_user_times_log_notify();
  eo_country_log_notify::default_instance_ = new eo_country_log_notify();
  eo_family_log_notify::default_instance_ = new eo_family_log_notify();
  eo_friend_log_notify::default_instance_ = new eo_friend_log_notify();
  eo_mail_log_notify::default_instance_ = new eo_mail_log_notify();
  go_pk_log_notify::default_instance_ = new go_pk_log_notify();
  go_shop_log_notify::default_instance_ = new go_shop_log_notify();
  go_random_shop_log_notify::default_instance_ = new go_random_shop_log_notify();
  go_equip_log_notify::default_instance_ = new go_equip_log_notify();
  go_achieve_log_notify::default_instance_ = new go_achieve_log_notify();
  go_lifeforce_log_notify::default_instance_ = new go_lifeforce_log_notify();
  go_dungeon_log_notify::default_instance_ = new go_dungeon_log_notify();
  go_role_buff_log_notify::default_instance_ = new go_role_buff_log_notify();
  eo_goods_log_notify::default_instance_ = new eo_goods_log_notify();
  go_role_new_guide_log_notify::default_instance_ = new go_role_new_guide_log_notify();
  go_role_trade_log_notify::default_instance_ = new go_role_trade_log_notify();
  go_role_recharge_log_notify::default_instance_ = new go_role_recharge_log_notify();
  go_rmb_log_notify::default_instance_ = new go_rmb_log_notify();
  go_expedition_log_notify::default_instance_ = new go_expedition_log_notify();
  eo_scene_log_notify::default_instance_ = new eo_scene_log_notify();
  go_combat_log_notify::default_instance_ = new go_combat_log_notify();
  go_hero_exp_log_notify::default_instance_ = new go_hero_exp_log_notify();
  eo_redbag_log_notify::default_instance_ = new eo_redbag_log_notify();
  go_patrol_hire_log_notify::default_instance_ = new go_patrol_hire_log_notify();
  eo_offline_arena_rank_log_notify::default_instance_ = new eo_offline_arena_rank_log_notify();
  no_batch_save_logs_notify::default_instance_->InitAsDefaultInstance();
  go_batch_save_logs_notify::default_instance_->InitAsDefaultInstance();
  eo_batch_save_logs_notify::default_instance_->InitAsDefaultInstance();
  save_to_log::default_instance_->InitAsDefaultInstance();
  no_mobile_log_notify::default_instance_->InitAsDefaultInstance();
  no_account_log_notify::default_instance_->InitAsDefaultInstance();
  do_create_role_log_notify::default_instance_->InitAsDefaultInstance();
  go_role_login_log_notify::default_instance_->InitAsDefaultInstance();
  go_role_logout_log_notify::default_instance_->InitAsDefaultInstance();
  go_item_log_notify::default_instance_->InitAsDefaultInstance();
  go_money_log_notify::default_instance_->InitAsDefaultInstance();
  go_luck_gift_log_notify::default_instance_->InitAsDefaultInstance();
  go_hero_log_notify::default_instance_->InitAsDefaultInstance();
  go_task_log_notify::default_instance_->InitAsDefaultInstance();
  go_exp_log_notify::default_instance_->InitAsDefaultInstance();
  go_prestige_log_notify::default_instance_->InitAsDefaultInstance();
  go_user_times_log_notify::default_instance_->InitAsDefaultInstance();
  eo_country_log_notify::default_instance_->InitAsDefaultInstance();
  eo_family_log_notify::default_instance_->InitAsDefaultInstance();
  eo_friend_log_notify::default_instance_->InitAsDefaultInstance();
  eo_mail_log_notify::default_instance_->InitAsDefaultInstance();
  go_pk_log_notify::default_instance_->InitAsDefaultInstance();
  go_shop_log_notify::default_instance_->InitAsDefaultInstance();
  go_random_shop_log_notify::default_instance_->InitAsDefaultInstance();
  go_equip_log_notify::default_instance_->InitAsDefaultInstance();
  go_achieve_log_notify::default_instance_->InitAsDefaultInstance();
  go_lifeforce_log_notify::default_instance_->InitAsDefaultInstance();
  go_dungeon_log_notify::default_instance_->InitAsDefaultInstance();
  go_role_buff_log_notify::default_instance_->InitAsDefaultInstance();
  eo_goods_log_notify::default_instance_->InitAsDefaultInstance();
  go_role_new_guide_log_notify::default_instance_->InitAsDefaultInstance();
  go_role_trade_log_notify::default_instance_->InitAsDefaultInstance();
  go_role_recharge_log_notify::default_instance_->InitAsDefaultInstance();
  go_rmb_log_notify::default_instance_->InitAsDefaultInstance();
  go_expedition_log_notify::default_instance_->InitAsDefaultInstance();
  eo_scene_log_notify::default_instance_->InitAsDefaultInstance();
  go_combat_log_notify::default_instance_->InitAsDefaultInstance();
  go_hero_exp_log_notify::default_instance_->InitAsDefaultInstance();
  eo_redbag_log_notify::default_instance_->InitAsDefaultInstance();
  go_patrol_hire_log_notify::default_instance_->InitAsDefaultInstance();
  eo_offline_arena_rank_log_notify::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_log_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_log_2eproto {
  StaticDescriptorInitializer_log_2eproto() {
    protobuf_AddDesc_log_2eproto();
  }
} static_descriptor_initializer_log_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int no_batch_save_logs_notify::kLogsFieldNumber;
#endif  // !_MSC_VER

no_batch_save_logs_notify::no_batch_save_logs_notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void no_batch_save_logs_notify::InitAsDefaultInstance() {
}

no_batch_save_logs_notify::no_batch_save_logs_notify(const no_batch_save_logs_notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void no_batch_save_logs_notify::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

no_batch_save_logs_notify::~no_batch_save_logs_notify() {
  SharedDtor();
}

void no_batch_save_logs_notify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void no_batch_save_logs_notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* no_batch_save_logs_notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return no_batch_save_logs_notify_descriptor_;
}

const no_batch_save_logs_notify& no_batch_save_logs_notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_log_2eproto();
  return *default_instance_;
}

no_batch_save_logs_notify* no_batch_save_logs_notify::default_instance_ = NULL;

no_batch_save_logs_notify* no_batch_save_logs_notify::New() const {
  return new no_batch_save_logs_notify;
}

void no_batch_save_logs_notify::Clear() {
  logs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool no_batch_save_logs_notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.log.save_to_log logs = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_logs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_logs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_logs;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void no_batch_save_logs_notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto.log.save_to_log logs = 1;
  for (int i = 0; i < this->logs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->logs(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* no_batch_save_logs_notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto.log.save_to_log logs = 1;
  for (int i = 0; i < this->logs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->logs(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int no_batch_save_logs_notify::ByteSize() const {
  int total_size = 0;

  // repeated .proto.log.save_to_log logs = 1;
  total_size += 1 * this->logs_size();
  for (int i = 0; i < this->logs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->logs(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void no_batch_save_logs_notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const no_batch_save_logs_notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const no_batch_save_logs_notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void no_batch_save_logs_notify::MergeFrom(const no_batch_save_logs_notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  logs_.MergeFrom(from.logs_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void no_batch_save_logs_notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void no_batch_save_logs_notify::CopyFrom(const no_batch_save_logs_notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool no_batch_save_logs_notify::IsInitialized() const {

  for (int i = 0; i < logs_size(); i++) {
    if (!this->logs(i).IsInitialized()) return false;
  }
  return true;
}

void no_batch_save_logs_notify::Swap(no_batch_save_logs_notify* other) {
  if (other != this) {
    logs_.Swap(&other->logs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata no_batch_save_logs_notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = no_batch_save_logs_notify_descriptor_;
  metadata.reflection = no_batch_save_logs_notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int go_batch_save_logs_notify::kLogsFieldNumber;
#endif  // !_MSC_VER

go_batch_save_logs_notify::go_batch_save_logs_notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void go_batch_save_logs_notify::InitAsDefaultInstance() {
}

go_batch_save_logs_notify::go_batch_save_logs_notify(const go_batch_save_logs_notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void go_batch_save_logs_notify::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

go_batch_save_logs_notify::~go_batch_save_logs_notify() {
  SharedDtor();
}

void go_batch_save_logs_notify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void go_batch_save_logs_notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* go_batch_save_logs_notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return go_batch_save_logs_notify_descriptor_;
}

const go_batch_save_logs_notify& go_batch_save_logs_notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_log_2eproto();
  return *default_instance_;
}

go_batch_save_logs_notify* go_batch_save_logs_notify::default_instance_ = NULL;

go_batch_save_logs_notify* go_batch_save_logs_notify::New() const {
  return new go_batch_save_logs_notify;
}

void go_batch_save_logs_notify::Clear() {
  logs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool go_batch_save_logs_notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.log.save_to_log logs = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_logs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_logs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_logs;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void go_batch_save_logs_notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto.log.save_to_log logs = 1;
  for (int i = 0; i < this->logs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->logs(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* go_batch_save_logs_notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto.log.save_to_log logs = 1;
  for (int i = 0; i < this->logs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->logs(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int go_batch_save_logs_notify::ByteSize() const {
  int total_size = 0;

  // repeated .proto.log.save_to_log logs = 1;
  total_size += 1 * this->logs_size();
  for (int i = 0; i < this->logs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->logs(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void go_batch_save_logs_notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const go_batch_save_logs_notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const go_batch_save_logs_notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void go_batch_save_logs_notify::MergeFrom(const go_batch_save_logs_notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  logs_.MergeFrom(from.logs_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void go_batch_save_logs_notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void go_batch_save_logs_notify::CopyFrom(const go_batch_save_logs_notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool go_batch_save_logs_notify::IsInitialized() const {

  for (int i = 0; i < logs_size(); i++) {
    if (!this->logs(i).IsInitialized()) return false;
  }
  return true;
}

void go_batch_save_logs_notify::Swap(go_batch_save_logs_notify* other) {
  if (other != this) {
    logs_.Swap(&other->logs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata go_batch_save_logs_notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = go_batch_save_logs_notify_descriptor_;
  metadata.reflection = go_batch_save_logs_notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int eo_batch_save_logs_notify::kLogsFieldNumber;
#endif  // !_MSC_VER

eo_batch_save_logs_notify::eo_batch_save_logs_notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void eo_batch_save_logs_notify::InitAsDefaultInstance() {
}

eo_batch_save_logs_notify::eo_batch_save_logs_notify(const eo_batch_save_logs_notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void eo_batch_save_logs_notify::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

eo_batch_save_logs_notify::~eo_batch_save_logs_notify() {
  SharedDtor();
}

void eo_batch_save_logs_notify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void eo_batch_save_logs_notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* eo_batch_save_logs_notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return eo_batch_save_logs_notify_descriptor_;
}

const eo_batch_save_logs_notify& eo_batch_save_logs_notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_log_2eproto();
  return *default_instance_;
}

eo_batch_save_logs_notify* eo_batch_save_logs_notify::default_instance_ = NULL;

eo_batch_save_logs_notify* eo_batch_save_logs_notify::New() const {
  return new eo_batch_save_logs_notify;
}

void eo_batch_save_logs_notify::Clear() {
  logs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool eo_batch_save_logs_notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.log.save_to_log logs = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_logs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_logs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_logs;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void eo_batch_save_logs_notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto.log.save_to_log logs = 1;
  for (int i = 0; i < this->logs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->logs(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* eo_batch_save_logs_notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto.log.save_to_log logs = 1;
  for (int i = 0; i < this->logs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->logs(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int eo_batch_save_logs_notify::ByteSize() const {
  int total_size = 0;

  // repeated .proto.log.save_to_log logs = 1;
  total_size += 1 * this->logs_size();
  for (int i = 0; i < this->logs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->logs(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void eo_batch_save_logs_notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const eo_batch_save_logs_notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const eo_batch_save_logs_notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void eo_batch_save_logs_notify::MergeFrom(const eo_batch_save_logs_notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  logs_.MergeFrom(from.logs_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void eo_batch_save_logs_notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void eo_batch_save_logs_notify::CopyFrom(const eo_batch_save_logs_notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool eo_batch_save_logs_notify::IsInitialized() const {

  for (int i = 0; i < logs_size(); i++) {
    if (!this->logs(i).IsInitialized()) return false;
  }
  return true;
}

void eo_batch_save_logs_notify::Swap(eo_batch_save_logs_notify* other) {
  if (other != this) {
    logs_.Swap(&other->logs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata eo_batch_save_logs_notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = eo_batch_save_logs_notify_descriptor_;
  metadata.reflection = eo_batch_save_logs_notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int save_to_log::kCmdFieldNumber;
const int save_to_log::kDataFieldNumber;
#endif  // !_MSC_VER

save_to_log::save_to_log()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void save_to_log::InitAsDefaultInstance() {
}

save_to_log::save_to_log(const save_to_log& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void save_to_log::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 0u;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

save_to_log::~save_to_log() {
  SharedDtor();
}

void save_to_log::SharedDtor() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void save_to_log::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* save_to_log::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return save_to_log_descriptor_;
}

const save_to_log& save_to_log::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_log_2eproto();
  return *default_instance_;
}

save_to_log* save_to_log::default_instance_ = NULL;

save_to_log* save_to_log::New() const {
  return new save_to_log;
}

void save_to_log::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cmd_ = 0u;
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::kEmptyString) {
        data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool save_to_log::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 cmd = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cmd_)));
          set_has_cmd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // required bytes data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void save_to_log::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 cmd = 1;
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cmd(), output);
  }

  // required bytes data = 2;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* save_to_log::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 cmd = 1;
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->cmd(), target);
  }

  // required bytes data = 2;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int save_to_log::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 cmd = 1;
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cmd());
    }

    // required bytes data = 2;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void save_to_log::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const save_to_log* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const save_to_log*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void save_to_log::MergeFrom(const save_to_log& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void save_to_log::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void save_to_log::CopyFrom(const save_to_log& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool save_to_log::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void save_to_log::Swap(save_to_log* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata save_to_log::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = save_to_log_descriptor_;
  metadata.reflection = save_to_log_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int no_mobile_log_notify::kUuidFieldNumber;
const int no_mobile_log_notify::kDeviceModelFieldNumber;
const int no_mobile_log_notify::kDeviceSysVersionFieldNumber;
const int no_mobile_log_notify::kCpuTypeFieldNumber;
const int no_mobile_log_notify::kCpuCountFieldNumber;
const int no_mobile_log_notify::kMemorySizeFieldNumber;
const int no_mobile_log_notify::kGrphDeviceNameFieldNumber;
const int no_mobile_log_notify::kLogTimeFieldNumber;
#endif  // !_MSC_VER

no_mobile_log_notify::no_mobile_log_notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void no_mobile_log_notify::InitAsDefaultInstance() {
}

no_mobile_log_notify::no_mobile_log_notify(const no_mobile_log_notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void no_mobile_log_notify::SharedCtor() {
  _cached_size_ = 0;
  uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  device_model_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  device_sys_version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  cpu_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  cpu_count_ = 0;
  memory_size_ = 0;
  grph_device_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  log_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

no_mobile_log_notify::~no_mobile_log_notify() {
  SharedDtor();
}

void no_mobile_log_notify::SharedDtor() {
  if (uuid_ != &::google::protobuf::internal::kEmptyString) {
    delete uuid_;
  }
  if (device_model_ != &::google::protobuf::internal::kEmptyString) {
    delete device_model_;
  }
  if (device_sys_version_ != &::google::protobuf::internal::kEmptyString) {
    delete device_sys_version_;
  }
  if (cpu_type_ != &::google::protobuf::internal::kEmptyString) {
    delete cpu_type_;
  }
  if (grph_device_name_ != &::google::protobuf::internal::kEmptyString) {
    delete grph_device_name_;
  }
  if (this != default_instance_) {
  }
}

void no_mobile_log_notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* no_mobile_log_notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return no_mobile_log_notify_descriptor_;
}

const no_mobile_log_notify& no_mobile_log_notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_log_2eproto();
  return *default_instance_;
}

no_mobile_log_notify* no_mobile_log_notify::default_instance_ = NULL;

no_mobile_log_notify* no_mobile_log_notify::New() const {
  return new no_mobile_log_notify;
}

void no_mobile_log_notify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_uuid()) {
      if (uuid_ != &::google::protobuf::internal::kEmptyString) {
        uuid_->clear();
      }
    }
    if (has_device_model()) {
      if (device_model_ != &::google::protobuf::internal::kEmptyString) {
        device_model_->clear();
      }
    }
    if (has_device_sys_version()) {
      if (device_sys_version_ != &::google::protobuf::internal::kEmptyString) {
        device_sys_version_->clear();
      }
    }
    if (has_cpu_type()) {
      if (cpu_type_ != &::google::protobuf::internal::kEmptyString) {
        cpu_type_->clear();
      }
    }
    cpu_count_ = 0;
    memory_size_ = 0;
    if (has_grph_device_name()) {
      if (grph_device_name_ != &::google::protobuf::internal::kEmptyString) {
        grph_device_name_->clear();
      }
    }
    log_time_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool no_mobile_log_notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string uuid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->uuid().data(), this->uuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_device_model;
        break;
      }

      // optional string device_model = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_device_model:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device_model()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->device_model().data(), this->device_model().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_device_sys_version;
        break;
      }

      // optional string device_sys_version = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_device_sys_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device_sys_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->device_sys_version().data(), this->device_sys_version().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_cpu_type;
        break;
      }

      // optional string cpu_type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cpu_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cpu_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->cpu_type().data(), this->cpu_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_cpu_count;
        break;
      }

      // optional int32 cpu_count = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cpu_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cpu_count_)));
          set_has_cpu_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_memory_size;
        break;
      }

      // optional int32 memory_size = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_memory_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &memory_size_)));
          set_has_memory_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_grph_device_name;
        break;
      }

      // optional string grph_device_name = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_grph_device_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_grph_device_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->grph_device_name().data(), this->grph_device_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_log_time;
        break;
      }

      // optional uint32 log_time = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_log_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &log_time_)));
          set_has_log_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void no_mobile_log_notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string uuid = 1;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uuid().data(), this->uuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->uuid(), output);
  }

  // optional string device_model = 2;
  if (has_device_model()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->device_model().data(), this->device_model().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->device_model(), output);
  }

  // optional string device_sys_version = 3;
  if (has_device_sys_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->device_sys_version().data(), this->device_sys_version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->device_sys_version(), output);
  }

  // optional string cpu_type = 4;
  if (has_cpu_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cpu_type().data(), this->cpu_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->cpu_type(), output);
  }

  // optional int32 cpu_count = 5;
  if (has_cpu_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->cpu_count(), output);
  }

  // optional int32 memory_size = 6;
  if (has_memory_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->memory_size(), output);
  }

  // optional string grph_device_name = 7;
  if (has_grph_device_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->grph_device_name().data(), this->grph_device_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->grph_device_name(), output);
  }

  // optional uint32 log_time = 8;
  if (has_log_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->log_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* no_mobile_log_notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string uuid = 1;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uuid().data(), this->uuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->uuid(), target);
  }

  // optional string device_model = 2;
  if (has_device_model()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->device_model().data(), this->device_model().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->device_model(), target);
  }

  // optional string device_sys_version = 3;
  if (has_device_sys_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->device_sys_version().data(), this->device_sys_version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->device_sys_version(), target);
  }

  // optional string cpu_type = 4;
  if (has_cpu_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cpu_type().data(), this->cpu_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->cpu_type(), target);
  }

  // optional int32 cpu_count = 5;
  if (has_cpu_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->cpu_count(), target);
  }

  // optional int32 memory_size = 6;
  if (has_memory_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->memory_size(), target);
  }

  // optional string grph_device_name = 7;
  if (has_grph_device_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->grph_device_name().data(), this->grph_device_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->grph_device_name(), target);
  }

  // optional uint32 log_time = 8;
  if (has_log_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->log_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int no_mobile_log_notify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string uuid = 1;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uuid());
    }

    // optional string device_model = 2;
    if (has_device_model()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->device_model());
    }

    // optional string device_sys_version = 3;
    if (has_device_sys_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->device_sys_version());
    }

    // optional string cpu_type = 4;
    if (has_cpu_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cpu_type());
    }

    // optional int32 cpu_count = 5;
    if (has_cpu_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cpu_count());
    }

    // optional int32 memory_size = 6;
    if (has_memory_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->memory_size());
    }

    // optional string grph_device_name = 7;
    if (has_grph_device_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->grph_device_name());
    }

    // optional uint32 log_time = 8;
    if (has_log_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->log_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void no_mobile_log_notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const no_mobile_log_notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const no_mobile_log_notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void no_mobile_log_notify::MergeFrom(const no_mobile_log_notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
    if (from.has_device_model()) {
      set_device_model(from.device_model());
    }
    if (from.has_device_sys_version()) {
      set_device_sys_version(from.device_sys_version());
    }
    if (from.has_cpu_type()) {
      set_cpu_type(from.cpu_type());
    }
    if (from.has_cpu_count()) {
      set_cpu_count(from.cpu_count());
    }
    if (from.has_memory_size()) {
      set_memory_size(from.memory_size());
    }
    if (from.has_grph_device_name()) {
      set_grph_device_name(from.grph_device_name());
    }
    if (from.has_log_time()) {
      set_log_time(from.log_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void no_mobile_log_notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void no_mobile_log_notify::CopyFrom(const no_mobile_log_notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool no_mobile_log_notify::IsInitialized() const {

  return true;
}

void no_mobile_log_notify::Swap(no_mobile_log_notify* other) {
  if (other != this) {
    std::swap(uuid_, other->uuid_);
    std::swap(device_model_, other->device_model_);
    std::swap(device_sys_version_, other->device_sys_version_);
    std::swap(cpu_type_, other->cpu_type_);
    std::swap(cpu_count_, other->cpu_count_);
    std::swap(memory_size_, other->memory_size_);
    std::swap(grph_device_name_, other->grph_device_name_);
    std::swap(log_time_, other->log_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata no_mobile_log_notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = no_mobile_log_notify_descriptor_;
  metadata.reflection = no_mobile_log_notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int no_account_log_notify::kAccountUidFieldNumber;
const int no_account_log_notify::kChannelIdFieldNumber;
const int no_account_log_notify::kRoleUidFieldNumber;
const int no_account_log_notify::kMobileUuidFieldNumber;
const int no_account_log_notify::kSourceTypeFieldNumber;
const int no_account_log_notify::kLogTimeFieldNumber;
#endif  // !_MSC_VER

no_account_log_notify::no_account_log_notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void no_account_log_notify::InitAsDefaultInstance() {
}

no_account_log_notify::no_account_log_notify(const no_account_log_notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void no_account_log_notify::SharedCtor() {
  _cached_size_ = 0;
  account_uid_ = GOOGLE_ULONGLONG(0);
  channel_id_ = 0u;
  role_uid_ = GOOGLE_ULONGLONG(0);
  mobile_uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  source_type_ = 0u;
  log_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

no_account_log_notify::~no_account_log_notify() {
  SharedDtor();
}

void no_account_log_notify::SharedDtor() {
  if (mobile_uuid_ != &::google::protobuf::internal::kEmptyString) {
    delete mobile_uuid_;
  }
  if (this != default_instance_) {
  }
}

void no_account_log_notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* no_account_log_notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return no_account_log_notify_descriptor_;
}

const no_account_log_notify& no_account_log_notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_log_2eproto();
  return *default_instance_;
}

no_account_log_notify* no_account_log_notify::default_instance_ = NULL;

no_account_log_notify* no_account_log_notify::New() const {
  return new no_account_log_notify;
}

void no_account_log_notify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    account_uid_ = GOOGLE_ULONGLONG(0);
    channel_id_ = 0u;
    role_uid_ = GOOGLE_ULONGLONG(0);
    if (has_mobile_uuid()) {
      if (mobile_uuid_ != &::google::protobuf::internal::kEmptyString) {
        mobile_uuid_->clear();
      }
    }
    source_type_ = 0u;
    log_time_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool no_account_log_notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 account_uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &account_uid_)));
          set_has_account_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_channel_id;
        break;
      }

      // optional uint32 channel_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_channel_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channel_id_)));
          set_has_channel_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_role_uid;
        break;
      }

      // optional uint64 role_uid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_uid_)));
          set_has_role_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_mobile_uuid;
        break;
      }

      // optional string mobile_uuid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mobile_uuid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mobile_uuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->mobile_uuid().data(), this->mobile_uuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_source_type;
        break;
      }

      // optional uint32 source_type = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_source_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &source_type_)));
          set_has_source_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_log_time;
        break;
      }

      // optional uint32 log_time = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_log_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &log_time_)));
          set_has_log_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void no_account_log_notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 account_uid = 1;
  if (has_account_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->account_uid(), output);
  }

  // optional uint32 channel_id = 2;
  if (has_channel_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->channel_id(), output);
  }

  // optional uint64 role_uid = 3;
  if (has_role_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->role_uid(), output);
  }

  // optional string mobile_uuid = 4;
  if (has_mobile_uuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mobile_uuid().data(), this->mobile_uuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->mobile_uuid(), output);
  }

  // optional uint32 source_type = 5;
  if (has_source_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->source_type(), output);
  }

  // optional uint32 log_time = 6;
  if (has_log_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->log_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* no_account_log_notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 account_uid = 1;
  if (has_account_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->account_uid(), target);
  }

  // optional uint32 channel_id = 2;
  if (has_channel_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->channel_id(), target);
  }

  // optional uint64 role_uid = 3;
  if (has_role_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->role_uid(), target);
  }

  // optional string mobile_uuid = 4;
  if (has_mobile_uuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mobile_uuid().data(), this->mobile_uuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->mobile_uuid(), target);
  }

  // optional uint32 source_type = 5;
  if (has_source_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->source_type(), target);
  }

  // optional uint32 log_time = 6;
  if (has_log_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->log_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int no_account_log_notify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 account_uid = 1;
    if (has_account_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->account_uid());
    }

    // optional uint32 channel_id = 2;
    if (has_channel_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channel_id());
    }

    // optional uint64 role_uid = 3;
    if (has_role_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_uid());
    }

    // optional string mobile_uuid = 4;
    if (has_mobile_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mobile_uuid());
    }

    // optional uint32 source_type = 5;
    if (has_source_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->source_type());
    }

    // optional uint32 log_time = 6;
    if (has_log_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->log_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void no_account_log_notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const no_account_log_notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const no_account_log_notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void no_account_log_notify::MergeFrom(const no_account_log_notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account_uid()) {
      set_account_uid(from.account_uid());
    }
    if (from.has_channel_id()) {
      set_channel_id(from.channel_id());
    }
    if (from.has_role_uid()) {
      set_role_uid(from.role_uid());
    }
    if (from.has_mobile_uuid()) {
      set_mobile_uuid(from.mobile_uuid());
    }
    if (from.has_source_type()) {
      set_source_type(from.source_type());
    }
    if (from.has_log_time()) {
      set_log_time(from.log_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void no_account_log_notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void no_account_log_notify::CopyFrom(const no_account_log_notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool no_account_log_notify::IsInitialized() const {

  return true;
}

void no_account_log_notify::Swap(no_account_log_notify* other) {
  if (other != this) {
    std::swap(account_uid_, other->account_uid_);
    std::swap(channel_id_, other->channel_id_);
    std::swap(role_uid_, other->role_uid_);
    std::swap(mobile_uuid_, other->mobile_uuid_);
    std::swap(source_type_, other->source_type_);
    std::swap(log_time_, other->log_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata no_account_log_notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = no_account_log_notify_descriptor_;
  metadata.reflection = no_account_log_notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int do_create_role_log_notify::kRoleUidFieldNumber;
const int do_create_role_log_notify::kNicknameFieldNumber;
const int do_create_role_log_notify::kMobileFieldNumber;
const int do_create_role_log_notify::kLogTimeFieldNumber;
#endif  // !_MSC_VER

do_create_role_log_notify::do_create_role_log_notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void do_create_role_log_notify::InitAsDefaultInstance() {
  mobile_ = const_cast< ::proto::common::mobile_info*>(&::proto::common::mobile_info::default_instance());
}

do_create_role_log_notify::do_create_role_log_notify(const do_create_role_log_notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void do_create_role_log_notify::SharedCtor() {
  _cached_size_ = 0;
  role_uid_ = GOOGLE_ULONGLONG(0);
  nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  mobile_ = NULL;
  log_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

do_create_role_log_notify::~do_create_role_log_notify() {
  SharedDtor();
}

void do_create_role_log_notify::SharedDtor() {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    delete nickname_;
  }
  if (this != default_instance_) {
    delete mobile_;
  }
}

void do_create_role_log_notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* do_create_role_log_notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return do_create_role_log_notify_descriptor_;
}

const do_create_role_log_notify& do_create_role_log_notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_log_2eproto();
  return *default_instance_;
}

do_create_role_log_notify* do_create_role_log_notify::default_instance_ = NULL;

do_create_role_log_notify* do_create_role_log_notify::New() const {
  return new do_create_role_log_notify;
}

void do_create_role_log_notify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_uid_ = GOOGLE_ULONGLONG(0);
    if (has_nickname()) {
      if (nickname_ != &::google::protobuf::internal::kEmptyString) {
        nickname_->clear();
      }
    }
    if (has_mobile()) {
      if (mobile_ != NULL) mobile_->::proto::common::mobile_info::Clear();
    }
    log_time_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool do_create_role_log_notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 role_uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_uid_)));
          set_has_role_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_nickname;
        break;
      }

      // required string nickname = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nickname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->nickname().data(), this->nickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_mobile;
        break;
      }

      // required .proto.common.mobile_info mobile = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mobile:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mobile()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_log_time;
        break;
      }

      // required uint32 log_time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_log_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &log_time_)));
          set_has_log_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void do_create_role_log_notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 role_uid = 1;
  if (has_role_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->role_uid(), output);
  }

  // required string nickname = 2;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->nickname(), output);
  }

  // required .proto.common.mobile_info mobile = 3;
  if (has_mobile()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->mobile(), output);
  }

  // required uint32 log_time = 4;
  if (has_log_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->log_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* do_create_role_log_notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 role_uid = 1;
  if (has_role_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->role_uid(), target);
  }

  // required string nickname = 2;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->nickname(), target);
  }

  // required .proto.common.mobile_info mobile = 3;
  if (has_mobile()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->mobile(), target);
  }

  // required uint32 log_time = 4;
  if (has_log_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->log_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int do_create_role_log_notify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 role_uid = 1;
    if (has_role_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_uid());
    }

    // required string nickname = 2;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }

    // required .proto.common.mobile_info mobile = 3;
    if (has_mobile()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mobile());
    }

    // required uint32 log_time = 4;
    if (has_log_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->log_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void do_create_role_log_notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const do_create_role_log_notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const do_create_role_log_notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void do_create_role_log_notify::MergeFrom(const do_create_role_log_notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_uid()) {
      set_role_uid(from.role_uid());
    }
    if (from.has_nickname()) {
      set_nickname(from.nickname());
    }
    if (from.has_mobile()) {
      mutable_mobile()->::proto::common::mobile_info::MergeFrom(from.mobile());
    }
    if (from.has_log_time()) {
      set_log_time(from.log_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void do_create_role_log_notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void do_create_role_log_notify::CopyFrom(const do_create_role_log_notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool do_create_role_log_notify::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void do_create_role_log_notify::Swap(do_create_role_log_notify* other) {
  if (other != this) {
    std::swap(role_uid_, other->role_uid_);
    std::swap(nickname_, other->nickname_);
    std::swap(mobile_, other->mobile_);
    std::swap(log_time_, other->log_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata do_create_role_log_notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = do_create_role_log_notify_descriptor_;
  metadata.reflection = do_create_role_log_notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int go_role_login_log_notify::kRoleUidFieldNumber;
const int go_role_login_log_notify::kGateIdFieldNumber;
const int go_role_login_log_notify::kGameIdFieldNumber;
const int go_role_login_log_notify::kMobileFieldNumber;
const int go_role_login_log_notify::kLogTimeFieldNumber;
#endif  // !_MSC_VER

go_role_login_log_notify::go_role_login_log_notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void go_role_login_log_notify::InitAsDefaultInstance() {
  mobile_ = const_cast< ::proto::common::mobile_info*>(&::proto::common::mobile_info::default_instance());
}

go_role_login_log_notify::go_role_login_log_notify(const go_role_login_log_notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void go_role_login_log_notify::SharedCtor() {
  _cached_size_ = 0;
  role_uid_ = GOOGLE_ULONGLONG(0);
  gate_id_ = 0u;
  game_id_ = 0u;
  mobile_ = NULL;
  log_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

go_role_login_log_notify::~go_role_login_log_notify() {
  SharedDtor();
}

void go_role_login_log_notify::SharedDtor() {
  if (this != default_instance_) {
    delete mobile_;
  }
}

void go_role_login_log_notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* go_role_login_log_notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return go_role_login_log_notify_descriptor_;
}

const go_role_login_log_notify& go_role_login_log_notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_log_2eproto();
  return *default_instance_;
}

go_role_login_log_notify* go_role_login_log_notify::default_instance_ = NULL;

go_role_login_log_notify* go_role_login_log_notify::New() const {
  return new go_role_login_log_notify;
}

void go_role_login_log_notify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_uid_ = GOOGLE_ULONGLONG(0);
    gate_id_ = 0u;
    game_id_ = 0u;
    if (has_mobile()) {
      if (mobile_ != NULL) mobile_->::proto::common::mobile_info::Clear();
    }
    log_time_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool go_role_login_log_notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 role_uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_uid_)));
          set_has_role_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gate_id;
        break;
      }

      // required uint32 gate_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gate_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gate_id_)));
          set_has_gate_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_game_id;
        break;
      }

      // required uint32 game_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_game_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_id_)));
          set_has_game_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_mobile;
        break;
      }

      // optional .proto.common.mobile_info mobile = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mobile:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mobile()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_log_time;
        break;
      }

      // required uint32 log_time = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_log_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &log_time_)));
          set_has_log_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void go_role_login_log_notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 role_uid = 1;
  if (has_role_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->role_uid(), output);
  }

  // required uint32 gate_id = 2;
  if (has_gate_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->gate_id(), output);
  }

  // required uint32 game_id = 3;
  if (has_game_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->game_id(), output);
  }

  // optional .proto.common.mobile_info mobile = 4;
  if (has_mobile()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->mobile(), output);
  }

  // required uint32 log_time = 5;
  if (has_log_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->log_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* go_role_login_log_notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 role_uid = 1;
  if (has_role_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->role_uid(), target);
  }

  // required uint32 gate_id = 2;
  if (has_gate_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->gate_id(), target);
  }

  // required uint32 game_id = 3;
  if (has_game_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->game_id(), target);
  }

  // optional .proto.common.mobile_info mobile = 4;
  if (has_mobile()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->mobile(), target);
  }

  // required uint32 log_time = 5;
  if (has_log_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->log_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int go_role_login_log_notify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 role_uid = 1;
    if (has_role_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_uid());
    }

    // required uint32 gate_id = 2;
    if (has_gate_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gate_id());
    }

    // required uint32 game_id = 3;
    if (has_game_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_id());
    }

    // optional .proto.common.mobile_info mobile = 4;
    if (has_mobile()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mobile());
    }

    // required uint32 log_time = 5;
    if (has_log_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->log_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void go_role_login_log_notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const go_role_login_log_notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const go_role_login_log_notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void go_role_login_log_notify::MergeFrom(const go_role_login_log_notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_uid()) {
      set_role_uid(from.role_uid());
    }
    if (from.has_gate_id()) {
      set_gate_id(from.gate_id());
    }
    if (from.has_game_id()) {
      set_game_id(from.game_id());
    }
    if (from.has_mobile()) {
      mutable_mobile()->::proto::common::mobile_info::MergeFrom(from.mobile());
    }
    if (from.has_log_time()) {
      set_log_time(from.log_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void go_role_login_log_notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void go_role_login_log_notify::CopyFrom(const go_role_login_log_notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool go_role_login_log_notify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000017) != 0x00000017) return false;

  return true;
}

void go_role_login_log_notify::Swap(go_role_login_log_notify* other) {
  if (other != this) {
    std::swap(role_uid_, other->role_uid_);
    std::swap(gate_id_, other->gate_id_);
    std::swap(game_id_, other->game_id_);
    std::swap(mobile_, other->mobile_);
    std::swap(log_time_, other->log_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata go_role_login_log_notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = go_role_login_log_notify_descriptor_;
  metadata.reflection = go_role_login_log_notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int go_role_logout_log_notify::kRoleUidFieldNumber;
const int go_role_logout_log_notify::kOnlineTimeFieldNumber;
const int go_role_logout_log_notify::kGateIdFieldNumber;
const int go_role_logout_log_notify::kGameIdFieldNumber;
const int go_role_logout_log_notify::kKickReasonFieldNumber;
const int go_role_logout_log_notify::kMobileFieldNumber;
const int go_role_logout_log_notify::kLogTimeFieldNumber;
#endif  // !_MSC_VER

go_role_logout_log_notify::go_role_logout_log_notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void go_role_logout_log_notify::InitAsDefaultInstance() {
  mobile_ = const_cast< ::proto::common::mobile_info*>(&::proto::common::mobile_info::default_instance());
}

go_role_logout_log_notify::go_role_logout_log_notify(const go_role_logout_log_notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void go_role_logout_log_notify::SharedCtor() {
  _cached_size_ = 0;
  role_uid_ = GOOGLE_ULONGLONG(0);
  online_time_ = 0u;
  gate_id_ = 0u;
  game_id_ = 0u;
  kick_reason_ = 0u;
  mobile_ = NULL;
  log_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

go_role_logout_log_notify::~go_role_logout_log_notify() {
  SharedDtor();
}

void go_role_logout_log_notify::SharedDtor() {
  if (this != default_instance_) {
    delete mobile_;
  }
}

void go_role_logout_log_notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* go_role_logout_log_notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return go_role_logout_log_notify_descriptor_;
}

const go_role_logout_log_notify& go_role_logout_log_notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_log_2eproto();
  return *default_instance_;
}

go_role_logout_log_notify* go_role_logout_log_notify::default_instance_ = NULL;

go_role_logout_log_notify* go_role_logout_log_notify::New() const {
  return new go_role_logout_log_notify;
}

void go_role_logout_log_notify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_uid_ = GOOGLE_ULONGLONG(0);
    online_time_ = 0u;
    gate_id_ = 0u;
    game_id_ = 0u;
    kick_reason_ = 0u;
    if (has_mobile()) {
      if (mobile_ != NULL) mobile_->::proto::common::mobile_info::Clear();
    }
    log_time_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool go_role_logout_log_notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 role_uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_uid_)));
          set_has_role_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_online_time;
        break;
      }

      // required uint32 online_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_online_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &online_time_)));
          set_has_online_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_gate_id;
        break;
      }

      // required uint32 gate_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gate_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gate_id_)));
          set_has_gate_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_game_id;
        break;
      }

      // required uint32 game_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_game_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_id_)));
          set_has_game_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_kick_reason;
        break;
      }

      // required uint32 kick_reason = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_kick_reason:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &kick_reason_)));
          set_has_kick_reason();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_mobile;
        break;
      }

      // optional .proto.common.mobile_info mobile = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mobile:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mobile()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_log_time;
        break;
      }

      // required uint32 log_time = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_log_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &log_time_)));
          set_has_log_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void go_role_logout_log_notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 role_uid = 1;
  if (has_role_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->role_uid(), output);
  }

  // required uint32 online_time = 2;
  if (has_online_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->online_time(), output);
  }

  // required uint32 gate_id = 3;
  if (has_gate_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->gate_id(), output);
  }

  // required uint32 game_id = 4;
  if (has_game_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->game_id(), output);
  }

  // required uint32 kick_reason = 5;
  if (has_kick_reason()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->kick_reason(), output);
  }

  // optional .proto.common.mobile_info mobile = 6;
  if (has_mobile()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->mobile(), output);
  }

  // required uint32 log_time = 7;
  if (has_log_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->log_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* go_role_logout_log_notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 role_uid = 1;
  if (has_role_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->role_uid(), target);
  }

  // required uint32 online_time = 2;
  if (has_online_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->online_time(), target);
  }

  // required uint32 gate_id = 3;
  if (has_gate_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->gate_id(), target);
  }

  // required uint32 game_id = 4;
  if (has_game_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->game_id(), target);
  }

  // required uint32 kick_reason = 5;
  if (has_kick_reason()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->kick_reason(), target);
  }

  // optional .proto.common.mobile_info mobile = 6;
  if (has_mobile()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->mobile(), target);
  }

  // required uint32 log_time = 7;
  if (has_log_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->log_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int go_role_logout_log_notify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 role_uid = 1;
    if (has_role_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_uid());
    }

    // required uint32 online_time = 2;
    if (has_online_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->online_time());
    }

    // required uint32 gate_id = 3;
    if (has_gate_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gate_id());
    }

    // required uint32 game_id = 4;
    if (has_game_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_id());
    }

    // required uint32 kick_reason = 5;
    if (has_kick_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->kick_reason());
    }

    // optional .proto.common.mobile_info mobile = 6;
    if (has_mobile()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mobile());
    }

    // required uint32 log_time = 7;
    if (has_log_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->log_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void go_role_logout_log_notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const go_role_logout_log_notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const go_role_logout_log_notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void go_role_logout_log_notify::MergeFrom(const go_role_logout_log_notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_uid()) {
      set_role_uid(from.role_uid());
    }
    if (from.has_online_time()) {
      set_online_time(from.online_time());
    }
    if (from.has_gate_id()) {
      set_gate_id(from.gate_id());
    }
    if (from.has_game_id()) {
      set_game_id(from.game_id());
    }
    if (from.has_kick_reason()) {
      set_kick_reason(from.kick_reason());
    }
    if (from.has_mobile()) {
      mutable_mobile()->::proto::common::mobile_info::MergeFrom(from.mobile());
    }
    if (from.has_log_time()) {
      set_log_time(from.log_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void go_role_logout_log_notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void go_role_logout_log_notify::CopyFrom(const go_role_logout_log_notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool go_role_logout_log_notify::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000005f) != 0x0000005f) return false;

  return true;
}

void go_role_logout_log_notify::Swap(go_role_logout_log_notify* other) {
  if (other != this) {
    std::swap(role_uid_, other->role_uid_);
    std::swap(online_time_, other->online_time_);
    std::swap(gate_id_, other->gate_id_);
    std::swap(game_id_, other->game_id_);
    std::swap(kick_reason_, other->kick_reason_);
    std::swap(mobile_, other->mobile_);
    std::swap(log_time_, other->log_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata go_role_logout_log_notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = go_role_logout_log_notify_descriptor_;
  metadata.reflection = go_role_logout_log_notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int go_item_log_notify::kRoleUidFieldNumber;
const int go_item_log_notify::kRoleLevelFieldNumber;
const int go_item_log_notify::kItemUidFieldNumber;
const int go_item_log_notify::kItemTidFieldNumber;
const int go_item_log_notify::kOldNumFieldNumber;
const int go_item_log_notify::kUpNumFieldNumber;
const int go_item_log_notify::kNewNumFieldNumber;
const int go_item_log_notify::kOpTypeFieldNumber;
const int go_item_log_notify::kSourceTypeFieldNumber;
const int go_item_log_notify::kSourceParamFieldNumber;
const int go_item_log_notify::kLogTimeFieldNumber;
#endif  // !_MSC_VER

go_item_log_notify::go_item_log_notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void go_item_log_notify::InitAsDefaultInstance() {
}

go_item_log_notify::go_item_log_notify(const go_item_log_notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void go_item_log_notify::SharedCtor() {
  _cached_size_ = 0;
  role_uid_ = GOOGLE_ULONGLONG(0);
  role_level_ = 0u;
  item_uid_ = GOOGLE_ULONGLONG(0);
  item_tid_ = 0u;
  old_num_ = 0u;
  up_num_ = 0u;
  new_num_ = 0u;
  op_type_ = 0u;
  source_type_ = 0u;
  source_param_ = 0u;
  log_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

go_item_log_notify::~go_item_log_notify() {
  SharedDtor();
}

void go_item_log_notify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void go_item_log_notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* go_item_log_notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return go_item_log_notify_descriptor_;
}

const go_item_log_notify& go_item_log_notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_log_2eproto();
  return *default_instance_;
}

go_item_log_notify* go_item_log_notify::default_instance_ = NULL;

go_item_log_notify* go_item_log_notify::New() const {
  return new go_item_log_notify;
}

void go_item_log_notify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_uid_ = GOOGLE_ULONGLONG(0);
    role_level_ = 0u;
    item_uid_ = GOOGLE_ULONGLONG(0);
    item_tid_ = 0u;
    old_num_ = 0u;
    up_num_ = 0u;
    new_num_ = 0u;
    op_type_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    source_type_ = 0u;
    source_param_ = 0u;
    log_time_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool go_item_log_notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 role_uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_uid_)));
          set_has_role_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_role_level;
        break;
      }

      // required uint32 role_level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_level_)));
          set_has_role_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_item_uid;
        break;
      }

      // required uint64 item_uid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &item_uid_)));
          set_has_item_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_item_tid;
        break;
      }

      // required uint32 item_tid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_tid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_tid_)));
          set_has_item_tid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_old_num;
        break;
      }

      // optional uint32 old_num = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_old_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &old_num_)));
          set_has_old_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_up_num;
        break;
      }

      // optional uint32 up_num = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_up_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &up_num_)));
          set_has_up_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_new_num;
        break;
      }

      // optional uint32 new_num = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_new_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &new_num_)));
          set_has_new_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_op_type;
        break;
      }

      // required uint32 op_type = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_op_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &op_type_)));
          set_has_op_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_source_type;
        break;
      }

      // required uint32 source_type = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_source_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &source_type_)));
          set_has_source_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_source_param;
        break;
      }

      // optional uint32 source_param = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_source_param:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &source_param_)));
          set_has_source_param();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_log_time;
        break;
      }

      // required uint32 log_time = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_log_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &log_time_)));
          set_has_log_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void go_item_log_notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 role_uid = 1;
  if (has_role_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->role_uid(), output);
  }

  // required uint32 role_level = 2;
  if (has_role_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->role_level(), output);
  }

  // required uint64 item_uid = 3;
  if (has_item_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->item_uid(), output);
  }

  // required uint32 item_tid = 4;
  if (has_item_tid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->item_tid(), output);
  }

  // optional uint32 old_num = 5;
  if (has_old_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->old_num(), output);
  }

  // optional uint32 up_num = 6;
  if (has_up_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->up_num(), output);
  }

  // optional uint32 new_num = 7;
  if (has_new_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->new_num(), output);
  }

  // required uint32 op_type = 8;
  if (has_op_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->op_type(), output);
  }

  // required uint32 source_type = 9;
  if (has_source_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->source_type(), output);
  }

  // optional uint32 source_param = 10;
  if (has_source_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->source_param(), output);
  }

  // required uint32 log_time = 11;
  if (has_log_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->log_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* go_item_log_notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 role_uid = 1;
  if (has_role_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->role_uid(), target);
  }

  // required uint32 role_level = 2;
  if (has_role_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->role_level(), target);
  }

  // required uint64 item_uid = 3;
  if (has_item_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->item_uid(), target);
  }

  // required uint32 item_tid = 4;
  if (has_item_tid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->item_tid(), target);
  }

  // optional uint32 old_num = 5;
  if (has_old_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->old_num(), target);
  }

  // optional uint32 up_num = 6;
  if (has_up_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->up_num(), target);
  }

  // optional uint32 new_num = 7;
  if (has_new_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->new_num(), target);
  }

  // required uint32 op_type = 8;
  if (has_op_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->op_type(), target);
  }

  // required uint32 source_type = 9;
  if (has_source_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->source_type(), target);
  }

  // optional uint32 source_param = 10;
  if (has_source_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->source_param(), target);
  }

  // required uint32 log_time = 11;
  if (has_log_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->log_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int go_item_log_notify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 role_uid = 1;
    if (has_role_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_uid());
    }

    // required uint32 role_level = 2;
    if (has_role_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->role_level());
    }

    // required uint64 item_uid = 3;
    if (has_item_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->item_uid());
    }

    // required uint32 item_tid = 4;
    if (has_item_tid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_tid());
    }

    // optional uint32 old_num = 5;
    if (has_old_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->old_num());
    }

    // optional uint32 up_num = 6;
    if (has_up_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->up_num());
    }

    // optional uint32 new_num = 7;
    if (has_new_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->new_num());
    }

    // required uint32 op_type = 8;
    if (has_op_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->op_type());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required uint32 source_type = 9;
    if (has_source_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->source_type());
    }

    // optional uint32 source_param = 10;
    if (has_source_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->source_param());
    }

    // required uint32 log_time = 11;
    if (has_log_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->log_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void go_item_log_notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const go_item_log_notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const go_item_log_notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void go_item_log_notify::MergeFrom(const go_item_log_notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_uid()) {
      set_role_uid(from.role_uid());
    }
    if (from.has_role_level()) {
      set_role_level(from.role_level());
    }
    if (from.has_item_uid()) {
      set_item_uid(from.item_uid());
    }
    if (from.has_item_tid()) {
      set_item_tid(from.item_tid());
    }
    if (from.has_old_num()) {
      set_old_num(from.old_num());
    }
    if (from.has_up_num()) {
      set_up_num(from.up_num());
    }
    if (from.has_new_num()) {
      set_new_num(from.new_num());
    }
    if (from.has_op_type()) {
      set_op_type(from.op_type());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_source_type()) {
      set_source_type(from.source_type());
    }
    if (from.has_source_param()) {
      set_source_param(from.source_param());
    }
    if (from.has_log_time()) {
      set_log_time(from.log_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void go_item_log_notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void go_item_log_notify::CopyFrom(const go_item_log_notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool go_item_log_notify::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000058f) != 0x0000058f) return false;

  return true;
}

void go_item_log_notify::Swap(go_item_log_notify* other) {
  if (other != this) {
    std::swap(role_uid_, other->role_uid_);
    std::swap(role_level_, other->role_level_);
    std::swap(item_uid_, other->item_uid_);
    std::swap(item_tid_, other->item_tid_);
    std::swap(old_num_, other->old_num_);
    std::swap(up_num_, other->up_num_);
    std::swap(new_num_, other->new_num_);
    std::swap(op_type_, other->op_type_);
    std::swap(source_type_, other->source_type_);
    std::swap(source_param_, other->source_param_);
    std::swap(log_time_, other->log_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata go_item_log_notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = go_item_log_notify_descriptor_;
  metadata.reflection = go_item_log_notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int go_money_log_notify::kRoleUidFieldNumber;
const int go_money_log_notify::kRoleLevelFieldNumber;
const int go_money_log_notify::kOldNumFieldNumber;
const int go_money_log_notify::kUpNumFieldNumber;
const int go_money_log_notify::kNewNumFieldNumber;
const int go_money_log_notify::kMoneyTypeFieldNumber;
const int go_money_log_notify::kOpTypeFieldNumber;
const int go_money_log_notify::kSourceTypeFieldNumber;
const int go_money_log_notify::kSourceParamFieldNumber;
const int go_money_log_notify::kLogTimeFieldNumber;
#endif  // !_MSC_VER

go_money_log_notify::go_money_log_notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void go_money_log_notify::InitAsDefaultInstance() {
}

go_money_log_notify::go_money_log_notify(const go_money_log_notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void go_money_log_notify::SharedCtor() {
  _cached_size_ = 0;
  role_uid_ = GOOGLE_ULONGLONG(0);
  role_level_ = 0u;
  old_num_ = 0u;
  up_num_ = 0u;
  new_num_ = 0u;
  money_type_ = 0u;
  op_type_ = 0u;
  source_type_ = 0u;
  source_param_ = 0u;
  log_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

go_money_log_notify::~go_money_log_notify() {
  SharedDtor();
}

void go_money_log_notify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void go_money_log_notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* go_money_log_notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return go_money_log_notify_descriptor_;
}

const go_money_log_notify& go_money_log_notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_log_2eproto();
  return *default_instance_;
}

go_money_log_notify* go_money_log_notify::default_instance_ = NULL;

go_money_log_notify* go_money_log_notify::New() const {
  return new go_money_log_notify;
}

void go_money_log_notify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_uid_ = GOOGLE_ULONGLONG(0);
    role_level_ = 0u;
    old_num_ = 0u;
    up_num_ = 0u;
    new_num_ = 0u;
    money_type_ = 0u;
    op_type_ = 0u;
    source_type_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    source_param_ = 0u;
    log_time_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool go_money_log_notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 role_uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_uid_)));
          set_has_role_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_role_level;
        break;
      }

      // required uint32 role_level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_level_)));
          set_has_role_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_old_num;
        break;
      }

      // optional uint32 old_num = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_old_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &old_num_)));
          set_has_old_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_up_num;
        break;
      }

      // optional uint32 up_num = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_up_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &up_num_)));
          set_has_up_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_new_num;
        break;
      }

      // optional uint32 new_num = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_new_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &new_num_)));
          set_has_new_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_money_type;
        break;
      }

      // required uint32 money_type = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_money_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &money_type_)));
          set_has_money_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_op_type;
        break;
      }

      // optional uint32 op_type = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_op_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &op_type_)));
          set_has_op_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_source_type;
        break;
      }

      // required uint32 source_type = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_source_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &source_type_)));
          set_has_source_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_source_param;
        break;
      }

      // optional uint32 source_param = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_source_param:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &source_param_)));
          set_has_source_param();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_log_time;
        break;
      }

      // required uint32 log_time = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_log_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &log_time_)));
          set_has_log_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void go_money_log_notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 role_uid = 1;
  if (has_role_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->role_uid(), output);
  }

  // required uint32 role_level = 2;
  if (has_role_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->role_level(), output);
  }

  // optional uint32 old_num = 3;
  if (has_old_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->old_num(), output);
  }

  // optional uint32 up_num = 4;
  if (has_up_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->up_num(), output);
  }

  // optional uint32 new_num = 5;
  if (has_new_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->new_num(), output);
  }

  // required uint32 money_type = 6;
  if (has_money_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->money_type(), output);
  }

  // optional uint32 op_type = 7;
  if (has_op_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->op_type(), output);
  }

  // required uint32 source_type = 8;
  if (has_source_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->source_type(), output);
  }

  // optional uint32 source_param = 9;
  if (has_source_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->source_param(), output);
  }

  // required uint32 log_time = 10;
  if (has_log_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->log_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* go_money_log_notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 role_uid = 1;
  if (has_role_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->role_uid(), target);
  }

  // required uint32 role_level = 2;
  if (has_role_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->role_level(), target);
  }

  // optional uint32 old_num = 3;
  if (has_old_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->old_num(), target);
  }

  // optional uint32 up_num = 4;
  if (has_up_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->up_num(), target);
  }

  // optional uint32 new_num = 5;
  if (has_new_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->new_num(), target);
  }

  // required uint32 money_type = 6;
  if (has_money_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->money_type(), target);
  }

  // optional uint32 op_type = 7;
  if (has_op_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->op_type(), target);
  }

  // required uint32 source_type = 8;
  if (has_source_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->source_type(), target);
  }

  // optional uint32 source_param = 9;
  if (has_source_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->source_param(), target);
  }

  // required uint32 log_time = 10;
  if (has_log_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->log_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int go_money_log_notify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 role_uid = 1;
    if (has_role_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_uid());
    }

    // required uint32 role_level = 2;
    if (has_role_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->role_level());
    }

    // optional uint32 old_num = 3;
    if (has_old_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->old_num());
    }

    // optional uint32 up_num = 4;
    if (has_up_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->up_num());
    }

    // optional uint32 new_num = 5;
    if (has_new_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->new_num());
    }

    // required uint32 money_type = 6;
    if (has_money_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->money_type());
    }

    // optional uint32 op_type = 7;
    if (has_op_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->op_type());
    }

    // required uint32 source_type = 8;
    if (has_source_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->source_type());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 source_param = 9;
    if (has_source_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->source_param());
    }

    // required uint32 log_time = 10;
    if (has_log_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->log_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void go_money_log_notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const go_money_log_notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const go_money_log_notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void go_money_log_notify::MergeFrom(const go_money_log_notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_uid()) {
      set_role_uid(from.role_uid());
    }
    if (from.has_role_level()) {
      set_role_level(from.role_level());
    }
    if (from.has_old_num()) {
      set_old_num(from.old_num());
    }
    if (from.has_up_num()) {
      set_up_num(from.up_num());
    }
    if (from.has_new_num()) {
      set_new_num(from.new_num());
    }
    if (from.has_money_type()) {
      set_money_type(from.money_type());
    }
    if (from.has_op_type()) {
      set_op_type(from.op_type());
    }
    if (from.has_source_type()) {
      set_source_type(from.source_type());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_source_param()) {
      set_source_param(from.source_param());
    }
    if (from.has_log_time()) {
      set_log_time(from.log_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void go_money_log_notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void go_money_log_notify::CopyFrom(const go_money_log_notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool go_money_log_notify::IsInitialized() const {
  if ((_has_bits_[0] & 0x000002a3) != 0x000002a3) return false;

  return true;
}

void go_money_log_notify::Swap(go_money_log_notify* other) {
  if (other != this) {
    std::swap(role_uid_, other->role_uid_);
    std::swap(role_level_, other->role_level_);
    std::swap(old_num_, other->old_num_);
    std::swap(up_num_, other->up_num_);
    std::swap(new_num_, other->new_num_);
    std::swap(money_type_, other->money_type_);
    std::swap(op_type_, other->op_type_);
    std::swap(source_type_, other->source_type_);
    std::swap(source_param_, other->source_param_);
    std::swap(log_time_, other->log_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata go_money_log_notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = go_money_log_notify_descriptor_;
  metadata.reflection = go_money_log_notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int go_luck_gift_log_notify::kSrcRoleUidFieldNumber;
const int go_luck_gift_log_notify::kGrabRoleUidFieldNumber;
const int go_luck_gift_log_notify::kLuckGiftUidFieldNumber;
const int go_luck_gift_log_notify::kOldNumFieldNumber;
const int go_luck_gift_log_notify::kUpNumFieldNumber;
const int go_luck_gift_log_notify::kNewNumFieldNumber;
const int go_luck_gift_log_notify::kLogTimeFieldNumber;
#endif  // !_MSC_VER

go_luck_gift_log_notify::go_luck_gift_log_notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void go_luck_gift_log_notify::InitAsDefaultInstance() {
}

go_luck_gift_log_notify::go_luck_gift_log_notify(const go_luck_gift_log_notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void go_luck_gift_log_notify::SharedCtor() {
  _cached_size_ = 0;
  src_role_uid_ = GOOGLE_ULONGLONG(0);
  grab_role_uid_ = GOOGLE_ULONGLONG(0);
  luck_gift_uid_ = GOOGLE_ULONGLONG(0);
  old_num_ = 0u;
  up_num_ = 0u;
  new_num_ = 0u;
  log_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

go_luck_gift_log_notify::~go_luck_gift_log_notify() {
  SharedDtor();
}

void go_luck_gift_log_notify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void go_luck_gift_log_notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* go_luck_gift_log_notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return go_luck_gift_log_notify_descriptor_;
}

const go_luck_gift_log_notify& go_luck_gift_log_notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_log_2eproto();
  return *default_instance_;
}

go_luck_gift_log_notify* go_luck_gift_log_notify::default_instance_ = NULL;

go_luck_gift_log_notify* go_luck_gift_log_notify::New() const {
  return new go_luck_gift_log_notify;
}

void go_luck_gift_log_notify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    src_role_uid_ = GOOGLE_ULONGLONG(0);
    grab_role_uid_ = GOOGLE_ULONGLONG(0);
    luck_gift_uid_ = GOOGLE_ULONGLONG(0);
    old_num_ = 0u;
    up_num_ = 0u;
    new_num_ = 0u;
    log_time_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool go_luck_gift_log_notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 src_role_uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &src_role_uid_)));
          set_has_src_role_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_grab_role_uid;
        break;
      }

      // optional uint64 grab_role_uid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_grab_role_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &grab_role_uid_)));
          set_has_grab_role_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_luck_gift_uid;
        break;
      }

      // required uint64 luck_gift_uid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_luck_gift_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &luck_gift_uid_)));
          set_has_luck_gift_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_old_num;
        break;
      }

      // optional uint32 old_num = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_old_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &old_num_)));
          set_has_old_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_up_num;
        break;
      }

      // optional uint32 up_num = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_up_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &up_num_)));
          set_has_up_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_new_num;
        break;
      }

      // optional uint32 new_num = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_new_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &new_num_)));
          set_has_new_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_log_time;
        break;
      }

      // required uint32 log_time = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_log_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &log_time_)));
          set_has_log_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void go_luck_gift_log_notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 src_role_uid = 1;
  if (has_src_role_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->src_role_uid(), output);
  }

  // optional uint64 grab_role_uid = 2;
  if (has_grab_role_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->grab_role_uid(), output);
  }

  // required uint64 luck_gift_uid = 3;
  if (has_luck_gift_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->luck_gift_uid(), output);
  }

  // optional uint32 old_num = 4;
  if (has_old_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->old_num(), output);
  }

  // optional uint32 up_num = 5;
  if (has_up_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->up_num(), output);
  }

  // optional uint32 new_num = 6;
  if (has_new_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->new_num(), output);
  }

  // required uint32 log_time = 7;
  if (has_log_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->log_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* go_luck_gift_log_notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 src_role_uid = 1;
  if (has_src_role_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->src_role_uid(), target);
  }

  // optional uint64 grab_role_uid = 2;
  if (has_grab_role_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->grab_role_uid(), target);
  }

  // required uint64 luck_gift_uid = 3;
  if (has_luck_gift_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->luck_gift_uid(), target);
  }

  // optional uint32 old_num = 4;
  if (has_old_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->old_num(), target);
  }

  // optional uint32 up_num = 5;
  if (has_up_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->up_num(), target);
  }

  // optional uint32 new_num = 6;
  if (has_new_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->new_num(), target);
  }

  // required uint32 log_time = 7;
  if (has_log_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->log_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int go_luck_gift_log_notify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 src_role_uid = 1;
    if (has_src_role_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->src_role_uid());
    }

    // optional uint64 grab_role_uid = 2;
    if (has_grab_role_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->grab_role_uid());
    }

    // required uint64 luck_gift_uid = 3;
    if (has_luck_gift_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->luck_gift_uid());
    }

    // optional uint32 old_num = 4;
    if (has_old_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->old_num());
    }

    // optional uint32 up_num = 5;
    if (has_up_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->up_num());
    }

    // optional uint32 new_num = 6;
    if (has_new_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->new_num());
    }

    // required uint32 log_time = 7;
    if (has_log_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->log_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void go_luck_gift_log_notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const go_luck_gift_log_notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const go_luck_gift_log_notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void go_luck_gift_log_notify::MergeFrom(const go_luck_gift_log_notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_src_role_uid()) {
      set_src_role_uid(from.src_role_uid());
    }
    if (from.has_grab_role_uid()) {
      set_grab_role_uid(from.grab_role_uid());
    }
    if (from.has_luck_gift_uid()) {
      set_luck_gift_uid(from.luck_gift_uid());
    }
    if (from.has_old_num()) {
      set_old_num(from.old_num());
    }
    if (from.has_up_num()) {
      set_up_num(from.up_num());
    }
    if (from.has_new_num()) {
      set_new_num(from.new_num());
    }
    if (from.has_log_time()) {
      set_log_time(from.log_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void go_luck_gift_log_notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void go_luck_gift_log_notify::CopyFrom(const go_luck_gift_log_notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool go_luck_gift_log_notify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000045) != 0x00000045) return false;

  return true;
}

void go_luck_gift_log_notify::Swap(go_luck_gift_log_notify* other) {
  if (other != this) {
    std::swap(src_role_uid_, other->src_role_uid_);
    std::swap(grab_role_uid_, other->grab_role_uid_);
    std::swap(luck_gift_uid_, other->luck_gift_uid_);
    std::swap(old_num_, other->old_num_);
    std::swap(up_num_, other->up_num_);
    std::swap(new_num_, other->new_num_);
    std::swap(log_time_, other->log_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata go_luck_gift_log_notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = go_luck_gift_log_notify_descriptor_;
  metadata.reflection = go_luck_gift_log_notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int go_hero_log_notify::kRoleUidFieldNumber;
const int go_hero_log_notify::kRoleLevelFieldNumber;
const int go_hero_log_notify::kHeroUidFieldNumber;
const int go_hero_log_notify::kHeroTidFieldNumber;
const int go_hero_log_notify::kOpTypeFieldNumber;
const int go_hero_log_notify::kSourceTypeFieldNumber;
const int go_hero_log_notify::kLogTimeFieldNumber;
const int go_hero_log_notify::kOldNumFieldNumber;
const int go_hero_log_notify::kUpNumFieldNumber;
const int go_hero_log_notify::kNewNumFieldNumber;
const int go_hero_log_notify::kSourceParamFieldNumber;
#endif  // !_MSC_VER

go_hero_log_notify::go_hero_log_notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void go_hero_log_notify::InitAsDefaultInstance() {
}

go_hero_log_notify::go_hero_log_notify(const go_hero_log_notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void go_hero_log_notify::SharedCtor() {
  _cached_size_ = 0;
  role_uid_ = GOOGLE_ULONGLONG(0);
  role_level_ = 0u;
  hero_uid_ = GOOGLE_ULONGLONG(0);
  hero_tid_ = 0u;
  op_type_ = 0u;
  source_type_ = 0u;
  log_time_ = 0u;
  old_num_ = 0u;
  up_num_ = 0u;
  new_num_ = 0u;
  source_param_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

go_hero_log_notify::~go_hero_log_notify() {
  SharedDtor();
}

void go_hero_log_notify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void go_hero_log_notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* go_hero_log_notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return go_hero_log_notify_descriptor_;
}

const go_hero_log_notify& go_hero_log_notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_log_2eproto();
  return *default_instance_;
}

go_hero_log_notify* go_hero_log_notify::default_instance_ = NULL;

go_hero_log_notify* go_hero_log_notify::New() const {
  return new go_hero_log_notify;
}

void go_hero_log_notify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_uid_ = GOOGLE_ULONGLONG(0);
    role_level_ = 0u;
    hero_uid_ = GOOGLE_ULONGLONG(0);
    hero_tid_ = 0u;
    op_type_ = 0u;
    source_type_ = 0u;
    log_time_ = 0u;
    old_num_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    up_num_ = 0u;
    new_num_ = 0u;
    source_param_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool go_hero_log_notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 role_uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_uid_)));
          set_has_role_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_role_level;
        break;
      }

      // required uint32 role_level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_level_)));
          set_has_role_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_hero_uid;
        break;
      }

      // required uint64 hero_uid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hero_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &hero_uid_)));
          set_has_hero_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_hero_tid;
        break;
      }

      // required uint32 hero_tid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hero_tid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hero_tid_)));
          set_has_hero_tid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_op_type;
        break;
      }

      // required uint32 op_type = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_op_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &op_type_)));
          set_has_op_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_source_type;
        break;
      }

      // required uint32 source_type = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_source_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &source_type_)));
          set_has_source_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_log_time;
        break;
      }

      // required uint32 log_time = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_log_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &log_time_)));
          set_has_log_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_old_num;
        break;
      }

      // optional uint32 old_num = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_old_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &old_num_)));
          set_has_old_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_up_num;
        break;
      }

      // optional uint32 up_num = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_up_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &up_num_)));
          set_has_up_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_new_num;
        break;
      }

      // optional uint32 new_num = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_new_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &new_num_)));
          set_has_new_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_source_param;
        break;
      }

      // optional uint32 source_param = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_source_param:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &source_param_)));
          set_has_source_param();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void go_hero_log_notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 role_uid = 1;
  if (has_role_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->role_uid(), output);
  }

  // required uint32 role_level = 2;
  if (has_role_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->role_level(), output);
  }

  // required uint64 hero_uid = 3;
  if (has_hero_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->hero_uid(), output);
  }

  // required uint32 hero_tid = 4;
  if (has_hero_tid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->hero_tid(), output);
  }

  // required uint32 op_type = 5;
  if (has_op_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->op_type(), output);
  }

  // required uint32 source_type = 6;
  if (has_source_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->source_type(), output);
  }

  // required uint32 log_time = 7;
  if (has_log_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->log_time(), output);
  }

  // optional uint32 old_num = 8;
  if (has_old_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->old_num(), output);
  }

  // optional uint32 up_num = 9;
  if (has_up_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->up_num(), output);
  }

  // optional uint32 new_num = 10;
  if (has_new_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->new_num(), output);
  }

  // optional uint32 source_param = 11;
  if (has_source_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->source_param(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* go_hero_log_notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 role_uid = 1;
  if (has_role_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->role_uid(), target);
  }

  // required uint32 role_level = 2;
  if (has_role_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->role_level(), target);
  }

  // required uint64 hero_uid = 3;
  if (has_hero_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->hero_uid(), target);
  }

  // required uint32 hero_tid = 4;
  if (has_hero_tid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->hero_tid(), target);
  }

  // required uint32 op_type = 5;
  if (has_op_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->op_type(), target);
  }

  // required uint32 source_type = 6;
  if (has_source_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->source_type(), target);
  }

  // required uint32 log_time = 7;
  if (has_log_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->log_time(), target);
  }

  // optional uint32 old_num = 8;
  if (has_old_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->old_num(), target);
  }

  // optional uint32 up_num = 9;
  if (has_up_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->up_num(), target);
  }

  // optional uint32 new_num = 10;
  if (has_new_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->new_num(), target);
  }

  // optional uint32 source_param = 11;
  if (has_source_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->source_param(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int go_hero_log_notify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 role_uid = 1;
    if (has_role_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_uid());
    }

    // required uint32 role_level = 2;
    if (has_role_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->role_level());
    }

    // required uint64 hero_uid = 3;
    if (has_hero_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->hero_uid());
    }

    // required uint32 hero_tid = 4;
    if (has_hero_tid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hero_tid());
    }

    // required uint32 op_type = 5;
    if (has_op_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->op_type());
    }

    // required uint32 source_type = 6;
    if (has_source_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->source_type());
    }

    // required uint32 log_time = 7;
    if (has_log_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->log_time());
    }

    // optional uint32 old_num = 8;
    if (has_old_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->old_num());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 up_num = 9;
    if (has_up_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->up_num());
    }

    // optional uint32 new_num = 10;
    if (has_new_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->new_num());
    }

    // optional uint32 source_param = 11;
    if (has_source_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->source_param());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void go_hero_log_notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const go_hero_log_notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const go_hero_log_notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void go_hero_log_notify::MergeFrom(const go_hero_log_notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_uid()) {
      set_role_uid(from.role_uid());
    }
    if (from.has_role_level()) {
      set_role_level(from.role_level());
    }
    if (from.has_hero_uid()) {
      set_hero_uid(from.hero_uid());
    }
    if (from.has_hero_tid()) {
      set_hero_tid(from.hero_tid());
    }
    if (from.has_op_type()) {
      set_op_type(from.op_type());
    }
    if (from.has_source_type()) {
      set_source_type(from.source_type());
    }
    if (from.has_log_time()) {
      set_log_time(from.log_time());
    }
    if (from.has_old_num()) {
      set_old_num(from.old_num());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_up_num()) {
      set_up_num(from.up_num());
    }
    if (from.has_new_num()) {
      set_new_num(from.new_num());
    }
    if (from.has_source_param()) {
      set_source_param(from.source_param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void go_hero_log_notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void go_hero_log_notify::CopyFrom(const go_hero_log_notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool go_hero_log_notify::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  return true;
}

void go_hero_log_notify::Swap(go_hero_log_notify* other) {
  if (other != this) {
    std::swap(role_uid_, other->role_uid_);
    std::swap(role_level_, other->role_level_);
    std::swap(hero_uid_, other->hero_uid_);
    std::swap(hero_tid_, other->hero_tid_);
    std::swap(op_type_, other->op_type_);
    std::swap(source_type_, other->source_type_);
    std::swap(log_time_, other->log_time_);
    std::swap(old_num_, other->old_num_);
    std::swap(up_num_, other->up_num_);
    std::swap(new_num_, other->new_num_);
    std::swap(source_param_, other->source_param_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata go_hero_log_notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = go_hero_log_notify_descriptor_;
  metadata.reflection = go_hero_log_notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int go_task_log_notify::kRoleUidFieldNumber;
const int go_task_log_notify::kTaskIdFieldNumber;
const int go_task_log_notify::kTaskStateFieldNumber;
const int go_task_log_notify::kTaskProgressFieldNumber;
const int go_task_log_notify::kAcceptTimeFieldNumber;
const int go_task_log_notify::kOpTypeFieldNumber;
const int go_task_log_notify::kLogTimeFieldNumber;
const int go_task_log_notify::kTaskTypeFieldNumber;
#endif  // !_MSC_VER

go_task_log_notify::go_task_log_notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void go_task_log_notify::InitAsDefaultInstance() {
}

go_task_log_notify::go_task_log_notify(const go_task_log_notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void go_task_log_notify::SharedCtor() {
  _cached_size_ = 0;
  role_uid_ = GOOGLE_ULONGLONG(0);
  task_id_ = 0u;
  task_state_ = 0u;
  task_progress_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  accept_time_ = 0u;
  op_type_ = 0u;
  log_time_ = 0u;
  task_type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

go_task_log_notify::~go_task_log_notify() {
  SharedDtor();
}

void go_task_log_notify::SharedDtor() {
  if (task_progress_ != &::google::protobuf::internal::kEmptyString) {
    delete task_progress_;
  }
  if (this != default_instance_) {
  }
}

void go_task_log_notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* go_task_log_notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return go_task_log_notify_descriptor_;
}

const go_task_log_notify& go_task_log_notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_log_2eproto();
  return *default_instance_;
}

go_task_log_notify* go_task_log_notify::default_instance_ = NULL;

go_task_log_notify* go_task_log_notify::New() const {
  return new go_task_log_notify;
}

void go_task_log_notify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_uid_ = GOOGLE_ULONGLONG(0);
    task_id_ = 0u;
    task_state_ = 0u;
    if (has_task_progress()) {
      if (task_progress_ != &::google::protobuf::internal::kEmptyString) {
        task_progress_->clear();
      }
    }
    accept_time_ = 0u;
    op_type_ = 0u;
    log_time_ = 0u;
    task_type_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool go_task_log_notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 role_uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_uid_)));
          set_has_role_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_task_id;
        break;
      }

      // required uint32 task_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_task_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &task_id_)));
          set_has_task_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_task_state;
        break;
      }

      // required uint32 task_state = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_task_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &task_state_)));
          set_has_task_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_task_progress;
        break;
      }

      // required string task_progress = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_task_progress:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_task_progress()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->task_progress().data(), this->task_progress().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_accept_time;
        break;
      }

      // required uint32 accept_time = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_accept_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &accept_time_)));
          set_has_accept_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_op_type;
        break;
      }

      // required uint32 op_type = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_op_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &op_type_)));
          set_has_op_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_log_time;
        break;
      }

      // required uint32 log_time = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_log_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &log_time_)));
          set_has_log_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_task_type;
        break;
      }

      // required uint32 task_type = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_task_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &task_type_)));
          set_has_task_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void go_task_log_notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 role_uid = 1;
  if (has_role_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->role_uid(), output);
  }

  // required uint32 task_id = 2;
  if (has_task_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->task_id(), output);
  }

  // required uint32 task_state = 3;
  if (has_task_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->task_state(), output);
  }

  // required string task_progress = 4;
  if (has_task_progress()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->task_progress().data(), this->task_progress().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->task_progress(), output);
  }

  // required uint32 accept_time = 5;
  if (has_accept_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->accept_time(), output);
  }

  // required uint32 op_type = 6;
  if (has_op_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->op_type(), output);
  }

  // required uint32 log_time = 7;
  if (has_log_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->log_time(), output);
  }

  // required uint32 task_type = 8;
  if (has_task_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->task_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* go_task_log_notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 role_uid = 1;
  if (has_role_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->role_uid(), target);
  }

  // required uint32 task_id = 2;
  if (has_task_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->task_id(), target);
  }

  // required uint32 task_state = 3;
  if (has_task_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->task_state(), target);
  }

  // required string task_progress = 4;
  if (has_task_progress()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->task_progress().data(), this->task_progress().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->task_progress(), target);
  }

  // required uint32 accept_time = 5;
  if (has_accept_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->accept_time(), target);
  }

  // required uint32 op_type = 6;
  if (has_op_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->op_type(), target);
  }

  // required uint32 log_time = 7;
  if (has_log_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->log_time(), target);
  }

  // required uint32 task_type = 8;
  if (has_task_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->task_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int go_task_log_notify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 role_uid = 1;
    if (has_role_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_uid());
    }

    // required uint32 task_id = 2;
    if (has_task_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->task_id());
    }

    // required uint32 task_state = 3;
    if (has_task_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->task_state());
    }

    // required string task_progress = 4;
    if (has_task_progress()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->task_progress());
    }

    // required uint32 accept_time = 5;
    if (has_accept_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->accept_time());
    }

    // required uint32 op_type = 6;
    if (has_op_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->op_type());
    }

    // required uint32 log_time = 7;
    if (has_log_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->log_time());
    }

    // required uint32 task_type = 8;
    if (has_task_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->task_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void go_task_log_notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const go_task_log_notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const go_task_log_notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void go_task_log_notify::MergeFrom(const go_task_log_notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_uid()) {
      set_role_uid(from.role_uid());
    }
    if (from.has_task_id()) {
      set_task_id(from.task_id());
    }
    if (from.has_task_state()) {
      set_task_state(from.task_state());
    }
    if (from.has_task_progress()) {
      set_task_progress(from.task_progress());
    }
    if (from.has_accept_time()) {
      set_accept_time(from.accept_time());
    }
    if (from.has_op_type()) {
      set_op_type(from.op_type());
    }
    if (from.has_log_time()) {
      set_log_time(from.log_time());
    }
    if (from.has_task_type()) {
      set_task_type(from.task_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void go_task_log_notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void go_task_log_notify::CopyFrom(const go_task_log_notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool go_task_log_notify::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000ff) != 0x000000ff) return false;

  return true;
}

void go_task_log_notify::Swap(go_task_log_notify* other) {
  if (other != this) {
    std::swap(role_uid_, other->role_uid_);
    std::swap(task_id_, other->task_id_);
    std::swap(task_state_, other->task_state_);
    std::swap(task_progress_, other->task_progress_);
    std::swap(accept_time_, other->accept_time_);
    std::swap(op_type_, other->op_type_);
    std::swap(log_time_, other->log_time_);
    std::swap(task_type_, other->task_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata go_task_log_notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = go_task_log_notify_descriptor_;
  metadata.reflection = go_task_log_notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int go_exp_log_notify::kRoleUidFieldNumber;
const int go_exp_log_notify::kOldLevelFieldNumber;
const int go_exp_log_notify::kOldExpFieldNumber;
const int go_exp_log_notify::kUpExpFieldNumber;
const int go_exp_log_notify::kNewLevelFieldNumber;
const int go_exp_log_notify::kNewExpFieldNumber;
const int go_exp_log_notify::kSourceTypeFieldNumber;
const int go_exp_log_notify::kSourceParamFieldNumber;
const int go_exp_log_notify::kLogTimeFieldNumber;
#endif  // !_MSC_VER

go_exp_log_notify::go_exp_log_notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void go_exp_log_notify::InitAsDefaultInstance() {
}

go_exp_log_notify::go_exp_log_notify(const go_exp_log_notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void go_exp_log_notify::SharedCtor() {
  _cached_size_ = 0;
  role_uid_ = GOOGLE_ULONGLONG(0);
  old_level_ = 0u;
  old_exp_ = 0u;
  up_exp_ = 0u;
  new_level_ = 0u;
  new_exp_ = 0u;
  source_type_ = 0u;
  source_param_ = 0u;
  log_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

go_exp_log_notify::~go_exp_log_notify() {
  SharedDtor();
}

void go_exp_log_notify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void go_exp_log_notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* go_exp_log_notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return go_exp_log_notify_descriptor_;
}

const go_exp_log_notify& go_exp_log_notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_log_2eproto();
  return *default_instance_;
}

go_exp_log_notify* go_exp_log_notify::default_instance_ = NULL;

go_exp_log_notify* go_exp_log_notify::New() const {
  return new go_exp_log_notify;
}

void go_exp_log_notify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_uid_ = GOOGLE_ULONGLONG(0);
    old_level_ = 0u;
    old_exp_ = 0u;
    up_exp_ = 0u;
    new_level_ = 0u;
    new_exp_ = 0u;
    source_type_ = 0u;
    source_param_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    log_time_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool go_exp_log_notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 role_uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_uid_)));
          set_has_role_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_old_level;
        break;
      }

      // required uint32 old_level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_old_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &old_level_)));
          set_has_old_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_old_exp;
        break;
      }

      // required uint32 old_exp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_old_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &old_exp_)));
          set_has_old_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_up_exp;
        break;
      }

      // required uint32 up_exp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_up_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &up_exp_)));
          set_has_up_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_new_level;
        break;
      }

      // required uint32 new_level = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_new_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &new_level_)));
          set_has_new_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_new_exp;
        break;
      }

      // required uint32 new_exp = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_new_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &new_exp_)));
          set_has_new_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_source_type;
        break;
      }

      // required uint32 source_type = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_source_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &source_type_)));
          set_has_source_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_source_param;
        break;
      }

      // optional uint32 source_param = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_source_param:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &source_param_)));
          set_has_source_param();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_log_time;
        break;
      }

      // required uint32 log_time = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_log_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &log_time_)));
          set_has_log_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void go_exp_log_notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 role_uid = 1;
  if (has_role_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->role_uid(), output);
  }

  // required uint32 old_level = 2;
  if (has_old_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->old_level(), output);
  }

  // required uint32 old_exp = 3;
  if (has_old_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->old_exp(), output);
  }

  // required uint32 up_exp = 4;
  if (has_up_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->up_exp(), output);
  }

  // required uint32 new_level = 5;
  if (has_new_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->new_level(), output);
  }

  // required uint32 new_exp = 6;
  if (has_new_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->new_exp(), output);
  }

  // required uint32 source_type = 7;
  if (has_source_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->source_type(), output);
  }

  // optional uint32 source_param = 8;
  if (has_source_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->source_param(), output);
  }

  // required uint32 log_time = 9;
  if (has_log_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->log_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* go_exp_log_notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 role_uid = 1;
  if (has_role_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->role_uid(), target);
  }

  // required uint32 old_level = 2;
  if (has_old_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->old_level(), target);
  }

  // required uint32 old_exp = 3;
  if (has_old_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->old_exp(), target);
  }

  // required uint32 up_exp = 4;
  if (has_up_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->up_exp(), target);
  }

  // required uint32 new_level = 5;
  if (has_new_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->new_level(), target);
  }

  // required uint32 new_exp = 6;
  if (has_new_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->new_exp(), target);
  }

  // required uint32 source_type = 7;
  if (has_source_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->source_type(), target);
  }

  // optional uint32 source_param = 8;
  if (has_source_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->source_param(), target);
  }

  // required uint32 log_time = 9;
  if (has_log_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->log_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int go_exp_log_notify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 role_uid = 1;
    if (has_role_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_uid());
    }

    // required uint32 old_level = 2;
    if (has_old_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->old_level());
    }

    // required uint32 old_exp = 3;
    if (has_old_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->old_exp());
    }

    // required uint32 up_exp = 4;
    if (has_up_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->up_exp());
    }

    // required uint32 new_level = 5;
    if (has_new_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->new_level());
    }

    // required uint32 new_exp = 6;
    if (has_new_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->new_exp());
    }

    // required uint32 source_type = 7;
    if (has_source_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->source_type());
    }

    // optional uint32 source_param = 8;
    if (has_source_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->source_param());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required uint32 log_time = 9;
    if (has_log_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->log_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void go_exp_log_notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const go_exp_log_notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const go_exp_log_notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void go_exp_log_notify::MergeFrom(const go_exp_log_notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_uid()) {
      set_role_uid(from.role_uid());
    }
    if (from.has_old_level()) {
      set_old_level(from.old_level());
    }
    if (from.has_old_exp()) {
      set_old_exp(from.old_exp());
    }
    if (from.has_up_exp()) {
      set_up_exp(from.up_exp());
    }
    if (from.has_new_level()) {
      set_new_level(from.new_level());
    }
    if (from.has_new_exp()) {
      set_new_exp(from.new_exp());
    }
    if (from.has_source_type()) {
      set_source_type(from.source_type());
    }
    if (from.has_source_param()) {
      set_source_param(from.source_param());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_log_time()) {
      set_log_time(from.log_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void go_exp_log_notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void go_exp_log_notify::CopyFrom(const go_exp_log_notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool go_exp_log_notify::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000017f) != 0x0000017f) return false;

  return true;
}

void go_exp_log_notify::Swap(go_exp_log_notify* other) {
  if (other != this) {
    std::swap(role_uid_, other->role_uid_);
    std::swap(old_level_, other->old_level_);
    std::swap(old_exp_, other->old_exp_);
    std::swap(up_exp_, other->up_exp_);
    std::swap(new_level_, other->new_level_);
    std::swap(new_exp_, other->new_exp_);
    std::swap(source_type_, other->source_type_);
    std::swap(source_param_, other->source_param_);
    std::swap(log_time_, other->log_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata go_exp_log_notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = go_exp_log_notify_descriptor_;
  metadata.reflection = go_exp_log_notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int go_prestige_log_notify::kRoleUidFieldNumber;
const int go_prestige_log_notify::kRoleLevelFieldNumber;
const int go_prestige_log_notify::kOldPrestigeFieldNumber;
const int go_prestige_log_notify::kOldPrestigeTotalFieldNumber;
const int go_prestige_log_notify::kOldPrestigeLevelFieldNumber;
const int go_prestige_log_notify::kUpPrestigeFieldNumber;
const int go_prestige_log_notify::kNewPrestigeFieldNumber;
const int go_prestige_log_notify::kNewPrestigeTotalFieldNumber;
const int go_prestige_log_notify::kNewPrestigeLevelFieldNumber;
const int go_prestige_log_notify::kOpTypeFieldNumber;
const int go_prestige_log_notify::kSourceTypeFieldNumber;
const int go_prestige_log_notify::kSourceParamFieldNumber;
const int go_prestige_log_notify::kLogTimeFieldNumber;
#endif  // !_MSC_VER

go_prestige_log_notify::go_prestige_log_notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void go_prestige_log_notify::InitAsDefaultInstance() {
}

go_prestige_log_notify::go_prestige_log_notify(const go_prestige_log_notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void go_prestige_log_notify::SharedCtor() {
  _cached_size_ = 0;
  role_uid_ = GOOGLE_ULONGLONG(0);
  role_level_ = 0u;
  old_prestige_ = 0u;
  old_prestige_total_ = 0u;
  old_prestige_level_ = 0u;
  up_prestige_ = 0u;
  new_prestige_ = 0u;
  new_prestige_total_ = 0u;
  new_prestige_level_ = 0u;
  op_type_ = 0u;
  source_type_ = 0u;
  source_param_ = 0u;
  log_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

go_prestige_log_notify::~go_prestige_log_notify() {
  SharedDtor();
}

void go_prestige_log_notify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void go_prestige_log_notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* go_prestige_log_notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return go_prestige_log_notify_descriptor_;
}

const go_prestige_log_notify& go_prestige_log_notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_log_2eproto();
  return *default_instance_;
}

go_prestige_log_notify* go_prestige_log_notify::default_instance_ = NULL;

go_prestige_log_notify* go_prestige_log_notify::New() const {
  return new go_prestige_log_notify;
}

void go_prestige_log_notify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_uid_ = GOOGLE_ULONGLONG(0);
    role_level_ = 0u;
    old_prestige_ = 0u;
    old_prestige_total_ = 0u;
    old_prestige_level_ = 0u;
    up_prestige_ = 0u;
    new_prestige_ = 0u;
    new_prestige_total_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    new_prestige_level_ = 0u;
    op_type_ = 0u;
    source_type_ = 0u;
    source_param_ = 0u;
    log_time_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool go_prestige_log_notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 role_uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_uid_)));
          set_has_role_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_role_level;
        break;
      }

      // required uint32 role_level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_level_)));
          set_has_role_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_old_prestige;
        break;
      }

      // required uint32 old_prestige = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_old_prestige:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &old_prestige_)));
          set_has_old_prestige();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_old_prestige_total;
        break;
      }

      // required uint32 old_prestige_total = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_old_prestige_total:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &old_prestige_total_)));
          set_has_old_prestige_total();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_old_prestige_level;
        break;
      }

      // required uint32 old_prestige_level = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_old_prestige_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &old_prestige_level_)));
          set_has_old_prestige_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_up_prestige;
        break;
      }

      // required uint32 up_prestige = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_up_prestige:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &up_prestige_)));
          set_has_up_prestige();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_new_prestige;
        break;
      }

      // required uint32 new_prestige = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_new_prestige:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &new_prestige_)));
          set_has_new_prestige();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_new_prestige_total;
        break;
      }

      // required uint32 new_prestige_total = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_new_prestige_total:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &new_prestige_total_)));
          set_has_new_prestige_total();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_new_prestige_level;
        break;
      }

      // required uint32 new_prestige_level = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_new_prestige_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &new_prestige_level_)));
          set_has_new_prestige_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_op_type;
        break;
      }

      // required uint32 op_type = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_op_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &op_type_)));
          set_has_op_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_source_type;
        break;
      }

      // required uint32 source_type = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_source_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &source_type_)));
          set_has_source_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_source_param;
        break;
      }

      // optional uint32 source_param = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_source_param:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &source_param_)));
          set_has_source_param();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_log_time;
        break;
      }

      // required uint32 log_time = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_log_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &log_time_)));
          set_has_log_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void go_prestige_log_notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 role_uid = 1;
  if (has_role_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->role_uid(), output);
  }

  // required uint32 role_level = 2;
  if (has_role_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->role_level(), output);
  }

  // required uint32 old_prestige = 3;
  if (has_old_prestige()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->old_prestige(), output);
  }

  // required uint32 old_prestige_total = 4;
  if (has_old_prestige_total()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->old_prestige_total(), output);
  }

  // required uint32 old_prestige_level = 5;
  if (has_old_prestige_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->old_prestige_level(), output);
  }

  // required uint32 up_prestige = 6;
  if (has_up_prestige()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->up_prestige(), output);
  }

  // required uint32 new_prestige = 7;
  if (has_new_prestige()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->new_prestige(), output);
  }

  // required uint32 new_prestige_total = 8;
  if (has_new_prestige_total()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->new_prestige_total(), output);
  }

  // required uint32 new_prestige_level = 9;
  if (has_new_prestige_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->new_prestige_level(), output);
  }

  // required uint32 op_type = 10;
  if (has_op_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->op_type(), output);
  }

  // required uint32 source_type = 11;
  if (has_source_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->source_type(), output);
  }

  // optional uint32 source_param = 12;
  if (has_source_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->source_param(), output);
  }

  // required uint32 log_time = 13;
  if (has_log_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->log_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* go_prestige_log_notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 role_uid = 1;
  if (has_role_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->role_uid(), target);
  }

  // required uint32 role_level = 2;
  if (has_role_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->role_level(), target);
  }

  // required uint32 old_prestige = 3;
  if (has_old_prestige()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->old_prestige(), target);
  }

  // required uint32 old_prestige_total = 4;
  if (has_old_prestige_total()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->old_prestige_total(), target);
  }

  // required uint32 old_prestige_level = 5;
  if (has_old_prestige_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->old_prestige_level(), target);
  }

  // required uint32 up_prestige = 6;
  if (has_up_prestige()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->up_prestige(), target);
  }

  // required uint32 new_prestige = 7;
  if (has_new_prestige()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->new_prestige(), target);
  }

  // required uint32 new_prestige_total = 8;
  if (has_new_prestige_total()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->new_prestige_total(), target);
  }

  // required uint32 new_prestige_level = 9;
  if (has_new_prestige_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->new_prestige_level(), target);
  }

  // required uint32 op_type = 10;
  if (has_op_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->op_type(), target);
  }

  // required uint32 source_type = 11;
  if (has_source_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->source_type(), target);
  }

  // optional uint32 source_param = 12;
  if (has_source_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->source_param(), target);
  }

  // required uint32 log_time = 13;
  if (has_log_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->log_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int go_prestige_log_notify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 role_uid = 1;
    if (has_role_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_uid());
    }

    // required uint32 role_level = 2;
    if (has_role_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->role_level());
    }

    // required uint32 old_prestige = 3;
    if (has_old_prestige()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->old_prestige());
    }

    // required uint32 old_prestige_total = 4;
    if (has_old_prestige_total()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->old_prestige_total());
    }

    // required uint32 old_prestige_level = 5;
    if (has_old_prestige_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->old_prestige_level());
    }

    // required uint32 up_prestige = 6;
    if (has_up_prestige()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->up_prestige());
    }

    // required uint32 new_prestige = 7;
    if (has_new_prestige()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->new_prestige());
    }

    // required uint32 new_prestige_total = 8;
    if (has_new_prestige_total()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->new_prestige_total());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required uint32 new_prestige_level = 9;
    if (has_new_prestige_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->new_prestige_level());
    }

    // required uint32 op_type = 10;
    if (has_op_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->op_type());
    }

    // required uint32 source_type = 11;
    if (has_source_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->source_type());
    }

    // optional uint32 source_param = 12;
    if (has_source_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->source_param());
    }

    // required uint32 log_time = 13;
    if (has_log_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->log_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void go_prestige_log_notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const go_prestige_log_notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const go_prestige_log_notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void go_prestige_log_notify::MergeFrom(const go_prestige_log_notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_uid()) {
      set_role_uid(from.role_uid());
    }
    if (from.has_role_level()) {
      set_role_level(from.role_level());
    }
    if (from.has_old_prestige()) {
      set_old_prestige(from.old_prestige());
    }
    if (from.has_old_prestige_total()) {
      set_old_prestige_total(from.old_prestige_total());
    }
    if (from.has_old_prestige_level()) {
      set_old_prestige_level(from.old_prestige_level());
    }
    if (from.has_up_prestige()) {
      set_up_prestige(from.up_prestige());
    }
    if (from.has_new_prestige()) {
      set_new_prestige(from.new_prestige());
    }
    if (from.has_new_prestige_total()) {
      set_new_prestige_total(from.new_prestige_total());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_new_prestige_level()) {
      set_new_prestige_level(from.new_prestige_level());
    }
    if (from.has_op_type()) {
      set_op_type(from.op_type());
    }
    if (from.has_source_type()) {
      set_source_type(from.source_type());
    }
    if (from.has_source_param()) {
      set_source_param(from.source_param());
    }
    if (from.has_log_time()) {
      set_log_time(from.log_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void go_prestige_log_notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void go_prestige_log_notify::CopyFrom(const go_prestige_log_notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool go_prestige_log_notify::IsInitialized() const {
  if ((_has_bits_[0] & 0x000017ff) != 0x000017ff) return false;

  return true;
}

void go_prestige_log_notify::Swap(go_prestige_log_notify* other) {
  if (other != this) {
    std::swap(role_uid_, other->role_uid_);
    std::swap(role_level_, other->role_level_);
    std::swap(old_prestige_, other->old_prestige_);
    std::swap(old_prestige_total_, other->old_prestige_total_);
    std::swap(old_prestige_level_, other->old_prestige_level_);
    std::swap(up_prestige_, other->up_prestige_);
    std::swap(new_prestige_, other->new_prestige_);
    std::swap(new_prestige_total_, other->new_prestige_total_);
    std::swap(new_prestige_level_, other->new_prestige_level_);
    std::swap(op_type_, other->op_type_);
    std::swap(source_type_, other->source_type_);
    std::swap(source_param_, other->source_param_);
    std::swap(log_time_, other->log_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata go_prestige_log_notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = go_prestige_log_notify_descriptor_;
  metadata.reflection = go_prestige_log_notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int go_user_times_log_notify::kRoleUidFieldNumber;
const int go_user_times_log_notify::kRoleLevelFieldNumber;
const int go_user_times_log_notify::kOldNumFieldNumber;
const int go_user_times_log_notify::kUpNumFieldNumber;
const int go_user_times_log_notify::kNewNumFieldNumber;
const int go_user_times_log_notify::kEventIdFieldNumber;
const int go_user_times_log_notify::kSecEventIdFieldNumber;
const int go_user_times_log_notify::kOpTypeFieldNumber;
const int go_user_times_log_notify::kSourceTypeFieldNumber;
const int go_user_times_log_notify::kSourceParamFieldNumber;
const int go_user_times_log_notify::kLogTimeFieldNumber;
#endif  // !_MSC_VER

go_user_times_log_notify::go_user_times_log_notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void go_user_times_log_notify::InitAsDefaultInstance() {
}

go_user_times_log_notify::go_user_times_log_notify(const go_user_times_log_notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void go_user_times_log_notify::SharedCtor() {
  _cached_size_ = 0;
  role_uid_ = GOOGLE_ULONGLONG(0);
  role_level_ = 0u;
  old_num_ = 0u;
  up_num_ = 0u;
  new_num_ = 0u;
  event_id_ = 0u;
  sec_event_id_ = 0u;
  op_type_ = 0u;
  source_type_ = 0u;
  source_param_ = 0u;
  log_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

go_user_times_log_notify::~go_user_times_log_notify() {
  SharedDtor();
}

void go_user_times_log_notify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void go_user_times_log_notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* go_user_times_log_notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return go_user_times_log_notify_descriptor_;
}

const go_user_times_log_notify& go_user_times_log_notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_log_2eproto();
  return *default_instance_;
}

go_user_times_log_notify* go_user_times_log_notify::default_instance_ = NULL;

go_user_times_log_notify* go_user_times_log_notify::New() const {
  return new go_user_times_log_notify;
}

void go_user_times_log_notify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_uid_ = GOOGLE_ULONGLONG(0);
    role_level_ = 0u;
    old_num_ = 0u;
    up_num_ = 0u;
    new_num_ = 0u;
    event_id_ = 0u;
    sec_event_id_ = 0u;
    op_type_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    source_type_ = 0u;
    source_param_ = 0u;
    log_time_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool go_user_times_log_notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 role_uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_uid_)));
          set_has_role_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_role_level;
        break;
      }

      // required uint32 role_level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_level_)));
          set_has_role_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_old_num;
        break;
      }

      // optional uint32 old_num = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_old_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &old_num_)));
          set_has_old_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_up_num;
        break;
      }

      // optional uint32 up_num = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_up_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &up_num_)));
          set_has_up_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_new_num;
        break;
      }

      // optional uint32 new_num = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_new_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &new_num_)));
          set_has_new_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_event_id;
        break;
      }

      // required uint32 event_id = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_event_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &event_id_)));
          set_has_event_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_sec_event_id;
        break;
      }

      // required uint32 sec_event_id = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sec_event_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sec_event_id_)));
          set_has_sec_event_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_op_type;
        break;
      }

      // optional uint32 op_type = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_op_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &op_type_)));
          set_has_op_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_source_type;
        break;
      }

      // required uint32 source_type = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_source_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &source_type_)));
          set_has_source_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_source_param;
        break;
      }

      // optional uint32 source_param = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_source_param:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &source_param_)));
          set_has_source_param();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_log_time;
        break;
      }

      // required uint32 log_time = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_log_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &log_time_)));
          set_has_log_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void go_user_times_log_notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 role_uid = 1;
  if (has_role_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->role_uid(), output);
  }

  // required uint32 role_level = 2;
  if (has_role_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->role_level(), output);
  }

  // optional uint32 old_num = 3;
  if (has_old_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->old_num(), output);
  }

  // optional uint32 up_num = 4;
  if (has_up_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->up_num(), output);
  }

  // optional uint32 new_num = 5;
  if (has_new_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->new_num(), output);
  }

  // required uint32 event_id = 6;
  if (has_event_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->event_id(), output);
  }

  // required uint32 sec_event_id = 7;
  if (has_sec_event_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->sec_event_id(), output);
  }

  // optional uint32 op_type = 8;
  if (has_op_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->op_type(), output);
  }

  // required uint32 source_type = 9;
  if (has_source_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->source_type(), output);
  }

  // optional uint32 source_param = 10;
  if (has_source_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->source_param(), output);
  }

  // required uint32 log_time = 11;
  if (has_log_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->log_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* go_user_times_log_notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 role_uid = 1;
  if (has_role_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->role_uid(), target);
  }

  // required uint32 role_level = 2;
  if (has_role_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->role_level(), target);
  }

  // optional uint32 old_num = 3;
  if (has_old_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->old_num(), target);
  }

  // optional uint32 up_num = 4;
  if (has_up_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->up_num(), target);
  }

  // optional uint32 new_num = 5;
  if (has_new_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->new_num(), target);
  }

  // required uint32 event_id = 6;
  if (has_event_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->event_id(), target);
  }

  // required uint32 sec_event_id = 7;
  if (has_sec_event_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->sec_event_id(), target);
  }

  // optional uint32 op_type = 8;
  if (has_op_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->op_type(), target);
  }

  // required uint32 source_type = 9;
  if (has_source_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->source_type(), target);
  }

  // optional uint32 source_param = 10;
  if (has_source_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->source_param(), target);
  }

  // required uint32 log_time = 11;
  if (has_log_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->log_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int go_user_times_log_notify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 role_uid = 1;
    if (has_role_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_uid());
    }

    // required uint32 role_level = 2;
    if (has_role_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->role_level());
    }

    // optional uint32 old_num = 3;
    if (has_old_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->old_num());
    }

    // optional uint32 up_num = 4;
    if (has_up_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->up_num());
    }

    // optional uint32 new_num = 5;
    if (has_new_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->new_num());
    }

    // required uint32 event_id = 6;
    if (has_event_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->event_id());
    }

    // required uint32 sec_event_id = 7;
    if (has_sec_event_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sec_event_id());
    }

    // optional uint32 op_type = 8;
    if (has_op_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->op_type());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required uint32 source_type = 9;
    if (has_source_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->source_type());
    }

    // optional uint32 source_param = 10;
    if (has_source_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->source_param());
    }

    // required uint32 log_time = 11;
    if (has_log_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->log_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void go_user_times_log_notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const go_user_times_log_notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const go_user_times_log_notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void go_user_times_log_notify::MergeFrom(const go_user_times_log_notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_uid()) {
      set_role_uid(from.role_uid());
    }
    if (from.has_role_level()) {
      set_role_level(from.role_level());
    }
    if (from.has_old_num()) {
      set_old_num(from.old_num());
    }
    if (from.has_up_num()) {
      set_up_num(from.up_num());
    }
    if (from.has_new_num()) {
      set_new_num(from.new_num());
    }
    if (from.has_event_id()) {
      set_event_id(from.event_id());
    }
    if (from.has_sec_event_id()) {
      set_sec_event_id(from.sec_event_id());
    }
    if (from.has_op_type()) {
      set_op_type(from.op_type());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_source_type()) {
      set_source_type(from.source_type());
    }
    if (from.has_source_param()) {
      set_source_param(from.source_param());
    }
    if (from.has_log_time()) {
      set_log_time(from.log_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void go_user_times_log_notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void go_user_times_log_notify::CopyFrom(const go_user_times_log_notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool go_user_times_log_notify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000563) != 0x00000563) return false;

  return true;
}

void go_user_times_log_notify::Swap(go_user_times_log_notify* other) {
  if (other != this) {
    std::swap(role_uid_, other->role_uid_);
    std::swap(role_level_, other->role_level_);
    std::swap(old_num_, other->old_num_);
    std::swap(up_num_, other->up_num_);
    std::swap(new_num_, other->new_num_);
    std::swap(event_id_, other->event_id_);
    std::swap(sec_event_id_, other->sec_event_id_);
    std::swap(op_type_, other->op_type_);
    std::swap(source_type_, other->source_type_);
    std::swap(source_param_, other->source_param_);
    std::swap(log_time_, other->log_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata go_user_times_log_notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = go_user_times_log_notify_descriptor_;
  metadata.reflection = go_user_times_log_notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int eo_country_log_notify::kCountryIdFieldNumber;
const int eo_country_log_notify::kSourceTypeFieldNumber;
const int eo_country_log_notify::kSourceParamFieldNumber;
const int eo_country_log_notify::kSourceParam2FieldNumber;
const int eo_country_log_notify::kSourceParam3FieldNumber;
const int eo_country_log_notify::kLogTimeFieldNumber;
#endif  // !_MSC_VER

eo_country_log_notify::eo_country_log_notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void eo_country_log_notify::InitAsDefaultInstance() {
}

eo_country_log_notify::eo_country_log_notify(const eo_country_log_notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void eo_country_log_notify::SharedCtor() {
  _cached_size_ = 0;
  country_id_ = 0u;
  source_type_ = 0u;
  source_param_ = GOOGLE_ULONGLONG(0);
  source_param2_ = 0u;
  source_param3_ = 0u;
  log_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

eo_country_log_notify::~eo_country_log_notify() {
  SharedDtor();
}

void eo_country_log_notify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void eo_country_log_notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* eo_country_log_notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return eo_country_log_notify_descriptor_;
}

const eo_country_log_notify& eo_country_log_notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_log_2eproto();
  return *default_instance_;
}

eo_country_log_notify* eo_country_log_notify::default_instance_ = NULL;

eo_country_log_notify* eo_country_log_notify::New() const {
  return new eo_country_log_notify;
}

void eo_country_log_notify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    country_id_ = 0u;
    source_type_ = 0u;
    source_param_ = GOOGLE_ULONGLONG(0);
    source_param2_ = 0u;
    source_param3_ = 0u;
    log_time_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool eo_country_log_notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 country_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &country_id_)));
          set_has_country_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_source_type;
        break;
      }

      // optional uint32 source_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_source_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &source_type_)));
          set_has_source_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_source_param;
        break;
      }

      // optional uint64 source_param = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_source_param:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &source_param_)));
          set_has_source_param();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_source_param2;
        break;
      }

      // optional uint32 source_param2 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_source_param2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &source_param2_)));
          set_has_source_param2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_source_param3;
        break;
      }

      // optional uint32 source_param3 = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_source_param3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &source_param3_)));
          set_has_source_param3();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_log_time;
        break;
      }

      // optional uint32 log_time = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_log_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &log_time_)));
          set_has_log_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void eo_country_log_notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 country_id = 1;
  if (has_country_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->country_id(), output);
  }

  // optional uint32 source_type = 2;
  if (has_source_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->source_type(), output);
  }

  // optional uint64 source_param = 3;
  if (has_source_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->source_param(), output);
  }

  // optional uint32 source_param2 = 4;
  if (has_source_param2()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->source_param2(), output);
  }

  // optional uint32 source_param3 = 5;
  if (has_source_param3()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->source_param3(), output);
  }

  // optional uint32 log_time = 6;
  if (has_log_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->log_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* eo_country_log_notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 country_id = 1;
  if (has_country_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->country_id(), target);
  }

  // optional uint32 source_type = 2;
  if (has_source_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->source_type(), target);
  }

  // optional uint64 source_param = 3;
  if (has_source_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->source_param(), target);
  }

  // optional uint32 source_param2 = 4;
  if (has_source_param2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->source_param2(), target);
  }

  // optional uint32 source_param3 = 5;
  if (has_source_param3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->source_param3(), target);
  }

  // optional uint32 log_time = 6;
  if (has_log_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->log_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int eo_country_log_notify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 country_id = 1;
    if (has_country_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->country_id());
    }

    // optional uint32 source_type = 2;
    if (has_source_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->source_type());
    }

    // optional uint64 source_param = 3;
    if (has_source_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->source_param());
    }

    // optional uint32 source_param2 = 4;
    if (has_source_param2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->source_param2());
    }

    // optional uint32 source_param3 = 5;
    if (has_source_param3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->source_param3());
    }

    // optional uint32 log_time = 6;
    if (has_log_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->log_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void eo_country_log_notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const eo_country_log_notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const eo_country_log_notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void eo_country_log_notify::MergeFrom(const eo_country_log_notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_country_id()) {
      set_country_id(from.country_id());
    }
    if (from.has_source_type()) {
      set_source_type(from.source_type());
    }
    if (from.has_source_param()) {
      set_source_param(from.source_param());
    }
    if (from.has_source_param2()) {
      set_source_param2(from.source_param2());
    }
    if (from.has_source_param3()) {
      set_source_param3(from.source_param3());
    }
    if (from.has_log_time()) {
      set_log_time(from.log_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void eo_country_log_notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void eo_country_log_notify::CopyFrom(const eo_country_log_notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool eo_country_log_notify::IsInitialized() const {

  return true;
}

void eo_country_log_notify::Swap(eo_country_log_notify* other) {
  if (other != this) {
    std::swap(country_id_, other->country_id_);
    std::swap(source_type_, other->source_type_);
    std::swap(source_param_, other->source_param_);
    std::swap(source_param2_, other->source_param2_);
    std::swap(source_param3_, other->source_param3_);
    std::swap(log_time_, other->log_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata eo_country_log_notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = eo_country_log_notify_descriptor_;
  metadata.reflection = eo_country_log_notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int eo_family_log_notify::kFamilyUidFieldNumber;
const int eo_family_log_notify::kRoleUidFieldNumber;
const int eo_family_log_notify::kTargetUidFieldNumber;
const int eo_family_log_notify::kSourceTypeFieldNumber;
const int eo_family_log_notify::kSourceParamFieldNumber;
const int eo_family_log_notify::kSourceParam2FieldNumber;
const int eo_family_log_notify::kLogTimeFieldNumber;
#endif  // !_MSC_VER

eo_family_log_notify::eo_family_log_notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void eo_family_log_notify::InitAsDefaultInstance() {
}

eo_family_log_notify::eo_family_log_notify(const eo_family_log_notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void eo_family_log_notify::SharedCtor() {
  _cached_size_ = 0;
  family_uid_ = GOOGLE_ULONGLONG(0);
  role_uid_ = GOOGLE_ULONGLONG(0);
  target_uid_ = GOOGLE_ULONGLONG(0);
  source_type_ = 0u;
  source_param_ = 0u;
  source_param2_ = 0u;
  log_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

eo_family_log_notify::~eo_family_log_notify() {
  SharedDtor();
}

void eo_family_log_notify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void eo_family_log_notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* eo_family_log_notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return eo_family_log_notify_descriptor_;
}

const eo_family_log_notify& eo_family_log_notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_log_2eproto();
  return *default_instance_;
}

eo_family_log_notify* eo_family_log_notify::default_instance_ = NULL;

eo_family_log_notify* eo_family_log_notify::New() const {
  return new eo_family_log_notify;
}

void eo_family_log_notify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    family_uid_ = GOOGLE_ULONGLONG(0);
    role_uid_ = GOOGLE_ULONGLONG(0);
    target_uid_ = GOOGLE_ULONGLONG(0);
    source_type_ = 0u;
    source_param_ = 0u;
    source_param2_ = 0u;
    log_time_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool eo_family_log_notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 family_uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &family_uid_)));
          set_has_family_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_role_uid;
        break;
      }

      // optional uint64 role_uid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_uid_)));
          set_has_role_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_target_uid;
        break;
      }

      // optional uint64 target_uid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_target_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &target_uid_)));
          set_has_target_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_source_type;
        break;
      }

      // optional uint32 source_type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_source_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &source_type_)));
          set_has_source_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_source_param;
        break;
      }

      // optional uint32 source_param = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_source_param:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &source_param_)));
          set_has_source_param();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_source_param2;
        break;
      }

      // optional uint32 source_param2 = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_source_param2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &source_param2_)));
          set_has_source_param2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_log_time;
        break;
      }

      // optional uint32 log_time = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_log_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &log_time_)));
          set_has_log_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void eo_family_log_notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 family_uid = 1;
  if (has_family_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->family_uid(), output);
  }

  // optional uint64 role_uid = 2;
  if (has_role_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->role_uid(), output);
  }

  // optional uint64 target_uid = 3;
  if (has_target_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->target_uid(), output);
  }

  // optional uint32 source_type = 4;
  if (has_source_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->source_type(), output);
  }

  // optional uint32 source_param = 5;
  if (has_source_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->source_param(), output);
  }

  // optional uint32 source_param2 = 6;
  if (has_source_param2()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->source_param2(), output);
  }

  // optional uint32 log_time = 7;
  if (has_log_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->log_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* eo_family_log_notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 family_uid = 1;
  if (has_family_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->family_uid(), target);
  }

  // optional uint64 role_uid = 2;
  if (has_role_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->role_uid(), target);
  }

  // optional uint64 target_uid = 3;
  if (has_target_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->target_uid(), target);
  }

  // optional uint32 source_type = 4;
  if (has_source_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->source_type(), target);
  }

  // optional uint32 source_param = 5;
  if (has_source_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->source_param(), target);
  }

  // optional uint32 source_param2 = 6;
  if (has_source_param2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->source_param2(), target);
  }

  // optional uint32 log_time = 7;
  if (has_log_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->log_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int eo_family_log_notify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 family_uid = 1;
    if (has_family_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->family_uid());
    }

    // optional uint64 role_uid = 2;
    if (has_role_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_uid());
    }

    // optional uint64 target_uid = 3;
    if (has_target_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->target_uid());
    }

    // optional uint32 source_type = 4;
    if (has_source_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->source_type());
    }

    // optional uint32 source_param = 5;
    if (has_source_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->source_param());
    }

    // optional uint32 source_param2 = 6;
    if (has_source_param2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->source_param2());
    }

    // optional uint32 log_time = 7;
    if (has_log_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->log_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void eo_family_log_notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const eo_family_log_notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const eo_family_log_notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void eo_family_log_notify::MergeFrom(const eo_family_log_notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_family_uid()) {
      set_family_uid(from.family_uid());
    }
    if (from.has_role_uid()) {
      set_role_uid(from.role_uid());
    }
    if (from.has_target_uid()) {
      set_target_uid(from.target_uid());
    }
    if (from.has_source_type()) {
      set_source_type(from.source_type());
    }
    if (from.has_source_param()) {
      set_source_param(from.source_param());
    }
    if (from.has_source_param2()) {
      set_source_param2(from.source_param2());
    }
    if (from.has_log_time()) {
      set_log_time(from.log_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void eo_family_log_notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void eo_family_log_notify::CopyFrom(const eo_family_log_notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool eo_family_log_notify::IsInitialized() const {

  return true;
}

void eo_family_log_notify::Swap(eo_family_log_notify* other) {
  if (other != this) {
    std::swap(family_uid_, other->family_uid_);
    std::swap(role_uid_, other->role_uid_);
    std::swap(target_uid_, other->target_uid_);
    std::swap(source_type_, other->source_type_);
    std::swap(source_param_, other->source_param_);
    std::swap(source_param2_, other->source_param2_);
    std::swap(log_time_, other->log_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata eo_family_log_notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = eo_family_log_notify_descriptor_;
  metadata.reflection = eo_family_log_notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int eo_friend_log_notify::kRoleUidFieldNumber;
const int eo_friend_log_notify::kFriendUidFieldNumber;
const int eo_friend_log_notify::kOldTypeFieldNumber;
const int eo_friend_log_notify::kNewTypeFieldNumber;
const int eo_friend_log_notify::kSourceTypeFieldNumber;
const int eo_friend_log_notify::kSourceParamFieldNumber;
const int eo_friend_log_notify::kLogTimeFieldNumber;
#endif  // !_MSC_VER

eo_friend_log_notify::eo_friend_log_notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void eo_friend_log_notify::InitAsDefaultInstance() {
}

eo_friend_log_notify::eo_friend_log_notify(const eo_friend_log_notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void eo_friend_log_notify::SharedCtor() {
  _cached_size_ = 0;
  role_uid_ = GOOGLE_ULONGLONG(0);
  friend_uid_ = GOOGLE_ULONGLONG(0);
  old_type_ = 0u;
  new_type_ = 0u;
  source_type_ = 0u;
  source_param_ = 0u;
  log_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

eo_friend_log_notify::~eo_friend_log_notify() {
  SharedDtor();
}

void eo_friend_log_notify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void eo_friend_log_notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* eo_friend_log_notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return eo_friend_log_notify_descriptor_;
}

const eo_friend_log_notify& eo_friend_log_notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_log_2eproto();
  return *default_instance_;
}

eo_friend_log_notify* eo_friend_log_notify::default_instance_ = NULL;

eo_friend_log_notify* eo_friend_log_notify::New() const {
  return new eo_friend_log_notify;
}

void eo_friend_log_notify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_uid_ = GOOGLE_ULONGLONG(0);
    friend_uid_ = GOOGLE_ULONGLONG(0);
    old_type_ = 0u;
    new_type_ = 0u;
    source_type_ = 0u;
    source_param_ = 0u;
    log_time_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool eo_friend_log_notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 role_uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_uid_)));
          set_has_role_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_friend_uid;
        break;
      }

      // optional uint64 friend_uid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_friend_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &friend_uid_)));
          set_has_friend_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_old_type;
        break;
      }

      // optional uint32 old_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_old_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &old_type_)));
          set_has_old_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_new_type;
        break;
      }

      // optional uint32 new_type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_new_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &new_type_)));
          set_has_new_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_source_type;
        break;
      }

      // optional uint32 source_type = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_source_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &source_type_)));
          set_has_source_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_source_param;
        break;
      }

      // optional uint32 source_param = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_source_param:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &source_param_)));
          set_has_source_param();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_log_time;
        break;
      }

      // optional uint32 log_time = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_log_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &log_time_)));
          set_has_log_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void eo_friend_log_notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 role_uid = 1;
  if (has_role_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->role_uid(), output);
  }

  // optional uint64 friend_uid = 2;
  if (has_friend_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->friend_uid(), output);
  }

  // optional uint32 old_type = 3;
  if (has_old_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->old_type(), output);
  }

  // optional uint32 new_type = 4;
  if (has_new_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->new_type(), output);
  }

  // optional uint32 source_type = 5;
  if (has_source_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->source_type(), output);
  }

  // optional uint32 source_param = 6;
  if (has_source_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->source_param(), output);
  }

  // optional uint32 log_time = 7;
  if (has_log_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->log_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* eo_friend_log_notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 role_uid = 1;
  if (has_role_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->role_uid(), target);
  }

  // optional uint64 friend_uid = 2;
  if (has_friend_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->friend_uid(), target);
  }

  // optional uint32 old_type = 3;
  if (has_old_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->old_type(), target);
  }

  // optional uint32 new_type = 4;
  if (has_new_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->new_type(), target);
  }

  // optional uint32 source_type = 5;
  if (has_source_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->source_type(), target);
  }

  // optional uint32 source_param = 6;
  if (has_source_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->source_param(), target);
  }

  // optional uint32 log_time = 7;
  if (has_log_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->log_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int eo_friend_log_notify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 role_uid = 1;
    if (has_role_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_uid());
    }

    // optional uint64 friend_uid = 2;
    if (has_friend_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->friend_uid());
    }

    // optional uint32 old_type = 3;
    if (has_old_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->old_type());
    }

    // optional uint32 new_type = 4;
    if (has_new_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->new_type());
    }

    // optional uint32 source_type = 5;
    if (has_source_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->source_type());
    }

    // optional uint32 source_param = 6;
    if (has_source_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->source_param());
    }

    // optional uint32 log_time = 7;
    if (has_log_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->log_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void eo_friend_log_notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const eo_friend_log_notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const eo_friend_log_notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void eo_friend_log_notify::MergeFrom(const eo_friend_log_notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_uid()) {
      set_role_uid(from.role_uid());
    }
    if (from.has_friend_uid()) {
      set_friend_uid(from.friend_uid());
    }
    if (from.has_old_type()) {
      set_old_type(from.old_type());
    }
    if (from.has_new_type()) {
      set_new_type(from.new_type());
    }
    if (from.has_source_type()) {
      set_source_type(from.source_type());
    }
    if (from.has_source_param()) {
      set_source_param(from.source_param());
    }
    if (from.has_log_time()) {
      set_log_time(from.log_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void eo_friend_log_notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void eo_friend_log_notify::CopyFrom(const eo_friend_log_notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool eo_friend_log_notify::IsInitialized() const {

  return true;
}

void eo_friend_log_notify::Swap(eo_friend_log_notify* other) {
  if (other != this) {
    std::swap(role_uid_, other->role_uid_);
    std::swap(friend_uid_, other->friend_uid_);
    std::swap(old_type_, other->old_type_);
    std::swap(new_type_, other->new_type_);
    std::swap(source_type_, other->source_type_);
    std::swap(source_param_, other->source_param_);
    std::swap(log_time_, other->log_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata eo_friend_log_notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = eo_friend_log_notify_descriptor_;
  metadata.reflection = eo_friend_log_notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int eo_mail_log_notify::kRoleUidFieldNumber;
const int eo_mail_log_notify::kMailIdFieldNumber;
const int eo_mail_log_notify::kMailTypeFieldNumber;
const int eo_mail_log_notify::kItemTypeFieldNumber;
const int eo_mail_log_notify::kItemsFieldNumber;
const int eo_mail_log_notify::kItemStateFieldNumber;
const int eo_mail_log_notify::kSourceTypeFieldNumber;
const int eo_mail_log_notify::kSourceParamFieldNumber;
const int eo_mail_log_notify::kLogTimeFieldNumber;
#endif  // !_MSC_VER

eo_mail_log_notify::eo_mail_log_notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void eo_mail_log_notify::InitAsDefaultInstance() {
}

eo_mail_log_notify::eo_mail_log_notify(const eo_mail_log_notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void eo_mail_log_notify::SharedCtor() {
  _cached_size_ = 0;
  role_uid_ = GOOGLE_ULONGLONG(0);
  mail_id_ = GOOGLE_ULONGLONG(0);
  mail_type_ = 0u;
  item_type_ = 0u;
  items_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  item_state_ = 0u;
  source_type_ = 0u;
  source_param_ = 0u;
  log_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

eo_mail_log_notify::~eo_mail_log_notify() {
  SharedDtor();
}

void eo_mail_log_notify::SharedDtor() {
  if (items_ != &::google::protobuf::internal::kEmptyString) {
    delete items_;
  }
  if (this != default_instance_) {
  }
}

void eo_mail_log_notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* eo_mail_log_notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return eo_mail_log_notify_descriptor_;
}

const eo_mail_log_notify& eo_mail_log_notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_log_2eproto();
  return *default_instance_;
}

eo_mail_log_notify* eo_mail_log_notify::default_instance_ = NULL;

eo_mail_log_notify* eo_mail_log_notify::New() const {
  return new eo_mail_log_notify;
}

void eo_mail_log_notify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_uid_ = GOOGLE_ULONGLONG(0);
    mail_id_ = GOOGLE_ULONGLONG(0);
    mail_type_ = 0u;
    item_type_ = 0u;
    if (has_items()) {
      if (items_ != &::google::protobuf::internal::kEmptyString) {
        items_->clear();
      }
    }
    item_state_ = 0u;
    source_type_ = 0u;
    source_param_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    log_time_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool eo_mail_log_notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 role_uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_uid_)));
          set_has_role_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_mail_id;
        break;
      }

      // optional uint64 mail_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mail_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &mail_id_)));
          set_has_mail_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_mail_type;
        break;
      }

      // optional uint32 mail_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mail_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mail_type_)));
          set_has_mail_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_item_type;
        break;
      }

      // optional uint32 item_type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_type_)));
          set_has_item_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_items;
        break;
      }

      // optional string items = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_items()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->items().data(), this->items().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_item_state;
        break;
      }

      // optional uint32 item_state = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_state_)));
          set_has_item_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_source_type;
        break;
      }

      // optional uint32 source_type = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_source_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &source_type_)));
          set_has_source_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_source_param;
        break;
      }

      // optional uint32 source_param = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_source_param:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &source_param_)));
          set_has_source_param();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_log_time;
        break;
      }

      // optional uint32 log_time = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_log_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &log_time_)));
          set_has_log_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void eo_mail_log_notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 role_uid = 1;
  if (has_role_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->role_uid(), output);
  }

  // optional uint64 mail_id = 2;
  if (has_mail_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->mail_id(), output);
  }

  // optional uint32 mail_type = 3;
  if (has_mail_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->mail_type(), output);
  }

  // optional uint32 item_type = 4;
  if (has_item_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->item_type(), output);
  }

  // optional string items = 5;
  if (has_items()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->items().data(), this->items().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->items(), output);
  }

  // optional uint32 item_state = 6;
  if (has_item_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->item_state(), output);
  }

  // optional uint32 source_type = 7;
  if (has_source_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->source_type(), output);
  }

  // optional uint32 source_param = 8;
  if (has_source_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->source_param(), output);
  }

  // optional uint32 log_time = 9;
  if (has_log_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->log_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* eo_mail_log_notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 role_uid = 1;
  if (has_role_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->role_uid(), target);
  }

  // optional uint64 mail_id = 2;
  if (has_mail_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->mail_id(), target);
  }

  // optional uint32 mail_type = 3;
  if (has_mail_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->mail_type(), target);
  }

  // optional uint32 item_type = 4;
  if (has_item_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->item_type(), target);
  }

  // optional string items = 5;
  if (has_items()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->items().data(), this->items().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->items(), target);
  }

  // optional uint32 item_state = 6;
  if (has_item_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->item_state(), target);
  }

  // optional uint32 source_type = 7;
  if (has_source_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->source_type(), target);
  }

  // optional uint32 source_param = 8;
  if (has_source_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->source_param(), target);
  }

  // optional uint32 log_time = 9;
  if (has_log_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->log_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int eo_mail_log_notify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 role_uid = 1;
    if (has_role_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_uid());
    }

    // optional uint64 mail_id = 2;
    if (has_mail_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->mail_id());
    }

    // optional uint32 mail_type = 3;
    if (has_mail_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mail_type());
    }

    // optional uint32 item_type = 4;
    if (has_item_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_type());
    }

    // optional string items = 5;
    if (has_items()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->items());
    }

    // optional uint32 item_state = 6;
    if (has_item_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_state());
    }

    // optional uint32 source_type = 7;
    if (has_source_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->source_type());
    }

    // optional uint32 source_param = 8;
    if (has_source_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->source_param());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 log_time = 9;
    if (has_log_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->log_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void eo_mail_log_notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const eo_mail_log_notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const eo_mail_log_notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void eo_mail_log_notify::MergeFrom(const eo_mail_log_notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_uid()) {
      set_role_uid(from.role_uid());
    }
    if (from.has_mail_id()) {
      set_mail_id(from.mail_id());
    }
    if (from.has_mail_type()) {
      set_mail_type(from.mail_type());
    }
    if (from.has_item_type()) {
      set_item_type(from.item_type());
    }
    if (from.has_items()) {
      set_items(from.items());
    }
    if (from.has_item_state()) {
      set_item_state(from.item_state());
    }
    if (from.has_source_type()) {
      set_source_type(from.source_type());
    }
    if (from.has_source_param()) {
      set_source_param(from.source_param());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_log_time()) {
      set_log_time(from.log_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void eo_mail_log_notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void eo_mail_log_notify::CopyFrom(const eo_mail_log_notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool eo_mail_log_notify::IsInitialized() const {

  return true;
}

void eo_mail_log_notify::Swap(eo_mail_log_notify* other) {
  if (other != this) {
    std::swap(role_uid_, other->role_uid_);
    std::swap(mail_id_, other->mail_id_);
    std::swap(mail_type_, other->mail_type_);
    std::swap(item_type_, other->item_type_);
    std::swap(items_, other->items_);
    std::swap(item_state_, other->item_state_);
    std::swap(source_type_, other->source_type_);
    std::swap(source_param_, other->source_param_);
    std::swap(log_time_, other->log_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata eo_mail_log_notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = eo_mail_log_notify_descriptor_;
  metadata.reflection = eo_mail_log_notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int go_pk_log_notify::kRoleUidFieldNumber;
const int go_pk_log_notify::kRoleLevelFieldNumber;
const int go_pk_log_notify::kOldNumFieldNumber;
const int go_pk_log_notify::kUpNumFieldNumber;
const int go_pk_log_notify::kNewNumFieldNumber;
const int go_pk_log_notify::kValueTypeFieldNumber;
const int go_pk_log_notify::kOpTypeFieldNumber;
const int go_pk_log_notify::kSourceTypeFieldNumber;
const int go_pk_log_notify::kSourceParamFieldNumber;
const int go_pk_log_notify::kLogTimeFieldNumber;
#endif  // !_MSC_VER

go_pk_log_notify::go_pk_log_notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void go_pk_log_notify::InitAsDefaultInstance() {
}

go_pk_log_notify::go_pk_log_notify(const go_pk_log_notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void go_pk_log_notify::SharedCtor() {
  _cached_size_ = 0;
  role_uid_ = GOOGLE_ULONGLONG(0);
  role_level_ = 0u;
  old_num_ = 0u;
  up_num_ = 0u;
  new_num_ = 0u;
  value_type_ = 0u;
  op_type_ = 0u;
  source_type_ = 0u;
  source_param_ = 0u;
  log_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

go_pk_log_notify::~go_pk_log_notify() {
  SharedDtor();
}

void go_pk_log_notify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void go_pk_log_notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* go_pk_log_notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return go_pk_log_notify_descriptor_;
}

const go_pk_log_notify& go_pk_log_notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_log_2eproto();
  return *default_instance_;
}

go_pk_log_notify* go_pk_log_notify::default_instance_ = NULL;

go_pk_log_notify* go_pk_log_notify::New() const {
  return new go_pk_log_notify;
}

void go_pk_log_notify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_uid_ = GOOGLE_ULONGLONG(0);
    role_level_ = 0u;
    old_num_ = 0u;
    up_num_ = 0u;
    new_num_ = 0u;
    value_type_ = 0u;
    op_type_ = 0u;
    source_type_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    source_param_ = 0u;
    log_time_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool go_pk_log_notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 role_uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_uid_)));
          set_has_role_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_role_level;
        break;
      }

      // required uint32 role_level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_level_)));
          set_has_role_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_old_num;
        break;
      }

      // optional uint32 old_num = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_old_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &old_num_)));
          set_has_old_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_up_num;
        break;
      }

      // optional uint32 up_num = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_up_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &up_num_)));
          set_has_up_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_new_num;
        break;
      }

      // optional uint32 new_num = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_new_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &new_num_)));
          set_has_new_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_value_type;
        break;
      }

      // optional uint32 value_type = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &value_type_)));
          set_has_value_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_op_type;
        break;
      }

      // optional uint32 op_type = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_op_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &op_type_)));
          set_has_op_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_source_type;
        break;
      }

      // optional uint32 source_type = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_source_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &source_type_)));
          set_has_source_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_source_param;
        break;
      }

      // optional uint32 source_param = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_source_param:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &source_param_)));
          set_has_source_param();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_log_time;
        break;
      }

      // optional uint32 log_time = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_log_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &log_time_)));
          set_has_log_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void go_pk_log_notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 role_uid = 1;
  if (has_role_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->role_uid(), output);
  }

  // required uint32 role_level = 2;
  if (has_role_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->role_level(), output);
  }

  // optional uint32 old_num = 3;
  if (has_old_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->old_num(), output);
  }

  // optional uint32 up_num = 4;
  if (has_up_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->up_num(), output);
  }

  // optional uint32 new_num = 5;
  if (has_new_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->new_num(), output);
  }

  // optional uint32 value_type = 6;
  if (has_value_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->value_type(), output);
  }

  // optional uint32 op_type = 7;
  if (has_op_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->op_type(), output);
  }

  // optional uint32 source_type = 8;
  if (has_source_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->source_type(), output);
  }

  // optional uint32 source_param = 9;
  if (has_source_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->source_param(), output);
  }

  // optional uint32 log_time = 10;
  if (has_log_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->log_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* go_pk_log_notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 role_uid = 1;
  if (has_role_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->role_uid(), target);
  }

  // required uint32 role_level = 2;
  if (has_role_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->role_level(), target);
  }

  // optional uint32 old_num = 3;
  if (has_old_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->old_num(), target);
  }

  // optional uint32 up_num = 4;
  if (has_up_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->up_num(), target);
  }

  // optional uint32 new_num = 5;
  if (has_new_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->new_num(), target);
  }

  // optional uint32 value_type = 6;
  if (has_value_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->value_type(), target);
  }

  // optional uint32 op_type = 7;
  if (has_op_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->op_type(), target);
  }

  // optional uint32 source_type = 8;
  if (has_source_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->source_type(), target);
  }

  // optional uint32 source_param = 9;
  if (has_source_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->source_param(), target);
  }

  // optional uint32 log_time = 10;
  if (has_log_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->log_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int go_pk_log_notify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 role_uid = 1;
    if (has_role_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_uid());
    }

    // required uint32 role_level = 2;
    if (has_role_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->role_level());
    }

    // optional uint32 old_num = 3;
    if (has_old_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->old_num());
    }

    // optional uint32 up_num = 4;
    if (has_up_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->up_num());
    }

    // optional uint32 new_num = 5;
    if (has_new_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->new_num());
    }

    // optional uint32 value_type = 6;
    if (has_value_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->value_type());
    }

    // optional uint32 op_type = 7;
    if (has_op_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->op_type());
    }

    // optional uint32 source_type = 8;
    if (has_source_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->source_type());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 source_param = 9;
    if (has_source_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->source_param());
    }

    // optional uint32 log_time = 10;
    if (has_log_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->log_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void go_pk_log_notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const go_pk_log_notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const go_pk_log_notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void go_pk_log_notify::MergeFrom(const go_pk_log_notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_uid()) {
      set_role_uid(from.role_uid());
    }
    if (from.has_role_level()) {
      set_role_level(from.role_level());
    }
    if (from.has_old_num()) {
      set_old_num(from.old_num());
    }
    if (from.has_up_num()) {
      set_up_num(from.up_num());
    }
    if (from.has_new_num()) {
      set_new_num(from.new_num());
    }
    if (from.has_value_type()) {
      set_value_type(from.value_type());
    }
    if (from.has_op_type()) {
      set_op_type(from.op_type());
    }
    if (from.has_source_type()) {
      set_source_type(from.source_type());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_source_param()) {
      set_source_param(from.source_param());
    }
    if (from.has_log_time()) {
      set_log_time(from.log_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void go_pk_log_notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void go_pk_log_notify::CopyFrom(const go_pk_log_notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool go_pk_log_notify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void go_pk_log_notify::Swap(go_pk_log_notify* other) {
  if (other != this) {
    std::swap(role_uid_, other->role_uid_);
    std::swap(role_level_, other->role_level_);
    std::swap(old_num_, other->old_num_);
    std::swap(up_num_, other->up_num_);
    std::swap(new_num_, other->new_num_);
    std::swap(value_type_, other->value_type_);
    std::swap(op_type_, other->op_type_);
    std::swap(source_type_, other->source_type_);
    std::swap(source_param_, other->source_param_);
    std::swap(log_time_, other->log_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata go_pk_log_notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = go_pk_log_notify_descriptor_;
  metadata.reflection = go_pk_log_notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int go_shop_log_notify::kRoleUidFieldNumber;
const int go_shop_log_notify::kGoodsTidFieldNumber;
const int go_shop_log_notify::kGoodsNumFieldNumber;
const int go_shop_log_notify::kCostTypeFieldNumber;
const int go_shop_log_notify::kCostValueFieldNumber;
const int go_shop_log_notify::kItemIdFieldNumber;
const int go_shop_log_notify::kItemNumFieldNumber;
const int go_shop_log_notify::kSourceTypeFieldNumber;
const int go_shop_log_notify::kSourceParamFieldNumber;
const int go_shop_log_notify::kLogTimeFieldNumber;
#endif  // !_MSC_VER

go_shop_log_notify::go_shop_log_notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void go_shop_log_notify::InitAsDefaultInstance() {
}

go_shop_log_notify::go_shop_log_notify(const go_shop_log_notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void go_shop_log_notify::SharedCtor() {
  _cached_size_ = 0;
  role_uid_ = GOOGLE_ULONGLONG(0);
  goods_tid_ = 0u;
  goods_num_ = 0u;
  cost_type_ = 0u;
  cost_value_ = 0u;
  item_id_ = 0u;
  item_num_ = 0u;
  source_type_ = 0u;
  source_param_ = 0u;
  log_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

go_shop_log_notify::~go_shop_log_notify() {
  SharedDtor();
}

void go_shop_log_notify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void go_shop_log_notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* go_shop_log_notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return go_shop_log_notify_descriptor_;
}

const go_shop_log_notify& go_shop_log_notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_log_2eproto();
  return *default_instance_;
}

go_shop_log_notify* go_shop_log_notify::default_instance_ = NULL;

go_shop_log_notify* go_shop_log_notify::New() const {
  return new go_shop_log_notify;
}

void go_shop_log_notify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_uid_ = GOOGLE_ULONGLONG(0);
    goods_tid_ = 0u;
    goods_num_ = 0u;
    cost_type_ = 0u;
    cost_value_ = 0u;
    item_id_ = 0u;
    item_num_ = 0u;
    source_type_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    source_param_ = 0u;
    log_time_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool go_shop_log_notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 role_uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_uid_)));
          set_has_role_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_goods_tid;
        break;
      }

      // optional uint32 goods_tid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_goods_tid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &goods_tid_)));
          set_has_goods_tid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_goods_num;
        break;
      }

      // optional uint32 goods_num = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_goods_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &goods_num_)));
          set_has_goods_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_cost_type;
        break;
      }

      // optional uint32 cost_type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cost_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cost_type_)));
          set_has_cost_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_cost_value;
        break;
      }

      // optional uint32 cost_value = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cost_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cost_value_)));
          set_has_cost_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_item_id;
        break;
      }

      // optional uint32 item_id = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_id_)));
          set_has_item_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_item_num;
        break;
      }

      // optional uint32 item_num = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_num_)));
          set_has_item_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_source_type;
        break;
      }

      // optional uint32 source_type = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_source_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &source_type_)));
          set_has_source_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_source_param;
        break;
      }

      // optional uint32 source_param = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_source_param:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &source_param_)));
          set_has_source_param();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_log_time;
        break;
      }

      // optional uint32 log_time = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_log_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &log_time_)));
          set_has_log_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void go_shop_log_notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 role_uid = 1;
  if (has_role_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->role_uid(), output);
  }

  // optional uint32 goods_tid = 2;
  if (has_goods_tid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->goods_tid(), output);
  }

  // optional uint32 goods_num = 3;
  if (has_goods_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->goods_num(), output);
  }

  // optional uint32 cost_type = 4;
  if (has_cost_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->cost_type(), output);
  }

  // optional uint32 cost_value = 5;
  if (has_cost_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->cost_value(), output);
  }

  // optional uint32 item_id = 6;
  if (has_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->item_id(), output);
  }

  // optional uint32 item_num = 7;
  if (has_item_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->item_num(), output);
  }

  // optional uint32 source_type = 8;
  if (has_source_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->source_type(), output);
  }

  // optional uint32 source_param = 9;
  if (has_source_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->source_param(), output);
  }

  // optional uint32 log_time = 10;
  if (has_log_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->log_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* go_shop_log_notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 role_uid = 1;
  if (has_role_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->role_uid(), target);
  }

  // optional uint32 goods_tid = 2;
  if (has_goods_tid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->goods_tid(), target);
  }

  // optional uint32 goods_num = 3;
  if (has_goods_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->goods_num(), target);
  }

  // optional uint32 cost_type = 4;
  if (has_cost_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->cost_type(), target);
  }

  // optional uint32 cost_value = 5;
  if (has_cost_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->cost_value(), target);
  }

  // optional uint32 item_id = 6;
  if (has_item_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->item_id(), target);
  }

  // optional uint32 item_num = 7;
  if (has_item_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->item_num(), target);
  }

  // optional uint32 source_type = 8;
  if (has_source_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->source_type(), target);
  }

  // optional uint32 source_param = 9;
  if (has_source_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->source_param(), target);
  }

  // optional uint32 log_time = 10;
  if (has_log_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->log_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int go_shop_log_notify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 role_uid = 1;
    if (has_role_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_uid());
    }

    // optional uint32 goods_tid = 2;
    if (has_goods_tid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->goods_tid());
    }

    // optional uint32 goods_num = 3;
    if (has_goods_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->goods_num());
    }

    // optional uint32 cost_type = 4;
    if (has_cost_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cost_type());
    }

    // optional uint32 cost_value = 5;
    if (has_cost_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cost_value());
    }

    // optional uint32 item_id = 6;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_id());
    }

    // optional uint32 item_num = 7;
    if (has_item_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_num());
    }

    // optional uint32 source_type = 8;
    if (has_source_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->source_type());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 source_param = 9;
    if (has_source_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->source_param());
    }

    // optional uint32 log_time = 10;
    if (has_log_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->log_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void go_shop_log_notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const go_shop_log_notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const go_shop_log_notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void go_shop_log_notify::MergeFrom(const go_shop_log_notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_uid()) {
      set_role_uid(from.role_uid());
    }
    if (from.has_goods_tid()) {
      set_goods_tid(from.goods_tid());
    }
    if (from.has_goods_num()) {
      set_goods_num(from.goods_num());
    }
    if (from.has_cost_type()) {
      set_cost_type(from.cost_type());
    }
    if (from.has_cost_value()) {
      set_cost_value(from.cost_value());
    }
    if (from.has_item_id()) {
      set_item_id(from.item_id());
    }
    if (from.has_item_num()) {
      set_item_num(from.item_num());
    }
    if (from.has_source_type()) {
      set_source_type(from.source_type());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_source_param()) {
      set_source_param(from.source_param());
    }
    if (from.has_log_time()) {
      set_log_time(from.log_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void go_shop_log_notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void go_shop_log_notify::CopyFrom(const go_shop_log_notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool go_shop_log_notify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void go_shop_log_notify::Swap(go_shop_log_notify* other) {
  if (other != this) {
    std::swap(role_uid_, other->role_uid_);
    std::swap(goods_tid_, other->goods_tid_);
    std::swap(goods_num_, other->goods_num_);
    std::swap(cost_type_, other->cost_type_);
    std::swap(cost_value_, other->cost_value_);
    std::swap(item_id_, other->item_id_);
    std::swap(item_num_, other->item_num_);
    std::swap(source_type_, other->source_type_);
    std::swap(source_param_, other->source_param_);
    std::swap(log_time_, other->log_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata go_shop_log_notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = go_shop_log_notify_descriptor_;
  metadata.reflection = go_shop_log_notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int go_random_shop_log_notify::kRoleUidFieldNumber;
const int go_random_shop_log_notify::kShopTidFieldNumber;
const int go_random_shop_log_notify::kGoodsTidFieldNumber;
const int go_random_shop_log_notify::kCostTypeFieldNumber;
const int go_random_shop_log_notify::kCostValueFieldNumber;
const int go_random_shop_log_notify::kCostItemFieldNumber;
const int go_random_shop_log_notify::kCostItemValueFieldNumber;
const int go_random_shop_log_notify::kOldNumFieldNumber;
const int go_random_shop_log_notify::kNewNumFieldNumber;
const int go_random_shop_log_notify::kSourceTypeFieldNumber;
const int go_random_shop_log_notify::kLogTimeFieldNumber;
#endif  // !_MSC_VER

go_random_shop_log_notify::go_random_shop_log_notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void go_random_shop_log_notify::InitAsDefaultInstance() {
}

go_random_shop_log_notify::go_random_shop_log_notify(const go_random_shop_log_notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void go_random_shop_log_notify::SharedCtor() {
  _cached_size_ = 0;
  role_uid_ = GOOGLE_ULONGLONG(0);
  shop_tid_ = 0u;
  goods_tid_ = 0u;
  cost_type_ = 0u;
  cost_value_ = 0u;
  cost_item_ = 0u;
  cost_item_value_ = 0u;
  old_num_ = 0u;
  new_num_ = 0u;
  source_type_ = 0u;
  log_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

go_random_shop_log_notify::~go_random_shop_log_notify() {
  SharedDtor();
}

void go_random_shop_log_notify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void go_random_shop_log_notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* go_random_shop_log_notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return go_random_shop_log_notify_descriptor_;
}

const go_random_shop_log_notify& go_random_shop_log_notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_log_2eproto();
  return *default_instance_;
}

go_random_shop_log_notify* go_random_shop_log_notify::default_instance_ = NULL;

go_random_shop_log_notify* go_random_shop_log_notify::New() const {
  return new go_random_shop_log_notify;
}

void go_random_shop_log_notify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_uid_ = GOOGLE_ULONGLONG(0);
    shop_tid_ = 0u;
    goods_tid_ = 0u;
    cost_type_ = 0u;
    cost_value_ = 0u;
    cost_item_ = 0u;
    cost_item_value_ = 0u;
    old_num_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    new_num_ = 0u;
    source_type_ = 0u;
    log_time_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool go_random_shop_log_notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 role_uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_uid_)));
          set_has_role_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_shop_tid;
        break;
      }

      // optional uint32 shop_tid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_shop_tid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &shop_tid_)));
          set_has_shop_tid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_goods_tid;
        break;
      }

      // optional uint32 goods_tid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_goods_tid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &goods_tid_)));
          set_has_goods_tid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_cost_type;
        break;
      }

      // optional uint32 cost_type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cost_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cost_type_)));
          set_has_cost_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_cost_value;
        break;
      }

      // optional uint32 cost_value = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cost_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cost_value_)));
          set_has_cost_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_cost_item;
        break;
      }

      // optional uint32 cost_item = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cost_item:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cost_item_)));
          set_has_cost_item();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_cost_item_value;
        break;
      }

      // optional uint32 cost_item_value = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cost_item_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cost_item_value_)));
          set_has_cost_item_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_old_num;
        break;
      }

      // optional uint32 old_num = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_old_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &old_num_)));
          set_has_old_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_new_num;
        break;
      }

      // optional uint32 new_num = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_new_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &new_num_)));
          set_has_new_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_source_type;
        break;
      }

      // optional uint32 source_type = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_source_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &source_type_)));
          set_has_source_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_log_time;
        break;
      }

      // optional uint32 log_time = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_log_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &log_time_)));
          set_has_log_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void go_random_shop_log_notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 role_uid = 1;
  if (has_role_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->role_uid(), output);
  }

  // optional uint32 shop_tid = 2;
  if (has_shop_tid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->shop_tid(), output);
  }

  // optional uint32 goods_tid = 3;
  if (has_goods_tid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->goods_tid(), output);
  }

  // optional uint32 cost_type = 4;
  if (has_cost_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->cost_type(), output);
  }

  // optional uint32 cost_value = 5;
  if (has_cost_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->cost_value(), output);
  }

  // optional uint32 cost_item = 6;
  if (has_cost_item()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->cost_item(), output);
  }

  // optional uint32 cost_item_value = 7;
  if (has_cost_item_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->cost_item_value(), output);
  }

  // optional uint32 old_num = 8;
  if (has_old_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->old_num(), output);
  }

  // optional uint32 new_num = 9;
  if (has_new_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->new_num(), output);
  }

  // optional uint32 source_type = 10;
  if (has_source_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->source_type(), output);
  }

  // optional uint32 log_time = 11;
  if (has_log_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->log_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* go_random_shop_log_notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 role_uid = 1;
  if (has_role_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->role_uid(), target);
  }

  // optional uint32 shop_tid = 2;
  if (has_shop_tid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->shop_tid(), target);
  }

  // optional uint32 goods_tid = 3;
  if (has_goods_tid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->goods_tid(), target);
  }

  // optional uint32 cost_type = 4;
  if (has_cost_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->cost_type(), target);
  }

  // optional uint32 cost_value = 5;
  if (has_cost_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->cost_value(), target);
  }

  // optional uint32 cost_item = 6;
  if (has_cost_item()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->cost_item(), target);
  }

  // optional uint32 cost_item_value = 7;
  if (has_cost_item_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->cost_item_value(), target);
  }

  // optional uint32 old_num = 8;
  if (has_old_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->old_num(), target);
  }

  // optional uint32 new_num = 9;
  if (has_new_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->new_num(), target);
  }

  // optional uint32 source_type = 10;
  if (has_source_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->source_type(), target);
  }

  // optional uint32 log_time = 11;
  if (has_log_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->log_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int go_random_shop_log_notify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 role_uid = 1;
    if (has_role_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_uid());
    }

    // optional uint32 shop_tid = 2;
    if (has_shop_tid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->shop_tid());
    }

    // optional uint32 goods_tid = 3;
    if (has_goods_tid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->goods_tid());
    }

    // optional uint32 cost_type = 4;
    if (has_cost_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cost_type());
    }

    // optional uint32 cost_value = 5;
    if (has_cost_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cost_value());
    }

    // optional uint32 cost_item = 6;
    if (has_cost_item()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cost_item());
    }

    // optional uint32 cost_item_value = 7;
    if (has_cost_item_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cost_item_value());
    }

    // optional uint32 old_num = 8;
    if (has_old_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->old_num());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 new_num = 9;
    if (has_new_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->new_num());
    }

    // optional uint32 source_type = 10;
    if (has_source_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->source_type());
    }

    // optional uint32 log_time = 11;
    if (has_log_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->log_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void go_random_shop_log_notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const go_random_shop_log_notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const go_random_shop_log_notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void go_random_shop_log_notify::MergeFrom(const go_random_shop_log_notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_uid()) {
      set_role_uid(from.role_uid());
    }
    if (from.has_shop_tid()) {
      set_shop_tid(from.shop_tid());
    }
    if (from.has_goods_tid()) {
      set_goods_tid(from.goods_tid());
    }
    if (from.has_cost_type()) {
      set_cost_type(from.cost_type());
    }
    if (from.has_cost_value()) {
      set_cost_value(from.cost_value());
    }
    if (from.has_cost_item()) {
      set_cost_item(from.cost_item());
    }
    if (from.has_cost_item_value()) {
      set_cost_item_value(from.cost_item_value());
    }
    if (from.has_old_num()) {
      set_old_num(from.old_num());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_new_num()) {
      set_new_num(from.new_num());
    }
    if (from.has_source_type()) {
      set_source_type(from.source_type());
    }
    if (from.has_log_time()) {
      set_log_time(from.log_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void go_random_shop_log_notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void go_random_shop_log_notify::CopyFrom(const go_random_shop_log_notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool go_random_shop_log_notify::IsInitialized() const {

  return true;
}

void go_random_shop_log_notify::Swap(go_random_shop_log_notify* other) {
  if (other != this) {
    std::swap(role_uid_, other->role_uid_);
    std::swap(shop_tid_, other->shop_tid_);
    std::swap(goods_tid_, other->goods_tid_);
    std::swap(cost_type_, other->cost_type_);
    std::swap(cost_value_, other->cost_value_);
    std::swap(cost_item_, other->cost_item_);
    std::swap(cost_item_value_, other->cost_item_value_);
    std::swap(old_num_, other->old_num_);
    std::swap(new_num_, other->new_num_);
    std::swap(source_type_, other->source_type_);
    std::swap(log_time_, other->log_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata go_random_shop_log_notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = go_random_shop_log_notify_descriptor_;
  metadata.reflection = go_random_shop_log_notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int go_equip_log_notify::kRoleUidFieldNumber;
const int go_equip_log_notify::kRoleLevelFieldNumber;
const int go_equip_log_notify::kItemUidFieldNumber;
const int go_equip_log_notify::kItemTidFieldNumber;
const int go_equip_log_notify::kHeroUidFieldNumber;
const int go_equip_log_notify::kAttrFieldNumber;
const int go_equip_log_notify::kExattrFieldNumber;
const int go_equip_log_notify::kRemakeExattrFieldNumber;
const int go_equip_log_notify::kOpTypeFieldNumber;
const int go_equip_log_notify::kSourceTypeFieldNumber;
const int go_equip_log_notify::kSourceParamFieldNumber;
const int go_equip_log_notify::kLogTimeFieldNumber;
#endif  // !_MSC_VER

go_equip_log_notify::go_equip_log_notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void go_equip_log_notify::InitAsDefaultInstance() {
}

go_equip_log_notify::go_equip_log_notify(const go_equip_log_notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void go_equip_log_notify::SharedCtor() {
  _cached_size_ = 0;
  role_uid_ = GOOGLE_ULONGLONG(0);
  role_level_ = 0u;
  item_uid_ = GOOGLE_ULONGLONG(0);
  item_tid_ = 0u;
  hero_uid_ = GOOGLE_ULONGLONG(0);
  op_type_ = 0u;
  source_type_ = 0u;
  source_param_ = 0u;
  log_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

go_equip_log_notify::~go_equip_log_notify() {
  SharedDtor();
}

void go_equip_log_notify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void go_equip_log_notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* go_equip_log_notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return go_equip_log_notify_descriptor_;
}

const go_equip_log_notify& go_equip_log_notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_log_2eproto();
  return *default_instance_;
}

go_equip_log_notify* go_equip_log_notify::default_instance_ = NULL;

go_equip_log_notify* go_equip_log_notify::New() const {
  return new go_equip_log_notify;
}

void go_equip_log_notify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_uid_ = GOOGLE_ULONGLONG(0);
    role_level_ = 0u;
    item_uid_ = GOOGLE_ULONGLONG(0);
    item_tid_ = 0u;
    hero_uid_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    op_type_ = 0u;
    source_type_ = 0u;
    source_param_ = 0u;
    log_time_ = 0u;
  }
  attr_.Clear();
  exattr_.Clear();
  remake_exattr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool go_equip_log_notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 role_uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_uid_)));
          set_has_role_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_role_level;
        break;
      }

      // required uint32 role_level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_level_)));
          set_has_role_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_item_uid;
        break;
      }

      // required uint64 item_uid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &item_uid_)));
          set_has_item_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_item_tid;
        break;
      }

      // required uint32 item_tid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_tid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_tid_)));
          set_has_item_tid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_hero_uid;
        break;
      }

      // optional uint64 hero_uid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hero_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &hero_uid_)));
          set_has_hero_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_attr;
        break;
      }

      // repeated .proto.common.equip_attr attr = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attr()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_attr;
        if (input->ExpectTag(56)) goto parse_exattr;
        break;
      }

      // repeated uint32 exattr = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exattr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 56, input, this->mutable_exattr())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_exattr())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_exattr;
        if (input->ExpectTag(64)) goto parse_remake_exattr;
        break;
      }

      // repeated uint32 remake_exattr = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_remake_exattr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 64, input, this->mutable_remake_exattr())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_remake_exattr())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_remake_exattr;
        if (input->ExpectTag(72)) goto parse_op_type;
        break;
      }

      // required uint32 op_type = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_op_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &op_type_)));
          set_has_op_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_source_type;
        break;
      }

      // required uint32 source_type = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_source_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &source_type_)));
          set_has_source_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_source_param;
        break;
      }

      // optional uint32 source_param = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_source_param:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &source_param_)));
          set_has_source_param();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_log_time;
        break;
      }

      // required uint32 log_time = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_log_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &log_time_)));
          set_has_log_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void go_equip_log_notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 role_uid = 1;
  if (has_role_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->role_uid(), output);
  }

  // required uint32 role_level = 2;
  if (has_role_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->role_level(), output);
  }

  // required uint64 item_uid = 3;
  if (has_item_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->item_uid(), output);
  }

  // required uint32 item_tid = 4;
  if (has_item_tid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->item_tid(), output);
  }

  // optional uint64 hero_uid = 5;
  if (has_hero_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->hero_uid(), output);
  }

  // repeated .proto.common.equip_attr attr = 6;
  for (int i = 0; i < this->attr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->attr(i), output);
  }

  // repeated uint32 exattr = 7;
  for (int i = 0; i < this->exattr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      7, this->exattr(i), output);
  }

  // repeated uint32 remake_exattr = 8;
  for (int i = 0; i < this->remake_exattr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      8, this->remake_exattr(i), output);
  }

  // required uint32 op_type = 9;
  if (has_op_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->op_type(), output);
  }

  // required uint32 source_type = 11;
  if (has_source_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->source_type(), output);
  }

  // optional uint32 source_param = 12;
  if (has_source_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->source_param(), output);
  }

  // required uint32 log_time = 13;
  if (has_log_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->log_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* go_equip_log_notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 role_uid = 1;
  if (has_role_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->role_uid(), target);
  }

  // required uint32 role_level = 2;
  if (has_role_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->role_level(), target);
  }

  // required uint64 item_uid = 3;
  if (has_item_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->item_uid(), target);
  }

  // required uint32 item_tid = 4;
  if (has_item_tid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->item_tid(), target);
  }

  // optional uint64 hero_uid = 5;
  if (has_hero_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->hero_uid(), target);
  }

  // repeated .proto.common.equip_attr attr = 6;
  for (int i = 0; i < this->attr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->attr(i), target);
  }

  // repeated uint32 exattr = 7;
  for (int i = 0; i < this->exattr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(7, this->exattr(i), target);
  }

  // repeated uint32 remake_exattr = 8;
  for (int i = 0; i < this->remake_exattr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(8, this->remake_exattr(i), target);
  }

  // required uint32 op_type = 9;
  if (has_op_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->op_type(), target);
  }

  // required uint32 source_type = 11;
  if (has_source_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->source_type(), target);
  }

  // optional uint32 source_param = 12;
  if (has_source_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->source_param(), target);
  }

  // required uint32 log_time = 13;
  if (has_log_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->log_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int go_equip_log_notify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 role_uid = 1;
    if (has_role_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_uid());
    }

    // required uint32 role_level = 2;
    if (has_role_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->role_level());
    }

    // required uint64 item_uid = 3;
    if (has_item_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->item_uid());
    }

    // required uint32 item_tid = 4;
    if (has_item_tid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_tid());
    }

    // optional uint64 hero_uid = 5;
    if (has_hero_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->hero_uid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required uint32 op_type = 9;
    if (has_op_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->op_type());
    }

    // required uint32 source_type = 11;
    if (has_source_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->source_type());
    }

    // optional uint32 source_param = 12;
    if (has_source_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->source_param());
    }

    // required uint32 log_time = 13;
    if (has_log_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->log_time());
    }

  }
  // repeated .proto.common.equip_attr attr = 6;
  total_size += 1 * this->attr_size();
  for (int i = 0; i < this->attr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attr(i));
  }

  // repeated uint32 exattr = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->exattr_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->exattr(i));
    }
    total_size += 1 * this->exattr_size() + data_size;
  }

  // repeated uint32 remake_exattr = 8;
  {
    int data_size = 0;
    for (int i = 0; i < this->remake_exattr_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->remake_exattr(i));
    }
    total_size += 1 * this->remake_exattr_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void go_equip_log_notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const go_equip_log_notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const go_equip_log_notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void go_equip_log_notify::MergeFrom(const go_equip_log_notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  attr_.MergeFrom(from.attr_);
  exattr_.MergeFrom(from.exattr_);
  remake_exattr_.MergeFrom(from.remake_exattr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_uid()) {
      set_role_uid(from.role_uid());
    }
    if (from.has_role_level()) {
      set_role_level(from.role_level());
    }
    if (from.has_item_uid()) {
      set_item_uid(from.item_uid());
    }
    if (from.has_item_tid()) {
      set_item_tid(from.item_tid());
    }
    if (from.has_hero_uid()) {
      set_hero_uid(from.hero_uid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_op_type()) {
      set_op_type(from.op_type());
    }
    if (from.has_source_type()) {
      set_source_type(from.source_type());
    }
    if (from.has_source_param()) {
      set_source_param(from.source_param());
    }
    if (from.has_log_time()) {
      set_log_time(from.log_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void go_equip_log_notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void go_equip_log_notify::CopyFrom(const go_equip_log_notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool go_equip_log_notify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000b0f) != 0x00000b0f) return false;

  return true;
}

void go_equip_log_notify::Swap(go_equip_log_notify* other) {
  if (other != this) {
    std::swap(role_uid_, other->role_uid_);
    std::swap(role_level_, other->role_level_);
    std::swap(item_uid_, other->item_uid_);
    std::swap(item_tid_, other->item_tid_);
    std::swap(hero_uid_, other->hero_uid_);
    attr_.Swap(&other->attr_);
    exattr_.Swap(&other->exattr_);
    remake_exattr_.Swap(&other->remake_exattr_);
    std::swap(op_type_, other->op_type_);
    std::swap(source_type_, other->source_type_);
    std::swap(source_param_, other->source_param_);
    std::swap(log_time_, other->log_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata go_equip_log_notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = go_equip_log_notify_descriptor_;
  metadata.reflection = go_equip_log_notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int go_achieve_log_notify::kRoleUidFieldNumber;
const int go_achieve_log_notify::kAchieveIdFieldNumber;
const int go_achieve_log_notify::kOldLevelFieldNumber;
const int go_achieve_log_notify::kUpLevelFieldNumber;
const int go_achieve_log_notify::kNewLevelFieldNumber;
const int go_achieve_log_notify::kOldCountFieldNumber;
const int go_achieve_log_notify::kUpCountFieldNumber;
const int go_achieve_log_notify::kNewCountFieldNumber;
const int go_achieve_log_notify::kOldAchievePointFieldNumber;
const int go_achieve_log_notify::kAddAchievePointFieldNumber;
const int go_achieve_log_notify::kNewAchievePointFieldNumber;
const int go_achieve_log_notify::kOldAchieveLevelFieldNumber;
const int go_achieve_log_notify::kUpAchieveLevelFieldNumber;
const int go_achieve_log_notify::kNewAchieveLevelFieldNumber;
const int go_achieve_log_notify::kOldRewardGetLevelFieldNumber;
const int go_achieve_log_notify::kNewRewardGetLevelFieldNumber;
const int go_achieve_log_notify::kSourceTypeFieldNumber;
const int go_achieve_log_notify::kSourceParamFieldNumber;
const int go_achieve_log_notify::kLogTimeFieldNumber;
const int go_achieve_log_notify::kSourecTypeStrFieldNumber;
#endif  // !_MSC_VER

go_achieve_log_notify::go_achieve_log_notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void go_achieve_log_notify::InitAsDefaultInstance() {
}

go_achieve_log_notify::go_achieve_log_notify(const go_achieve_log_notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void go_achieve_log_notify::SharedCtor() {
  _cached_size_ = 0;
  role_uid_ = GOOGLE_ULONGLONG(0);
  achieve_id_ = 0u;
  old_level_ = 0u;
  up_level_ = 0u;
  new_level_ = 0u;
  old_count_ = 0u;
  up_count_ = 0u;
  new_count_ = 0u;
  old_achieve_point_ = 0u;
  add_achieve_point_ = 0u;
  new_achieve_point_ = 0u;
  old_achieve_level_ = 0u;
  up_achieve_level_ = 0u;
  new_achieve_level_ = 0u;
  old_reward_get_level_ = 0u;
  new_reward_get_level_ = 0u;
  source_type_ = 0u;
  source_param_ = 0u;
  log_time_ = 0u;
  sourec_type_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

go_achieve_log_notify::~go_achieve_log_notify() {
  SharedDtor();
}

void go_achieve_log_notify::SharedDtor() {
  if (sourec_type_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sourec_type_str_;
  }
  if (this != default_instance_) {
  }
}

void go_achieve_log_notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* go_achieve_log_notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return go_achieve_log_notify_descriptor_;
}

const go_achieve_log_notify& go_achieve_log_notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_log_2eproto();
  return *default_instance_;
}

go_achieve_log_notify* go_achieve_log_notify::default_instance_ = NULL;

go_achieve_log_notify* go_achieve_log_notify::New() const {
  return new go_achieve_log_notify;
}

void go_achieve_log_notify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_uid_ = GOOGLE_ULONGLONG(0);
    achieve_id_ = 0u;
    old_level_ = 0u;
    up_level_ = 0u;
    new_level_ = 0u;
    old_count_ = 0u;
    up_count_ = 0u;
    new_count_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    old_achieve_point_ = 0u;
    add_achieve_point_ = 0u;
    new_achieve_point_ = 0u;
    old_achieve_level_ = 0u;
    up_achieve_level_ = 0u;
    new_achieve_level_ = 0u;
    old_reward_get_level_ = 0u;
    new_reward_get_level_ = 0u;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    source_type_ = 0u;
    source_param_ = 0u;
    log_time_ = 0u;
    if (has_sourec_type_str()) {
      if (sourec_type_str_ != &::google::protobuf::internal::kEmptyString) {
        sourec_type_str_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool go_achieve_log_notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 role_uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_uid_)));
          set_has_role_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_achieve_id;
        break;
      }

      // required uint32 achieve_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_achieve_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &achieve_id_)));
          set_has_achieve_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_old_level;
        break;
      }

      // required uint32 old_level = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_old_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &old_level_)));
          set_has_old_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_up_level;
        break;
      }

      // required uint32 up_level = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_up_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &up_level_)));
          set_has_up_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_new_level;
        break;
      }

      // required uint32 new_level = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_new_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &new_level_)));
          set_has_new_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_old_count;
        break;
      }

      // required uint32 old_count = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_old_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &old_count_)));
          set_has_old_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_up_count;
        break;
      }

      // required uint32 up_count = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_up_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &up_count_)));
          set_has_up_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_new_count;
        break;
      }

      // required uint32 new_count = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_new_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &new_count_)));
          set_has_new_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_old_achieve_point;
        break;
      }

      // required uint32 old_achieve_point = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_old_achieve_point:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &old_achieve_point_)));
          set_has_old_achieve_point();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_add_achieve_point;
        break;
      }

      // required uint32 add_achieve_point = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_add_achieve_point:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &add_achieve_point_)));
          set_has_add_achieve_point();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_new_achieve_point;
        break;
      }

      // required uint32 new_achieve_point = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_new_achieve_point:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &new_achieve_point_)));
          set_has_new_achieve_point();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_old_achieve_level;
        break;
      }

      // required uint32 old_achieve_level = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_old_achieve_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &old_achieve_level_)));
          set_has_old_achieve_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_up_achieve_level;
        break;
      }

      // required uint32 up_achieve_level = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_up_achieve_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &up_achieve_level_)));
          set_has_up_achieve_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_new_achieve_level;
        break;
      }

      // required uint32 new_achieve_level = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_new_achieve_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &new_achieve_level_)));
          set_has_new_achieve_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_old_reward_get_level;
        break;
      }

      // required uint32 old_reward_get_level = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_old_reward_get_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &old_reward_get_level_)));
          set_has_old_reward_get_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_new_reward_get_level;
        break;
      }

      // required uint32 new_reward_get_level = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_new_reward_get_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &new_reward_get_level_)));
          set_has_new_reward_get_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_source_type;
        break;
      }

      // required uint32 source_type = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_source_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &source_type_)));
          set_has_source_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_source_param;
        break;
      }

      // optional uint32 source_param = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_source_param:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &source_param_)));
          set_has_source_param();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_log_time;
        break;
      }

      // required uint32 log_time = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_log_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &log_time_)));
          set_has_log_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_sourec_type_str;
        break;
      }

      // optional string sourec_type_str = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sourec_type_str:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sourec_type_str()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sourec_type_str().data(), this->sourec_type_str().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void go_achieve_log_notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 role_uid = 1;
  if (has_role_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->role_uid(), output);
  }

  // required uint32 achieve_id = 2;
  if (has_achieve_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->achieve_id(), output);
  }

  // required uint32 old_level = 3;
  if (has_old_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->old_level(), output);
  }

  // required uint32 up_level = 4;
  if (has_up_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->up_level(), output);
  }

  // required uint32 new_level = 5;
  if (has_new_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->new_level(), output);
  }

  // required uint32 old_count = 6;
  if (has_old_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->old_count(), output);
  }

  // required uint32 up_count = 7;
  if (has_up_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->up_count(), output);
  }

  // required uint32 new_count = 8;
  if (has_new_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->new_count(), output);
  }

  // required uint32 old_achieve_point = 9;
  if (has_old_achieve_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->old_achieve_point(), output);
  }

  // required uint32 add_achieve_point = 10;
  if (has_add_achieve_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->add_achieve_point(), output);
  }

  // required uint32 new_achieve_point = 11;
  if (has_new_achieve_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->new_achieve_point(), output);
  }

  // required uint32 old_achieve_level = 12;
  if (has_old_achieve_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->old_achieve_level(), output);
  }

  // required uint32 up_achieve_level = 13;
  if (has_up_achieve_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->up_achieve_level(), output);
  }

  // required uint32 new_achieve_level = 14;
  if (has_new_achieve_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->new_achieve_level(), output);
  }

  // required uint32 old_reward_get_level = 15;
  if (has_old_reward_get_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->old_reward_get_level(), output);
  }

  // required uint32 new_reward_get_level = 16;
  if (has_new_reward_get_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->new_reward_get_level(), output);
  }

  // required uint32 source_type = 17;
  if (has_source_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->source_type(), output);
  }

  // optional uint32 source_param = 18;
  if (has_source_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->source_param(), output);
  }

  // required uint32 log_time = 19;
  if (has_log_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->log_time(), output);
  }

  // optional string sourec_type_str = 20;
  if (has_sourec_type_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sourec_type_str().data(), this->sourec_type_str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      20, this->sourec_type_str(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* go_achieve_log_notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 role_uid = 1;
  if (has_role_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->role_uid(), target);
  }

  // required uint32 achieve_id = 2;
  if (has_achieve_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->achieve_id(), target);
  }

  // required uint32 old_level = 3;
  if (has_old_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->old_level(), target);
  }

  // required uint32 up_level = 4;
  if (has_up_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->up_level(), target);
  }

  // required uint32 new_level = 5;
  if (has_new_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->new_level(), target);
  }

  // required uint32 old_count = 6;
  if (has_old_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->old_count(), target);
  }

  // required uint32 up_count = 7;
  if (has_up_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->up_count(), target);
  }

  // required uint32 new_count = 8;
  if (has_new_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->new_count(), target);
  }

  // required uint32 old_achieve_point = 9;
  if (has_old_achieve_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->old_achieve_point(), target);
  }

  // required uint32 add_achieve_point = 10;
  if (has_add_achieve_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->add_achieve_point(), target);
  }

  // required uint32 new_achieve_point = 11;
  if (has_new_achieve_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->new_achieve_point(), target);
  }

  // required uint32 old_achieve_level = 12;
  if (has_old_achieve_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->old_achieve_level(), target);
  }

  // required uint32 up_achieve_level = 13;
  if (has_up_achieve_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->up_achieve_level(), target);
  }

  // required uint32 new_achieve_level = 14;
  if (has_new_achieve_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->new_achieve_level(), target);
  }

  // required uint32 old_reward_get_level = 15;
  if (has_old_reward_get_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->old_reward_get_level(), target);
  }

  // required uint32 new_reward_get_level = 16;
  if (has_new_reward_get_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->new_reward_get_level(), target);
  }

  // required uint32 source_type = 17;
  if (has_source_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->source_type(), target);
  }

  // optional uint32 source_param = 18;
  if (has_source_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->source_param(), target);
  }

  // required uint32 log_time = 19;
  if (has_log_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->log_time(), target);
  }

  // optional string sourec_type_str = 20;
  if (has_sourec_type_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sourec_type_str().data(), this->sourec_type_str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->sourec_type_str(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int go_achieve_log_notify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 role_uid = 1;
    if (has_role_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_uid());
    }

    // required uint32 achieve_id = 2;
    if (has_achieve_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->achieve_id());
    }

    // required uint32 old_level = 3;
    if (has_old_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->old_level());
    }

    // required uint32 up_level = 4;
    if (has_up_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->up_level());
    }

    // required uint32 new_level = 5;
    if (has_new_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->new_level());
    }

    // required uint32 old_count = 6;
    if (has_old_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->old_count());
    }

    // required uint32 up_count = 7;
    if (has_up_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->up_count());
    }

    // required uint32 new_count = 8;
    if (has_new_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->new_count());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required uint32 old_achieve_point = 9;
    if (has_old_achieve_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->old_achieve_point());
    }

    // required uint32 add_achieve_point = 10;
    if (has_add_achieve_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->add_achieve_point());
    }

    // required uint32 new_achieve_point = 11;
    if (has_new_achieve_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->new_achieve_point());
    }

    // required uint32 old_achieve_level = 12;
    if (has_old_achieve_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->old_achieve_level());
    }

    // required uint32 up_achieve_level = 13;
    if (has_up_achieve_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->up_achieve_level());
    }

    // required uint32 new_achieve_level = 14;
    if (has_new_achieve_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->new_achieve_level());
    }

    // required uint32 old_reward_get_level = 15;
    if (has_old_reward_get_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->old_reward_get_level());
    }

    // required uint32 new_reward_get_level = 16;
    if (has_new_reward_get_level()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->new_reward_get_level());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // required uint32 source_type = 17;
    if (has_source_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->source_type());
    }

    // optional uint32 source_param = 18;
    if (has_source_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->source_param());
    }

    // required uint32 log_time = 19;
    if (has_log_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->log_time());
    }

    // optional string sourec_type_str = 20;
    if (has_sourec_type_str()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sourec_type_str());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void go_achieve_log_notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const go_achieve_log_notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const go_achieve_log_notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void go_achieve_log_notify::MergeFrom(const go_achieve_log_notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_uid()) {
      set_role_uid(from.role_uid());
    }
    if (from.has_achieve_id()) {
      set_achieve_id(from.achieve_id());
    }
    if (from.has_old_level()) {
      set_old_level(from.old_level());
    }
    if (from.has_up_level()) {
      set_up_level(from.up_level());
    }
    if (from.has_new_level()) {
      set_new_level(from.new_level());
    }
    if (from.has_old_count()) {
      set_old_count(from.old_count());
    }
    if (from.has_up_count()) {
      set_up_count(from.up_count());
    }
    if (from.has_new_count()) {
      set_new_count(from.new_count());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_old_achieve_point()) {
      set_old_achieve_point(from.old_achieve_point());
    }
    if (from.has_add_achieve_point()) {
      set_add_achieve_point(from.add_achieve_point());
    }
    if (from.has_new_achieve_point()) {
      set_new_achieve_point(from.new_achieve_point());
    }
    if (from.has_old_achieve_level()) {
      set_old_achieve_level(from.old_achieve_level());
    }
    if (from.has_up_achieve_level()) {
      set_up_achieve_level(from.up_achieve_level());
    }
    if (from.has_new_achieve_level()) {
      set_new_achieve_level(from.new_achieve_level());
    }
    if (from.has_old_reward_get_level()) {
      set_old_reward_get_level(from.old_reward_get_level());
    }
    if (from.has_new_reward_get_level()) {
      set_new_reward_get_level(from.new_reward_get_level());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_source_type()) {
      set_source_type(from.source_type());
    }
    if (from.has_source_param()) {
      set_source_param(from.source_param());
    }
    if (from.has_log_time()) {
      set_log_time(from.log_time());
    }
    if (from.has_sourec_type_str()) {
      set_sourec_type_str(from.sourec_type_str());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void go_achieve_log_notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void go_achieve_log_notify::CopyFrom(const go_achieve_log_notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool go_achieve_log_notify::IsInitialized() const {
  if ((_has_bits_[0] & 0x0005ffff) != 0x0005ffff) return false;

  return true;
}

void go_achieve_log_notify::Swap(go_achieve_log_notify* other) {
  if (other != this) {
    std::swap(role_uid_, other->role_uid_);
    std::swap(achieve_id_, other->achieve_id_);
    std::swap(old_level_, other->old_level_);
    std::swap(up_level_, other->up_level_);
    std::swap(new_level_, other->new_level_);
    std::swap(old_count_, other->old_count_);
    std::swap(up_count_, other->up_count_);
    std::swap(new_count_, other->new_count_);
    std::swap(old_achieve_point_, other->old_achieve_point_);
    std::swap(add_achieve_point_, other->add_achieve_point_);
    std::swap(new_achieve_point_, other->new_achieve_point_);
    std::swap(old_achieve_level_, other->old_achieve_level_);
    std::swap(up_achieve_level_, other->up_achieve_level_);
    std::swap(new_achieve_level_, other->new_achieve_level_);
    std::swap(old_reward_get_level_, other->old_reward_get_level_);
    std::swap(new_reward_get_level_, other->new_reward_get_level_);
    std::swap(source_type_, other->source_type_);
    std::swap(source_param_, other->source_param_);
    std::swap(log_time_, other->log_time_);
    std::swap(sourec_type_str_, other->sourec_type_str_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata go_achieve_log_notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = go_achieve_log_notify_descriptor_;
  metadata.reflection = go_achieve_log_notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int go_lifeforce_log_notify::kRoleUidFieldNumber;
const int go_lifeforce_log_notify::kOldLifestateLevelFieldNumber;
const int go_lifeforce_log_notify::kOldLifestarLevelFieldNumber;
const int go_lifeforce_log_notify::kUpLifestateFieldNumber;
const int go_lifeforce_log_notify::kUpLifestarFieldNumber;
const int go_lifeforce_log_notify::kNewLifestateLevelFieldNumber;
const int go_lifeforce_log_notify::kNewLifestarLevelFieldNumber;
const int go_lifeforce_log_notify::kSourceTypeFieldNumber;
const int go_lifeforce_log_notify::kSourceParamFieldNumber;
const int go_lifeforce_log_notify::kLogTimeFieldNumber;
#endif  // !_MSC_VER

go_lifeforce_log_notify::go_lifeforce_log_notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void go_lifeforce_log_notify::InitAsDefaultInstance() {
}

go_lifeforce_log_notify::go_lifeforce_log_notify(const go_lifeforce_log_notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void go_lifeforce_log_notify::SharedCtor() {
  _cached_size_ = 0;
  role_uid_ = GOOGLE_ULONGLONG(0);
  old_lifestate_level_ = 0u;
  old_lifestar_level_ = 0u;
  up_lifestate_ = 0u;
  up_lifestar_ = 0u;
  new_lifestate_level_ = 0u;
  new_lifestar_level_ = 0u;
  source_type_ = 0u;
  source_param_ = 0u;
  log_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

go_lifeforce_log_notify::~go_lifeforce_log_notify() {
  SharedDtor();
}

void go_lifeforce_log_notify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void go_lifeforce_log_notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* go_lifeforce_log_notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return go_lifeforce_log_notify_descriptor_;
}

const go_lifeforce_log_notify& go_lifeforce_log_notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_log_2eproto();
  return *default_instance_;
}

go_lifeforce_log_notify* go_lifeforce_log_notify::default_instance_ = NULL;

go_lifeforce_log_notify* go_lifeforce_log_notify::New() const {
  return new go_lifeforce_log_notify;
}

void go_lifeforce_log_notify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_uid_ = GOOGLE_ULONGLONG(0);
    old_lifestate_level_ = 0u;
    old_lifestar_level_ = 0u;
    up_lifestate_ = 0u;
    up_lifestar_ = 0u;
    new_lifestate_level_ = 0u;
    new_lifestar_level_ = 0u;
    source_type_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    source_param_ = 0u;
    log_time_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool go_lifeforce_log_notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 role_uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_uid_)));
          set_has_role_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_old_lifestate_level;
        break;
      }

      // required uint32 old_lifestate_level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_old_lifestate_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &old_lifestate_level_)));
          set_has_old_lifestate_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_old_lifestar_level;
        break;
      }

      // required uint32 old_lifestar_level = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_old_lifestar_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &old_lifestar_level_)));
          set_has_old_lifestar_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_up_lifestate;
        break;
      }

      // required uint32 up_lifestate = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_up_lifestate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &up_lifestate_)));
          set_has_up_lifestate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_up_lifestar;
        break;
      }

      // required uint32 up_lifestar = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_up_lifestar:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &up_lifestar_)));
          set_has_up_lifestar();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_new_lifestate_level;
        break;
      }

      // required uint32 new_lifestate_level = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_new_lifestate_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &new_lifestate_level_)));
          set_has_new_lifestate_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_new_lifestar_level;
        break;
      }

      // required uint32 new_lifestar_level = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_new_lifestar_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &new_lifestar_level_)));
          set_has_new_lifestar_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_source_type;
        break;
      }

      // optional uint32 source_type = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_source_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &source_type_)));
          set_has_source_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_source_param;
        break;
      }

      // optional uint32 source_param = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_source_param:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &source_param_)));
          set_has_source_param();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_log_time;
        break;
      }

      // required uint32 log_time = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_log_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &log_time_)));
          set_has_log_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void go_lifeforce_log_notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 role_uid = 1;
  if (has_role_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->role_uid(), output);
  }

  // required uint32 old_lifestate_level = 2;
  if (has_old_lifestate_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->old_lifestate_level(), output);
  }

  // required uint32 old_lifestar_level = 3;
  if (has_old_lifestar_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->old_lifestar_level(), output);
  }

  // required uint32 up_lifestate = 4;
  if (has_up_lifestate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->up_lifestate(), output);
  }

  // required uint32 up_lifestar = 5;
  if (has_up_lifestar()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->up_lifestar(), output);
  }

  // required uint32 new_lifestate_level = 6;
  if (has_new_lifestate_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->new_lifestate_level(), output);
  }

  // required uint32 new_lifestar_level = 7;
  if (has_new_lifestar_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->new_lifestar_level(), output);
  }

  // optional uint32 source_type = 8;
  if (has_source_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->source_type(), output);
  }

  // optional uint32 source_param = 9;
  if (has_source_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->source_param(), output);
  }

  // required uint32 log_time = 10;
  if (has_log_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->log_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* go_lifeforce_log_notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 role_uid = 1;
  if (has_role_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->role_uid(), target);
  }

  // required uint32 old_lifestate_level = 2;
  if (has_old_lifestate_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->old_lifestate_level(), target);
  }

  // required uint32 old_lifestar_level = 3;
  if (has_old_lifestar_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->old_lifestar_level(), target);
  }

  // required uint32 up_lifestate = 4;
  if (has_up_lifestate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->up_lifestate(), target);
  }

  // required uint32 up_lifestar = 5;
  if (has_up_lifestar()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->up_lifestar(), target);
  }

  // required uint32 new_lifestate_level = 6;
  if (has_new_lifestate_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->new_lifestate_level(), target);
  }

  // required uint32 new_lifestar_level = 7;
  if (has_new_lifestar_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->new_lifestar_level(), target);
  }

  // optional uint32 source_type = 8;
  if (has_source_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->source_type(), target);
  }

  // optional uint32 source_param = 9;
  if (has_source_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->source_param(), target);
  }

  // required uint32 log_time = 10;
  if (has_log_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->log_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int go_lifeforce_log_notify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 role_uid = 1;
    if (has_role_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_uid());
    }

    // required uint32 old_lifestate_level = 2;
    if (has_old_lifestate_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->old_lifestate_level());
    }

    // required uint32 old_lifestar_level = 3;
    if (has_old_lifestar_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->old_lifestar_level());
    }

    // required uint32 up_lifestate = 4;
    if (has_up_lifestate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->up_lifestate());
    }

    // required uint32 up_lifestar = 5;
    if (has_up_lifestar()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->up_lifestar());
    }

    // required uint32 new_lifestate_level = 6;
    if (has_new_lifestate_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->new_lifestate_level());
    }

    // required uint32 new_lifestar_level = 7;
    if (has_new_lifestar_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->new_lifestar_level());
    }

    // optional uint32 source_type = 8;
    if (has_source_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->source_type());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 source_param = 9;
    if (has_source_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->source_param());
    }

    // required uint32 log_time = 10;
    if (has_log_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->log_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void go_lifeforce_log_notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const go_lifeforce_log_notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const go_lifeforce_log_notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void go_lifeforce_log_notify::MergeFrom(const go_lifeforce_log_notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_uid()) {
      set_role_uid(from.role_uid());
    }
    if (from.has_old_lifestate_level()) {
      set_old_lifestate_level(from.old_lifestate_level());
    }
    if (from.has_old_lifestar_level()) {
      set_old_lifestar_level(from.old_lifestar_level());
    }
    if (from.has_up_lifestate()) {
      set_up_lifestate(from.up_lifestate());
    }
    if (from.has_up_lifestar()) {
      set_up_lifestar(from.up_lifestar());
    }
    if (from.has_new_lifestate_level()) {
      set_new_lifestate_level(from.new_lifestate_level());
    }
    if (from.has_new_lifestar_level()) {
      set_new_lifestar_level(from.new_lifestar_level());
    }
    if (from.has_source_type()) {
      set_source_type(from.source_type());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_source_param()) {
      set_source_param(from.source_param());
    }
    if (from.has_log_time()) {
      set_log_time(from.log_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void go_lifeforce_log_notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void go_lifeforce_log_notify::CopyFrom(const go_lifeforce_log_notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool go_lifeforce_log_notify::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000027f) != 0x0000027f) return false;

  return true;
}

void go_lifeforce_log_notify::Swap(go_lifeforce_log_notify* other) {
  if (other != this) {
    std::swap(role_uid_, other->role_uid_);
    std::swap(old_lifestate_level_, other->old_lifestate_level_);
    std::swap(old_lifestar_level_, other->old_lifestar_level_);
    std::swap(up_lifestate_, other->up_lifestate_);
    std::swap(up_lifestar_, other->up_lifestar_);
    std::swap(new_lifestate_level_, other->new_lifestate_level_);
    std::swap(new_lifestar_level_, other->new_lifestar_level_);
    std::swap(source_type_, other->source_type_);
    std::swap(source_param_, other->source_param_);
    std::swap(log_time_, other->log_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata go_lifeforce_log_notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = go_lifeforce_log_notify_descriptor_;
  metadata.reflection = go_lifeforce_log_notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int go_dungeon_log_notify::kRoleUidFieldNumber;
const int go_dungeon_log_notify::kDungeonIdFieldNumber;
const int go_dungeon_log_notify::kCreateTypeFieldNumber;
const int go_dungeon_log_notify::kCreateIdFieldNumber;
const int go_dungeon_log_notify::kSourceTypeFieldNumber;
const int go_dungeon_log_notify::kSourceParamFieldNumber;
const int go_dungeon_log_notify::kLogTimeFieldNumber;
#endif  // !_MSC_VER

go_dungeon_log_notify::go_dungeon_log_notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void go_dungeon_log_notify::InitAsDefaultInstance() {
}

go_dungeon_log_notify::go_dungeon_log_notify(const go_dungeon_log_notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void go_dungeon_log_notify::SharedCtor() {
  _cached_size_ = 0;
  role_uid_ = GOOGLE_ULONGLONG(0);
  dungeon_id_ = 0u;
  create_type_ = 0u;
  create_id_ = GOOGLE_ULONGLONG(0);
  source_type_ = 0u;
  source_param_ = 0u;
  log_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

go_dungeon_log_notify::~go_dungeon_log_notify() {
  SharedDtor();
}

void go_dungeon_log_notify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void go_dungeon_log_notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* go_dungeon_log_notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return go_dungeon_log_notify_descriptor_;
}

const go_dungeon_log_notify& go_dungeon_log_notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_log_2eproto();
  return *default_instance_;
}

go_dungeon_log_notify* go_dungeon_log_notify::default_instance_ = NULL;

go_dungeon_log_notify* go_dungeon_log_notify::New() const {
  return new go_dungeon_log_notify;
}

void go_dungeon_log_notify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_uid_ = GOOGLE_ULONGLONG(0);
    dungeon_id_ = 0u;
    create_type_ = 0u;
    create_id_ = GOOGLE_ULONGLONG(0);
    source_type_ = 0u;
    source_param_ = 0u;
    log_time_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool go_dungeon_log_notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 role_uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_uid_)));
          set_has_role_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_dungeon_id;
        break;
      }

      // optional uint32 dungeon_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dungeon_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dungeon_id_)));
          set_has_dungeon_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_create_type;
        break;
      }

      // optional uint32 create_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_create_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &create_type_)));
          set_has_create_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_create_id;
        break;
      }

      // optional uint64 create_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_create_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &create_id_)));
          set_has_create_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_source_type;
        break;
      }

      // optional uint32 source_type = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_source_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &source_type_)));
          set_has_source_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_source_param;
        break;
      }

      // optional uint32 source_param = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_source_param:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &source_param_)));
          set_has_source_param();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_log_time;
        break;
      }

      // optional uint32 log_time = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_log_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &log_time_)));
          set_has_log_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void go_dungeon_log_notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 role_uid = 1;
  if (has_role_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->role_uid(), output);
  }

  // optional uint32 dungeon_id = 2;
  if (has_dungeon_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->dungeon_id(), output);
  }

  // optional uint32 create_type = 3;
  if (has_create_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->create_type(), output);
  }

  // optional uint64 create_id = 4;
  if (has_create_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->create_id(), output);
  }

  // optional uint32 source_type = 5;
  if (has_source_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->source_type(), output);
  }

  // optional uint32 source_param = 6;
  if (has_source_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->source_param(), output);
  }

  // optional uint32 log_time = 7;
  if (has_log_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->log_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* go_dungeon_log_notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 role_uid = 1;
  if (has_role_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->role_uid(), target);
  }

  // optional uint32 dungeon_id = 2;
  if (has_dungeon_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->dungeon_id(), target);
  }

  // optional uint32 create_type = 3;
  if (has_create_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->create_type(), target);
  }

  // optional uint64 create_id = 4;
  if (has_create_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->create_id(), target);
  }

  // optional uint32 source_type = 5;
  if (has_source_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->source_type(), target);
  }

  // optional uint32 source_param = 6;
  if (has_source_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->source_param(), target);
  }

  // optional uint32 log_time = 7;
  if (has_log_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->log_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int go_dungeon_log_notify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 role_uid = 1;
    if (has_role_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_uid());
    }

    // optional uint32 dungeon_id = 2;
    if (has_dungeon_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dungeon_id());
    }

    // optional uint32 create_type = 3;
    if (has_create_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->create_type());
    }

    // optional uint64 create_id = 4;
    if (has_create_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->create_id());
    }

    // optional uint32 source_type = 5;
    if (has_source_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->source_type());
    }

    // optional uint32 source_param = 6;
    if (has_source_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->source_param());
    }

    // optional uint32 log_time = 7;
    if (has_log_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->log_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void go_dungeon_log_notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const go_dungeon_log_notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const go_dungeon_log_notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void go_dungeon_log_notify::MergeFrom(const go_dungeon_log_notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_uid()) {
      set_role_uid(from.role_uid());
    }
    if (from.has_dungeon_id()) {
      set_dungeon_id(from.dungeon_id());
    }
    if (from.has_create_type()) {
      set_create_type(from.create_type());
    }
    if (from.has_create_id()) {
      set_create_id(from.create_id());
    }
    if (from.has_source_type()) {
      set_source_type(from.source_type());
    }
    if (from.has_source_param()) {
      set_source_param(from.source_param());
    }
    if (from.has_log_time()) {
      set_log_time(from.log_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void go_dungeon_log_notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void go_dungeon_log_notify::CopyFrom(const go_dungeon_log_notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool go_dungeon_log_notify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void go_dungeon_log_notify::Swap(go_dungeon_log_notify* other) {
  if (other != this) {
    std::swap(role_uid_, other->role_uid_);
    std::swap(dungeon_id_, other->dungeon_id_);
    std::swap(create_type_, other->create_type_);
    std::swap(create_id_, other->create_id_);
    std::swap(source_type_, other->source_type_);
    std::swap(source_param_, other->source_param_);
    std::swap(log_time_, other->log_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata go_dungeon_log_notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = go_dungeon_log_notify_descriptor_;
  metadata.reflection = go_dungeon_log_notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int go_role_buff_log_notify::kRoleUidFieldNumber;
const int go_role_buff_log_notify::kBuffIdFieldNumber;
const int go_role_buff_log_notify::kOpTypeFieldNumber;
const int go_role_buff_log_notify::kSpeedFieldNumber;
const int go_role_buff_log_notify::kSourceTypeFieldNumber;
const int go_role_buff_log_notify::kSourceParamFieldNumber;
const int go_role_buff_log_notify::kLogTimeFieldNumber;
#endif  // !_MSC_VER

go_role_buff_log_notify::go_role_buff_log_notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void go_role_buff_log_notify::InitAsDefaultInstance() {
}

go_role_buff_log_notify::go_role_buff_log_notify(const go_role_buff_log_notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void go_role_buff_log_notify::SharedCtor() {
  _cached_size_ = 0;
  role_uid_ = GOOGLE_ULONGLONG(0);
  buff_id_ = 0u;
  op_type_ = 0u;
  speed_ = 0u;
  source_type_ = 0u;
  source_param_ = 0u;
  log_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

go_role_buff_log_notify::~go_role_buff_log_notify() {
  SharedDtor();
}

void go_role_buff_log_notify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void go_role_buff_log_notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* go_role_buff_log_notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return go_role_buff_log_notify_descriptor_;
}

const go_role_buff_log_notify& go_role_buff_log_notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_log_2eproto();
  return *default_instance_;
}

go_role_buff_log_notify* go_role_buff_log_notify::default_instance_ = NULL;

go_role_buff_log_notify* go_role_buff_log_notify::New() const {
  return new go_role_buff_log_notify;
}

void go_role_buff_log_notify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_uid_ = GOOGLE_ULONGLONG(0);
    buff_id_ = 0u;
    op_type_ = 0u;
    speed_ = 0u;
    source_type_ = 0u;
    source_param_ = 0u;
    log_time_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool go_role_buff_log_notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 role_uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_uid_)));
          set_has_role_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_buff_id;
        break;
      }

      // optional uint32 buff_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buff_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &buff_id_)));
          set_has_buff_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_op_type;
        break;
      }

      // optional uint32 op_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_op_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &op_type_)));
          set_has_op_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_speed;
        break;
      }

      // optional uint32 speed = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_speed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &speed_)));
          set_has_speed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_source_type;
        break;
      }

      // optional uint32 source_type = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_source_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &source_type_)));
          set_has_source_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_source_param;
        break;
      }

      // optional uint32 source_param = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_source_param:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &source_param_)));
          set_has_source_param();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_log_time;
        break;
      }

      // optional uint32 log_time = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_log_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &log_time_)));
          set_has_log_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void go_role_buff_log_notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 role_uid = 1;
  if (has_role_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->role_uid(), output);
  }

  // optional uint32 buff_id = 2;
  if (has_buff_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->buff_id(), output);
  }

  // optional uint32 op_type = 3;
  if (has_op_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->op_type(), output);
  }

  // optional uint32 speed = 4;
  if (has_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->speed(), output);
  }

  // optional uint32 source_type = 5;
  if (has_source_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->source_type(), output);
  }

  // optional uint32 source_param = 6;
  if (has_source_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->source_param(), output);
  }

  // optional uint32 log_time = 7;
  if (has_log_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->log_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* go_role_buff_log_notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 role_uid = 1;
  if (has_role_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->role_uid(), target);
  }

  // optional uint32 buff_id = 2;
  if (has_buff_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->buff_id(), target);
  }

  // optional uint32 op_type = 3;
  if (has_op_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->op_type(), target);
  }

  // optional uint32 speed = 4;
  if (has_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->speed(), target);
  }

  // optional uint32 source_type = 5;
  if (has_source_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->source_type(), target);
  }

  // optional uint32 source_param = 6;
  if (has_source_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->source_param(), target);
  }

  // optional uint32 log_time = 7;
  if (has_log_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->log_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int go_role_buff_log_notify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 role_uid = 1;
    if (has_role_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_uid());
    }

    // optional uint32 buff_id = 2;
    if (has_buff_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->buff_id());
    }

    // optional uint32 op_type = 3;
    if (has_op_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->op_type());
    }

    // optional uint32 speed = 4;
    if (has_speed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->speed());
    }

    // optional uint32 source_type = 5;
    if (has_source_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->source_type());
    }

    // optional uint32 source_param = 6;
    if (has_source_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->source_param());
    }

    // optional uint32 log_time = 7;
    if (has_log_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->log_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void go_role_buff_log_notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const go_role_buff_log_notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const go_role_buff_log_notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void go_role_buff_log_notify::MergeFrom(const go_role_buff_log_notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_uid()) {
      set_role_uid(from.role_uid());
    }
    if (from.has_buff_id()) {
      set_buff_id(from.buff_id());
    }
    if (from.has_op_type()) {
      set_op_type(from.op_type());
    }
    if (from.has_speed()) {
      set_speed(from.speed());
    }
    if (from.has_source_type()) {
      set_source_type(from.source_type());
    }
    if (from.has_source_param()) {
      set_source_param(from.source_param());
    }
    if (from.has_log_time()) {
      set_log_time(from.log_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void go_role_buff_log_notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void go_role_buff_log_notify::CopyFrom(const go_role_buff_log_notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool go_role_buff_log_notify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void go_role_buff_log_notify::Swap(go_role_buff_log_notify* other) {
  if (other != this) {
    std::swap(role_uid_, other->role_uid_);
    std::swap(buff_id_, other->buff_id_);
    std::swap(op_type_, other->op_type_);
    std::swap(speed_, other->speed_);
    std::swap(source_type_, other->source_type_);
    std::swap(source_param_, other->source_param_);
    std::swap(log_time_, other->log_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata go_role_buff_log_notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = go_role_buff_log_notify_descriptor_;
  metadata.reflection = go_role_buff_log_notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int eo_goods_log_notify::kRoleUidFieldNumber;
const int eo_goods_log_notify::kRoleNameFieldNumber;
const int eo_goods_log_notify::kGoodsUidFieldNumber;
const int eo_goods_log_notify::kItemTidFieldNumber;
const int eo_goods_log_notify::kItemNumFieldNumber;
const int eo_goods_log_notify::kPriceFieldNumber;
const int eo_goods_log_notify::kSelledNumFieldNumber;
const int eo_goods_log_notify::kProfitFieldNumber;
const int eo_goods_log_notify::kStateFieldNumber;
const int eo_goods_log_notify::kSourceTypeFieldNumber;
const int eo_goods_log_notify::kLogTimeFieldNumber;
#endif  // !_MSC_VER

eo_goods_log_notify::eo_goods_log_notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void eo_goods_log_notify::InitAsDefaultInstance() {
}

eo_goods_log_notify::eo_goods_log_notify(const eo_goods_log_notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void eo_goods_log_notify::SharedCtor() {
  _cached_size_ = 0;
  role_uid_ = GOOGLE_ULONGLONG(0);
  role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  goods_uid_ = GOOGLE_ULONGLONG(0);
  item_tid_ = 0u;
  item_num_ = 0u;
  price_ = 0u;
  selled_num_ = 0u;
  profit_ = 0u;
  state_ = 0u;
  source_type_ = 0u;
  log_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

eo_goods_log_notify::~eo_goods_log_notify() {
  SharedDtor();
}

void eo_goods_log_notify::SharedDtor() {
  if (role_name_ != &::google::protobuf::internal::kEmptyString) {
    delete role_name_;
  }
  if (this != default_instance_) {
  }
}

void eo_goods_log_notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* eo_goods_log_notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return eo_goods_log_notify_descriptor_;
}

const eo_goods_log_notify& eo_goods_log_notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_log_2eproto();
  return *default_instance_;
}

eo_goods_log_notify* eo_goods_log_notify::default_instance_ = NULL;

eo_goods_log_notify* eo_goods_log_notify::New() const {
  return new eo_goods_log_notify;
}

void eo_goods_log_notify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_uid_ = GOOGLE_ULONGLONG(0);
    if (has_role_name()) {
      if (role_name_ != &::google::protobuf::internal::kEmptyString) {
        role_name_->clear();
      }
    }
    goods_uid_ = GOOGLE_ULONGLONG(0);
    item_tid_ = 0u;
    item_num_ = 0u;
    price_ = 0u;
    selled_num_ = 0u;
    profit_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    state_ = 0u;
    source_type_ = 0u;
    log_time_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool eo_goods_log_notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 role_uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_uid_)));
          set_has_role_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_role_name;
        break;
      }

      // optional string role_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_role_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_role_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->role_name().data(), this->role_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_goods_uid;
        break;
      }

      // optional uint64 goods_uid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_goods_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &goods_uid_)));
          set_has_goods_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_item_tid;
        break;
      }

      // optional uint32 item_tid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_tid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_tid_)));
          set_has_item_tid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_item_num;
        break;
      }

      // optional uint32 item_num = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_num_)));
          set_has_item_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_price;
        break;
      }

      // optional uint32 price = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &price_)));
          set_has_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_selled_num;
        break;
      }

      // optional uint32 selled_num = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_selled_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &selled_num_)));
          set_has_selled_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_profit;
        break;
      }

      // optional uint32 profit = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_profit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &profit_)));
          set_has_profit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_state;
        break;
      }

      // optional uint32 state = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_source_type;
        break;
      }

      // optional uint32 source_type = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_source_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &source_type_)));
          set_has_source_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_log_time;
        break;
      }

      // optional uint32 log_time = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_log_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &log_time_)));
          set_has_log_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void eo_goods_log_notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 role_uid = 1;
  if (has_role_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->role_uid(), output);
  }

  // optional string role_name = 2;
  if (has_role_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_name().data(), this->role_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->role_name(), output);
  }

  // optional uint64 goods_uid = 3;
  if (has_goods_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->goods_uid(), output);
  }

  // optional uint32 item_tid = 4;
  if (has_item_tid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->item_tid(), output);
  }

  // optional uint32 item_num = 5;
  if (has_item_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->item_num(), output);
  }

  // optional uint32 price = 6;
  if (has_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->price(), output);
  }

  // optional uint32 selled_num = 7;
  if (has_selled_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->selled_num(), output);
  }

  // optional uint32 profit = 8;
  if (has_profit()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->profit(), output);
  }

  // optional uint32 state = 9;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->state(), output);
  }

  // optional uint32 source_type = 11;
  if (has_source_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->source_type(), output);
  }

  // optional uint32 log_time = 13;
  if (has_log_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->log_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* eo_goods_log_notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 role_uid = 1;
  if (has_role_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->role_uid(), target);
  }

  // optional string role_name = 2;
  if (has_role_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_name().data(), this->role_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->role_name(), target);
  }

  // optional uint64 goods_uid = 3;
  if (has_goods_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->goods_uid(), target);
  }

  // optional uint32 item_tid = 4;
  if (has_item_tid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->item_tid(), target);
  }

  // optional uint32 item_num = 5;
  if (has_item_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->item_num(), target);
  }

  // optional uint32 price = 6;
  if (has_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->price(), target);
  }

  // optional uint32 selled_num = 7;
  if (has_selled_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->selled_num(), target);
  }

  // optional uint32 profit = 8;
  if (has_profit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->profit(), target);
  }

  // optional uint32 state = 9;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->state(), target);
  }

  // optional uint32 source_type = 11;
  if (has_source_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->source_type(), target);
  }

  // optional uint32 log_time = 13;
  if (has_log_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->log_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int eo_goods_log_notify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 role_uid = 1;
    if (has_role_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_uid());
    }

    // optional string role_name = 2;
    if (has_role_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->role_name());
    }

    // optional uint64 goods_uid = 3;
    if (has_goods_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->goods_uid());
    }

    // optional uint32 item_tid = 4;
    if (has_item_tid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_tid());
    }

    // optional uint32 item_num = 5;
    if (has_item_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_num());
    }

    // optional uint32 price = 6;
    if (has_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->price());
    }

    // optional uint32 selled_num = 7;
    if (has_selled_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->selled_num());
    }

    // optional uint32 profit = 8;
    if (has_profit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->profit());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 state = 9;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->state());
    }

    // optional uint32 source_type = 11;
    if (has_source_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->source_type());
    }

    // optional uint32 log_time = 13;
    if (has_log_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->log_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void eo_goods_log_notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const eo_goods_log_notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const eo_goods_log_notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void eo_goods_log_notify::MergeFrom(const eo_goods_log_notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_uid()) {
      set_role_uid(from.role_uid());
    }
    if (from.has_role_name()) {
      set_role_name(from.role_name());
    }
    if (from.has_goods_uid()) {
      set_goods_uid(from.goods_uid());
    }
    if (from.has_item_tid()) {
      set_item_tid(from.item_tid());
    }
    if (from.has_item_num()) {
      set_item_num(from.item_num());
    }
    if (from.has_price()) {
      set_price(from.price());
    }
    if (from.has_selled_num()) {
      set_selled_num(from.selled_num());
    }
    if (from.has_profit()) {
      set_profit(from.profit());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_source_type()) {
      set_source_type(from.source_type());
    }
    if (from.has_log_time()) {
      set_log_time(from.log_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void eo_goods_log_notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void eo_goods_log_notify::CopyFrom(const eo_goods_log_notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool eo_goods_log_notify::IsInitialized() const {

  return true;
}

void eo_goods_log_notify::Swap(eo_goods_log_notify* other) {
  if (other != this) {
    std::swap(role_uid_, other->role_uid_);
    std::swap(role_name_, other->role_name_);
    std::swap(goods_uid_, other->goods_uid_);
    std::swap(item_tid_, other->item_tid_);
    std::swap(item_num_, other->item_num_);
    std::swap(price_, other->price_);
    std::swap(selled_num_, other->selled_num_);
    std::swap(profit_, other->profit_);
    std::swap(state_, other->state_);
    std::swap(source_type_, other->source_type_);
    std::swap(log_time_, other->log_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata eo_goods_log_notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = eo_goods_log_notify_descriptor_;
  metadata.reflection = eo_goods_log_notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int go_role_new_guide_log_notify::kRoleUidFieldNumber;
const int go_role_new_guide_log_notify::kNewGuideIdFieldNumber;
const int go_role_new_guide_log_notify::kSourceTypeFieldNumber;
const int go_role_new_guide_log_notify::kSourceParamFieldNumber;
const int go_role_new_guide_log_notify::kLogTimeFieldNumber;
#endif  // !_MSC_VER

go_role_new_guide_log_notify::go_role_new_guide_log_notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void go_role_new_guide_log_notify::InitAsDefaultInstance() {
}

go_role_new_guide_log_notify::go_role_new_guide_log_notify(const go_role_new_guide_log_notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void go_role_new_guide_log_notify::SharedCtor() {
  _cached_size_ = 0;
  role_uid_ = GOOGLE_ULONGLONG(0);
  new_guide_id_ = 0u;
  source_type_ = 0u;
  source_param_ = 0u;
  log_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

go_role_new_guide_log_notify::~go_role_new_guide_log_notify() {
  SharedDtor();
}

void go_role_new_guide_log_notify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void go_role_new_guide_log_notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* go_role_new_guide_log_notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return go_role_new_guide_log_notify_descriptor_;
}

const go_role_new_guide_log_notify& go_role_new_guide_log_notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_log_2eproto();
  return *default_instance_;
}

go_role_new_guide_log_notify* go_role_new_guide_log_notify::default_instance_ = NULL;

go_role_new_guide_log_notify* go_role_new_guide_log_notify::New() const {
  return new go_role_new_guide_log_notify;
}

void go_role_new_guide_log_notify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_uid_ = GOOGLE_ULONGLONG(0);
    new_guide_id_ = 0u;
    source_type_ = 0u;
    source_param_ = 0u;
    log_time_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool go_role_new_guide_log_notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 role_uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_uid_)));
          set_has_role_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_new_guide_id;
        break;
      }

      // optional uint32 new_guide_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_new_guide_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &new_guide_id_)));
          set_has_new_guide_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_source_type;
        break;
      }

      // optional uint32 source_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_source_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &source_type_)));
          set_has_source_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_source_param;
        break;
      }

      // optional uint32 source_param = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_source_param:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &source_param_)));
          set_has_source_param();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_log_time;
        break;
      }

      // optional uint32 log_time = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_log_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &log_time_)));
          set_has_log_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void go_role_new_guide_log_notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 role_uid = 1;
  if (has_role_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->role_uid(), output);
  }

  // optional uint32 new_guide_id = 2;
  if (has_new_guide_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->new_guide_id(), output);
  }

  // optional uint32 source_type = 3;
  if (has_source_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->source_type(), output);
  }

  // optional uint32 source_param = 4;
  if (has_source_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->source_param(), output);
  }

  // optional uint32 log_time = 5;
  if (has_log_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->log_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* go_role_new_guide_log_notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 role_uid = 1;
  if (has_role_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->role_uid(), target);
  }

  // optional uint32 new_guide_id = 2;
  if (has_new_guide_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->new_guide_id(), target);
  }

  // optional uint32 source_type = 3;
  if (has_source_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->source_type(), target);
  }

  // optional uint32 source_param = 4;
  if (has_source_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->source_param(), target);
  }

  // optional uint32 log_time = 5;
  if (has_log_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->log_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int go_role_new_guide_log_notify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 role_uid = 1;
    if (has_role_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_uid());
    }

    // optional uint32 new_guide_id = 2;
    if (has_new_guide_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->new_guide_id());
    }

    // optional uint32 source_type = 3;
    if (has_source_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->source_type());
    }

    // optional uint32 source_param = 4;
    if (has_source_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->source_param());
    }

    // optional uint32 log_time = 5;
    if (has_log_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->log_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void go_role_new_guide_log_notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const go_role_new_guide_log_notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const go_role_new_guide_log_notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void go_role_new_guide_log_notify::MergeFrom(const go_role_new_guide_log_notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_uid()) {
      set_role_uid(from.role_uid());
    }
    if (from.has_new_guide_id()) {
      set_new_guide_id(from.new_guide_id());
    }
    if (from.has_source_type()) {
      set_source_type(from.source_type());
    }
    if (from.has_source_param()) {
      set_source_param(from.source_param());
    }
    if (from.has_log_time()) {
      set_log_time(from.log_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void go_role_new_guide_log_notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void go_role_new_guide_log_notify::CopyFrom(const go_role_new_guide_log_notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool go_role_new_guide_log_notify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void go_role_new_guide_log_notify::Swap(go_role_new_guide_log_notify* other) {
  if (other != this) {
    std::swap(role_uid_, other->role_uid_);
    std::swap(new_guide_id_, other->new_guide_id_);
    std::swap(source_type_, other->source_type_);
    std::swap(source_param_, other->source_param_);
    std::swap(log_time_, other->log_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata go_role_new_guide_log_notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = go_role_new_guide_log_notify_descriptor_;
  metadata.reflection = go_role_new_guide_log_notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int go_role_trade_log_notify::kRoleUidFieldNumber;
const int go_role_trade_log_notify::kItemTidFieldNumber;
const int go_role_trade_log_notify::kPriceFieldNumber;
const int go_role_trade_log_notify::kNumFieldNumber;
const int go_role_trade_log_notify::kTaxFieldNumber;
const int go_role_trade_log_notify::kTotalNumFieldNumber;
const int go_role_trade_log_notify::kTotalCostFieldNumber;
const int go_role_trade_log_notify::kGainFieldNumber;
const int go_role_trade_log_notify::kTradeIdFieldNumber;
const int go_role_trade_log_notify::kOpTypeFieldNumber;
const int go_role_trade_log_notify::kSourceTypeFieldNumber;
const int go_role_trade_log_notify::kLogTimeFieldNumber;
#endif  // !_MSC_VER

go_role_trade_log_notify::go_role_trade_log_notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void go_role_trade_log_notify::InitAsDefaultInstance() {
}

go_role_trade_log_notify::go_role_trade_log_notify(const go_role_trade_log_notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void go_role_trade_log_notify::SharedCtor() {
  _cached_size_ = 0;
  role_uid_ = GOOGLE_ULONGLONG(0);
  item_tid_ = 0u;
  price_ = 0u;
  num_ = 0u;
  tax_ = 0u;
  total_num_ = 0u;
  total_cost_ = 0u;
  gain_ = 0u;
  trade_id_ = 0u;
  op_type_ = 0u;
  source_type_ = 0u;
  log_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

go_role_trade_log_notify::~go_role_trade_log_notify() {
  SharedDtor();
}

void go_role_trade_log_notify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void go_role_trade_log_notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* go_role_trade_log_notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return go_role_trade_log_notify_descriptor_;
}

const go_role_trade_log_notify& go_role_trade_log_notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_log_2eproto();
  return *default_instance_;
}

go_role_trade_log_notify* go_role_trade_log_notify::default_instance_ = NULL;

go_role_trade_log_notify* go_role_trade_log_notify::New() const {
  return new go_role_trade_log_notify;
}

void go_role_trade_log_notify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_uid_ = GOOGLE_ULONGLONG(0);
    item_tid_ = 0u;
    price_ = 0u;
    num_ = 0u;
    tax_ = 0u;
    total_num_ = 0u;
    total_cost_ = 0u;
    gain_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    trade_id_ = 0u;
    op_type_ = 0u;
    source_type_ = 0u;
    log_time_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool go_role_trade_log_notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 role_uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_uid_)));
          set_has_role_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_item_tid;
        break;
      }

      // optional uint32 item_tid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_tid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_tid_)));
          set_has_item_tid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_price;
        break;
      }

      // optional uint32 price = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &price_)));
          set_has_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_num;
        break;
      }

      // optional uint32 num = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_tax;
        break;
      }

      // optional uint32 tax = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tax_)));
          set_has_tax();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_total_num;
        break;
      }

      // optional uint32 total_num = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_num_)));
          set_has_total_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_total_cost;
        break;
      }

      // optional uint32 total_cost = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_cost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_cost_)));
          set_has_total_cost();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_gain;
        break;
      }

      // optional uint32 gain = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gain:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gain_)));
          set_has_gain();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_trade_id;
        break;
      }

      // optional uint32 trade_id = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_trade_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &trade_id_)));
          set_has_trade_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_op_type;
        break;
      }

      // optional uint32 op_type = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_op_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &op_type_)));
          set_has_op_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_source_type;
        break;
      }

      // optional uint32 source_type = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_source_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &source_type_)));
          set_has_source_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_log_time;
        break;
      }

      // optional uint32 log_time = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_log_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &log_time_)));
          set_has_log_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void go_role_trade_log_notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 role_uid = 1;
  if (has_role_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->role_uid(), output);
  }

  // optional uint32 item_tid = 2;
  if (has_item_tid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->item_tid(), output);
  }

  // optional uint32 price = 3;
  if (has_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->price(), output);
  }

  // optional uint32 num = 4;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->num(), output);
  }

  // optional uint32 tax = 5;
  if (has_tax()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->tax(), output);
  }

  // optional uint32 total_num = 6;
  if (has_total_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->total_num(), output);
  }

  // optional uint32 total_cost = 7;
  if (has_total_cost()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->total_cost(), output);
  }

  // optional uint32 gain = 8;
  if (has_gain()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->gain(), output);
  }

  // optional uint32 trade_id = 9;
  if (has_trade_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->trade_id(), output);
  }

  // optional uint32 op_type = 10;
  if (has_op_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->op_type(), output);
  }

  // optional uint32 source_type = 11;
  if (has_source_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->source_type(), output);
  }

  // optional uint32 log_time = 12;
  if (has_log_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->log_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* go_role_trade_log_notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 role_uid = 1;
  if (has_role_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->role_uid(), target);
  }

  // optional uint32 item_tid = 2;
  if (has_item_tid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->item_tid(), target);
  }

  // optional uint32 price = 3;
  if (has_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->price(), target);
  }

  // optional uint32 num = 4;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->num(), target);
  }

  // optional uint32 tax = 5;
  if (has_tax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->tax(), target);
  }

  // optional uint32 total_num = 6;
  if (has_total_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->total_num(), target);
  }

  // optional uint32 total_cost = 7;
  if (has_total_cost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->total_cost(), target);
  }

  // optional uint32 gain = 8;
  if (has_gain()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->gain(), target);
  }

  // optional uint32 trade_id = 9;
  if (has_trade_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->trade_id(), target);
  }

  // optional uint32 op_type = 10;
  if (has_op_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->op_type(), target);
  }

  // optional uint32 source_type = 11;
  if (has_source_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->source_type(), target);
  }

  // optional uint32 log_time = 12;
  if (has_log_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->log_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int go_role_trade_log_notify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 role_uid = 1;
    if (has_role_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_uid());
    }

    // optional uint32 item_tid = 2;
    if (has_item_tid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_tid());
    }

    // optional uint32 price = 3;
    if (has_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->price());
    }

    // optional uint32 num = 4;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }

    // optional uint32 tax = 5;
    if (has_tax()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tax());
    }

    // optional uint32 total_num = 6;
    if (has_total_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->total_num());
    }

    // optional uint32 total_cost = 7;
    if (has_total_cost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->total_cost());
    }

    // optional uint32 gain = 8;
    if (has_gain()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gain());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 trade_id = 9;
    if (has_trade_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->trade_id());
    }

    // optional uint32 op_type = 10;
    if (has_op_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->op_type());
    }

    // optional uint32 source_type = 11;
    if (has_source_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->source_type());
    }

    // optional uint32 log_time = 12;
    if (has_log_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->log_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void go_role_trade_log_notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const go_role_trade_log_notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const go_role_trade_log_notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void go_role_trade_log_notify::MergeFrom(const go_role_trade_log_notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_uid()) {
      set_role_uid(from.role_uid());
    }
    if (from.has_item_tid()) {
      set_item_tid(from.item_tid());
    }
    if (from.has_price()) {
      set_price(from.price());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_tax()) {
      set_tax(from.tax());
    }
    if (from.has_total_num()) {
      set_total_num(from.total_num());
    }
    if (from.has_total_cost()) {
      set_total_cost(from.total_cost());
    }
    if (from.has_gain()) {
      set_gain(from.gain());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_trade_id()) {
      set_trade_id(from.trade_id());
    }
    if (from.has_op_type()) {
      set_op_type(from.op_type());
    }
    if (from.has_source_type()) {
      set_source_type(from.source_type());
    }
    if (from.has_log_time()) {
      set_log_time(from.log_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void go_role_trade_log_notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void go_role_trade_log_notify::CopyFrom(const go_role_trade_log_notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool go_role_trade_log_notify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void go_role_trade_log_notify::Swap(go_role_trade_log_notify* other) {
  if (other != this) {
    std::swap(role_uid_, other->role_uid_);
    std::swap(item_tid_, other->item_tid_);
    std::swap(price_, other->price_);
    std::swap(num_, other->num_);
    std::swap(tax_, other->tax_);
    std::swap(total_num_, other->total_num_);
    std::swap(total_cost_, other->total_cost_);
    std::swap(gain_, other->gain_);
    std::swap(trade_id_, other->trade_id_);
    std::swap(op_type_, other->op_type_);
    std::swap(source_type_, other->source_type_);
    std::swap(log_time_, other->log_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata go_role_trade_log_notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = go_role_trade_log_notify_descriptor_;
  metadata.reflection = go_role_trade_log_notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int go_role_recharge_log_notify::kRoleUidFieldNumber;
const int go_role_recharge_log_notify::kOrderIdFieldNumber;
const int go_role_recharge_log_notify::kRechargeTidFieldNumber;
const int go_role_recharge_log_notify::kRechargeRmbFieldNumber;
const int go_role_recharge_log_notify::kChannelIdFieldNumber;
const int go_role_recharge_log_notify::kLogTimeFieldNumber;
#endif  // !_MSC_VER

go_role_recharge_log_notify::go_role_recharge_log_notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void go_role_recharge_log_notify::InitAsDefaultInstance() {
}

go_role_recharge_log_notify::go_role_recharge_log_notify(const go_role_recharge_log_notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void go_role_recharge_log_notify::SharedCtor() {
  _cached_size_ = 0;
  role_uid_ = GOOGLE_ULONGLONG(0);
  order_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  recharge_tid_ = 0u;
  recharge_rmb_ = 0u;
  channel_id_ = 0u;
  log_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

go_role_recharge_log_notify::~go_role_recharge_log_notify() {
  SharedDtor();
}

void go_role_recharge_log_notify::SharedDtor() {
  if (order_id_ != &::google::protobuf::internal::kEmptyString) {
    delete order_id_;
  }
  if (this != default_instance_) {
  }
}

void go_role_recharge_log_notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* go_role_recharge_log_notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return go_role_recharge_log_notify_descriptor_;
}

const go_role_recharge_log_notify& go_role_recharge_log_notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_log_2eproto();
  return *default_instance_;
}

go_role_recharge_log_notify* go_role_recharge_log_notify::default_instance_ = NULL;

go_role_recharge_log_notify* go_role_recharge_log_notify::New() const {
  return new go_role_recharge_log_notify;
}

void go_role_recharge_log_notify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_uid_ = GOOGLE_ULONGLONG(0);
    if (has_order_id()) {
      if (order_id_ != &::google::protobuf::internal::kEmptyString) {
        order_id_->clear();
      }
    }
    recharge_tid_ = 0u;
    recharge_rmb_ = 0u;
    channel_id_ = 0u;
    log_time_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool go_role_recharge_log_notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 role_uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_uid_)));
          set_has_role_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_order_id;
        break;
      }

      // optional string order_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_order_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_order_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->order_id().data(), this->order_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_recharge_tid;
        break;
      }

      // optional uint32 recharge_tid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_recharge_tid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &recharge_tid_)));
          set_has_recharge_tid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_recharge_rmb;
        break;
      }

      // optional uint32 recharge_rmb = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_recharge_rmb:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &recharge_rmb_)));
          set_has_recharge_rmb();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_channel_id;
        break;
      }

      // optional uint32 channel_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_channel_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channel_id_)));
          set_has_channel_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_log_time;
        break;
      }

      // optional uint32 log_time = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_log_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &log_time_)));
          set_has_log_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void go_role_recharge_log_notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 role_uid = 1;
  if (has_role_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->role_uid(), output);
  }

  // optional string order_id = 2;
  if (has_order_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->order_id().data(), this->order_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->order_id(), output);
  }

  // optional uint32 recharge_tid = 3;
  if (has_recharge_tid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->recharge_tid(), output);
  }

  // optional uint32 recharge_rmb = 4;
  if (has_recharge_rmb()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->recharge_rmb(), output);
  }

  // optional uint32 channel_id = 5;
  if (has_channel_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->channel_id(), output);
  }

  // optional uint32 log_time = 6;
  if (has_log_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->log_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* go_role_recharge_log_notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 role_uid = 1;
  if (has_role_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->role_uid(), target);
  }

  // optional string order_id = 2;
  if (has_order_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->order_id().data(), this->order_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->order_id(), target);
  }

  // optional uint32 recharge_tid = 3;
  if (has_recharge_tid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->recharge_tid(), target);
  }

  // optional uint32 recharge_rmb = 4;
  if (has_recharge_rmb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->recharge_rmb(), target);
  }

  // optional uint32 channel_id = 5;
  if (has_channel_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->channel_id(), target);
  }

  // optional uint32 log_time = 6;
  if (has_log_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->log_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int go_role_recharge_log_notify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 role_uid = 1;
    if (has_role_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_uid());
    }

    // optional string order_id = 2;
    if (has_order_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->order_id());
    }

    // optional uint32 recharge_tid = 3;
    if (has_recharge_tid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->recharge_tid());
    }

    // optional uint32 recharge_rmb = 4;
    if (has_recharge_rmb()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->recharge_rmb());
    }

    // optional uint32 channel_id = 5;
    if (has_channel_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channel_id());
    }

    // optional uint32 log_time = 6;
    if (has_log_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->log_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void go_role_recharge_log_notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const go_role_recharge_log_notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const go_role_recharge_log_notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void go_role_recharge_log_notify::MergeFrom(const go_role_recharge_log_notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_uid()) {
      set_role_uid(from.role_uid());
    }
    if (from.has_order_id()) {
      set_order_id(from.order_id());
    }
    if (from.has_recharge_tid()) {
      set_recharge_tid(from.recharge_tid());
    }
    if (from.has_recharge_rmb()) {
      set_recharge_rmb(from.recharge_rmb());
    }
    if (from.has_channel_id()) {
      set_channel_id(from.channel_id());
    }
    if (from.has_log_time()) {
      set_log_time(from.log_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void go_role_recharge_log_notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void go_role_recharge_log_notify::CopyFrom(const go_role_recharge_log_notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool go_role_recharge_log_notify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void go_role_recharge_log_notify::Swap(go_role_recharge_log_notify* other) {
  if (other != this) {
    std::swap(role_uid_, other->role_uid_);
    std::swap(order_id_, other->order_id_);
    std::swap(recharge_tid_, other->recharge_tid_);
    std::swap(recharge_rmb_, other->recharge_rmb_);
    std::swap(channel_id_, other->channel_id_);
    std::swap(log_time_, other->log_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata go_role_recharge_log_notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = go_role_recharge_log_notify_descriptor_;
  metadata.reflection = go_role_recharge_log_notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int go_rmb_log_notify::kRoleUidFieldNumber;
const int go_rmb_log_notify::kRoleLevelFieldNumber;
const int go_rmb_log_notify::kOldNumFieldNumber;
const int go_rmb_log_notify::kUpNumFieldNumber;
const int go_rmb_log_notify::kNewNumFieldNumber;
const int go_rmb_log_notify::kOpTypeFieldNumber;
const int go_rmb_log_notify::kSourceTypeFieldNumber;
const int go_rmb_log_notify::kSourceParamFieldNumber;
const int go_rmb_log_notify::kLogTimeFieldNumber;
#endif  // !_MSC_VER

go_rmb_log_notify::go_rmb_log_notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void go_rmb_log_notify::InitAsDefaultInstance() {
}

go_rmb_log_notify::go_rmb_log_notify(const go_rmb_log_notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void go_rmb_log_notify::SharedCtor() {
  _cached_size_ = 0;
  role_uid_ = GOOGLE_ULONGLONG(0);
  role_level_ = 0u;
  old_num_ = 0u;
  up_num_ = 0u;
  new_num_ = 0u;
  op_type_ = 0u;
  source_type_ = 0u;
  source_param_ = 0u;
  log_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

go_rmb_log_notify::~go_rmb_log_notify() {
  SharedDtor();
}

void go_rmb_log_notify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void go_rmb_log_notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* go_rmb_log_notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return go_rmb_log_notify_descriptor_;
}

const go_rmb_log_notify& go_rmb_log_notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_log_2eproto();
  return *default_instance_;
}

go_rmb_log_notify* go_rmb_log_notify::default_instance_ = NULL;

go_rmb_log_notify* go_rmb_log_notify::New() const {
  return new go_rmb_log_notify;
}

void go_rmb_log_notify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_uid_ = GOOGLE_ULONGLONG(0);
    role_level_ = 0u;
    old_num_ = 0u;
    up_num_ = 0u;
    new_num_ = 0u;
    op_type_ = 0u;
    source_type_ = 0u;
    source_param_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    log_time_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool go_rmb_log_notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 role_uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_uid_)));
          set_has_role_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_role_level;
        break;
      }

      // optional uint32 role_level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_level_)));
          set_has_role_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_old_num;
        break;
      }

      // optional uint32 old_num = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_old_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &old_num_)));
          set_has_old_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_up_num;
        break;
      }

      // optional uint32 up_num = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_up_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &up_num_)));
          set_has_up_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_new_num;
        break;
      }

      // optional uint32 new_num = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_new_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &new_num_)));
          set_has_new_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_op_type;
        break;
      }

      // optional uint32 op_type = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_op_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &op_type_)));
          set_has_op_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_source_type;
        break;
      }

      // optional uint32 source_type = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_source_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &source_type_)));
          set_has_source_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_source_param;
        break;
      }

      // optional uint32 source_param = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_source_param:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &source_param_)));
          set_has_source_param();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_log_time;
        break;
      }

      // optional uint32 log_time = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_log_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &log_time_)));
          set_has_log_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void go_rmb_log_notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 role_uid = 1;
  if (has_role_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->role_uid(), output);
  }

  // optional uint32 role_level = 2;
  if (has_role_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->role_level(), output);
  }

  // optional uint32 old_num = 3;
  if (has_old_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->old_num(), output);
  }

  // optional uint32 up_num = 4;
  if (has_up_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->up_num(), output);
  }

  // optional uint32 new_num = 5;
  if (has_new_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->new_num(), output);
  }

  // optional uint32 op_type = 6;
  if (has_op_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->op_type(), output);
  }

  // optional uint32 source_type = 7;
  if (has_source_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->source_type(), output);
  }

  // optional uint32 source_param = 8;
  if (has_source_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->source_param(), output);
  }

  // optional uint32 log_time = 9;
  if (has_log_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->log_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* go_rmb_log_notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 role_uid = 1;
  if (has_role_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->role_uid(), target);
  }

  // optional uint32 role_level = 2;
  if (has_role_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->role_level(), target);
  }

  // optional uint32 old_num = 3;
  if (has_old_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->old_num(), target);
  }

  // optional uint32 up_num = 4;
  if (has_up_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->up_num(), target);
  }

  // optional uint32 new_num = 5;
  if (has_new_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->new_num(), target);
  }

  // optional uint32 op_type = 6;
  if (has_op_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->op_type(), target);
  }

  // optional uint32 source_type = 7;
  if (has_source_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->source_type(), target);
  }

  // optional uint32 source_param = 8;
  if (has_source_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->source_param(), target);
  }

  // optional uint32 log_time = 9;
  if (has_log_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->log_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int go_rmb_log_notify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 role_uid = 1;
    if (has_role_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_uid());
    }

    // optional uint32 role_level = 2;
    if (has_role_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->role_level());
    }

    // optional uint32 old_num = 3;
    if (has_old_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->old_num());
    }

    // optional uint32 up_num = 4;
    if (has_up_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->up_num());
    }

    // optional uint32 new_num = 5;
    if (has_new_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->new_num());
    }

    // optional uint32 op_type = 6;
    if (has_op_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->op_type());
    }

    // optional uint32 source_type = 7;
    if (has_source_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->source_type());
    }

    // optional uint32 source_param = 8;
    if (has_source_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->source_param());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 log_time = 9;
    if (has_log_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->log_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void go_rmb_log_notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const go_rmb_log_notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const go_rmb_log_notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void go_rmb_log_notify::MergeFrom(const go_rmb_log_notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_uid()) {
      set_role_uid(from.role_uid());
    }
    if (from.has_role_level()) {
      set_role_level(from.role_level());
    }
    if (from.has_old_num()) {
      set_old_num(from.old_num());
    }
    if (from.has_up_num()) {
      set_up_num(from.up_num());
    }
    if (from.has_new_num()) {
      set_new_num(from.new_num());
    }
    if (from.has_op_type()) {
      set_op_type(from.op_type());
    }
    if (from.has_source_type()) {
      set_source_type(from.source_type());
    }
    if (from.has_source_param()) {
      set_source_param(from.source_param());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_log_time()) {
      set_log_time(from.log_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void go_rmb_log_notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void go_rmb_log_notify::CopyFrom(const go_rmb_log_notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool go_rmb_log_notify::IsInitialized() const {

  return true;
}

void go_rmb_log_notify::Swap(go_rmb_log_notify* other) {
  if (other != this) {
    std::swap(role_uid_, other->role_uid_);
    std::swap(role_level_, other->role_level_);
    std::swap(old_num_, other->old_num_);
    std::swap(up_num_, other->up_num_);
    std::swap(new_num_, other->new_num_);
    std::swap(op_type_, other->op_type_);
    std::swap(source_type_, other->source_type_);
    std::swap(source_param_, other->source_param_);
    std::swap(log_time_, other->log_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata go_rmb_log_notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = go_rmb_log_notify_descriptor_;
  metadata.reflection = go_rmb_log_notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int go_expedition_log_notify::kRoleUidFieldNumber;
const int go_expedition_log_notify::kRoleLevelFieldNumber;
const int go_expedition_log_notify::kSourceTypeFieldNumber;
const int go_expedition_log_notify::kSourceParamFieldNumber;
const int go_expedition_log_notify::kLogTimeFieldNumber;
#endif  // !_MSC_VER

go_expedition_log_notify::go_expedition_log_notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void go_expedition_log_notify::InitAsDefaultInstance() {
}

go_expedition_log_notify::go_expedition_log_notify(const go_expedition_log_notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void go_expedition_log_notify::SharedCtor() {
  _cached_size_ = 0;
  role_uid_ = GOOGLE_ULONGLONG(0);
  role_level_ = 0u;
  source_type_ = 0u;
  source_param_ = 0u;
  log_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

go_expedition_log_notify::~go_expedition_log_notify() {
  SharedDtor();
}

void go_expedition_log_notify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void go_expedition_log_notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* go_expedition_log_notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return go_expedition_log_notify_descriptor_;
}

const go_expedition_log_notify& go_expedition_log_notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_log_2eproto();
  return *default_instance_;
}

go_expedition_log_notify* go_expedition_log_notify::default_instance_ = NULL;

go_expedition_log_notify* go_expedition_log_notify::New() const {
  return new go_expedition_log_notify;
}

void go_expedition_log_notify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_uid_ = GOOGLE_ULONGLONG(0);
    role_level_ = 0u;
    source_type_ = 0u;
    source_param_ = 0u;
    log_time_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool go_expedition_log_notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 role_uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_uid_)));
          set_has_role_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_role_level;
        break;
      }

      // required uint32 role_level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_level_)));
          set_has_role_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_source_type;
        break;
      }

      // required uint32 source_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_source_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &source_type_)));
          set_has_source_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_source_param;
        break;
      }

      // required uint32 source_param = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_source_param:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &source_param_)));
          set_has_source_param();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_log_time;
        break;
      }

      // required uint32 log_time = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_log_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &log_time_)));
          set_has_log_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void go_expedition_log_notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 role_uid = 1;
  if (has_role_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->role_uid(), output);
  }

  // required uint32 role_level = 2;
  if (has_role_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->role_level(), output);
  }

  // required uint32 source_type = 3;
  if (has_source_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->source_type(), output);
  }

  // required uint32 source_param = 4;
  if (has_source_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->source_param(), output);
  }

  // required uint32 log_time = 5;
  if (has_log_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->log_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* go_expedition_log_notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 role_uid = 1;
  if (has_role_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->role_uid(), target);
  }

  // required uint32 role_level = 2;
  if (has_role_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->role_level(), target);
  }

  // required uint32 source_type = 3;
  if (has_source_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->source_type(), target);
  }

  // required uint32 source_param = 4;
  if (has_source_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->source_param(), target);
  }

  // required uint32 log_time = 5;
  if (has_log_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->log_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int go_expedition_log_notify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 role_uid = 1;
    if (has_role_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_uid());
    }

    // required uint32 role_level = 2;
    if (has_role_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->role_level());
    }

    // required uint32 source_type = 3;
    if (has_source_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->source_type());
    }

    // required uint32 source_param = 4;
    if (has_source_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->source_param());
    }

    // required uint32 log_time = 5;
    if (has_log_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->log_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void go_expedition_log_notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const go_expedition_log_notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const go_expedition_log_notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void go_expedition_log_notify::MergeFrom(const go_expedition_log_notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_uid()) {
      set_role_uid(from.role_uid());
    }
    if (from.has_role_level()) {
      set_role_level(from.role_level());
    }
    if (from.has_source_type()) {
      set_source_type(from.source_type());
    }
    if (from.has_source_param()) {
      set_source_param(from.source_param());
    }
    if (from.has_log_time()) {
      set_log_time(from.log_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void go_expedition_log_notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void go_expedition_log_notify::CopyFrom(const go_expedition_log_notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool go_expedition_log_notify::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void go_expedition_log_notify::Swap(go_expedition_log_notify* other) {
  if (other != this) {
    std::swap(role_uid_, other->role_uid_);
    std::swap(role_level_, other->role_level_);
    std::swap(source_type_, other->source_type_);
    std::swap(source_param_, other->source_param_);
    std::swap(log_time_, other->log_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata go_expedition_log_notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = go_expedition_log_notify_descriptor_;
  metadata.reflection = go_expedition_log_notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int eo_scene_log_notify::kRoleUidFieldNumber;
const int eo_scene_log_notify::kOldMapTidFieldNumber;
const int eo_scene_log_notify::kNewMapTidFieldNumber;
const int eo_scene_log_notify::kSourceTypeFieldNumber;
const int eo_scene_log_notify::kLogTimeFieldNumber;
#endif  // !_MSC_VER

eo_scene_log_notify::eo_scene_log_notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void eo_scene_log_notify::InitAsDefaultInstance() {
}

eo_scene_log_notify::eo_scene_log_notify(const eo_scene_log_notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void eo_scene_log_notify::SharedCtor() {
  _cached_size_ = 0;
  role_uid_ = GOOGLE_ULONGLONG(0);
  old_map_tid_ = 0u;
  new_map_tid_ = 0u;
  source_type_ = 0u;
  log_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

eo_scene_log_notify::~eo_scene_log_notify() {
  SharedDtor();
}

void eo_scene_log_notify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void eo_scene_log_notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* eo_scene_log_notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return eo_scene_log_notify_descriptor_;
}

const eo_scene_log_notify& eo_scene_log_notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_log_2eproto();
  return *default_instance_;
}

eo_scene_log_notify* eo_scene_log_notify::default_instance_ = NULL;

eo_scene_log_notify* eo_scene_log_notify::New() const {
  return new eo_scene_log_notify;
}

void eo_scene_log_notify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_uid_ = GOOGLE_ULONGLONG(0);
    old_map_tid_ = 0u;
    new_map_tid_ = 0u;
    source_type_ = 0u;
    log_time_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool eo_scene_log_notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 role_uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_uid_)));
          set_has_role_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_old_map_tid;
        break;
      }

      // optional uint32 old_map_tid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_old_map_tid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &old_map_tid_)));
          set_has_old_map_tid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_new_map_tid;
        break;
      }

      // optional uint32 new_map_tid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_new_map_tid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &new_map_tid_)));
          set_has_new_map_tid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_source_type;
        break;
      }

      // optional uint32 source_type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_source_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &source_type_)));
          set_has_source_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_log_time;
        break;
      }

      // optional uint32 log_time = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_log_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &log_time_)));
          set_has_log_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void eo_scene_log_notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 role_uid = 1;
  if (has_role_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->role_uid(), output);
  }

  // optional uint32 old_map_tid = 2;
  if (has_old_map_tid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->old_map_tid(), output);
  }

  // optional uint32 new_map_tid = 3;
  if (has_new_map_tid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->new_map_tid(), output);
  }

  // optional uint32 source_type = 4;
  if (has_source_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->source_type(), output);
  }

  // optional uint32 log_time = 5;
  if (has_log_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->log_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* eo_scene_log_notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 role_uid = 1;
  if (has_role_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->role_uid(), target);
  }

  // optional uint32 old_map_tid = 2;
  if (has_old_map_tid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->old_map_tid(), target);
  }

  // optional uint32 new_map_tid = 3;
  if (has_new_map_tid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->new_map_tid(), target);
  }

  // optional uint32 source_type = 4;
  if (has_source_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->source_type(), target);
  }

  // optional uint32 log_time = 5;
  if (has_log_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->log_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int eo_scene_log_notify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 role_uid = 1;
    if (has_role_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_uid());
    }

    // optional uint32 old_map_tid = 2;
    if (has_old_map_tid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->old_map_tid());
    }

    // optional uint32 new_map_tid = 3;
    if (has_new_map_tid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->new_map_tid());
    }

    // optional uint32 source_type = 4;
    if (has_source_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->source_type());
    }

    // optional uint32 log_time = 5;
    if (has_log_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->log_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void eo_scene_log_notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const eo_scene_log_notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const eo_scene_log_notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void eo_scene_log_notify::MergeFrom(const eo_scene_log_notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_uid()) {
      set_role_uid(from.role_uid());
    }
    if (from.has_old_map_tid()) {
      set_old_map_tid(from.old_map_tid());
    }
    if (from.has_new_map_tid()) {
      set_new_map_tid(from.new_map_tid());
    }
    if (from.has_source_type()) {
      set_source_type(from.source_type());
    }
    if (from.has_log_time()) {
      set_log_time(from.log_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void eo_scene_log_notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void eo_scene_log_notify::CopyFrom(const eo_scene_log_notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool eo_scene_log_notify::IsInitialized() const {

  return true;
}

void eo_scene_log_notify::Swap(eo_scene_log_notify* other) {
  if (other != this) {
    std::swap(role_uid_, other->role_uid_);
    std::swap(old_map_tid_, other->old_map_tid_);
    std::swap(new_map_tid_, other->new_map_tid_);
    std::swap(source_type_, other->source_type_);
    std::swap(log_time_, other->log_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata eo_scene_log_notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = eo_scene_log_notify_descriptor_;
  metadata.reflection = eo_scene_log_notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int go_combat_log_notify::kRoleUidFieldNumber;
const int go_combat_log_notify::kRoleLevelFieldNumber;
const int go_combat_log_notify::kFightTypeFieldNumber;
const int go_combat_log_notify::kCombatTypeFieldNumber;
const int go_combat_log_notify::kTeamMembersFieldNumber;
const int go_combat_log_notify::kTargetsFieldNumber;
const int go_combat_log_notify::kFightUidFieldNumber;
const int go_combat_log_notify::kIsWinFieldNumber;
const int go_combat_log_notify::kStartTimeFieldNumber;
const int go_combat_log_notify::kFightTimeFieldNumber;
const int go_combat_log_notify::kFinishTimeFieldNumber;
const int go_combat_log_notify::kLogTimeFieldNumber;
#endif  // !_MSC_VER

go_combat_log_notify::go_combat_log_notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void go_combat_log_notify::InitAsDefaultInstance() {
}

go_combat_log_notify::go_combat_log_notify(const go_combat_log_notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void go_combat_log_notify::SharedCtor() {
  _cached_size_ = 0;
  role_uid_ = GOOGLE_ULONGLONG(0);
  role_level_ = 0u;
  fight_type_ = 0u;
  combat_type_ = 0u;
  fight_uid_ = GOOGLE_ULONGLONG(0);
  is_win_ = 0u;
  start_time_ = 0u;
  fight_time_ = 0u;
  finish_time_ = 0u;
  log_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

go_combat_log_notify::~go_combat_log_notify() {
  SharedDtor();
}

void go_combat_log_notify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void go_combat_log_notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* go_combat_log_notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return go_combat_log_notify_descriptor_;
}

const go_combat_log_notify& go_combat_log_notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_log_2eproto();
  return *default_instance_;
}

go_combat_log_notify* go_combat_log_notify::default_instance_ = NULL;

go_combat_log_notify* go_combat_log_notify::New() const {
  return new go_combat_log_notify;
}

void go_combat_log_notify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_uid_ = GOOGLE_ULONGLONG(0);
    role_level_ = 0u;
    fight_type_ = 0u;
    combat_type_ = 0u;
    fight_uid_ = GOOGLE_ULONGLONG(0);
    is_win_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    start_time_ = 0u;
    fight_time_ = 0u;
    finish_time_ = 0u;
    log_time_ = 0u;
  }
  team_members_.Clear();
  targets_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool go_combat_log_notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 role_uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_uid_)));
          set_has_role_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_role_level;
        break;
      }

      // optional uint32 role_level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_level_)));
          set_has_role_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_fight_type;
        break;
      }

      // optional uint32 fight_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fight_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fight_type_)));
          set_has_fight_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_combat_type;
        break;
      }

      // optional uint32 combat_type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_combat_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &combat_type_)));
          set_has_combat_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_team_members;
        break;
      }

      // repeated uint64 team_members = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_team_members:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 40, input, this->mutable_team_members())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_team_members())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_team_members;
        if (input->ExpectTag(48)) goto parse_targets;
        break;
      }

      // repeated uint64 targets = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_targets:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 48, input, this->mutable_targets())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_targets())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_targets;
        if (input->ExpectTag(56)) goto parse_fight_uid;
        break;
      }

      // optional uint64 fight_uid = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fight_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &fight_uid_)));
          set_has_fight_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_is_win;
        break;
      }

      // optional uint32 is_win = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_win:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &is_win_)));
          set_has_is_win();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_start_time;
        break;
      }

      // optional uint32 start_time = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_start_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &start_time_)));
          set_has_start_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_fight_time;
        break;
      }

      // optional uint32 fight_time = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fight_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fight_time_)));
          set_has_fight_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_finish_time;
        break;
      }

      // optional uint32 finish_time = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_finish_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &finish_time_)));
          set_has_finish_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_log_time;
        break;
      }

      // optional uint32 log_time = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_log_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &log_time_)));
          set_has_log_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void go_combat_log_notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 role_uid = 1;
  if (has_role_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->role_uid(), output);
  }

  // optional uint32 role_level = 2;
  if (has_role_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->role_level(), output);
  }

  // optional uint32 fight_type = 3;
  if (has_fight_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->fight_type(), output);
  }

  // optional uint32 combat_type = 4;
  if (has_combat_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->combat_type(), output);
  }

  // repeated uint64 team_members = 5;
  for (int i = 0; i < this->team_members_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      5, this->team_members(i), output);
  }

  // repeated uint64 targets = 6;
  for (int i = 0; i < this->targets_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      6, this->targets(i), output);
  }

  // optional uint64 fight_uid = 7;
  if (has_fight_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->fight_uid(), output);
  }

  // optional uint32 is_win = 8;
  if (has_is_win()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->is_win(), output);
  }

  // optional uint32 start_time = 9;
  if (has_start_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->start_time(), output);
  }

  // optional uint32 fight_time = 10;
  if (has_fight_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->fight_time(), output);
  }

  // optional uint32 finish_time = 11;
  if (has_finish_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->finish_time(), output);
  }

  // optional uint32 log_time = 12;
  if (has_log_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->log_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* go_combat_log_notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 role_uid = 1;
  if (has_role_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->role_uid(), target);
  }

  // optional uint32 role_level = 2;
  if (has_role_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->role_level(), target);
  }

  // optional uint32 fight_type = 3;
  if (has_fight_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->fight_type(), target);
  }

  // optional uint32 combat_type = 4;
  if (has_combat_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->combat_type(), target);
  }

  // repeated uint64 team_members = 5;
  for (int i = 0; i < this->team_members_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(5, this->team_members(i), target);
  }

  // repeated uint64 targets = 6;
  for (int i = 0; i < this->targets_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(6, this->targets(i), target);
  }

  // optional uint64 fight_uid = 7;
  if (has_fight_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->fight_uid(), target);
  }

  // optional uint32 is_win = 8;
  if (has_is_win()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->is_win(), target);
  }

  // optional uint32 start_time = 9;
  if (has_start_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->start_time(), target);
  }

  // optional uint32 fight_time = 10;
  if (has_fight_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->fight_time(), target);
  }

  // optional uint32 finish_time = 11;
  if (has_finish_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->finish_time(), target);
  }

  // optional uint32 log_time = 12;
  if (has_log_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->log_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int go_combat_log_notify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 role_uid = 1;
    if (has_role_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_uid());
    }

    // optional uint32 role_level = 2;
    if (has_role_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->role_level());
    }

    // optional uint32 fight_type = 3;
    if (has_fight_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fight_type());
    }

    // optional uint32 combat_type = 4;
    if (has_combat_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->combat_type());
    }

    // optional uint64 fight_uid = 7;
    if (has_fight_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->fight_uid());
    }

    // optional uint32 is_win = 8;
    if (has_is_win()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->is_win());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 start_time = 9;
    if (has_start_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->start_time());
    }

    // optional uint32 fight_time = 10;
    if (has_fight_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fight_time());
    }

    // optional uint32 finish_time = 11;
    if (has_finish_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->finish_time());
    }

    // optional uint32 log_time = 12;
    if (has_log_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->log_time());
    }

  }
  // repeated uint64 team_members = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->team_members_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->team_members(i));
    }
    total_size += 1 * this->team_members_size() + data_size;
  }

  // repeated uint64 targets = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->targets_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->targets(i));
    }
    total_size += 1 * this->targets_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void go_combat_log_notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const go_combat_log_notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const go_combat_log_notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void go_combat_log_notify::MergeFrom(const go_combat_log_notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  team_members_.MergeFrom(from.team_members_);
  targets_.MergeFrom(from.targets_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_uid()) {
      set_role_uid(from.role_uid());
    }
    if (from.has_role_level()) {
      set_role_level(from.role_level());
    }
    if (from.has_fight_type()) {
      set_fight_type(from.fight_type());
    }
    if (from.has_combat_type()) {
      set_combat_type(from.combat_type());
    }
    if (from.has_fight_uid()) {
      set_fight_uid(from.fight_uid());
    }
    if (from.has_is_win()) {
      set_is_win(from.is_win());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_start_time()) {
      set_start_time(from.start_time());
    }
    if (from.has_fight_time()) {
      set_fight_time(from.fight_time());
    }
    if (from.has_finish_time()) {
      set_finish_time(from.finish_time());
    }
    if (from.has_log_time()) {
      set_log_time(from.log_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void go_combat_log_notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void go_combat_log_notify::CopyFrom(const go_combat_log_notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool go_combat_log_notify::IsInitialized() const {

  return true;
}

void go_combat_log_notify::Swap(go_combat_log_notify* other) {
  if (other != this) {
    std::swap(role_uid_, other->role_uid_);
    std::swap(role_level_, other->role_level_);
    std::swap(fight_type_, other->fight_type_);
    std::swap(combat_type_, other->combat_type_);
    team_members_.Swap(&other->team_members_);
    targets_.Swap(&other->targets_);
    std::swap(fight_uid_, other->fight_uid_);
    std::swap(is_win_, other->is_win_);
    std::swap(start_time_, other->start_time_);
    std::swap(fight_time_, other->fight_time_);
    std::swap(finish_time_, other->finish_time_);
    std::swap(log_time_, other->log_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata go_combat_log_notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = go_combat_log_notify_descriptor_;
  metadata.reflection = go_combat_log_notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int go_hero_exp_log_notify::kRoleUidFieldNumber;
const int go_hero_exp_log_notify::kRoleLevelFieldNumber;
const int go_hero_exp_log_notify::kHeroUidFieldNumber;
const int go_hero_exp_log_notify::kHeroTidFieldNumber;
const int go_hero_exp_log_notify::kOldLevelFieldNumber;
const int go_hero_exp_log_notify::kOldExpFieldNumber;
const int go_hero_exp_log_notify::kUpExpFieldNumber;
const int go_hero_exp_log_notify::kNewLevelFieldNumber;
const int go_hero_exp_log_notify::kNewExpFieldNumber;
const int go_hero_exp_log_notify::kSourceTypeFieldNumber;
const int go_hero_exp_log_notify::kSourceParamFieldNumber;
const int go_hero_exp_log_notify::kLogTimeFieldNumber;
#endif  // !_MSC_VER

go_hero_exp_log_notify::go_hero_exp_log_notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void go_hero_exp_log_notify::InitAsDefaultInstance() {
}

go_hero_exp_log_notify::go_hero_exp_log_notify(const go_hero_exp_log_notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void go_hero_exp_log_notify::SharedCtor() {
  _cached_size_ = 0;
  role_uid_ = GOOGLE_ULONGLONG(0);
  role_level_ = 0u;
  hero_uid_ = GOOGLE_ULONGLONG(0);
  hero_tid_ = 0u;
  old_level_ = 0u;
  old_exp_ = 0u;
  up_exp_ = 0u;
  new_level_ = 0u;
  new_exp_ = 0u;
  source_type_ = 0u;
  source_param_ = 0u;
  log_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

go_hero_exp_log_notify::~go_hero_exp_log_notify() {
  SharedDtor();
}

void go_hero_exp_log_notify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void go_hero_exp_log_notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* go_hero_exp_log_notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return go_hero_exp_log_notify_descriptor_;
}

const go_hero_exp_log_notify& go_hero_exp_log_notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_log_2eproto();
  return *default_instance_;
}

go_hero_exp_log_notify* go_hero_exp_log_notify::default_instance_ = NULL;

go_hero_exp_log_notify* go_hero_exp_log_notify::New() const {
  return new go_hero_exp_log_notify;
}

void go_hero_exp_log_notify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_uid_ = GOOGLE_ULONGLONG(0);
    role_level_ = 0u;
    hero_uid_ = GOOGLE_ULONGLONG(0);
    hero_tid_ = 0u;
    old_level_ = 0u;
    old_exp_ = 0u;
    up_exp_ = 0u;
    new_level_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    new_exp_ = 0u;
    source_type_ = 0u;
    source_param_ = 0u;
    log_time_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool go_hero_exp_log_notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 role_uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_uid_)));
          set_has_role_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_role_level;
        break;
      }

      // required uint32 role_level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_level_)));
          set_has_role_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_hero_uid;
        break;
      }

      // required uint64 hero_uid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hero_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &hero_uid_)));
          set_has_hero_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_hero_tid;
        break;
      }

      // required uint32 hero_tid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hero_tid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hero_tid_)));
          set_has_hero_tid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_old_level;
        break;
      }

      // required uint32 old_level = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_old_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &old_level_)));
          set_has_old_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_old_exp;
        break;
      }

      // required uint32 old_exp = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_old_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &old_exp_)));
          set_has_old_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_up_exp;
        break;
      }

      // required uint32 up_exp = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_up_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &up_exp_)));
          set_has_up_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_new_level;
        break;
      }

      // required uint32 new_level = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_new_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &new_level_)));
          set_has_new_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_new_exp;
        break;
      }

      // required uint32 new_exp = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_new_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &new_exp_)));
          set_has_new_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_source_type;
        break;
      }

      // required uint32 source_type = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_source_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &source_type_)));
          set_has_source_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_source_param;
        break;
      }

      // optional uint32 source_param = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_source_param:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &source_param_)));
          set_has_source_param();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_log_time;
        break;
      }

      // required uint32 log_time = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_log_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &log_time_)));
          set_has_log_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void go_hero_exp_log_notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 role_uid = 1;
  if (has_role_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->role_uid(), output);
  }

  // required uint32 role_level = 2;
  if (has_role_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->role_level(), output);
  }

  // required uint64 hero_uid = 3;
  if (has_hero_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->hero_uid(), output);
  }

  // required uint32 hero_tid = 4;
  if (has_hero_tid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->hero_tid(), output);
  }

  // required uint32 old_level = 5;
  if (has_old_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->old_level(), output);
  }

  // required uint32 old_exp = 6;
  if (has_old_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->old_exp(), output);
  }

  // required uint32 up_exp = 7;
  if (has_up_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->up_exp(), output);
  }

  // required uint32 new_level = 8;
  if (has_new_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->new_level(), output);
  }

  // required uint32 new_exp = 9;
  if (has_new_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->new_exp(), output);
  }

  // required uint32 source_type = 10;
  if (has_source_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->source_type(), output);
  }

  // optional uint32 source_param = 11;
  if (has_source_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->source_param(), output);
  }

  // required uint32 log_time = 12;
  if (has_log_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->log_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* go_hero_exp_log_notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 role_uid = 1;
  if (has_role_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->role_uid(), target);
  }

  // required uint32 role_level = 2;
  if (has_role_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->role_level(), target);
  }

  // required uint64 hero_uid = 3;
  if (has_hero_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->hero_uid(), target);
  }

  // required uint32 hero_tid = 4;
  if (has_hero_tid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->hero_tid(), target);
  }

  // required uint32 old_level = 5;
  if (has_old_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->old_level(), target);
  }

  // required uint32 old_exp = 6;
  if (has_old_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->old_exp(), target);
  }

  // required uint32 up_exp = 7;
  if (has_up_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->up_exp(), target);
  }

  // required uint32 new_level = 8;
  if (has_new_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->new_level(), target);
  }

  // required uint32 new_exp = 9;
  if (has_new_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->new_exp(), target);
  }

  // required uint32 source_type = 10;
  if (has_source_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->source_type(), target);
  }

  // optional uint32 source_param = 11;
  if (has_source_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->source_param(), target);
  }

  // required uint32 log_time = 12;
  if (has_log_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->log_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int go_hero_exp_log_notify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 role_uid = 1;
    if (has_role_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_uid());
    }

    // required uint32 role_level = 2;
    if (has_role_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->role_level());
    }

    // required uint64 hero_uid = 3;
    if (has_hero_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->hero_uid());
    }

    // required uint32 hero_tid = 4;
    if (has_hero_tid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hero_tid());
    }

    // required uint32 old_level = 5;
    if (has_old_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->old_level());
    }

    // required uint32 old_exp = 6;
    if (has_old_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->old_exp());
    }

    // required uint32 up_exp = 7;
    if (has_up_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->up_exp());
    }

    // required uint32 new_level = 8;
    if (has_new_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->new_level());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required uint32 new_exp = 9;
    if (has_new_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->new_exp());
    }

    // required uint32 source_type = 10;
    if (has_source_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->source_type());
    }

    // optional uint32 source_param = 11;
    if (has_source_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->source_param());
    }

    // required uint32 log_time = 12;
    if (has_log_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->log_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void go_hero_exp_log_notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const go_hero_exp_log_notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const go_hero_exp_log_notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void go_hero_exp_log_notify::MergeFrom(const go_hero_exp_log_notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_uid()) {
      set_role_uid(from.role_uid());
    }
    if (from.has_role_level()) {
      set_role_level(from.role_level());
    }
    if (from.has_hero_uid()) {
      set_hero_uid(from.hero_uid());
    }
    if (from.has_hero_tid()) {
      set_hero_tid(from.hero_tid());
    }
    if (from.has_old_level()) {
      set_old_level(from.old_level());
    }
    if (from.has_old_exp()) {
      set_old_exp(from.old_exp());
    }
    if (from.has_up_exp()) {
      set_up_exp(from.up_exp());
    }
    if (from.has_new_level()) {
      set_new_level(from.new_level());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_new_exp()) {
      set_new_exp(from.new_exp());
    }
    if (from.has_source_type()) {
      set_source_type(from.source_type());
    }
    if (from.has_source_param()) {
      set_source_param(from.source_param());
    }
    if (from.has_log_time()) {
      set_log_time(from.log_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void go_hero_exp_log_notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void go_hero_exp_log_notify::CopyFrom(const go_hero_exp_log_notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool go_hero_exp_log_notify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000bff) != 0x00000bff) return false;

  return true;
}

void go_hero_exp_log_notify::Swap(go_hero_exp_log_notify* other) {
  if (other != this) {
    std::swap(role_uid_, other->role_uid_);
    std::swap(role_level_, other->role_level_);
    std::swap(hero_uid_, other->hero_uid_);
    std::swap(hero_tid_, other->hero_tid_);
    std::swap(old_level_, other->old_level_);
    std::swap(old_exp_, other->old_exp_);
    std::swap(up_exp_, other->up_exp_);
    std::swap(new_level_, other->new_level_);
    std::swap(new_exp_, other->new_exp_);
    std::swap(source_type_, other->source_type_);
    std::swap(source_param_, other->source_param_);
    std::swap(log_time_, other->log_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata go_hero_exp_log_notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = go_hero_exp_log_notify_descriptor_;
  metadata.reflection = go_hero_exp_log_notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int eo_redbag_log_notify::kRoleUidFieldNumber;
const int eo_redbag_log_notify::kRoleNameFieldNumber;
const int eo_redbag_log_notify::kRedbagUidFieldNumber;
const int eo_redbag_log_notify::kTotalCountFieldNumber;
const int eo_redbag_log_notify::kTotalMoneyFieldNumber;
const int eo_redbag_log_notify::kDrawMoneyFieldNumber;
const int eo_redbag_log_notify::kRestCountFieldNumber;
const int eo_redbag_log_notify::kRestMoneyFieldNumber;
const int eo_redbag_log_notify::kSourceTypeFieldNumber;
const int eo_redbag_log_notify::kLogTimeFieldNumber;
#endif  // !_MSC_VER

eo_redbag_log_notify::eo_redbag_log_notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void eo_redbag_log_notify::InitAsDefaultInstance() {
}

eo_redbag_log_notify::eo_redbag_log_notify(const eo_redbag_log_notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void eo_redbag_log_notify::SharedCtor() {
  _cached_size_ = 0;
  role_uid_ = GOOGLE_ULONGLONG(0);
  role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  redbag_uid_ = GOOGLE_ULONGLONG(0);
  total_count_ = 0u;
  total_money_ = 0u;
  draw_money_ = 0u;
  rest_count_ = 0u;
  rest_money_ = 0u;
  source_type_ = 0u;
  log_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

eo_redbag_log_notify::~eo_redbag_log_notify() {
  SharedDtor();
}

void eo_redbag_log_notify::SharedDtor() {
  if (role_name_ != &::google::protobuf::internal::kEmptyString) {
    delete role_name_;
  }
  if (this != default_instance_) {
  }
}

void eo_redbag_log_notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* eo_redbag_log_notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return eo_redbag_log_notify_descriptor_;
}

const eo_redbag_log_notify& eo_redbag_log_notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_log_2eproto();
  return *default_instance_;
}

eo_redbag_log_notify* eo_redbag_log_notify::default_instance_ = NULL;

eo_redbag_log_notify* eo_redbag_log_notify::New() const {
  return new eo_redbag_log_notify;
}

void eo_redbag_log_notify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_uid_ = GOOGLE_ULONGLONG(0);
    if (has_role_name()) {
      if (role_name_ != &::google::protobuf::internal::kEmptyString) {
        role_name_->clear();
      }
    }
    redbag_uid_ = GOOGLE_ULONGLONG(0);
    total_count_ = 0u;
    total_money_ = 0u;
    draw_money_ = 0u;
    rest_count_ = 0u;
    rest_money_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    source_type_ = 0u;
    log_time_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool eo_redbag_log_notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 role_uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_uid_)));
          set_has_role_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_role_name;
        break;
      }

      // optional string role_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_role_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_role_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->role_name().data(), this->role_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_redbag_uid;
        break;
      }

      // optional uint64 redbag_uid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_redbag_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &redbag_uid_)));
          set_has_redbag_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_total_count;
        break;
      }

      // optional uint32 total_count = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_count_)));
          set_has_total_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_total_money;
        break;
      }

      // optional uint32 total_money = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_money_)));
          set_has_total_money();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_draw_money;
        break;
      }

      // optional uint32 draw_money = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_draw_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &draw_money_)));
          set_has_draw_money();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_rest_count;
        break;
      }

      // optional uint32 rest_count = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rest_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rest_count_)));
          set_has_rest_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_rest_money;
        break;
      }

      // optional uint32 rest_money = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rest_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rest_money_)));
          set_has_rest_money();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_source_type;
        break;
      }

      // optional uint32 source_type = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_source_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &source_type_)));
          set_has_source_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_log_time;
        break;
      }

      // optional uint32 log_time = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_log_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &log_time_)));
          set_has_log_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void eo_redbag_log_notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 role_uid = 1;
  if (has_role_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->role_uid(), output);
  }

  // optional string role_name = 2;
  if (has_role_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_name().data(), this->role_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->role_name(), output);
  }

  // optional uint64 redbag_uid = 3;
  if (has_redbag_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->redbag_uid(), output);
  }

  // optional uint32 total_count = 4;
  if (has_total_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->total_count(), output);
  }

  // optional uint32 total_money = 5;
  if (has_total_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->total_money(), output);
  }

  // optional uint32 draw_money = 6;
  if (has_draw_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->draw_money(), output);
  }

  // optional uint32 rest_count = 7;
  if (has_rest_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->rest_count(), output);
  }

  // optional uint32 rest_money = 8;
  if (has_rest_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->rest_money(), output);
  }

  // optional uint32 source_type = 9;
  if (has_source_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->source_type(), output);
  }

  // optional uint32 log_time = 10;
  if (has_log_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->log_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* eo_redbag_log_notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 role_uid = 1;
  if (has_role_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->role_uid(), target);
  }

  // optional string role_name = 2;
  if (has_role_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_name().data(), this->role_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->role_name(), target);
  }

  // optional uint64 redbag_uid = 3;
  if (has_redbag_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->redbag_uid(), target);
  }

  // optional uint32 total_count = 4;
  if (has_total_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->total_count(), target);
  }

  // optional uint32 total_money = 5;
  if (has_total_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->total_money(), target);
  }

  // optional uint32 draw_money = 6;
  if (has_draw_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->draw_money(), target);
  }

  // optional uint32 rest_count = 7;
  if (has_rest_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->rest_count(), target);
  }

  // optional uint32 rest_money = 8;
  if (has_rest_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->rest_money(), target);
  }

  // optional uint32 source_type = 9;
  if (has_source_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->source_type(), target);
  }

  // optional uint32 log_time = 10;
  if (has_log_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->log_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int eo_redbag_log_notify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 role_uid = 1;
    if (has_role_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_uid());
    }

    // optional string role_name = 2;
    if (has_role_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->role_name());
    }

    // optional uint64 redbag_uid = 3;
    if (has_redbag_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->redbag_uid());
    }

    // optional uint32 total_count = 4;
    if (has_total_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->total_count());
    }

    // optional uint32 total_money = 5;
    if (has_total_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->total_money());
    }

    // optional uint32 draw_money = 6;
    if (has_draw_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->draw_money());
    }

    // optional uint32 rest_count = 7;
    if (has_rest_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rest_count());
    }

    // optional uint32 rest_money = 8;
    if (has_rest_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rest_money());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 source_type = 9;
    if (has_source_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->source_type());
    }

    // optional uint32 log_time = 10;
    if (has_log_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->log_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void eo_redbag_log_notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const eo_redbag_log_notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const eo_redbag_log_notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void eo_redbag_log_notify::MergeFrom(const eo_redbag_log_notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_uid()) {
      set_role_uid(from.role_uid());
    }
    if (from.has_role_name()) {
      set_role_name(from.role_name());
    }
    if (from.has_redbag_uid()) {
      set_redbag_uid(from.redbag_uid());
    }
    if (from.has_total_count()) {
      set_total_count(from.total_count());
    }
    if (from.has_total_money()) {
      set_total_money(from.total_money());
    }
    if (from.has_draw_money()) {
      set_draw_money(from.draw_money());
    }
    if (from.has_rest_count()) {
      set_rest_count(from.rest_count());
    }
    if (from.has_rest_money()) {
      set_rest_money(from.rest_money());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_source_type()) {
      set_source_type(from.source_type());
    }
    if (from.has_log_time()) {
      set_log_time(from.log_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void eo_redbag_log_notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void eo_redbag_log_notify::CopyFrom(const eo_redbag_log_notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool eo_redbag_log_notify::IsInitialized() const {

  return true;
}

void eo_redbag_log_notify::Swap(eo_redbag_log_notify* other) {
  if (other != this) {
    std::swap(role_uid_, other->role_uid_);
    std::swap(role_name_, other->role_name_);
    std::swap(redbag_uid_, other->redbag_uid_);
    std::swap(total_count_, other->total_count_);
    std::swap(total_money_, other->total_money_);
    std::swap(draw_money_, other->draw_money_);
    std::swap(rest_count_, other->rest_count_);
    std::swap(rest_money_, other->rest_money_);
    std::swap(source_type_, other->source_type_);
    std::swap(log_time_, other->log_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata eo_redbag_log_notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = eo_redbag_log_notify_descriptor_;
  metadata.reflection = eo_redbag_log_notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int go_patrol_hire_log_notify::kRoleUidFieldNumber;
const int go_patrol_hire_log_notify::kBeginTimeFieldNumber;
const int go_patrol_hire_log_notify::kEndTimeFieldNumber;
const int go_patrol_hire_log_notify::kCountFieldNumber;
const int go_patrol_hire_log_notify::kTotalExpFieldNumber;
const int go_patrol_hire_log_notify::kUseMultiPointFieldNumber;
const int go_patrol_hire_log_notify::kMapIdFieldNumber;
const int go_patrol_hire_log_notify::kSourceTypeFieldNumber;
const int go_patrol_hire_log_notify::kLogTimeFieldNumber;
#endif  // !_MSC_VER

go_patrol_hire_log_notify::go_patrol_hire_log_notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void go_patrol_hire_log_notify::InitAsDefaultInstance() {
}

go_patrol_hire_log_notify::go_patrol_hire_log_notify(const go_patrol_hire_log_notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void go_patrol_hire_log_notify::SharedCtor() {
  _cached_size_ = 0;
  role_uid_ = GOOGLE_ULONGLONG(0);
  begin_time_ = 0u;
  end_time_ = 0u;
  count_ = 0u;
  total_exp_ = 0u;
  use_multi_point_ = 0u;
  map_id_ = 0u;
  source_type_ = 0u;
  log_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

go_patrol_hire_log_notify::~go_patrol_hire_log_notify() {
  SharedDtor();
}

void go_patrol_hire_log_notify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void go_patrol_hire_log_notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* go_patrol_hire_log_notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return go_patrol_hire_log_notify_descriptor_;
}

const go_patrol_hire_log_notify& go_patrol_hire_log_notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_log_2eproto();
  return *default_instance_;
}

go_patrol_hire_log_notify* go_patrol_hire_log_notify::default_instance_ = NULL;

go_patrol_hire_log_notify* go_patrol_hire_log_notify::New() const {
  return new go_patrol_hire_log_notify;
}

void go_patrol_hire_log_notify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_uid_ = GOOGLE_ULONGLONG(0);
    begin_time_ = 0u;
    end_time_ = 0u;
    count_ = 0u;
    total_exp_ = 0u;
    use_multi_point_ = 0u;
    map_id_ = 0u;
    source_type_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    log_time_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool go_patrol_hire_log_notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 role_uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_uid_)));
          set_has_role_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_begin_time;
        break;
      }

      // optional uint32 begin_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_begin_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &begin_time_)));
          set_has_begin_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_end_time;
        break;
      }

      // optional uint32 end_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_end_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &end_time_)));
          set_has_end_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_count;
        break;
      }

      // optional uint32 count = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_total_exp;
        break;
      }

      // optional uint32 total_exp = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_exp_)));
          set_has_total_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_use_multi_point;
        break;
      }

      // optional uint32 use_multi_point = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_use_multi_point:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &use_multi_point_)));
          set_has_use_multi_point();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_map_id;
        break;
      }

      // optional uint32 map_id = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_map_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &map_id_)));
          set_has_map_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_source_type;
        break;
      }

      // optional uint32 source_type = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_source_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &source_type_)));
          set_has_source_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_log_time;
        break;
      }

      // optional uint32 log_time = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_log_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &log_time_)));
          set_has_log_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void go_patrol_hire_log_notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 role_uid = 1;
  if (has_role_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->role_uid(), output);
  }

  // optional uint32 begin_time = 2;
  if (has_begin_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->begin_time(), output);
  }

  // optional uint32 end_time = 3;
  if (has_end_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->end_time(), output);
  }

  // optional uint32 count = 4;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->count(), output);
  }

  // optional uint32 total_exp = 5;
  if (has_total_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->total_exp(), output);
  }

  // optional uint32 use_multi_point = 6;
  if (has_use_multi_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->use_multi_point(), output);
  }

  // optional uint32 map_id = 7;
  if (has_map_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->map_id(), output);
  }

  // optional uint32 source_type = 8;
  if (has_source_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->source_type(), output);
  }

  // optional uint32 log_time = 9;
  if (has_log_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->log_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* go_patrol_hire_log_notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 role_uid = 1;
  if (has_role_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->role_uid(), target);
  }

  // optional uint32 begin_time = 2;
  if (has_begin_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->begin_time(), target);
  }

  // optional uint32 end_time = 3;
  if (has_end_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->end_time(), target);
  }

  // optional uint32 count = 4;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->count(), target);
  }

  // optional uint32 total_exp = 5;
  if (has_total_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->total_exp(), target);
  }

  // optional uint32 use_multi_point = 6;
  if (has_use_multi_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->use_multi_point(), target);
  }

  // optional uint32 map_id = 7;
  if (has_map_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->map_id(), target);
  }

  // optional uint32 source_type = 8;
  if (has_source_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->source_type(), target);
  }

  // optional uint32 log_time = 9;
  if (has_log_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->log_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int go_patrol_hire_log_notify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 role_uid = 1;
    if (has_role_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_uid());
    }

    // optional uint32 begin_time = 2;
    if (has_begin_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->begin_time());
    }

    // optional uint32 end_time = 3;
    if (has_end_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->end_time());
    }

    // optional uint32 count = 4;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

    // optional uint32 total_exp = 5;
    if (has_total_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->total_exp());
    }

    // optional uint32 use_multi_point = 6;
    if (has_use_multi_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->use_multi_point());
    }

    // optional uint32 map_id = 7;
    if (has_map_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->map_id());
    }

    // optional uint32 source_type = 8;
    if (has_source_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->source_type());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 log_time = 9;
    if (has_log_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->log_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void go_patrol_hire_log_notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const go_patrol_hire_log_notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const go_patrol_hire_log_notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void go_patrol_hire_log_notify::MergeFrom(const go_patrol_hire_log_notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_uid()) {
      set_role_uid(from.role_uid());
    }
    if (from.has_begin_time()) {
      set_begin_time(from.begin_time());
    }
    if (from.has_end_time()) {
      set_end_time(from.end_time());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_total_exp()) {
      set_total_exp(from.total_exp());
    }
    if (from.has_use_multi_point()) {
      set_use_multi_point(from.use_multi_point());
    }
    if (from.has_map_id()) {
      set_map_id(from.map_id());
    }
    if (from.has_source_type()) {
      set_source_type(from.source_type());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_log_time()) {
      set_log_time(from.log_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void go_patrol_hire_log_notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void go_patrol_hire_log_notify::CopyFrom(const go_patrol_hire_log_notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool go_patrol_hire_log_notify::IsInitialized() const {

  return true;
}

void go_patrol_hire_log_notify::Swap(go_patrol_hire_log_notify* other) {
  if (other != this) {
    std::swap(role_uid_, other->role_uid_);
    std::swap(begin_time_, other->begin_time_);
    std::swap(end_time_, other->end_time_);
    std::swap(count_, other->count_);
    std::swap(total_exp_, other->total_exp_);
    std::swap(use_multi_point_, other->use_multi_point_);
    std::swap(map_id_, other->map_id_);
    std::swap(source_type_, other->source_type_);
    std::swap(log_time_, other->log_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata go_patrol_hire_log_notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = go_patrol_hire_log_notify_descriptor_;
  metadata.reflection = go_patrol_hire_log_notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int eo_offline_arena_rank_log_notify::kRoleUidFieldNumber;
const int eo_offline_arena_rank_log_notify::kRoleNameFieldNumber;
const int eo_offline_arena_rank_log_notify::kRoleLevelFieldNumber;
const int eo_offline_arena_rank_log_notify::kOpTypeFieldNumber;
const int eo_offline_arena_rank_log_notify::kOldClassFieldNumber;
const int eo_offline_arena_rank_log_notify::kOldRankFieldNumber;
const int eo_offline_arena_rank_log_notify::kNewClassFieldNumber;
const int eo_offline_arena_rank_log_notify::kNewRankFieldNumber;
const int eo_offline_arena_rank_log_notify::kLogTimeFieldNumber;
#endif  // !_MSC_VER

eo_offline_arena_rank_log_notify::eo_offline_arena_rank_log_notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void eo_offline_arena_rank_log_notify::InitAsDefaultInstance() {
}

eo_offline_arena_rank_log_notify::eo_offline_arena_rank_log_notify(const eo_offline_arena_rank_log_notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void eo_offline_arena_rank_log_notify::SharedCtor() {
  _cached_size_ = 0;
  role_uid_ = GOOGLE_ULONGLONG(0);
  role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  role_level_ = 0u;
  op_type_ = 0u;
  old_class_ = 0u;
  old_rank_ = 0u;
  new_class_ = 0u;
  new_rank_ = 0u;
  log_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

eo_offline_arena_rank_log_notify::~eo_offline_arena_rank_log_notify() {
  SharedDtor();
}

void eo_offline_arena_rank_log_notify::SharedDtor() {
  if (role_name_ != &::google::protobuf::internal::kEmptyString) {
    delete role_name_;
  }
  if (this != default_instance_) {
  }
}

void eo_offline_arena_rank_log_notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* eo_offline_arena_rank_log_notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return eo_offline_arena_rank_log_notify_descriptor_;
}

const eo_offline_arena_rank_log_notify& eo_offline_arena_rank_log_notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_log_2eproto();
  return *default_instance_;
}

eo_offline_arena_rank_log_notify* eo_offline_arena_rank_log_notify::default_instance_ = NULL;

eo_offline_arena_rank_log_notify* eo_offline_arena_rank_log_notify::New() const {
  return new eo_offline_arena_rank_log_notify;
}

void eo_offline_arena_rank_log_notify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_uid_ = GOOGLE_ULONGLONG(0);
    if (has_role_name()) {
      if (role_name_ != &::google::protobuf::internal::kEmptyString) {
        role_name_->clear();
      }
    }
    role_level_ = 0u;
    op_type_ = 0u;
    old_class_ = 0u;
    old_rank_ = 0u;
    new_class_ = 0u;
    new_rank_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    log_time_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool eo_offline_arena_rank_log_notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 role_uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_uid_)));
          set_has_role_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_role_name;
        break;
      }

      // optional string role_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_role_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_role_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->role_name().data(), this->role_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_role_level;
        break;
      }

      // optional uint32 role_level = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_level_)));
          set_has_role_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_op_type;
        break;
      }

      // optional uint32 op_type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_op_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &op_type_)));
          set_has_op_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_old_class;
        break;
      }

      // optional uint32 old_class = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_old_class:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &old_class_)));
          set_has_old_class();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_old_rank;
        break;
      }

      // optional uint32 old_rank = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_old_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &old_rank_)));
          set_has_old_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_new_class;
        break;
      }

      // optional uint32 new_class = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_new_class:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &new_class_)));
          set_has_new_class();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_new_rank;
        break;
      }

      // optional uint32 new_rank = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_new_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &new_rank_)));
          set_has_new_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_log_time;
        break;
      }

      // optional uint32 log_time = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_log_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &log_time_)));
          set_has_log_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void eo_offline_arena_rank_log_notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 role_uid = 1;
  if (has_role_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->role_uid(), output);
  }

  // optional string role_name = 2;
  if (has_role_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_name().data(), this->role_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->role_name(), output);
  }

  // optional uint32 role_level = 3;
  if (has_role_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->role_level(), output);
  }

  // optional uint32 op_type = 4;
  if (has_op_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->op_type(), output);
  }

  // optional uint32 old_class = 5;
  if (has_old_class()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->old_class(), output);
  }

  // optional uint32 old_rank = 6;
  if (has_old_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->old_rank(), output);
  }

  // optional uint32 new_class = 7;
  if (has_new_class()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->new_class(), output);
  }

  // optional uint32 new_rank = 8;
  if (has_new_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->new_rank(), output);
  }

  // optional uint32 log_time = 9;
  if (has_log_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->log_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* eo_offline_arena_rank_log_notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 role_uid = 1;
  if (has_role_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->role_uid(), target);
  }

  // optional string role_name = 2;
  if (has_role_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_name().data(), this->role_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->role_name(), target);
  }

  // optional uint32 role_level = 3;
  if (has_role_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->role_level(), target);
  }

  // optional uint32 op_type = 4;
  if (has_op_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->op_type(), target);
  }

  // optional uint32 old_class = 5;
  if (has_old_class()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->old_class(), target);
  }

  // optional uint32 old_rank = 6;
  if (has_old_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->old_rank(), target);
  }

  // optional uint32 new_class = 7;
  if (has_new_class()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->new_class(), target);
  }

  // optional uint32 new_rank = 8;
  if (has_new_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->new_rank(), target);
  }

  // optional uint32 log_time = 9;
  if (has_log_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->log_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int eo_offline_arena_rank_log_notify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 role_uid = 1;
    if (has_role_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_uid());
    }

    // optional string role_name = 2;
    if (has_role_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->role_name());
    }

    // optional uint32 role_level = 3;
    if (has_role_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->role_level());
    }

    // optional uint32 op_type = 4;
    if (has_op_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->op_type());
    }

    // optional uint32 old_class = 5;
    if (has_old_class()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->old_class());
    }

    // optional uint32 old_rank = 6;
    if (has_old_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->old_rank());
    }

    // optional uint32 new_class = 7;
    if (has_new_class()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->new_class());
    }

    // optional uint32 new_rank = 8;
    if (has_new_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->new_rank());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 log_time = 9;
    if (has_log_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->log_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void eo_offline_arena_rank_log_notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const eo_offline_arena_rank_log_notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const eo_offline_arena_rank_log_notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void eo_offline_arena_rank_log_notify::MergeFrom(const eo_offline_arena_rank_log_notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_uid()) {
      set_role_uid(from.role_uid());
    }
    if (from.has_role_name()) {
      set_role_name(from.role_name());
    }
    if (from.has_role_level()) {
      set_role_level(from.role_level());
    }
    if (from.has_op_type()) {
      set_op_type(from.op_type());
    }
    if (from.has_old_class()) {
      set_old_class(from.old_class());
    }
    if (from.has_old_rank()) {
      set_old_rank(from.old_rank());
    }
    if (from.has_new_class()) {
      set_new_class(from.new_class());
    }
    if (from.has_new_rank()) {
      set_new_rank(from.new_rank());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_log_time()) {
      set_log_time(from.log_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void eo_offline_arena_rank_log_notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void eo_offline_arena_rank_log_notify::CopyFrom(const eo_offline_arena_rank_log_notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool eo_offline_arena_rank_log_notify::IsInitialized() const {

  return true;
}

void eo_offline_arena_rank_log_notify::Swap(eo_offline_arena_rank_log_notify* other) {
  if (other != this) {
    std::swap(role_uid_, other->role_uid_);
    std::swap(role_name_, other->role_name_);
    std::swap(role_level_, other->role_level_);
    std::swap(op_type_, other->op_type_);
    std::swap(old_class_, other->old_class_);
    std::swap(old_rank_, other->old_rank_);
    std::swap(new_class_, other->new_class_);
    std::swap(new_rank_, other->new_rank_);
    std::swap(log_time_, other->log_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata eo_offline_arena_rank_log_notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = eo_offline_arena_rank_log_notify_descriptor_;
  metadata.reflection = eo_offline_arena_rank_log_notify_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace log
}  // namespace proto

// @@protoc_insertion_point(global_scope)
