// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Garrison.proto

#ifndef PROTOBUF_Garrison_2eproto__INCLUDED
#define PROTOBUF_Garrison_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace Hades {
namespace Data {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Garrison_2eproto();
void protobuf_AssignDesc_Garrison_2eproto();
void protobuf_ShutdownFile_Garrison_2eproto();

class Garrison;
class MD5OfGarrison;

// ===================================================================

class Garrison : public ::google::protobuf::Message {
 public:
  Garrison();
  virtual ~Garrison();

  Garrison(const Garrison& from);

  inline Garrison& operator=(const Garrison& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Garrison& default_instance();

  void Swap(Garrison* other);

  // implements Message ----------------------------------------------

  Garrison* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Garrison& from);
  void MergeFrom(const Garrison& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // repeated int32 clear_city = 2;
  inline int clear_city_size() const;
  inline void clear_clear_city();
  static const int kClearCityFieldNumber = 2;
  inline ::google::protobuf::int32 clear_city(int index) const;
  inline void set_clear_city(int index, ::google::protobuf::int32 value);
  inline void add_clear_city(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      clear_city() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_clear_city();

  // optional string garrison_desc = 3;
  inline bool has_garrison_desc() const;
  inline void clear_garrison_desc();
  static const int kGarrisonDescFieldNumber = 3;
  inline const ::std::string& garrison_desc() const;
  inline void set_garrison_desc(const ::std::string& value);
  inline void set_garrison_desc(const char* value);
  inline void set_garrison_desc(const char* value, size_t size);
  inline ::std::string* mutable_garrison_desc();
  inline ::std::string* release_garrison_desc();
  inline void set_allocated_garrison_desc(::std::string* garrison_desc);

  // optional int32 task = 4;
  inline bool has_task() const;
  inline void clear_task();
  static const int kTaskFieldNumber = 4;
  inline ::google::protobuf::int32 task() const;
  inline void set_task(::google::protobuf::int32 value);

  // optional string record = 5;
  inline bool has_record() const;
  inline void clear_record();
  static const int kRecordFieldNumber = 5;
  inline const ::std::string& record() const;
  inline void set_record(const ::std::string& value);
  inline void set_record(const char* value);
  inline void set_record(const char* value, size_t size);
  inline ::std::string* mutable_record();
  inline ::std::string* release_record();
  inline void set_allocated_record(::std::string* record);

  // @@protoc_insertion_point(class_scope:Hades.Data.Garrison)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_garrison_desc();
  inline void clear_has_garrison_desc();
  inline void set_has_task();
  inline void clear_has_task();
  inline void set_has_record();
  inline void clear_has_record();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > clear_city_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 task_;
  ::std::string* garrison_desc_;
  ::std::string* record_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_Garrison_2eproto();
  friend void protobuf_AssignDesc_Garrison_2eproto();
  friend void protobuf_ShutdownFile_Garrison_2eproto();

  void InitAsDefaultInstance();
  static Garrison* default_instance_;
};
// -------------------------------------------------------------------

class MD5OfGarrison : public ::google::protobuf::Message {
 public:
  MD5OfGarrison();
  virtual ~MD5OfGarrison();

  MD5OfGarrison(const MD5OfGarrison& from);

  inline MD5OfGarrison& operator=(const MD5OfGarrison& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MD5OfGarrison& default_instance();

  void Swap(MD5OfGarrison* other);

  // implements Message ----------------------------------------------

  MD5OfGarrison* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MD5OfGarrison& from);
  void MergeFrom(const MD5OfGarrison& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string val = 1 [default = "9EDBBEAB6E21A714766A3C72AD3AA691"];
  inline bool has_val() const;
  inline void clear_val();
  static const int kValFieldNumber = 1;
  inline const ::std::string& val() const;
  inline void set_val(const ::std::string& value);
  inline void set_val(const char* value);
  inline void set_val(const char* value, size_t size);
  inline ::std::string* mutable_val();
  inline ::std::string* release_val();
  inline void set_allocated_val(::std::string* val);

  // @@protoc_insertion_point(class_scope:Hades.Data.MD5OfGarrison)
 private:
  inline void set_has_val();
  inline void clear_has_val();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* val_;
  static ::std::string* _default_val_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Garrison_2eproto();
  friend void protobuf_AssignDesc_Garrison_2eproto();
  friend void protobuf_ShutdownFile_Garrison_2eproto();

  void InitAsDefaultInstance();
  static MD5OfGarrison* default_instance_;
};
// ===================================================================


// ===================================================================

// Garrison

// optional int32 id = 1;
inline bool Garrison::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Garrison::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Garrison::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Garrison::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 Garrison::id() const {
  return id_;
}
inline void Garrison::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// repeated int32 clear_city = 2;
inline int Garrison::clear_city_size() const {
  return clear_city_.size();
}
inline void Garrison::clear_clear_city() {
  clear_city_.Clear();
}
inline ::google::protobuf::int32 Garrison::clear_city(int index) const {
  return clear_city_.Get(index);
}
inline void Garrison::set_clear_city(int index, ::google::protobuf::int32 value) {
  clear_city_.Set(index, value);
}
inline void Garrison::add_clear_city(::google::protobuf::int32 value) {
  clear_city_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Garrison::clear_city() const {
  return clear_city_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Garrison::mutable_clear_city() {
  return &clear_city_;
}

// optional string garrison_desc = 3;
inline bool Garrison::has_garrison_desc() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Garrison::set_has_garrison_desc() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Garrison::clear_has_garrison_desc() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Garrison::clear_garrison_desc() {
  if (garrison_desc_ != &::google::protobuf::internal::kEmptyString) {
    garrison_desc_->clear();
  }
  clear_has_garrison_desc();
}
inline const ::std::string& Garrison::garrison_desc() const {
  return *garrison_desc_;
}
inline void Garrison::set_garrison_desc(const ::std::string& value) {
  set_has_garrison_desc();
  if (garrison_desc_ == &::google::protobuf::internal::kEmptyString) {
    garrison_desc_ = new ::std::string;
  }
  garrison_desc_->assign(value);
}
inline void Garrison::set_garrison_desc(const char* value) {
  set_has_garrison_desc();
  if (garrison_desc_ == &::google::protobuf::internal::kEmptyString) {
    garrison_desc_ = new ::std::string;
  }
  garrison_desc_->assign(value);
}
inline void Garrison::set_garrison_desc(const char* value, size_t size) {
  set_has_garrison_desc();
  if (garrison_desc_ == &::google::protobuf::internal::kEmptyString) {
    garrison_desc_ = new ::std::string;
  }
  garrison_desc_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Garrison::mutable_garrison_desc() {
  set_has_garrison_desc();
  if (garrison_desc_ == &::google::protobuf::internal::kEmptyString) {
    garrison_desc_ = new ::std::string;
  }
  return garrison_desc_;
}
inline ::std::string* Garrison::release_garrison_desc() {
  clear_has_garrison_desc();
  if (garrison_desc_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = garrison_desc_;
    garrison_desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Garrison::set_allocated_garrison_desc(::std::string* garrison_desc) {
  if (garrison_desc_ != &::google::protobuf::internal::kEmptyString) {
    delete garrison_desc_;
  }
  if (garrison_desc) {
    set_has_garrison_desc();
    garrison_desc_ = garrison_desc;
  } else {
    clear_has_garrison_desc();
    garrison_desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 task = 4;
inline bool Garrison::has_task() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Garrison::set_has_task() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Garrison::clear_has_task() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Garrison::clear_task() {
  task_ = 0;
  clear_has_task();
}
inline ::google::protobuf::int32 Garrison::task() const {
  return task_;
}
inline void Garrison::set_task(::google::protobuf::int32 value) {
  set_has_task();
  task_ = value;
}

// optional string record = 5;
inline bool Garrison::has_record() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Garrison::set_has_record() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Garrison::clear_has_record() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Garrison::clear_record() {
  if (record_ != &::google::protobuf::internal::kEmptyString) {
    record_->clear();
  }
  clear_has_record();
}
inline const ::std::string& Garrison::record() const {
  return *record_;
}
inline void Garrison::set_record(const ::std::string& value) {
  set_has_record();
  if (record_ == &::google::protobuf::internal::kEmptyString) {
    record_ = new ::std::string;
  }
  record_->assign(value);
}
inline void Garrison::set_record(const char* value) {
  set_has_record();
  if (record_ == &::google::protobuf::internal::kEmptyString) {
    record_ = new ::std::string;
  }
  record_->assign(value);
}
inline void Garrison::set_record(const char* value, size_t size) {
  set_has_record();
  if (record_ == &::google::protobuf::internal::kEmptyString) {
    record_ = new ::std::string;
  }
  record_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Garrison::mutable_record() {
  set_has_record();
  if (record_ == &::google::protobuf::internal::kEmptyString) {
    record_ = new ::std::string;
  }
  return record_;
}
inline ::std::string* Garrison::release_record() {
  clear_has_record();
  if (record_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = record_;
    record_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Garrison::set_allocated_record(::std::string* record) {
  if (record_ != &::google::protobuf::internal::kEmptyString) {
    delete record_;
  }
  if (record) {
    set_has_record();
    record_ = record;
  } else {
    clear_has_record();
    record_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// MD5OfGarrison

// optional string val = 1 [default = "9EDBBEAB6E21A714766A3C72AD3AA691"];
inline bool MD5OfGarrison::has_val() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MD5OfGarrison::set_has_val() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MD5OfGarrison::clear_has_val() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MD5OfGarrison::clear_val() {
  if (val_ != _default_val_) {
    val_->assign(*_default_val_);
  }
  clear_has_val();
}
inline const ::std::string& MD5OfGarrison::val() const {
  return *val_;
}
inline void MD5OfGarrison::set_val(const ::std::string& value) {
  set_has_val();
  if (val_ == _default_val_) {
    val_ = new ::std::string;
  }
  val_->assign(value);
}
inline void MD5OfGarrison::set_val(const char* value) {
  set_has_val();
  if (val_ == _default_val_) {
    val_ = new ::std::string;
  }
  val_->assign(value);
}
inline void MD5OfGarrison::set_val(const char* value, size_t size) {
  set_has_val();
  if (val_ == _default_val_) {
    val_ = new ::std::string;
  }
  val_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MD5OfGarrison::mutable_val() {
  set_has_val();
  if (val_ == _default_val_) {
    val_ = new ::std::string(*_default_val_);
  }
  return val_;
}
inline ::std::string* MD5OfGarrison::release_val() {
  clear_has_val();
  if (val_ == _default_val_) {
    return NULL;
  } else {
    ::std::string* temp = val_;
    val_ = const_cast< ::std::string*>(_default_val_);
    return temp;
  }
}
inline void MD5OfGarrison::set_allocated_val(::std::string* val) {
  if (val_ != _default_val_) {
    delete val_;
  }
  if (val) {
    set_has_val();
    val_ = val;
  } else {
    clear_has_val();
    val_ = const_cast< ::std::string*>(_default_val_);
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Data
}  // namespace Hades

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Garrison_2eproto__INCLUDED
