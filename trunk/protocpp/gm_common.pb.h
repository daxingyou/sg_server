// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gm_common.proto

#ifndef PROTOBUF_gm_5fcommon_2eproto__INCLUDED
#define PROTOBUF_gm_5fcommon_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace proto {
namespace gm_common {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_gm_5fcommon_2eproto();
void protobuf_AssignDesc_gm_5fcommon_2eproto();
void protobuf_ShutdownFile_gm_5fcommon_2eproto();

class user_base_info;
class recharge_count_info;
class recharge_single;
class consume_record_data;
class consume_record_single;
class item_data;
class item_single;
class hero_data;
class hero_single;
class skill_data;
class skill_single;
class wear_equip_data;
class wear_equip_single;
class equip_data;
class equip_single;
class campaign_data;
class campaign_single;
class matrix_data;
class matrix_single;
class produce_data;
class produce_single;
class manage_reply_single;
class global_mail_single;
class mail_recv_limit;
class ban_state_info;
class sign_record_single;
class draw_record_single;
class buy_record_single;
class shop_record_single;
class gm_notice_single;

// ===================================================================

class user_base_info : public ::google::protobuf::Message {
 public:
  user_base_info();
  virtual ~user_base_info();

  user_base_info(const user_base_info& from);

  inline user_base_info& operator=(const user_base_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const user_base_info& default_instance();

  void Swap(user_base_info* other);

  // implements Message ----------------------------------------------

  user_base_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const user_base_info& from);
  void MergeFrom(const user_base_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional uint32 level = 2;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 2;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // optional uint32 exp = 3;
  inline bool has_exp() const;
  inline void clear_exp();
  static const int kExpFieldNumber = 3;
  inline ::google::protobuf::uint32 exp() const;
  inline void set_exp(::google::protobuf::uint32 value);

  // optional uint32 gold = 4;
  inline bool has_gold() const;
  inline void clear_gold();
  static const int kGoldFieldNumber = 4;
  inline ::google::protobuf::uint32 gold() const;
  inline void set_gold(::google::protobuf::uint32 value);

  // optional uint32 free_diamond = 5;
  inline bool has_free_diamond() const;
  inline void clear_free_diamond();
  static const int kFreeDiamondFieldNumber = 5;
  inline ::google::protobuf::uint32 free_diamond() const;
  inline void set_free_diamond(::google::protobuf::uint32 value);

  // optional uint32 paid_diamond = 6;
  inline bool has_paid_diamond() const;
  inline void clear_paid_diamond();
  static const int kPaidDiamondFieldNumber = 6;
  inline ::google::protobuf::uint32 paid_diamond() const;
  inline void set_paid_diamond(::google::protobuf::uint32 value);

  // optional uint32 ap = 7;
  inline bool has_ap() const;
  inline void clear_ap();
  static const int kApFieldNumber = 7;
  inline ::google::protobuf::uint32 ap() const;
  inline void set_ap(::google::protobuf::uint32 value);

  // optional uint32 vip_level = 8;
  inline bool has_vip_level() const;
  inline void clear_vip_level();
  static const int kVipLevelFieldNumber = 8;
  inline ::google::protobuf::uint32 vip_level() const;
  inline void set_vip_level(::google::protobuf::uint32 value);

  // optional uint32 vip_exp = 9;
  inline bool has_vip_exp() const;
  inline void clear_vip_exp();
  static const int kVipExpFieldNumber = 9;
  inline ::google::protobuf::uint32 vip_exp() const;
  inline void set_vip_exp(::google::protobuf::uint32 value);

  // optional uint32 create_time = 10;
  inline bool has_create_time() const;
  inline void clear_create_time();
  static const int kCreateTimeFieldNumber = 10;
  inline ::google::protobuf::uint32 create_time() const;
  inline void set_create_time(::google::protobuf::uint32 value);

  // optional uint32 last_login_time = 11;
  inline bool has_last_login_time() const;
  inline void clear_last_login_time();
  static const int kLastLoginTimeFieldNumber = 11;
  inline ::google::protobuf::uint32 last_login_time() const;
  inline void set_last_login_time(::google::protobuf::uint32 value);

  // optional uint64 user_uid = 12;
  inline bool has_user_uid() const;
  inline void clear_user_uid();
  static const int kUserUidFieldNumber = 12;
  inline ::google::protobuf::uint64 user_uid() const;
  inline void set_user_uid(::google::protobuf::uint64 value);

  // optional uint32 skill_point = 13;
  inline bool has_skill_point() const;
  inline void clear_skill_point();
  static const int kSkillPointFieldNumber = 13;
  inline ::google::protobuf::uint32 skill_point() const;
  inline void set_skill_point(::google::protobuf::uint32 value);

  // optional uint32 pve_badge = 14;
  inline bool has_pve_badge() const;
  inline void clear_pve_badge();
  static const int kPveBadgeFieldNumber = 14;
  inline ::google::protobuf::uint32 pve_badge() const;
  inline void set_pve_badge(::google::protobuf::uint32 value);

  // optional uint32 pvp_badge = 15;
  inline bool has_pvp_badge() const;
  inline void clear_pvp_badge();
  static const int kPvpBadgeFieldNumber = 15;
  inline ::google::protobuf::uint32 pvp_badge() const;
  inline void set_pvp_badge(::google::protobuf::uint32 value);

  // optional uint32 fate = 16;
  inline bool has_fate() const;
  inline void clear_fate();
  static const int kFateFieldNumber = 16;
  inline ::google::protobuf::uint32 fate() const;
  inline void set_fate(::google::protobuf::uint32 value);

  // optional uint32 account_idx = 17;
  inline bool has_account_idx() const;
  inline void clear_account_idx();
  static const int kAccountIdxFieldNumber = 17;
  inline ::google::protobuf::uint32 account_idx() const;
  inline void set_account_idx(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.gm_common.user_base_info)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_exp();
  inline void clear_has_exp();
  inline void set_has_gold();
  inline void clear_has_gold();
  inline void set_has_free_diamond();
  inline void clear_has_free_diamond();
  inline void set_has_paid_diamond();
  inline void clear_has_paid_diamond();
  inline void set_has_ap();
  inline void clear_has_ap();
  inline void set_has_vip_level();
  inline void clear_has_vip_level();
  inline void set_has_vip_exp();
  inline void clear_has_vip_exp();
  inline void set_has_create_time();
  inline void clear_has_create_time();
  inline void set_has_last_login_time();
  inline void clear_has_last_login_time();
  inline void set_has_user_uid();
  inline void clear_has_user_uid();
  inline void set_has_skill_point();
  inline void clear_has_skill_point();
  inline void set_has_pve_badge();
  inline void clear_has_pve_badge();
  inline void set_has_pvp_badge();
  inline void clear_has_pvp_badge();
  inline void set_has_fate();
  inline void clear_has_fate();
  inline void set_has_account_idx();
  inline void clear_has_account_idx();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::uint32 level_;
  ::google::protobuf::uint32 exp_;
  ::google::protobuf::uint32 gold_;
  ::google::protobuf::uint32 free_diamond_;
  ::google::protobuf::uint32 paid_diamond_;
  ::google::protobuf::uint32 ap_;
  ::google::protobuf::uint32 vip_level_;
  ::google::protobuf::uint32 vip_exp_;
  ::google::protobuf::uint32 create_time_;
  ::google::protobuf::uint32 last_login_time_;
  ::google::protobuf::uint64 user_uid_;
  ::google::protobuf::uint32 skill_point_;
  ::google::protobuf::uint32 pve_badge_;
  ::google::protobuf::uint32 pvp_badge_;
  ::google::protobuf::uint32 fate_;
  ::google::protobuf::uint32 account_idx_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(17 + 31) / 32];

  friend void  protobuf_AddDesc_gm_5fcommon_2eproto();
  friend void protobuf_AssignDesc_gm_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_gm_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static user_base_info* default_instance_;
};
// -------------------------------------------------------------------

class recharge_count_info : public ::google::protobuf::Message {
 public:
  recharge_count_info();
  virtual ~recharge_count_info();

  recharge_count_info(const recharge_count_info& from);

  inline recharge_count_info& operator=(const recharge_count_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const recharge_count_info& default_instance();

  void Swap(recharge_count_info* other);

  // implements Message ----------------------------------------------

  recharge_count_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const recharge_count_info& from);
  void MergeFrom(const recharge_count_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto.gm_common.recharge_single recharge_list = 1;
  inline int recharge_list_size() const;
  inline void clear_recharge_list();
  static const int kRechargeListFieldNumber = 1;
  inline const ::proto::gm_common::recharge_single& recharge_list(int index) const;
  inline ::proto::gm_common::recharge_single* mutable_recharge_list(int index);
  inline ::proto::gm_common::recharge_single* add_recharge_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto::gm_common::recharge_single >&
      recharge_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto::gm_common::recharge_single >*
      mutable_recharge_list();

  // @@protoc_insertion_point(class_scope:proto.gm_common.recharge_count_info)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto::gm_common::recharge_single > recharge_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_gm_5fcommon_2eproto();
  friend void protobuf_AssignDesc_gm_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_gm_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static recharge_count_info* default_instance_;
};
// -------------------------------------------------------------------

class recharge_single : public ::google::protobuf::Message {
 public:
  recharge_single();
  virtual ~recharge_single();

  recharge_single(const recharge_single& from);

  inline recharge_single& operator=(const recharge_single& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const recharge_single& default_instance();

  void Swap(recharge_single* other);

  // implements Message ----------------------------------------------

  recharge_single* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const recharge_single& from);
  void MergeFrom(const recharge_single& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 rmb = 1;
  inline bool has_rmb() const;
  inline void clear_rmb();
  static const int kRmbFieldNumber = 1;
  inline ::google::protobuf::uint32 rmb() const;
  inline void set_rmb(::google::protobuf::uint32 value);

  // optional uint32 paid_diamond = 2;
  inline bool has_paid_diamond() const;
  inline void clear_paid_diamond();
  static const int kPaidDiamondFieldNumber = 2;
  inline ::google::protobuf::uint32 paid_diamond() const;
  inline void set_paid_diamond(::google::protobuf::uint32 value);

  // optional uint32 free_diamond = 3;
  inline bool has_free_diamond() const;
  inline void clear_free_diamond();
  static const int kFreeDiamondFieldNumber = 3;
  inline ::google::protobuf::uint32 free_diamond() const;
  inline void set_free_diamond(::google::protobuf::uint32 value);

  // optional uint32 recharge_time = 4;
  inline bool has_recharge_time() const;
  inline void clear_recharge_time();
  static const int kRechargeTimeFieldNumber = 4;
  inline ::google::protobuf::uint32 recharge_time() const;
  inline void set_recharge_time(::google::protobuf::uint32 value);

  // optional string order_id = 5;
  inline bool has_order_id() const;
  inline void clear_order_id();
  static const int kOrderIdFieldNumber = 5;
  inline const ::std::string& order_id() const;
  inline void set_order_id(const ::std::string& value);
  inline void set_order_id(const char* value);
  inline void set_order_id(const char* value, size_t size);
  inline ::std::string* mutable_order_id();
  inline ::std::string* release_order_id();
  inline void set_allocated_order_id(::std::string* order_id);

  // optional string channel = 6;
  inline bool has_channel() const;
  inline void clear_channel();
  static const int kChannelFieldNumber = 6;
  inline const ::std::string& channel() const;
  inline void set_channel(const ::std::string& value);
  inline void set_channel(const char* value);
  inline void set_channel(const char* value, size_t size);
  inline ::std::string* mutable_channel();
  inline ::std::string* release_channel();
  inline void set_allocated_channel(::std::string* channel);

  // @@protoc_insertion_point(class_scope:proto.gm_common.recharge_single)
 private:
  inline void set_has_rmb();
  inline void clear_has_rmb();
  inline void set_has_paid_diamond();
  inline void clear_has_paid_diamond();
  inline void set_has_free_diamond();
  inline void clear_has_free_diamond();
  inline void set_has_recharge_time();
  inline void clear_has_recharge_time();
  inline void set_has_order_id();
  inline void clear_has_order_id();
  inline void set_has_channel();
  inline void clear_has_channel();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 rmb_;
  ::google::protobuf::uint32 paid_diamond_;
  ::google::protobuf::uint32 free_diamond_;
  ::google::protobuf::uint32 recharge_time_;
  ::std::string* order_id_;
  ::std::string* channel_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_gm_5fcommon_2eproto();
  friend void protobuf_AssignDesc_gm_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_gm_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static recharge_single* default_instance_;
};
// -------------------------------------------------------------------

class consume_record_data : public ::google::protobuf::Message {
 public:
  consume_record_data();
  virtual ~consume_record_data();

  consume_record_data(const consume_record_data& from);

  inline consume_record_data& operator=(const consume_record_data& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const consume_record_data& default_instance();

  void Swap(consume_record_data* other);

  // implements Message ----------------------------------------------

  consume_record_data* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const consume_record_data& from);
  void MergeFrom(const consume_record_data& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto.gm_common.consume_record_single record_list = 1;
  inline int record_list_size() const;
  inline void clear_record_list();
  static const int kRecordListFieldNumber = 1;
  inline const ::proto::gm_common::consume_record_single& record_list(int index) const;
  inline ::proto::gm_common::consume_record_single* mutable_record_list(int index);
  inline ::proto::gm_common::consume_record_single* add_record_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto::gm_common::consume_record_single >&
      record_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto::gm_common::consume_record_single >*
      mutable_record_list();

  // @@protoc_insertion_point(class_scope:proto.gm_common.consume_record_data)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto::gm_common::consume_record_single > record_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_gm_5fcommon_2eproto();
  friend void protobuf_AssignDesc_gm_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_gm_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static consume_record_data* default_instance_;
};
// -------------------------------------------------------------------

class consume_record_single : public ::google::protobuf::Message {
 public:
  consume_record_single();
  virtual ~consume_record_single();

  consume_record_single(const consume_record_single& from);

  inline consume_record_single& operator=(const consume_record_single& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const consume_record_single& default_instance();

  void Swap(consume_record_single* other);

  // implements Message ----------------------------------------------

  consume_record_single* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const consume_record_single& from);
  void MergeFrom(const consume_record_single& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 diamond_type = 1;
  inline bool has_diamond_type() const;
  inline void clear_diamond_type();
  static const int kDiamondTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 diamond_type() const;
  inline void set_diamond_type(::google::protobuf::uint32 value);

  // optional uint32 consume_num = 2;
  inline bool has_consume_num() const;
  inline void clear_consume_num();
  static const int kConsumeNumFieldNumber = 2;
  inline ::google::protobuf::uint32 consume_num() const;
  inline void set_consume_num(::google::protobuf::uint32 value);

  // optional uint32 consume_time = 3;
  inline bool has_consume_time() const;
  inline void clear_consume_time();
  static const int kConsumeTimeFieldNumber = 3;
  inline ::google::protobuf::uint32 consume_time() const;
  inline void set_consume_time(::google::protobuf::uint32 value);

  // optional uint32 type = 4;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 4;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.gm_common.consume_record_single)
 private:
  inline void set_has_diamond_type();
  inline void clear_has_diamond_type();
  inline void set_has_consume_num();
  inline void clear_has_consume_num();
  inline void set_has_consume_time();
  inline void clear_has_consume_time();
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 diamond_type_;
  ::google::protobuf::uint32 consume_num_;
  ::google::protobuf::uint32 consume_time_;
  ::google::protobuf::uint32 type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_gm_5fcommon_2eproto();
  friend void protobuf_AssignDesc_gm_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_gm_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static consume_record_single* default_instance_;
};
// -------------------------------------------------------------------

class item_data : public ::google::protobuf::Message {
 public:
  item_data();
  virtual ~item_data();

  item_data(const item_data& from);

  inline item_data& operator=(const item_data& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const item_data& default_instance();

  void Swap(item_data* other);

  // implements Message ----------------------------------------------

  item_data* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const item_data& from);
  void MergeFrom(const item_data& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto.gm_common.item_single item_list = 1;
  inline int item_list_size() const;
  inline void clear_item_list();
  static const int kItemListFieldNumber = 1;
  inline const ::proto::gm_common::item_single& item_list(int index) const;
  inline ::proto::gm_common::item_single* mutable_item_list(int index);
  inline ::proto::gm_common::item_single* add_item_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto::gm_common::item_single >&
      item_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto::gm_common::item_single >*
      mutable_item_list();

  // @@protoc_insertion_point(class_scope:proto.gm_common.item_data)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto::gm_common::item_single > item_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_gm_5fcommon_2eproto();
  friend void protobuf_AssignDesc_gm_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_gm_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static item_data* default_instance_;
};
// -------------------------------------------------------------------

class item_single : public ::google::protobuf::Message {
 public:
  item_single();
  virtual ~item_single();

  item_single(const item_single& from);

  inline item_single& operator=(const item_single& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const item_single& default_instance();

  void Swap(item_single* other);

  // implements Message ----------------------------------------------

  item_single* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const item_single& from);
  void MergeFrom(const item_single& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline const ::std::string& uid() const;
  inline void set_uid(const ::std::string& value);
  inline void set_uid(const char* value);
  inline void set_uid(const char* value, size_t size);
  inline ::std::string* mutable_uid();
  inline ::std::string* release_uid();
  inline void set_allocated_uid(::std::string* uid);

  // optional uint32 tid = 2;
  inline bool has_tid() const;
  inline void clear_tid();
  static const int kTidFieldNumber = 2;
  inline ::google::protobuf::uint32 tid() const;
  inline void set_tid(::google::protobuf::uint32 value);

  // optional uint32 cur_num = 3;
  inline bool has_cur_num() const;
  inline void clear_cur_num();
  static const int kCurNumFieldNumber = 3;
  inline ::google::protobuf::uint32 cur_num() const;
  inline void set_cur_num(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.gm_common.item_single)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_tid();
  inline void clear_has_tid();
  inline void set_has_cur_num();
  inline void clear_has_cur_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* uid_;
  ::google::protobuf::uint32 tid_;
  ::google::protobuf::uint32 cur_num_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_gm_5fcommon_2eproto();
  friend void protobuf_AssignDesc_gm_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_gm_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static item_single* default_instance_;
};
// -------------------------------------------------------------------

class hero_data : public ::google::protobuf::Message {
 public:
  hero_data();
  virtual ~hero_data();

  hero_data(const hero_data& from);

  inline hero_data& operator=(const hero_data& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const hero_data& default_instance();

  void Swap(hero_data* other);

  // implements Message ----------------------------------------------

  hero_data* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const hero_data& from);
  void MergeFrom(const hero_data& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto.gm_common.hero_single hero_list = 1;
  inline int hero_list_size() const;
  inline void clear_hero_list();
  static const int kHeroListFieldNumber = 1;
  inline const ::proto::gm_common::hero_single& hero_list(int index) const;
  inline ::proto::gm_common::hero_single* mutable_hero_list(int index);
  inline ::proto::gm_common::hero_single* add_hero_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto::gm_common::hero_single >&
      hero_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto::gm_common::hero_single >*
      mutable_hero_list();

  // @@protoc_insertion_point(class_scope:proto.gm_common.hero_data)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto::gm_common::hero_single > hero_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_gm_5fcommon_2eproto();
  friend void protobuf_AssignDesc_gm_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_gm_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static hero_data* default_instance_;
};
// -------------------------------------------------------------------

class hero_single : public ::google::protobuf::Message {
 public:
  hero_single();
  virtual ~hero_single();

  hero_single(const hero_single& from);

  inline hero_single& operator=(const hero_single& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const hero_single& default_instance();

  void Swap(hero_single* other);

  // implements Message ----------------------------------------------

  hero_single* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const hero_single& from);
  void MergeFrom(const hero_single& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline const ::std::string& uid() const;
  inline void set_uid(const ::std::string& value);
  inline void set_uid(const char* value);
  inline void set_uid(const char* value, size_t size);
  inline ::std::string* mutable_uid();
  inline ::std::string* release_uid();
  inline void set_allocated_uid(::std::string* uid);

  // optional uint32 tid = 2;
  inline bool has_tid() const;
  inline void clear_tid();
  static const int kTidFieldNumber = 2;
  inline ::google::protobuf::uint32 tid() const;
  inline void set_tid(::google::protobuf::uint32 value);

  // optional uint32 level = 3;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 3;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // optional uint32 exp = 4;
  inline bool has_exp() const;
  inline void clear_exp();
  static const int kExpFieldNumber = 4;
  inline ::google::protobuf::uint32 exp() const;
  inline void set_exp(::google::protobuf::uint32 value);

  // optional .proto.gm_common.wear_equip_data wear_equip = 5;
  inline bool has_wear_equip() const;
  inline void clear_wear_equip();
  static const int kWearEquipFieldNumber = 5;
  inline const ::proto::gm_common::wear_equip_data& wear_equip() const;
  inline ::proto::gm_common::wear_equip_data* mutable_wear_equip();
  inline ::proto::gm_common::wear_equip_data* release_wear_equip();
  inline void set_allocated_wear_equip(::proto::gm_common::wear_equip_data* wear_equip);

  // optional uint32 hero_fragment_num = 6;
  inline bool has_hero_fragment_num() const;
  inline void clear_hero_fragment_num();
  static const int kHeroFragmentNumFieldNumber = 6;
  inline ::google::protobuf::uint32 hero_fragment_num() const;
  inline void set_hero_fragment_num(::google::protobuf::uint32 value);

  // optional uint32 star_level = 7;
  inline bool has_star_level() const;
  inline void clear_star_level();
  static const int kStarLevelFieldNumber = 7;
  inline ::google::protobuf::uint32 star_level() const;
  inline void set_star_level(::google::protobuf::uint32 value);

  // optional uint32 quality = 8;
  inline bool has_quality() const;
  inline void clear_quality();
  static const int kQualityFieldNumber = 8;
  inline ::google::protobuf::uint32 quality() const;
  inline void set_quality(::google::protobuf::uint32 value);

  // optional .proto.gm_common.skill_data skill = 9;
  inline bool has_skill() const;
  inline void clear_skill();
  static const int kSkillFieldNumber = 9;
  inline const ::proto::gm_common::skill_data& skill() const;
  inline ::proto::gm_common::skill_data* mutable_skill();
  inline ::proto::gm_common::skill_data* release_skill();
  inline void set_allocated_skill(::proto::gm_common::skill_data* skill);

  // @@protoc_insertion_point(class_scope:proto.gm_common.hero_single)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_tid();
  inline void clear_has_tid();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_exp();
  inline void clear_has_exp();
  inline void set_has_wear_equip();
  inline void clear_has_wear_equip();
  inline void set_has_hero_fragment_num();
  inline void clear_has_hero_fragment_num();
  inline void set_has_star_level();
  inline void clear_has_star_level();
  inline void set_has_quality();
  inline void clear_has_quality();
  inline void set_has_skill();
  inline void clear_has_skill();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* uid_;
  ::google::protobuf::uint32 tid_;
  ::google::protobuf::uint32 level_;
  ::proto::gm_common::wear_equip_data* wear_equip_;
  ::google::protobuf::uint32 exp_;
  ::google::protobuf::uint32 hero_fragment_num_;
  ::google::protobuf::uint32 star_level_;
  ::google::protobuf::uint32 quality_;
  ::proto::gm_common::skill_data* skill_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_gm_5fcommon_2eproto();
  friend void protobuf_AssignDesc_gm_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_gm_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static hero_single* default_instance_;
};
// -------------------------------------------------------------------

class skill_data : public ::google::protobuf::Message {
 public:
  skill_data();
  virtual ~skill_data();

  skill_data(const skill_data& from);

  inline skill_data& operator=(const skill_data& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const skill_data& default_instance();

  void Swap(skill_data* other);

  // implements Message ----------------------------------------------

  skill_data* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const skill_data& from);
  void MergeFrom(const skill_data& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto.gm_common.skill_single skill_list = 1;
  inline int skill_list_size() const;
  inline void clear_skill_list();
  static const int kSkillListFieldNumber = 1;
  inline const ::proto::gm_common::skill_single& skill_list(int index) const;
  inline ::proto::gm_common::skill_single* mutable_skill_list(int index);
  inline ::proto::gm_common::skill_single* add_skill_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto::gm_common::skill_single >&
      skill_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto::gm_common::skill_single >*
      mutable_skill_list();

  // @@protoc_insertion_point(class_scope:proto.gm_common.skill_data)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto::gm_common::skill_single > skill_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_gm_5fcommon_2eproto();
  friend void protobuf_AssignDesc_gm_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_gm_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static skill_data* default_instance_;
};
// -------------------------------------------------------------------

class skill_single : public ::google::protobuf::Message {
 public:
  skill_single();
  virtual ~skill_single();

  skill_single(const skill_single& from);

  inline skill_single& operator=(const skill_single& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const skill_single& default_instance();

  void Swap(skill_single* other);

  // implements Message ----------------------------------------------

  skill_single* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const skill_single& from);
  void MergeFrom(const skill_single& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 tid = 1;
  inline bool has_tid() const;
  inline void clear_tid();
  static const int kTidFieldNumber = 1;
  inline ::google::protobuf::uint32 tid() const;
  inline void set_tid(::google::protobuf::uint32 value);

  // optional uint32 level = 2;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 2;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // optional uint32 type = 3;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 3;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.gm_common.skill_single)
 private:
  inline void set_has_tid();
  inline void clear_has_tid();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 tid_;
  ::google::protobuf::uint32 level_;
  ::google::protobuf::uint32 type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_gm_5fcommon_2eproto();
  friend void protobuf_AssignDesc_gm_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_gm_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static skill_single* default_instance_;
};
// -------------------------------------------------------------------

class wear_equip_data : public ::google::protobuf::Message {
 public:
  wear_equip_data();
  virtual ~wear_equip_data();

  wear_equip_data(const wear_equip_data& from);

  inline wear_equip_data& operator=(const wear_equip_data& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const wear_equip_data& default_instance();

  void Swap(wear_equip_data* other);

  // implements Message ----------------------------------------------

  wear_equip_data* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const wear_equip_data& from);
  void MergeFrom(const wear_equip_data& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto.gm_common.wear_equip_single wear_equip_list = 1;
  inline int wear_equip_list_size() const;
  inline void clear_wear_equip_list();
  static const int kWearEquipListFieldNumber = 1;
  inline const ::proto::gm_common::wear_equip_single& wear_equip_list(int index) const;
  inline ::proto::gm_common::wear_equip_single* mutable_wear_equip_list(int index);
  inline ::proto::gm_common::wear_equip_single* add_wear_equip_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto::gm_common::wear_equip_single >&
      wear_equip_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto::gm_common::wear_equip_single >*
      mutable_wear_equip_list();

  // @@protoc_insertion_point(class_scope:proto.gm_common.wear_equip_data)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto::gm_common::wear_equip_single > wear_equip_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_gm_5fcommon_2eproto();
  friend void protobuf_AssignDesc_gm_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_gm_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static wear_equip_data* default_instance_;
};
// -------------------------------------------------------------------

class wear_equip_single : public ::google::protobuf::Message {
 public:
  wear_equip_single();
  virtual ~wear_equip_single();

  wear_equip_single(const wear_equip_single& from);

  inline wear_equip_single& operator=(const wear_equip_single& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const wear_equip_single& default_instance();

  void Swap(wear_equip_single* other);

  // implements Message ----------------------------------------------

  wear_equip_single* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const wear_equip_single& from);
  void MergeFrom(const wear_equip_single& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 tid = 1;
  inline bool has_tid() const;
  inline void clear_tid();
  static const int kTidFieldNumber = 1;
  inline ::google::protobuf::uint32 tid() const;
  inline void set_tid(::google::protobuf::uint32 value);

  // optional int32 pos = 2;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 2;
  inline ::google::protobuf::int32 pos() const;
  inline void set_pos(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.gm_common.wear_equip_single)
 private:
  inline void set_has_tid();
  inline void clear_has_tid();
  inline void set_has_pos();
  inline void clear_has_pos();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 tid_;
  ::google::protobuf::int32 pos_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_gm_5fcommon_2eproto();
  friend void protobuf_AssignDesc_gm_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_gm_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static wear_equip_single* default_instance_;
};
// -------------------------------------------------------------------

class equip_data : public ::google::protobuf::Message {
 public:
  equip_data();
  virtual ~equip_data();

  equip_data(const equip_data& from);

  inline equip_data& operator=(const equip_data& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const equip_data& default_instance();

  void Swap(equip_data* other);

  // implements Message ----------------------------------------------

  equip_data* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const equip_data& from);
  void MergeFrom(const equip_data& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto.gm_common.equip_single equip_list = 1;
  inline int equip_list_size() const;
  inline void clear_equip_list();
  static const int kEquipListFieldNumber = 1;
  inline const ::proto::gm_common::equip_single& equip_list(int index) const;
  inline ::proto::gm_common::equip_single* mutable_equip_list(int index);
  inline ::proto::gm_common::equip_single* add_equip_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto::gm_common::equip_single >&
      equip_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto::gm_common::equip_single >*
      mutable_equip_list();

  // @@protoc_insertion_point(class_scope:proto.gm_common.equip_data)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto::gm_common::equip_single > equip_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_gm_5fcommon_2eproto();
  friend void protobuf_AssignDesc_gm_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_gm_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static equip_data* default_instance_;
};
// -------------------------------------------------------------------

class equip_single : public ::google::protobuf::Message {
 public:
  equip_single();
  virtual ~equip_single();

  equip_single(const equip_single& from);

  inline equip_single& operator=(const equip_single& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const equip_single& default_instance();

  void Swap(equip_single* other);

  // implements Message ----------------------------------------------

  equip_single* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const equip_single& from);
  void MergeFrom(const equip_single& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline const ::std::string& uid() const;
  inline void set_uid(const ::std::string& value);
  inline void set_uid(const char* value);
  inline void set_uid(const char* value, size_t size);
  inline ::std::string* mutable_uid();
  inline ::std::string* release_uid();
  inline void set_allocated_uid(::std::string* uid);

  // optional int32 tid = 2;
  inline bool has_tid() const;
  inline void clear_tid();
  static const int kTidFieldNumber = 2;
  inline ::google::protobuf::int32 tid() const;
  inline void set_tid(::google::protobuf::int32 value);

  // optional int32 cur_num = 3;
  inline bool has_cur_num() const;
  inline void clear_cur_num();
  static const int kCurNumFieldNumber = 3;
  inline ::google::protobuf::int32 cur_num() const;
  inline void set_cur_num(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.gm_common.equip_single)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_tid();
  inline void clear_has_tid();
  inline void set_has_cur_num();
  inline void clear_has_cur_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* uid_;
  ::google::protobuf::int32 tid_;
  ::google::protobuf::int32 cur_num_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_gm_5fcommon_2eproto();
  friend void protobuf_AssignDesc_gm_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_gm_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static equip_single* default_instance_;
};
// -------------------------------------------------------------------

class campaign_data : public ::google::protobuf::Message {
 public:
  campaign_data();
  virtual ~campaign_data();

  campaign_data(const campaign_data& from);

  inline campaign_data& operator=(const campaign_data& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const campaign_data& default_instance();

  void Swap(campaign_data* other);

  // implements Message ----------------------------------------------

  campaign_data* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const campaign_data& from);
  void MergeFrom(const campaign_data& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto.gm_common.campaign_single campaign_list = 1;
  inline int campaign_list_size() const;
  inline void clear_campaign_list();
  static const int kCampaignListFieldNumber = 1;
  inline const ::proto::gm_common::campaign_single& campaign_list(int index) const;
  inline ::proto::gm_common::campaign_single* mutable_campaign_list(int index);
  inline ::proto::gm_common::campaign_single* add_campaign_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto::gm_common::campaign_single >&
      campaign_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto::gm_common::campaign_single >*
      mutable_campaign_list();

  // @@protoc_insertion_point(class_scope:proto.gm_common.campaign_data)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto::gm_common::campaign_single > campaign_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_gm_5fcommon_2eproto();
  friend void protobuf_AssignDesc_gm_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_gm_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static campaign_data* default_instance_;
};
// -------------------------------------------------------------------

class campaign_single : public ::google::protobuf::Message {
 public:
  campaign_single();
  virtual ~campaign_single();

  campaign_single(const campaign_single& from);

  inline campaign_single& operator=(const campaign_single& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const campaign_single& default_instance();

  void Swap(campaign_single* other);

  // implements Message ----------------------------------------------

  campaign_single* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const campaign_single& from);
  void MergeFrom(const campaign_single& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 campaign_id = 1;
  inline bool has_campaign_id() const;
  inline void clear_campaign_id();
  static const int kCampaignIdFieldNumber = 1;
  inline ::google::protobuf::uint32 campaign_id() const;
  inline void set_campaign_id(::google::protobuf::uint32 value);

  // optional uint32 pass_times = 2;
  inline bool has_pass_times() const;
  inline void clear_pass_times();
  static const int kPassTimesFieldNumber = 2;
  inline ::google::protobuf::uint32 pass_times() const;
  inline void set_pass_times(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.gm_common.campaign_single)
 private:
  inline void set_has_campaign_id();
  inline void clear_has_campaign_id();
  inline void set_has_pass_times();
  inline void clear_has_pass_times();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 campaign_id_;
  ::google::protobuf::uint32 pass_times_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_gm_5fcommon_2eproto();
  friend void protobuf_AssignDesc_gm_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_gm_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static campaign_single* default_instance_;
};
// -------------------------------------------------------------------

class matrix_data : public ::google::protobuf::Message {
 public:
  matrix_data();
  virtual ~matrix_data();

  matrix_data(const matrix_data& from);

  inline matrix_data& operator=(const matrix_data& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const matrix_data& default_instance();

  void Swap(matrix_data* other);

  // implements Message ----------------------------------------------

  matrix_data* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const matrix_data& from);
  void MergeFrom(const matrix_data& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto.gm_common.matrix_single matrix_list = 1;
  inline int matrix_list_size() const;
  inline void clear_matrix_list();
  static const int kMatrixListFieldNumber = 1;
  inline const ::proto::gm_common::matrix_single& matrix_list(int index) const;
  inline ::proto::gm_common::matrix_single* mutable_matrix_list(int index);
  inline ::proto::gm_common::matrix_single* add_matrix_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto::gm_common::matrix_single >&
      matrix_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto::gm_common::matrix_single >*
      mutable_matrix_list();

  // @@protoc_insertion_point(class_scope:proto.gm_common.matrix_data)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto::gm_common::matrix_single > matrix_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_gm_5fcommon_2eproto();
  friend void protobuf_AssignDesc_gm_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_gm_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static matrix_data* default_instance_;
};
// -------------------------------------------------------------------

class matrix_single : public ::google::protobuf::Message {
 public:
  matrix_single();
  virtual ~matrix_single();

  matrix_single(const matrix_single& from);

  inline matrix_single& operator=(const matrix_single& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const matrix_single& default_instance();

  void Swap(matrix_single* other);

  // implements Message ----------------------------------------------

  matrix_single* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const matrix_single& from);
  void MergeFrom(const matrix_single& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 matrix_id = 1;
  inline bool has_matrix_id() const;
  inline void clear_matrix_id();
  static const int kMatrixIdFieldNumber = 1;
  inline ::google::protobuf::uint32 matrix_id() const;
  inline void set_matrix_id(::google::protobuf::uint32 value);

  // optional uint32 pass_times = 2;
  inline bool has_pass_times() const;
  inline void clear_pass_times();
  static const int kPassTimesFieldNumber = 2;
  inline ::google::protobuf::uint32 pass_times() const;
  inline void set_pass_times(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.gm_common.matrix_single)
 private:
  inline void set_has_matrix_id();
  inline void clear_has_matrix_id();
  inline void set_has_pass_times();
  inline void clear_has_pass_times();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 matrix_id_;
  ::google::protobuf::uint32 pass_times_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_gm_5fcommon_2eproto();
  friend void protobuf_AssignDesc_gm_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_gm_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static matrix_single* default_instance_;
};
// -------------------------------------------------------------------

class produce_data : public ::google::protobuf::Message {
 public:
  produce_data();
  virtual ~produce_data();

  produce_data(const produce_data& from);

  inline produce_data& operator=(const produce_data& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const produce_data& default_instance();

  void Swap(produce_data* other);

  // implements Message ----------------------------------------------

  produce_data* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const produce_data& from);
  void MergeFrom(const produce_data& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto.gm_common.produce_single produce_list = 1;
  inline int produce_list_size() const;
  inline void clear_produce_list();
  static const int kProduceListFieldNumber = 1;
  inline const ::proto::gm_common::produce_single& produce_list(int index) const;
  inline ::proto::gm_common::produce_single* mutable_produce_list(int index);
  inline ::proto::gm_common::produce_single* add_produce_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto::gm_common::produce_single >&
      produce_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto::gm_common::produce_single >*
      mutable_produce_list();

  // @@protoc_insertion_point(class_scope:proto.gm_common.produce_data)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto::gm_common::produce_single > produce_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_gm_5fcommon_2eproto();
  friend void protobuf_AssignDesc_gm_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_gm_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static produce_data* default_instance_;
};
// -------------------------------------------------------------------

class produce_single : public ::google::protobuf::Message {
 public:
  produce_single();
  virtual ~produce_single();

  produce_single(const produce_single& from);

  inline produce_single& operator=(const produce_single& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const produce_single& default_instance();

  void Swap(produce_single* other);

  // implements Message ----------------------------------------------

  produce_single* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const produce_single& from);
  void MergeFrom(const produce_single& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 produce_id = 1;
  inline bool has_produce_id() const;
  inline void clear_produce_id();
  static const int kProduceIdFieldNumber = 1;
  inline ::google::protobuf::uint32 produce_id() const;
  inline void set_produce_id(::google::protobuf::uint32 value);

  // optional uint32 pass_times = 2;
  inline bool has_pass_times() const;
  inline void clear_pass_times();
  static const int kPassTimesFieldNumber = 2;
  inline ::google::protobuf::uint32 pass_times() const;
  inline void set_pass_times(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.gm_common.produce_single)
 private:
  inline void set_has_produce_id();
  inline void clear_has_produce_id();
  inline void set_has_pass_times();
  inline void clear_has_pass_times();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 produce_id_;
  ::google::protobuf::uint32 pass_times_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_gm_5fcommon_2eproto();
  friend void protobuf_AssignDesc_gm_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_gm_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static produce_single* default_instance_;
};
// -------------------------------------------------------------------

class manage_reply_single : public ::google::protobuf::Message {
 public:
  manage_reply_single();
  virtual ~manage_reply_single();

  manage_reply_single(const manage_reply_single& from);

  inline manage_reply_single& operator=(const manage_reply_single& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const manage_reply_single& default_instance();

  void Swap(manage_reply_single* other);

  // implements Message ----------------------------------------------

  manage_reply_single* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const manage_reply_single& from);
  void MergeFrom(const manage_reply_single& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string role_uid = 1;
  inline bool has_role_uid() const;
  inline void clear_role_uid();
  static const int kRoleUidFieldNumber = 1;
  inline const ::std::string& role_uid() const;
  inline void set_role_uid(const ::std::string& value);
  inline void set_role_uid(const char* value);
  inline void set_role_uid(const char* value, size_t size);
  inline ::std::string* mutable_role_uid();
  inline ::std::string* release_role_uid();
  inline void set_allocated_role_uid(::std::string* role_uid);

  // optional uint32 expired_time = 3;
  inline bool has_expired_time() const;
  inline void clear_expired_time();
  static const int kExpiredTimeFieldNumber = 3;
  inline ::google::protobuf::uint32 expired_time() const;
  inline void set_expired_time(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.gm_common.manage_reply_single)
 private:
  inline void set_has_role_uid();
  inline void clear_has_role_uid();
  inline void set_has_expired_time();
  inline void clear_has_expired_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* role_uid_;
  ::google::protobuf::uint32 expired_time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_gm_5fcommon_2eproto();
  friend void protobuf_AssignDesc_gm_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_gm_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static manage_reply_single* default_instance_;
};
// -------------------------------------------------------------------

class global_mail_single : public ::google::protobuf::Message {
 public:
  global_mail_single();
  virtual ~global_mail_single();

  global_mail_single(const global_mail_single& from);

  inline global_mail_single& operator=(const global_mail_single& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const global_mail_single& default_instance();

  void Swap(global_mail_single* other);

  // implements Message ----------------------------------------------

  global_mail_single* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const global_mail_single& from);
  void MergeFrom(const global_mail_single& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::uint64 uid() const;
  inline void set_uid(::google::protobuf::uint64 value);

  // optional uint32 type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);

  // optional string title = 3;
  inline bool has_title() const;
  inline void clear_title();
  static const int kTitleFieldNumber = 3;
  inline const ::std::string& title() const;
  inline void set_title(const ::std::string& value);
  inline void set_title(const char* value);
  inline void set_title(const char* value, size_t size);
  inline ::std::string* mutable_title();
  inline ::std::string* release_title();
  inline void set_allocated_title(::std::string* title);

  // optional string content = 4;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 4;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const char* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  inline void set_allocated_content(::std::string* content);

  // optional string send_name = 5;
  inline bool has_send_name() const;
  inline void clear_send_name();
  static const int kSendNameFieldNumber = 5;
  inline const ::std::string& send_name() const;
  inline void set_send_name(const ::std::string& value);
  inline void set_send_name(const char* value);
  inline void set_send_name(const char* value, size_t size);
  inline ::std::string* mutable_send_name();
  inline ::std::string* release_send_name();
  inline void set_allocated_send_name(::std::string* send_name);

  // optional uint32 send_time = 6;
  inline bool has_send_time() const;
  inline void clear_send_time();
  static const int kSendTimeFieldNumber = 6;
  inline ::google::protobuf::uint32 send_time() const;
  inline void set_send_time(::google::protobuf::uint32 value);

  // optional uint32 over_time = 7;
  inline bool has_over_time() const;
  inline void clear_over_time();
  static const int kOverTimeFieldNumber = 7;
  inline ::google::protobuf::uint32 over_time() const;
  inline void set_over_time(::google::protobuf::uint32 value);

  // optional uint32 send_type = 8;
  inline bool has_send_type() const;
  inline void clear_send_type();
  static const int kSendTypeFieldNumber = 8;
  inline ::google::protobuf::uint32 send_type() const;
  inline void set_send_type(::google::protobuf::uint32 value);

  // optional uint32 send_hour = 9;
  inline bool has_send_hour() const;
  inline void clear_send_hour();
  static const int kSendHourFieldNumber = 9;
  inline ::google::protobuf::uint32 send_hour() const;
  inline void set_send_hour(::google::protobuf::uint32 value);

  // optional uint32 recv_type = 10;
  inline bool has_recv_type() const;
  inline void clear_recv_type();
  static const int kRecvTypeFieldNumber = 10;
  inline ::google::protobuf::uint32 recv_type() const;
  inline void set_recv_type(::google::protobuf::uint32 value);

  // repeated string recv_did_list = 11;
  inline int recv_did_list_size() const;
  inline void clear_recv_did_list();
  static const int kRecvDidListFieldNumber = 11;
  inline const ::std::string& recv_did_list(int index) const;
  inline ::std::string* mutable_recv_did_list(int index);
  inline void set_recv_did_list(int index, const ::std::string& value);
  inline void set_recv_did_list(int index, const char* value);
  inline void set_recv_did_list(int index, const char* value, size_t size);
  inline ::std::string* add_recv_did_list();
  inline void add_recv_did_list(const ::std::string& value);
  inline void add_recv_did_list(const char* value);
  inline void add_recv_did_list(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& recv_did_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_recv_did_list();

  // optional uint32 client_valid_time = 12;
  inline bool has_client_valid_time() const;
  inline void clear_client_valid_time();
  static const int kClientValidTimeFieldNumber = 12;
  inline ::google::protobuf::uint32 client_valid_time() const;
  inline void set_client_valid_time(::google::protobuf::uint32 value);

  // optional string items = 13;
  inline bool has_items() const;
  inline void clear_items();
  static const int kItemsFieldNumber = 13;
  inline const ::std::string& items() const;
  inline void set_items(const ::std::string& value);
  inline void set_items(const char* value);
  inline void set_items(const char* value, size_t size);
  inline ::std::string* mutable_items();
  inline ::std::string* release_items();
  inline void set_allocated_items(::std::string* items);

  // optional .proto.gm_common.mail_recv_limit limit = 14;
  inline bool has_limit() const;
  inline void clear_limit();
  static const int kLimitFieldNumber = 14;
  inline const ::proto::gm_common::mail_recv_limit& limit() const;
  inline ::proto::gm_common::mail_recv_limit* mutable_limit();
  inline ::proto::gm_common::mail_recv_limit* release_limit();
  inline void set_allocated_limit(::proto::gm_common::mail_recv_limit* limit);

  // @@protoc_insertion_point(class_scope:proto.gm_common.global_mail_single)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_title();
  inline void clear_has_title();
  inline void set_has_content();
  inline void clear_has_content();
  inline void set_has_send_name();
  inline void clear_has_send_name();
  inline void set_has_send_time();
  inline void clear_has_send_time();
  inline void set_has_over_time();
  inline void clear_has_over_time();
  inline void set_has_send_type();
  inline void clear_has_send_type();
  inline void set_has_send_hour();
  inline void clear_has_send_hour();
  inline void set_has_recv_type();
  inline void clear_has_recv_type();
  inline void set_has_client_valid_time();
  inline void clear_has_client_valid_time();
  inline void set_has_items();
  inline void clear_has_items();
  inline void set_has_limit();
  inline void clear_has_limit();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 uid_;
  ::std::string* title_;
  ::std::string* content_;
  ::google::protobuf::uint32 type_;
  ::google::protobuf::uint32 send_time_;
  ::std::string* send_name_;
  ::google::protobuf::uint32 over_time_;
  ::google::protobuf::uint32 send_type_;
  ::google::protobuf::uint32 send_hour_;
  ::google::protobuf::uint32 recv_type_;
  ::google::protobuf::RepeatedPtrField< ::std::string> recv_did_list_;
  ::std::string* items_;
  ::proto::gm_common::mail_recv_limit* limit_;
  ::google::protobuf::uint32 client_valid_time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(14 + 31) / 32];

  friend void  protobuf_AddDesc_gm_5fcommon_2eproto();
  friend void protobuf_AssignDesc_gm_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_gm_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static global_mail_single* default_instance_;
};
// -------------------------------------------------------------------

class mail_recv_limit : public ::google::protobuf::Message {
 public:
  mail_recv_limit();
  virtual ~mail_recv_limit();

  mail_recv_limit(const mail_recv_limit& from);

  inline mail_recv_limit& operator=(const mail_recv_limit& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const mail_recv_limit& default_instance();

  void Swap(mail_recv_limit* other);

  // implements Message ----------------------------------------------

  mail_recv_limit* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const mail_recv_limit& from);
  void MergeFrom(const mail_recv_limit& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 level = 1;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 1;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // optional int32 regist_type = 2;
  inline bool has_regist_type() const;
  inline void clear_regist_type();
  static const int kRegistTypeFieldNumber = 2;
  inline ::google::protobuf::int32 regist_type() const;
  inline void set_regist_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.gm_common.mail_recv_limit)
 private:
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_regist_type();
  inline void clear_has_regist_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 regist_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_gm_5fcommon_2eproto();
  friend void protobuf_AssignDesc_gm_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_gm_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static mail_recv_limit* default_instance_;
};
// -------------------------------------------------------------------

class ban_state_info : public ::google::protobuf::Message {
 public:
  ban_state_info();
  virtual ~ban_state_info();

  ban_state_info(const ban_state_info& from);

  inline ban_state_info& operator=(const ban_state_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ban_state_info& default_instance();

  void Swap(ban_state_info* other);

  // implements Message ----------------------------------------------

  ban_state_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ban_state_info& from);
  void MergeFrom(const ban_state_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 user_uid = 1;
  inline bool has_user_uid() const;
  inline void clear_user_uid();
  static const int kUserUidFieldNumber = 1;
  inline ::google::protobuf::uint64 user_uid() const;
  inline void set_user_uid(::google::protobuf::uint64 value);

  // optional string account = 2;
  inline bool has_account() const;
  inline void clear_account();
  static const int kAccountFieldNumber = 2;
  inline const ::std::string& account() const;
  inline void set_account(const ::std::string& value);
  inline void set_account(const char* value);
  inline void set_account(const char* value, size_t size);
  inline ::std::string* mutable_account();
  inline ::std::string* release_account();
  inline void set_allocated_account(::std::string* account);

  // optional int32 offset_time = 3;
  inline bool has_offset_time() const;
  inline void clear_offset_time();
  static const int kOffsetTimeFieldNumber = 3;
  inline ::google::protobuf::int32 offset_time() const;
  inline void set_offset_time(::google::protobuf::int32 value);

  // optional uint32 end_time = 4;
  inline bool has_end_time() const;
  inline void clear_end_time();
  static const int kEndTimeFieldNumber = 4;
  inline ::google::protobuf::uint32 end_time() const;
  inline void set_end_time(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.gm_common.ban_state_info)
 private:
  inline void set_has_user_uid();
  inline void clear_has_user_uid();
  inline void set_has_account();
  inline void clear_has_account();
  inline void set_has_offset_time();
  inline void clear_has_offset_time();
  inline void set_has_end_time();
  inline void clear_has_end_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 user_uid_;
  ::std::string* account_;
  ::google::protobuf::int32 offset_time_;
  ::google::protobuf::uint32 end_time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_gm_5fcommon_2eproto();
  friend void protobuf_AssignDesc_gm_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_gm_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static ban_state_info* default_instance_;
};
// -------------------------------------------------------------------

class sign_record_single : public ::google::protobuf::Message {
 public:
  sign_record_single();
  virtual ~sign_record_single();

  sign_record_single(const sign_record_single& from);

  inline sign_record_single& operator=(const sign_record_single& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const sign_record_single& default_instance();

  void Swap(sign_record_single* other);

  // implements Message ----------------------------------------------

  sign_record_single* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const sign_record_single& from);
  void MergeFrom(const sign_record_single& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 cur_sign_times = 1;
  inline bool has_cur_sign_times() const;
  inline void clear_cur_sign_times();
  static const int kCurSignTimesFieldNumber = 1;
  inline ::google::protobuf::uint32 cur_sign_times() const;
  inline void set_cur_sign_times(::google::protobuf::uint32 value);

  // optional uint32 sign_time = 2;
  inline bool has_sign_time() const;
  inline void clear_sign_time();
  static const int kSignTimeFieldNumber = 2;
  inline ::google::protobuf::uint32 sign_time() const;
  inline void set_sign_time(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.gm_common.sign_record_single)
 private:
  inline void set_has_cur_sign_times();
  inline void clear_has_cur_sign_times();
  inline void set_has_sign_time();
  inline void clear_has_sign_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 cur_sign_times_;
  ::google::protobuf::uint32 sign_time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_gm_5fcommon_2eproto();
  friend void protobuf_AssignDesc_gm_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_gm_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static sign_record_single* default_instance_;
};
// -------------------------------------------------------------------

class draw_record_single : public ::google::protobuf::Message {
 public:
  draw_record_single();
  virtual ~draw_record_single();

  draw_record_single(const draw_record_single& from);

  inline draw_record_single& operator=(const draw_record_single& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const draw_record_single& default_instance();

  void Swap(draw_record_single* other);

  // implements Message ----------------------------------------------

  draw_record_single* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const draw_record_single& from);
  void MergeFrom(const draw_record_single& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 draw_type = 1;
  inline bool has_draw_type() const;
  inline void clear_draw_type();
  static const int kDrawTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 draw_type() const;
  inline void set_draw_type(::google::protobuf::uint32 value);

  // optional uint32 draw_time = 2;
  inline bool has_draw_time() const;
  inline void clear_draw_time();
  static const int kDrawTimeFieldNumber = 2;
  inline ::google::protobuf::uint32 draw_time() const;
  inline void set_draw_time(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.gm_common.draw_record_single)
 private:
  inline void set_has_draw_type();
  inline void clear_has_draw_type();
  inline void set_has_draw_time();
  inline void clear_has_draw_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 draw_type_;
  ::google::protobuf::uint32 draw_time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_gm_5fcommon_2eproto();
  friend void protobuf_AssignDesc_gm_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_gm_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static draw_record_single* default_instance_;
};
// -------------------------------------------------------------------

class buy_record_single : public ::google::protobuf::Message {
 public:
  buy_record_single();
  virtual ~buy_record_single();

  buy_record_single(const buy_record_single& from);

  inline buy_record_single& operator=(const buy_record_single& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const buy_record_single& default_instance();

  void Swap(buy_record_single* other);

  // implements Message ----------------------------------------------

  buy_record_single* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const buy_record_single& from);
  void MergeFrom(const buy_record_single& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 original_diamond_num = 1;
  inline bool has_original_diamond_num() const;
  inline void clear_original_diamond_num();
  static const int kOriginalDiamondNumFieldNumber = 1;
  inline ::google::protobuf::uint32 original_diamond_num() const;
  inline void set_original_diamond_num(::google::protobuf::uint32 value);

  // optional uint32 cost_diamond_num = 2;
  inline bool has_cost_diamond_num() const;
  inline void clear_cost_diamond_num();
  static const int kCostDiamondNumFieldNumber = 2;
  inline ::google::protobuf::uint32 cost_diamond_num() const;
  inline void set_cost_diamond_num(::google::protobuf::uint32 value);

  // optional uint32 cur_diamond_num = 3;
  inline bool has_cur_diamond_num() const;
  inline void clear_cur_diamond_num();
  static const int kCurDiamondNumFieldNumber = 3;
  inline ::google::protobuf::uint32 cur_diamond_num() const;
  inline void set_cur_diamond_num(::google::protobuf::uint32 value);

  // optional uint32 buy_time = 4;
  inline bool has_buy_time() const;
  inline void clear_buy_time();
  static const int kBuyTimeFieldNumber = 4;
  inline ::google::protobuf::uint32 buy_time() const;
  inline void set_buy_time(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.gm_common.buy_record_single)
 private:
  inline void set_has_original_diamond_num();
  inline void clear_has_original_diamond_num();
  inline void set_has_cost_diamond_num();
  inline void clear_has_cost_diamond_num();
  inline void set_has_cur_diamond_num();
  inline void clear_has_cur_diamond_num();
  inline void set_has_buy_time();
  inline void clear_has_buy_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 original_diamond_num_;
  ::google::protobuf::uint32 cost_diamond_num_;
  ::google::protobuf::uint32 cur_diamond_num_;
  ::google::protobuf::uint32 buy_time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_gm_5fcommon_2eproto();
  friend void protobuf_AssignDesc_gm_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_gm_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static buy_record_single* default_instance_;
};
// -------------------------------------------------------------------

class shop_record_single : public ::google::protobuf::Message {
 public:
  shop_record_single();
  virtual ~shop_record_single();

  shop_record_single(const shop_record_single& from);

  inline shop_record_single& operator=(const shop_record_single& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const shop_record_single& default_instance();

  void Swap(shop_record_single* other);

  // implements Message ----------------------------------------------

  shop_record_single* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const shop_record_single& from);
  void MergeFrom(const shop_record_single& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 shop_type = 1;
  inline bool has_shop_type() const;
  inline void clear_shop_type();
  static const int kShopTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 shop_type() const;
  inline void set_shop_type(::google::protobuf::uint32 value);

  // optional uint32 refresh_times = 2;
  inline bool has_refresh_times() const;
  inline void clear_refresh_times();
  static const int kRefreshTimesFieldNumber = 2;
  inline ::google::protobuf::uint32 refresh_times() const;
  inline void set_refresh_times(::google::protobuf::uint32 value);

  // optional uint32 buy_times = 3;
  inline bool has_buy_times() const;
  inline void clear_buy_times();
  static const int kBuyTimesFieldNumber = 3;
  inline ::google::protobuf::uint32 buy_times() const;
  inline void set_buy_times(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.gm_common.shop_record_single)
 private:
  inline void set_has_shop_type();
  inline void clear_has_shop_type();
  inline void set_has_refresh_times();
  inline void clear_has_refresh_times();
  inline void set_has_buy_times();
  inline void clear_has_buy_times();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 shop_type_;
  ::google::protobuf::uint32 refresh_times_;
  ::google::protobuf::uint32 buy_times_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_gm_5fcommon_2eproto();
  friend void protobuf_AssignDesc_gm_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_gm_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static shop_record_single* default_instance_;
};
// -------------------------------------------------------------------

class gm_notice_single : public ::google::protobuf::Message {
 public:
  gm_notice_single();
  virtual ~gm_notice_single();

  gm_notice_single(const gm_notice_single& from);

  inline gm_notice_single& operator=(const gm_notice_single& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gm_notice_single& default_instance();

  void Swap(gm_notice_single* other);

  // implements Message ----------------------------------------------

  gm_notice_single* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gm_notice_single& from);
  void MergeFrom(const gm_notice_single& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);

  // optional uint32 tick = 2;
  inline bool has_tick() const;
  inline void clear_tick();
  static const int kTickFieldNumber = 2;
  inline ::google::protobuf::uint32 tick() const;
  inline void set_tick(::google::protobuf::uint32 value);

  // optional uint32 start_time = 3;
  inline bool has_start_time() const;
  inline void clear_start_time();
  static const int kStartTimeFieldNumber = 3;
  inline ::google::protobuf::uint32 start_time() const;
  inline void set_start_time(::google::protobuf::uint32 value);

  // optional uint32 end_time = 4;
  inline bool has_end_time() const;
  inline void clear_end_time();
  static const int kEndTimeFieldNumber = 4;
  inline ::google::protobuf::uint32 end_time() const;
  inline void set_end_time(::google::protobuf::uint32 value);

  // optional uint32 last_send_time = 5;
  inline bool has_last_send_time() const;
  inline void clear_last_send_time();
  static const int kLastSendTimeFieldNumber = 5;
  inline ::google::protobuf::uint32 last_send_time() const;
  inline void set_last_send_time(::google::protobuf::uint32 value);

  // optional string notice = 6;
  inline bool has_notice() const;
  inline void clear_notice();
  static const int kNoticeFieldNumber = 6;
  inline const ::std::string& notice() const;
  inline void set_notice(const ::std::string& value);
  inline void set_notice(const char* value);
  inline void set_notice(const char* value, size_t size);
  inline ::std::string* mutable_notice();
  inline ::std::string* release_notice();
  inline void set_allocated_notice(::std::string* notice);

  // @@protoc_insertion_point(class_scope:proto.gm_common.gm_notice_single)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_tick();
  inline void clear_has_tick();
  inline void set_has_start_time();
  inline void clear_has_start_time();
  inline void set_has_end_time();
  inline void clear_has_end_time();
  inline void set_has_last_send_time();
  inline void clear_has_last_send_time();
  inline void set_has_notice();
  inline void clear_has_notice();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 type_;
  ::google::protobuf::uint32 tick_;
  ::google::protobuf::uint32 start_time_;
  ::google::protobuf::uint32 end_time_;
  ::std::string* notice_;
  ::google::protobuf::uint32 last_send_time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_gm_5fcommon_2eproto();
  friend void protobuf_AssignDesc_gm_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_gm_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static gm_notice_single* default_instance_;
};
// ===================================================================


// ===================================================================

// user_base_info

// optional string name = 1;
inline bool user_base_info::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void user_base_info::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void user_base_info::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void user_base_info::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& user_base_info::name() const {
  return *name_;
}
inline void user_base_info::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void user_base_info::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void user_base_info::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* user_base_info::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* user_base_info::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void user_base_info::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 level = 2;
inline bool user_base_info::has_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void user_base_info::set_has_level() {
  _has_bits_[0] |= 0x00000002u;
}
inline void user_base_info::clear_has_level() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void user_base_info::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 user_base_info::level() const {
  return level_;
}
inline void user_base_info::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
}

// optional uint32 exp = 3;
inline bool user_base_info::has_exp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void user_base_info::set_has_exp() {
  _has_bits_[0] |= 0x00000004u;
}
inline void user_base_info::clear_has_exp() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void user_base_info::clear_exp() {
  exp_ = 0u;
  clear_has_exp();
}
inline ::google::protobuf::uint32 user_base_info::exp() const {
  return exp_;
}
inline void user_base_info::set_exp(::google::protobuf::uint32 value) {
  set_has_exp();
  exp_ = value;
}

// optional uint32 gold = 4;
inline bool user_base_info::has_gold() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void user_base_info::set_has_gold() {
  _has_bits_[0] |= 0x00000008u;
}
inline void user_base_info::clear_has_gold() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void user_base_info::clear_gold() {
  gold_ = 0u;
  clear_has_gold();
}
inline ::google::protobuf::uint32 user_base_info::gold() const {
  return gold_;
}
inline void user_base_info::set_gold(::google::protobuf::uint32 value) {
  set_has_gold();
  gold_ = value;
}

// optional uint32 free_diamond = 5;
inline bool user_base_info::has_free_diamond() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void user_base_info::set_has_free_diamond() {
  _has_bits_[0] |= 0x00000010u;
}
inline void user_base_info::clear_has_free_diamond() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void user_base_info::clear_free_diamond() {
  free_diamond_ = 0u;
  clear_has_free_diamond();
}
inline ::google::protobuf::uint32 user_base_info::free_diamond() const {
  return free_diamond_;
}
inline void user_base_info::set_free_diamond(::google::protobuf::uint32 value) {
  set_has_free_diamond();
  free_diamond_ = value;
}

// optional uint32 paid_diamond = 6;
inline bool user_base_info::has_paid_diamond() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void user_base_info::set_has_paid_diamond() {
  _has_bits_[0] |= 0x00000020u;
}
inline void user_base_info::clear_has_paid_diamond() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void user_base_info::clear_paid_diamond() {
  paid_diamond_ = 0u;
  clear_has_paid_diamond();
}
inline ::google::protobuf::uint32 user_base_info::paid_diamond() const {
  return paid_diamond_;
}
inline void user_base_info::set_paid_diamond(::google::protobuf::uint32 value) {
  set_has_paid_diamond();
  paid_diamond_ = value;
}

// optional uint32 ap = 7;
inline bool user_base_info::has_ap() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void user_base_info::set_has_ap() {
  _has_bits_[0] |= 0x00000040u;
}
inline void user_base_info::clear_has_ap() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void user_base_info::clear_ap() {
  ap_ = 0u;
  clear_has_ap();
}
inline ::google::protobuf::uint32 user_base_info::ap() const {
  return ap_;
}
inline void user_base_info::set_ap(::google::protobuf::uint32 value) {
  set_has_ap();
  ap_ = value;
}

// optional uint32 vip_level = 8;
inline bool user_base_info::has_vip_level() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void user_base_info::set_has_vip_level() {
  _has_bits_[0] |= 0x00000080u;
}
inline void user_base_info::clear_has_vip_level() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void user_base_info::clear_vip_level() {
  vip_level_ = 0u;
  clear_has_vip_level();
}
inline ::google::protobuf::uint32 user_base_info::vip_level() const {
  return vip_level_;
}
inline void user_base_info::set_vip_level(::google::protobuf::uint32 value) {
  set_has_vip_level();
  vip_level_ = value;
}

// optional uint32 vip_exp = 9;
inline bool user_base_info::has_vip_exp() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void user_base_info::set_has_vip_exp() {
  _has_bits_[0] |= 0x00000100u;
}
inline void user_base_info::clear_has_vip_exp() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void user_base_info::clear_vip_exp() {
  vip_exp_ = 0u;
  clear_has_vip_exp();
}
inline ::google::protobuf::uint32 user_base_info::vip_exp() const {
  return vip_exp_;
}
inline void user_base_info::set_vip_exp(::google::protobuf::uint32 value) {
  set_has_vip_exp();
  vip_exp_ = value;
}

// optional uint32 create_time = 10;
inline bool user_base_info::has_create_time() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void user_base_info::set_has_create_time() {
  _has_bits_[0] |= 0x00000200u;
}
inline void user_base_info::clear_has_create_time() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void user_base_info::clear_create_time() {
  create_time_ = 0u;
  clear_has_create_time();
}
inline ::google::protobuf::uint32 user_base_info::create_time() const {
  return create_time_;
}
inline void user_base_info::set_create_time(::google::protobuf::uint32 value) {
  set_has_create_time();
  create_time_ = value;
}

// optional uint32 last_login_time = 11;
inline bool user_base_info::has_last_login_time() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void user_base_info::set_has_last_login_time() {
  _has_bits_[0] |= 0x00000400u;
}
inline void user_base_info::clear_has_last_login_time() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void user_base_info::clear_last_login_time() {
  last_login_time_ = 0u;
  clear_has_last_login_time();
}
inline ::google::protobuf::uint32 user_base_info::last_login_time() const {
  return last_login_time_;
}
inline void user_base_info::set_last_login_time(::google::protobuf::uint32 value) {
  set_has_last_login_time();
  last_login_time_ = value;
}

// optional uint64 user_uid = 12;
inline bool user_base_info::has_user_uid() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void user_base_info::set_has_user_uid() {
  _has_bits_[0] |= 0x00000800u;
}
inline void user_base_info::clear_has_user_uid() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void user_base_info::clear_user_uid() {
  user_uid_ = GOOGLE_ULONGLONG(0);
  clear_has_user_uid();
}
inline ::google::protobuf::uint64 user_base_info::user_uid() const {
  return user_uid_;
}
inline void user_base_info::set_user_uid(::google::protobuf::uint64 value) {
  set_has_user_uid();
  user_uid_ = value;
}

// optional uint32 skill_point = 13;
inline bool user_base_info::has_skill_point() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void user_base_info::set_has_skill_point() {
  _has_bits_[0] |= 0x00001000u;
}
inline void user_base_info::clear_has_skill_point() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void user_base_info::clear_skill_point() {
  skill_point_ = 0u;
  clear_has_skill_point();
}
inline ::google::protobuf::uint32 user_base_info::skill_point() const {
  return skill_point_;
}
inline void user_base_info::set_skill_point(::google::protobuf::uint32 value) {
  set_has_skill_point();
  skill_point_ = value;
}

// optional uint32 pve_badge = 14;
inline bool user_base_info::has_pve_badge() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void user_base_info::set_has_pve_badge() {
  _has_bits_[0] |= 0x00002000u;
}
inline void user_base_info::clear_has_pve_badge() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void user_base_info::clear_pve_badge() {
  pve_badge_ = 0u;
  clear_has_pve_badge();
}
inline ::google::protobuf::uint32 user_base_info::pve_badge() const {
  return pve_badge_;
}
inline void user_base_info::set_pve_badge(::google::protobuf::uint32 value) {
  set_has_pve_badge();
  pve_badge_ = value;
}

// optional uint32 pvp_badge = 15;
inline bool user_base_info::has_pvp_badge() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void user_base_info::set_has_pvp_badge() {
  _has_bits_[0] |= 0x00004000u;
}
inline void user_base_info::clear_has_pvp_badge() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void user_base_info::clear_pvp_badge() {
  pvp_badge_ = 0u;
  clear_has_pvp_badge();
}
inline ::google::protobuf::uint32 user_base_info::pvp_badge() const {
  return pvp_badge_;
}
inline void user_base_info::set_pvp_badge(::google::protobuf::uint32 value) {
  set_has_pvp_badge();
  pvp_badge_ = value;
}

// optional uint32 fate = 16;
inline bool user_base_info::has_fate() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void user_base_info::set_has_fate() {
  _has_bits_[0] |= 0x00008000u;
}
inline void user_base_info::clear_has_fate() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void user_base_info::clear_fate() {
  fate_ = 0u;
  clear_has_fate();
}
inline ::google::protobuf::uint32 user_base_info::fate() const {
  return fate_;
}
inline void user_base_info::set_fate(::google::protobuf::uint32 value) {
  set_has_fate();
  fate_ = value;
}

// optional uint32 account_idx = 17;
inline bool user_base_info::has_account_idx() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void user_base_info::set_has_account_idx() {
  _has_bits_[0] |= 0x00010000u;
}
inline void user_base_info::clear_has_account_idx() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void user_base_info::clear_account_idx() {
  account_idx_ = 0u;
  clear_has_account_idx();
}
inline ::google::protobuf::uint32 user_base_info::account_idx() const {
  return account_idx_;
}
inline void user_base_info::set_account_idx(::google::protobuf::uint32 value) {
  set_has_account_idx();
  account_idx_ = value;
}

// -------------------------------------------------------------------

// recharge_count_info

// repeated .proto.gm_common.recharge_single recharge_list = 1;
inline int recharge_count_info::recharge_list_size() const {
  return recharge_list_.size();
}
inline void recharge_count_info::clear_recharge_list() {
  recharge_list_.Clear();
}
inline const ::proto::gm_common::recharge_single& recharge_count_info::recharge_list(int index) const {
  return recharge_list_.Get(index);
}
inline ::proto::gm_common::recharge_single* recharge_count_info::mutable_recharge_list(int index) {
  return recharge_list_.Mutable(index);
}
inline ::proto::gm_common::recharge_single* recharge_count_info::add_recharge_list() {
  return recharge_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::gm_common::recharge_single >&
recharge_count_info::recharge_list() const {
  return recharge_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto::gm_common::recharge_single >*
recharge_count_info::mutable_recharge_list() {
  return &recharge_list_;
}

// -------------------------------------------------------------------

// recharge_single

// optional uint32 rmb = 1;
inline bool recharge_single::has_rmb() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void recharge_single::set_has_rmb() {
  _has_bits_[0] |= 0x00000001u;
}
inline void recharge_single::clear_has_rmb() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void recharge_single::clear_rmb() {
  rmb_ = 0u;
  clear_has_rmb();
}
inline ::google::protobuf::uint32 recharge_single::rmb() const {
  return rmb_;
}
inline void recharge_single::set_rmb(::google::protobuf::uint32 value) {
  set_has_rmb();
  rmb_ = value;
}

// optional uint32 paid_diamond = 2;
inline bool recharge_single::has_paid_diamond() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void recharge_single::set_has_paid_diamond() {
  _has_bits_[0] |= 0x00000002u;
}
inline void recharge_single::clear_has_paid_diamond() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void recharge_single::clear_paid_diamond() {
  paid_diamond_ = 0u;
  clear_has_paid_diamond();
}
inline ::google::protobuf::uint32 recharge_single::paid_diamond() const {
  return paid_diamond_;
}
inline void recharge_single::set_paid_diamond(::google::protobuf::uint32 value) {
  set_has_paid_diamond();
  paid_diamond_ = value;
}

// optional uint32 free_diamond = 3;
inline bool recharge_single::has_free_diamond() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void recharge_single::set_has_free_diamond() {
  _has_bits_[0] |= 0x00000004u;
}
inline void recharge_single::clear_has_free_diamond() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void recharge_single::clear_free_diamond() {
  free_diamond_ = 0u;
  clear_has_free_diamond();
}
inline ::google::protobuf::uint32 recharge_single::free_diamond() const {
  return free_diamond_;
}
inline void recharge_single::set_free_diamond(::google::protobuf::uint32 value) {
  set_has_free_diamond();
  free_diamond_ = value;
}

// optional uint32 recharge_time = 4;
inline bool recharge_single::has_recharge_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void recharge_single::set_has_recharge_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void recharge_single::clear_has_recharge_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void recharge_single::clear_recharge_time() {
  recharge_time_ = 0u;
  clear_has_recharge_time();
}
inline ::google::protobuf::uint32 recharge_single::recharge_time() const {
  return recharge_time_;
}
inline void recharge_single::set_recharge_time(::google::protobuf::uint32 value) {
  set_has_recharge_time();
  recharge_time_ = value;
}

// optional string order_id = 5;
inline bool recharge_single::has_order_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void recharge_single::set_has_order_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void recharge_single::clear_has_order_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void recharge_single::clear_order_id() {
  if (order_id_ != &::google::protobuf::internal::kEmptyString) {
    order_id_->clear();
  }
  clear_has_order_id();
}
inline const ::std::string& recharge_single::order_id() const {
  return *order_id_;
}
inline void recharge_single::set_order_id(const ::std::string& value) {
  set_has_order_id();
  if (order_id_ == &::google::protobuf::internal::kEmptyString) {
    order_id_ = new ::std::string;
  }
  order_id_->assign(value);
}
inline void recharge_single::set_order_id(const char* value) {
  set_has_order_id();
  if (order_id_ == &::google::protobuf::internal::kEmptyString) {
    order_id_ = new ::std::string;
  }
  order_id_->assign(value);
}
inline void recharge_single::set_order_id(const char* value, size_t size) {
  set_has_order_id();
  if (order_id_ == &::google::protobuf::internal::kEmptyString) {
    order_id_ = new ::std::string;
  }
  order_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* recharge_single::mutable_order_id() {
  set_has_order_id();
  if (order_id_ == &::google::protobuf::internal::kEmptyString) {
    order_id_ = new ::std::string;
  }
  return order_id_;
}
inline ::std::string* recharge_single::release_order_id() {
  clear_has_order_id();
  if (order_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = order_id_;
    order_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void recharge_single::set_allocated_order_id(::std::string* order_id) {
  if (order_id_ != &::google::protobuf::internal::kEmptyString) {
    delete order_id_;
  }
  if (order_id) {
    set_has_order_id();
    order_id_ = order_id;
  } else {
    clear_has_order_id();
    order_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string channel = 6;
inline bool recharge_single::has_channel() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void recharge_single::set_has_channel() {
  _has_bits_[0] |= 0x00000020u;
}
inline void recharge_single::clear_has_channel() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void recharge_single::clear_channel() {
  if (channel_ != &::google::protobuf::internal::kEmptyString) {
    channel_->clear();
  }
  clear_has_channel();
}
inline const ::std::string& recharge_single::channel() const {
  return *channel_;
}
inline void recharge_single::set_channel(const ::std::string& value) {
  set_has_channel();
  if (channel_ == &::google::protobuf::internal::kEmptyString) {
    channel_ = new ::std::string;
  }
  channel_->assign(value);
}
inline void recharge_single::set_channel(const char* value) {
  set_has_channel();
  if (channel_ == &::google::protobuf::internal::kEmptyString) {
    channel_ = new ::std::string;
  }
  channel_->assign(value);
}
inline void recharge_single::set_channel(const char* value, size_t size) {
  set_has_channel();
  if (channel_ == &::google::protobuf::internal::kEmptyString) {
    channel_ = new ::std::string;
  }
  channel_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* recharge_single::mutable_channel() {
  set_has_channel();
  if (channel_ == &::google::protobuf::internal::kEmptyString) {
    channel_ = new ::std::string;
  }
  return channel_;
}
inline ::std::string* recharge_single::release_channel() {
  clear_has_channel();
  if (channel_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = channel_;
    channel_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void recharge_single::set_allocated_channel(::std::string* channel) {
  if (channel_ != &::google::protobuf::internal::kEmptyString) {
    delete channel_;
  }
  if (channel) {
    set_has_channel();
    channel_ = channel;
  } else {
    clear_has_channel();
    channel_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// consume_record_data

// repeated .proto.gm_common.consume_record_single record_list = 1;
inline int consume_record_data::record_list_size() const {
  return record_list_.size();
}
inline void consume_record_data::clear_record_list() {
  record_list_.Clear();
}
inline const ::proto::gm_common::consume_record_single& consume_record_data::record_list(int index) const {
  return record_list_.Get(index);
}
inline ::proto::gm_common::consume_record_single* consume_record_data::mutable_record_list(int index) {
  return record_list_.Mutable(index);
}
inline ::proto::gm_common::consume_record_single* consume_record_data::add_record_list() {
  return record_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::gm_common::consume_record_single >&
consume_record_data::record_list() const {
  return record_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto::gm_common::consume_record_single >*
consume_record_data::mutable_record_list() {
  return &record_list_;
}

// -------------------------------------------------------------------

// consume_record_single

// optional uint32 diamond_type = 1;
inline bool consume_record_single::has_diamond_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void consume_record_single::set_has_diamond_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void consume_record_single::clear_has_diamond_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void consume_record_single::clear_diamond_type() {
  diamond_type_ = 0u;
  clear_has_diamond_type();
}
inline ::google::protobuf::uint32 consume_record_single::diamond_type() const {
  return diamond_type_;
}
inline void consume_record_single::set_diamond_type(::google::protobuf::uint32 value) {
  set_has_diamond_type();
  diamond_type_ = value;
}

// optional uint32 consume_num = 2;
inline bool consume_record_single::has_consume_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void consume_record_single::set_has_consume_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void consume_record_single::clear_has_consume_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void consume_record_single::clear_consume_num() {
  consume_num_ = 0u;
  clear_has_consume_num();
}
inline ::google::protobuf::uint32 consume_record_single::consume_num() const {
  return consume_num_;
}
inline void consume_record_single::set_consume_num(::google::protobuf::uint32 value) {
  set_has_consume_num();
  consume_num_ = value;
}

// optional uint32 consume_time = 3;
inline bool consume_record_single::has_consume_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void consume_record_single::set_has_consume_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void consume_record_single::clear_has_consume_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void consume_record_single::clear_consume_time() {
  consume_time_ = 0u;
  clear_has_consume_time();
}
inline ::google::protobuf::uint32 consume_record_single::consume_time() const {
  return consume_time_;
}
inline void consume_record_single::set_consume_time(::google::protobuf::uint32 value) {
  set_has_consume_time();
  consume_time_ = value;
}

// optional uint32 type = 4;
inline bool consume_record_single::has_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void consume_record_single::set_has_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void consume_record_single::clear_has_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void consume_record_single::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 consume_record_single::type() const {
  return type_;
}
inline void consume_record_single::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
}

// -------------------------------------------------------------------

// item_data

// repeated .proto.gm_common.item_single item_list = 1;
inline int item_data::item_list_size() const {
  return item_list_.size();
}
inline void item_data::clear_item_list() {
  item_list_.Clear();
}
inline const ::proto::gm_common::item_single& item_data::item_list(int index) const {
  return item_list_.Get(index);
}
inline ::proto::gm_common::item_single* item_data::mutable_item_list(int index) {
  return item_list_.Mutable(index);
}
inline ::proto::gm_common::item_single* item_data::add_item_list() {
  return item_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::gm_common::item_single >&
item_data::item_list() const {
  return item_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto::gm_common::item_single >*
item_data::mutable_item_list() {
  return &item_list_;
}

// -------------------------------------------------------------------

// item_single

// optional string uid = 1;
inline bool item_single::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void item_single::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void item_single::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void item_single::clear_uid() {
  if (uid_ != &::google::protobuf::internal::kEmptyString) {
    uid_->clear();
  }
  clear_has_uid();
}
inline const ::std::string& item_single::uid() const {
  return *uid_;
}
inline void item_single::set_uid(const ::std::string& value) {
  set_has_uid();
  if (uid_ == &::google::protobuf::internal::kEmptyString) {
    uid_ = new ::std::string;
  }
  uid_->assign(value);
}
inline void item_single::set_uid(const char* value) {
  set_has_uid();
  if (uid_ == &::google::protobuf::internal::kEmptyString) {
    uid_ = new ::std::string;
  }
  uid_->assign(value);
}
inline void item_single::set_uid(const char* value, size_t size) {
  set_has_uid();
  if (uid_ == &::google::protobuf::internal::kEmptyString) {
    uid_ = new ::std::string;
  }
  uid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* item_single::mutable_uid() {
  set_has_uid();
  if (uid_ == &::google::protobuf::internal::kEmptyString) {
    uid_ = new ::std::string;
  }
  return uid_;
}
inline ::std::string* item_single::release_uid() {
  clear_has_uid();
  if (uid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = uid_;
    uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void item_single::set_allocated_uid(::std::string* uid) {
  if (uid_ != &::google::protobuf::internal::kEmptyString) {
    delete uid_;
  }
  if (uid) {
    set_has_uid();
    uid_ = uid;
  } else {
    clear_has_uid();
    uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 tid = 2;
inline bool item_single::has_tid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void item_single::set_has_tid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void item_single::clear_has_tid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void item_single::clear_tid() {
  tid_ = 0u;
  clear_has_tid();
}
inline ::google::protobuf::uint32 item_single::tid() const {
  return tid_;
}
inline void item_single::set_tid(::google::protobuf::uint32 value) {
  set_has_tid();
  tid_ = value;
}

// optional uint32 cur_num = 3;
inline bool item_single::has_cur_num() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void item_single::set_has_cur_num() {
  _has_bits_[0] |= 0x00000004u;
}
inline void item_single::clear_has_cur_num() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void item_single::clear_cur_num() {
  cur_num_ = 0u;
  clear_has_cur_num();
}
inline ::google::protobuf::uint32 item_single::cur_num() const {
  return cur_num_;
}
inline void item_single::set_cur_num(::google::protobuf::uint32 value) {
  set_has_cur_num();
  cur_num_ = value;
}

// -------------------------------------------------------------------

// hero_data

// repeated .proto.gm_common.hero_single hero_list = 1;
inline int hero_data::hero_list_size() const {
  return hero_list_.size();
}
inline void hero_data::clear_hero_list() {
  hero_list_.Clear();
}
inline const ::proto::gm_common::hero_single& hero_data::hero_list(int index) const {
  return hero_list_.Get(index);
}
inline ::proto::gm_common::hero_single* hero_data::mutable_hero_list(int index) {
  return hero_list_.Mutable(index);
}
inline ::proto::gm_common::hero_single* hero_data::add_hero_list() {
  return hero_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::gm_common::hero_single >&
hero_data::hero_list() const {
  return hero_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto::gm_common::hero_single >*
hero_data::mutable_hero_list() {
  return &hero_list_;
}

// -------------------------------------------------------------------

// hero_single

// optional string uid = 1;
inline bool hero_single::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void hero_single::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void hero_single::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void hero_single::clear_uid() {
  if (uid_ != &::google::protobuf::internal::kEmptyString) {
    uid_->clear();
  }
  clear_has_uid();
}
inline const ::std::string& hero_single::uid() const {
  return *uid_;
}
inline void hero_single::set_uid(const ::std::string& value) {
  set_has_uid();
  if (uid_ == &::google::protobuf::internal::kEmptyString) {
    uid_ = new ::std::string;
  }
  uid_->assign(value);
}
inline void hero_single::set_uid(const char* value) {
  set_has_uid();
  if (uid_ == &::google::protobuf::internal::kEmptyString) {
    uid_ = new ::std::string;
  }
  uid_->assign(value);
}
inline void hero_single::set_uid(const char* value, size_t size) {
  set_has_uid();
  if (uid_ == &::google::protobuf::internal::kEmptyString) {
    uid_ = new ::std::string;
  }
  uid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* hero_single::mutable_uid() {
  set_has_uid();
  if (uid_ == &::google::protobuf::internal::kEmptyString) {
    uid_ = new ::std::string;
  }
  return uid_;
}
inline ::std::string* hero_single::release_uid() {
  clear_has_uid();
  if (uid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = uid_;
    uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void hero_single::set_allocated_uid(::std::string* uid) {
  if (uid_ != &::google::protobuf::internal::kEmptyString) {
    delete uid_;
  }
  if (uid) {
    set_has_uid();
    uid_ = uid;
  } else {
    clear_has_uid();
    uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 tid = 2;
inline bool hero_single::has_tid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void hero_single::set_has_tid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void hero_single::clear_has_tid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void hero_single::clear_tid() {
  tid_ = 0u;
  clear_has_tid();
}
inline ::google::protobuf::uint32 hero_single::tid() const {
  return tid_;
}
inline void hero_single::set_tid(::google::protobuf::uint32 value) {
  set_has_tid();
  tid_ = value;
}

// optional uint32 level = 3;
inline bool hero_single::has_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void hero_single::set_has_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void hero_single::clear_has_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void hero_single::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 hero_single::level() const {
  return level_;
}
inline void hero_single::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
}

// optional uint32 exp = 4;
inline bool hero_single::has_exp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void hero_single::set_has_exp() {
  _has_bits_[0] |= 0x00000008u;
}
inline void hero_single::clear_has_exp() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void hero_single::clear_exp() {
  exp_ = 0u;
  clear_has_exp();
}
inline ::google::protobuf::uint32 hero_single::exp() const {
  return exp_;
}
inline void hero_single::set_exp(::google::protobuf::uint32 value) {
  set_has_exp();
  exp_ = value;
}

// optional .proto.gm_common.wear_equip_data wear_equip = 5;
inline bool hero_single::has_wear_equip() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void hero_single::set_has_wear_equip() {
  _has_bits_[0] |= 0x00000010u;
}
inline void hero_single::clear_has_wear_equip() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void hero_single::clear_wear_equip() {
  if (wear_equip_ != NULL) wear_equip_->::proto::gm_common::wear_equip_data::Clear();
  clear_has_wear_equip();
}
inline const ::proto::gm_common::wear_equip_data& hero_single::wear_equip() const {
  return wear_equip_ != NULL ? *wear_equip_ : *default_instance_->wear_equip_;
}
inline ::proto::gm_common::wear_equip_data* hero_single::mutable_wear_equip() {
  set_has_wear_equip();
  if (wear_equip_ == NULL) wear_equip_ = new ::proto::gm_common::wear_equip_data;
  return wear_equip_;
}
inline ::proto::gm_common::wear_equip_data* hero_single::release_wear_equip() {
  clear_has_wear_equip();
  ::proto::gm_common::wear_equip_data* temp = wear_equip_;
  wear_equip_ = NULL;
  return temp;
}
inline void hero_single::set_allocated_wear_equip(::proto::gm_common::wear_equip_data* wear_equip) {
  delete wear_equip_;
  wear_equip_ = wear_equip;
  if (wear_equip) {
    set_has_wear_equip();
  } else {
    clear_has_wear_equip();
  }
}

// optional uint32 hero_fragment_num = 6;
inline bool hero_single::has_hero_fragment_num() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void hero_single::set_has_hero_fragment_num() {
  _has_bits_[0] |= 0x00000020u;
}
inline void hero_single::clear_has_hero_fragment_num() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void hero_single::clear_hero_fragment_num() {
  hero_fragment_num_ = 0u;
  clear_has_hero_fragment_num();
}
inline ::google::protobuf::uint32 hero_single::hero_fragment_num() const {
  return hero_fragment_num_;
}
inline void hero_single::set_hero_fragment_num(::google::protobuf::uint32 value) {
  set_has_hero_fragment_num();
  hero_fragment_num_ = value;
}

// optional uint32 star_level = 7;
inline bool hero_single::has_star_level() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void hero_single::set_has_star_level() {
  _has_bits_[0] |= 0x00000040u;
}
inline void hero_single::clear_has_star_level() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void hero_single::clear_star_level() {
  star_level_ = 0u;
  clear_has_star_level();
}
inline ::google::protobuf::uint32 hero_single::star_level() const {
  return star_level_;
}
inline void hero_single::set_star_level(::google::protobuf::uint32 value) {
  set_has_star_level();
  star_level_ = value;
}

// optional uint32 quality = 8;
inline bool hero_single::has_quality() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void hero_single::set_has_quality() {
  _has_bits_[0] |= 0x00000080u;
}
inline void hero_single::clear_has_quality() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void hero_single::clear_quality() {
  quality_ = 0u;
  clear_has_quality();
}
inline ::google::protobuf::uint32 hero_single::quality() const {
  return quality_;
}
inline void hero_single::set_quality(::google::protobuf::uint32 value) {
  set_has_quality();
  quality_ = value;
}

// optional .proto.gm_common.skill_data skill = 9;
inline bool hero_single::has_skill() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void hero_single::set_has_skill() {
  _has_bits_[0] |= 0x00000100u;
}
inline void hero_single::clear_has_skill() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void hero_single::clear_skill() {
  if (skill_ != NULL) skill_->::proto::gm_common::skill_data::Clear();
  clear_has_skill();
}
inline const ::proto::gm_common::skill_data& hero_single::skill() const {
  return skill_ != NULL ? *skill_ : *default_instance_->skill_;
}
inline ::proto::gm_common::skill_data* hero_single::mutable_skill() {
  set_has_skill();
  if (skill_ == NULL) skill_ = new ::proto::gm_common::skill_data;
  return skill_;
}
inline ::proto::gm_common::skill_data* hero_single::release_skill() {
  clear_has_skill();
  ::proto::gm_common::skill_data* temp = skill_;
  skill_ = NULL;
  return temp;
}
inline void hero_single::set_allocated_skill(::proto::gm_common::skill_data* skill) {
  delete skill_;
  skill_ = skill;
  if (skill) {
    set_has_skill();
  } else {
    clear_has_skill();
  }
}

// -------------------------------------------------------------------

// skill_data

// repeated .proto.gm_common.skill_single skill_list = 1;
inline int skill_data::skill_list_size() const {
  return skill_list_.size();
}
inline void skill_data::clear_skill_list() {
  skill_list_.Clear();
}
inline const ::proto::gm_common::skill_single& skill_data::skill_list(int index) const {
  return skill_list_.Get(index);
}
inline ::proto::gm_common::skill_single* skill_data::mutable_skill_list(int index) {
  return skill_list_.Mutable(index);
}
inline ::proto::gm_common::skill_single* skill_data::add_skill_list() {
  return skill_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::gm_common::skill_single >&
skill_data::skill_list() const {
  return skill_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto::gm_common::skill_single >*
skill_data::mutable_skill_list() {
  return &skill_list_;
}

// -------------------------------------------------------------------

// skill_single

// optional uint32 tid = 1;
inline bool skill_single::has_tid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void skill_single::set_has_tid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void skill_single::clear_has_tid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void skill_single::clear_tid() {
  tid_ = 0u;
  clear_has_tid();
}
inline ::google::protobuf::uint32 skill_single::tid() const {
  return tid_;
}
inline void skill_single::set_tid(::google::protobuf::uint32 value) {
  set_has_tid();
  tid_ = value;
}

// optional uint32 level = 2;
inline bool skill_single::has_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void skill_single::set_has_level() {
  _has_bits_[0] |= 0x00000002u;
}
inline void skill_single::clear_has_level() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void skill_single::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 skill_single::level() const {
  return level_;
}
inline void skill_single::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
}

// optional uint32 type = 3;
inline bool skill_single::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void skill_single::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void skill_single::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void skill_single::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 skill_single::type() const {
  return type_;
}
inline void skill_single::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
}

// -------------------------------------------------------------------

// wear_equip_data

// repeated .proto.gm_common.wear_equip_single wear_equip_list = 1;
inline int wear_equip_data::wear_equip_list_size() const {
  return wear_equip_list_.size();
}
inline void wear_equip_data::clear_wear_equip_list() {
  wear_equip_list_.Clear();
}
inline const ::proto::gm_common::wear_equip_single& wear_equip_data::wear_equip_list(int index) const {
  return wear_equip_list_.Get(index);
}
inline ::proto::gm_common::wear_equip_single* wear_equip_data::mutable_wear_equip_list(int index) {
  return wear_equip_list_.Mutable(index);
}
inline ::proto::gm_common::wear_equip_single* wear_equip_data::add_wear_equip_list() {
  return wear_equip_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::gm_common::wear_equip_single >&
wear_equip_data::wear_equip_list() const {
  return wear_equip_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto::gm_common::wear_equip_single >*
wear_equip_data::mutable_wear_equip_list() {
  return &wear_equip_list_;
}

// -------------------------------------------------------------------

// wear_equip_single

// optional uint32 tid = 1;
inline bool wear_equip_single::has_tid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void wear_equip_single::set_has_tid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void wear_equip_single::clear_has_tid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void wear_equip_single::clear_tid() {
  tid_ = 0u;
  clear_has_tid();
}
inline ::google::protobuf::uint32 wear_equip_single::tid() const {
  return tid_;
}
inline void wear_equip_single::set_tid(::google::protobuf::uint32 value) {
  set_has_tid();
  tid_ = value;
}

// optional int32 pos = 2;
inline bool wear_equip_single::has_pos() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void wear_equip_single::set_has_pos() {
  _has_bits_[0] |= 0x00000002u;
}
inline void wear_equip_single::clear_has_pos() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void wear_equip_single::clear_pos() {
  pos_ = 0;
  clear_has_pos();
}
inline ::google::protobuf::int32 wear_equip_single::pos() const {
  return pos_;
}
inline void wear_equip_single::set_pos(::google::protobuf::int32 value) {
  set_has_pos();
  pos_ = value;
}

// -------------------------------------------------------------------

// equip_data

// repeated .proto.gm_common.equip_single equip_list = 1;
inline int equip_data::equip_list_size() const {
  return equip_list_.size();
}
inline void equip_data::clear_equip_list() {
  equip_list_.Clear();
}
inline const ::proto::gm_common::equip_single& equip_data::equip_list(int index) const {
  return equip_list_.Get(index);
}
inline ::proto::gm_common::equip_single* equip_data::mutable_equip_list(int index) {
  return equip_list_.Mutable(index);
}
inline ::proto::gm_common::equip_single* equip_data::add_equip_list() {
  return equip_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::gm_common::equip_single >&
equip_data::equip_list() const {
  return equip_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto::gm_common::equip_single >*
equip_data::mutable_equip_list() {
  return &equip_list_;
}

// -------------------------------------------------------------------

// equip_single

// optional string uid = 1;
inline bool equip_single::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void equip_single::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void equip_single::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void equip_single::clear_uid() {
  if (uid_ != &::google::protobuf::internal::kEmptyString) {
    uid_->clear();
  }
  clear_has_uid();
}
inline const ::std::string& equip_single::uid() const {
  return *uid_;
}
inline void equip_single::set_uid(const ::std::string& value) {
  set_has_uid();
  if (uid_ == &::google::protobuf::internal::kEmptyString) {
    uid_ = new ::std::string;
  }
  uid_->assign(value);
}
inline void equip_single::set_uid(const char* value) {
  set_has_uid();
  if (uid_ == &::google::protobuf::internal::kEmptyString) {
    uid_ = new ::std::string;
  }
  uid_->assign(value);
}
inline void equip_single::set_uid(const char* value, size_t size) {
  set_has_uid();
  if (uid_ == &::google::protobuf::internal::kEmptyString) {
    uid_ = new ::std::string;
  }
  uid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* equip_single::mutable_uid() {
  set_has_uid();
  if (uid_ == &::google::protobuf::internal::kEmptyString) {
    uid_ = new ::std::string;
  }
  return uid_;
}
inline ::std::string* equip_single::release_uid() {
  clear_has_uid();
  if (uid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = uid_;
    uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void equip_single::set_allocated_uid(::std::string* uid) {
  if (uid_ != &::google::protobuf::internal::kEmptyString) {
    delete uid_;
  }
  if (uid) {
    set_has_uid();
    uid_ = uid;
  } else {
    clear_has_uid();
    uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 tid = 2;
inline bool equip_single::has_tid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void equip_single::set_has_tid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void equip_single::clear_has_tid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void equip_single::clear_tid() {
  tid_ = 0;
  clear_has_tid();
}
inline ::google::protobuf::int32 equip_single::tid() const {
  return tid_;
}
inline void equip_single::set_tid(::google::protobuf::int32 value) {
  set_has_tid();
  tid_ = value;
}

// optional int32 cur_num = 3;
inline bool equip_single::has_cur_num() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void equip_single::set_has_cur_num() {
  _has_bits_[0] |= 0x00000004u;
}
inline void equip_single::clear_has_cur_num() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void equip_single::clear_cur_num() {
  cur_num_ = 0;
  clear_has_cur_num();
}
inline ::google::protobuf::int32 equip_single::cur_num() const {
  return cur_num_;
}
inline void equip_single::set_cur_num(::google::protobuf::int32 value) {
  set_has_cur_num();
  cur_num_ = value;
}

// -------------------------------------------------------------------

// campaign_data

// repeated .proto.gm_common.campaign_single campaign_list = 1;
inline int campaign_data::campaign_list_size() const {
  return campaign_list_.size();
}
inline void campaign_data::clear_campaign_list() {
  campaign_list_.Clear();
}
inline const ::proto::gm_common::campaign_single& campaign_data::campaign_list(int index) const {
  return campaign_list_.Get(index);
}
inline ::proto::gm_common::campaign_single* campaign_data::mutable_campaign_list(int index) {
  return campaign_list_.Mutable(index);
}
inline ::proto::gm_common::campaign_single* campaign_data::add_campaign_list() {
  return campaign_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::gm_common::campaign_single >&
campaign_data::campaign_list() const {
  return campaign_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto::gm_common::campaign_single >*
campaign_data::mutable_campaign_list() {
  return &campaign_list_;
}

// -------------------------------------------------------------------

// campaign_single

// optional uint32 campaign_id = 1;
inline bool campaign_single::has_campaign_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void campaign_single::set_has_campaign_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void campaign_single::clear_has_campaign_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void campaign_single::clear_campaign_id() {
  campaign_id_ = 0u;
  clear_has_campaign_id();
}
inline ::google::protobuf::uint32 campaign_single::campaign_id() const {
  return campaign_id_;
}
inline void campaign_single::set_campaign_id(::google::protobuf::uint32 value) {
  set_has_campaign_id();
  campaign_id_ = value;
}

// optional uint32 pass_times = 2;
inline bool campaign_single::has_pass_times() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void campaign_single::set_has_pass_times() {
  _has_bits_[0] |= 0x00000002u;
}
inline void campaign_single::clear_has_pass_times() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void campaign_single::clear_pass_times() {
  pass_times_ = 0u;
  clear_has_pass_times();
}
inline ::google::protobuf::uint32 campaign_single::pass_times() const {
  return pass_times_;
}
inline void campaign_single::set_pass_times(::google::protobuf::uint32 value) {
  set_has_pass_times();
  pass_times_ = value;
}

// -------------------------------------------------------------------

// matrix_data

// repeated .proto.gm_common.matrix_single matrix_list = 1;
inline int matrix_data::matrix_list_size() const {
  return matrix_list_.size();
}
inline void matrix_data::clear_matrix_list() {
  matrix_list_.Clear();
}
inline const ::proto::gm_common::matrix_single& matrix_data::matrix_list(int index) const {
  return matrix_list_.Get(index);
}
inline ::proto::gm_common::matrix_single* matrix_data::mutable_matrix_list(int index) {
  return matrix_list_.Mutable(index);
}
inline ::proto::gm_common::matrix_single* matrix_data::add_matrix_list() {
  return matrix_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::gm_common::matrix_single >&
matrix_data::matrix_list() const {
  return matrix_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto::gm_common::matrix_single >*
matrix_data::mutable_matrix_list() {
  return &matrix_list_;
}

// -------------------------------------------------------------------

// matrix_single

// optional uint32 matrix_id = 1;
inline bool matrix_single::has_matrix_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void matrix_single::set_has_matrix_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void matrix_single::clear_has_matrix_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void matrix_single::clear_matrix_id() {
  matrix_id_ = 0u;
  clear_has_matrix_id();
}
inline ::google::protobuf::uint32 matrix_single::matrix_id() const {
  return matrix_id_;
}
inline void matrix_single::set_matrix_id(::google::protobuf::uint32 value) {
  set_has_matrix_id();
  matrix_id_ = value;
}

// optional uint32 pass_times = 2;
inline bool matrix_single::has_pass_times() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void matrix_single::set_has_pass_times() {
  _has_bits_[0] |= 0x00000002u;
}
inline void matrix_single::clear_has_pass_times() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void matrix_single::clear_pass_times() {
  pass_times_ = 0u;
  clear_has_pass_times();
}
inline ::google::protobuf::uint32 matrix_single::pass_times() const {
  return pass_times_;
}
inline void matrix_single::set_pass_times(::google::protobuf::uint32 value) {
  set_has_pass_times();
  pass_times_ = value;
}

// -------------------------------------------------------------------

// produce_data

// repeated .proto.gm_common.produce_single produce_list = 1;
inline int produce_data::produce_list_size() const {
  return produce_list_.size();
}
inline void produce_data::clear_produce_list() {
  produce_list_.Clear();
}
inline const ::proto::gm_common::produce_single& produce_data::produce_list(int index) const {
  return produce_list_.Get(index);
}
inline ::proto::gm_common::produce_single* produce_data::mutable_produce_list(int index) {
  return produce_list_.Mutable(index);
}
inline ::proto::gm_common::produce_single* produce_data::add_produce_list() {
  return produce_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::gm_common::produce_single >&
produce_data::produce_list() const {
  return produce_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto::gm_common::produce_single >*
produce_data::mutable_produce_list() {
  return &produce_list_;
}

// -------------------------------------------------------------------

// produce_single

// optional uint32 produce_id = 1;
inline bool produce_single::has_produce_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void produce_single::set_has_produce_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void produce_single::clear_has_produce_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void produce_single::clear_produce_id() {
  produce_id_ = 0u;
  clear_has_produce_id();
}
inline ::google::protobuf::uint32 produce_single::produce_id() const {
  return produce_id_;
}
inline void produce_single::set_produce_id(::google::protobuf::uint32 value) {
  set_has_produce_id();
  produce_id_ = value;
}

// optional uint32 pass_times = 2;
inline bool produce_single::has_pass_times() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void produce_single::set_has_pass_times() {
  _has_bits_[0] |= 0x00000002u;
}
inline void produce_single::clear_has_pass_times() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void produce_single::clear_pass_times() {
  pass_times_ = 0u;
  clear_has_pass_times();
}
inline ::google::protobuf::uint32 produce_single::pass_times() const {
  return pass_times_;
}
inline void produce_single::set_pass_times(::google::protobuf::uint32 value) {
  set_has_pass_times();
  pass_times_ = value;
}

// -------------------------------------------------------------------

// manage_reply_single

// optional string role_uid = 1;
inline bool manage_reply_single::has_role_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void manage_reply_single::set_has_role_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void manage_reply_single::clear_has_role_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void manage_reply_single::clear_role_uid() {
  if (role_uid_ != &::google::protobuf::internal::kEmptyString) {
    role_uid_->clear();
  }
  clear_has_role_uid();
}
inline const ::std::string& manage_reply_single::role_uid() const {
  return *role_uid_;
}
inline void manage_reply_single::set_role_uid(const ::std::string& value) {
  set_has_role_uid();
  if (role_uid_ == &::google::protobuf::internal::kEmptyString) {
    role_uid_ = new ::std::string;
  }
  role_uid_->assign(value);
}
inline void manage_reply_single::set_role_uid(const char* value) {
  set_has_role_uid();
  if (role_uid_ == &::google::protobuf::internal::kEmptyString) {
    role_uid_ = new ::std::string;
  }
  role_uid_->assign(value);
}
inline void manage_reply_single::set_role_uid(const char* value, size_t size) {
  set_has_role_uid();
  if (role_uid_ == &::google::protobuf::internal::kEmptyString) {
    role_uid_ = new ::std::string;
  }
  role_uid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* manage_reply_single::mutable_role_uid() {
  set_has_role_uid();
  if (role_uid_ == &::google::protobuf::internal::kEmptyString) {
    role_uid_ = new ::std::string;
  }
  return role_uid_;
}
inline ::std::string* manage_reply_single::release_role_uid() {
  clear_has_role_uid();
  if (role_uid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = role_uid_;
    role_uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void manage_reply_single::set_allocated_role_uid(::std::string* role_uid) {
  if (role_uid_ != &::google::protobuf::internal::kEmptyString) {
    delete role_uid_;
  }
  if (role_uid) {
    set_has_role_uid();
    role_uid_ = role_uid;
  } else {
    clear_has_role_uid();
    role_uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 expired_time = 3;
inline bool manage_reply_single::has_expired_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void manage_reply_single::set_has_expired_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void manage_reply_single::clear_has_expired_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void manage_reply_single::clear_expired_time() {
  expired_time_ = 0u;
  clear_has_expired_time();
}
inline ::google::protobuf::uint32 manage_reply_single::expired_time() const {
  return expired_time_;
}
inline void manage_reply_single::set_expired_time(::google::protobuf::uint32 value) {
  set_has_expired_time();
  expired_time_ = value;
}

// -------------------------------------------------------------------

// global_mail_single

// optional uint64 uid = 1;
inline bool global_mail_single::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void global_mail_single::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void global_mail_single::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void global_mail_single::clear_uid() {
  uid_ = GOOGLE_ULONGLONG(0);
  clear_has_uid();
}
inline ::google::protobuf::uint64 global_mail_single::uid() const {
  return uid_;
}
inline void global_mail_single::set_uid(::google::protobuf::uint64 value) {
  set_has_uid();
  uid_ = value;
}

// optional uint32 type = 2;
inline bool global_mail_single::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void global_mail_single::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void global_mail_single::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void global_mail_single::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 global_mail_single::type() const {
  return type_;
}
inline void global_mail_single::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
}

// optional string title = 3;
inline bool global_mail_single::has_title() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void global_mail_single::set_has_title() {
  _has_bits_[0] |= 0x00000004u;
}
inline void global_mail_single::clear_has_title() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void global_mail_single::clear_title() {
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    title_->clear();
  }
  clear_has_title();
}
inline const ::std::string& global_mail_single::title() const {
  return *title_;
}
inline void global_mail_single::set_title(const ::std::string& value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(value);
}
inline void global_mail_single::set_title(const char* value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(value);
}
inline void global_mail_single::set_title(const char* value, size_t size) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* global_mail_single::mutable_title() {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  return title_;
}
inline ::std::string* global_mail_single::release_title() {
  clear_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = title_;
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void global_mail_single::set_allocated_title(::std::string* title) {
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    delete title_;
  }
  if (title) {
    set_has_title();
    title_ = title;
  } else {
    clear_has_title();
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string content = 4;
inline bool global_mail_single::has_content() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void global_mail_single::set_has_content() {
  _has_bits_[0] |= 0x00000008u;
}
inline void global_mail_single::clear_has_content() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void global_mail_single::clear_content() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& global_mail_single::content() const {
  return *content_;
}
inline void global_mail_single::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void global_mail_single::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void global_mail_single::set_content(const char* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* global_mail_single::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  return content_;
}
inline ::std::string* global_mail_single::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void global_mail_single::set_allocated_content(::std::string* content) {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (content) {
    set_has_content();
    content_ = content;
  } else {
    clear_has_content();
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string send_name = 5;
inline bool global_mail_single::has_send_name() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void global_mail_single::set_has_send_name() {
  _has_bits_[0] |= 0x00000010u;
}
inline void global_mail_single::clear_has_send_name() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void global_mail_single::clear_send_name() {
  if (send_name_ != &::google::protobuf::internal::kEmptyString) {
    send_name_->clear();
  }
  clear_has_send_name();
}
inline const ::std::string& global_mail_single::send_name() const {
  return *send_name_;
}
inline void global_mail_single::set_send_name(const ::std::string& value) {
  set_has_send_name();
  if (send_name_ == &::google::protobuf::internal::kEmptyString) {
    send_name_ = new ::std::string;
  }
  send_name_->assign(value);
}
inline void global_mail_single::set_send_name(const char* value) {
  set_has_send_name();
  if (send_name_ == &::google::protobuf::internal::kEmptyString) {
    send_name_ = new ::std::string;
  }
  send_name_->assign(value);
}
inline void global_mail_single::set_send_name(const char* value, size_t size) {
  set_has_send_name();
  if (send_name_ == &::google::protobuf::internal::kEmptyString) {
    send_name_ = new ::std::string;
  }
  send_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* global_mail_single::mutable_send_name() {
  set_has_send_name();
  if (send_name_ == &::google::protobuf::internal::kEmptyString) {
    send_name_ = new ::std::string;
  }
  return send_name_;
}
inline ::std::string* global_mail_single::release_send_name() {
  clear_has_send_name();
  if (send_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = send_name_;
    send_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void global_mail_single::set_allocated_send_name(::std::string* send_name) {
  if (send_name_ != &::google::protobuf::internal::kEmptyString) {
    delete send_name_;
  }
  if (send_name) {
    set_has_send_name();
    send_name_ = send_name;
  } else {
    clear_has_send_name();
    send_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 send_time = 6;
inline bool global_mail_single::has_send_time() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void global_mail_single::set_has_send_time() {
  _has_bits_[0] |= 0x00000020u;
}
inline void global_mail_single::clear_has_send_time() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void global_mail_single::clear_send_time() {
  send_time_ = 0u;
  clear_has_send_time();
}
inline ::google::protobuf::uint32 global_mail_single::send_time() const {
  return send_time_;
}
inline void global_mail_single::set_send_time(::google::protobuf::uint32 value) {
  set_has_send_time();
  send_time_ = value;
}

// optional uint32 over_time = 7;
inline bool global_mail_single::has_over_time() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void global_mail_single::set_has_over_time() {
  _has_bits_[0] |= 0x00000040u;
}
inline void global_mail_single::clear_has_over_time() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void global_mail_single::clear_over_time() {
  over_time_ = 0u;
  clear_has_over_time();
}
inline ::google::protobuf::uint32 global_mail_single::over_time() const {
  return over_time_;
}
inline void global_mail_single::set_over_time(::google::protobuf::uint32 value) {
  set_has_over_time();
  over_time_ = value;
}

// optional uint32 send_type = 8;
inline bool global_mail_single::has_send_type() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void global_mail_single::set_has_send_type() {
  _has_bits_[0] |= 0x00000080u;
}
inline void global_mail_single::clear_has_send_type() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void global_mail_single::clear_send_type() {
  send_type_ = 0u;
  clear_has_send_type();
}
inline ::google::protobuf::uint32 global_mail_single::send_type() const {
  return send_type_;
}
inline void global_mail_single::set_send_type(::google::protobuf::uint32 value) {
  set_has_send_type();
  send_type_ = value;
}

// optional uint32 send_hour = 9;
inline bool global_mail_single::has_send_hour() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void global_mail_single::set_has_send_hour() {
  _has_bits_[0] |= 0x00000100u;
}
inline void global_mail_single::clear_has_send_hour() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void global_mail_single::clear_send_hour() {
  send_hour_ = 0u;
  clear_has_send_hour();
}
inline ::google::protobuf::uint32 global_mail_single::send_hour() const {
  return send_hour_;
}
inline void global_mail_single::set_send_hour(::google::protobuf::uint32 value) {
  set_has_send_hour();
  send_hour_ = value;
}

// optional uint32 recv_type = 10;
inline bool global_mail_single::has_recv_type() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void global_mail_single::set_has_recv_type() {
  _has_bits_[0] |= 0x00000200u;
}
inline void global_mail_single::clear_has_recv_type() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void global_mail_single::clear_recv_type() {
  recv_type_ = 0u;
  clear_has_recv_type();
}
inline ::google::protobuf::uint32 global_mail_single::recv_type() const {
  return recv_type_;
}
inline void global_mail_single::set_recv_type(::google::protobuf::uint32 value) {
  set_has_recv_type();
  recv_type_ = value;
}

// repeated string recv_did_list = 11;
inline int global_mail_single::recv_did_list_size() const {
  return recv_did_list_.size();
}
inline void global_mail_single::clear_recv_did_list() {
  recv_did_list_.Clear();
}
inline const ::std::string& global_mail_single::recv_did_list(int index) const {
  return recv_did_list_.Get(index);
}
inline ::std::string* global_mail_single::mutable_recv_did_list(int index) {
  return recv_did_list_.Mutable(index);
}
inline void global_mail_single::set_recv_did_list(int index, const ::std::string& value) {
  recv_did_list_.Mutable(index)->assign(value);
}
inline void global_mail_single::set_recv_did_list(int index, const char* value) {
  recv_did_list_.Mutable(index)->assign(value);
}
inline void global_mail_single::set_recv_did_list(int index, const char* value, size_t size) {
  recv_did_list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* global_mail_single::add_recv_did_list() {
  return recv_did_list_.Add();
}
inline void global_mail_single::add_recv_did_list(const ::std::string& value) {
  recv_did_list_.Add()->assign(value);
}
inline void global_mail_single::add_recv_did_list(const char* value) {
  recv_did_list_.Add()->assign(value);
}
inline void global_mail_single::add_recv_did_list(const char* value, size_t size) {
  recv_did_list_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
global_mail_single::recv_did_list() const {
  return recv_did_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
global_mail_single::mutable_recv_did_list() {
  return &recv_did_list_;
}

// optional uint32 client_valid_time = 12;
inline bool global_mail_single::has_client_valid_time() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void global_mail_single::set_has_client_valid_time() {
  _has_bits_[0] |= 0x00000800u;
}
inline void global_mail_single::clear_has_client_valid_time() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void global_mail_single::clear_client_valid_time() {
  client_valid_time_ = 0u;
  clear_has_client_valid_time();
}
inline ::google::protobuf::uint32 global_mail_single::client_valid_time() const {
  return client_valid_time_;
}
inline void global_mail_single::set_client_valid_time(::google::protobuf::uint32 value) {
  set_has_client_valid_time();
  client_valid_time_ = value;
}

// optional string items = 13;
inline bool global_mail_single::has_items() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void global_mail_single::set_has_items() {
  _has_bits_[0] |= 0x00001000u;
}
inline void global_mail_single::clear_has_items() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void global_mail_single::clear_items() {
  if (items_ != &::google::protobuf::internal::kEmptyString) {
    items_->clear();
  }
  clear_has_items();
}
inline const ::std::string& global_mail_single::items() const {
  return *items_;
}
inline void global_mail_single::set_items(const ::std::string& value) {
  set_has_items();
  if (items_ == &::google::protobuf::internal::kEmptyString) {
    items_ = new ::std::string;
  }
  items_->assign(value);
}
inline void global_mail_single::set_items(const char* value) {
  set_has_items();
  if (items_ == &::google::protobuf::internal::kEmptyString) {
    items_ = new ::std::string;
  }
  items_->assign(value);
}
inline void global_mail_single::set_items(const char* value, size_t size) {
  set_has_items();
  if (items_ == &::google::protobuf::internal::kEmptyString) {
    items_ = new ::std::string;
  }
  items_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* global_mail_single::mutable_items() {
  set_has_items();
  if (items_ == &::google::protobuf::internal::kEmptyString) {
    items_ = new ::std::string;
  }
  return items_;
}
inline ::std::string* global_mail_single::release_items() {
  clear_has_items();
  if (items_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = items_;
    items_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void global_mail_single::set_allocated_items(::std::string* items) {
  if (items_ != &::google::protobuf::internal::kEmptyString) {
    delete items_;
  }
  if (items) {
    set_has_items();
    items_ = items;
  } else {
    clear_has_items();
    items_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .proto.gm_common.mail_recv_limit limit = 14;
inline bool global_mail_single::has_limit() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void global_mail_single::set_has_limit() {
  _has_bits_[0] |= 0x00002000u;
}
inline void global_mail_single::clear_has_limit() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void global_mail_single::clear_limit() {
  if (limit_ != NULL) limit_->::proto::gm_common::mail_recv_limit::Clear();
  clear_has_limit();
}
inline const ::proto::gm_common::mail_recv_limit& global_mail_single::limit() const {
  return limit_ != NULL ? *limit_ : *default_instance_->limit_;
}
inline ::proto::gm_common::mail_recv_limit* global_mail_single::mutable_limit() {
  set_has_limit();
  if (limit_ == NULL) limit_ = new ::proto::gm_common::mail_recv_limit;
  return limit_;
}
inline ::proto::gm_common::mail_recv_limit* global_mail_single::release_limit() {
  clear_has_limit();
  ::proto::gm_common::mail_recv_limit* temp = limit_;
  limit_ = NULL;
  return temp;
}
inline void global_mail_single::set_allocated_limit(::proto::gm_common::mail_recv_limit* limit) {
  delete limit_;
  limit_ = limit;
  if (limit) {
    set_has_limit();
  } else {
    clear_has_limit();
  }
}

// -------------------------------------------------------------------

// mail_recv_limit

// optional int32 level = 1;
inline bool mail_recv_limit::has_level() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void mail_recv_limit::set_has_level() {
  _has_bits_[0] |= 0x00000001u;
}
inline void mail_recv_limit::clear_has_level() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void mail_recv_limit::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 mail_recv_limit::level() const {
  return level_;
}
inline void mail_recv_limit::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// optional int32 regist_type = 2;
inline bool mail_recv_limit::has_regist_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void mail_recv_limit::set_has_regist_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void mail_recv_limit::clear_has_regist_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void mail_recv_limit::clear_regist_type() {
  regist_type_ = 0;
  clear_has_regist_type();
}
inline ::google::protobuf::int32 mail_recv_limit::regist_type() const {
  return regist_type_;
}
inline void mail_recv_limit::set_regist_type(::google::protobuf::int32 value) {
  set_has_regist_type();
  regist_type_ = value;
}

// -------------------------------------------------------------------

// ban_state_info

// optional uint64 user_uid = 1;
inline bool ban_state_info::has_user_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ban_state_info::set_has_user_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ban_state_info::clear_has_user_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ban_state_info::clear_user_uid() {
  user_uid_ = GOOGLE_ULONGLONG(0);
  clear_has_user_uid();
}
inline ::google::protobuf::uint64 ban_state_info::user_uid() const {
  return user_uid_;
}
inline void ban_state_info::set_user_uid(::google::protobuf::uint64 value) {
  set_has_user_uid();
  user_uid_ = value;
}

// optional string account = 2;
inline bool ban_state_info::has_account() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ban_state_info::set_has_account() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ban_state_info::clear_has_account() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ban_state_info::clear_account() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    account_->clear();
  }
  clear_has_account();
}
inline const ::std::string& ban_state_info::account() const {
  return *account_;
}
inline void ban_state_info::set_account(const ::std::string& value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void ban_state_info::set_account(const char* value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void ban_state_info::set_account(const char* value, size_t size) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ban_state_info::mutable_account() {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  return account_;
}
inline ::std::string* ban_state_info::release_account() {
  clear_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = account_;
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ban_state_info::set_allocated_account(::std::string* account) {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (account) {
    set_has_account();
    account_ = account;
  } else {
    clear_has_account();
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 offset_time = 3;
inline bool ban_state_info::has_offset_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ban_state_info::set_has_offset_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ban_state_info::clear_has_offset_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ban_state_info::clear_offset_time() {
  offset_time_ = 0;
  clear_has_offset_time();
}
inline ::google::protobuf::int32 ban_state_info::offset_time() const {
  return offset_time_;
}
inline void ban_state_info::set_offset_time(::google::protobuf::int32 value) {
  set_has_offset_time();
  offset_time_ = value;
}

// optional uint32 end_time = 4;
inline bool ban_state_info::has_end_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ban_state_info::set_has_end_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ban_state_info::clear_has_end_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ban_state_info::clear_end_time() {
  end_time_ = 0u;
  clear_has_end_time();
}
inline ::google::protobuf::uint32 ban_state_info::end_time() const {
  return end_time_;
}
inline void ban_state_info::set_end_time(::google::protobuf::uint32 value) {
  set_has_end_time();
  end_time_ = value;
}

// -------------------------------------------------------------------

// sign_record_single

// optional uint32 cur_sign_times = 1;
inline bool sign_record_single::has_cur_sign_times() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void sign_record_single::set_has_cur_sign_times() {
  _has_bits_[0] |= 0x00000001u;
}
inline void sign_record_single::clear_has_cur_sign_times() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void sign_record_single::clear_cur_sign_times() {
  cur_sign_times_ = 0u;
  clear_has_cur_sign_times();
}
inline ::google::protobuf::uint32 sign_record_single::cur_sign_times() const {
  return cur_sign_times_;
}
inline void sign_record_single::set_cur_sign_times(::google::protobuf::uint32 value) {
  set_has_cur_sign_times();
  cur_sign_times_ = value;
}

// optional uint32 sign_time = 2;
inline bool sign_record_single::has_sign_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void sign_record_single::set_has_sign_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void sign_record_single::clear_has_sign_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void sign_record_single::clear_sign_time() {
  sign_time_ = 0u;
  clear_has_sign_time();
}
inline ::google::protobuf::uint32 sign_record_single::sign_time() const {
  return sign_time_;
}
inline void sign_record_single::set_sign_time(::google::protobuf::uint32 value) {
  set_has_sign_time();
  sign_time_ = value;
}

// -------------------------------------------------------------------

// draw_record_single

// optional uint32 draw_type = 1;
inline bool draw_record_single::has_draw_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void draw_record_single::set_has_draw_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void draw_record_single::clear_has_draw_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void draw_record_single::clear_draw_type() {
  draw_type_ = 0u;
  clear_has_draw_type();
}
inline ::google::protobuf::uint32 draw_record_single::draw_type() const {
  return draw_type_;
}
inline void draw_record_single::set_draw_type(::google::protobuf::uint32 value) {
  set_has_draw_type();
  draw_type_ = value;
}

// optional uint32 draw_time = 2;
inline bool draw_record_single::has_draw_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void draw_record_single::set_has_draw_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void draw_record_single::clear_has_draw_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void draw_record_single::clear_draw_time() {
  draw_time_ = 0u;
  clear_has_draw_time();
}
inline ::google::protobuf::uint32 draw_record_single::draw_time() const {
  return draw_time_;
}
inline void draw_record_single::set_draw_time(::google::protobuf::uint32 value) {
  set_has_draw_time();
  draw_time_ = value;
}

// -------------------------------------------------------------------

// buy_record_single

// optional uint32 original_diamond_num = 1;
inline bool buy_record_single::has_original_diamond_num() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void buy_record_single::set_has_original_diamond_num() {
  _has_bits_[0] |= 0x00000001u;
}
inline void buy_record_single::clear_has_original_diamond_num() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void buy_record_single::clear_original_diamond_num() {
  original_diamond_num_ = 0u;
  clear_has_original_diamond_num();
}
inline ::google::protobuf::uint32 buy_record_single::original_diamond_num() const {
  return original_diamond_num_;
}
inline void buy_record_single::set_original_diamond_num(::google::protobuf::uint32 value) {
  set_has_original_diamond_num();
  original_diamond_num_ = value;
}

// optional uint32 cost_diamond_num = 2;
inline bool buy_record_single::has_cost_diamond_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void buy_record_single::set_has_cost_diamond_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void buy_record_single::clear_has_cost_diamond_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void buy_record_single::clear_cost_diamond_num() {
  cost_diamond_num_ = 0u;
  clear_has_cost_diamond_num();
}
inline ::google::protobuf::uint32 buy_record_single::cost_diamond_num() const {
  return cost_diamond_num_;
}
inline void buy_record_single::set_cost_diamond_num(::google::protobuf::uint32 value) {
  set_has_cost_diamond_num();
  cost_diamond_num_ = value;
}

// optional uint32 cur_diamond_num = 3;
inline bool buy_record_single::has_cur_diamond_num() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void buy_record_single::set_has_cur_diamond_num() {
  _has_bits_[0] |= 0x00000004u;
}
inline void buy_record_single::clear_has_cur_diamond_num() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void buy_record_single::clear_cur_diamond_num() {
  cur_diamond_num_ = 0u;
  clear_has_cur_diamond_num();
}
inline ::google::protobuf::uint32 buy_record_single::cur_diamond_num() const {
  return cur_diamond_num_;
}
inline void buy_record_single::set_cur_diamond_num(::google::protobuf::uint32 value) {
  set_has_cur_diamond_num();
  cur_diamond_num_ = value;
}

// optional uint32 buy_time = 4;
inline bool buy_record_single::has_buy_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void buy_record_single::set_has_buy_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void buy_record_single::clear_has_buy_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void buy_record_single::clear_buy_time() {
  buy_time_ = 0u;
  clear_has_buy_time();
}
inline ::google::protobuf::uint32 buy_record_single::buy_time() const {
  return buy_time_;
}
inline void buy_record_single::set_buy_time(::google::protobuf::uint32 value) {
  set_has_buy_time();
  buy_time_ = value;
}

// -------------------------------------------------------------------

// shop_record_single

// optional uint32 shop_type = 1;
inline bool shop_record_single::has_shop_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void shop_record_single::set_has_shop_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void shop_record_single::clear_has_shop_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void shop_record_single::clear_shop_type() {
  shop_type_ = 0u;
  clear_has_shop_type();
}
inline ::google::protobuf::uint32 shop_record_single::shop_type() const {
  return shop_type_;
}
inline void shop_record_single::set_shop_type(::google::protobuf::uint32 value) {
  set_has_shop_type();
  shop_type_ = value;
}

// optional uint32 refresh_times = 2;
inline bool shop_record_single::has_refresh_times() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void shop_record_single::set_has_refresh_times() {
  _has_bits_[0] |= 0x00000002u;
}
inline void shop_record_single::clear_has_refresh_times() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void shop_record_single::clear_refresh_times() {
  refresh_times_ = 0u;
  clear_has_refresh_times();
}
inline ::google::protobuf::uint32 shop_record_single::refresh_times() const {
  return refresh_times_;
}
inline void shop_record_single::set_refresh_times(::google::protobuf::uint32 value) {
  set_has_refresh_times();
  refresh_times_ = value;
}

// optional uint32 buy_times = 3;
inline bool shop_record_single::has_buy_times() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void shop_record_single::set_has_buy_times() {
  _has_bits_[0] |= 0x00000004u;
}
inline void shop_record_single::clear_has_buy_times() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void shop_record_single::clear_buy_times() {
  buy_times_ = 0u;
  clear_has_buy_times();
}
inline ::google::protobuf::uint32 shop_record_single::buy_times() const {
  return buy_times_;
}
inline void shop_record_single::set_buy_times(::google::protobuf::uint32 value) {
  set_has_buy_times();
  buy_times_ = value;
}

// -------------------------------------------------------------------

// gm_notice_single

// optional uint32 type = 1;
inline bool gm_notice_single::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gm_notice_single::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gm_notice_single::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gm_notice_single::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 gm_notice_single::type() const {
  return type_;
}
inline void gm_notice_single::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
}

// optional uint32 tick = 2;
inline bool gm_notice_single::has_tick() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gm_notice_single::set_has_tick() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gm_notice_single::clear_has_tick() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gm_notice_single::clear_tick() {
  tick_ = 0u;
  clear_has_tick();
}
inline ::google::protobuf::uint32 gm_notice_single::tick() const {
  return tick_;
}
inline void gm_notice_single::set_tick(::google::protobuf::uint32 value) {
  set_has_tick();
  tick_ = value;
}

// optional uint32 start_time = 3;
inline bool gm_notice_single::has_start_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void gm_notice_single::set_has_start_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void gm_notice_single::clear_has_start_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void gm_notice_single::clear_start_time() {
  start_time_ = 0u;
  clear_has_start_time();
}
inline ::google::protobuf::uint32 gm_notice_single::start_time() const {
  return start_time_;
}
inline void gm_notice_single::set_start_time(::google::protobuf::uint32 value) {
  set_has_start_time();
  start_time_ = value;
}

// optional uint32 end_time = 4;
inline bool gm_notice_single::has_end_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void gm_notice_single::set_has_end_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void gm_notice_single::clear_has_end_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void gm_notice_single::clear_end_time() {
  end_time_ = 0u;
  clear_has_end_time();
}
inline ::google::protobuf::uint32 gm_notice_single::end_time() const {
  return end_time_;
}
inline void gm_notice_single::set_end_time(::google::protobuf::uint32 value) {
  set_has_end_time();
  end_time_ = value;
}

// optional uint32 last_send_time = 5;
inline bool gm_notice_single::has_last_send_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void gm_notice_single::set_has_last_send_time() {
  _has_bits_[0] |= 0x00000010u;
}
inline void gm_notice_single::clear_has_last_send_time() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void gm_notice_single::clear_last_send_time() {
  last_send_time_ = 0u;
  clear_has_last_send_time();
}
inline ::google::protobuf::uint32 gm_notice_single::last_send_time() const {
  return last_send_time_;
}
inline void gm_notice_single::set_last_send_time(::google::protobuf::uint32 value) {
  set_has_last_send_time();
  last_send_time_ = value;
}

// optional string notice = 6;
inline bool gm_notice_single::has_notice() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void gm_notice_single::set_has_notice() {
  _has_bits_[0] |= 0x00000020u;
}
inline void gm_notice_single::clear_has_notice() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void gm_notice_single::clear_notice() {
  if (notice_ != &::google::protobuf::internal::kEmptyString) {
    notice_->clear();
  }
  clear_has_notice();
}
inline const ::std::string& gm_notice_single::notice() const {
  return *notice_;
}
inline void gm_notice_single::set_notice(const ::std::string& value) {
  set_has_notice();
  if (notice_ == &::google::protobuf::internal::kEmptyString) {
    notice_ = new ::std::string;
  }
  notice_->assign(value);
}
inline void gm_notice_single::set_notice(const char* value) {
  set_has_notice();
  if (notice_ == &::google::protobuf::internal::kEmptyString) {
    notice_ = new ::std::string;
  }
  notice_->assign(value);
}
inline void gm_notice_single::set_notice(const char* value, size_t size) {
  set_has_notice();
  if (notice_ == &::google::protobuf::internal::kEmptyString) {
    notice_ = new ::std::string;
  }
  notice_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* gm_notice_single::mutable_notice() {
  set_has_notice();
  if (notice_ == &::google::protobuf::internal::kEmptyString) {
    notice_ = new ::std::string;
  }
  return notice_;
}
inline ::std::string* gm_notice_single::release_notice() {
  clear_has_notice();
  if (notice_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = notice_;
    notice_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void gm_notice_single::set_allocated_notice(::std::string* notice) {
  if (notice_ != &::google::protobuf::internal::kEmptyString) {
    delete notice_;
  }
  if (notice) {
    set_has_notice();
    notice_ = notice;
  } else {
    clear_has_notice();
    notice_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace gm_common
}  // namespace proto

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_gm_5fcommon_2eproto__INCLUDED
