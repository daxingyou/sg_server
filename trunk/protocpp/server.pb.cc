// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: server.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "server.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto {
namespace server {

namespace {

const ::google::protobuf::Descriptor* data_sync_item_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  data_sync_item_reflection_ = NULL;
const ::google::protobuf::Descriptor* server_pingpong_request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  server_pingpong_request_reflection_ = NULL;
const ::google::protobuf::Descriptor* la_login_request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  la_login_request_reflection_ = NULL;
const ::google::protobuf::Descriptor* al_login_reply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  al_login_reply_reflection_ = NULL;
const ::google::protobuf::Descriptor* gr_role_leave_game_notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gr_role_leave_game_notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* ag_role_enter_game_notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ag_role_enter_game_notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* ga_role_move_notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ga_role_move_notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* ga_role_into_vision_notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ga_role_into_vision_notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* ga_role_out_vision_notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ga_role_out_vision_notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* ga_broadcast_notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ga_broadcast_notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* ea_broadcast_notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ea_broadcast_notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* al_kick_role_notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  al_kick_role_notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* al_kick_gate_all_user_notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  al_kick_gate_all_user_notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* gh_kick_role_notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gh_kick_role_notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* gd_batch_save_to_db_notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gd_batch_save_to_db_notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* save_to_db_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  save_to_db_reflection_ = NULL;
const ::google::protobuf::Descriptor* gd_role_data_request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gd_role_data_request_reflection_ = NULL;
const ::google::protobuf::Descriptor* dg_role_data_reply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  dg_role_data_reply_reflection_ = NULL;
const ::google::protobuf::Descriptor* al_update_gate_user_num_notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  al_update_gate_user_num_notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* de_user_data_reply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  de_user_data_reply_reflection_ = NULL;
const ::google::protobuf::Descriptor* de_user_center_data_reply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  de_user_center_data_reply_reflection_ = NULL;
const ::google::protobuf::Descriptor* ed_sync_role_data_request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ed_sync_role_data_request_reflection_ = NULL;
const ::google::protobuf::Descriptor* ag_save_user_notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ag_save_user_notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* ln_syn_login_info_notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ln_syn_login_info_notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* ln_close_server_notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ln_close_server_notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* ln_user_num_notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ln_user_num_notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* ag_syn_gate_info_notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ag_syn_gate_info_notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* gh_syn_online_role_notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gh_syn_online_role_notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* hg_test_notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  hg_test_notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* ah_syn_gate_info_notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ah_syn_gate_info_notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* ha_test_reply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ha_test_reply_reflection_ = NULL;
const ::google::protobuf::Descriptor* gh_syn_game_info_notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gh_syn_game_info_notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* hg_chat_get_role_info_request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  hg_chat_get_role_info_request_reflection_ = NULL;
const ::google::protobuf::Descriptor* gh_chat_get_role_info_reply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gh_chat_get_role_info_reply_reflection_ = NULL;
const ::google::protobuf::Descriptor* hg_get_nearby_roles_request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  hg_get_nearby_roles_request_reflection_ = NULL;
const ::google::protobuf::Descriptor* gh_get_nearby_roles_reply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gh_get_nearby_roles_reply_reflection_ = NULL;
const ::google::protobuf::Descriptor* hg_task_seek_help_request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  hg_task_seek_help_request_reflection_ = NULL;
const ::google::protobuf::Descriptor* gh_task_seek_help_reply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gh_task_seek_help_reply_reflection_ = NULL;
const ::google::protobuf::Descriptor* hf_syn_chat_info_notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  hf_syn_chat_info_notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* fh_syn_transfer_info_notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  fh_syn_transfer_info_notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* gh_gm_cmd_notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gh_gm_cmd_notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* hf_gm_cmd_notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  hf_gm_cmd_notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* fh_test_reply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  fh_test_reply_reflection_ = NULL;
const ::google::protobuf::Descriptor* hg_syn_online_role_list_request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  hg_syn_online_role_list_request_reflection_ = NULL;
const ::google::protobuf::Descriptor* gh_syn_online_role_list_notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gh_syn_online_role_list_notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* eh_country_member_change_notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  eh_country_member_change_notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* eh_family_member_change_notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  eh_family_member_change_notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* hf_get_server_channel_list_request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  hf_get_server_channel_list_request_reflection_ = NULL;
const ::google::protobuf::Descriptor* fh_get_server_channel_list_reply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  fh_get_server_channel_list_reply_reflection_ = NULL;
const ::google::protobuf::Descriptor* hf_change_server_channel_request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  hf_change_server_channel_request_reflection_ = NULL;
const ::google::protobuf::Descriptor* fh_change_server_channel_reply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  fh_change_server_channel_reply_reflection_ = NULL;
const ::google::protobuf::Descriptor* fh_change_server_channel_notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  fh_change_server_channel_notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* ha_change_server_channel_notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ha_change_server_channel_notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* hf_server_channel_chat_request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  hf_server_channel_chat_request_reflection_ = NULL;
const ::google::protobuf::Descriptor* fh_server_channel_chat_reply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  fh_server_channel_chat_reply_reflection_ = NULL;
const ::google::protobuf::Descriptor* fh_server_channel_chat_notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  fh_server_channel_chat_notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* ha_server_channel_chat_notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ha_server_channel_chat_notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* hf_personal_chat_request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  hf_personal_chat_request_reflection_ = NULL;
const ::google::protobuf::Descriptor* fh_personal_chat_notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  fh_personal_chat_notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* ha_personal_chat_notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ha_personal_chat_notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* he_family_chat_notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  he_family_chat_notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* he_personal_chat_notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  he_personal_chat_notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* eh_kick_all_user_notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  eh_kick_all_user_notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* dn_create_role_request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  dn_create_role_request_reflection_ = NULL;
const ::google::protobuf::Descriptor* nd_create_role_reply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  nd_create_role_reply_reflection_ = NULL;
const ::google::protobuf::Descriptor* dn_role_data_update_notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  dn_role_data_update_notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* hg_user_channel_notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  hg_user_channel_notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* ge_syn_game_info_notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ge_syn_game_info_notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* gd_syn_game_info_notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gd_syn_game_info_notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* al_syn_gate_info_notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  al_syn_gate_info_notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* ga_syn_game_info_notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ga_syn_game_info_notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* ga_syn_cross_id_notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ga_syn_cross_id_notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* ae_syn_gate_info_notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ae_syn_gate_info_notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* cross_server_data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  cross_server_data_reflection_ = NULL;
const ::google::protobuf::Descriptor* ae_reg_user_center_request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ae_reg_user_center_request_reflection_ = NULL;
const ::google::protobuf::Descriptor* ae_unreg_user_scene_notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ae_unreg_user_scene_notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* ea_unreg_user_center_notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ea_unreg_user_center_notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* ae_create_role_request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ae_create_role_request_reflection_ = NULL;
const ::google::protobuf::Descriptor* ea_create_role_reply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ea_create_role_reply_reflection_ = NULL;
const ::google::protobuf::Descriptor* ae_user_cross_server_notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ae_user_cross_server_notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* ea_kick_all_user_notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ea_kick_all_user_notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* global_user_data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  global_user_data_reflection_ = NULL;
const ::google::protobuf::Descriptor* eg_unreg_user_scene_notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  eg_unreg_user_scene_notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* ge_unreg_user_scene_notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ge_unreg_user_scene_notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* eg_reg_user_scene_request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  eg_reg_user_scene_request_reflection_ = NULL;
const ::google::protobuf::Descriptor* ge_reg_user_scene_reply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ge_reg_user_scene_reply_reflection_ = NULL;
const ::google::protobuf::Descriptor* eg_relogin_scene_request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  eg_relogin_scene_request_reflection_ = NULL;
const ::google::protobuf::Descriptor* ge_user_cross_scene_request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ge_user_cross_scene_request_reflection_ = NULL;
const ::google::protobuf::Descriptor* eg_user_cross_scene_reply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  eg_user_cross_scene_reply_reflection_ = NULL;
const ::google::protobuf::Descriptor* eg_kick_all_user_notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  eg_kick_all_user_notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* ed_create_role_request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ed_create_role_request_reflection_ = NULL;
const ::google::protobuf::Descriptor* de_create_role_reply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  de_create_role_reply_reflection_ = NULL;
const ::google::protobuf::Descriptor* ed_query_role_data_request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ed_query_role_data_request_reflection_ = NULL;
const ::google::protobuf::Descriptor* de_query_role_data_reply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  de_query_role_data_reply_reflection_ = NULL;
const ::google::protobuf::Descriptor* ed_role_leave_game_notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ed_role_leave_game_notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* ag_unreg_user_scene_notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ag_unreg_user_scene_notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* ga_unreg_user_scene_notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ga_unreg_user_scene_notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* ga_reg_user_success_notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ga_reg_user_success_notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* ga_user_cross_server_notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ga_user_cross_server_notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* ge_city_trade_add_prosperity_value_notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ge_city_trade_add_prosperity_value_notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* eg_city_base_info_notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  eg_city_base_info_notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* ge_get_city_list_request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ge_get_city_list_request_reflection_ = NULL;
const ::google::protobuf::Descriptor* eg_get_city_list_reply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  eg_get_city_list_reply_reflection_ = NULL;
const ::google::protobuf::Descriptor* eh_test_request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  eh_test_request_reflection_ = NULL;
const ::google::protobuf::Descriptor* he_test_reply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  he_test_reply_reflection_ = NULL;
const ::google::protobuf::Descriptor* ge_update_rank_notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ge_update_rank_notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* ge_create_family_request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ge_create_family_request_reflection_ = NULL;
const ::google::protobuf::Descriptor* eg_update_family_info_notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  eg_update_family_info_notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* eg_create_family_reply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  eg_create_family_reply_reflection_ = NULL;
const ::google::protobuf::Descriptor* ge_impeach_family_general_request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ge_impeach_family_general_request_reflection_ = NULL;
const ::google::protobuf::Descriptor* eg_impeach_family_general_reply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  eg_impeach_family_general_reply_reflection_ = NULL;
const ::google::protobuf::Descriptor* eg_notify_game_impeach_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  eg_notify_game_impeach_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* family_war_dungeon_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  family_war_dungeon_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* family_war_dungeon_data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  family_war_dungeon_data_reflection_ = NULL;
const ::google::protobuf::Descriptor* family_war_dungeon_back_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  family_war_dungeon_back_reflection_ = NULL;
const ::google::protobuf::Descriptor* eg_prepare_family_war_request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  eg_prepare_family_war_request_reflection_ = NULL;
const ::google::protobuf::Descriptor* ge_prepare_family_war_reply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ge_prepare_family_war_reply_reflection_ = NULL;
const ::google::protobuf::Descriptor* eg_family_war_start_notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  eg_family_war_start_notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* eg_family_war_end_notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  eg_family_war_end_notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* eg_enter_family_war_scene_request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  eg_enter_family_war_scene_request_reflection_ = NULL;
const ::google::protobuf::Descriptor* family_war_personal_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  family_war_personal_reflection_ = NULL;
const ::google::protobuf::Descriptor* family_war_result_data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  family_war_result_data_reflection_ = NULL;
const ::google::protobuf::Descriptor* ge_family_war_early_result_notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ge_family_war_early_result_notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* ge_family_war_result_notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ge_family_war_result_notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* ge_family_update_glory_notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ge_family_update_glory_notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* ge_family_prayer_request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ge_family_prayer_request_reflection_ = NULL;
const ::google::protobuf::Descriptor* ge_family_prayer_gift_request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ge_family_prayer_gift_request_reflection_ = NULL;
const ::google::protobuf::Descriptor* eg_family_prayer_gift_failed_notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  eg_family_prayer_gift_failed_notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* eg_family_country_change_notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  eg_family_country_change_notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* eg_family_level_change_notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  eg_family_level_change_notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* ge_family_shop_buy_request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ge_family_shop_buy_request_reflection_ = NULL;
const ::google::protobuf::Descriptor* eg_family_shop_buy_reply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  eg_family_shop_buy_reply_reflection_ = NULL;
const ::google::protobuf::Descriptor* ge_family_shop_back_notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ge_family_shop_back_notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* ge_gm_set_king_family_notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ge_gm_set_king_family_notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* eg_update_country_notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  eg_update_country_notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* eg_country_name_change_request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  eg_country_name_change_request_reflection_ = NULL;
const ::google::protobuf::Descriptor* ge_country_name_change_reply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ge_country_name_change_reply_reflection_ = NULL;
const ::google::protobuf::Descriptor* eg_country_year_name_request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  eg_country_year_name_request_reflection_ = NULL;
const ::google::protobuf::Descriptor* ge_country_year_name_reply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ge_country_year_name_reply_reflection_ = NULL;
const ::google::protobuf::Descriptor* eg_sync_data_request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  eg_sync_data_request_reflection_ = NULL;
const ::google::protobuf::Descriptor* ge_sync_data_request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ge_sync_data_request_reflection_ = NULL;
const ::google::protobuf::Descriptor* ge_ready_enter_scene_notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ge_ready_enter_scene_notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* eg_summon_field_boss_request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  eg_summon_field_boss_request_reflection_ = NULL;
const ::google::protobuf::Descriptor* eg_field_boss_die_notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  eg_field_boss_die_notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* ge_summon_field_boss_replay_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ge_summon_field_boss_replay_reflection_ = NULL;
const ::google::protobuf::Descriptor* eg_clear_all_boss_notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  eg_clear_all_boss_notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* ge_field_boss_killed_notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ge_field_boss_killed_notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* field_boss_rank_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  field_boss_rank_reflection_ = NULL;
const ::google::protobuf::Descriptor* ge_field_boss_rank_notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ge_field_boss_rank_notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* ge_check_drop_items_request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ge_check_drop_items_request_reflection_ = NULL;
const ::google::protobuf::Descriptor* eg_check_drop_items_reply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  eg_check_drop_items_reply_reflection_ = NULL;
const ::google::protobuf::Descriptor* eg_syn_item_limit_notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  eg_syn_item_limit_notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* ge_redbag_send_notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ge_redbag_send_notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* eg_redbag_draw_notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  eg_redbag_draw_notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* gall_reload_config_notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gall_reload_config_notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* eg_chat_get_role_info_request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  eg_chat_get_role_info_request_reflection_ = NULL;
const ::google::protobuf::Descriptor* ge_chat_get_role_info_reply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ge_chat_get_role_info_reply_reflection_ = NULL;
const ::google::protobuf::Descriptor* fr_syn_transfer_info_request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  fr_syn_transfer_info_request_reflection_ = NULL;
const ::google::protobuf::Descriptor* fr_test_request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  fr_test_request_reflection_ = NULL;
const ::google::protobuf::Descriptor* rf_test_reply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  rf_test_reply_reflection_ = NULL;
const ::google::protobuf::Descriptor* mail_get_addenda_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mail_get_addenda_reflection_ = NULL;
const ::google::protobuf::Descriptor* eg_mail_get_addenda_request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  eg_mail_get_addenda_request_reflection_ = NULL;
const ::google::protobuf::Descriptor* mail_get_addenda_back_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mail_get_addenda_back_reflection_ = NULL;
const ::google::protobuf::Descriptor* ge_mail_get_addenda_reply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ge_mail_get_addenda_reply_reflection_ = NULL;
const ::google::protobuf::Descriptor* ge_mail_new_notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ge_mail_new_notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* sr_syn_cross_info_notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  sr_syn_cross_info_notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* rs_syn_area_info_notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  rs_syn_area_info_notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* rs_cross_fight_test_notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  rs_cross_fight_test_notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* gr_cross_fight_test_notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gr_cross_fight_test_notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* ef_syn_center_info_notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ef_syn_center_info_notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* ef_test_request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ef_test_request_reflection_ = NULL;
const ::google::protobuf::Descriptor* fe_syn_transfer_info_notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  fe_syn_transfer_info_notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* fe_test_reply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  fe_test_reply_reflection_ = NULL;
const ::google::protobuf::Descriptor* rs_arena_battle_notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  rs_arena_battle_notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* rs_arena_battle_ai_notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  rs_arena_battle_ai_notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* sr_arena_battle_result_notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  sr_arena_battle_result_notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* gr_arena_match_request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gr_arena_match_request_reflection_ = NULL;
const ::google::protobuf::Descriptor* rg_arena_match_reply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  rg_arena_match_reply_reflection_ = NULL;
const ::google::protobuf::Descriptor* gr_arena_cancel_match_request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gr_arena_cancel_match_request_reflection_ = NULL;
const ::google::protobuf::Descriptor* rg_arena_cancel_match_reply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  rg_arena_cancel_match_reply_reflection_ = NULL;
const ::google::protobuf::Descriptor* rg_arena_battle_result_notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  rg_arena_battle_result_notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* gr_get_arena_rank_data_request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gr_get_arena_rank_data_request_reflection_ = NULL;
const ::google::protobuf::Descriptor* rg_get_arena_rank_data_reply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  rg_get_arena_rank_data_reply_reflection_ = NULL;
const ::google::protobuf::Descriptor* gr_arena_self_rank_request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gr_arena_self_rank_request_reflection_ = NULL;
const ::google::protobuf::Descriptor* rg_arena_self_rank_reply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  rg_arena_self_rank_reply_reflection_ = NULL;
const ::google::protobuf::Descriptor* ge_arena_fight_data_notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ge_arena_fight_data_notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* ge_role_online_notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ge_role_online_notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* ge_challenge_request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ge_challenge_request_reflection_ = NULL;
const ::google::protobuf::Descriptor* eg_challenge_reply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  eg_challenge_reply_reflection_ = NULL;
const ::google::protobuf::Descriptor* ge_challenge_process_request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ge_challenge_process_request_reflection_ = NULL;
const ::google::protobuf::Descriptor* eg_challenge_process_reply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  eg_challenge_process_reply_reflection_ = NULL;
const ::google::protobuf::Descriptor* eg_challenge_fight_request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  eg_challenge_fight_request_reflection_ = NULL;
const ::google::protobuf::Descriptor* ge_challenge_fight_reply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ge_challenge_fight_reply_reflection_ = NULL;
const ::google::protobuf::Descriptor* ge_pk_beat_criminal_notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ge_pk_beat_criminal_notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* eg_challenge_transfer_notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  eg_challenge_transfer_notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* eg_king_war_state_notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  eg_king_war_state_notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* eg_king_war_time_end_notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  eg_king_war_time_end_notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* king_war_personal_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  king_war_personal_reflection_ = NULL;
const ::google::protobuf::Descriptor* ge_king_war_result_notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ge_king_war_result_notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* ge_king_war_scene_user_num_notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ge_king_war_scene_user_num_notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* eg_check_user_buy_goods_request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  eg_check_user_buy_goods_request_reflection_ = NULL;
const ::google::protobuf::Descriptor* ge_check_user_buy_goods_reply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ge_check_user_buy_goods_reply_reflection_ = NULL;
const ::google::protobuf::Descriptor* eg_give_user_goods_notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  eg_give_user_goods_notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* er_world_cup_data_request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  er_world_cup_data_request_reflection_ = NULL;
const ::google::protobuf::Descriptor* re_world_cup_data_reply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  re_world_cup_data_reply_reflection_ = NULL;
const ::google::protobuf::Descriptor* re_world_cup_battle_notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  re_world_cup_battle_notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* re_world_cup_mail_notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  re_world_cup_mail_notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* re_world_cup_coming_quarter_notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  re_world_cup_coming_quarter_notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* re_world_cup_coming_soon_notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  re_world_cup_coming_soon_notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* re_world_cup_ready_notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  re_world_cup_ready_notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* gr_world_cup_play_request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gr_world_cup_play_request_reflection_ = NULL;
const ::google::protobuf::Descriptor* rg_world_cup_play_reply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  rg_world_cup_play_reply_reflection_ = NULL;
const ::google::protobuf::Descriptor* re_world_cup_update_notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  re_world_cup_update_notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* er_world_cup_bet_data_request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  er_world_cup_bet_data_request_reflection_ = NULL;
const ::google::protobuf::Descriptor* re_world_cup_bet_data_reply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  re_world_cup_bet_data_reply_reflection_ = NULL;
const ::google::protobuf::Descriptor* gr_world_cup_bet_request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gr_world_cup_bet_request_reflection_ = NULL;
const ::google::protobuf::Descriptor* rg_world_cup_bet_reply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  rg_world_cup_bet_reply_reflection_ = NULL;
const ::google::protobuf::Descriptor* gr_world_cup_bet_reward_request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gr_world_cup_bet_reward_request_reflection_ = NULL;
const ::google::protobuf::Descriptor* rg_world_cup_bet_reward_reply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  rg_world_cup_bet_reward_reply_reflection_ = NULL;
const ::google::protobuf::Descriptor* er_world_cup_odds_request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  er_world_cup_odds_request_reflection_ = NULL;
const ::google::protobuf::Descriptor* re_world_cup_odds_reply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  re_world_cup_odds_reply_reflection_ = NULL;
const ::google::protobuf::Descriptor* eg_red_point_notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  eg_red_point_notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* troop_shadow_base_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  troop_shadow_base_reflection_ = NULL;
const ::google::protobuf::Descriptor* troop_extra_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  troop_extra_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* troop_server_data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  troop_server_data_reflection_ = NULL;
const ::google::protobuf::Descriptor* eg_troop_event_notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  eg_troop_event_notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* ge_troop_create_request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ge_troop_create_request_reflection_ = NULL;
const ::google::protobuf::Descriptor* ge_troop_auto_match_request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ge_troop_auto_match_request_reflection_ = NULL;
const ::google::protobuf::Descriptor* ge_troop_join_request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ge_troop_join_request_reflection_ = NULL;
const ::google::protobuf::Descriptor* eg_troop_agree_apply_request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  eg_troop_agree_apply_request_reflection_ = NULL;
const ::google::protobuf::Descriptor* ge_troop_agree_apply_reply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ge_troop_agree_apply_reply_reflection_ = NULL;
const ::google::protobuf::Descriptor* ge_troop_process_invite_request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ge_troop_process_invite_request_reflection_ = NULL;
const ::google::protobuf::Descriptor* ge_troop_dissolve_notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ge_troop_dissolve_notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* ge_troop_back_request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ge_troop_back_request_reflection_ = NULL;
const ::google::protobuf::Descriptor* ge_troop_transmission_notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ge_troop_transmission_notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* ge_troop_escape_notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ge_troop_escape_notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* eg_troop_invite_shadow_notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  eg_troop_invite_shadow_notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* ge_troop_del_shadow_notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ge_troop_del_shadow_notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* ge_troop_friend_notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ge_troop_friend_notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* game_scene_reg_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  game_scene_reg_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* game_scene_reg_ret_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  game_scene_reg_ret_reflection_ = NULL;
const ::google::protobuf::Descriptor* ge_game_scene_reg_request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ge_game_scene_reg_request_reflection_ = NULL;
const ::google::protobuf::Descriptor* eg_game_scene_reg_reply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  eg_game_scene_reg_reply_reflection_ = NULL;
const ::google::protobuf::Descriptor* ge_role_scene_info_notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ge_role_scene_info_notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* ge_game_scene_unload_notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ge_game_scene_unload_notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* dungeon_create_data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  dungeon_create_data_reflection_ = NULL;
const ::google::protobuf::Descriptor* ge_open_dungeon_request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ge_open_dungeon_request_reflection_ = NULL;
const ::google::protobuf::Descriptor* eg_create_dugeon_request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  eg_create_dugeon_request_reflection_ = NULL;
const ::google::protobuf::Descriptor* ge_create_dugeon_reply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ge_create_dugeon_reply_reflection_ = NULL;
const ::google::protobuf::Descriptor* eg_open_dungeon_reply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  eg_open_dungeon_reply_reflection_ = NULL;
const ::google::protobuf::Descriptor* ge_scene_state_notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ge_scene_state_notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* ge_goods_buy_request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ge_goods_buy_request_reflection_ = NULL;
const ::google::protobuf::Descriptor* eg_goods_buy_reply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  eg_goods_buy_reply_reflection_ = NULL;
const ::google::protobuf::Descriptor* ge_goods_sell_request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ge_goods_sell_request_reflection_ = NULL;
const ::google::protobuf::Descriptor* eg_goods_sell_reply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  eg_goods_sell_reply_reflection_ = NULL;
const ::google::protobuf::Descriptor* ge_goods_return_request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ge_goods_return_request_reflection_ = NULL;
const ::google::protobuf::Descriptor* eg_goods_return_reply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  eg_goods_return_reply_reflection_ = NULL;
const ::google::protobuf::Descriptor* ge_goods_resell_request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ge_goods_resell_request_reflection_ = NULL;
const ::google::protobuf::Descriptor* eg_goods_resell_reply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  eg_goods_resell_reply_reflection_ = NULL;
const ::google::protobuf::Descriptor* ge_goods_profit_request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ge_goods_profit_request_reflection_ = NULL;
const ::google::protobuf::Descriptor* eg_goods_profit_reply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  eg_goods_profit_reply_reflection_ = NULL;
const ::google::protobuf::Descriptor* ge_expedition_fight_data_request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ge_expedition_fight_data_request_reflection_ = NULL;
const ::google::protobuf::Descriptor* eg_expedition_fight_data_reply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  eg_expedition_fight_data_reply_reflection_ = NULL;
const ::google::protobuf::Descriptor* ge_expedition_refresh_request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ge_expedition_refresh_request_reflection_ = NULL;
const ::google::protobuf::Descriptor* eg_expedition_refresh_reply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  eg_expedition_refresh_reply_reflection_ = NULL;
const ::google::protobuf::Descriptor* ge_expedition_refresh_stage_request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ge_expedition_refresh_stage_request_reflection_ = NULL;
const ::google::protobuf::Descriptor* eg_expedition_refresh_stage_reply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  eg_expedition_refresh_stage_reply_reflection_ = NULL;
const ::google::protobuf::Descriptor* ge_expedition_help_request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ge_expedition_help_request_reflection_ = NULL;
const ::google::protobuf::Descriptor* eg_expedition_help_reply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  eg_expedition_help_reply_reflection_ = NULL;
const ::google::protobuf::Descriptor* global_data_day_update_time_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  global_data_day_update_time_reflection_ = NULL;
const ::google::protobuf::Descriptor* global_data_family_war_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  global_data_family_war_reflection_ = NULL;
const ::google::protobuf::Descriptor* global_data_country_data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  global_data_country_data_reflection_ = NULL;
const ::google::protobuf::Descriptor* global_data_king_war_data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  global_data_king_war_data_reflection_ = NULL;
const ::google::protobuf::Descriptor* eg_offline_data_notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  eg_offline_data_notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* ge_offline_data_notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ge_offline_data_notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* eg_notify_progress_state_notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  eg_notify_progress_state_notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* hg_notify_progress_state_notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  hg_notify_progress_state_notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* ge_tower_trigger_notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ge_tower_trigger_notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* eg_tower_trigger_notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  eg_tower_trigger_notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* eg_two_side_friend_notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  eg_two_side_friend_notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* ge_check_sys_notice_request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ge_check_sys_notice_request_reflection_ = NULL;
const ::google::protobuf::Descriptor* eg_check_sys_notice_reply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  eg_check_sys_notice_reply_reflection_ = NULL;
const ::google::protobuf::Descriptor* eg_syn_sys_notice_notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  eg_syn_sys_notice_notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* ge_gm_clear_notice_request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ge_gm_clear_notice_request_reflection_ = NULL;
const ::google::protobuf::Descriptor* eg_gm_clear_notice_notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  eg_gm_clear_notice_notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* ge_role_simple_data_notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ge_role_simple_data_notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* eg_offline_arena_join_notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  eg_offline_arena_join_notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* ge_offline_arena_form_notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ge_offline_arena_form_notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* eg_offline_arena_fight_request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  eg_offline_arena_fight_request_reflection_ = NULL;
const ::google::protobuf::Descriptor* ge_offline_arena_fight_reply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ge_offline_arena_fight_reply_reflection_ = NULL;
const ::google::protobuf::Descriptor* eg_offline_arena_record_award_notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  eg_offline_arena_record_award_notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* eg_offline_arena_score_award_notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  eg_offline_arena_score_award_notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* eg_offline_arena_sweep_award_notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  eg_offline_arena_sweep_award_notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* eg_offline_arena_class_award_notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  eg_offline_arena_class_award_notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* ge_offline_arena_buy_request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ge_offline_arena_buy_request_reflection_ = NULL;
const ::google::protobuf::Descriptor* eg_offline_arena_buy_reply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  eg_offline_arena_buy_reply_reflection_ = NULL;
const ::google::protobuf::Descriptor* ge_offline_arena_gmrank_notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ge_offline_arena_gmrank_notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* hr_get_hero_strategy_info_request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  hr_get_hero_strategy_info_request_reflection_ = NULL;
const ::google::protobuf::Descriptor* rh_get_hero_strategy_info_reply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  rh_get_hero_strategy_info_reply_reflection_ = NULL;
const ::google::protobuf::Descriptor* ge_troop_sync_task_request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ge_troop_sync_task_request_reflection_ = NULL;
const ::google::protobuf::Descriptor* eg_buy_wish_summon_request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  eg_buy_wish_summon_request_reflection_ = NULL;
const ::google::protobuf::Descriptor* ge_buy_wish_summon_reply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ge_buy_wish_summon_reply_reflection_ = NULL;
const ::google::protobuf::Descriptor* eg_king_open_wish_summon_request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  eg_king_open_wish_summon_request_reflection_ = NULL;
const ::google::protobuf::Descriptor* ge_king_open_wish_summon_reply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ge_king_open_wish_summon_reply_reflection_ = NULL;
const ::google::protobuf::Descriptor* ge_modify_family_money_request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ge_modify_family_money_request_reflection_ = NULL;
const ::google::protobuf::Descriptor* ge_modify_country_money_request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ge_modify_country_money_request_reflection_ = NULL;
const ::google::protobuf::Descriptor* ge_get_wish_summon_info_reply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ge_get_wish_summon_info_reply_reflection_ = NULL;
const ::google::protobuf::Descriptor* ge_destine_item_request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ge_destine_item_request_reflection_ = NULL;
const ::google::protobuf::Descriptor* eg_destine_item_reply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  eg_destine_item_reply_reflection_ = NULL;
const ::google::protobuf::Descriptor* ge_undestine_item_request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ge_undestine_item_request_reflection_ = NULL;
const ::google::protobuf::Descriptor* ge_push_general_event_request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ge_push_general_event_request_reflection_ = NULL;
const ::google::protobuf::Descriptor* eg_sync_general_event_count_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  eg_sync_general_event_count_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* eg_sync_general_event_data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  eg_sync_general_event_data_reflection_ = NULL;
const ::google::protobuf::Descriptor* eg_sync_general_event_open_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  eg_sync_general_event_open_reflection_ = NULL;
const ::google::protobuf::Descriptor* eg_sync_general_event_done_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  eg_sync_general_event_done_reflection_ = NULL;
const ::google::protobuf::Descriptor* eg_sync_server_level_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  eg_sync_server_level_reflection_ = NULL;
const ::google::protobuf::Descriptor* me_transport_ntf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  me_transport_ntf_reflection_ = NULL;
const ::google::protobuf::Descriptor* eg_gm_transport_ntf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  eg_gm_transport_ntf_reflection_ = NULL;
const ::google::protobuf::Descriptor* ea_send_gm_msg_to_account_request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ea_send_gm_msg_to_account_request_reflection_ = NULL;
const ::google::protobuf::Descriptor* ae_send_gm_msg_to_account_reply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ae_send_gm_msg_to_account_reply_reflection_ = NULL;
const ::google::protobuf::Descriptor* al_send_gm_msg_to_account_requst_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  al_send_gm_msg_to_account_requst_reflection_ = NULL;
const ::google::protobuf::Descriptor* la_send_gm_msg_to_account_reply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  la_send_gm_msg_to_account_reply_reflection_ = NULL;
const ::google::protobuf::Descriptor* ln_send_gm_msg_to_account_request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ln_send_gm_msg_to_account_request_reflection_ = NULL;
const ::google::protobuf::Descriptor* nl_send_gm_msg_to_account_reply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  nl_send_gm_msg_to_account_reply_reflection_ = NULL;
const ::google::protobuf::Descriptor* me_manage_role_ntf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  me_manage_role_ntf_reflection_ = NULL;
const ::google::protobuf::Descriptor* em_manage_role_ntf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  em_manage_role_ntf_reflection_ = NULL;
const ::google::protobuf::Descriptor* eh_silence_role_notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  eh_silence_role_notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* nl_syn_account_info_notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  nl_syn_account_info_notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* nd_syn_account_info_notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  nd_syn_account_info_notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* gd_change_name_request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gd_change_name_request_reflection_ = NULL;
const ::google::protobuf::Descriptor* dg_change_name_reply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  dg_change_name_reply_reflection_ = NULL;
const ::google::protobuf::Descriptor* de_change_name_notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  de_change_name_notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* eh_change_name_notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  eh_change_name_notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* me_reload_config_notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  me_reload_config_notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* eg_reload_config_notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  eg_reload_config_notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* ge_change_friendliness_request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ge_change_friendliness_request_reflection_ = NULL;
const ::google::protobuf::Descriptor* eg_change_friendliness_notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  eg_change_friendliness_notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* ge_get_friendliness_request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ge_get_friendliness_request_reflection_ = NULL;
const ::google::protobuf::Descriptor* player_friendliness_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  player_friendliness_reflection_ = NULL;
const ::google::protobuf::Descriptor* eg_get_friendliness_reply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  eg_get_friendliness_reply_reflection_ = NULL;
const ::google::protobuf::Descriptor* eg_friend_point_operation_request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  eg_friend_point_operation_request_reflection_ = NULL;
const ::google::protobuf::Descriptor* ge_friend_point_operation_reply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ge_friend_point_operation_reply_reflection_ = NULL;
const ::google::protobuf::Descriptor* sv_cross_area_video_notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  sv_cross_area_video_notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* gv_tower_video_notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gv_tower_video_notify_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* data_sync_type_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* scene_change_type_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* family_money_change_type_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* country_money_change_type_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EM_FIELD_MODE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* em_map_type_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* dungeon_create_type_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* em_scene_type_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* global_data_type_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* friend_point_operation_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_server_2eproto() {
  protobuf_AddDesc_server_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "server.proto");
  GOOGLE_CHECK(file != NULL);
  data_sync_item_descriptor_ = file->message_type(0);
  static const int data_sync_item_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(data_sync_item, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(data_sync_item, value_),
  };
  data_sync_item_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      data_sync_item_descriptor_,
      data_sync_item::default_instance_,
      data_sync_item_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(data_sync_item, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(data_sync_item, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(data_sync_item));
  server_pingpong_request_descriptor_ = file->message_type(1);
  static const int server_pingpong_request_offsets_[1] = {
  };
  server_pingpong_request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      server_pingpong_request_descriptor_,
      server_pingpong_request::default_instance_,
      server_pingpong_request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(server_pingpong_request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(server_pingpong_request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(server_pingpong_request));
  la_login_request_descriptor_ = file->message_type(2);
  static const int la_login_request_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(la_login_request, guid_),
  };
  la_login_request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      la_login_request_descriptor_,
      la_login_request::default_instance_,
      la_login_request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(la_login_request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(la_login_request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(la_login_request));
  al_login_reply_descriptor_ = file->message_type(3);
  static const int al_login_reply_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(al_login_reply, reply_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(al_login_reply, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(al_login_reply, gate_ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(al_login_reply, gate_port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(al_login_reply, session_id_),
  };
  al_login_reply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      al_login_reply_descriptor_,
      al_login_reply::default_instance_,
      al_login_reply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(al_login_reply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(al_login_reply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(al_login_reply));
  gr_role_leave_game_notify_descriptor_ = file->message_type(4);
  static const int gr_role_leave_game_notify_offsets_[1] = {
  };
  gr_role_leave_game_notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gr_role_leave_game_notify_descriptor_,
      gr_role_leave_game_notify::default_instance_,
      gr_role_leave_game_notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gr_role_leave_game_notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gr_role_leave_game_notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gr_role_leave_game_notify));
  ag_role_enter_game_notify_descriptor_ = file->message_type(5);
  static const int ag_role_enter_game_notify_offsets_[1] = {
  };
  ag_role_enter_game_notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ag_role_enter_game_notify_descriptor_,
      ag_role_enter_game_notify::default_instance_,
      ag_role_enter_game_notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ag_role_enter_game_notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ag_role_enter_game_notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ag_role_enter_game_notify));
  ga_role_move_notify_descriptor_ = file->message_type(6);
  static const int ga_role_move_notify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ga_role_move_notify, role_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ga_role_move_notify, msg_),
  };
  ga_role_move_notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ga_role_move_notify_descriptor_,
      ga_role_move_notify::default_instance_,
      ga_role_move_notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ga_role_move_notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ga_role_move_notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ga_role_move_notify));
  ga_role_into_vision_notify_descriptor_ = file->message_type(7);
  static const int ga_role_into_vision_notify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ga_role_into_vision_notify, role_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ga_role_into_vision_notify, msg_),
  };
  ga_role_into_vision_notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ga_role_into_vision_notify_descriptor_,
      ga_role_into_vision_notify::default_instance_,
      ga_role_into_vision_notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ga_role_into_vision_notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ga_role_into_vision_notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ga_role_into_vision_notify));
  ga_role_out_vision_notify_descriptor_ = file->message_type(8);
  static const int ga_role_out_vision_notify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ga_role_out_vision_notify, role_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ga_role_out_vision_notify, msg_),
  };
  ga_role_out_vision_notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ga_role_out_vision_notify_descriptor_,
      ga_role_out_vision_notify::default_instance_,
      ga_role_out_vision_notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ga_role_out_vision_notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ga_role_out_vision_notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ga_role_out_vision_notify));
  ga_broadcast_notify_descriptor_ = file->message_type(9);
  static const int ga_broadcast_notify_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ga_broadcast_notify, role_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ga_broadcast_notify, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ga_broadcast_notify, data_),
  };
  ga_broadcast_notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ga_broadcast_notify_descriptor_,
      ga_broadcast_notify::default_instance_,
      ga_broadcast_notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ga_broadcast_notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ga_broadcast_notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ga_broadcast_notify));
  ea_broadcast_notify_descriptor_ = file->message_type(10);
  static const int ea_broadcast_notify_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ea_broadcast_notify, role_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ea_broadcast_notify, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ea_broadcast_notify, data_),
  };
  ea_broadcast_notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ea_broadcast_notify_descriptor_,
      ea_broadcast_notify::default_instance_,
      ea_broadcast_notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ea_broadcast_notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ea_broadcast_notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ea_broadcast_notify));
  al_kick_role_notify_descriptor_ = file->message_type(11);
  static const int al_kick_role_notify_offsets_[1] = {
  };
  al_kick_role_notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      al_kick_role_notify_descriptor_,
      al_kick_role_notify::default_instance_,
      al_kick_role_notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(al_kick_role_notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(al_kick_role_notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(al_kick_role_notify));
  al_kick_gate_all_user_notify_descriptor_ = file->message_type(12);
  static const int al_kick_gate_all_user_notify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(al_kick_gate_all_user_notify, gate_id_),
  };
  al_kick_gate_all_user_notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      al_kick_gate_all_user_notify_descriptor_,
      al_kick_gate_all_user_notify::default_instance_,
      al_kick_gate_all_user_notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(al_kick_gate_all_user_notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(al_kick_gate_all_user_notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(al_kick_gate_all_user_notify));
  gh_kick_role_notify_descriptor_ = file->message_type(13);
  static const int gh_kick_role_notify_offsets_[1] = {
  };
  gh_kick_role_notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gh_kick_role_notify_descriptor_,
      gh_kick_role_notify::default_instance_,
      gh_kick_role_notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gh_kick_role_notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gh_kick_role_notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gh_kick_role_notify));
  gd_batch_save_to_db_notify_descriptor_ = file->message_type(14);
  static const int gd_batch_save_to_db_notify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gd_batch_save_to_db_notify, datas_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gd_batch_save_to_db_notify, type_),
  };
  gd_batch_save_to_db_notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gd_batch_save_to_db_notify_descriptor_,
      gd_batch_save_to_db_notify::default_instance_,
      gd_batch_save_to_db_notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gd_batch_save_to_db_notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gd_batch_save_to_db_notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gd_batch_save_to_db_notify));
  save_to_db_descriptor_ = file->message_type(15);
  static const int save_to_db_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(save_to_db, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(save_to_db, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(save_to_db, new_flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(save_to_db, uid_),
  };
  save_to_db_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      save_to_db_descriptor_,
      save_to_db::default_instance_,
      save_to_db_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(save_to_db, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(save_to_db, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(save_to_db));
  gd_role_data_request_descriptor_ = file->message_type(16);
  static const int gd_role_data_request_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gd_role_data_request, time_),
  };
  gd_role_data_request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gd_role_data_request_descriptor_,
      gd_role_data_request::default_instance_,
      gd_role_data_request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gd_role_data_request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gd_role_data_request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gd_role_data_request));
  dg_role_data_reply_descriptor_ = file->message_type(17);
  static const int dg_role_data_reply_offsets_[29] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dg_role_data_reply, reply_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dg_role_data_reply, role_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dg_role_data_reply, item_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dg_role_data_reply, hero_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dg_role_data_reply, formation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dg_role_data_reply, task_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dg_role_data_reply, trade_item_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dg_role_data_reply, mount_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dg_role_data_reply, country_bounty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dg_role_data_reply, activities_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dg_role_data_reply, arena_role_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dg_role_data_reply, achieve_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dg_role_data_reply, tower_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dg_role_data_reply, luckydraw_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dg_role_data_reply, dungeon_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dg_role_data_reply, expedition_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dg_role_data_reply, active_reward_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dg_role_data_reply, random_shop_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dg_role_data_reply, level_rwd_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dg_role_data_reply, level_rwd_mail_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dg_role_data_reply, bussiness_act_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dg_role_data_reply, liandan_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dg_role_data_reply, equip_plan_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dg_role_data_reply, patrol_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dg_role_data_reply, dungeon_times_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dg_role_data_reply, family_skill_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dg_role_data_reply, general_event_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dg_role_data_reply, recharge_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dg_role_data_reply, office_data_),
  };
  dg_role_data_reply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      dg_role_data_reply_descriptor_,
      dg_role_data_reply::default_instance_,
      dg_role_data_reply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dg_role_data_reply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dg_role_data_reply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(dg_role_data_reply));
  al_update_gate_user_num_notify_descriptor_ = file->message_type(18);
  static const int al_update_gate_user_num_notify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(al_update_gate_user_num_notify, num_),
  };
  al_update_gate_user_num_notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      al_update_gate_user_num_notify_descriptor_,
      al_update_gate_user_num_notify::default_instance_,
      al_update_gate_user_num_notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(al_update_gate_user_num_notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(al_update_gate_user_num_notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(al_update_gate_user_num_notify));
  de_user_data_reply_descriptor_ = file->message_type(19);
  static const int de_user_data_reply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(de_user_data_reply, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(de_user_data_reply, level_),
  };
  de_user_data_reply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      de_user_data_reply_descriptor_,
      de_user_data_reply::default_instance_,
      de_user_data_reply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(de_user_data_reply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(de_user_data_reply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(de_user_data_reply));
  de_user_center_data_reply_descriptor_ = file->message_type(20);
  static const int de_user_center_data_reply_offsets_[1] = {
  };
  de_user_center_data_reply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      de_user_center_data_reply_descriptor_,
      de_user_center_data_reply::default_instance_,
      de_user_center_data_reply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(de_user_center_data_reply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(de_user_center_data_reply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(de_user_center_data_reply));
  ed_sync_role_data_request_descriptor_ = file->message_type(21);
  static const int ed_sync_role_data_request_offsets_[1] = {
  };
  ed_sync_role_data_request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ed_sync_role_data_request_descriptor_,
      ed_sync_role_data_request::default_instance_,
      ed_sync_role_data_request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ed_sync_role_data_request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ed_sync_role_data_request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ed_sync_role_data_request));
  ag_save_user_notify_descriptor_ = file->message_type(22);
  static const int ag_save_user_notify_offsets_[1] = {
  };
  ag_save_user_notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ag_save_user_notify_descriptor_,
      ag_save_user_notify::default_instance_,
      ag_save_user_notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ag_save_user_notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ag_save_user_notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ag_save_user_notify));
  ln_syn_login_info_notify_descriptor_ = file->message_type(23);
  static const int ln_syn_login_info_notify_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ln_syn_login_info_notify, server_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ln_syn_login_info_notify, login_ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ln_syn_login_info_notify, login_port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ln_syn_login_info_notify, server_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ln_syn_login_info_notify, can_create_new_role_),
  };
  ln_syn_login_info_notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ln_syn_login_info_notify_descriptor_,
      ln_syn_login_info_notify::default_instance_,
      ln_syn_login_info_notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ln_syn_login_info_notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ln_syn_login_info_notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ln_syn_login_info_notify));
  ln_close_server_notify_descriptor_ = file->message_type(24);
  static const int ln_close_server_notify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ln_close_server_notify, server_id_),
  };
  ln_close_server_notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ln_close_server_notify_descriptor_,
      ln_close_server_notify::default_instance_,
      ln_close_server_notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ln_close_server_notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ln_close_server_notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ln_close_server_notify));
  ln_user_num_notify_descriptor_ = file->message_type(25);
  static const int ln_user_num_notify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ln_user_num_notify, server_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ln_user_num_notify, user_num_),
  };
  ln_user_num_notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ln_user_num_notify_descriptor_,
      ln_user_num_notify::default_instance_,
      ln_user_num_notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ln_user_num_notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ln_user_num_notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ln_user_num_notify));
  ag_syn_gate_info_notify_descriptor_ = file->message_type(26);
  static const int ag_syn_gate_info_notify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ag_syn_gate_info_notify, gate_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ag_syn_gate_info_notify, server_id_),
  };
  ag_syn_gate_info_notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ag_syn_gate_info_notify_descriptor_,
      ag_syn_gate_info_notify::default_instance_,
      ag_syn_gate_info_notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ag_syn_gate_info_notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ag_syn_gate_info_notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ag_syn_gate_info_notify));
  gh_syn_online_role_notify_descriptor_ = file->message_type(27);
  static const int gh_syn_online_role_notify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gh_syn_online_role_notify, chat_info_),
  };
  gh_syn_online_role_notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gh_syn_online_role_notify_descriptor_,
      gh_syn_online_role_notify::default_instance_,
      gh_syn_online_role_notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gh_syn_online_role_notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gh_syn_online_role_notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gh_syn_online_role_notify));
  hg_test_notify_descriptor_ = file->message_type(28);
  static const int hg_test_notify_offsets_[1] = {
  };
  hg_test_notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      hg_test_notify_descriptor_,
      hg_test_notify::default_instance_,
      hg_test_notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hg_test_notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hg_test_notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(hg_test_notify));
  ah_syn_gate_info_notify_descriptor_ = file->message_type(29);
  static const int ah_syn_gate_info_notify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ah_syn_gate_info_notify, gate_id_),
  };
  ah_syn_gate_info_notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ah_syn_gate_info_notify_descriptor_,
      ah_syn_gate_info_notify::default_instance_,
      ah_syn_gate_info_notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ah_syn_gate_info_notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ah_syn_gate_info_notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ah_syn_gate_info_notify));
  ha_test_reply_descriptor_ = file->message_type(30);
  static const int ha_test_reply_offsets_[1] = {
  };
  ha_test_reply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ha_test_reply_descriptor_,
      ha_test_reply::default_instance_,
      ha_test_reply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ha_test_reply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ha_test_reply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ha_test_reply));
  gh_syn_game_info_notify_descriptor_ = file->message_type(31);
  static const int gh_syn_game_info_notify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gh_syn_game_info_notify, game_id_),
  };
  gh_syn_game_info_notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gh_syn_game_info_notify_descriptor_,
      gh_syn_game_info_notify::default_instance_,
      gh_syn_game_info_notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gh_syn_game_info_notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gh_syn_game_info_notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gh_syn_game_info_notify));
  hg_chat_get_role_info_request_descriptor_ = file->message_type(32);
  static const int hg_chat_get_role_info_request_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hg_chat_get_role_info_request, param_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hg_chat_get_role_info_request, chat_notify_),
  };
  hg_chat_get_role_info_request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      hg_chat_get_role_info_request_descriptor_,
      hg_chat_get_role_info_request::default_instance_,
      hg_chat_get_role_info_request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hg_chat_get_role_info_request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hg_chat_get_role_info_request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(hg_chat_get_role_info_request));
  gh_chat_get_role_info_reply_descriptor_ = file->message_type(33);
  static const int gh_chat_get_role_info_reply_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gh_chat_get_role_info_reply, reply_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gh_chat_get_role_info_reply, chat_role_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gh_chat_get_role_info_reply, chat_notify_),
  };
  gh_chat_get_role_info_reply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gh_chat_get_role_info_reply_descriptor_,
      gh_chat_get_role_info_reply::default_instance_,
      gh_chat_get_role_info_reply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gh_chat_get_role_info_reply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gh_chat_get_role_info_reply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gh_chat_get_role_info_reply));
  hg_get_nearby_roles_request_descriptor_ = file->message_type(34);
  static const int hg_get_nearby_roles_request_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hg_get_nearby_roles_request, chat_channel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hg_get_nearby_roles_request, chat_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hg_get_nearby_roles_request, head_icon_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hg_get_nearby_roles_request, role_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hg_get_nearby_roles_request, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hg_get_nearby_roles_request, chat_role_info_),
  };
  hg_get_nearby_roles_request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      hg_get_nearby_roles_request_descriptor_,
      hg_get_nearby_roles_request::default_instance_,
      hg_get_nearby_roles_request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hg_get_nearby_roles_request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hg_get_nearby_roles_request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(hg_get_nearby_roles_request));
  gh_get_nearby_roles_reply_descriptor_ = file->message_type(35);
  static const int gh_get_nearby_roles_reply_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gh_get_nearby_roles_reply, reply_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gh_get_nearby_roles_reply, chat_channel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gh_get_nearby_roles_reply, chat_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gh_get_nearby_roles_reply, role_uids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gh_get_nearby_roles_reply, head_icon_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gh_get_nearby_roles_reply, role_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gh_get_nearby_roles_reply, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gh_get_nearby_roles_reply, chat_role_info_),
  };
  gh_get_nearby_roles_reply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gh_get_nearby_roles_reply_descriptor_,
      gh_get_nearby_roles_reply::default_instance_,
      gh_get_nearby_roles_reply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gh_get_nearby_roles_reply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gh_get_nearby_roles_reply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gh_get_nearby_roles_reply));
  hg_task_seek_help_request_descriptor_ = file->message_type(36);
  static const int hg_task_seek_help_request_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hg_task_seek_help_request, task_id_),
  };
  hg_task_seek_help_request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      hg_task_seek_help_request_descriptor_,
      hg_task_seek_help_request::default_instance_,
      hg_task_seek_help_request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hg_task_seek_help_request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hg_task_seek_help_request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(hg_task_seek_help_request));
  gh_task_seek_help_reply_descriptor_ = file->message_type(37);
  static const int gh_task_seek_help_reply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gh_task_seek_help_reply, reply_code_),
  };
  gh_task_seek_help_reply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gh_task_seek_help_reply_descriptor_,
      gh_task_seek_help_reply::default_instance_,
      gh_task_seek_help_reply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gh_task_seek_help_reply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gh_task_seek_help_reply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gh_task_seek_help_reply));
  hf_syn_chat_info_notify_descriptor_ = file->message_type(38);
  static const int hf_syn_chat_info_notify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hf_syn_chat_info_notify, server_group_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hf_syn_chat_info_notify, server_name_),
  };
  hf_syn_chat_info_notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      hf_syn_chat_info_notify_descriptor_,
      hf_syn_chat_info_notify::default_instance_,
      hf_syn_chat_info_notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hf_syn_chat_info_notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hf_syn_chat_info_notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(hf_syn_chat_info_notify));
  fh_syn_transfer_info_notify_descriptor_ = file->message_type(39);
  static const int fh_syn_transfer_info_notify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fh_syn_transfer_info_notify, server_id_),
  };
  fh_syn_transfer_info_notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      fh_syn_transfer_info_notify_descriptor_,
      fh_syn_transfer_info_notify::default_instance_,
      fh_syn_transfer_info_notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fh_syn_transfer_info_notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fh_syn_transfer_info_notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(fh_syn_transfer_info_notify));
  gh_gm_cmd_notify_descriptor_ = file->message_type(40);
  static const int gh_gm_cmd_notify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gh_gm_cmd_notify, cmds_),
  };
  gh_gm_cmd_notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gh_gm_cmd_notify_descriptor_,
      gh_gm_cmd_notify::default_instance_,
      gh_gm_cmd_notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gh_gm_cmd_notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gh_gm_cmd_notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gh_gm_cmd_notify));
  hf_gm_cmd_notify_descriptor_ = file->message_type(41);
  static const int hf_gm_cmd_notify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hf_gm_cmd_notify, cmds_),
  };
  hf_gm_cmd_notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      hf_gm_cmd_notify_descriptor_,
      hf_gm_cmd_notify::default_instance_,
      hf_gm_cmd_notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hf_gm_cmd_notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hf_gm_cmd_notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(hf_gm_cmd_notify));
  fh_test_reply_descriptor_ = file->message_type(42);
  static const int fh_test_reply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fh_test_reply, server_id_),
  };
  fh_test_reply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      fh_test_reply_descriptor_,
      fh_test_reply::default_instance_,
      fh_test_reply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fh_test_reply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fh_test_reply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(fh_test_reply));
  hg_syn_online_role_list_request_descriptor_ = file->message_type(43);
  static const int hg_syn_online_role_list_request_offsets_[1] = {
  };
  hg_syn_online_role_list_request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      hg_syn_online_role_list_request_descriptor_,
      hg_syn_online_role_list_request::default_instance_,
      hg_syn_online_role_list_request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hg_syn_online_role_list_request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hg_syn_online_role_list_request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(hg_syn_online_role_list_request));
  gh_syn_online_role_list_notify_descriptor_ = file->message_type(44);
  static const int gh_syn_online_role_list_notify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gh_syn_online_role_list_notify, server_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gh_syn_online_role_list_notify, user_list_),
  };
  gh_syn_online_role_list_notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gh_syn_online_role_list_notify_descriptor_,
      gh_syn_online_role_list_notify::default_instance_,
      gh_syn_online_role_list_notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gh_syn_online_role_list_notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gh_syn_online_role_list_notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gh_syn_online_role_list_notify));
  eh_country_member_change_notify_descriptor_ = file->message_type(45);
  static const int eh_country_member_change_notify_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eh_country_member_change_notify, country_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eh_country_member_change_notify, change_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eh_country_member_change_notify, role_uid_),
  };
  eh_country_member_change_notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      eh_country_member_change_notify_descriptor_,
      eh_country_member_change_notify::default_instance_,
      eh_country_member_change_notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eh_country_member_change_notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eh_country_member_change_notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(eh_country_member_change_notify));
  eh_family_member_change_notify_descriptor_ = file->message_type(46);
  static const int eh_family_member_change_notify_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eh_family_member_change_notify, family_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eh_family_member_change_notify, change_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eh_family_member_change_notify, role_uid_),
  };
  eh_family_member_change_notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      eh_family_member_change_notify_descriptor_,
      eh_family_member_change_notify::default_instance_,
      eh_family_member_change_notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eh_family_member_change_notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eh_family_member_change_notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(eh_family_member_change_notify));
  hf_get_server_channel_list_request_descriptor_ = file->message_type(47);
  static const int hf_get_server_channel_list_request_offsets_[1] = {
  };
  hf_get_server_channel_list_request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      hf_get_server_channel_list_request_descriptor_,
      hf_get_server_channel_list_request::default_instance_,
      hf_get_server_channel_list_request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hf_get_server_channel_list_request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hf_get_server_channel_list_request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(hf_get_server_channel_list_request));
  fh_get_server_channel_list_reply_descriptor_ = file->message_type(48);
  static const int fh_get_server_channel_list_reply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fh_get_server_channel_list_reply, reply_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fh_get_server_channel_list_reply, server_channel_data_),
  };
  fh_get_server_channel_list_reply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      fh_get_server_channel_list_reply_descriptor_,
      fh_get_server_channel_list_reply::default_instance_,
      fh_get_server_channel_list_reply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fh_get_server_channel_list_reply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fh_get_server_channel_list_reply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(fh_get_server_channel_list_reply));
  hf_change_server_channel_request_descriptor_ = file->message_type(49);
  static const int hf_change_server_channel_request_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hf_change_server_channel_request, dst_channel_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hf_change_server_channel_request, user_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hf_change_server_channel_request, type_),
  };
  hf_change_server_channel_request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      hf_change_server_channel_request_descriptor_,
      hf_change_server_channel_request::default_instance_,
      hf_change_server_channel_request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hf_change_server_channel_request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hf_change_server_channel_request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(hf_change_server_channel_request));
  fh_change_server_channel_reply_descriptor_ = file->message_type(50);
  static const int fh_change_server_channel_reply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fh_change_server_channel_reply, reply_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fh_change_server_channel_reply, channel_id_),
  };
  fh_change_server_channel_reply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      fh_change_server_channel_reply_descriptor_,
      fh_change_server_channel_reply::default_instance_,
      fh_change_server_channel_reply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fh_change_server_channel_reply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fh_change_server_channel_reply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(fh_change_server_channel_reply));
  fh_change_server_channel_notify_descriptor_ = file->message_type(51);
  static const int fh_change_server_channel_notify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fh_change_server_channel_notify, role_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fh_change_server_channel_notify, hc_msg_),
  };
  fh_change_server_channel_notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      fh_change_server_channel_notify_descriptor_,
      fh_change_server_channel_notify::default_instance_,
      fh_change_server_channel_notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fh_change_server_channel_notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fh_change_server_channel_notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(fh_change_server_channel_notify));
  ha_change_server_channel_notify_descriptor_ = file->message_type(52);
  static const int ha_change_server_channel_notify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ha_change_server_channel_notify, fh_msg_),
  };
  ha_change_server_channel_notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ha_change_server_channel_notify_descriptor_,
      ha_change_server_channel_notify::default_instance_,
      ha_change_server_channel_notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ha_change_server_channel_notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ha_change_server_channel_notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ha_change_server_channel_notify));
  hf_server_channel_chat_request_descriptor_ = file->message_type(53);
  static const int hf_server_channel_chat_request_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hf_server_channel_chat_request, chat_info_),
  };
  hf_server_channel_chat_request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      hf_server_channel_chat_request_descriptor_,
      hf_server_channel_chat_request::default_instance_,
      hf_server_channel_chat_request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hf_server_channel_chat_request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hf_server_channel_chat_request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(hf_server_channel_chat_request));
  fh_server_channel_chat_reply_descriptor_ = file->message_type(54);
  static const int fh_server_channel_chat_reply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fh_server_channel_chat_reply, reply_code_),
  };
  fh_server_channel_chat_reply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      fh_server_channel_chat_reply_descriptor_,
      fh_server_channel_chat_reply::default_instance_,
      fh_server_channel_chat_reply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fh_server_channel_chat_reply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fh_server_channel_chat_reply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(fh_server_channel_chat_reply));
  fh_server_channel_chat_notify_descriptor_ = file->message_type(55);
  static const int fh_server_channel_chat_notify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fh_server_channel_chat_notify, role_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fh_server_channel_chat_notify, hc_msg_),
  };
  fh_server_channel_chat_notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      fh_server_channel_chat_notify_descriptor_,
      fh_server_channel_chat_notify::default_instance_,
      fh_server_channel_chat_notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fh_server_channel_chat_notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fh_server_channel_chat_notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(fh_server_channel_chat_notify));
  ha_server_channel_chat_notify_descriptor_ = file->message_type(56);
  static const int ha_server_channel_chat_notify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ha_server_channel_chat_notify, fh_msg_),
  };
  ha_server_channel_chat_notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ha_server_channel_chat_notify_descriptor_,
      ha_server_channel_chat_notify::default_instance_,
      ha_server_channel_chat_notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ha_server_channel_chat_notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ha_server_channel_chat_notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ha_server_channel_chat_notify));
  hf_personal_chat_request_descriptor_ = file->message_type(57);
  static const int hf_personal_chat_request_offsets_[1] = {
  };
  hf_personal_chat_request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      hf_personal_chat_request_descriptor_,
      hf_personal_chat_request::default_instance_,
      hf_personal_chat_request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hf_personal_chat_request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hf_personal_chat_request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(hf_personal_chat_request));
  fh_personal_chat_notify_descriptor_ = file->message_type(58);
  static const int fh_personal_chat_notify_offsets_[1] = {
  };
  fh_personal_chat_notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      fh_personal_chat_notify_descriptor_,
      fh_personal_chat_notify::default_instance_,
      fh_personal_chat_notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fh_personal_chat_notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fh_personal_chat_notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(fh_personal_chat_notify));
  ha_personal_chat_notify_descriptor_ = file->message_type(59);
  static const int ha_personal_chat_notify_offsets_[1] = {
  };
  ha_personal_chat_notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ha_personal_chat_notify_descriptor_,
      ha_personal_chat_notify::default_instance_,
      ha_personal_chat_notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ha_personal_chat_notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ha_personal_chat_notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ha_personal_chat_notify));
  he_family_chat_notify_descriptor_ = file->message_type(60);
  static const int he_family_chat_notify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(he_family_chat_notify, src_uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(he_family_chat_notify, family_uid_),
  };
  he_family_chat_notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      he_family_chat_notify_descriptor_,
      he_family_chat_notify::default_instance_,
      he_family_chat_notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(he_family_chat_notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(he_family_chat_notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(he_family_chat_notify));
  he_personal_chat_notify_descriptor_ = file->message_type(61);
  static const int he_personal_chat_notify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(he_personal_chat_notify, src_uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(he_personal_chat_notify, tar_uid_),
  };
  he_personal_chat_notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      he_personal_chat_notify_descriptor_,
      he_personal_chat_notify::default_instance_,
      he_personal_chat_notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(he_personal_chat_notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(he_personal_chat_notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(he_personal_chat_notify));
  eh_kick_all_user_notify_descriptor_ = file->message_type(62);
  static const int eh_kick_all_user_notify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eh_kick_all_user_notify, reason_),
  };
  eh_kick_all_user_notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      eh_kick_all_user_notify_descriptor_,
      eh_kick_all_user_notify::default_instance_,
      eh_kick_all_user_notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eh_kick_all_user_notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eh_kick_all_user_notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(eh_kick_all_user_notify));
  dn_create_role_request_descriptor_ = file->message_type(63);
  static const int dn_create_role_request_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dn_create_role_request, account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dn_create_role_request, server_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dn_create_role_request, gate_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dn_create_role_request, role_data_),
  };
  dn_create_role_request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      dn_create_role_request_descriptor_,
      dn_create_role_request::default_instance_,
      dn_create_role_request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dn_create_role_request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dn_create_role_request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(dn_create_role_request));
  nd_create_role_reply_descriptor_ = file->message_type(64);
  static const int nd_create_role_reply_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nd_create_role_reply, reply_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nd_create_role_reply, gate_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nd_create_role_reply, role_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nd_create_role_reply, time_),
  };
  nd_create_role_reply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      nd_create_role_reply_descriptor_,
      nd_create_role_reply::default_instance_,
      nd_create_role_reply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nd_create_role_reply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nd_create_role_reply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(nd_create_role_reply));
  dn_role_data_update_notify_descriptor_ = file->message_type(65);
  static const int dn_role_data_update_notify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dn_role_data_update_notify, role_data_),
  };
  dn_role_data_update_notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      dn_role_data_update_notify_descriptor_,
      dn_role_data_update_notify::default_instance_,
      dn_role_data_update_notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dn_role_data_update_notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dn_role_data_update_notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(dn_role_data_update_notify));
  hg_user_channel_notify_descriptor_ = file->message_type(66);
  static const int hg_user_channel_notify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hg_user_channel_notify, user_uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hg_user_channel_notify, channel_id_),
  };
  hg_user_channel_notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      hg_user_channel_notify_descriptor_,
      hg_user_channel_notify::default_instance_,
      hg_user_channel_notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hg_user_channel_notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hg_user_channel_notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(hg_user_channel_notify));
  ge_syn_game_info_notify_descriptor_ = file->message_type(67);
  static const int ge_syn_game_info_notify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_syn_game_info_notify, game_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_syn_game_info_notify, regs_),
  };
  ge_syn_game_info_notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ge_syn_game_info_notify_descriptor_,
      ge_syn_game_info_notify::default_instance_,
      ge_syn_game_info_notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_syn_game_info_notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_syn_game_info_notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ge_syn_game_info_notify));
  gd_syn_game_info_notify_descriptor_ = file->message_type(68);
  static const int gd_syn_game_info_notify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gd_syn_game_info_notify, game_id_),
  };
  gd_syn_game_info_notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gd_syn_game_info_notify_descriptor_,
      gd_syn_game_info_notify::default_instance_,
      gd_syn_game_info_notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gd_syn_game_info_notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gd_syn_game_info_notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gd_syn_game_info_notify));
  al_syn_gate_info_notify_descriptor_ = file->message_type(69);
  static const int al_syn_gate_info_notify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(al_syn_gate_info_notify, gate_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(al_syn_gate_info_notify, user_list_),
  };
  al_syn_gate_info_notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      al_syn_gate_info_notify_descriptor_,
      al_syn_gate_info_notify::default_instance_,
      al_syn_gate_info_notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(al_syn_gate_info_notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(al_syn_gate_info_notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(al_syn_gate_info_notify));
  ga_syn_game_info_notify_descriptor_ = file->message_type(70);
  static const int ga_syn_game_info_notify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ga_syn_game_info_notify, game_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ga_syn_game_info_notify, game_type_),
  };
  ga_syn_game_info_notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ga_syn_game_info_notify_descriptor_,
      ga_syn_game_info_notify::default_instance_,
      ga_syn_game_info_notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ga_syn_game_info_notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ga_syn_game_info_notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ga_syn_game_info_notify));
  ga_syn_cross_id_notify_descriptor_ = file->message_type(71);
  static const int ga_syn_cross_id_notify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ga_syn_cross_id_notify, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ga_syn_cross_id_notify, cross_id_),
  };
  ga_syn_cross_id_notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ga_syn_cross_id_notify_descriptor_,
      ga_syn_cross_id_notify::default_instance_,
      ga_syn_cross_id_notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ga_syn_cross_id_notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ga_syn_cross_id_notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ga_syn_cross_id_notify));
  ae_syn_gate_info_notify_descriptor_ = file->message_type(72);
  static const int ae_syn_gate_info_notify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ae_syn_gate_info_notify, gate_id_),
  };
  ae_syn_gate_info_notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ae_syn_gate_info_notify_descriptor_,
      ae_syn_gate_info_notify::default_instance_,
      ae_syn_gate_info_notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ae_syn_gate_info_notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ae_syn_gate_info_notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ae_syn_gate_info_notify));
  cross_server_data_descriptor_ = file->message_type(73);
  static const int cross_server_data_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cross_server_data, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cross_server_data, scene_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cross_server_data, des_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cross_server_data, des_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cross_server_data, des_dir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cross_server_data, troop_id_),
  };
  cross_server_data_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      cross_server_data_descriptor_,
      cross_server_data::default_instance_,
      cross_server_data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cross_server_data, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cross_server_data, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(cross_server_data));
  ae_reg_user_center_request_descriptor_ = file->message_type(74);
  static const int ae_reg_user_center_request_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ae_reg_user_center_request, uid_),
  };
  ae_reg_user_center_request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ae_reg_user_center_request_descriptor_,
      ae_reg_user_center_request::default_instance_,
      ae_reg_user_center_request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ae_reg_user_center_request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ae_reg_user_center_request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ae_reg_user_center_request));
  ae_unreg_user_scene_notify_descriptor_ = file->message_type(75);
  static const int ae_unreg_user_scene_notify_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ae_unreg_user_scene_notify, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ae_unreg_user_scene_notify, unreg_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ae_unreg_user_scene_notify, kick_reason_),
  };
  ae_unreg_user_scene_notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ae_unreg_user_scene_notify_descriptor_,
      ae_unreg_user_scene_notify::default_instance_,
      ae_unreg_user_scene_notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ae_unreg_user_scene_notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ae_unreg_user_scene_notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ae_unreg_user_scene_notify));
  ea_unreg_user_center_notify_descriptor_ = file->message_type(76);
  static const int ea_unreg_user_center_notify_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ea_unreg_user_center_notify, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ea_unreg_user_center_notify, unreg_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ea_unreg_user_center_notify, code_param_),
  };
  ea_unreg_user_center_notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ea_unreg_user_center_notify_descriptor_,
      ea_unreg_user_center_notify::default_instance_,
      ea_unreg_user_center_notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ea_unreg_user_center_notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ea_unreg_user_center_notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ea_unreg_user_center_notify));
  ae_create_role_request_descriptor_ = file->message_type(77);
  static const int ae_create_role_request_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ae_create_role_request, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ae_create_role_request, nickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ae_create_role_request, role_type_),
  };
  ae_create_role_request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ae_create_role_request_descriptor_,
      ae_create_role_request::default_instance_,
      ae_create_role_request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ae_create_role_request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ae_create_role_request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ae_create_role_request));
  ea_create_role_reply_descriptor_ = file->message_type(78);
  static const int ea_create_role_reply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ea_create_role_reply, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ea_create_role_reply, reply_code_),
  };
  ea_create_role_reply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ea_create_role_reply_descriptor_,
      ea_create_role_reply::default_instance_,
      ea_create_role_reply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ea_create_role_reply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ea_create_role_reply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ea_create_role_reply));
  ae_user_cross_server_notify_descriptor_ = file->message_type(79);
  static const int ae_user_cross_server_notify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ae_user_cross_server_notify, data_),
  };
  ae_user_cross_server_notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ae_user_cross_server_notify_descriptor_,
      ae_user_cross_server_notify::default_instance_,
      ae_user_cross_server_notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ae_user_cross_server_notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ae_user_cross_server_notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ae_user_cross_server_notify));
  ea_kick_all_user_notify_descriptor_ = file->message_type(80);
  static const int ea_kick_all_user_notify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ea_kick_all_user_notify, reason_),
  };
  ea_kick_all_user_notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ea_kick_all_user_notify_descriptor_,
      ea_kick_all_user_notify::default_instance_,
      ea_kick_all_user_notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ea_kick_all_user_notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ea_kick_all_user_notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ea_kick_all_user_notify));
  global_user_data_descriptor_ = file->message_type(81);
  static const int global_user_data_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(global_user_data, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(global_user_data, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(global_user_data, fighting_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(global_user_data, hero_plugin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(global_user_data, scene_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(global_user_data, map_tid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(global_user_data, family_contribution_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(global_user_data, head_frame_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(global_user_data, charm_),
  };
  global_user_data_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      global_user_data_descriptor_,
      global_user_data::default_instance_,
      global_user_data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(global_user_data, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(global_user_data, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(global_user_data));
  eg_unreg_user_scene_notify_descriptor_ = file->message_type(82);
  static const int eg_unreg_user_scene_notify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_unreg_user_scene_notify, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_unreg_user_scene_notify, unreg_code_),
  };
  eg_unreg_user_scene_notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      eg_unreg_user_scene_notify_descriptor_,
      eg_unreg_user_scene_notify::default_instance_,
      eg_unreg_user_scene_notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_unreg_user_scene_notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_unreg_user_scene_notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(eg_unreg_user_scene_notify));
  ge_unreg_user_scene_notify_descriptor_ = file->message_type(83);
  static const int ge_unreg_user_scene_notify_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_unreg_user_scene_notify, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_unreg_user_scene_notify, unreg_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_unreg_user_scene_notify, kick_reason_),
  };
  ge_unreg_user_scene_notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ge_unreg_user_scene_notify_descriptor_,
      ge_unreg_user_scene_notify::default_instance_,
      ge_unreg_user_scene_notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_unreg_user_scene_notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_unreg_user_scene_notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ge_unreg_user_scene_notify));
  eg_reg_user_scene_request_descriptor_ = file->message_type(84);
  static const int eg_reg_user_scene_request_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_reg_user_scene_request, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_reg_user_scene_request, gate_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_reg_user_scene_request, scene_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_reg_user_scene_request, family_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_reg_user_scene_request, family_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_reg_user_scene_request, family_officer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_reg_user_scene_request, country_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_reg_user_scene_request, country_officer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_reg_user_scene_request, family_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_reg_user_scene_request, charm_),
  };
  eg_reg_user_scene_request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      eg_reg_user_scene_request_descriptor_,
      eg_reg_user_scene_request::default_instance_,
      eg_reg_user_scene_request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_reg_user_scene_request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_reg_user_scene_request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(eg_reg_user_scene_request));
  ge_reg_user_scene_reply_descriptor_ = file->message_type(85);
  static const int ge_reg_user_scene_reply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_reg_user_scene_reply, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_reg_user_scene_reply, user_data_),
  };
  ge_reg_user_scene_reply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ge_reg_user_scene_reply_descriptor_,
      ge_reg_user_scene_reply::default_instance_,
      ge_reg_user_scene_reply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_reg_user_scene_reply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_reg_user_scene_reply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ge_reg_user_scene_reply));
  eg_relogin_scene_request_descriptor_ = file->message_type(86);
  static const int eg_relogin_scene_request_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_relogin_scene_request, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_relogin_scene_request, gate_id_),
  };
  eg_relogin_scene_request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      eg_relogin_scene_request_descriptor_,
      eg_relogin_scene_request::default_instance_,
      eg_relogin_scene_request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_relogin_scene_request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_relogin_scene_request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(eg_relogin_scene_request));
  ge_user_cross_scene_request_descriptor_ = file->message_type(87);
  static const int ge_user_cross_scene_request_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_user_cross_scene_request, data_),
  };
  ge_user_cross_scene_request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ge_user_cross_scene_request_descriptor_,
      ge_user_cross_scene_request::default_instance_,
      ge_user_cross_scene_request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_user_cross_scene_request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_user_cross_scene_request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ge_user_cross_scene_request));
  eg_user_cross_scene_reply_descriptor_ = file->message_type(88);
  static const int eg_user_cross_scene_reply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_user_cross_scene_reply, reply_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_user_cross_scene_reply, data_),
  };
  eg_user_cross_scene_reply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      eg_user_cross_scene_reply_descriptor_,
      eg_user_cross_scene_reply::default_instance_,
      eg_user_cross_scene_reply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_user_cross_scene_reply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_user_cross_scene_reply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(eg_user_cross_scene_reply));
  eg_kick_all_user_notify_descriptor_ = file->message_type(89);
  static const int eg_kick_all_user_notify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_kick_all_user_notify, reason_),
  };
  eg_kick_all_user_notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      eg_kick_all_user_notify_descriptor_,
      eg_kick_all_user_notify::default_instance_,
      eg_kick_all_user_notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_kick_all_user_notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_kick_all_user_notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(eg_kick_all_user_notify));
  ed_create_role_request_descriptor_ = file->message_type(90);
  static const int ed_create_role_request_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ed_create_role_request, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ed_create_role_request, nickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ed_create_role_request, role_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ed_create_role_request, gate_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ed_create_role_request, time_),
  };
  ed_create_role_request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ed_create_role_request_descriptor_,
      ed_create_role_request::default_instance_,
      ed_create_role_request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ed_create_role_request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ed_create_role_request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ed_create_role_request));
  de_create_role_reply_descriptor_ = file->message_type(91);
  static const int de_create_role_reply_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(de_create_role_reply, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(de_create_role_reply, reply_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(de_create_role_reply, gate_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(de_create_role_reply, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(de_create_role_reply, create_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(de_create_role_reply, role_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(de_create_role_reply, channel_id_),
  };
  de_create_role_reply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      de_create_role_reply_descriptor_,
      de_create_role_reply::default_instance_,
      de_create_role_reply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(de_create_role_reply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(de_create_role_reply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(de_create_role_reply));
  ed_query_role_data_request_descriptor_ = file->message_type(92);
  static const int ed_query_role_data_request_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ed_query_role_data_request, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ed_query_role_data_request, gate_id_),
  };
  ed_query_role_data_request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ed_query_role_data_request_descriptor_,
      ed_query_role_data_request::default_instance_,
      ed_query_role_data_request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ed_query_role_data_request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ed_query_role_data_request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ed_query_role_data_request));
  de_query_role_data_reply_descriptor_ = file->message_type(93);
  static const int de_query_role_data_reply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(de_query_role_data_reply, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(de_query_role_data_reply, gate_id_),
  };
  de_query_role_data_reply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      de_query_role_data_reply_descriptor_,
      de_query_role_data_reply::default_instance_,
      de_query_role_data_reply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(de_query_role_data_reply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(de_query_role_data_reply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(de_query_role_data_reply));
  ed_role_leave_game_notify_descriptor_ = file->message_type(94);
  static const int ed_role_leave_game_notify_offsets_[1] = {
  };
  ed_role_leave_game_notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ed_role_leave_game_notify_descriptor_,
      ed_role_leave_game_notify::default_instance_,
      ed_role_leave_game_notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ed_role_leave_game_notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ed_role_leave_game_notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ed_role_leave_game_notify));
  ag_unreg_user_scene_notify_descriptor_ = file->message_type(95);
  static const int ag_unreg_user_scene_notify_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ag_unreg_user_scene_notify, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ag_unreg_user_scene_notify, unreg_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ag_unreg_user_scene_notify, kick_reason_),
  };
  ag_unreg_user_scene_notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ag_unreg_user_scene_notify_descriptor_,
      ag_unreg_user_scene_notify::default_instance_,
      ag_unreg_user_scene_notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ag_unreg_user_scene_notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ag_unreg_user_scene_notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ag_unreg_user_scene_notify));
  ga_unreg_user_scene_notify_descriptor_ = file->message_type(96);
  static const int ga_unreg_user_scene_notify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ga_unreg_user_scene_notify, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ga_unreg_user_scene_notify, unreg_code_),
  };
  ga_unreg_user_scene_notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ga_unreg_user_scene_notify_descriptor_,
      ga_unreg_user_scene_notify::default_instance_,
      ga_unreg_user_scene_notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ga_unreg_user_scene_notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ga_unreg_user_scene_notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ga_unreg_user_scene_notify));
  ga_reg_user_success_notify_descriptor_ = file->message_type(97);
  static const int ga_reg_user_success_notify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ga_reg_user_success_notify, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ga_reg_user_success_notify, gate_id_),
  };
  ga_reg_user_success_notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ga_reg_user_success_notify_descriptor_,
      ga_reg_user_success_notify::default_instance_,
      ga_reg_user_success_notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ga_reg_user_success_notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ga_reg_user_success_notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ga_reg_user_success_notify));
  ga_user_cross_server_notify_descriptor_ = file->message_type(98);
  static const int ga_user_cross_server_notify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ga_user_cross_server_notify, data_),
  };
  ga_user_cross_server_notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ga_user_cross_server_notify_descriptor_,
      ga_user_cross_server_notify::default_instance_,
      ga_user_cross_server_notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ga_user_cross_server_notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ga_user_cross_server_notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ga_user_cross_server_notify));
  ge_city_trade_add_prosperity_value_notify_descriptor_ = file->message_type(99);
  static const int ge_city_trade_add_prosperity_value_notify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_city_trade_add_prosperity_value_notify, city_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_city_trade_add_prosperity_value_notify, add_prosperity_value_),
  };
  ge_city_trade_add_prosperity_value_notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ge_city_trade_add_prosperity_value_notify_descriptor_,
      ge_city_trade_add_prosperity_value_notify::default_instance_,
      ge_city_trade_add_prosperity_value_notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_city_trade_add_prosperity_value_notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_city_trade_add_prosperity_value_notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ge_city_trade_add_prosperity_value_notify));
  eg_city_base_info_notify_descriptor_ = file->message_type(100);
  static const int eg_city_base_info_notify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_city_base_info_notify, city_info_),
  };
  eg_city_base_info_notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      eg_city_base_info_notify_descriptor_,
      eg_city_base_info_notify::default_instance_,
      eg_city_base_info_notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_city_base_info_notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_city_base_info_notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(eg_city_base_info_notify));
  ge_get_city_list_request_descriptor_ = file->message_type(101);
  static const int ge_get_city_list_request_offsets_[1] = {
  };
  ge_get_city_list_request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ge_get_city_list_request_descriptor_,
      ge_get_city_list_request::default_instance_,
      ge_get_city_list_request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_get_city_list_request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_get_city_list_request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ge_get_city_list_request));
  eg_get_city_list_reply_descriptor_ = file->message_type(102);
  static const int eg_get_city_list_reply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_get_city_list_reply, city_list_),
  };
  eg_get_city_list_reply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      eg_get_city_list_reply_descriptor_,
      eg_get_city_list_reply::default_instance_,
      eg_get_city_list_reply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_get_city_list_reply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_get_city_list_reply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(eg_get_city_list_reply));
  eh_test_request_descriptor_ = file->message_type(103);
  static const int eh_test_request_offsets_[1] = {
  };
  eh_test_request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      eh_test_request_descriptor_,
      eh_test_request::default_instance_,
      eh_test_request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eh_test_request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eh_test_request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(eh_test_request));
  he_test_reply_descriptor_ = file->message_type(104);
  static const int he_test_reply_offsets_[1] = {
  };
  he_test_reply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      he_test_reply_descriptor_,
      he_test_reply::default_instance_,
      he_test_reply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(he_test_reply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(he_test_reply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(he_test_reply));
  ge_update_rank_notify_descriptor_ = file->message_type(105);
  static const int ge_update_rank_notify_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_update_rank_notify, rank_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_update_rank_notify, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_update_rank_notify, owner_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_update_rank_notify, extra_),
  };
  ge_update_rank_notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ge_update_rank_notify_descriptor_,
      ge_update_rank_notify::default_instance_,
      ge_update_rank_notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_update_rank_notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_update_rank_notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ge_update_rank_notify));
  ge_create_family_request_descriptor_ = file->message_type(106);
  static const int ge_create_family_request_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_create_family_request, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_create_family_request, declaration_),
  };
  ge_create_family_request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ge_create_family_request_descriptor_,
      ge_create_family_request::default_instance_,
      ge_create_family_request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_create_family_request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_create_family_request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ge_create_family_request));
  eg_update_family_info_notify_descriptor_ = file->message_type(107);
  static const int eg_update_family_info_notify_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_update_family_info_notify, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_update_family_info_notify, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_update_family_info_notify, officer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_update_family_info_notify, country_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_update_family_info_notify, family_lv_),
  };
  eg_update_family_info_notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      eg_update_family_info_notify_descriptor_,
      eg_update_family_info_notify::default_instance_,
      eg_update_family_info_notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_update_family_info_notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_update_family_info_notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(eg_update_family_info_notify));
  eg_create_family_reply_descriptor_ = file->message_type(108);
  static const int eg_create_family_reply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_create_family_reply, reply_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_create_family_reply, info_),
  };
  eg_create_family_reply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      eg_create_family_reply_descriptor_,
      eg_create_family_reply::default_instance_,
      eg_create_family_reply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_create_family_reply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_create_family_reply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(eg_create_family_reply));
  ge_impeach_family_general_request_descriptor_ = file->message_type(109);
  static const int ge_impeach_family_general_request_offsets_[1] = {
  };
  ge_impeach_family_general_request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ge_impeach_family_general_request_descriptor_,
      ge_impeach_family_general_request::default_instance_,
      ge_impeach_family_general_request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_impeach_family_general_request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_impeach_family_general_request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ge_impeach_family_general_request));
  eg_impeach_family_general_reply_descriptor_ = file->message_type(110);
  static const int eg_impeach_family_general_reply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_impeach_family_general_reply, reply_code_),
  };
  eg_impeach_family_general_reply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      eg_impeach_family_general_reply_descriptor_,
      eg_impeach_family_general_reply::default_instance_,
      eg_impeach_family_general_reply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_impeach_family_general_reply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_impeach_family_general_reply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(eg_impeach_family_general_reply));
  eg_notify_game_impeach_result_descriptor_ = file->message_type(111);
  static const int eg_notify_game_impeach_result_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_notify_game_impeach_result, is_succeed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_notify_game_impeach_result, money_return_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_notify_game_impeach_result, role_id_),
  };
  eg_notify_game_impeach_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      eg_notify_game_impeach_result_descriptor_,
      eg_notify_game_impeach_result::default_instance_,
      eg_notify_game_impeach_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_notify_game_impeach_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_notify_game_impeach_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(eg_notify_game_impeach_result));
  family_war_dungeon_info_descriptor_ = file->message_type(112);
  static const int family_war_dungeon_info_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(family_war_dungeon_info, family_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(family_war_dungeon_info, family_name_),
  };
  family_war_dungeon_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      family_war_dungeon_info_descriptor_,
      family_war_dungeon_info::default_instance_,
      family_war_dungeon_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(family_war_dungeon_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(family_war_dungeon_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(family_war_dungeon_info));
  family_war_dungeon_data_descriptor_ = file->message_type(113);
  static const int family_war_dungeon_data_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(family_war_dungeon_data, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(family_war_dungeon_data, left_family_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(family_war_dungeon_data, right_family_),
  };
  family_war_dungeon_data_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      family_war_dungeon_data_descriptor_,
      family_war_dungeon_data::default_instance_,
      family_war_dungeon_data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(family_war_dungeon_data, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(family_war_dungeon_data, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(family_war_dungeon_data));
  family_war_dungeon_back_descriptor_ = file->message_type(114);
  static const int family_war_dungeon_back_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(family_war_dungeon_back, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(family_war_dungeon_back, info_),
  };
  family_war_dungeon_back_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      family_war_dungeon_back_descriptor_,
      family_war_dungeon_back::default_instance_,
      family_war_dungeon_back_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(family_war_dungeon_back, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(family_war_dungeon_back, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(family_war_dungeon_back));
  eg_prepare_family_war_request_descriptor_ = file->message_type(115);
  static const int eg_prepare_family_war_request_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_prepare_family_war_request, start_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_prepare_family_war_request, family_war_data_),
  };
  eg_prepare_family_war_request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      eg_prepare_family_war_request_descriptor_,
      eg_prepare_family_war_request::default_instance_,
      eg_prepare_family_war_request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_prepare_family_war_request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_prepare_family_war_request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(eg_prepare_family_war_request));
  ge_prepare_family_war_reply_descriptor_ = file->message_type(116);
  static const int ge_prepare_family_war_reply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_prepare_family_war_reply, dungeons_),
  };
  ge_prepare_family_war_reply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ge_prepare_family_war_reply_descriptor_,
      ge_prepare_family_war_reply::default_instance_,
      ge_prepare_family_war_reply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_prepare_family_war_reply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_prepare_family_war_reply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ge_prepare_family_war_reply));
  eg_family_war_start_notify_descriptor_ = file->message_type(117);
  static const int eg_family_war_start_notify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_family_war_start_notify, end_time_),
  };
  eg_family_war_start_notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      eg_family_war_start_notify_descriptor_,
      eg_family_war_start_notify::default_instance_,
      eg_family_war_start_notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_family_war_start_notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_family_war_start_notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(eg_family_war_start_notify));
  eg_family_war_end_notify_descriptor_ = file->message_type(118);
  static const int eg_family_war_end_notify_offsets_[1] = {
  };
  eg_family_war_end_notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      eg_family_war_end_notify_descriptor_,
      eg_family_war_end_notify::default_instance_,
      eg_family_war_end_notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_family_war_end_notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_family_war_end_notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(eg_family_war_end_notify));
  eg_enter_family_war_scene_request_descriptor_ = file->message_type(119);
  static const int eg_enter_family_war_scene_request_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_enter_family_war_scene_request, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_enter_family_war_scene_request, family_dungeon_id_),
  };
  eg_enter_family_war_scene_request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      eg_enter_family_war_scene_request_descriptor_,
      eg_enter_family_war_scene_request::default_instance_,
      eg_enter_family_war_scene_request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_enter_family_war_scene_request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_enter_family_war_scene_request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(eg_enter_family_war_scene_request));
  family_war_personal_descriptor_ = file->message_type(120);
  static const int family_war_personal_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(family_war_personal, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(family_war_personal, exploit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(family_war_personal, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(family_war_personal, rank_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(family_war_personal, exploit_level_),
  };
  family_war_personal_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      family_war_personal_descriptor_,
      family_war_personal::default_instance_,
      family_war_personal_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(family_war_personal, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(family_war_personal, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(family_war_personal));
  family_war_result_data_descriptor_ = file->message_type(121);
  static const int family_war_result_data_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(family_war_result_data, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(family_war_result_data, win_family_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(family_war_result_data, left_family_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(family_war_result_data, right_family_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(family_war_result_data, all_roles_),
  };
  family_war_result_data_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      family_war_result_data_descriptor_,
      family_war_result_data::default_instance_,
      family_war_result_data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(family_war_result_data, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(family_war_result_data, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(family_war_result_data));
  ge_family_war_early_result_notify_descriptor_ = file->message_type(122);
  static const int ge_family_war_early_result_notify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_family_war_early_result_notify, data_),
  };
  ge_family_war_early_result_notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ge_family_war_early_result_notify_descriptor_,
      ge_family_war_early_result_notify::default_instance_,
      ge_family_war_early_result_notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_family_war_early_result_notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_family_war_early_result_notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ge_family_war_early_result_notify));
  ge_family_war_result_notify_descriptor_ = file->message_type(123);
  static const int ge_family_war_result_notify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_family_war_result_notify, datas_),
  };
  ge_family_war_result_notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ge_family_war_result_notify_descriptor_,
      ge_family_war_result_notify::default_instance_,
      ge_family_war_result_notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_family_war_result_notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_family_war_result_notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ge_family_war_result_notify));
  ge_family_update_glory_notify_descriptor_ = file->message_type(124);
  static const int ge_family_update_glory_notify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_family_update_glory_notify, family_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_family_update_glory_notify, glory_),
  };
  ge_family_update_glory_notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ge_family_update_glory_notify_descriptor_,
      ge_family_update_glory_notify::default_instance_,
      ge_family_update_glory_notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_family_update_glory_notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_family_update_glory_notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ge_family_update_glory_notify));
  ge_family_prayer_request_descriptor_ = file->message_type(125);
  static const int ge_family_prayer_request_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_family_prayer_request, hero_tid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_family_prayer_request, hero_num_),
  };
  ge_family_prayer_request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ge_family_prayer_request_descriptor_,
      ge_family_prayer_request::default_instance_,
      ge_family_prayer_request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_family_prayer_request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_family_prayer_request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ge_family_prayer_request));
  ge_family_prayer_gift_request_descriptor_ = file->message_type(126);
  static const int ge_family_prayer_gift_request_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_family_prayer_gift_request, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_family_prayer_gift_request, hero_tid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_family_prayer_gift_request, hero_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_family_prayer_gift_request, hero_rarity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_family_prayer_gift_request, hero_material_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_family_prayer_gift_request, change_data_),
  };
  ge_family_prayer_gift_request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ge_family_prayer_gift_request_descriptor_,
      ge_family_prayer_gift_request::default_instance_,
      ge_family_prayer_gift_request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_family_prayer_gift_request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_family_prayer_gift_request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ge_family_prayer_gift_request));
  eg_family_prayer_gift_failed_notify_descriptor_ = file->message_type(127);
  static const int eg_family_prayer_gift_failed_notify_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_family_prayer_gift_failed_notify, reply_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_family_prayer_gift_failed_notify, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_family_prayer_gift_failed_notify, hero_tid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_family_prayer_gift_failed_notify, hero_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_family_prayer_gift_failed_notify, hero_material_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_family_prayer_gift_failed_notify, rwd_item_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_family_prayer_gift_failed_notify, change_data_),
  };
  eg_family_prayer_gift_failed_notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      eg_family_prayer_gift_failed_notify_descriptor_,
      eg_family_prayer_gift_failed_notify::default_instance_,
      eg_family_prayer_gift_failed_notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_family_prayer_gift_failed_notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_family_prayer_gift_failed_notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(eg_family_prayer_gift_failed_notify));
  eg_family_country_change_notify_descriptor_ = file->message_type(128);
  static const int eg_family_country_change_notify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_family_country_change_notify, role_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_family_country_change_notify, country_id_),
  };
  eg_family_country_change_notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      eg_family_country_change_notify_descriptor_,
      eg_family_country_change_notify::default_instance_,
      eg_family_country_change_notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_family_country_change_notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_family_country_change_notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(eg_family_country_change_notify));
  eg_family_level_change_notify_descriptor_ = file->message_type(129);
  static const int eg_family_level_change_notify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_family_level_change_notify, role_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_family_level_change_notify, family_level_),
  };
  eg_family_level_change_notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      eg_family_level_change_notify_descriptor_,
      eg_family_level_change_notify::default_instance_,
      eg_family_level_change_notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_family_level_change_notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_family_level_change_notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(eg_family_level_change_notify));
  ge_family_shop_buy_request_descriptor_ = file->message_type(130);
  static const int ge_family_shop_buy_request_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_family_shop_buy_request, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_family_shop_buy_request, shop_item_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_family_shop_buy_request, num_),
  };
  ge_family_shop_buy_request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ge_family_shop_buy_request_descriptor_,
      ge_family_shop_buy_request::default_instance_,
      ge_family_shop_buy_request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_family_shop_buy_request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_family_shop_buy_request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ge_family_shop_buy_request));
  eg_family_shop_buy_reply_descriptor_ = file->message_type(131);
  static const int eg_family_shop_buy_reply_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_family_shop_buy_reply, refresh_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_family_shop_buy_reply, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_family_shop_buy_reply, shop_item_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_family_shop_buy_reply, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_family_shop_buy_reply, shop_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_family_shop_buy_reply, personal_data_),
  };
  eg_family_shop_buy_reply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      eg_family_shop_buy_reply_descriptor_,
      eg_family_shop_buy_reply::default_instance_,
      eg_family_shop_buy_reply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_family_shop_buy_reply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_family_shop_buy_reply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(eg_family_shop_buy_reply));
  ge_family_shop_back_notify_descriptor_ = file->message_type(132);
  static const int ge_family_shop_back_notify_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_family_shop_back_notify, refresh_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_family_shop_back_notify, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_family_shop_back_notify, num_),
  };
  ge_family_shop_back_notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ge_family_shop_back_notify_descriptor_,
      ge_family_shop_back_notify::default_instance_,
      ge_family_shop_back_notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_family_shop_back_notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_family_shop_back_notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ge_family_shop_back_notify));
  ge_gm_set_king_family_notify_descriptor_ = file->message_type(133);
  static const int ge_gm_set_king_family_notify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_gm_set_king_family_notify, country_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_gm_set_king_family_notify, family_uid_),
  };
  ge_gm_set_king_family_notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ge_gm_set_king_family_notify_descriptor_,
      ge_gm_set_king_family_notify::default_instance_,
      ge_gm_set_king_family_notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_gm_set_king_family_notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_gm_set_king_family_notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ge_gm_set_king_family_notify));
  eg_update_country_notify_descriptor_ = file->message_type(134);
  static const int eg_update_country_notify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_update_country_notify, countries_),
  };
  eg_update_country_notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      eg_update_country_notify_descriptor_,
      eg_update_country_notify::default_instance_,
      eg_update_country_notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_update_country_notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_update_country_notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(eg_update_country_notify));
  eg_country_name_change_request_descriptor_ = file->message_type(135);
  static const int eg_country_name_change_request_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_country_name_change_request, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_country_name_change_request, flag_id_),
  };
  eg_country_name_change_request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      eg_country_name_change_request_descriptor_,
      eg_country_name_change_request::default_instance_,
      eg_country_name_change_request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_country_name_change_request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_country_name_change_request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(eg_country_name_change_request));
  ge_country_name_change_reply_descriptor_ = file->message_type(136);
  static const int ge_country_name_change_reply_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_country_name_change_reply, reply_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_country_name_change_reply, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_country_name_change_reply, flag_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_country_name_change_reply, change_data_),
  };
  ge_country_name_change_reply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ge_country_name_change_reply_descriptor_,
      ge_country_name_change_reply::default_instance_,
      ge_country_name_change_reply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_country_name_change_reply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_country_name_change_reply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ge_country_name_change_reply));
  eg_country_year_name_request_descriptor_ = file->message_type(137);
  static const int eg_country_year_name_request_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_country_year_name_request, name_),
  };
  eg_country_year_name_request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      eg_country_year_name_request_descriptor_,
      eg_country_year_name_request::default_instance_,
      eg_country_year_name_request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_country_year_name_request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_country_year_name_request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(eg_country_year_name_request));
  ge_country_year_name_reply_descriptor_ = file->message_type(138);
  static const int ge_country_year_name_reply_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_country_year_name_reply, reply_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_country_year_name_reply, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_country_year_name_reply, change_data_),
  };
  ge_country_year_name_reply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ge_country_year_name_reply_descriptor_,
      ge_country_year_name_reply::default_instance_,
      ge_country_year_name_reply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_country_year_name_reply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_country_year_name_reply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ge_country_year_name_reply));
  eg_sync_data_request_descriptor_ = file->message_type(139);
  static const int eg_sync_data_request_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_sync_data_request, items_),
  };
  eg_sync_data_request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      eg_sync_data_request_descriptor_,
      eg_sync_data_request::default_instance_,
      eg_sync_data_request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_sync_data_request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_sync_data_request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(eg_sync_data_request));
  ge_sync_data_request_descriptor_ = file->message_type(140);
  static const int ge_sync_data_request_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_sync_data_request, items_),
  };
  ge_sync_data_request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ge_sync_data_request_descriptor_,
      ge_sync_data_request::default_instance_,
      ge_sync_data_request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_sync_data_request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_sync_data_request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ge_sync_data_request));
  ge_ready_enter_scene_notify_descriptor_ = file->message_type(141);
  static const int ge_ready_enter_scene_notify_offsets_[1] = {
  };
  ge_ready_enter_scene_notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ge_ready_enter_scene_notify_descriptor_,
      ge_ready_enter_scene_notify::default_instance_,
      ge_ready_enter_scene_notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_ready_enter_scene_notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_ready_enter_scene_notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ge_ready_enter_scene_notify));
  eg_summon_field_boss_request_descriptor_ = file->message_type(142);
  static const int eg_summon_field_boss_request_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_summon_field_boss_request, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_summon_field_boss_request, scene_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_summon_field_boss_request, object_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_summon_field_boss_request, monster_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_summon_field_boss_request, pos_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_summon_field_boss_request, pos_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_summon_field_boss_request, dir_),
  };
  eg_summon_field_boss_request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      eg_summon_field_boss_request_descriptor_,
      eg_summon_field_boss_request::default_instance_,
      eg_summon_field_boss_request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_summon_field_boss_request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_summon_field_boss_request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(eg_summon_field_boss_request));
  eg_field_boss_die_notify_descriptor_ = file->message_type(143);
  static const int eg_field_boss_die_notify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_field_boss_die_notify, object_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_field_boss_die_notify, mode_),
  };
  eg_field_boss_die_notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      eg_field_boss_die_notify_descriptor_,
      eg_field_boss_die_notify::default_instance_,
      eg_field_boss_die_notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_field_boss_die_notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_field_boss_die_notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(eg_field_boss_die_notify));
  ge_summon_field_boss_replay_descriptor_ = file->message_type(144);
  static const int ge_summon_field_boss_replay_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_summon_field_boss_replay, reply_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_summon_field_boss_replay, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_summon_field_boss_replay, object_id_),
  };
  ge_summon_field_boss_replay_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ge_summon_field_boss_replay_descriptor_,
      ge_summon_field_boss_replay::default_instance_,
      ge_summon_field_boss_replay_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_summon_field_boss_replay, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_summon_field_boss_replay, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ge_summon_field_boss_replay));
  eg_clear_all_boss_notify_descriptor_ = file->message_type(145);
  static const int eg_clear_all_boss_notify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_clear_all_boss_notify, object_ids_),
  };
  eg_clear_all_boss_notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      eg_clear_all_boss_notify_descriptor_,
      eg_clear_all_boss_notify::default_instance_,
      eg_clear_all_boss_notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_clear_all_boss_notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_clear_all_boss_notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(eg_clear_all_boss_notify));
  ge_field_boss_killed_notify_descriptor_ = file->message_type(146);
  static const int ge_field_boss_killed_notify_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_field_boss_killed_notify, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_field_boss_killed_notify, object_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_field_boss_killed_notify, killer_name_),
  };
  ge_field_boss_killed_notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ge_field_boss_killed_notify_descriptor_,
      ge_field_boss_killed_notify::default_instance_,
      ge_field_boss_killed_notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_field_boss_killed_notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_field_boss_killed_notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ge_field_boss_killed_notify));
  field_boss_rank_descriptor_ = file->message_type(147);
  static const int field_boss_rank_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(field_boss_rank, rank_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(field_boss_rank, uids_),
  };
  field_boss_rank_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      field_boss_rank_descriptor_,
      field_boss_rank::default_instance_,
      field_boss_rank_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(field_boss_rank, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(field_boss_rank, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(field_boss_rank));
  ge_field_boss_rank_notify_descriptor_ = file->message_type(148);
  static const int ge_field_boss_rank_notify_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_field_boss_rank_notify, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_field_boss_rank_notify, monster_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_field_boss_rank_notify, mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_field_boss_rank_notify, persion_ranks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_field_boss_rank_notify, family_ranks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_field_boss_rank_notify, killers_),
  };
  ge_field_boss_rank_notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ge_field_boss_rank_notify_descriptor_,
      ge_field_boss_rank_notify::default_instance_,
      ge_field_boss_rank_notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_field_boss_rank_notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_field_boss_rank_notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ge_field_boss_rank_notify));
  ge_check_drop_items_request_descriptor_ = file->message_type(149);
  static const int ge_check_drop_items_request_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_check_drop_items_request, item_list_),
  };
  ge_check_drop_items_request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ge_check_drop_items_request_descriptor_,
      ge_check_drop_items_request::default_instance_,
      ge_check_drop_items_request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_check_drop_items_request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_check_drop_items_request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ge_check_drop_items_request));
  eg_check_drop_items_reply_descriptor_ = file->message_type(150);
  static const int eg_check_drop_items_reply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_check_drop_items_reply, item_list_),
  };
  eg_check_drop_items_reply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      eg_check_drop_items_reply_descriptor_,
      eg_check_drop_items_reply::default_instance_,
      eg_check_drop_items_reply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_check_drop_items_reply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_check_drop_items_reply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(eg_check_drop_items_reply));
  eg_syn_item_limit_notify_descriptor_ = file->message_type(151);
  static const int eg_syn_item_limit_notify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_syn_item_limit_notify, item_list_),
  };
  eg_syn_item_limit_notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      eg_syn_item_limit_notify_descriptor_,
      eg_syn_item_limit_notify::default_instance_,
      eg_syn_item_limit_notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_syn_item_limit_notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_syn_item_limit_notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(eg_syn_item_limit_notify));
  ge_redbag_send_notify_descriptor_ = file->message_type(152);
  static const int ge_redbag_send_notify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_redbag_send_notify, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_redbag_send_notify, money_),
  };
  ge_redbag_send_notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ge_redbag_send_notify_descriptor_,
      ge_redbag_send_notify::default_instance_,
      ge_redbag_send_notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_redbag_send_notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_redbag_send_notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ge_redbag_send_notify));
  eg_redbag_draw_notify_descriptor_ = file->message_type(153);
  static const int eg_redbag_draw_notify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_redbag_draw_notify, money_),
  };
  eg_redbag_draw_notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      eg_redbag_draw_notify_descriptor_,
      eg_redbag_draw_notify::default_instance_,
      eg_redbag_draw_notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_redbag_draw_notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_redbag_draw_notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(eg_redbag_draw_notify));
  gall_reload_config_notify_descriptor_ = file->message_type(154);
  static const int gall_reload_config_notify_offsets_[1] = {
  };
  gall_reload_config_notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gall_reload_config_notify_descriptor_,
      gall_reload_config_notify::default_instance_,
      gall_reload_config_notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gall_reload_config_notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gall_reload_config_notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gall_reload_config_notify));
  eg_chat_get_role_info_request_descriptor_ = file->message_type(155);
  static const int eg_chat_get_role_info_request_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_chat_get_role_info_request, param_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_chat_get_role_info_request, chat_notify_),
  };
  eg_chat_get_role_info_request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      eg_chat_get_role_info_request_descriptor_,
      eg_chat_get_role_info_request::default_instance_,
      eg_chat_get_role_info_request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_chat_get_role_info_request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_chat_get_role_info_request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(eg_chat_get_role_info_request));
  ge_chat_get_role_info_reply_descriptor_ = file->message_type(156);
  static const int ge_chat_get_role_info_reply_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_chat_get_role_info_reply, reply_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_chat_get_role_info_reply, chat_role_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_chat_get_role_info_reply, chat_notify_),
  };
  ge_chat_get_role_info_reply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ge_chat_get_role_info_reply_descriptor_,
      ge_chat_get_role_info_reply::default_instance_,
      ge_chat_get_role_info_reply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_chat_get_role_info_reply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_chat_get_role_info_reply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ge_chat_get_role_info_reply));
  fr_syn_transfer_info_request_descriptor_ = file->message_type(157);
  static const int fr_syn_transfer_info_request_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fr_syn_transfer_info_request, server_id_),
  };
  fr_syn_transfer_info_request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      fr_syn_transfer_info_request_descriptor_,
      fr_syn_transfer_info_request::default_instance_,
      fr_syn_transfer_info_request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fr_syn_transfer_info_request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fr_syn_transfer_info_request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(fr_syn_transfer_info_request));
  fr_test_request_descriptor_ = file->message_type(158);
  static const int fr_test_request_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fr_test_request, test1_),
  };
  fr_test_request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      fr_test_request_descriptor_,
      fr_test_request::default_instance_,
      fr_test_request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fr_test_request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fr_test_request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(fr_test_request));
  rf_test_reply_descriptor_ = file->message_type(159);
  static const int rf_test_reply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rf_test_reply, test1_),
  };
  rf_test_reply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      rf_test_reply_descriptor_,
      rf_test_reply::default_instance_,
      rf_test_reply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rf_test_reply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rf_test_reply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(rf_test_reply));
  mail_get_addenda_descriptor_ = file->message_type(160);
  static const int mail_get_addenda_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_get_addenda, mail_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_get_addenda, objs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_get_addenda, item_type_),
  };
  mail_get_addenda_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mail_get_addenda_descriptor_,
      mail_get_addenda::default_instance_,
      mail_get_addenda_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_get_addenda, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_get_addenda, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mail_get_addenda));
  eg_mail_get_addenda_request_descriptor_ = file->message_type(161);
  static const int eg_mail_get_addenda_request_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_mail_get_addenda_request, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_mail_get_addenda_request, addendas_),
  };
  eg_mail_get_addenda_request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      eg_mail_get_addenda_request_descriptor_,
      eg_mail_get_addenda_request::default_instance_,
      eg_mail_get_addenda_request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_mail_get_addenda_request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_mail_get_addenda_request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(eg_mail_get_addenda_request));
  mail_get_addenda_back_descriptor_ = file->message_type(162);
  static const int mail_get_addenda_back_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_get_addenda_back, mail_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_get_addenda_back, reply_code_),
  };
  mail_get_addenda_back_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mail_get_addenda_back_descriptor_,
      mail_get_addenda_back::default_instance_,
      mail_get_addenda_back_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_get_addenda_back, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_get_addenda_back, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mail_get_addenda_back));
  ge_mail_get_addenda_reply_descriptor_ = file->message_type(163);
  static const int ge_mail_get_addenda_reply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_mail_get_addenda_reply, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_mail_get_addenda_reply, backs_),
  };
  ge_mail_get_addenda_reply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ge_mail_get_addenda_reply_descriptor_,
      ge_mail_get_addenda_reply::default_instance_,
      ge_mail_get_addenda_reply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_mail_get_addenda_reply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_mail_get_addenda_reply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ge_mail_get_addenda_reply));
  ge_mail_new_notify_descriptor_ = file->message_type(164);
  static const int ge_mail_new_notify_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_mail_new_notify, uids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_mail_new_notify, mail_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_mail_new_notify, from_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_mail_new_notify, from_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_mail_new_notify, content_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_mail_new_notify, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_mail_new_notify, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_mail_new_notify, items_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_mail_new_notify, get_type_),
  };
  ge_mail_new_notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ge_mail_new_notify_descriptor_,
      ge_mail_new_notify::default_instance_,
      ge_mail_new_notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_mail_new_notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_mail_new_notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ge_mail_new_notify));
  sr_syn_cross_info_notify_descriptor_ = file->message_type(165);
  static const int sr_syn_cross_info_notify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sr_syn_cross_info_notify, cross_id_),
  };
  sr_syn_cross_info_notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      sr_syn_cross_info_notify_descriptor_,
      sr_syn_cross_info_notify::default_instance_,
      sr_syn_cross_info_notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sr_syn_cross_info_notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sr_syn_cross_info_notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(sr_syn_cross_info_notify));
  rs_syn_area_info_notify_descriptor_ = file->message_type(166);
  static const int rs_syn_area_info_notify_offsets_[1] = {
  };
  rs_syn_area_info_notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      rs_syn_area_info_notify_descriptor_,
      rs_syn_area_info_notify::default_instance_,
      rs_syn_area_info_notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rs_syn_area_info_notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rs_syn_area_info_notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(rs_syn_area_info_notify));
  rs_cross_fight_test_notify_descriptor_ = file->message_type(167);
  static const int rs_cross_fight_test_notify_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rs_cross_fight_test_notify, fight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rs_cross_fight_test_notify, user1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rs_cross_fight_test_notify, user2_),
  };
  rs_cross_fight_test_notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      rs_cross_fight_test_notify_descriptor_,
      rs_cross_fight_test_notify::default_instance_,
      rs_cross_fight_test_notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rs_cross_fight_test_notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rs_cross_fight_test_notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(rs_cross_fight_test_notify));
  gr_cross_fight_test_notify_descriptor_ = file->message_type(168);
  static const int gr_cross_fight_test_notify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gr_cross_fight_test_notify, user_),
  };
  gr_cross_fight_test_notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gr_cross_fight_test_notify_descriptor_,
      gr_cross_fight_test_notify::default_instance_,
      gr_cross_fight_test_notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gr_cross_fight_test_notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gr_cross_fight_test_notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gr_cross_fight_test_notify));
  ef_syn_center_info_notify_descriptor_ = file->message_type(169);
  static const int ef_syn_center_info_notify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ef_syn_center_info_notify, server_id_),
  };
  ef_syn_center_info_notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ef_syn_center_info_notify_descriptor_,
      ef_syn_center_info_notify::default_instance_,
      ef_syn_center_info_notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ef_syn_center_info_notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ef_syn_center_info_notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ef_syn_center_info_notify));
  ef_test_request_descriptor_ = file->message_type(170);
  static const int ef_test_request_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ef_test_request, role_game_server_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ef_test_request, test1_),
  };
  ef_test_request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ef_test_request_descriptor_,
      ef_test_request::default_instance_,
      ef_test_request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ef_test_request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ef_test_request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ef_test_request));
  fe_syn_transfer_info_notify_descriptor_ = file->message_type(171);
  static const int fe_syn_transfer_info_notify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fe_syn_transfer_info_notify, server_id_),
  };
  fe_syn_transfer_info_notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      fe_syn_transfer_info_notify_descriptor_,
      fe_syn_transfer_info_notify::default_instance_,
      fe_syn_transfer_info_notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fe_syn_transfer_info_notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fe_syn_transfer_info_notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(fe_syn_transfer_info_notify));
  fe_test_reply_descriptor_ = file->message_type(172);
  static const int fe_test_reply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fe_test_reply, role_game_server_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fe_test_reply, test1_),
  };
  fe_test_reply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      fe_test_reply_descriptor_,
      fe_test_reply::default_instance_,
      fe_test_reply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fe_test_reply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fe_test_reply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(fe_test_reply));
  rs_arena_battle_notify_descriptor_ = file->message_type(173);
  static const int rs_arena_battle_notify_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rs_arena_battle_notify, fight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rs_arena_battle_notify, user1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rs_arena_battle_notify, user2_),
  };
  rs_arena_battle_notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      rs_arena_battle_notify_descriptor_,
      rs_arena_battle_notify::default_instance_,
      rs_arena_battle_notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rs_arena_battle_notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rs_arena_battle_notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(rs_arena_battle_notify));
  rs_arena_battle_ai_notify_descriptor_ = file->message_type(174);
  static const int rs_arena_battle_ai_notify_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rs_arena_battle_ai_notify, fight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rs_arena_battle_ai_notify, user1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rs_arena_battle_ai_notify, npc_),
  };
  rs_arena_battle_ai_notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      rs_arena_battle_ai_notify_descriptor_,
      rs_arena_battle_ai_notify::default_instance_,
      rs_arena_battle_ai_notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rs_arena_battle_ai_notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rs_arena_battle_ai_notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(rs_arena_battle_ai_notify));
  sr_arena_battle_result_notify_descriptor_ = file->message_type(175);
  static const int sr_arena_battle_result_notify_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sr_arena_battle_result_notify, win_obj_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sr_arena_battle_result_notify, lose_obj_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sr_arena_battle_result_notify, fight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sr_arena_battle_result_notify, win_heros_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sr_arena_battle_result_notify, lose_heros_),
  };
  sr_arena_battle_result_notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      sr_arena_battle_result_notify_descriptor_,
      sr_arena_battle_result_notify::default_instance_,
      sr_arena_battle_result_notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sr_arena_battle_result_notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sr_arena_battle_result_notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(sr_arena_battle_result_notify));
  gr_arena_match_request_descriptor_ = file->message_type(176);
  static const int gr_arena_match_request_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gr_arena_match_request, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gr_arena_match_request, arena_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gr_arena_match_request, user_),
  };
  gr_arena_match_request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gr_arena_match_request_descriptor_,
      gr_arena_match_request::default_instance_,
      gr_arena_match_request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gr_arena_match_request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gr_arena_match_request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gr_arena_match_request));
  rg_arena_match_reply_descriptor_ = file->message_type(177);
  static const int rg_arena_match_reply_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rg_arena_match_reply, reply_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rg_arena_match_reply, target_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rg_arena_match_reply, target_arena_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rg_arena_match_reply, server_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rg_arena_match_reply, target_user_),
  };
  rg_arena_match_reply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      rg_arena_match_reply_descriptor_,
      rg_arena_match_reply::default_instance_,
      rg_arena_match_reply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rg_arena_match_reply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rg_arena_match_reply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(rg_arena_match_reply));
  gr_arena_cancel_match_request_descriptor_ = file->message_type(178);
  static const int gr_arena_cancel_match_request_offsets_[1] = {
  };
  gr_arena_cancel_match_request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gr_arena_cancel_match_request_descriptor_,
      gr_arena_cancel_match_request::default_instance_,
      gr_arena_cancel_match_request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gr_arena_cancel_match_request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gr_arena_cancel_match_request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gr_arena_cancel_match_request));
  rg_arena_cancel_match_reply_descriptor_ = file->message_type(179);
  static const int rg_arena_cancel_match_reply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rg_arena_cancel_match_reply, server_id_),
  };
  rg_arena_cancel_match_reply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      rg_arena_cancel_match_reply_descriptor_,
      rg_arena_cancel_match_reply::default_instance_,
      rg_arena_cancel_match_reply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rg_arena_cancel_match_reply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rg_arena_cancel_match_reply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(rg_arena_cancel_match_reply));
  rg_arena_battle_result_notify_descriptor_ = file->message_type(180);
  static const int rg_arena_battle_result_notify_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rg_arena_battle_result_notify, is_win_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rg_arena_battle_result_notify, target_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rg_arena_battle_result_notify, target_arena_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rg_arena_battle_result_notify, target_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rg_arena_battle_result_notify, own_rank_up_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rg_arena_battle_result_notify, own_new_rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rg_arena_battle_result_notify, server_id_),
  };
  rg_arena_battle_result_notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      rg_arena_battle_result_notify_descriptor_,
      rg_arena_battle_result_notify::default_instance_,
      rg_arena_battle_result_notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rg_arena_battle_result_notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rg_arena_battle_result_notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(rg_arena_battle_result_notify));
  gr_get_arena_rank_data_request_descriptor_ = file->message_type(181);
  static const int gr_get_arena_rank_data_request_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gr_get_arena_rank_data_request, rank_start_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gr_get_arena_rank_data_request, server_id_),
  };
  gr_get_arena_rank_data_request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gr_get_arena_rank_data_request_descriptor_,
      gr_get_arena_rank_data_request::default_instance_,
      gr_get_arena_rank_data_request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gr_get_arena_rank_data_request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gr_get_arena_rank_data_request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gr_get_arena_rank_data_request));
  rg_get_arena_rank_data_reply_descriptor_ = file->message_type(182);
  static const int rg_get_arena_rank_data_reply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rg_get_arena_rank_data_reply, rand_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rg_get_arena_rank_data_reply, server_id_),
  };
  rg_get_arena_rank_data_reply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      rg_get_arena_rank_data_reply_descriptor_,
      rg_get_arena_rank_data_reply::default_instance_,
      rg_get_arena_rank_data_reply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rg_get_arena_rank_data_reply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rg_get_arena_rank_data_reply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(rg_get_arena_rank_data_reply));
  gr_arena_self_rank_request_descriptor_ = file->message_type(183);
  static const int gr_arena_self_rank_request_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gr_arena_self_rank_request, server_id_),
  };
  gr_arena_self_rank_request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gr_arena_self_rank_request_descriptor_,
      gr_arena_self_rank_request::default_instance_,
      gr_arena_self_rank_request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gr_arena_self_rank_request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gr_arena_self_rank_request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gr_arena_self_rank_request));
  rg_arena_self_rank_reply_descriptor_ = file->message_type(184);
  static const int rg_arena_self_rank_reply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rg_arena_self_rank_reply, server_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rg_arena_self_rank_reply, rank_),
  };
  rg_arena_self_rank_reply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      rg_arena_self_rank_reply_descriptor_,
      rg_arena_self_rank_reply::default_instance_,
      rg_arena_self_rank_reply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rg_arena_self_rank_reply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rg_arena_self_rank_reply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(rg_arena_self_rank_reply));
  ge_arena_fight_data_notify_descriptor_ = file->message_type(185);
  static const int ge_arena_fight_data_notify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_arena_fight_data_notify, fight_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_arena_fight_data_notify, fight_data_),
  };
  ge_arena_fight_data_notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ge_arena_fight_data_notify_descriptor_,
      ge_arena_fight_data_notify::default_instance_,
      ge_arena_fight_data_notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_arena_fight_data_notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_arena_fight_data_notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ge_arena_fight_data_notify));
  ge_role_online_notify_descriptor_ = file->message_type(186);
  static const int ge_role_online_notify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_role_online_notify, online_),
  };
  ge_role_online_notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ge_role_online_notify_descriptor_,
      ge_role_online_notify::default_instance_,
      ge_role_online_notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_role_online_notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_role_online_notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ge_role_online_notify));
  ge_challenge_request_descriptor_ = file->message_type(187);
  static const int ge_challenge_request_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_challenge_request, target_uid_),
  };
  ge_challenge_request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ge_challenge_request_descriptor_,
      ge_challenge_request::default_instance_,
      ge_challenge_request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_challenge_request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_challenge_request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ge_challenge_request));
  eg_challenge_reply_descriptor_ = file->message_type(188);
  static const int eg_challenge_reply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_challenge_reply, reply_code_),
  };
  eg_challenge_reply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      eg_challenge_reply_descriptor_,
      eg_challenge_reply::default_instance_,
      eg_challenge_reply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_challenge_reply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_challenge_reply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(eg_challenge_reply));
  ge_challenge_process_request_descriptor_ = file->message_type(189);
  static const int ge_challenge_process_request_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_challenge_process_request, process_),
  };
  ge_challenge_process_request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ge_challenge_process_request_descriptor_,
      ge_challenge_process_request::default_instance_,
      ge_challenge_process_request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_challenge_process_request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_challenge_process_request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ge_challenge_process_request));
  eg_challenge_process_reply_descriptor_ = file->message_type(190);
  static const int eg_challenge_process_reply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_challenge_process_reply, reply_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_challenge_process_reply, process_),
  };
  eg_challenge_process_reply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      eg_challenge_process_reply_descriptor_,
      eg_challenge_process_reply::default_instance_,
      eg_challenge_process_reply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_challenge_process_reply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_challenge_process_reply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(eg_challenge_process_reply));
  eg_challenge_fight_request_descriptor_ = file->message_type(191);
  static const int eg_challenge_fight_request_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_challenge_fight_request, target_uid_),
  };
  eg_challenge_fight_request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      eg_challenge_fight_request_descriptor_,
      eg_challenge_fight_request::default_instance_,
      eg_challenge_fight_request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_challenge_fight_request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_challenge_fight_request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(eg_challenge_fight_request));
  ge_challenge_fight_reply_descriptor_ = file->message_type(192);
  static const int ge_challenge_fight_reply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_challenge_fight_reply, result_),
  };
  ge_challenge_fight_reply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ge_challenge_fight_reply_descriptor_,
      ge_challenge_fight_reply::default_instance_,
      ge_challenge_fight_reply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_challenge_fight_reply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_challenge_fight_reply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ge_challenge_fight_reply));
  ge_pk_beat_criminal_notify_descriptor_ = file->message_type(193);
  static const int ge_pk_beat_criminal_notify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_pk_beat_criminal_notify, criminal_uid_),
  };
  ge_pk_beat_criminal_notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ge_pk_beat_criminal_notify_descriptor_,
      ge_pk_beat_criminal_notify::default_instance_,
      ge_pk_beat_criminal_notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_pk_beat_criminal_notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_pk_beat_criminal_notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ge_pk_beat_criminal_notify));
  eg_challenge_transfer_notify_descriptor_ = file->message_type(194);
  static const int eg_challenge_transfer_notify_offsets_[1] = {
  };
  eg_challenge_transfer_notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      eg_challenge_transfer_notify_descriptor_,
      eg_challenge_transfer_notify::default_instance_,
      eg_challenge_transfer_notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_challenge_transfer_notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_challenge_transfer_notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(eg_challenge_transfer_notify));
  eg_king_war_state_notify_descriptor_ = file->message_type(195);
  static const int eg_king_war_state_notify_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_king_war_state_notify, country_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_king_war_state_notify, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_king_war_state_notify, def_family_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_king_war_state_notify, def_family_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_king_war_state_notify, att_family_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_king_war_state_notify, att_family_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_king_war_state_notify, def_help_family_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_king_war_state_notify, def_help_family_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_king_war_state_notify, att_help_family_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_king_war_state_notify, att_help_family_name_),
  };
  eg_king_war_state_notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      eg_king_war_state_notify_descriptor_,
      eg_king_war_state_notify::default_instance_,
      eg_king_war_state_notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_king_war_state_notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_king_war_state_notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(eg_king_war_state_notify));
  eg_king_war_time_end_notify_descriptor_ = file->message_type(196);
  static const int eg_king_war_time_end_notify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_king_war_time_end_notify, country_id_),
  };
  eg_king_war_time_end_notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      eg_king_war_time_end_notify_descriptor_,
      eg_king_war_time_end_notify::default_instance_,
      eg_king_war_time_end_notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_king_war_time_end_notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_king_war_time_end_notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(eg_king_war_time_end_notify));
  king_war_personal_descriptor_ = file->message_type(197);
  static const int king_war_personal_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(king_war_personal, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(king_war_personal, exploit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(king_war_personal, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(king_war_personal, rank_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(king_war_personal, exploit_level_),
  };
  king_war_personal_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      king_war_personal_descriptor_,
      king_war_personal::default_instance_,
      king_war_personal_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(king_war_personal, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(king_war_personal, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(king_war_personal));
  ge_king_war_result_notify_descriptor_ = file->message_type(198);
  static const int ge_king_war_result_notify_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_king_war_result_notify, country_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_king_war_result_notify, win_family_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_king_war_result_notify, all_roles_),
  };
  ge_king_war_result_notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ge_king_war_result_notify_descriptor_,
      ge_king_war_result_notify::default_instance_,
      ge_king_war_result_notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_king_war_result_notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_king_war_result_notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ge_king_war_result_notify));
  ge_king_war_scene_user_num_notify_descriptor_ = file->message_type(199);
  static const int ge_king_war_scene_user_num_notify_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_king_war_scene_user_num_notify, country_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_king_war_scene_user_num_notify, att_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_king_war_scene_user_num_notify, def_num_),
  };
  ge_king_war_scene_user_num_notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ge_king_war_scene_user_num_notify_descriptor_,
      ge_king_war_scene_user_num_notify::default_instance_,
      ge_king_war_scene_user_num_notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_king_war_scene_user_num_notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_king_war_scene_user_num_notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ge_king_war_scene_user_num_notify));
  eg_check_user_buy_goods_request_descriptor_ = file->message_type(200);
  static const int eg_check_user_buy_goods_request_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_check_user_buy_goods_request, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_check_user_buy_goods_request, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_check_user_buy_goods_request, purchased_),
  };
  eg_check_user_buy_goods_request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      eg_check_user_buy_goods_request_descriptor_,
      eg_check_user_buy_goods_request::default_instance_,
      eg_check_user_buy_goods_request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_check_user_buy_goods_request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_check_user_buy_goods_request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(eg_check_user_buy_goods_request));
  ge_check_user_buy_goods_reply_descriptor_ = file->message_type(201);
  static const int ge_check_user_buy_goods_reply_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_check_user_buy_goods_reply, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_check_user_buy_goods_reply, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_check_user_buy_goods_reply, change_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_check_user_buy_goods_reply, purchased_),
  };
  ge_check_user_buy_goods_reply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ge_check_user_buy_goods_reply_descriptor_,
      ge_check_user_buy_goods_reply::default_instance_,
      ge_check_user_buy_goods_reply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_check_user_buy_goods_reply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_check_user_buy_goods_reply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ge_check_user_buy_goods_reply));
  eg_give_user_goods_notify_descriptor_ = file->message_type(202);
  static const int eg_give_user_goods_notify_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_give_user_goods_notify, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_give_user_goods_notify, reply_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_give_user_goods_notify, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_give_user_goods_notify, purchased_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_give_user_goods_notify, change_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_give_user_goods_notify, shop_goods_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_give_user_goods_notify, user_goods_data_),
  };
  eg_give_user_goods_notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      eg_give_user_goods_notify_descriptor_,
      eg_give_user_goods_notify::default_instance_,
      eg_give_user_goods_notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_give_user_goods_notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_give_user_goods_notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(eg_give_user_goods_notify));
  er_world_cup_data_request_descriptor_ = file->message_type(203);
  static const int er_world_cup_data_request_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(er_world_cup_data_request, server_id_),
  };
  er_world_cup_data_request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      er_world_cup_data_request_descriptor_,
      er_world_cup_data_request::default_instance_,
      er_world_cup_data_request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(er_world_cup_data_request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(er_world_cup_data_request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(er_world_cup_data_request));
  re_world_cup_data_reply_descriptor_ = file->message_type(204);
  static const int re_world_cup_data_reply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(re_world_cup_data_reply, world_cup_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(re_world_cup_data_reply, server_id_),
  };
  re_world_cup_data_reply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      re_world_cup_data_reply_descriptor_,
      re_world_cup_data_reply::default_instance_,
      re_world_cup_data_reply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(re_world_cup_data_reply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(re_world_cup_data_reply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(re_world_cup_data_reply));
  re_world_cup_battle_notify_descriptor_ = file->message_type(205);
  static const int re_world_cup_battle_notify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(re_world_cup_battle_notify, battle_info_),
  };
  re_world_cup_battle_notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      re_world_cup_battle_notify_descriptor_,
      re_world_cup_battle_notify::default_instance_,
      re_world_cup_battle_notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(re_world_cup_battle_notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(re_world_cup_battle_notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(re_world_cup_battle_notify));
  re_world_cup_mail_notify_descriptor_ = file->message_type(206);
  static const int re_world_cup_mail_notify_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(re_world_cup_mail_notify, server_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(re_world_cup_mail_notify, player_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(re_world_cup_mail_notify, round_),
  };
  re_world_cup_mail_notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      re_world_cup_mail_notify_descriptor_,
      re_world_cup_mail_notify::default_instance_,
      re_world_cup_mail_notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(re_world_cup_mail_notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(re_world_cup_mail_notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(re_world_cup_mail_notify));
  re_world_cup_coming_quarter_notify_descriptor_ = file->message_type(207);
  static const int re_world_cup_coming_quarter_notify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(re_world_cup_coming_quarter_notify, server_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(re_world_cup_coming_quarter_notify, time_remain_),
  };
  re_world_cup_coming_quarter_notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      re_world_cup_coming_quarter_notify_descriptor_,
      re_world_cup_coming_quarter_notify::default_instance_,
      re_world_cup_coming_quarter_notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(re_world_cup_coming_quarter_notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(re_world_cup_coming_quarter_notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(re_world_cup_coming_quarter_notify));
  re_world_cup_coming_soon_notify_descriptor_ = file->message_type(208);
  static const int re_world_cup_coming_soon_notify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(re_world_cup_coming_soon_notify, server_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(re_world_cup_coming_soon_notify, time_remain_),
  };
  re_world_cup_coming_soon_notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      re_world_cup_coming_soon_notify_descriptor_,
      re_world_cup_coming_soon_notify::default_instance_,
      re_world_cup_coming_soon_notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(re_world_cup_coming_soon_notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(re_world_cup_coming_soon_notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(re_world_cup_coming_soon_notify));
  re_world_cup_ready_notify_descriptor_ = file->message_type(209);
  static const int re_world_cup_ready_notify_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(re_world_cup_ready_notify, server_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(re_world_cup_ready_notify, battle_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(re_world_cup_ready_notify, time_remain_),
  };
  re_world_cup_ready_notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      re_world_cup_ready_notify_descriptor_,
      re_world_cup_ready_notify::default_instance_,
      re_world_cup_ready_notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(re_world_cup_ready_notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(re_world_cup_ready_notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(re_world_cup_ready_notify));
  gr_world_cup_play_request_descriptor_ = file->message_type(210);
  static const int gr_world_cup_play_request_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gr_world_cup_play_request, server_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gr_world_cup_play_request, rcd_),
  };
  gr_world_cup_play_request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gr_world_cup_play_request_descriptor_,
      gr_world_cup_play_request::default_instance_,
      gr_world_cup_play_request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gr_world_cup_play_request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gr_world_cup_play_request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gr_world_cup_play_request));
  rg_world_cup_play_reply_descriptor_ = file->message_type(211);
  static const int rg_world_cup_play_reply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rg_world_cup_play_reply, server_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rg_world_cup_play_reply, reply_code_),
  };
  rg_world_cup_play_reply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      rg_world_cup_play_reply_descriptor_,
      rg_world_cup_play_reply::default_instance_,
      rg_world_cup_play_reply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rg_world_cup_play_reply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rg_world_cup_play_reply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(rg_world_cup_play_reply));
  re_world_cup_update_notify_descriptor_ = file->message_type(212);
  static const int re_world_cup_update_notify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(re_world_cup_update_notify, battle_info_),
  };
  re_world_cup_update_notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      re_world_cup_update_notify_descriptor_,
      re_world_cup_update_notify::default_instance_,
      re_world_cup_update_notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(re_world_cup_update_notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(re_world_cup_update_notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(re_world_cup_update_notify));
  er_world_cup_bet_data_request_descriptor_ = file->message_type(213);
  static const int er_world_cup_bet_data_request_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(er_world_cup_bet_data_request, server_id_),
  };
  er_world_cup_bet_data_request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      er_world_cup_bet_data_request_descriptor_,
      er_world_cup_bet_data_request::default_instance_,
      er_world_cup_bet_data_request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(er_world_cup_bet_data_request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(er_world_cup_bet_data_request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(er_world_cup_bet_data_request));
  re_world_cup_bet_data_reply_descriptor_ = file->message_type(214);
  static const int re_world_cup_bet_data_reply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(re_world_cup_bet_data_reply, server_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(re_world_cup_bet_data_reply, bet_data_),
  };
  re_world_cup_bet_data_reply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      re_world_cup_bet_data_reply_descriptor_,
      re_world_cup_bet_data_reply::default_instance_,
      re_world_cup_bet_data_reply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(re_world_cup_bet_data_reply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(re_world_cup_bet_data_reply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(re_world_cup_bet_data_reply));
  gr_world_cup_bet_request_descriptor_ = file->message_type(215);
  static const int gr_world_cup_bet_request_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gr_world_cup_bet_request, battle_uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gr_world_cup_bet_request, winner_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gr_world_cup_bet_request, odds_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gr_world_cup_bet_request, bet_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gr_world_cup_bet_request, server_id_),
  };
  gr_world_cup_bet_request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gr_world_cup_bet_request_descriptor_,
      gr_world_cup_bet_request::default_instance_,
      gr_world_cup_bet_request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gr_world_cup_bet_request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gr_world_cup_bet_request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gr_world_cup_bet_request));
  rg_world_cup_bet_reply_descriptor_ = file->message_type(216);
  static const int rg_world_cup_bet_reply_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rg_world_cup_bet_reply, reply_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rg_world_cup_bet_reply, odds_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rg_world_cup_bet_reply, bet_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rg_world_cup_bet_reply, self_bet_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rg_world_cup_bet_reply, server_id_),
  };
  rg_world_cup_bet_reply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      rg_world_cup_bet_reply_descriptor_,
      rg_world_cup_bet_reply::default_instance_,
      rg_world_cup_bet_reply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rg_world_cup_bet_reply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rg_world_cup_bet_reply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(rg_world_cup_bet_reply));
  gr_world_cup_bet_reward_request_descriptor_ = file->message_type(217);
  static const int gr_world_cup_bet_reward_request_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gr_world_cup_bet_reward_request, battle_uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gr_world_cup_bet_reward_request, server_id_),
  };
  gr_world_cup_bet_reward_request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gr_world_cup_bet_reward_request_descriptor_,
      gr_world_cup_bet_reward_request::default_instance_,
      gr_world_cup_bet_reward_request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gr_world_cup_bet_reward_request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gr_world_cup_bet_reward_request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gr_world_cup_bet_reward_request));
  rg_world_cup_bet_reward_reply_descriptor_ = file->message_type(218);
  static const int rg_world_cup_bet_reward_reply_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rg_world_cup_bet_reward_reply, reply_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rg_world_cup_bet_reward_reply, reward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rg_world_cup_bet_reward_reply, server_id_),
  };
  rg_world_cup_bet_reward_reply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      rg_world_cup_bet_reward_reply_descriptor_,
      rg_world_cup_bet_reward_reply::default_instance_,
      rg_world_cup_bet_reward_reply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rg_world_cup_bet_reward_reply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rg_world_cup_bet_reward_reply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(rg_world_cup_bet_reward_reply));
  er_world_cup_odds_request_descriptor_ = file->message_type(219);
  static const int er_world_cup_odds_request_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(er_world_cup_odds_request, server_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(er_world_cup_odds_request, battle_uid_),
  };
  er_world_cup_odds_request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      er_world_cup_odds_request_descriptor_,
      er_world_cup_odds_request::default_instance_,
      er_world_cup_odds_request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(er_world_cup_odds_request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(er_world_cup_odds_request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(er_world_cup_odds_request));
  re_world_cup_odds_reply_descriptor_ = file->message_type(220);
  static const int re_world_cup_odds_reply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(re_world_cup_odds_reply, server_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(re_world_cup_odds_reply, odds_data_),
  };
  re_world_cup_odds_reply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      re_world_cup_odds_reply_descriptor_,
      re_world_cup_odds_reply::default_instance_,
      re_world_cup_odds_reply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(re_world_cup_odds_reply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(re_world_cup_odds_reply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(re_world_cup_odds_reply));
  eg_red_point_notify_descriptor_ = file->message_type(221);
  static const int eg_red_point_notify_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_red_point_notify, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_red_point_notify, red_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_red_point_notify, param_),
  };
  eg_red_point_notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      eg_red_point_notify_descriptor_,
      eg_red_point_notify::default_instance_,
      eg_red_point_notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_red_point_notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_red_point_notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(eg_red_point_notify));
  troop_shadow_base_descriptor_ = file->message_type(222);
  static const int troop_shadow_base_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(troop_shadow_base, role_uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(troop_shadow_base, blob_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(troop_shadow_base, country_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(troop_shadow_base, plugin_modle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(troop_shadow_base, country_officer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(troop_shadow_base, family_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(troop_shadow_base, family_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(troop_shadow_base, family_officer_),
  };
  troop_shadow_base_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      troop_shadow_base_descriptor_,
      troop_shadow_base::default_instance_,
      troop_shadow_base_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(troop_shadow_base, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(troop_shadow_base, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(troop_shadow_base));
  troop_extra_info_descriptor_ = file->message_type(223);
  static const int troop_extra_info_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(troop_extra_info, tutor_tid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(troop_extra_info, shadow_info_),
  };
  troop_extra_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      troop_extra_info_descriptor_,
      troop_extra_info::default_instance_,
      troop_extra_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(troop_extra_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(troop_extra_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(troop_extra_info));
  troop_server_data_descriptor_ = file->message_type(224);
  static const int troop_server_data_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(troop_server_data, base_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(troop_server_data, extra_data_),
  };
  troop_server_data_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      troop_server_data_descriptor_,
      troop_server_data::default_instance_,
      troop_server_data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(troop_server_data, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(troop_server_data, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(troop_server_data));
  eg_troop_event_notify_descriptor_ = file->message_type(225);
  static const int eg_troop_event_notify_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_troop_event_notify, event_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_troop_event_notify, member_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_troop_event_notify, troop_),
  };
  eg_troop_event_notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      eg_troop_event_notify_descriptor_,
      eg_troop_event_notify::default_instance_,
      eg_troop_event_notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_troop_event_notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_troop_event_notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(eg_troop_event_notify));
  ge_troop_create_request_descriptor_ = file->message_type(226);
  static const int ge_troop_create_request_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_troop_create_request, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_troop_create_request, role_uid_),
  };
  ge_troop_create_request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ge_troop_create_request_descriptor_,
      ge_troop_create_request::default_instance_,
      ge_troop_create_request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_troop_create_request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_troop_create_request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ge_troop_create_request));
  ge_troop_auto_match_request_descriptor_ = file->message_type(227);
  static const int ge_troop_auto_match_request_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_troop_auto_match_request, type_),
  };
  ge_troop_auto_match_request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ge_troop_auto_match_request_descriptor_,
      ge_troop_auto_match_request::default_instance_,
      ge_troop_auto_match_request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_troop_auto_match_request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_troop_auto_match_request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ge_troop_auto_match_request));
  ge_troop_join_request_descriptor_ = file->message_type(228);
  static const int ge_troop_join_request_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_troop_join_request, troop_id_),
  };
  ge_troop_join_request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ge_troop_join_request_descriptor_,
      ge_troop_join_request::default_instance_,
      ge_troop_join_request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_troop_join_request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_troop_join_request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ge_troop_join_request));
  eg_troop_agree_apply_request_descriptor_ = file->message_type(229);
  static const int eg_troop_agree_apply_request_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_troop_agree_apply_request, apply_uid_),
  };
  eg_troop_agree_apply_request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      eg_troop_agree_apply_request_descriptor_,
      eg_troop_agree_apply_request::default_instance_,
      eg_troop_agree_apply_request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_troop_agree_apply_request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_troop_agree_apply_request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(eg_troop_agree_apply_request));
  ge_troop_agree_apply_reply_descriptor_ = file->message_type(230);
  static const int ge_troop_agree_apply_reply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_troop_agree_apply_reply, apply_uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_troop_agree_apply_reply, reply_code_),
  };
  ge_troop_agree_apply_reply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ge_troop_agree_apply_reply_descriptor_,
      ge_troop_agree_apply_reply::default_instance_,
      ge_troop_agree_apply_reply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_troop_agree_apply_reply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_troop_agree_apply_reply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ge_troop_agree_apply_reply));
  ge_troop_process_invite_request_descriptor_ = file->message_type(231);
  static const int ge_troop_process_invite_request_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_troop_process_invite_request, troop_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_troop_process_invite_request, process_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_troop_process_invite_request, game_code_),
  };
  ge_troop_process_invite_request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ge_troop_process_invite_request_descriptor_,
      ge_troop_process_invite_request::default_instance_,
      ge_troop_process_invite_request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_troop_process_invite_request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_troop_process_invite_request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ge_troop_process_invite_request));
  ge_troop_dissolve_notify_descriptor_ = file->message_type(232);
  static const int ge_troop_dissolve_notify_offsets_[1] = {
  };
  ge_troop_dissolve_notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ge_troop_dissolve_notify_descriptor_,
      ge_troop_dissolve_notify::default_instance_,
      ge_troop_dissolve_notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_troop_dissolve_notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_troop_dissolve_notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ge_troop_dissolve_notify));
  ge_troop_back_request_descriptor_ = file->message_type(233);
  static const int ge_troop_back_request_offsets_[1] = {
  };
  ge_troop_back_request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ge_troop_back_request_descriptor_,
      ge_troop_back_request::default_instance_,
      ge_troop_back_request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_troop_back_request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_troop_back_request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ge_troop_back_request));
  ge_troop_transmission_notify_descriptor_ = file->message_type(234);
  static const int ge_troop_transmission_notify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_troop_transmission_notify, result_),
  };
  ge_troop_transmission_notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ge_troop_transmission_notify_descriptor_,
      ge_troop_transmission_notify::default_instance_,
      ge_troop_transmission_notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_troop_transmission_notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_troop_transmission_notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ge_troop_transmission_notify));
  ge_troop_escape_notify_descriptor_ = file->message_type(235);
  static const int ge_troop_escape_notify_offsets_[1] = {
  };
  ge_troop_escape_notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ge_troop_escape_notify_descriptor_,
      ge_troop_escape_notify::default_instance_,
      ge_troop_escape_notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_troop_escape_notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_troop_escape_notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ge_troop_escape_notify));
  eg_troop_invite_shadow_notify_descriptor_ = file->message_type(236);
  static const int eg_troop_invite_shadow_notify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_troop_invite_shadow_notify, member_info_),
  };
  eg_troop_invite_shadow_notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      eg_troop_invite_shadow_notify_descriptor_,
      eg_troop_invite_shadow_notify::default_instance_,
      eg_troop_invite_shadow_notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_troop_invite_shadow_notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_troop_invite_shadow_notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(eg_troop_invite_shadow_notify));
  ge_troop_del_shadow_notify_descriptor_ = file->message_type(237);
  static const int ge_troop_del_shadow_notify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_troop_del_shadow_notify, troop_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_troop_del_shadow_notify, member_id_),
  };
  ge_troop_del_shadow_notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ge_troop_del_shadow_notify_descriptor_,
      ge_troop_del_shadow_notify::default_instance_,
      ge_troop_del_shadow_notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_troop_del_shadow_notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_troop_del_shadow_notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ge_troop_del_shadow_notify));
  ge_troop_friend_notify_descriptor_ = file->message_type(238);
  static const int ge_troop_friend_notify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_troop_friend_notify, troop_id_),
  };
  ge_troop_friend_notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ge_troop_friend_notify_descriptor_,
      ge_troop_friend_notify::default_instance_,
      ge_troop_friend_notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_troop_friend_notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_troop_friend_notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ge_troop_friend_notify));
  game_scene_reg_info_descriptor_ = file->message_type(239);
  static const int game_scene_reg_info_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_scene_reg_info, scene_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_scene_reg_info, map_tid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_scene_reg_info, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_scene_reg_info, is_diversion_),
  };
  game_scene_reg_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      game_scene_reg_info_descriptor_,
      game_scene_reg_info::default_instance_,
      game_scene_reg_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_scene_reg_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_scene_reg_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(game_scene_reg_info));
  game_scene_reg_ret_descriptor_ = file->message_type(240);
  static const int game_scene_reg_ret_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_scene_reg_ret, scene_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_scene_reg_ret, is_success_),
  };
  game_scene_reg_ret_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      game_scene_reg_ret_descriptor_,
      game_scene_reg_ret::default_instance_,
      game_scene_reg_ret_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_scene_reg_ret, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_scene_reg_ret, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(game_scene_reg_ret));
  ge_game_scene_reg_request_descriptor_ = file->message_type(241);
  static const int ge_game_scene_reg_request_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_game_scene_reg_request, scene_infos_),
  };
  ge_game_scene_reg_request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ge_game_scene_reg_request_descriptor_,
      ge_game_scene_reg_request::default_instance_,
      ge_game_scene_reg_request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_game_scene_reg_request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_game_scene_reg_request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ge_game_scene_reg_request));
  eg_game_scene_reg_reply_descriptor_ = file->message_type(242);
  static const int eg_game_scene_reg_reply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_game_scene_reg_reply, game_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_game_scene_reg_reply, rets_),
  };
  eg_game_scene_reg_reply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      eg_game_scene_reg_reply_descriptor_,
      eg_game_scene_reg_reply::default_instance_,
      eg_game_scene_reg_reply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_game_scene_reg_reply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_game_scene_reg_reply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(eg_game_scene_reg_reply));
  ge_role_scene_info_notify_descriptor_ = file->message_type(243);
  static const int ge_role_scene_info_notify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_role_scene_info_notify, scene_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_role_scene_info_notify, map_tid_),
  };
  ge_role_scene_info_notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ge_role_scene_info_notify_descriptor_,
      ge_role_scene_info_notify::default_instance_,
      ge_role_scene_info_notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_role_scene_info_notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_role_scene_info_notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ge_role_scene_info_notify));
  ge_game_scene_unload_notify_descriptor_ = file->message_type(244);
  static const int ge_game_scene_unload_notify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_game_scene_unload_notify, scene_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_game_scene_unload_notify, mpa_tid_),
  };
  ge_game_scene_unload_notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ge_game_scene_unload_notify_descriptor_,
      ge_game_scene_unload_notify::default_instance_,
      ge_game_scene_unload_notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_game_scene_unload_notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_game_scene_unload_notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ge_game_scene_unload_notify));
  dungeon_create_data_descriptor_ = file->message_type(245);
  static const int dungeon_create_data_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dungeon_create_data, game_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dungeon_create_data, dungeon_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dungeon_create_data, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dungeon_create_data, dungeon_create_id_),
  };
  dungeon_create_data_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      dungeon_create_data_descriptor_,
      dungeon_create_data::default_instance_,
      dungeon_create_data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dungeon_create_data, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dungeon_create_data, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(dungeon_create_data));
  ge_open_dungeon_request_descriptor_ = file->message_type(246);
  static const int ge_open_dungeon_request_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_open_dungeon_request, data_),
  };
  ge_open_dungeon_request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ge_open_dungeon_request_descriptor_,
      ge_open_dungeon_request::default_instance_,
      ge_open_dungeon_request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_open_dungeon_request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_open_dungeon_request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ge_open_dungeon_request));
  eg_create_dugeon_request_descriptor_ = file->message_type(247);
  static const int eg_create_dugeon_request_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_create_dugeon_request, data_),
  };
  eg_create_dugeon_request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      eg_create_dugeon_request_descriptor_,
      eg_create_dugeon_request::default_instance_,
      eg_create_dugeon_request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_create_dugeon_request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_create_dugeon_request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(eg_create_dugeon_request));
  ge_create_dugeon_reply_descriptor_ = file->message_type(248);
  static const int ge_create_dugeon_reply_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_create_dugeon_reply, reply_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_create_dugeon_reply, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_create_dugeon_reply, info_),
  };
  ge_create_dugeon_reply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ge_create_dugeon_reply_descriptor_,
      ge_create_dugeon_reply::default_instance_,
      ge_create_dugeon_reply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_create_dugeon_reply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_create_dugeon_reply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ge_create_dugeon_reply));
  eg_open_dungeon_reply_descriptor_ = file->message_type(249);
  static const int eg_open_dungeon_reply_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_open_dungeon_reply, reply_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_open_dungeon_reply, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_open_dungeon_reply, info_),
  };
  eg_open_dungeon_reply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      eg_open_dungeon_reply_descriptor_,
      eg_open_dungeon_reply::default_instance_,
      eg_open_dungeon_reply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_open_dungeon_reply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_open_dungeon_reply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(eg_open_dungeon_reply));
  ge_scene_state_notify_descriptor_ = file->message_type(250);
  static const int ge_scene_state_notify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_scene_state_notify, scene_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_scene_state_notify, state_),
  };
  ge_scene_state_notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ge_scene_state_notify_descriptor_,
      ge_scene_state_notify::default_instance_,
      ge_scene_state_notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_scene_state_notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_scene_state_notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ge_scene_state_notify));
  ge_goods_buy_request_descriptor_ = file->message_type(251);
  static const int ge_goods_buy_request_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_goods_buy_request, goods_uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_goods_buy_request, item_tid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_goods_buy_request, buy_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_goods_buy_request, price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_goods_buy_request, reason_),
  };
  ge_goods_buy_request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ge_goods_buy_request_descriptor_,
      ge_goods_buy_request::default_instance_,
      ge_goods_buy_request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_goods_buy_request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_goods_buy_request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ge_goods_buy_request));
  eg_goods_buy_reply_descriptor_ = file->message_type(252);
  static const int eg_goods_buy_reply_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_goods_buy_reply, reply_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_goods_buy_reply, buy_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_goods_buy_reply, price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_goods_buy_reply, item_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_goods_buy_reply, reason_),
  };
  eg_goods_buy_reply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      eg_goods_buy_reply_descriptor_,
      eg_goods_buy_reply::default_instance_,
      eg_goods_buy_reply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_goods_buy_reply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_goods_buy_reply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(eg_goods_buy_reply));
  ge_goods_sell_request_descriptor_ = file->message_type(253);
  static const int ge_goods_sell_request_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_goods_sell_request, item_uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_goods_sell_request, price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_goods_sell_request, item_info_),
  };
  ge_goods_sell_request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ge_goods_sell_request_descriptor_,
      ge_goods_sell_request::default_instance_,
      ge_goods_sell_request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_goods_sell_request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_goods_sell_request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ge_goods_sell_request));
  eg_goods_sell_reply_descriptor_ = file->message_type(254);
  static const int eg_goods_sell_reply_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_goods_sell_reply, reply_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_goods_sell_reply, item_uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_goods_sell_reply, price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_goods_sell_reply, item_info_),
  };
  eg_goods_sell_reply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      eg_goods_sell_reply_descriptor_,
      eg_goods_sell_reply::default_instance_,
      eg_goods_sell_reply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_goods_sell_reply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_goods_sell_reply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(eg_goods_sell_reply));
  ge_goods_return_request_descriptor_ = file->message_type(255);
  static const int ge_goods_return_request_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_goods_return_request, goods_uid_),
  };
  ge_goods_return_request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ge_goods_return_request_descriptor_,
      ge_goods_return_request::default_instance_,
      ge_goods_return_request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_goods_return_request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_goods_return_request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ge_goods_return_request));
  eg_goods_return_reply_descriptor_ = file->message_type(256);
  static const int eg_goods_return_reply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_goods_return_reply, reply_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_goods_return_reply, item_info_),
  };
  eg_goods_return_reply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      eg_goods_return_reply_descriptor_,
      eg_goods_return_reply::default_instance_,
      eg_goods_return_reply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_goods_return_reply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_goods_return_reply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(eg_goods_return_reply));
  ge_goods_resell_request_descriptor_ = file->message_type(257);
  static const int ge_goods_resell_request_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_goods_resell_request, goods_uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_goods_resell_request, sell_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_goods_resell_request, price_),
  };
  ge_goods_resell_request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ge_goods_resell_request_descriptor_,
      ge_goods_resell_request::default_instance_,
      ge_goods_resell_request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_goods_resell_request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_goods_resell_request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ge_goods_resell_request));
  eg_goods_resell_reply_descriptor_ = file->message_type(258);
  static const int eg_goods_resell_reply_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_goods_resell_reply, reply_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_goods_resell_reply, sell_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_goods_resell_reply, price_),
  };
  eg_goods_resell_reply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      eg_goods_resell_reply_descriptor_,
      eg_goods_resell_reply::default_instance_,
      eg_goods_resell_reply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_goods_resell_reply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_goods_resell_reply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(eg_goods_resell_reply));
  ge_goods_profit_request_descriptor_ = file->message_type(259);
  static const int ge_goods_profit_request_offsets_[1] = {
  };
  ge_goods_profit_request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ge_goods_profit_request_descriptor_,
      ge_goods_profit_request::default_instance_,
      ge_goods_profit_request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_goods_profit_request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_goods_profit_request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ge_goods_profit_request));
  eg_goods_profit_reply_descriptor_ = file->message_type(260);
  static const int eg_goods_profit_reply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_goods_profit_reply, reply_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_goods_profit_reply, profit_),
  };
  eg_goods_profit_reply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      eg_goods_profit_reply_descriptor_,
      eg_goods_profit_reply::default_instance_,
      eg_goods_profit_reply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_goods_profit_reply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_goods_profit_reply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(eg_goods_profit_reply));
  ge_expedition_fight_data_request_descriptor_ = file->message_type(261);
  static const int ge_expedition_fight_data_request_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_expedition_fight_data_request, level_),
  };
  ge_expedition_fight_data_request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ge_expedition_fight_data_request_descriptor_,
      ge_expedition_fight_data_request::default_instance_,
      ge_expedition_fight_data_request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_expedition_fight_data_request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_expedition_fight_data_request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ge_expedition_fight_data_request));
  eg_expedition_fight_data_reply_descriptor_ = file->message_type(262);
  static const int eg_expedition_fight_data_reply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_expedition_fight_data_reply, stage_list_),
  };
  eg_expedition_fight_data_reply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      eg_expedition_fight_data_reply_descriptor_,
      eg_expedition_fight_data_reply::default_instance_,
      eg_expedition_fight_data_reply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_expedition_fight_data_reply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_expedition_fight_data_reply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(eg_expedition_fight_data_reply));
  ge_expedition_refresh_request_descriptor_ = file->message_type(263);
  static const int ge_expedition_refresh_request_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_expedition_refresh_request, level_),
  };
  ge_expedition_refresh_request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ge_expedition_refresh_request_descriptor_,
      ge_expedition_refresh_request::default_instance_,
      ge_expedition_refresh_request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_expedition_refresh_request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_expedition_refresh_request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ge_expedition_refresh_request));
  eg_expedition_refresh_reply_descriptor_ = file->message_type(264);
  static const int eg_expedition_refresh_reply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_expedition_refresh_reply, stage_list_),
  };
  eg_expedition_refresh_reply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      eg_expedition_refresh_reply_descriptor_,
      eg_expedition_refresh_reply::default_instance_,
      eg_expedition_refresh_reply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_expedition_refresh_reply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_expedition_refresh_reply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(eg_expedition_refresh_reply));
  ge_expedition_refresh_stage_request_descriptor_ = file->message_type(265);
  static const int ge_expedition_refresh_stage_request_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_expedition_refresh_stage_request, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_expedition_refresh_stage_request, stage_id_),
  };
  ge_expedition_refresh_stage_request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ge_expedition_refresh_stage_request_descriptor_,
      ge_expedition_refresh_stage_request::default_instance_,
      ge_expedition_refresh_stage_request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_expedition_refresh_stage_request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_expedition_refresh_stage_request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ge_expedition_refresh_stage_request));
  eg_expedition_refresh_stage_reply_descriptor_ = file->message_type(266);
  static const int eg_expedition_refresh_stage_reply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_expedition_refresh_stage_reply, stage_data_),
  };
  eg_expedition_refresh_stage_reply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      eg_expedition_refresh_stage_reply_descriptor_,
      eg_expedition_refresh_stage_reply::default_instance_,
      eg_expedition_refresh_stage_reply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_expedition_refresh_stage_reply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_expedition_refresh_stage_reply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(eg_expedition_refresh_stage_reply));
  ge_expedition_help_request_descriptor_ = file->message_type(267);
  static const int ge_expedition_help_request_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_expedition_help_request, helper_list_),
  };
  ge_expedition_help_request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ge_expedition_help_request_descriptor_,
      ge_expedition_help_request::default_instance_,
      ge_expedition_help_request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_expedition_help_request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_expedition_help_request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ge_expedition_help_request));
  eg_expedition_help_reply_descriptor_ = file->message_type(268);
  static const int eg_expedition_help_reply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_expedition_help_reply, reply_code_),
  };
  eg_expedition_help_reply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      eg_expedition_help_reply_descriptor_,
      eg_expedition_help_reply::default_instance_,
      eg_expedition_help_reply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_expedition_help_reply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_expedition_help_reply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(eg_expedition_help_reply));
  global_data_day_update_time_descriptor_ = file->message_type(269);
  static const int global_data_day_update_time_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(global_data_day_update_time, update_time_),
  };
  global_data_day_update_time_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      global_data_day_update_time_descriptor_,
      global_data_day_update_time::default_instance_,
      global_data_day_update_time_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(global_data_day_update_time, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(global_data_day_update_time, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(global_data_day_update_time));
  global_data_family_war_descriptor_ = file->message_type(270);
  static const int global_data_family_war_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(global_data_family_war, week_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(global_data_family_war, state_),
  };
  global_data_family_war_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      global_data_family_war_descriptor_,
      global_data_family_war::default_instance_,
      global_data_family_war_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(global_data_family_war, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(global_data_family_war, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(global_data_family_war));
  global_data_country_data_descriptor_ = file->message_type(271);
  static const int global_data_country_data_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(global_data_country_data, period_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(global_data_country_data, period_time_),
  };
  global_data_country_data_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      global_data_country_data_descriptor_,
      global_data_country_data::default_instance_,
      global_data_country_data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(global_data_country_data, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(global_data_country_data, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(global_data_country_data));
  global_data_king_war_data_descriptor_ = file->message_type(272);
  static const int global_data_king_war_data_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(global_data_king_war_data, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(global_data_king_war_data, state_end_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(global_data_king_war_data, battle_time_),
  };
  global_data_king_war_data_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      global_data_king_war_data_descriptor_,
      global_data_king_war_data::default_instance_,
      global_data_king_war_data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(global_data_king_war_data, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(global_data_king_war_data, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(global_data_king_war_data));
  eg_offline_data_notify_descriptor_ = file->message_type(273);
  static const int eg_offline_data_notify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_offline_data_notify, ord_),
  };
  eg_offline_data_notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      eg_offline_data_notify_descriptor_,
      eg_offline_data_notify::default_instance_,
      eg_offline_data_notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_offline_data_notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_offline_data_notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(eg_offline_data_notify));
  ge_offline_data_notify_descriptor_ = file->message_type(274);
  static const int ge_offline_data_notify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_offline_data_notify, ord_),
  };
  ge_offline_data_notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ge_offline_data_notify_descriptor_,
      ge_offline_data_notify::default_instance_,
      ge_offline_data_notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_offline_data_notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_offline_data_notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ge_offline_data_notify));
  eg_notify_progress_state_notify_descriptor_ = file->message_type(275);
  static const int eg_notify_progress_state_notify_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_notify_progress_state_notify, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_notify_progress_state_notify, param1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_notify_progress_state_notify, param2_),
  };
  eg_notify_progress_state_notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      eg_notify_progress_state_notify_descriptor_,
      eg_notify_progress_state_notify::default_instance_,
      eg_notify_progress_state_notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_notify_progress_state_notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_notify_progress_state_notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(eg_notify_progress_state_notify));
  hg_notify_progress_state_notify_descriptor_ = file->message_type(276);
  static const int hg_notify_progress_state_notify_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hg_notify_progress_state_notify, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hg_notify_progress_state_notify, param1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hg_notify_progress_state_notify, param2_),
  };
  hg_notify_progress_state_notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      hg_notify_progress_state_notify_descriptor_,
      hg_notify_progress_state_notify::default_instance_,
      hg_notify_progress_state_notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hg_notify_progress_state_notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hg_notify_progress_state_notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(hg_notify_progress_state_notify));
  ge_tower_trigger_notify_descriptor_ = file->message_type(277);
  static const int ge_tower_trigger_notify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_tower_trigger_notify, tower_trigger_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_tower_trigger_notify, friend_uid_),
  };
  ge_tower_trigger_notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ge_tower_trigger_notify_descriptor_,
      ge_tower_trigger_notify::default_instance_,
      ge_tower_trigger_notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_tower_trigger_notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_tower_trigger_notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ge_tower_trigger_notify));
  eg_tower_trigger_notify_descriptor_ = file->message_type(278);
  static const int eg_tower_trigger_notify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_tower_trigger_notify, tower_trigger_),
  };
  eg_tower_trigger_notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      eg_tower_trigger_notify_descriptor_,
      eg_tower_trigger_notify::default_instance_,
      eg_tower_trigger_notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_tower_trigger_notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_tower_trigger_notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(eg_tower_trigger_notify));
  eg_two_side_friend_notify_descriptor_ = file->message_type(279);
  static const int eg_two_side_friend_notify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_two_side_friend_notify, friend_uid_),
  };
  eg_two_side_friend_notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      eg_two_side_friend_notify_descriptor_,
      eg_two_side_friend_notify::default_instance_,
      eg_two_side_friend_notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_two_side_friend_notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_two_side_friend_notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(eg_two_side_friend_notify));
  ge_check_sys_notice_request_descriptor_ = file->message_type(280);
  static const int ge_check_sys_notice_request_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_check_sys_notice_request, sys_notice_list_),
  };
  ge_check_sys_notice_request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ge_check_sys_notice_request_descriptor_,
      ge_check_sys_notice_request::default_instance_,
      ge_check_sys_notice_request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_check_sys_notice_request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_check_sys_notice_request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ge_check_sys_notice_request));
  eg_check_sys_notice_reply_descriptor_ = file->message_type(281);
  static const int eg_check_sys_notice_reply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_check_sys_notice_reply, sys_notice_list_),
  };
  eg_check_sys_notice_reply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      eg_check_sys_notice_reply_descriptor_,
      eg_check_sys_notice_reply::default_instance_,
      eg_check_sys_notice_reply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_check_sys_notice_reply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_check_sys_notice_reply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(eg_check_sys_notice_reply));
  eg_syn_sys_notice_notify_descriptor_ = file->message_type(282);
  static const int eg_syn_sys_notice_notify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_syn_sys_notice_notify, sys_notice_list_),
  };
  eg_syn_sys_notice_notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      eg_syn_sys_notice_notify_descriptor_,
      eg_syn_sys_notice_notify::default_instance_,
      eg_syn_sys_notice_notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_syn_sys_notice_notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_syn_sys_notice_notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(eg_syn_sys_notice_notify));
  ge_gm_clear_notice_request_descriptor_ = file->message_type(283);
  static const int ge_gm_clear_notice_request_offsets_[1] = {
  };
  ge_gm_clear_notice_request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ge_gm_clear_notice_request_descriptor_,
      ge_gm_clear_notice_request::default_instance_,
      ge_gm_clear_notice_request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_gm_clear_notice_request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_gm_clear_notice_request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ge_gm_clear_notice_request));
  eg_gm_clear_notice_notify_descriptor_ = file->message_type(284);
  static const int eg_gm_clear_notice_notify_offsets_[1] = {
  };
  eg_gm_clear_notice_notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      eg_gm_clear_notice_notify_descriptor_,
      eg_gm_clear_notice_notify::default_instance_,
      eg_gm_clear_notice_notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_gm_clear_notice_notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_gm_clear_notice_notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(eg_gm_clear_notice_notify));
  ge_role_simple_data_notify_descriptor_ = file->message_type(285);
  static const int ge_role_simple_data_notify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_role_simple_data_notify, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_role_simple_data_notify, simple_data_),
  };
  ge_role_simple_data_notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ge_role_simple_data_notify_descriptor_,
      ge_role_simple_data_notify::default_instance_,
      ge_role_simple_data_notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_role_simple_data_notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_role_simple_data_notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ge_role_simple_data_notify));
  eg_offline_arena_join_notify_descriptor_ = file->message_type(286);
  static const int eg_offline_arena_join_notify_offsets_[1] = {
  };
  eg_offline_arena_join_notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      eg_offline_arena_join_notify_descriptor_,
      eg_offline_arena_join_notify::default_instance_,
      eg_offline_arena_join_notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_offline_arena_join_notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_offline_arena_join_notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(eg_offline_arena_join_notify));
  ge_offline_arena_form_notify_descriptor_ = file->message_type(287);
  static const int ge_offline_arena_form_notify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_offline_arena_form_notify, form_data_),
  };
  ge_offline_arena_form_notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ge_offline_arena_form_notify_descriptor_,
      ge_offline_arena_form_notify::default_instance_,
      ge_offline_arena_form_notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_offline_arena_form_notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_offline_arena_form_notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ge_offline_arena_form_notify));
  eg_offline_arena_fight_request_descriptor_ = file->message_type(288);
  static const int eg_offline_arena_fight_request_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_offline_arena_fight_request, enemy_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_offline_arena_fight_request, offline_arena_class_),
  };
  eg_offline_arena_fight_request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      eg_offline_arena_fight_request_descriptor_,
      eg_offline_arena_fight_request::default_instance_,
      eg_offline_arena_fight_request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_offline_arena_fight_request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_offline_arena_fight_request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(eg_offline_arena_fight_request));
  ge_offline_arena_fight_reply_descriptor_ = file->message_type(289);
  static const int ge_offline_arena_fight_reply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_offline_arena_fight_reply, is_win_),
  };
  ge_offline_arena_fight_reply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ge_offline_arena_fight_reply_descriptor_,
      ge_offline_arena_fight_reply::default_instance_,
      ge_offline_arena_fight_reply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_offline_arena_fight_reply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_offline_arena_fight_reply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ge_offline_arena_fight_reply));
  eg_offline_arena_record_award_notify_descriptor_ = file->message_type(290);
  static const int eg_offline_arena_record_award_notify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_offline_arena_record_award_notify, item_list_),
  };
  eg_offline_arena_record_award_notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      eg_offline_arena_record_award_notify_descriptor_,
      eg_offline_arena_record_award_notify::default_instance_,
      eg_offline_arena_record_award_notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_offline_arena_record_award_notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_offline_arena_record_award_notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(eg_offline_arena_record_award_notify));
  eg_offline_arena_score_award_notify_descriptor_ = file->message_type(291);
  static const int eg_offline_arena_score_award_notify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_offline_arena_score_award_notify, drop_id_),
  };
  eg_offline_arena_score_award_notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      eg_offline_arena_score_award_notify_descriptor_,
      eg_offline_arena_score_award_notify::default_instance_,
      eg_offline_arena_score_award_notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_offline_arena_score_award_notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_offline_arena_score_award_notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(eg_offline_arena_score_award_notify));
  eg_offline_arena_sweep_award_notify_descriptor_ = file->message_type(292);
  static const int eg_offline_arena_sweep_award_notify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_offline_arena_sweep_award_notify, drop_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_offline_arena_sweep_award_notify, count_),
  };
  eg_offline_arena_sweep_award_notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      eg_offline_arena_sweep_award_notify_descriptor_,
      eg_offline_arena_sweep_award_notify::default_instance_,
      eg_offline_arena_sweep_award_notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_offline_arena_sweep_award_notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_offline_arena_sweep_award_notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(eg_offline_arena_sweep_award_notify));
  eg_offline_arena_class_award_notify_descriptor_ = file->message_type(293);
  static const int eg_offline_arena_class_award_notify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_offline_arena_class_award_notify, drop_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_offline_arena_class_award_notify, cur_class_),
  };
  eg_offline_arena_class_award_notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      eg_offline_arena_class_award_notify_descriptor_,
      eg_offline_arena_class_award_notify::default_instance_,
      eg_offline_arena_class_award_notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_offline_arena_class_award_notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_offline_arena_class_award_notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(eg_offline_arena_class_award_notify));
  ge_offline_arena_buy_request_descriptor_ = file->message_type(294);
  static const int ge_offline_arena_buy_request_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_offline_arena_buy_request, money_),
  };
  ge_offline_arena_buy_request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ge_offline_arena_buy_request_descriptor_,
      ge_offline_arena_buy_request::default_instance_,
      ge_offline_arena_buy_request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_offline_arena_buy_request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_offline_arena_buy_request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ge_offline_arena_buy_request));
  eg_offline_arena_buy_reply_descriptor_ = file->message_type(295);
  static const int eg_offline_arena_buy_reply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_offline_arena_buy_reply, reply_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_offline_arena_buy_reply, money_),
  };
  eg_offline_arena_buy_reply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      eg_offline_arena_buy_reply_descriptor_,
      eg_offline_arena_buy_reply::default_instance_,
      eg_offline_arena_buy_reply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_offline_arena_buy_reply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_offline_arena_buy_reply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(eg_offline_arena_buy_reply));
  ge_offline_arena_gmrank_notify_descriptor_ = file->message_type(296);
  static const int ge_offline_arena_gmrank_notify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_offline_arena_gmrank_notify, rank_),
  };
  ge_offline_arena_gmrank_notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ge_offline_arena_gmrank_notify_descriptor_,
      ge_offline_arena_gmrank_notify::default_instance_,
      ge_offline_arena_gmrank_notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_offline_arena_gmrank_notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_offline_arena_gmrank_notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ge_offline_arena_gmrank_notify));
  hr_get_hero_strategy_info_request_descriptor_ = file->message_type(297);
  static const int hr_get_hero_strategy_info_request_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hr_get_hero_strategy_info_request, server_id_),
  };
  hr_get_hero_strategy_info_request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      hr_get_hero_strategy_info_request_descriptor_,
      hr_get_hero_strategy_info_request::default_instance_,
      hr_get_hero_strategy_info_request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hr_get_hero_strategy_info_request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hr_get_hero_strategy_info_request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(hr_get_hero_strategy_info_request));
  rh_get_hero_strategy_info_reply_descriptor_ = file->message_type(298);
  static const int rh_get_hero_strategy_info_reply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rh_get_hero_strategy_info_reply, server_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rh_get_hero_strategy_info_reply, hero_info_),
  };
  rh_get_hero_strategy_info_reply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      rh_get_hero_strategy_info_reply_descriptor_,
      rh_get_hero_strategy_info_reply::default_instance_,
      rh_get_hero_strategy_info_reply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rh_get_hero_strategy_info_reply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rh_get_hero_strategy_info_reply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(rh_get_hero_strategy_info_reply));
  ge_troop_sync_task_request_descriptor_ = file->message_type(299);
  static const int ge_troop_sync_task_request_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_troop_sync_task_request, troop_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_troop_sync_task_request, task_info_),
  };
  ge_troop_sync_task_request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ge_troop_sync_task_request_descriptor_,
      ge_troop_sync_task_request::default_instance_,
      ge_troop_sync_task_request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_troop_sync_task_request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_troop_sync_task_request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ge_troop_sync_task_request));
  eg_buy_wish_summon_request_descriptor_ = file->message_type(300);
  static const int eg_buy_wish_summon_request_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_buy_wish_summon_request, summon_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_buy_wish_summon_request, reply_code_),
  };
  eg_buy_wish_summon_request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      eg_buy_wish_summon_request_descriptor_,
      eg_buy_wish_summon_request::default_instance_,
      eg_buy_wish_summon_request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_buy_wish_summon_request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_buy_wish_summon_request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(eg_buy_wish_summon_request));
  ge_buy_wish_summon_reply_descriptor_ = file->message_type(301);
  static const int ge_buy_wish_summon_reply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_buy_wish_summon_reply, summon_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_buy_wish_summon_reply, reply_code_),
  };
  ge_buy_wish_summon_reply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ge_buy_wish_summon_reply_descriptor_,
      ge_buy_wish_summon_reply::default_instance_,
      ge_buy_wish_summon_reply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_buy_wish_summon_reply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_buy_wish_summon_reply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ge_buy_wish_summon_reply));
  eg_king_open_wish_summon_request_descriptor_ = file->message_type(302);
  static const int eg_king_open_wish_summon_request_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_king_open_wish_summon_request, summon_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_king_open_wish_summon_request, reply_code_),
  };
  eg_king_open_wish_summon_request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      eg_king_open_wish_summon_request_descriptor_,
      eg_king_open_wish_summon_request::default_instance_,
      eg_king_open_wish_summon_request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_king_open_wish_summon_request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_king_open_wish_summon_request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(eg_king_open_wish_summon_request));
  ge_king_open_wish_summon_reply_descriptor_ = file->message_type(303);
  static const int ge_king_open_wish_summon_reply_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_king_open_wish_summon_reply, summon_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_king_open_wish_summon_reply, reply_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_king_open_wish_summon_reply, rcd_),
  };
  ge_king_open_wish_summon_reply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ge_king_open_wish_summon_reply_descriptor_,
      ge_king_open_wish_summon_reply::default_instance_,
      ge_king_open_wish_summon_reply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_king_open_wish_summon_reply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_king_open_wish_summon_reply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ge_king_open_wish_summon_reply));
  ge_modify_family_money_request_descriptor_ = file->message_type(304);
  static const int ge_modify_family_money_request_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_modify_family_money_request, family_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_modify_family_money_request, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_modify_family_money_request, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_modify_family_money_request, source_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_modify_family_money_request, source_param_),
  };
  ge_modify_family_money_request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ge_modify_family_money_request_descriptor_,
      ge_modify_family_money_request::default_instance_,
      ge_modify_family_money_request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_modify_family_money_request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_modify_family_money_request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ge_modify_family_money_request));
  ge_modify_country_money_request_descriptor_ = file->message_type(305);
  static const int ge_modify_country_money_request_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_modify_country_money_request, country_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_modify_country_money_request, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_modify_country_money_request, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_modify_country_money_request, source_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_modify_country_money_request, source_param_),
  };
  ge_modify_country_money_request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ge_modify_country_money_request_descriptor_,
      ge_modify_country_money_request::default_instance_,
      ge_modify_country_money_request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_modify_country_money_request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_modify_country_money_request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ge_modify_country_money_request));
  ge_get_wish_summon_info_reply_descriptor_ = file->message_type(306);
  static const int ge_get_wish_summon_info_reply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_get_wish_summon_info_reply, buy_info_),
  };
  ge_get_wish_summon_info_reply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ge_get_wish_summon_info_reply_descriptor_,
      ge_get_wish_summon_info_reply::default_instance_,
      ge_get_wish_summon_info_reply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_get_wish_summon_info_reply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_get_wish_summon_info_reply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ge_get_wish_summon_info_reply));
  ge_destine_item_request_descriptor_ = file->message_type(307);
  static const int ge_destine_item_request_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_destine_item_request, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_destine_item_request, search_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_destine_item_request, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_destine_item_request, reason_),
  };
  ge_destine_item_request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ge_destine_item_request_descriptor_,
      ge_destine_item_request::default_instance_,
      ge_destine_item_request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_destine_item_request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_destine_item_request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ge_destine_item_request));
  eg_destine_item_reply_descriptor_ = file->message_type(308);
  static const int eg_destine_item_reply_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_destine_item_reply, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_destine_item_reply, goods_uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_destine_item_reply, item_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_destine_item_reply, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_destine_item_reply, price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_destine_item_reply, reason_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_destine_item_reply, reply_code_),
  };
  eg_destine_item_reply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      eg_destine_item_reply_descriptor_,
      eg_destine_item_reply::default_instance_,
      eg_destine_item_reply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_destine_item_reply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_destine_item_reply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(eg_destine_item_reply));
  ge_undestine_item_request_descriptor_ = file->message_type(309);
  static const int ge_undestine_item_request_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_undestine_item_request, goods_uid_),
  };
  ge_undestine_item_request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ge_undestine_item_request_descriptor_,
      ge_undestine_item_request::default_instance_,
      ge_undestine_item_request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_undestine_item_request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_undestine_item_request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ge_undestine_item_request));
  ge_push_general_event_request_descriptor_ = file->message_type(310);
  static const int ge_push_general_event_request_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_push_general_event_request, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_push_general_event_request, role_uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_push_general_event_request, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_push_general_event_request, value_),
  };
  ge_push_general_event_request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ge_push_general_event_request_descriptor_,
      ge_push_general_event_request::default_instance_,
      ge_push_general_event_request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_push_general_event_request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_push_general_event_request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ge_push_general_event_request));
  eg_sync_general_event_count_info_descriptor_ = file->message_type(311);
  static const int eg_sync_general_event_count_info_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_sync_general_event_count_info, general_info_),
  };
  eg_sync_general_event_count_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      eg_sync_general_event_count_info_descriptor_,
      eg_sync_general_event_count_info::default_instance_,
      eg_sync_general_event_count_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_sync_general_event_count_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_sync_general_event_count_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(eg_sync_general_event_count_info));
  eg_sync_general_event_data_descriptor_ = file->message_type(312);
  static const int eg_sync_general_event_data_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_sync_general_event_data, info_),
  };
  eg_sync_general_event_data_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      eg_sync_general_event_data_descriptor_,
      eg_sync_general_event_data::default_instance_,
      eg_sync_general_event_data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_sync_general_event_data, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_sync_general_event_data, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(eg_sync_general_event_data));
  eg_sync_general_event_open_descriptor_ = file->message_type(313);
  static const int eg_sync_general_event_open_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_sync_general_event_open, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_sync_general_event_open, info_),
  };
  eg_sync_general_event_open_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      eg_sync_general_event_open_descriptor_,
      eg_sync_general_event_open::default_instance_,
      eg_sync_general_event_open_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_sync_general_event_open, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_sync_general_event_open, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(eg_sync_general_event_open));
  eg_sync_general_event_done_descriptor_ = file->message_type(314);
  static const int eg_sync_general_event_done_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_sync_general_event_done, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_sync_general_event_done, info_),
  };
  eg_sync_general_event_done_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      eg_sync_general_event_done_descriptor_,
      eg_sync_general_event_done::default_instance_,
      eg_sync_general_event_done_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_sync_general_event_done, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_sync_general_event_done, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(eg_sync_general_event_done));
  eg_sync_server_level_descriptor_ = file->message_type(315);
  static const int eg_sync_server_level_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_sync_server_level, level_),
  };
  eg_sync_server_level_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      eg_sync_server_level_descriptor_,
      eg_sync_server_level::default_instance_,
      eg_sync_server_level_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_sync_server_level, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_sync_server_level, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(eg_sync_server_level));
  me_transport_ntf_descriptor_ = file->message_type(316);
  static const int me_transport_ntf_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(me_transport_ntf, role_uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(me_transport_ntf, scene_id_),
  };
  me_transport_ntf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      me_transport_ntf_descriptor_,
      me_transport_ntf::default_instance_,
      me_transport_ntf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(me_transport_ntf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(me_transport_ntf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(me_transport_ntf));
  eg_gm_transport_ntf_descriptor_ = file->message_type(317);
  static const int eg_gm_transport_ntf_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_gm_transport_ntf, role_uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_gm_transport_ntf, scene_id_),
  };
  eg_gm_transport_ntf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      eg_gm_transport_ntf_descriptor_,
      eg_gm_transport_ntf::default_instance_,
      eg_gm_transport_ntf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_gm_transport_ntf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_gm_transport_ntf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(eg_gm_transport_ntf));
  ea_send_gm_msg_to_account_request_descriptor_ = file->message_type(318);
  static const int ea_send_gm_msg_to_account_request_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ea_send_gm_msg_to_account_request, cmd_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ea_send_gm_msg_to_account_request, msg_),
  };
  ea_send_gm_msg_to_account_request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ea_send_gm_msg_to_account_request_descriptor_,
      ea_send_gm_msg_to_account_request::default_instance_,
      ea_send_gm_msg_to_account_request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ea_send_gm_msg_to_account_request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ea_send_gm_msg_to_account_request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ea_send_gm_msg_to_account_request));
  ae_send_gm_msg_to_account_reply_descriptor_ = file->message_type(319);
  static const int ae_send_gm_msg_to_account_reply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ae_send_gm_msg_to_account_reply, reply_code_),
  };
  ae_send_gm_msg_to_account_reply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ae_send_gm_msg_to_account_reply_descriptor_,
      ae_send_gm_msg_to_account_reply::default_instance_,
      ae_send_gm_msg_to_account_reply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ae_send_gm_msg_to_account_reply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ae_send_gm_msg_to_account_reply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ae_send_gm_msg_to_account_reply));
  al_send_gm_msg_to_account_requst_descriptor_ = file->message_type(320);
  static const int al_send_gm_msg_to_account_requst_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(al_send_gm_msg_to_account_requst, cmd_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(al_send_gm_msg_to_account_requst, msg_),
  };
  al_send_gm_msg_to_account_requst_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      al_send_gm_msg_to_account_requst_descriptor_,
      al_send_gm_msg_to_account_requst::default_instance_,
      al_send_gm_msg_to_account_requst_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(al_send_gm_msg_to_account_requst, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(al_send_gm_msg_to_account_requst, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(al_send_gm_msg_to_account_requst));
  la_send_gm_msg_to_account_reply_descriptor_ = file->message_type(321);
  static const int la_send_gm_msg_to_account_reply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(la_send_gm_msg_to_account_reply, reply_code_),
  };
  la_send_gm_msg_to_account_reply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      la_send_gm_msg_to_account_reply_descriptor_,
      la_send_gm_msg_to_account_reply::default_instance_,
      la_send_gm_msg_to_account_reply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(la_send_gm_msg_to_account_reply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(la_send_gm_msg_to_account_reply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(la_send_gm_msg_to_account_reply));
  ln_send_gm_msg_to_account_request_descriptor_ = file->message_type(322);
  static const int ln_send_gm_msg_to_account_request_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ln_send_gm_msg_to_account_request, cmd_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ln_send_gm_msg_to_account_request, server_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ln_send_gm_msg_to_account_request, msg_),
  };
  ln_send_gm_msg_to_account_request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ln_send_gm_msg_to_account_request_descriptor_,
      ln_send_gm_msg_to_account_request::default_instance_,
      ln_send_gm_msg_to_account_request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ln_send_gm_msg_to_account_request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ln_send_gm_msg_to_account_request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ln_send_gm_msg_to_account_request));
  nl_send_gm_msg_to_account_reply_descriptor_ = file->message_type(323);
  static const int nl_send_gm_msg_to_account_reply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nl_send_gm_msg_to_account_reply, reply_code_),
  };
  nl_send_gm_msg_to_account_reply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      nl_send_gm_msg_to_account_reply_descriptor_,
      nl_send_gm_msg_to_account_reply::default_instance_,
      nl_send_gm_msg_to_account_reply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nl_send_gm_msg_to_account_reply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nl_send_gm_msg_to_account_reply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(nl_send_gm_msg_to_account_reply));
  me_manage_role_ntf_descriptor_ = file->message_type(324);
  static const int me_manage_role_ntf_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(me_manage_role_ntf, role_uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(me_manage_role_ntf, manage_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(me_manage_role_ntf, offset_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(me_manage_role_ntf, admin_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(me_manage_role_ntf, reason_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(me_manage_role_ntf, oper_name_),
  };
  me_manage_role_ntf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      me_manage_role_ntf_descriptor_,
      me_manage_role_ntf::default_instance_,
      me_manage_role_ntf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(me_manage_role_ntf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(me_manage_role_ntf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(me_manage_role_ntf));
  em_manage_role_ntf_descriptor_ = file->message_type(325);
  static const int em_manage_role_ntf_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(em_manage_role_ntf, reply_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(em_manage_role_ntf, admin_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(em_manage_role_ntf, manage_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(em_manage_role_ntf, offset_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(em_manage_role_ntf, reason_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(em_manage_role_ntf, oper_name_),
  };
  em_manage_role_ntf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      em_manage_role_ntf_descriptor_,
      em_manage_role_ntf::default_instance_,
      em_manage_role_ntf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(em_manage_role_ntf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(em_manage_role_ntf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(em_manage_role_ntf));
  eh_silence_role_notify_descriptor_ = file->message_type(326);
  static const int eh_silence_role_notify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eh_silence_role_notify, silence_time_),
  };
  eh_silence_role_notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      eh_silence_role_notify_descriptor_,
      eh_silence_role_notify::default_instance_,
      eh_silence_role_notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eh_silence_role_notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eh_silence_role_notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(eh_silence_role_notify));
  nl_syn_account_info_notify_descriptor_ = file->message_type(327);
  static const int nl_syn_account_info_notify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nl_syn_account_info_notify, account_id_),
  };
  nl_syn_account_info_notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      nl_syn_account_info_notify_descriptor_,
      nl_syn_account_info_notify::default_instance_,
      nl_syn_account_info_notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nl_syn_account_info_notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nl_syn_account_info_notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(nl_syn_account_info_notify));
  nd_syn_account_info_notify_descriptor_ = file->message_type(328);
  static const int nd_syn_account_info_notify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nd_syn_account_info_notify, account_id_),
  };
  nd_syn_account_info_notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      nd_syn_account_info_notify_descriptor_,
      nd_syn_account_info_notify::default_instance_,
      nd_syn_account_info_notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nd_syn_account_info_notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nd_syn_account_info_notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(nd_syn_account_info_notify));
  gd_change_name_request_descriptor_ = file->message_type(329);
  static const int gd_change_name_request_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gd_change_name_request, new_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gd_change_name_request, cost_),
  };
  gd_change_name_request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gd_change_name_request_descriptor_,
      gd_change_name_request::default_instance_,
      gd_change_name_request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gd_change_name_request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gd_change_name_request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gd_change_name_request));
  dg_change_name_reply_descriptor_ = file->message_type(330);
  static const int dg_change_name_reply_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dg_change_name_reply, reply_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dg_change_name_reply, new_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dg_change_name_reply, cost_),
  };
  dg_change_name_reply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      dg_change_name_reply_descriptor_,
      dg_change_name_reply::default_instance_,
      dg_change_name_reply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dg_change_name_reply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dg_change_name_reply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(dg_change_name_reply));
  de_change_name_notify_descriptor_ = file->message_type(331);
  static const int de_change_name_notify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(de_change_name_notify, new_name_),
  };
  de_change_name_notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      de_change_name_notify_descriptor_,
      de_change_name_notify::default_instance_,
      de_change_name_notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(de_change_name_notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(de_change_name_notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(de_change_name_notify));
  eh_change_name_notify_descriptor_ = file->message_type(332);
  static const int eh_change_name_notify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eh_change_name_notify, new_name_),
  };
  eh_change_name_notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      eh_change_name_notify_descriptor_,
      eh_change_name_notify::default_instance_,
      eh_change_name_notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eh_change_name_notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eh_change_name_notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(eh_change_name_notify));
  me_reload_config_notify_descriptor_ = file->message_type(333);
  static const int me_reload_config_notify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(me_reload_config_notify, load_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(me_reload_config_notify, file_name_),
  };
  me_reload_config_notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      me_reload_config_notify_descriptor_,
      me_reload_config_notify::default_instance_,
      me_reload_config_notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(me_reload_config_notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(me_reload_config_notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(me_reload_config_notify));
  eg_reload_config_notify_descriptor_ = file->message_type(334);
  static const int eg_reload_config_notify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_reload_config_notify, load_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_reload_config_notify, file_name_),
  };
  eg_reload_config_notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      eg_reload_config_notify_descriptor_,
      eg_reload_config_notify::default_instance_,
      eg_reload_config_notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_reload_config_notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_reload_config_notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(eg_reload_config_notify));
  ge_change_friendliness_request_descriptor_ = file->message_type(335);
  static const int ge_change_friendliness_request_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_change_friendliness_request, my_role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_change_friendliness_request, friend_role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_change_friendliness_request, change_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_change_friendliness_request, reason_),
  };
  ge_change_friendliness_request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ge_change_friendliness_request_descriptor_,
      ge_change_friendliness_request::default_instance_,
      ge_change_friendliness_request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_change_friendliness_request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_change_friendliness_request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ge_change_friendliness_request));
  eg_change_friendliness_notify_descriptor_ = file->message_type(336);
  static const int eg_change_friendliness_notify_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_change_friendliness_notify, my_role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_change_friendliness_notify, friend_role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_change_friendliness_notify, change_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_change_friendliness_notify, reason_),
  };
  eg_change_friendliness_notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      eg_change_friendliness_notify_descriptor_,
      eg_change_friendliness_notify::default_instance_,
      eg_change_friendliness_notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_change_friendliness_notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_change_friendliness_notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(eg_change_friendliness_notify));
  ge_get_friendliness_request_descriptor_ = file->message_type(337);
  static const int ge_get_friendliness_request_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_get_friendliness_request, role_id_),
  };
  ge_get_friendliness_request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ge_get_friendliness_request_descriptor_,
      ge_get_friendliness_request::default_instance_,
      ge_get_friendliness_request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_get_friendliness_request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_get_friendliness_request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ge_get_friendliness_request));
  player_friendliness_descriptor_ = file->message_type(338);
  static const int player_friendliness_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(player_friendliness, friend_role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(player_friendliness, friendliness_),
  };
  player_friendliness_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      player_friendliness_descriptor_,
      player_friendliness::default_instance_,
      player_friendliness_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(player_friendliness, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(player_friendliness, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(player_friendliness));
  eg_get_friendliness_reply_descriptor_ = file->message_type(339);
  static const int eg_get_friendliness_reply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_get_friendliness_reply, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_get_friendliness_reply, friendliness_),
  };
  eg_get_friendliness_reply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      eg_get_friendliness_reply_descriptor_,
      eg_get_friendliness_reply::default_instance_,
      eg_get_friendliness_reply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_get_friendliness_reply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_get_friendliness_reply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(eg_get_friendliness_reply));
  eg_friend_point_operation_request_descriptor_ = file->message_type(340);
  static const int eg_friend_point_operation_request_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_friend_point_operation_request, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_friend_point_operation_request, friend_role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_friend_point_operation_request, operation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_friend_point_operation_request, parameter1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_friend_point_operation_request, parameter2_),
  };
  eg_friend_point_operation_request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      eg_friend_point_operation_request_descriptor_,
      eg_friend_point_operation_request::default_instance_,
      eg_friend_point_operation_request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_friend_point_operation_request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(eg_friend_point_operation_request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(eg_friend_point_operation_request));
  ge_friend_point_operation_reply_descriptor_ = file->message_type(341);
  static const int ge_friend_point_operation_reply_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_friend_point_operation_reply, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_friend_point_operation_reply, friend_role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_friend_point_operation_reply, operation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_friend_point_operation_reply, parameter1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_friend_point_operation_reply, parameter2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_friend_point_operation_reply, info1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_friend_point_operation_reply, info2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_friend_point_operation_reply, info3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_friend_point_operation_reply, change_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_friend_point_operation_reply, reply_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_friend_point_operation_reply, info4_),
  };
  ge_friend_point_operation_reply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ge_friend_point_operation_reply_descriptor_,
      ge_friend_point_operation_reply::default_instance_,
      ge_friend_point_operation_reply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_friend_point_operation_reply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ge_friend_point_operation_reply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ge_friend_point_operation_reply));
  sv_cross_area_video_notify_descriptor_ = file->message_type(342);
  static const int sv_cross_area_video_notify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sv_cross_area_video_notify, base_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sv_cross_area_video_notify, fight_data_),
  };
  sv_cross_area_video_notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      sv_cross_area_video_notify_descriptor_,
      sv_cross_area_video_notify::default_instance_,
      sv_cross_area_video_notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sv_cross_area_video_notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sv_cross_area_video_notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(sv_cross_area_video_notify));
  gv_tower_video_notify_descriptor_ = file->message_type(343);
  static const int gv_tower_video_notify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gv_tower_video_notify, base_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gv_tower_video_notify, fight_data_),
  };
  gv_tower_video_notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gv_tower_video_notify_descriptor_,
      gv_tower_video_notify::default_instance_,
      gv_tower_video_notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gv_tower_video_notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gv_tower_video_notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gv_tower_video_notify));
  data_sync_type_descriptor_ = file->enum_type(0);
  scene_change_type_descriptor_ = file->enum_type(1);
  family_money_change_type_descriptor_ = file->enum_type(2);
  country_money_change_type_descriptor_ = file->enum_type(3);
  EM_FIELD_MODE_descriptor_ = file->enum_type(4);
  em_map_type_descriptor_ = file->enum_type(5);
  dungeon_create_type_descriptor_ = file->enum_type(6);
  em_scene_type_descriptor_ = file->enum_type(7);
  global_data_type_descriptor_ = file->enum_type(8);
  friend_point_operation_descriptor_ = file->enum_type(9);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_server_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    data_sync_item_descriptor_, &data_sync_item::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    server_pingpong_request_descriptor_, &server_pingpong_request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    la_login_request_descriptor_, &la_login_request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    al_login_reply_descriptor_, &al_login_reply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gr_role_leave_game_notify_descriptor_, &gr_role_leave_game_notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ag_role_enter_game_notify_descriptor_, &ag_role_enter_game_notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ga_role_move_notify_descriptor_, &ga_role_move_notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ga_role_into_vision_notify_descriptor_, &ga_role_into_vision_notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ga_role_out_vision_notify_descriptor_, &ga_role_out_vision_notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ga_broadcast_notify_descriptor_, &ga_broadcast_notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ea_broadcast_notify_descriptor_, &ea_broadcast_notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    al_kick_role_notify_descriptor_, &al_kick_role_notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    al_kick_gate_all_user_notify_descriptor_, &al_kick_gate_all_user_notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gh_kick_role_notify_descriptor_, &gh_kick_role_notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gd_batch_save_to_db_notify_descriptor_, &gd_batch_save_to_db_notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    save_to_db_descriptor_, &save_to_db::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gd_role_data_request_descriptor_, &gd_role_data_request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    dg_role_data_reply_descriptor_, &dg_role_data_reply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    al_update_gate_user_num_notify_descriptor_, &al_update_gate_user_num_notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    de_user_data_reply_descriptor_, &de_user_data_reply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    de_user_center_data_reply_descriptor_, &de_user_center_data_reply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ed_sync_role_data_request_descriptor_, &ed_sync_role_data_request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ag_save_user_notify_descriptor_, &ag_save_user_notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ln_syn_login_info_notify_descriptor_, &ln_syn_login_info_notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ln_close_server_notify_descriptor_, &ln_close_server_notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ln_user_num_notify_descriptor_, &ln_user_num_notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ag_syn_gate_info_notify_descriptor_, &ag_syn_gate_info_notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gh_syn_online_role_notify_descriptor_, &gh_syn_online_role_notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    hg_test_notify_descriptor_, &hg_test_notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ah_syn_gate_info_notify_descriptor_, &ah_syn_gate_info_notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ha_test_reply_descriptor_, &ha_test_reply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gh_syn_game_info_notify_descriptor_, &gh_syn_game_info_notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    hg_chat_get_role_info_request_descriptor_, &hg_chat_get_role_info_request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gh_chat_get_role_info_reply_descriptor_, &gh_chat_get_role_info_reply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    hg_get_nearby_roles_request_descriptor_, &hg_get_nearby_roles_request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gh_get_nearby_roles_reply_descriptor_, &gh_get_nearby_roles_reply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    hg_task_seek_help_request_descriptor_, &hg_task_seek_help_request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gh_task_seek_help_reply_descriptor_, &gh_task_seek_help_reply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    hf_syn_chat_info_notify_descriptor_, &hf_syn_chat_info_notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    fh_syn_transfer_info_notify_descriptor_, &fh_syn_transfer_info_notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gh_gm_cmd_notify_descriptor_, &gh_gm_cmd_notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    hf_gm_cmd_notify_descriptor_, &hf_gm_cmd_notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    fh_test_reply_descriptor_, &fh_test_reply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    hg_syn_online_role_list_request_descriptor_, &hg_syn_online_role_list_request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gh_syn_online_role_list_notify_descriptor_, &gh_syn_online_role_list_notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    eh_country_member_change_notify_descriptor_, &eh_country_member_change_notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    eh_family_member_change_notify_descriptor_, &eh_family_member_change_notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    hf_get_server_channel_list_request_descriptor_, &hf_get_server_channel_list_request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    fh_get_server_channel_list_reply_descriptor_, &fh_get_server_channel_list_reply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    hf_change_server_channel_request_descriptor_, &hf_change_server_channel_request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    fh_change_server_channel_reply_descriptor_, &fh_change_server_channel_reply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    fh_change_server_channel_notify_descriptor_, &fh_change_server_channel_notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ha_change_server_channel_notify_descriptor_, &ha_change_server_channel_notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    hf_server_channel_chat_request_descriptor_, &hf_server_channel_chat_request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    fh_server_channel_chat_reply_descriptor_, &fh_server_channel_chat_reply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    fh_server_channel_chat_notify_descriptor_, &fh_server_channel_chat_notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ha_server_channel_chat_notify_descriptor_, &ha_server_channel_chat_notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    hf_personal_chat_request_descriptor_, &hf_personal_chat_request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    fh_personal_chat_notify_descriptor_, &fh_personal_chat_notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ha_personal_chat_notify_descriptor_, &ha_personal_chat_notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    he_family_chat_notify_descriptor_, &he_family_chat_notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    he_personal_chat_notify_descriptor_, &he_personal_chat_notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    eh_kick_all_user_notify_descriptor_, &eh_kick_all_user_notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    dn_create_role_request_descriptor_, &dn_create_role_request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    nd_create_role_reply_descriptor_, &nd_create_role_reply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    dn_role_data_update_notify_descriptor_, &dn_role_data_update_notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    hg_user_channel_notify_descriptor_, &hg_user_channel_notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ge_syn_game_info_notify_descriptor_, &ge_syn_game_info_notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gd_syn_game_info_notify_descriptor_, &gd_syn_game_info_notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    al_syn_gate_info_notify_descriptor_, &al_syn_gate_info_notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ga_syn_game_info_notify_descriptor_, &ga_syn_game_info_notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ga_syn_cross_id_notify_descriptor_, &ga_syn_cross_id_notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ae_syn_gate_info_notify_descriptor_, &ae_syn_gate_info_notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    cross_server_data_descriptor_, &cross_server_data::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ae_reg_user_center_request_descriptor_, &ae_reg_user_center_request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ae_unreg_user_scene_notify_descriptor_, &ae_unreg_user_scene_notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ea_unreg_user_center_notify_descriptor_, &ea_unreg_user_center_notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ae_create_role_request_descriptor_, &ae_create_role_request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ea_create_role_reply_descriptor_, &ea_create_role_reply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ae_user_cross_server_notify_descriptor_, &ae_user_cross_server_notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ea_kick_all_user_notify_descriptor_, &ea_kick_all_user_notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    global_user_data_descriptor_, &global_user_data::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    eg_unreg_user_scene_notify_descriptor_, &eg_unreg_user_scene_notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ge_unreg_user_scene_notify_descriptor_, &ge_unreg_user_scene_notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    eg_reg_user_scene_request_descriptor_, &eg_reg_user_scene_request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ge_reg_user_scene_reply_descriptor_, &ge_reg_user_scene_reply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    eg_relogin_scene_request_descriptor_, &eg_relogin_scene_request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ge_user_cross_scene_request_descriptor_, &ge_user_cross_scene_request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    eg_user_cross_scene_reply_descriptor_, &eg_user_cross_scene_reply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    eg_kick_all_user_notify_descriptor_, &eg_kick_all_user_notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ed_create_role_request_descriptor_, &ed_create_role_request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    de_create_role_reply_descriptor_, &de_create_role_reply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ed_query_role_data_request_descriptor_, &ed_query_role_data_request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    de_query_role_data_reply_descriptor_, &de_query_role_data_reply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ed_role_leave_game_notify_descriptor_, &ed_role_leave_game_notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ag_unreg_user_scene_notify_descriptor_, &ag_unreg_user_scene_notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ga_unreg_user_scene_notify_descriptor_, &ga_unreg_user_scene_notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ga_reg_user_success_notify_descriptor_, &ga_reg_user_success_notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ga_user_cross_server_notify_descriptor_, &ga_user_cross_server_notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ge_city_trade_add_prosperity_value_notify_descriptor_, &ge_city_trade_add_prosperity_value_notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    eg_city_base_info_notify_descriptor_, &eg_city_base_info_notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ge_get_city_list_request_descriptor_, &ge_get_city_list_request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    eg_get_city_list_reply_descriptor_, &eg_get_city_list_reply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    eh_test_request_descriptor_, &eh_test_request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    he_test_reply_descriptor_, &he_test_reply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ge_update_rank_notify_descriptor_, &ge_update_rank_notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ge_create_family_request_descriptor_, &ge_create_family_request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    eg_update_family_info_notify_descriptor_, &eg_update_family_info_notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    eg_create_family_reply_descriptor_, &eg_create_family_reply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ge_impeach_family_general_request_descriptor_, &ge_impeach_family_general_request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    eg_impeach_family_general_reply_descriptor_, &eg_impeach_family_general_reply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    eg_notify_game_impeach_result_descriptor_, &eg_notify_game_impeach_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    family_war_dungeon_info_descriptor_, &family_war_dungeon_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    family_war_dungeon_data_descriptor_, &family_war_dungeon_data::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    family_war_dungeon_back_descriptor_, &family_war_dungeon_back::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    eg_prepare_family_war_request_descriptor_, &eg_prepare_family_war_request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ge_prepare_family_war_reply_descriptor_, &ge_prepare_family_war_reply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    eg_family_war_start_notify_descriptor_, &eg_family_war_start_notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    eg_family_war_end_notify_descriptor_, &eg_family_war_end_notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    eg_enter_family_war_scene_request_descriptor_, &eg_enter_family_war_scene_request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    family_war_personal_descriptor_, &family_war_personal::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    family_war_result_data_descriptor_, &family_war_result_data::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ge_family_war_early_result_notify_descriptor_, &ge_family_war_early_result_notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ge_family_war_result_notify_descriptor_, &ge_family_war_result_notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ge_family_update_glory_notify_descriptor_, &ge_family_update_glory_notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ge_family_prayer_request_descriptor_, &ge_family_prayer_request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ge_family_prayer_gift_request_descriptor_, &ge_family_prayer_gift_request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    eg_family_prayer_gift_failed_notify_descriptor_, &eg_family_prayer_gift_failed_notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    eg_family_country_change_notify_descriptor_, &eg_family_country_change_notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    eg_family_level_change_notify_descriptor_, &eg_family_level_change_notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ge_family_shop_buy_request_descriptor_, &ge_family_shop_buy_request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    eg_family_shop_buy_reply_descriptor_, &eg_family_shop_buy_reply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ge_family_shop_back_notify_descriptor_, &ge_family_shop_back_notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ge_gm_set_king_family_notify_descriptor_, &ge_gm_set_king_family_notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    eg_update_country_notify_descriptor_, &eg_update_country_notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    eg_country_name_change_request_descriptor_, &eg_country_name_change_request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ge_country_name_change_reply_descriptor_, &ge_country_name_change_reply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    eg_country_year_name_request_descriptor_, &eg_country_year_name_request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ge_country_year_name_reply_descriptor_, &ge_country_year_name_reply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    eg_sync_data_request_descriptor_, &eg_sync_data_request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ge_sync_data_request_descriptor_, &ge_sync_data_request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ge_ready_enter_scene_notify_descriptor_, &ge_ready_enter_scene_notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    eg_summon_field_boss_request_descriptor_, &eg_summon_field_boss_request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    eg_field_boss_die_notify_descriptor_, &eg_field_boss_die_notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ge_summon_field_boss_replay_descriptor_, &ge_summon_field_boss_replay::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    eg_clear_all_boss_notify_descriptor_, &eg_clear_all_boss_notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ge_field_boss_killed_notify_descriptor_, &ge_field_boss_killed_notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    field_boss_rank_descriptor_, &field_boss_rank::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ge_field_boss_rank_notify_descriptor_, &ge_field_boss_rank_notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ge_check_drop_items_request_descriptor_, &ge_check_drop_items_request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    eg_check_drop_items_reply_descriptor_, &eg_check_drop_items_reply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    eg_syn_item_limit_notify_descriptor_, &eg_syn_item_limit_notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ge_redbag_send_notify_descriptor_, &ge_redbag_send_notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    eg_redbag_draw_notify_descriptor_, &eg_redbag_draw_notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gall_reload_config_notify_descriptor_, &gall_reload_config_notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    eg_chat_get_role_info_request_descriptor_, &eg_chat_get_role_info_request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ge_chat_get_role_info_reply_descriptor_, &ge_chat_get_role_info_reply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    fr_syn_transfer_info_request_descriptor_, &fr_syn_transfer_info_request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    fr_test_request_descriptor_, &fr_test_request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    rf_test_reply_descriptor_, &rf_test_reply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mail_get_addenda_descriptor_, &mail_get_addenda::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    eg_mail_get_addenda_request_descriptor_, &eg_mail_get_addenda_request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mail_get_addenda_back_descriptor_, &mail_get_addenda_back::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ge_mail_get_addenda_reply_descriptor_, &ge_mail_get_addenda_reply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ge_mail_new_notify_descriptor_, &ge_mail_new_notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    sr_syn_cross_info_notify_descriptor_, &sr_syn_cross_info_notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    rs_syn_area_info_notify_descriptor_, &rs_syn_area_info_notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    rs_cross_fight_test_notify_descriptor_, &rs_cross_fight_test_notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gr_cross_fight_test_notify_descriptor_, &gr_cross_fight_test_notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ef_syn_center_info_notify_descriptor_, &ef_syn_center_info_notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ef_test_request_descriptor_, &ef_test_request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    fe_syn_transfer_info_notify_descriptor_, &fe_syn_transfer_info_notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    fe_test_reply_descriptor_, &fe_test_reply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    rs_arena_battle_notify_descriptor_, &rs_arena_battle_notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    rs_arena_battle_ai_notify_descriptor_, &rs_arena_battle_ai_notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    sr_arena_battle_result_notify_descriptor_, &sr_arena_battle_result_notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gr_arena_match_request_descriptor_, &gr_arena_match_request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    rg_arena_match_reply_descriptor_, &rg_arena_match_reply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gr_arena_cancel_match_request_descriptor_, &gr_arena_cancel_match_request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    rg_arena_cancel_match_reply_descriptor_, &rg_arena_cancel_match_reply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    rg_arena_battle_result_notify_descriptor_, &rg_arena_battle_result_notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gr_get_arena_rank_data_request_descriptor_, &gr_get_arena_rank_data_request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    rg_get_arena_rank_data_reply_descriptor_, &rg_get_arena_rank_data_reply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gr_arena_self_rank_request_descriptor_, &gr_arena_self_rank_request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    rg_arena_self_rank_reply_descriptor_, &rg_arena_self_rank_reply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ge_arena_fight_data_notify_descriptor_, &ge_arena_fight_data_notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ge_role_online_notify_descriptor_, &ge_role_online_notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ge_challenge_request_descriptor_, &ge_challenge_request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    eg_challenge_reply_descriptor_, &eg_challenge_reply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ge_challenge_process_request_descriptor_, &ge_challenge_process_request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    eg_challenge_process_reply_descriptor_, &eg_challenge_process_reply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    eg_challenge_fight_request_descriptor_, &eg_challenge_fight_request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ge_challenge_fight_reply_descriptor_, &ge_challenge_fight_reply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ge_pk_beat_criminal_notify_descriptor_, &ge_pk_beat_criminal_notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    eg_challenge_transfer_notify_descriptor_, &eg_challenge_transfer_notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    eg_king_war_state_notify_descriptor_, &eg_king_war_state_notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    eg_king_war_time_end_notify_descriptor_, &eg_king_war_time_end_notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    king_war_personal_descriptor_, &king_war_personal::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ge_king_war_result_notify_descriptor_, &ge_king_war_result_notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ge_king_war_scene_user_num_notify_descriptor_, &ge_king_war_scene_user_num_notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    eg_check_user_buy_goods_request_descriptor_, &eg_check_user_buy_goods_request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ge_check_user_buy_goods_reply_descriptor_, &ge_check_user_buy_goods_reply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    eg_give_user_goods_notify_descriptor_, &eg_give_user_goods_notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    er_world_cup_data_request_descriptor_, &er_world_cup_data_request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    re_world_cup_data_reply_descriptor_, &re_world_cup_data_reply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    re_world_cup_battle_notify_descriptor_, &re_world_cup_battle_notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    re_world_cup_mail_notify_descriptor_, &re_world_cup_mail_notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    re_world_cup_coming_quarter_notify_descriptor_, &re_world_cup_coming_quarter_notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    re_world_cup_coming_soon_notify_descriptor_, &re_world_cup_coming_soon_notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    re_world_cup_ready_notify_descriptor_, &re_world_cup_ready_notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gr_world_cup_play_request_descriptor_, &gr_world_cup_play_request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    rg_world_cup_play_reply_descriptor_, &rg_world_cup_play_reply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    re_world_cup_update_notify_descriptor_, &re_world_cup_update_notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    er_world_cup_bet_data_request_descriptor_, &er_world_cup_bet_data_request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    re_world_cup_bet_data_reply_descriptor_, &re_world_cup_bet_data_reply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gr_world_cup_bet_request_descriptor_, &gr_world_cup_bet_request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    rg_world_cup_bet_reply_descriptor_, &rg_world_cup_bet_reply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gr_world_cup_bet_reward_request_descriptor_, &gr_world_cup_bet_reward_request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    rg_world_cup_bet_reward_reply_descriptor_, &rg_world_cup_bet_reward_reply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    er_world_cup_odds_request_descriptor_, &er_world_cup_odds_request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    re_world_cup_odds_reply_descriptor_, &re_world_cup_odds_reply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    eg_red_point_notify_descriptor_, &eg_red_point_notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    troop_shadow_base_descriptor_, &troop_shadow_base::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    troop_extra_info_descriptor_, &troop_extra_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    troop_server_data_descriptor_, &troop_server_data::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    eg_troop_event_notify_descriptor_, &eg_troop_event_notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ge_troop_create_request_descriptor_, &ge_troop_create_request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ge_troop_auto_match_request_descriptor_, &ge_troop_auto_match_request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ge_troop_join_request_descriptor_, &ge_troop_join_request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    eg_troop_agree_apply_request_descriptor_, &eg_troop_agree_apply_request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ge_troop_agree_apply_reply_descriptor_, &ge_troop_agree_apply_reply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ge_troop_process_invite_request_descriptor_, &ge_troop_process_invite_request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ge_troop_dissolve_notify_descriptor_, &ge_troop_dissolve_notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ge_troop_back_request_descriptor_, &ge_troop_back_request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ge_troop_transmission_notify_descriptor_, &ge_troop_transmission_notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ge_troop_escape_notify_descriptor_, &ge_troop_escape_notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    eg_troop_invite_shadow_notify_descriptor_, &eg_troop_invite_shadow_notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ge_troop_del_shadow_notify_descriptor_, &ge_troop_del_shadow_notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ge_troop_friend_notify_descriptor_, &ge_troop_friend_notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    game_scene_reg_info_descriptor_, &game_scene_reg_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    game_scene_reg_ret_descriptor_, &game_scene_reg_ret::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ge_game_scene_reg_request_descriptor_, &ge_game_scene_reg_request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    eg_game_scene_reg_reply_descriptor_, &eg_game_scene_reg_reply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ge_role_scene_info_notify_descriptor_, &ge_role_scene_info_notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ge_game_scene_unload_notify_descriptor_, &ge_game_scene_unload_notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    dungeon_create_data_descriptor_, &dungeon_create_data::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ge_open_dungeon_request_descriptor_, &ge_open_dungeon_request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    eg_create_dugeon_request_descriptor_, &eg_create_dugeon_request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ge_create_dugeon_reply_descriptor_, &ge_create_dugeon_reply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    eg_open_dungeon_reply_descriptor_, &eg_open_dungeon_reply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ge_scene_state_notify_descriptor_, &ge_scene_state_notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ge_goods_buy_request_descriptor_, &ge_goods_buy_request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    eg_goods_buy_reply_descriptor_, &eg_goods_buy_reply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ge_goods_sell_request_descriptor_, &ge_goods_sell_request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    eg_goods_sell_reply_descriptor_, &eg_goods_sell_reply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ge_goods_return_request_descriptor_, &ge_goods_return_request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    eg_goods_return_reply_descriptor_, &eg_goods_return_reply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ge_goods_resell_request_descriptor_, &ge_goods_resell_request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    eg_goods_resell_reply_descriptor_, &eg_goods_resell_reply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ge_goods_profit_request_descriptor_, &ge_goods_profit_request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    eg_goods_profit_reply_descriptor_, &eg_goods_profit_reply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ge_expedition_fight_data_request_descriptor_, &ge_expedition_fight_data_request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    eg_expedition_fight_data_reply_descriptor_, &eg_expedition_fight_data_reply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ge_expedition_refresh_request_descriptor_, &ge_expedition_refresh_request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    eg_expedition_refresh_reply_descriptor_, &eg_expedition_refresh_reply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ge_expedition_refresh_stage_request_descriptor_, &ge_expedition_refresh_stage_request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    eg_expedition_refresh_stage_reply_descriptor_, &eg_expedition_refresh_stage_reply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ge_expedition_help_request_descriptor_, &ge_expedition_help_request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    eg_expedition_help_reply_descriptor_, &eg_expedition_help_reply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    global_data_day_update_time_descriptor_, &global_data_day_update_time::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    global_data_family_war_descriptor_, &global_data_family_war::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    global_data_country_data_descriptor_, &global_data_country_data::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    global_data_king_war_data_descriptor_, &global_data_king_war_data::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    eg_offline_data_notify_descriptor_, &eg_offline_data_notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ge_offline_data_notify_descriptor_, &ge_offline_data_notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    eg_notify_progress_state_notify_descriptor_, &eg_notify_progress_state_notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    hg_notify_progress_state_notify_descriptor_, &hg_notify_progress_state_notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ge_tower_trigger_notify_descriptor_, &ge_tower_trigger_notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    eg_tower_trigger_notify_descriptor_, &eg_tower_trigger_notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    eg_two_side_friend_notify_descriptor_, &eg_two_side_friend_notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ge_check_sys_notice_request_descriptor_, &ge_check_sys_notice_request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    eg_check_sys_notice_reply_descriptor_, &eg_check_sys_notice_reply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    eg_syn_sys_notice_notify_descriptor_, &eg_syn_sys_notice_notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ge_gm_clear_notice_request_descriptor_, &ge_gm_clear_notice_request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    eg_gm_clear_notice_notify_descriptor_, &eg_gm_clear_notice_notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ge_role_simple_data_notify_descriptor_, &ge_role_simple_data_notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    eg_offline_arena_join_notify_descriptor_, &eg_offline_arena_join_notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ge_offline_arena_form_notify_descriptor_, &ge_offline_arena_form_notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    eg_offline_arena_fight_request_descriptor_, &eg_offline_arena_fight_request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ge_offline_arena_fight_reply_descriptor_, &ge_offline_arena_fight_reply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    eg_offline_arena_record_award_notify_descriptor_, &eg_offline_arena_record_award_notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    eg_offline_arena_score_award_notify_descriptor_, &eg_offline_arena_score_award_notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    eg_offline_arena_sweep_award_notify_descriptor_, &eg_offline_arena_sweep_award_notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    eg_offline_arena_class_award_notify_descriptor_, &eg_offline_arena_class_award_notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ge_offline_arena_buy_request_descriptor_, &ge_offline_arena_buy_request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    eg_offline_arena_buy_reply_descriptor_, &eg_offline_arena_buy_reply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ge_offline_arena_gmrank_notify_descriptor_, &ge_offline_arena_gmrank_notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    hr_get_hero_strategy_info_request_descriptor_, &hr_get_hero_strategy_info_request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    rh_get_hero_strategy_info_reply_descriptor_, &rh_get_hero_strategy_info_reply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ge_troop_sync_task_request_descriptor_, &ge_troop_sync_task_request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    eg_buy_wish_summon_request_descriptor_, &eg_buy_wish_summon_request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ge_buy_wish_summon_reply_descriptor_, &ge_buy_wish_summon_reply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    eg_king_open_wish_summon_request_descriptor_, &eg_king_open_wish_summon_request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ge_king_open_wish_summon_reply_descriptor_, &ge_king_open_wish_summon_reply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ge_modify_family_money_request_descriptor_, &ge_modify_family_money_request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ge_modify_country_money_request_descriptor_, &ge_modify_country_money_request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ge_get_wish_summon_info_reply_descriptor_, &ge_get_wish_summon_info_reply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ge_destine_item_request_descriptor_, &ge_destine_item_request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    eg_destine_item_reply_descriptor_, &eg_destine_item_reply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ge_undestine_item_request_descriptor_, &ge_undestine_item_request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ge_push_general_event_request_descriptor_, &ge_push_general_event_request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    eg_sync_general_event_count_info_descriptor_, &eg_sync_general_event_count_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    eg_sync_general_event_data_descriptor_, &eg_sync_general_event_data::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    eg_sync_general_event_open_descriptor_, &eg_sync_general_event_open::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    eg_sync_general_event_done_descriptor_, &eg_sync_general_event_done::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    eg_sync_server_level_descriptor_, &eg_sync_server_level::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    me_transport_ntf_descriptor_, &me_transport_ntf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    eg_gm_transport_ntf_descriptor_, &eg_gm_transport_ntf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ea_send_gm_msg_to_account_request_descriptor_, &ea_send_gm_msg_to_account_request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ae_send_gm_msg_to_account_reply_descriptor_, &ae_send_gm_msg_to_account_reply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    al_send_gm_msg_to_account_requst_descriptor_, &al_send_gm_msg_to_account_requst::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    la_send_gm_msg_to_account_reply_descriptor_, &la_send_gm_msg_to_account_reply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ln_send_gm_msg_to_account_request_descriptor_, &ln_send_gm_msg_to_account_request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    nl_send_gm_msg_to_account_reply_descriptor_, &nl_send_gm_msg_to_account_reply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    me_manage_role_ntf_descriptor_, &me_manage_role_ntf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    em_manage_role_ntf_descriptor_, &em_manage_role_ntf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    eh_silence_role_notify_descriptor_, &eh_silence_role_notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    nl_syn_account_info_notify_descriptor_, &nl_syn_account_info_notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    nd_syn_account_info_notify_descriptor_, &nd_syn_account_info_notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gd_change_name_request_descriptor_, &gd_change_name_request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    dg_change_name_reply_descriptor_, &dg_change_name_reply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    de_change_name_notify_descriptor_, &de_change_name_notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    eh_change_name_notify_descriptor_, &eh_change_name_notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    me_reload_config_notify_descriptor_, &me_reload_config_notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    eg_reload_config_notify_descriptor_, &eg_reload_config_notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ge_change_friendliness_request_descriptor_, &ge_change_friendliness_request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    eg_change_friendliness_notify_descriptor_, &eg_change_friendliness_notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ge_get_friendliness_request_descriptor_, &ge_get_friendliness_request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    player_friendliness_descriptor_, &player_friendliness::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    eg_get_friendliness_reply_descriptor_, &eg_get_friendliness_reply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    eg_friend_point_operation_request_descriptor_, &eg_friend_point_operation_request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ge_friend_point_operation_reply_descriptor_, &ge_friend_point_operation_reply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    sv_cross_area_video_notify_descriptor_, &sv_cross_area_video_notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gv_tower_video_notify_descriptor_, &gv_tower_video_notify::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_server_2eproto() {
  delete data_sync_item::default_instance_;
  delete data_sync_item_reflection_;
  delete server_pingpong_request::default_instance_;
  delete server_pingpong_request_reflection_;
  delete la_login_request::default_instance_;
  delete la_login_request_reflection_;
  delete al_login_reply::default_instance_;
  delete al_login_reply_reflection_;
  delete gr_role_leave_game_notify::default_instance_;
  delete gr_role_leave_game_notify_reflection_;
  delete ag_role_enter_game_notify::default_instance_;
  delete ag_role_enter_game_notify_reflection_;
  delete ga_role_move_notify::default_instance_;
  delete ga_role_move_notify_reflection_;
  delete ga_role_into_vision_notify::default_instance_;
  delete ga_role_into_vision_notify_reflection_;
  delete ga_role_out_vision_notify::default_instance_;
  delete ga_role_out_vision_notify_reflection_;
  delete ga_broadcast_notify::default_instance_;
  delete ga_broadcast_notify_reflection_;
  delete ea_broadcast_notify::default_instance_;
  delete ea_broadcast_notify_reflection_;
  delete al_kick_role_notify::default_instance_;
  delete al_kick_role_notify_reflection_;
  delete al_kick_gate_all_user_notify::default_instance_;
  delete al_kick_gate_all_user_notify_reflection_;
  delete gh_kick_role_notify::default_instance_;
  delete gh_kick_role_notify_reflection_;
  delete gd_batch_save_to_db_notify::default_instance_;
  delete gd_batch_save_to_db_notify_reflection_;
  delete save_to_db::default_instance_;
  delete save_to_db_reflection_;
  delete gd_role_data_request::default_instance_;
  delete gd_role_data_request_reflection_;
  delete dg_role_data_reply::default_instance_;
  delete dg_role_data_reply_reflection_;
  delete al_update_gate_user_num_notify::default_instance_;
  delete al_update_gate_user_num_notify_reflection_;
  delete de_user_data_reply::default_instance_;
  delete de_user_data_reply_reflection_;
  delete de_user_center_data_reply::default_instance_;
  delete de_user_center_data_reply_reflection_;
  delete ed_sync_role_data_request::default_instance_;
  delete ed_sync_role_data_request_reflection_;
  delete ag_save_user_notify::default_instance_;
  delete ag_save_user_notify_reflection_;
  delete ln_syn_login_info_notify::default_instance_;
  delete ln_syn_login_info_notify_reflection_;
  delete ln_close_server_notify::default_instance_;
  delete ln_close_server_notify_reflection_;
  delete ln_user_num_notify::default_instance_;
  delete ln_user_num_notify_reflection_;
  delete ag_syn_gate_info_notify::default_instance_;
  delete ag_syn_gate_info_notify_reflection_;
  delete gh_syn_online_role_notify::default_instance_;
  delete gh_syn_online_role_notify_reflection_;
  delete hg_test_notify::default_instance_;
  delete hg_test_notify_reflection_;
  delete ah_syn_gate_info_notify::default_instance_;
  delete ah_syn_gate_info_notify_reflection_;
  delete ha_test_reply::default_instance_;
  delete ha_test_reply_reflection_;
  delete gh_syn_game_info_notify::default_instance_;
  delete gh_syn_game_info_notify_reflection_;
  delete hg_chat_get_role_info_request::default_instance_;
  delete hg_chat_get_role_info_request_reflection_;
  delete gh_chat_get_role_info_reply::default_instance_;
  delete gh_chat_get_role_info_reply_reflection_;
  delete hg_get_nearby_roles_request::default_instance_;
  delete hg_get_nearby_roles_request_reflection_;
  delete gh_get_nearby_roles_reply::default_instance_;
  delete gh_get_nearby_roles_reply_reflection_;
  delete hg_task_seek_help_request::default_instance_;
  delete hg_task_seek_help_request_reflection_;
  delete gh_task_seek_help_reply::default_instance_;
  delete gh_task_seek_help_reply_reflection_;
  delete hf_syn_chat_info_notify::default_instance_;
  delete hf_syn_chat_info_notify_reflection_;
  delete fh_syn_transfer_info_notify::default_instance_;
  delete fh_syn_transfer_info_notify_reflection_;
  delete gh_gm_cmd_notify::default_instance_;
  delete gh_gm_cmd_notify_reflection_;
  delete hf_gm_cmd_notify::default_instance_;
  delete hf_gm_cmd_notify_reflection_;
  delete fh_test_reply::default_instance_;
  delete fh_test_reply_reflection_;
  delete hg_syn_online_role_list_request::default_instance_;
  delete hg_syn_online_role_list_request_reflection_;
  delete gh_syn_online_role_list_notify::default_instance_;
  delete gh_syn_online_role_list_notify_reflection_;
  delete eh_country_member_change_notify::default_instance_;
  delete eh_country_member_change_notify_reflection_;
  delete eh_family_member_change_notify::default_instance_;
  delete eh_family_member_change_notify_reflection_;
  delete hf_get_server_channel_list_request::default_instance_;
  delete hf_get_server_channel_list_request_reflection_;
  delete fh_get_server_channel_list_reply::default_instance_;
  delete fh_get_server_channel_list_reply_reflection_;
  delete hf_change_server_channel_request::default_instance_;
  delete hf_change_server_channel_request_reflection_;
  delete fh_change_server_channel_reply::default_instance_;
  delete fh_change_server_channel_reply_reflection_;
  delete fh_change_server_channel_notify::default_instance_;
  delete fh_change_server_channel_notify_reflection_;
  delete ha_change_server_channel_notify::default_instance_;
  delete ha_change_server_channel_notify_reflection_;
  delete hf_server_channel_chat_request::default_instance_;
  delete hf_server_channel_chat_request_reflection_;
  delete fh_server_channel_chat_reply::default_instance_;
  delete fh_server_channel_chat_reply_reflection_;
  delete fh_server_channel_chat_notify::default_instance_;
  delete fh_server_channel_chat_notify_reflection_;
  delete ha_server_channel_chat_notify::default_instance_;
  delete ha_server_channel_chat_notify_reflection_;
  delete hf_personal_chat_request::default_instance_;
  delete hf_personal_chat_request_reflection_;
  delete fh_personal_chat_notify::default_instance_;
  delete fh_personal_chat_notify_reflection_;
  delete ha_personal_chat_notify::default_instance_;
  delete ha_personal_chat_notify_reflection_;
  delete he_family_chat_notify::default_instance_;
  delete he_family_chat_notify_reflection_;
  delete he_personal_chat_notify::default_instance_;
  delete he_personal_chat_notify_reflection_;
  delete eh_kick_all_user_notify::default_instance_;
  delete eh_kick_all_user_notify_reflection_;
  delete dn_create_role_request::default_instance_;
  delete dn_create_role_request_reflection_;
  delete nd_create_role_reply::default_instance_;
  delete nd_create_role_reply_reflection_;
  delete dn_role_data_update_notify::default_instance_;
  delete dn_role_data_update_notify_reflection_;
  delete hg_user_channel_notify::default_instance_;
  delete hg_user_channel_notify_reflection_;
  delete ge_syn_game_info_notify::default_instance_;
  delete ge_syn_game_info_notify_reflection_;
  delete gd_syn_game_info_notify::default_instance_;
  delete gd_syn_game_info_notify_reflection_;
  delete al_syn_gate_info_notify::default_instance_;
  delete al_syn_gate_info_notify_reflection_;
  delete ga_syn_game_info_notify::default_instance_;
  delete ga_syn_game_info_notify_reflection_;
  delete ga_syn_cross_id_notify::default_instance_;
  delete ga_syn_cross_id_notify_reflection_;
  delete ae_syn_gate_info_notify::default_instance_;
  delete ae_syn_gate_info_notify_reflection_;
  delete cross_server_data::default_instance_;
  delete cross_server_data_reflection_;
  delete ae_reg_user_center_request::default_instance_;
  delete ae_reg_user_center_request_reflection_;
  delete ae_unreg_user_scene_notify::default_instance_;
  delete ae_unreg_user_scene_notify_reflection_;
  delete ea_unreg_user_center_notify::default_instance_;
  delete ea_unreg_user_center_notify_reflection_;
  delete ae_create_role_request::default_instance_;
  delete ae_create_role_request_reflection_;
  delete ea_create_role_reply::default_instance_;
  delete ea_create_role_reply_reflection_;
  delete ae_user_cross_server_notify::default_instance_;
  delete ae_user_cross_server_notify_reflection_;
  delete ea_kick_all_user_notify::default_instance_;
  delete ea_kick_all_user_notify_reflection_;
  delete global_user_data::default_instance_;
  delete global_user_data_reflection_;
  delete eg_unreg_user_scene_notify::default_instance_;
  delete eg_unreg_user_scene_notify_reflection_;
  delete ge_unreg_user_scene_notify::default_instance_;
  delete ge_unreg_user_scene_notify_reflection_;
  delete eg_reg_user_scene_request::default_instance_;
  delete eg_reg_user_scene_request_reflection_;
  delete ge_reg_user_scene_reply::default_instance_;
  delete ge_reg_user_scene_reply_reflection_;
  delete eg_relogin_scene_request::default_instance_;
  delete eg_relogin_scene_request_reflection_;
  delete ge_user_cross_scene_request::default_instance_;
  delete ge_user_cross_scene_request_reflection_;
  delete eg_user_cross_scene_reply::default_instance_;
  delete eg_user_cross_scene_reply_reflection_;
  delete eg_kick_all_user_notify::default_instance_;
  delete eg_kick_all_user_notify_reflection_;
  delete ed_create_role_request::default_instance_;
  delete ed_create_role_request_reflection_;
  delete de_create_role_reply::default_instance_;
  delete de_create_role_reply_reflection_;
  delete ed_query_role_data_request::default_instance_;
  delete ed_query_role_data_request_reflection_;
  delete de_query_role_data_reply::default_instance_;
  delete de_query_role_data_reply_reflection_;
  delete ed_role_leave_game_notify::default_instance_;
  delete ed_role_leave_game_notify_reflection_;
  delete ag_unreg_user_scene_notify::default_instance_;
  delete ag_unreg_user_scene_notify_reflection_;
  delete ga_unreg_user_scene_notify::default_instance_;
  delete ga_unreg_user_scene_notify_reflection_;
  delete ga_reg_user_success_notify::default_instance_;
  delete ga_reg_user_success_notify_reflection_;
  delete ga_user_cross_server_notify::default_instance_;
  delete ga_user_cross_server_notify_reflection_;
  delete ge_city_trade_add_prosperity_value_notify::default_instance_;
  delete ge_city_trade_add_prosperity_value_notify_reflection_;
  delete eg_city_base_info_notify::default_instance_;
  delete eg_city_base_info_notify_reflection_;
  delete ge_get_city_list_request::default_instance_;
  delete ge_get_city_list_request_reflection_;
  delete eg_get_city_list_reply::default_instance_;
  delete eg_get_city_list_reply_reflection_;
  delete eh_test_request::default_instance_;
  delete eh_test_request_reflection_;
  delete he_test_reply::default_instance_;
  delete he_test_reply_reflection_;
  delete ge_update_rank_notify::default_instance_;
  delete ge_update_rank_notify_reflection_;
  delete ge_create_family_request::default_instance_;
  delete ge_create_family_request_reflection_;
  delete eg_update_family_info_notify::default_instance_;
  delete eg_update_family_info_notify_reflection_;
  delete eg_create_family_reply::default_instance_;
  delete eg_create_family_reply_reflection_;
  delete ge_impeach_family_general_request::default_instance_;
  delete ge_impeach_family_general_request_reflection_;
  delete eg_impeach_family_general_reply::default_instance_;
  delete eg_impeach_family_general_reply_reflection_;
  delete eg_notify_game_impeach_result::default_instance_;
  delete eg_notify_game_impeach_result_reflection_;
  delete family_war_dungeon_info::default_instance_;
  delete family_war_dungeon_info_reflection_;
  delete family_war_dungeon_data::default_instance_;
  delete family_war_dungeon_data_reflection_;
  delete family_war_dungeon_back::default_instance_;
  delete family_war_dungeon_back_reflection_;
  delete eg_prepare_family_war_request::default_instance_;
  delete eg_prepare_family_war_request_reflection_;
  delete ge_prepare_family_war_reply::default_instance_;
  delete ge_prepare_family_war_reply_reflection_;
  delete eg_family_war_start_notify::default_instance_;
  delete eg_family_war_start_notify_reflection_;
  delete eg_family_war_end_notify::default_instance_;
  delete eg_family_war_end_notify_reflection_;
  delete eg_enter_family_war_scene_request::default_instance_;
  delete eg_enter_family_war_scene_request_reflection_;
  delete family_war_personal::default_instance_;
  delete family_war_personal_reflection_;
  delete family_war_result_data::default_instance_;
  delete family_war_result_data_reflection_;
  delete ge_family_war_early_result_notify::default_instance_;
  delete ge_family_war_early_result_notify_reflection_;
  delete ge_family_war_result_notify::default_instance_;
  delete ge_family_war_result_notify_reflection_;
  delete ge_family_update_glory_notify::default_instance_;
  delete ge_family_update_glory_notify_reflection_;
  delete ge_family_prayer_request::default_instance_;
  delete ge_family_prayer_request_reflection_;
  delete ge_family_prayer_gift_request::default_instance_;
  delete ge_family_prayer_gift_request_reflection_;
  delete eg_family_prayer_gift_failed_notify::default_instance_;
  delete eg_family_prayer_gift_failed_notify_reflection_;
  delete eg_family_country_change_notify::default_instance_;
  delete eg_family_country_change_notify_reflection_;
  delete eg_family_level_change_notify::default_instance_;
  delete eg_family_level_change_notify_reflection_;
  delete ge_family_shop_buy_request::default_instance_;
  delete ge_family_shop_buy_request_reflection_;
  delete eg_family_shop_buy_reply::default_instance_;
  delete eg_family_shop_buy_reply_reflection_;
  delete ge_family_shop_back_notify::default_instance_;
  delete ge_family_shop_back_notify_reflection_;
  delete ge_gm_set_king_family_notify::default_instance_;
  delete ge_gm_set_king_family_notify_reflection_;
  delete eg_update_country_notify::default_instance_;
  delete eg_update_country_notify_reflection_;
  delete eg_country_name_change_request::default_instance_;
  delete eg_country_name_change_request_reflection_;
  delete ge_country_name_change_reply::default_instance_;
  delete ge_country_name_change_reply_reflection_;
  delete eg_country_year_name_request::default_instance_;
  delete eg_country_year_name_request_reflection_;
  delete ge_country_year_name_reply::default_instance_;
  delete ge_country_year_name_reply_reflection_;
  delete eg_sync_data_request::default_instance_;
  delete eg_sync_data_request_reflection_;
  delete ge_sync_data_request::default_instance_;
  delete ge_sync_data_request_reflection_;
  delete ge_ready_enter_scene_notify::default_instance_;
  delete ge_ready_enter_scene_notify_reflection_;
  delete eg_summon_field_boss_request::default_instance_;
  delete eg_summon_field_boss_request_reflection_;
  delete eg_field_boss_die_notify::default_instance_;
  delete eg_field_boss_die_notify_reflection_;
  delete ge_summon_field_boss_replay::default_instance_;
  delete ge_summon_field_boss_replay_reflection_;
  delete eg_clear_all_boss_notify::default_instance_;
  delete eg_clear_all_boss_notify_reflection_;
  delete ge_field_boss_killed_notify::default_instance_;
  delete ge_field_boss_killed_notify_reflection_;
  delete field_boss_rank::default_instance_;
  delete field_boss_rank_reflection_;
  delete ge_field_boss_rank_notify::default_instance_;
  delete ge_field_boss_rank_notify_reflection_;
  delete ge_check_drop_items_request::default_instance_;
  delete ge_check_drop_items_request_reflection_;
  delete eg_check_drop_items_reply::default_instance_;
  delete eg_check_drop_items_reply_reflection_;
  delete eg_syn_item_limit_notify::default_instance_;
  delete eg_syn_item_limit_notify_reflection_;
  delete ge_redbag_send_notify::default_instance_;
  delete ge_redbag_send_notify_reflection_;
  delete eg_redbag_draw_notify::default_instance_;
  delete eg_redbag_draw_notify_reflection_;
  delete gall_reload_config_notify::default_instance_;
  delete gall_reload_config_notify_reflection_;
  delete eg_chat_get_role_info_request::default_instance_;
  delete eg_chat_get_role_info_request_reflection_;
  delete ge_chat_get_role_info_reply::default_instance_;
  delete ge_chat_get_role_info_reply_reflection_;
  delete fr_syn_transfer_info_request::default_instance_;
  delete fr_syn_transfer_info_request_reflection_;
  delete fr_test_request::default_instance_;
  delete fr_test_request_reflection_;
  delete rf_test_reply::default_instance_;
  delete rf_test_reply_reflection_;
  delete mail_get_addenda::default_instance_;
  delete mail_get_addenda_reflection_;
  delete eg_mail_get_addenda_request::default_instance_;
  delete eg_mail_get_addenda_request_reflection_;
  delete mail_get_addenda_back::default_instance_;
  delete mail_get_addenda_back_reflection_;
  delete ge_mail_get_addenda_reply::default_instance_;
  delete ge_mail_get_addenda_reply_reflection_;
  delete ge_mail_new_notify::default_instance_;
  delete ge_mail_new_notify_reflection_;
  delete sr_syn_cross_info_notify::default_instance_;
  delete sr_syn_cross_info_notify_reflection_;
  delete rs_syn_area_info_notify::default_instance_;
  delete rs_syn_area_info_notify_reflection_;
  delete rs_cross_fight_test_notify::default_instance_;
  delete rs_cross_fight_test_notify_reflection_;
  delete gr_cross_fight_test_notify::default_instance_;
  delete gr_cross_fight_test_notify_reflection_;
  delete ef_syn_center_info_notify::default_instance_;
  delete ef_syn_center_info_notify_reflection_;
  delete ef_test_request::default_instance_;
  delete ef_test_request_reflection_;
  delete fe_syn_transfer_info_notify::default_instance_;
  delete fe_syn_transfer_info_notify_reflection_;
  delete fe_test_reply::default_instance_;
  delete fe_test_reply_reflection_;
  delete rs_arena_battle_notify::default_instance_;
  delete rs_arena_battle_notify_reflection_;
  delete rs_arena_battle_ai_notify::default_instance_;
  delete rs_arena_battle_ai_notify_reflection_;
  delete sr_arena_battle_result_notify::default_instance_;
  delete sr_arena_battle_result_notify_reflection_;
  delete gr_arena_match_request::default_instance_;
  delete gr_arena_match_request_reflection_;
  delete rg_arena_match_reply::default_instance_;
  delete rg_arena_match_reply_reflection_;
  delete gr_arena_cancel_match_request::default_instance_;
  delete gr_arena_cancel_match_request_reflection_;
  delete rg_arena_cancel_match_reply::default_instance_;
  delete rg_arena_cancel_match_reply_reflection_;
  delete rg_arena_battle_result_notify::default_instance_;
  delete rg_arena_battle_result_notify_reflection_;
  delete gr_get_arena_rank_data_request::default_instance_;
  delete gr_get_arena_rank_data_request_reflection_;
  delete rg_get_arena_rank_data_reply::default_instance_;
  delete rg_get_arena_rank_data_reply_reflection_;
  delete gr_arena_self_rank_request::default_instance_;
  delete gr_arena_self_rank_request_reflection_;
  delete rg_arena_self_rank_reply::default_instance_;
  delete rg_arena_self_rank_reply_reflection_;
  delete ge_arena_fight_data_notify::default_instance_;
  delete ge_arena_fight_data_notify_reflection_;
  delete ge_role_online_notify::default_instance_;
  delete ge_role_online_notify_reflection_;
  delete ge_challenge_request::default_instance_;
  delete ge_challenge_request_reflection_;
  delete eg_challenge_reply::default_instance_;
  delete eg_challenge_reply_reflection_;
  delete ge_challenge_process_request::default_instance_;
  delete ge_challenge_process_request_reflection_;
  delete eg_challenge_process_reply::default_instance_;
  delete eg_challenge_process_reply_reflection_;
  delete eg_challenge_fight_request::default_instance_;
  delete eg_challenge_fight_request_reflection_;
  delete ge_challenge_fight_reply::default_instance_;
  delete ge_challenge_fight_reply_reflection_;
  delete ge_pk_beat_criminal_notify::default_instance_;
  delete ge_pk_beat_criminal_notify_reflection_;
  delete eg_challenge_transfer_notify::default_instance_;
  delete eg_challenge_transfer_notify_reflection_;
  delete eg_king_war_state_notify::default_instance_;
  delete eg_king_war_state_notify_reflection_;
  delete eg_king_war_time_end_notify::default_instance_;
  delete eg_king_war_time_end_notify_reflection_;
  delete king_war_personal::default_instance_;
  delete king_war_personal_reflection_;
  delete ge_king_war_result_notify::default_instance_;
  delete ge_king_war_result_notify_reflection_;
  delete ge_king_war_scene_user_num_notify::default_instance_;
  delete ge_king_war_scene_user_num_notify_reflection_;
  delete eg_check_user_buy_goods_request::default_instance_;
  delete eg_check_user_buy_goods_request_reflection_;
  delete ge_check_user_buy_goods_reply::default_instance_;
  delete ge_check_user_buy_goods_reply_reflection_;
  delete eg_give_user_goods_notify::default_instance_;
  delete eg_give_user_goods_notify_reflection_;
  delete er_world_cup_data_request::default_instance_;
  delete er_world_cup_data_request_reflection_;
  delete re_world_cup_data_reply::default_instance_;
  delete re_world_cup_data_reply_reflection_;
  delete re_world_cup_battle_notify::default_instance_;
  delete re_world_cup_battle_notify_reflection_;
  delete re_world_cup_mail_notify::default_instance_;
  delete re_world_cup_mail_notify_reflection_;
  delete re_world_cup_coming_quarter_notify::default_instance_;
  delete re_world_cup_coming_quarter_notify_reflection_;
  delete re_world_cup_coming_soon_notify::default_instance_;
  delete re_world_cup_coming_soon_notify_reflection_;
  delete re_world_cup_ready_notify::default_instance_;
  delete re_world_cup_ready_notify_reflection_;
  delete gr_world_cup_play_request::default_instance_;
  delete gr_world_cup_play_request_reflection_;
  delete rg_world_cup_play_reply::default_instance_;
  delete rg_world_cup_play_reply_reflection_;
  delete re_world_cup_update_notify::default_instance_;
  delete re_world_cup_update_notify_reflection_;
  delete er_world_cup_bet_data_request::default_instance_;
  delete er_world_cup_bet_data_request_reflection_;
  delete re_world_cup_bet_data_reply::default_instance_;
  delete re_world_cup_bet_data_reply_reflection_;
  delete gr_world_cup_bet_request::default_instance_;
  delete gr_world_cup_bet_request_reflection_;
  delete rg_world_cup_bet_reply::default_instance_;
  delete rg_world_cup_bet_reply_reflection_;
  delete gr_world_cup_bet_reward_request::default_instance_;
  delete gr_world_cup_bet_reward_request_reflection_;
  delete rg_world_cup_bet_reward_reply::default_instance_;
  delete rg_world_cup_bet_reward_reply_reflection_;
  delete er_world_cup_odds_request::default_instance_;
  delete er_world_cup_odds_request_reflection_;
  delete re_world_cup_odds_reply::default_instance_;
  delete re_world_cup_odds_reply_reflection_;
  delete eg_red_point_notify::default_instance_;
  delete eg_red_point_notify_reflection_;
  delete troop_shadow_base::default_instance_;
  delete troop_shadow_base_reflection_;
  delete troop_extra_info::default_instance_;
  delete troop_extra_info_reflection_;
  delete troop_server_data::default_instance_;
  delete troop_server_data_reflection_;
  delete eg_troop_event_notify::default_instance_;
  delete eg_troop_event_notify_reflection_;
  delete ge_troop_create_request::default_instance_;
  delete ge_troop_create_request_reflection_;
  delete ge_troop_auto_match_request::default_instance_;
  delete ge_troop_auto_match_request_reflection_;
  delete ge_troop_join_request::default_instance_;
  delete ge_troop_join_request_reflection_;
  delete eg_troop_agree_apply_request::default_instance_;
  delete eg_troop_agree_apply_request_reflection_;
  delete ge_troop_agree_apply_reply::default_instance_;
  delete ge_troop_agree_apply_reply_reflection_;
  delete ge_troop_process_invite_request::default_instance_;
  delete ge_troop_process_invite_request_reflection_;
  delete ge_troop_dissolve_notify::default_instance_;
  delete ge_troop_dissolve_notify_reflection_;
  delete ge_troop_back_request::default_instance_;
  delete ge_troop_back_request_reflection_;
  delete ge_troop_transmission_notify::default_instance_;
  delete ge_troop_transmission_notify_reflection_;
  delete ge_troop_escape_notify::default_instance_;
  delete ge_troop_escape_notify_reflection_;
  delete eg_troop_invite_shadow_notify::default_instance_;
  delete eg_troop_invite_shadow_notify_reflection_;
  delete ge_troop_del_shadow_notify::default_instance_;
  delete ge_troop_del_shadow_notify_reflection_;
  delete ge_troop_friend_notify::default_instance_;
  delete ge_troop_friend_notify_reflection_;
  delete game_scene_reg_info::default_instance_;
  delete game_scene_reg_info_reflection_;
  delete game_scene_reg_ret::default_instance_;
  delete game_scene_reg_ret_reflection_;
  delete ge_game_scene_reg_request::default_instance_;
  delete ge_game_scene_reg_request_reflection_;
  delete eg_game_scene_reg_reply::default_instance_;
  delete eg_game_scene_reg_reply_reflection_;
  delete ge_role_scene_info_notify::default_instance_;
  delete ge_role_scene_info_notify_reflection_;
  delete ge_game_scene_unload_notify::default_instance_;
  delete ge_game_scene_unload_notify_reflection_;
  delete dungeon_create_data::default_instance_;
  delete dungeon_create_data_reflection_;
  delete ge_open_dungeon_request::default_instance_;
  delete ge_open_dungeon_request_reflection_;
  delete eg_create_dugeon_request::default_instance_;
  delete eg_create_dugeon_request_reflection_;
  delete ge_create_dugeon_reply::default_instance_;
  delete ge_create_dugeon_reply_reflection_;
  delete eg_open_dungeon_reply::default_instance_;
  delete eg_open_dungeon_reply_reflection_;
  delete ge_scene_state_notify::default_instance_;
  delete ge_scene_state_notify_reflection_;
  delete ge_goods_buy_request::default_instance_;
  delete ge_goods_buy_request_reflection_;
  delete eg_goods_buy_reply::default_instance_;
  delete eg_goods_buy_reply_reflection_;
  delete ge_goods_sell_request::default_instance_;
  delete ge_goods_sell_request_reflection_;
  delete eg_goods_sell_reply::default_instance_;
  delete eg_goods_sell_reply_reflection_;
  delete ge_goods_return_request::default_instance_;
  delete ge_goods_return_request_reflection_;
  delete eg_goods_return_reply::default_instance_;
  delete eg_goods_return_reply_reflection_;
  delete ge_goods_resell_request::default_instance_;
  delete ge_goods_resell_request_reflection_;
  delete eg_goods_resell_reply::default_instance_;
  delete eg_goods_resell_reply_reflection_;
  delete ge_goods_profit_request::default_instance_;
  delete ge_goods_profit_request_reflection_;
  delete eg_goods_profit_reply::default_instance_;
  delete eg_goods_profit_reply_reflection_;
  delete ge_expedition_fight_data_request::default_instance_;
  delete ge_expedition_fight_data_request_reflection_;
  delete eg_expedition_fight_data_reply::default_instance_;
  delete eg_expedition_fight_data_reply_reflection_;
  delete ge_expedition_refresh_request::default_instance_;
  delete ge_expedition_refresh_request_reflection_;
  delete eg_expedition_refresh_reply::default_instance_;
  delete eg_expedition_refresh_reply_reflection_;
  delete ge_expedition_refresh_stage_request::default_instance_;
  delete ge_expedition_refresh_stage_request_reflection_;
  delete eg_expedition_refresh_stage_reply::default_instance_;
  delete eg_expedition_refresh_stage_reply_reflection_;
  delete ge_expedition_help_request::default_instance_;
  delete ge_expedition_help_request_reflection_;
  delete eg_expedition_help_reply::default_instance_;
  delete eg_expedition_help_reply_reflection_;
  delete global_data_day_update_time::default_instance_;
  delete global_data_day_update_time_reflection_;
  delete global_data_family_war::default_instance_;
  delete global_data_family_war_reflection_;
  delete global_data_country_data::default_instance_;
  delete global_data_country_data_reflection_;
  delete global_data_king_war_data::default_instance_;
  delete global_data_king_war_data_reflection_;
  delete eg_offline_data_notify::default_instance_;
  delete eg_offline_data_notify_reflection_;
  delete ge_offline_data_notify::default_instance_;
  delete ge_offline_data_notify_reflection_;
  delete eg_notify_progress_state_notify::default_instance_;
  delete eg_notify_progress_state_notify_reflection_;
  delete hg_notify_progress_state_notify::default_instance_;
  delete hg_notify_progress_state_notify_reflection_;
  delete ge_tower_trigger_notify::default_instance_;
  delete ge_tower_trigger_notify_reflection_;
  delete eg_tower_trigger_notify::default_instance_;
  delete eg_tower_trigger_notify_reflection_;
  delete eg_two_side_friend_notify::default_instance_;
  delete eg_two_side_friend_notify_reflection_;
  delete ge_check_sys_notice_request::default_instance_;
  delete ge_check_sys_notice_request_reflection_;
  delete eg_check_sys_notice_reply::default_instance_;
  delete eg_check_sys_notice_reply_reflection_;
  delete eg_syn_sys_notice_notify::default_instance_;
  delete eg_syn_sys_notice_notify_reflection_;
  delete ge_gm_clear_notice_request::default_instance_;
  delete ge_gm_clear_notice_request_reflection_;
  delete eg_gm_clear_notice_notify::default_instance_;
  delete eg_gm_clear_notice_notify_reflection_;
  delete ge_role_simple_data_notify::default_instance_;
  delete ge_role_simple_data_notify_reflection_;
  delete eg_offline_arena_join_notify::default_instance_;
  delete eg_offline_arena_join_notify_reflection_;
  delete ge_offline_arena_form_notify::default_instance_;
  delete ge_offline_arena_form_notify_reflection_;
  delete eg_offline_arena_fight_request::default_instance_;
  delete eg_offline_arena_fight_request_reflection_;
  delete ge_offline_arena_fight_reply::default_instance_;
  delete ge_offline_arena_fight_reply_reflection_;
  delete eg_offline_arena_record_award_notify::default_instance_;
  delete eg_offline_arena_record_award_notify_reflection_;
  delete eg_offline_arena_score_award_notify::default_instance_;
  delete eg_offline_arena_score_award_notify_reflection_;
  delete eg_offline_arena_sweep_award_notify::default_instance_;
  delete eg_offline_arena_sweep_award_notify_reflection_;
  delete eg_offline_arena_class_award_notify::default_instance_;
  delete eg_offline_arena_class_award_notify_reflection_;
  delete ge_offline_arena_buy_request::default_instance_;
  delete ge_offline_arena_buy_request_reflection_;
  delete eg_offline_arena_buy_reply::default_instance_;
  delete eg_offline_arena_buy_reply_reflection_;
  delete ge_offline_arena_gmrank_notify::default_instance_;
  delete ge_offline_arena_gmrank_notify_reflection_;
  delete hr_get_hero_strategy_info_request::default_instance_;
  delete hr_get_hero_strategy_info_request_reflection_;
  delete rh_get_hero_strategy_info_reply::default_instance_;
  delete rh_get_hero_strategy_info_reply_reflection_;
  delete ge_troop_sync_task_request::default_instance_;
  delete ge_troop_sync_task_request_reflection_;
  delete eg_buy_wish_summon_request::default_instance_;
  delete eg_buy_wish_summon_request_reflection_;
  delete ge_buy_wish_summon_reply::default_instance_;
  delete ge_buy_wish_summon_reply_reflection_;
  delete eg_king_open_wish_summon_request::default_instance_;
  delete eg_king_open_wish_summon_request_reflection_;
  delete ge_king_open_wish_summon_reply::default_instance_;
  delete ge_king_open_wish_summon_reply_reflection_;
  delete ge_modify_family_money_request::default_instance_;
  delete ge_modify_family_money_request_reflection_;
  delete ge_modify_country_money_request::default_instance_;
  delete ge_modify_country_money_request_reflection_;
  delete ge_get_wish_summon_info_reply::default_instance_;
  delete ge_get_wish_summon_info_reply_reflection_;
  delete ge_destine_item_request::default_instance_;
  delete ge_destine_item_request_reflection_;
  delete eg_destine_item_reply::default_instance_;
  delete eg_destine_item_reply_reflection_;
  delete ge_undestine_item_request::default_instance_;
  delete ge_undestine_item_request_reflection_;
  delete ge_push_general_event_request::default_instance_;
  delete ge_push_general_event_request_reflection_;
  delete eg_sync_general_event_count_info::default_instance_;
  delete eg_sync_general_event_count_info_reflection_;
  delete eg_sync_general_event_data::default_instance_;
  delete eg_sync_general_event_data_reflection_;
  delete eg_sync_general_event_open::default_instance_;
  delete eg_sync_general_event_open_reflection_;
  delete eg_sync_general_event_done::default_instance_;
  delete eg_sync_general_event_done_reflection_;
  delete eg_sync_server_level::default_instance_;
  delete eg_sync_server_level_reflection_;
  delete me_transport_ntf::default_instance_;
  delete me_transport_ntf_reflection_;
  delete eg_gm_transport_ntf::default_instance_;
  delete eg_gm_transport_ntf_reflection_;
  delete ea_send_gm_msg_to_account_request::default_instance_;
  delete ea_send_gm_msg_to_account_request_reflection_;
  delete ae_send_gm_msg_to_account_reply::default_instance_;
  delete ae_send_gm_msg_to_account_reply_reflection_;
  delete al_send_gm_msg_to_account_requst::default_instance_;
  delete al_send_gm_msg_to_account_requst_reflection_;
  delete la_send_gm_msg_to_account_reply::default_instance_;
  delete la_send_gm_msg_to_account_reply_reflection_;
  delete ln_send_gm_msg_to_account_request::default_instance_;
  delete ln_send_gm_msg_to_account_request_reflection_;
  delete nl_send_gm_msg_to_account_reply::default_instance_;
  delete nl_send_gm_msg_to_account_reply_reflection_;
  delete me_manage_role_ntf::default_instance_;
  delete me_manage_role_ntf_reflection_;
  delete em_manage_role_ntf::default_instance_;
  delete em_manage_role_ntf_reflection_;
  delete eh_silence_role_notify::default_instance_;
  delete eh_silence_role_notify_reflection_;
  delete nl_syn_account_info_notify::default_instance_;
  delete nl_syn_account_info_notify_reflection_;
  delete nd_syn_account_info_notify::default_instance_;
  delete nd_syn_account_info_notify_reflection_;
  delete gd_change_name_request::default_instance_;
  delete gd_change_name_request_reflection_;
  delete dg_change_name_reply::default_instance_;
  delete dg_change_name_reply_reflection_;
  delete de_change_name_notify::default_instance_;
  delete de_change_name_notify_reflection_;
  delete eh_change_name_notify::default_instance_;
  delete eh_change_name_notify_reflection_;
  delete me_reload_config_notify::default_instance_;
  delete me_reload_config_notify_reflection_;
  delete eg_reload_config_notify::default_instance_;
  delete eg_reload_config_notify_reflection_;
  delete ge_change_friendliness_request::default_instance_;
  delete ge_change_friendliness_request_reflection_;
  delete eg_change_friendliness_notify::default_instance_;
  delete eg_change_friendliness_notify_reflection_;
  delete ge_get_friendliness_request::default_instance_;
  delete ge_get_friendliness_request_reflection_;
  delete player_friendliness::default_instance_;
  delete player_friendliness_reflection_;
  delete eg_get_friendliness_reply::default_instance_;
  delete eg_get_friendliness_reply_reflection_;
  delete eg_friend_point_operation_request::default_instance_;
  delete eg_friend_point_operation_request_reflection_;
  delete ge_friend_point_operation_reply::default_instance_;
  delete ge_friend_point_operation_reply_reflection_;
  delete sv_cross_area_video_notify::default_instance_;
  delete sv_cross_area_video_notify_reflection_;
  delete gv_tower_video_notify::default_instance_;
  delete gv_tower_video_notify_reflection_;
}

void protobuf_AddDesc_server_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::proto::common::protobuf_AddDesc_common_2eproto();
  ::proto::client::protobuf_AddDesc_client_2eproto();
  ::proto::gm_common::protobuf_AddDesc_gm_5fcommon_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014server.proto\022\014proto.server\032\014common.pro"
    "to\032\014client.proto\032\017gm_common.proto\"a\n\016dat"
    "a_sync_item\022@\n\004type\030\001 \001(\0162\034.proto.server"
    ".data_sync_type:\024data_sync_type_begin\022\r\n"
    "\005value\030\002 \001(\t\"\031\n\027server_pingpong_request\""
    " \n\020la_login_request\022\014\n\004guid\030\001 \002(\t\"j\n\016al_"
    "login_reply\022\022\n\nreply_code\030\001 \002(\r\022\014\n\004guid\030"
    "\002 \001(\t\022\017\n\007gate_ip\030\003 \001(\t\022\021\n\tgate_port\030\004 \001("
    "\r\022\022\n\nsession_id\030\005 \001(\t\"\033\n\031gr_role_leave_g"
    "ame_notify\"\033\n\031ag_role_enter_game_notify\""
    "S\n\023ga_role_move_notify\022\021\n\trole_list\030\001 \003("
    "\004\022)\n\003msg\030\002 \002(\0132\034.proto.client.gc_move_no"
    "tify\"f\n\032ga_role_into_vision_notify\022\021\n\tro"
    "le_list\030\001 \003(\004\0225\n\003msg\030\002 \002(\0132(.proto.clien"
    "t.gc_role_into_vision_notify\"e\n\031ga_role_"
    "out_vision_notify\022\021\n\trole_list\030\001 \003(\004\0225\n\003"
    "msg\030\002 \002(\0132(.proto.client.gc_role_outo_vi"
    "sion_notify\"C\n\023ga_broadcast_notify\022\021\n\tro"
    "le_list\030\001 \003(\004\022\013\n\003cmd\030\002 \001(\r\022\014\n\004data\030\003 \001(\014"
    "\"C\n\023ea_broadcast_notify\022\021\n\trole_list\030\001 \003"
    "(\004\022\013\n\003cmd\030\002 \001(\r\022\014\n\004data\030\003 \001(\014\"\025\n\023al_kick"
    "_role_notify\"/\n\034al_kick_gate_all_user_no"
    "tify\022\017\n\007gate_id\030\001 \001(\r\"\025\n\023gh_kick_role_no"
    "tify\"S\n\032gd_batch_save_to_db_notify\022\'\n\005da"
    "tas\030\001 \003(\0132\030.proto.server.save_to_db\022\014\n\004t"
    "ype\030\002 \001(\r\"F\n\nsave_to_db\022\013\n\003key\030\001 \002(\t\022\014\n\004"
    "data\030\002 \002(\014\022\020\n\010new_flag\030\003 \001(\010\022\013\n\003uid\030\004 \001("
    "\004\"$\n\024gd_role_data_request\022\014\n\004time\030\001 \001(\004\""
    "\213\014\n\022dg_role_data_reply\022\022\n\nreply_code\030\001 \002"
    "(\r\022%\n\004role\030\002 \001(\0132\027.proto.common.role_dat"
    "a\022%\n\004item\030\003 \001(\0132\027.proto.common.item_data"
    "\022%\n\004hero\030\004 \001(\0132\027.proto.common.hero_data\022"
    "/\n\tformation\030\005 \001(\0132\034.proto.common.format"
    "ion_data\022%\n\004task\030\007 \001(\0132\027.proto.common.ta"
    "sk_data\0221\n\ntrade_item\030\010 \001(\0132\035.proto.comm"
    "on.role_trade_item\022,\n\nmount_data\030\t \001(\0132\030"
    ".proto.common.mount_data\0229\n\016country_boun"
    "ty\030\n \001(\0132!.proto.common.country_bounty_d"
    "ata\0226\n\017activities_data\030\013 \001(\0132\035.proto.com"
    "mon.activities_data\0226\n\017arena_role_data\030\014"
    " \001(\0132\035.proto.common.arena_role_data\022+\n\007a"
    "chieve\030\r \001(\0132\032.proto.common.achieve_data"
    "\022\'\n\005tower\030\016 \001(\0132\030.proto.common.tower_dat"
    "a\022/\n\tluckydraw\030\017 \001(\0132\034.proto.common.luck"
    "ydraw_data\0229\n\014dungeon_data\030\020 \001(\0132#.proto"
    ".common.role_all_dungeon_data\0226\n\017expedit"
    "ion_data\030\021 \001(\0132\035.proto.common.expedition"
    "_data\022<\n\022active_reward_data\030\022 \001(\0132 .prot"
    "o.common.active_reward_data\022=\n\020random_sh"
    "op_data\030\023 \001(\0132#.proto.common.role_random"
    "_shop_data\022\?\n\016level_rwd_data\030\024 \001(\0132\'.pro"
    "to.common.level_reward_recived_list\022I\n\023l"
    "evel_rwd_mail_data\030\025 \001(\0132,.proto.common."
    "level_reward_mail_recived_list\022<\n\022bussin"
    "ess_act_data\030\026 \001(\0132 .proto.common.bussin"
    "ess_act_data\0220\n\014liandan_data\030\027 \001(\0132\032.pro"
    "to.common.liandan_data\0226\n\017equip_plan_dat"
    "a\030\030 \001(\0132\035.proto.common.equip_plan_data\0223"
    "\n\013patrol_data\030\031 \001(\0132\036.proto.common.patro"
    "l_hire_data\022E\n\022dungeon_times_data\030\032 \001(\0132"
    ").proto.common.role_all_dungeon_times_da"
    "ta\022:\n\021family_skill_data\030\033 \001(\0132\037.proto.co"
    "mmon.family_skill_data\022A\n\022general_event_"
    "data\030\034 \001(\0132%.proto.common.general_event_"
    "save_data\0222\n\rrecharge_data\030\035 \001(\0132\033.proto"
    ".common.recharge_data\022.\n\013office_data\030\036 \001"
    "(\0132\031.proto.common.office_data\"-\n\036al_upda"
    "te_gate_user_num_notify\022\013\n\003num\030\001 \002(\r\"1\n\022"
    "de_user_data_reply\022\014\n\004name\030\001 \002(\t\022\r\n\005leve"
    "l\030\002 \002(\r\"\033\n\031de_user_center_data_reply\"\033\n\031"
    "ed_sync_role_data_request\"\025\n\023ag_save_use"
    "r_notify\"\205\001\n\030ln_syn_login_info_notify\022\021\n"
    "\tserver_id\030\001 \001(\r\022\020\n\010login_ip\030\002 \001(\t\022\022\n\nlo"
    "gin_port\030\003 \001(\r\022\023\n\013server_name\030\004 \001(\t\022\033\n\023c"
    "an_create_new_role\030\005 \001(\r\"+\n\026ln_close_ser"
    "ver_notify\022\021\n\tserver_id\030\001 \001(\r\"9\n\022ln_user"
    "_num_notify\022\021\n\tserver_id\030\001 \001(\r\022\020\n\010user_n"
    "um\030\002 \001(\r\"=\n\027ag_syn_gate_info_notify\022\017\n\007g"
    "ate_id\030\001 \002(\r\022\021\n\tserver_id\030\002 \001(\r\"P\n\031gh_sy"
    "n_online_role_notify\0223\n\tchat_info\030\001 \002(\0132"
    " .proto.common.chat_syn_user_info\"\020\n\016hg_"
    "test_notify\"*\n\027ah_syn_gate_info_notify\022\017"
    "\n\007gate_id\030\001 \002(\r\"\017\n\rha_test_reply\"*\n\027gh_s"
    "yn_game_info_notify\022\017\n\007game_id\030\001 \002(\r\"\202\001\n"
    "\035hg_chat_get_role_info_request\022,\n\nparam_"
    "list\030\001 \003(\0132\030.proto.common.chat_param\0223\n\013"
    "chat_notify\030\002 \002(\0132\036.proto.common.chat_co"
    "mmon_data\"\243\001\n\033gh_chat_get_role_info_repl"
    "y\022\022\n\nreply_code\030\001 \001(\r\022;\n\016chat_role_info\030"
    "\002 \001(\0132#.proto.common.chat_common_role_in"
    "fo\0223\n\013chat_notify\030\003 \002(\0132\036.proto.common.c"
    "hat_common_data\"\357\001\n\033hg_get_nearby_roles_"
    "request\022G\n\014chat_channel\030\001 \001(\0162\032.proto.co"
    "mmon.chat_channel:\025chat_channel_vicinity"
    "\022\021\n\tchat_info\030\002 \001(\t\022\024\n\014head_icon_id\030\003 \001("
    "\r\022\022\n\nrole_level\030\004 \001(\r\022\r\n\005param\030\005 \001(\t\022;\n\016"
    "chat_role_info\030\006 \001(\0132#.proto.common.chat"
    "_common_role_info\"\224\002\n\031gh_get_nearby_role"
    "s_reply\022\022\n\nreply_code\030\001 \001(\r\022G\n\014chat_chan"
    "nel\030\002 \001(\0162\032.proto.common.chat_channel:\025c"
    "hat_channel_vicinity\022\021\n\tchat_info\030\003 \001(\t\022"
    "\021\n\trole_uids\030\004 \003(\004\022\024\n\014head_icon_id\030\005 \001(\r"
    "\022\022\n\nrole_level\030\006 \001(\r\022\r\n\005param\030\007 \001(\t\022;\n\016c"
    "hat_role_info\030\010 \001(\0132#.proto.common.chat_"
    "common_role_info\",\n\031hg_task_seek_help_re"
    "quest\022\017\n\007task_id\030\002 \001(\r\"-\n\027gh_task_seek_h"
    "elp_reply\022\022\n\nreply_code\030\001 \001(\r\"G\n\027hf_syn_"
    "chat_info_notify\022\027\n\017server_group_id\030\001 \002("
    "\r\022\023\n\013server_name\030\002 \001(\t\"0\n\033fh_syn_transfe"
    "r_info_notify\022\021\n\tserver_id\030\001 \002(\r\" \n\020gh_g"
    "m_cmd_notify\022\014\n\004cmds\030\001 \003(\t\" \n\020hf_gm_cmd_"
    "notify\022\014\n\004cmds\030\001 \003(\t\"\"\n\rfh_test_reply\022\021\n"
    "\tserver_id\030\001 \002(\r\"!\n\037hg_syn_online_role_l"
    "ist_request\"h\n\036gh_syn_online_role_list_n"
    "otify\022\021\n\tserver_id\030\001 \001(\r\0223\n\tuser_list\030\002 "
    "\003(\0132 .proto.common.chat_syn_user_info\"\\\n"
    "\037eh_country_member_change_notify\022\022\n\ncoun"
    "try_id\030\001 \001(\r\022\023\n\013change_type\030\002 \001(\r\022\020\n\010rol"
    "e_uid\030\003 \001(\004\"Z\n\036eh_family_member_change_n"
    "otify\022\021\n\tfamily_id\030\001 \001(\004\022\023\n\013change_type\030"
    "\002 \001(\r\022\020\n\010role_uid\030\003 \001(\004\"$\n\"hf_get_server"
    "_channel_list_request\"v\n fh_get_server_c"
    "hannel_list_reply\022\022\n\nreply_code\030\001 \001(\r\022>\n"
    "\023server_channel_data\030\002 \001(\0132!.proto.commo"
    "n.server_channel_data\"[\n hf_change_serve"
    "r_channel_request\022\026\n\016dst_channel_id\030\001 \001("
    "\r\022\021\n\tuser_name\030\002 \001(\t\022\014\n\004type\030\003 \001(\r\"H\n\036fh"
    "_change_server_channel_reply\022\022\n\nreply_co"
    "de\030\001 \001(\r\022\022\n\nchannel_id\030\002 \001(\r\"\227\001\n\037fh_chan"
    "ge_server_channel_notify\0225\n\trole_list\030\001 "
    "\002(\0132\".proto.common.fh_channel_role_list\022"
    "=\n\006hc_msg\030\002 \002(\0132-.proto.client.hc_change"
    "_server_channel_notify\"`\n\037ha_change_serv"
    "er_channel_notify\022=\n\006fh_msg\030\001 \002(\0132-.prot"
    "o.server.fh_change_server_channel_notify"
    "\"3\n\036hf_server_channel_chat_request\022\021\n\tch"
    "at_info\030\001 \001(\t\"2\n\034fh_server_channel_chat_"
    "reply\022\022\n\nreply_code\030\001 \001(\r\"\223\001\n\035fh_server_"
    "channel_chat_notify\0225\n\trole_list\030\001 \002(\0132\""
    ".proto.common.fh_channel_role_list\022;\n\006hc"
    "_msg\030\002 \002(\0132+.proto.client.hc_server_chan"
    "nel_chat_notify\"\\\n\035ha_server_channel_cha"
    "t_notify\022;\n\006fh_msg\030\001 \002(\0132+.proto.server."
    "fh_server_channel_chat_notify\"\032\n\030hf_pers"
    "onal_chat_request\"\031\n\027fh_personal_chat_no"
    "tify\"\031\n\027ha_personal_chat_notify\"<\n\025he_fa"
    "mily_chat_notify\022\017\n\007src_uid\030\001 \001(\004\022\022\n\nfam"
    "ily_uid\030\002 \001(\004\";\n\027he_personal_chat_notify"
    "\022\017\n\007src_uid\030\001 \001(\004\022\017\n\007tar_uid\030\002 \001(\004\")\n\027eh"
    "_kick_all_user_notify\022\016\n\006reason\030\001 \001(\r\"\204\001"
    "\n\026dn_create_role_request\022\022\n\naccount_id\030\001"
    " \001(\004\022\021\n\tserver_id\030\002 \001(\r\022\017\n\007gate_id\030\003 \001(\r"
    "\0222\n\trole_data\030\004 \001(\0132\037.proto.common.accou"
    "nt_role_data\"}\n\024nd_create_role_reply\022\022\n\n"
    "reply_code\030\001 \001(\r\022\017\n\007gate_id\030\002 \001(\r\0222\n\trol"
    "e_data\030\003 \001(\0132\037.proto.common.account_role"
    "_data\022\014\n\004time\030\004 \001(\004\"P\n\032dn_role_data_upda"
    "te_notify\0222\n\trole_data\030\001 \001(\0132\037.proto.com"
    "mon.account_role_data\">\n\026hg_user_channel"
    "_notify\022\020\n\010user_uid\030\001 \001(\004\022\022\n\nchannel_id\030"
    "\002 \001(\004\"a\n\027ge_syn_game_info_notify\022\017\n\007game"
    "_id\030\001 \002(\r\0225\n\004regs\030\002 \001(\0132\'.proto.server.g"
    "e_game_scene_reg_request\"*\n\027gd_syn_game_"
    "info_notify\022\017\n\007game_id\030\001 \002(\r\"=\n\027al_syn_g"
    "ate_info_notify\022\017\n\007gate_id\030\001 \002(\r\022\021\n\tuser"
    "_list\030\002 \003(\004\"=\n\027ga_syn_game_info_notify\022\017"
    "\n\007game_id\030\001 \002(\r\022\021\n\tgame_type\030\002 \001(\r\";\n\026ga"
    "_syn_cross_id_notify\022\017\n\007user_id\030\001 \001(\004\022\020\n"
    "\010cross_id\030\002 \001(\r\"*\n\027ae_syn_gate_info_noti"
    "fy\022\017\n\007gate_id\030\001 \002(\r\"\225\001\n\021cross_server_dat"
    "a\022-\n\004type\030\001 \001(\0162\037.proto.server.scene_cha"
    "nge_type\022\020\n\010scene_id\030\002 \001(\004\022\r\n\005des_x\030\003 \001("
    "\002\022\r\n\005des_y\030\004 \001(\002\022\017\n\007des_dir\030\005 \001(\002\022\020\n\010tro"
    "op_id\030\006 \001(\004\")\n\032ae_reg_user_center_reques"
    "t\022\013\n\003uid\030\001 \001(\004\"R\n\032ae_unreg_user_scene_no"
    "tify\022\013\n\003uid\030\001 \001(\004\022\022\n\nunreg_code\030\002 \001(\r\022\023\n"
    "\013kick_reason\030\003 \001(\r\"R\n\033ea_unreg_user_cent"
    "er_notify\022\013\n\003uid\030\001 \001(\004\022\022\n\nunreg_code\030\002 \001"
    "(\r\022\022\n\ncode_param\030\003 \001(\r\"J\n\026ae_create_role"
    "_request\022\013\n\003uid\030\001 \001(\004\022\020\n\010nickname\030\002 \001(\t\022"
    "\021\n\trole_type\030\003 \001(\r\"7\n\024ea_create_role_rep"
    "ly\022\013\n\003uid\030\001 \001(\004\022\022\n\nreply_code\030\002 \001(\r\"L\n\033a"
    "e_user_cross_server_notify\022-\n\004data\030\001 \001(\013"
    "2\037.proto.server.cross_server_data\")\n\027ea_"
    "kick_all_user_notify\022\016\n\006reason\030\001 \001(\r\"\335\001\n"
    "\020global_user_data\022-\n\004type\030\001 \001(\0162\037.proto."
    "server.scene_change_type\022\r\n\005level\030\002 \001(\r\022"
    "\020\n\010fighting\030\003 \001(\r\022\023\n\013hero_plugin\030\004 \001(\r\022\020"
    "\n\010scene_id\030\005 \001(\004\022\017\n\007map_tid\030\006 \001(\r\022\033\n\023fam"
    "ily_contribution\030\007 \001(\r\022\025\n\rhead_frame_id\030"
    "\010 \001(\r\022\r\n\005charm\030\t \001(\r\"=\n\032eg_unreg_user_sc"
    "ene_notify\022\013\n\003uid\030\001 \001(\004\022\022\n\nunreg_code\030\002 "
    "\001(\r\"R\n\032ge_unreg_user_scene_notify\022\013\n\003uid"
    "\030\001 \001(\004\022\022\n\nunreg_code\030\002 \001(\r\022\023\n\013kick_reaso"
    "n\030\003 \001(\r\"\200\002\n\031eg_reg_user_scene_request\022\013\n"
    "\003uid\030\001 \001(\004\022\017\n\007gate_id\030\002 \001(\r\0223\n\nscene_dat"
    "a\030\003 \001(\0132\037.proto.server.cross_server_data"
    "\022\021\n\tfamily_id\030\004 \001(\004\022\023\n\013family_name\030\005 \001(\t"
    "\022\026\n\016family_officer\030\006 \001(\r\022\022\n\ncountry_id\030\007"
    " \001(\r\022\027\n\017country_officer\030\010 \001(\r\022\024\n\014family_"
    "level\030\t \001(\r\022\r\n\005charm\030\n \001(\r\"Y\n\027ge_reg_use"
    "r_scene_reply\022\013\n\003uid\030\001 \001(\004\0221\n\tuser_data\030"
    "\002 \001(\0132\036.proto.server.global_user_data\"8\n"
    "\030eg_relogin_scene_request\022\013\n\003uid\030\001 \001(\004\022\017"
    "\n\007gate_id\030\002 \001(\r\"L\n\033ge_user_cross_scene_r"
    "equest\022-\n\004data\030\001 \001(\0132\037.proto.server.cros"
    "s_server_data\"^\n\031eg_user_cross_scene_rep"
    "ly\022\022\n\nreply_code\030\001 \001(\r\022-\n\004data\030\002 \001(\0132\037.p"
    "roto.server.cross_server_data\")\n\027eg_kick"
    "_all_user_notify\022\016\n\006reason\030\001 \001(\r\"i\n\026ed_c"
    "reate_role_request\022\013\n\003uid\030\001 \001(\004\022\020\n\010nickn"
    "ame\030\002 \001(\t\022\021\n\trole_type\030\003 \001(\r\022\017\n\007gate_id\030"
    "\004 \001(\r\022\014\n\004time\030\005 \001(\004\"\222\001\n\024de_create_role_r"
    "eply\022\013\n\003uid\030\001 \001(\004\022\022\n\nreply_code\030\002 \001(\r\022\017\n"
    "\007gate_id\030\003 \001(\r\022\014\n\004name\030\004 \001(\t\022\023\n\013create_t"
    "ime\030\005 \001(\r\022\021\n\trole_type\030\006 \001(\r\022\022\n\nchannel_"
    "id\030\007 \001(\r\":\n\032ed_query_role_data_request\022\013"
    "\n\003uid\030\001 \001(\004\022\017\n\007gate_id\030\002 \001(\r\"8\n\030de_query"
    "_role_data_reply\022\013\n\003uid\030\001 \001(\004\022\017\n\007gate_id"
    "\030\002 \001(\r\"\033\n\031ed_role_leave_game_notify\"R\n\032a"
    "g_unreg_user_scene_notify\022\013\n\003uid\030\001 \001(\004\022\022"
    "\n\nunreg_code\030\002 \001(\r\022\023\n\013kick_reason\030\003 \001(\r\""
    "=\n\032ga_unreg_user_scene_notify\022\013\n\003uid\030\001 \001"
    "(\004\022\022\n\nunreg_code\030\002 \001(\r\":\n\032ga_reg_user_su"
    "ccess_notify\022\013\n\003uid\030\001 \001(\r\022\017\n\007gate_id\030\002 \001"
    "(\r\"L\n\033ga_user_cross_server_notify\022-\n\004dat"
    "a\030\001 \001(\0132\037.proto.server.cross_server_data"
    "\"Z\n)ge_city_trade_add_prosperity_value_n"
    "otify\022\017\n\007city_id\030\001 \002(\r\022\034\n\024add_prosperity"
    "_value\030\002 \001(\r\"K\n\030eg_city_base_info_notify"
    "\022/\n\tcity_info\030\001 \002(\0132\034.proto.common.city_"
    "base_info\"\032\n\030ge_get_city_list_request\"I\n"
    "\026eg_get_city_list_reply\022/\n\tcity_list\030\001 \003"
    "(\0132\034.proto.common.city_base_info\"\021\n\017eh_t"
    "est_request\"\017\n\rhe_test_reply\"t\n\025ge_updat"
    "e_rank_notify\022\021\n\trank_type\030\001 \001(\r\022\013\n\003key\030"
    "\002 \001(\r\022\r\n\005owner\030\003 \001(\004\022,\n\005extra\030\004 \001(\0132\035.pr"
    "oto.common.rank_data_extra\"=\n\030ge_create_"
    "family_request\022\014\n\004name\030\001 \001(\t\022\023\n\013declarat"
    "ion\030\002 \001(\t\"p\n\034eg_update_family_info_notif"
    "y\022\n\n\002id\030\001 \001(\004\022\014\n\004name\030\002 \001(\t\022\017\n\007officer\030\003"
    " \001(\r\022\022\n\ncountry_id\030\004 \001(\r\022\021\n\tfamily_lv\030\005 "
    "\001(\r\"f\n\026eg_create_family_reply\022\022\n\nreply_c"
    "ode\030\001 \001(\r\0228\n\004info\030\002 \001(\0132*.proto.server.e"
    "g_update_family_info_notify\"#\n!ge_impeac"
    "h_family_general_request\"5\n\037eg_impeach_f"
    "amily_general_reply\022\022\n\nreply_code\030\001 \001(\r\""
    "Z\n\035eg_notify_game_impeach_result\022\022\n\nis_s"
    "ucceed\030\001 \001(\010\022\024\n\014money_return\030\002 \001(\r\022\017\n\007ro"
    "le_id\030\003 \001(\004\"A\n\027family_war_dungeon_info\022\021"
    "\n\tfamily_id\030\001 \001(\004\022\023\n\013family_name\030\002 \001(\t\"\236"
    "\001\n\027family_war_dungeon_data\022\n\n\002id\030\001 \001(\r\022:"
    "\n\013left_family\030\002 \001(\0132%.proto.server.famil"
    "y_war_dungeon_info\022;\n\014right_family\030\003 \001(\013"
    "2%.proto.server.family_war_dungeon_info\""
    "V\n\027family_war_dungeon_back\022\n\n\002id\030\001 \001(\r\022/"
    "\n\004info\030\002 \001(\0132!.proto.server.game_scene_r"
    "eg_info\"s\n\035eg_prepare_family_war_request"
    "\022\022\n\nstart_time\030\001 \001(\r\022>\n\017family_war_data\030"
    "\002 \003(\0132%.proto.server.family_war_dungeon_"
    "data\"V\n\033ge_prepare_family_war_reply\0227\n\010d"
    "ungeons\030\001 \003(\0132%.proto.server.family_war_"
    "dungeon_back\".\n\032eg_family_war_start_noti"
    "fy\022\020\n\010end_time\030\001 \001(\r\"\032\n\030eg_family_war_en"
    "d_notify\"K\n!eg_enter_family_war_scene_re"
    "quest\022\013\n\003uid\030\001 \001(\004\022\031\n\021family_dungeon_id\030"
    "\002 \001(\004\"l\n\023family_war_personal\022\013\n\003uid\030\001 \001("
    "\004\022\017\n\007exploit\030\002 \001(\004\022\014\n\004rank\030\003 \001(\r\022\022\n\nrank"
    "_level\030\004 \001(\r\022\025\n\rexploit_level\030\005 \001(\r\"\250\001\n\026"
    "family_war_result_data\022\n\n\002id\030\001 \001(\r\022\025\n\rwi"
    "n_family_id\030\002 \001(\004\022\031\n\021left_family_score\030\003"
    " \001(\r\022\032\n\022right_family_score\030\004 \001(\r\0224\n\tall_"
    "roles\030\005 \003(\0132!.proto.server.family_war_pe"
    "rsonal\"W\n!ge_family_war_early_result_not"
    "ify\0222\n\004data\030\001 \001(\0132$.proto.server.family_"
    "war_result_data\"R\n\033ge_family_war_result_"
    "notify\0223\n\005datas\030\001 \003(\0132$.proto.server.fam"
    "ily_war_result_data\"A\n\035ge_family_update_"
    "glory_notify\022\021\n\tfamily_id\030\001 \001(\004\022\r\n\005glory"
    "\030\002 \001(\r\">\n\030ge_family_prayer_request\022\020\n\010he"
    "ro_tid\030\001 \001(\r\022\020\n\010hero_num\030\002 \001(\r\"\270\001\n\035ge_fa"
    "mily_prayer_gift_request\022\017\n\007role_id\030\001 \001("
    "\004\022\020\n\010hero_tid\030\002 \001(\r\022\020\n\010hero_num\030\003 \001(\r\022\023\n"
    "\013hero_rarity\030\004 \001(\r\022\030\n\020hero_material_id\030\005"
    " \001(\r\0223\n\013change_data\030\006 \001(\0132\036.proto.common"
    ".role_change_data\"\317\001\n#eg_family_prayer_g"
    "ift_failed_notify\022\022\n\nreply_code\030\001 \001(\r\022\017\n"
    "\007role_id\030\002 \001(\004\022\020\n\010hero_tid\030\003 \001(\r\022\020\n\010hero"
    "_num\030\004 \001(\r\022\030\n\020hero_material_id\030\005 \001(\r\022\020\n\010"
    "rwd_item\030\006 \001(\r\0223\n\013change_data\030\007 \001(\0132\036.pr"
    "oto.common.role_change_data\"H\n\037eg_family"
    "_country_change_notify\022\021\n\trole_list\030\001 \003("
    "\004\022\022\n\ncountry_id\030\002 \001(\r\"H\n\035eg_family_level"
    "_change_notify\022\021\n\trole_list\030\001 \003(\004\022\024\n\014fam"
    "ily_level\030\002 \001(\r\"K\n\032ge_family_shop_buy_re"
    "quest\022\r\n\005index\030\001 \001(\r\022\021\n\tshop_item\030\002 \001(\r\022"
    "\013\n\003num\030\003 \001(\r\"\322\001\n\030eg_family_shop_buy_repl"
    "y\022\024\n\014refresh_time\030\001 \001(\r\022\r\n\005index\030\002 \001(\r\022\021"
    "\n\tshop_item\030\003 \001(\r\022\013\n\003num\030\004 \001(\r\0221\n\tshop_d"
    "ata\030\005 \001(\0132\036.proto.common.family_shop_dat"
    "a\022>\n\rpersonal_data\030\006 \001(\0132\'.proto.common."
    "family_shop_personal_data\"N\n\032ge_family_s"
    "hop_back_notify\022\024\n\014refresh_time\030\001 \001(\r\022\r\n"
    "\005index\030\002 \001(\r\022\013\n\003num\030\003 \001(\r\"F\n\034ge_gm_set_k"
    "ing_family_notify\022\022\n\ncountry_id\030\001 \001(\r\022\022\n"
    "\nfamily_uid\030\002 \001(\004\"K\n\030eg_update_country_n"
    "otify\022/\n\tcountries\030\001 \003(\0132\034.proto.common."
    "country_common\"\?\n\036eg_country_name_change"
    "_request\022\014\n\004name\030\001 \001(\t\022\017\n\007flag_id\030\002 \001(\r\""
    "\206\001\n\034ge_country_name_change_reply\022\022\n\nrepl"
    "y_code\030\001 \001(\r\022\014\n\004name\030\002 \001(\t\022\017\n\007flag_id\030\003 "
    "\001(\r\0223\n\013change_data\030\004 \001(\0132\036.proto.common."
    "role_change_data\",\n\034eg_country_year_name"
    "_request\022\014\n\004name\030\001 \001(\t\"s\n\032ge_country_yea"
    "r_name_reply\022\022\n\nreply_code\030\001 \001(\r\022\014\n\004name"
    "\030\002 \001(\t\0223\n\013change_data\030\003 \001(\0132\036.proto.comm"
    "on.role_change_data\"C\n\024eg_sync_data_requ"
    "est\022+\n\005items\030\001 \003(\0132\034.proto.server.data_s"
    "ync_item\"C\n\024ge_sync_data_request\022+\n\005item"
    "s\030\001 \003(\0132\034.proto.server.data_sync_item\"\035\n"
    "\033ge_ready_enter_scene_notify\"\216\001\n\034eg_summ"
    "on_field_boss_request\022\n\n\002id\030\001 \001(\r\022\020\n\010sce"
    "ne_id\030\002 \001(\004\022\021\n\tobject_id\030\003 \001(\004\022\022\n\nmonste"
    "r_id\030\004 \001(\r\022\r\n\005pos_x\030\005 \001(\r\022\r\n\005pos_y\030\006 \001(\r"
    "\022\013\n\003dir\030\007 \001(\r\"i\n\030eg_field_boss_die_notif"
    "y\022\021\n\tobject_id\030\001 \001(\004\022:\n\004mode\030\002 \001(\0162\033.pro"
    "to.server.EM_FIELD_MODE:\017FIELD_BOSS_NONE"
    "\"P\n\033ge_summon_field_boss_replay\022\022\n\nreply"
    "_code\030\001 \001(\r\022\n\n\002id\030\002 \001(\r\022\021\n\tobject_id\030\003 \001"
    "(\004\".\n\030eg_clear_all_boss_notify\022\022\n\nobject"
    "_ids\030\001 \003(\004\"Q\n\033ge_field_boss_killed_notif"
    "y\022\n\n\002id\030\001 \001(\r\022\021\n\tobject_id\030\002 \001(\004\022\023\n\013kill"
    "er_name\030\004 \001(\t\"0\n\017field_boss_rank\022\017\n\007rank"
    "_id\030\001 \001(\r\022\014\n\004uids\030\002 \003(\004\"\363\001\n\031ge_field_bos"
    "s_rank_notify\022\n\n\002id\030\001 \001(\r\022\022\n\nmonster_id\030"
    "\002 \001(\r\022:\n\004mode\030\003 \001(\0162\033.proto.server.EM_FI"
    "ELD_MODE:\017FIELD_BOSS_NONE\0224\n\rpersion_ran"
    "ks\030\004 \003(\0132\035.proto.server.field_boss_rank\022"
    "3\n\014family_ranks\030\005 \003(\0132\035.proto.server.fie"
    "ld_boss_rank\022\017\n\007killers\030\006 \003(\004\"O\n\033ge_chec"
    "k_drop_items_request\0220\n\titem_list\030\001 \003(\0132"
    "\035.proto.common.item_limit_data\"M\n\031eg_che"
    "ck_drop_items_reply\0220\n\titem_list\030\003 \003(\0132\035"
    ".proto.common.item_limit_data\"L\n\030eg_syn_"
    "item_limit_notify\0220\n\titem_list\030\001 \003(\0132\035.p"
    "roto.common.item_limit_data\"5\n\025ge_redbag"
    "_send_notify\022\r\n\005count\030\001 \001(\r\022\r\n\005money\030\002 \001"
    "(\r\"&\n\025eg_redbag_draw_notify\022\r\n\005money\030\001 \001"
    "(\r\"\033\n\031gall_reload_config_notify\"\202\001\n\035eg_c"
    "hat_get_role_info_request\022,\n\nparam_list\030"
    "\001 \003(\0132\030.proto.common.chat_param\0223\n\013chat_"
    "notify\030\002 \002(\0132\036.proto.common.chat_common_"
    "data\"\243\001\n\033ge_chat_get_role_info_reply\022\022\n\n"
    "reply_code\030\001 \001(\r\022;\n\016chat_role_info\030\002 \001(\013"
    "2#.proto.common.chat_common_role_info\0223\n"
    "\013chat_notify\030\003 \002(\0132\036.proto.common.chat_c"
    "ommon_data\"1\n\034fr_syn_transfer_info_reque"
    "st\022\021\n\tserver_id\030\001 \002(\r\" \n\017fr_test_request"
    "\022\r\n\005test1\030\001 \001(\r\"\036\n\rrf_test_reply\022\r\n\005test"
    "1\030\001 \001(\r\"a\n\020mail_get_addenda\022\017\n\007mail_id\030\001"
    " \001(\004\022)\n\004objs\030\002 \003(\0132\033.proto.common.mail_i"
    "tem_obj\022\021\n\titem_type\030\003 \001(\r\"\\\n\033eg_mail_ge"
    "t_addenda_request\022\013\n\003uid\030\001 \001(\004\0220\n\010addend"
    "as\030\002 \003(\0132\036.proto.server.mail_get_addenda"
    "\"<\n\025mail_get_addenda_back\022\017\n\007mail_id\030\001 \001"
    "(\004\022\022\n\nreply_code\030\002 \001(\r\"\\\n\031ge_mail_get_ad"
    "denda_reply\022\013\n\003uid\030\001 \001(\004\0222\n\005backs\030\002 \003(\0132"
    "#.proto.server.mail_get_addenda_back\"\352\001\n"
    "\022ge_mail_new_notify\022\014\n\004uids\030\001 \003(\004\022-\n\tmai"
    "l_type\030\002 \001(\0162\032.proto.common.em_mail_type"
    "\022\017\n\007from_id\030\003 \001(\004\022\021\n\tfrom_name\030\004 \001(\t\022\022\n\n"
    "content_id\030\005 \001(\r\022\r\n\005title\030\006 \001(\t\022\017\n\007conte"
    "nt\030\007 \001(\t\022\r\n\005items\030\010 \001(\t\0220\n\010get_type\030\t \001("
    "\0162\036.proto.common.em_mail_get_type\",\n\030sr_"
    "syn_cross_info_notify\022\020\n\010cross_id\030\001 \001(\r\""
    "\031\n\027rs_syn_area_info_notify\"\242\001\n\032rs_cross_"
    "fight_test_notify\022(\n\005fight\030\001 \001(\0132\031.proto"
    ".common.fight_param\022,\n\005user1\030\002 \001(\0132\035.pro"
    "to.common.role_cross_data\022,\n\005user2\030\003 \001(\013"
    "2\035.proto.common.role_cross_data\"I\n\032gr_cr"
    "oss_fight_test_notify\022+\n\004user\030\001 \001(\0132\035.pr"
    "oto.common.role_cross_data\".\n\031ef_syn_cen"
    "ter_info_notify\022\021\n\tserver_id\030\001 \001(\r\"=\n\017ef"
    "_test_request\022\033\n\023role_game_server_id\030\001 \001"
    "(\r\022\r\n\005test1\030\002 \001(\r\"0\n\033fe_syn_transfer_inf"
    "o_notify\022\021\n\tserver_id\030\001 \001(\r\";\n\rfe_test_r"
    "eply\022\033\n\023role_game_server_id\030\001 \001(\r\022\r\n\005tes"
    "t1\030\002 \001(\r\"\236\001\n\026rs_arena_battle_notify\022(\n\005f"
    "ight\030\001 \001(\0132\031.proto.common.fight_param\022,\n"
    "\005user1\030\002 \001(\0132\035.proto.common.role_cross_d"
    "ata\022,\n\005user2\030\003 \001(\0132\035.proto.common.role_c"
    "ross_data\"\241\001\n\031rs_arena_battle_ai_notify\022"
    "(\n\005fight\030\001 \001(\0132\031.proto.common.fight_para"
    "m\022,\n\005user1\030\002 \001(\0132\035.proto.common.role_cro"
    "ss_data\022,\n\003npc\030\003 \001(\0132\037.proto.common.mirr"
    "or_fight_data\"\371\001\n\035sr_arena_battle_result"
    "_notify\022)\n\007win_obj\030\001 \001(\0132\030.proto.common."
    "obj_single\022*\n\010lose_obj\030\002 \001(\0132\030.proto.com"
    "mon.obj_single\022(\n\005fight\030\003 \001(\0132\031.proto.co"
    "mmon.fight_param\022*\n\twin_heros\030\004 \001(\0132\027.pr"
    "oto.common.hero_data\022+\n\nlose_heros\030\005 \001(\013"
    "2\027.proto.common.hero_data\"i\n\026gr_arena_ma"
    "tch_request\022\r\n\005score\030\001 \001(\r\022\023\n\013arena_leve"
    "l\030\002 \001(\r\022+\n\004user\030\003 \001(\0132\035.proto.common.rol"
    "e_cross_data\"\243\001\n\024rg_arena_match_reply\022\022\n"
    "\nreply_code\030\001 \001(\r\022\024\n\014target_score\030\002 \001(\r\022"
    "\032\n\022target_arena_level\030\003 \001(\r\022\021\n\tserver_id"
    "\030\004 \001(\r\0222\n\013target_user\030\005 \001(\0132\035.proto.comm"
    "on.role_cross_data\"\037\n\035gr_arena_cancel_ma"
    "tch_request\"0\n\033rg_arena_cancel_match_rep"
    "ly\022\021\n\tserver_id\030\001 \001(\r\"\316\001\n\035rg_arena_battl"
    "e_result_notify\022\016\n\006is_win\030\001 \001(\r\022\024\n\014targe"
    "t_score\030\002 \001(\r\022\032\n\022target_arena_level\030\003 \001("
    "\r\022-\n\006target\030\004 \001(\0132\035.proto.common.role_cr"
    "oss_data\022\023\n\013own_rank_up\030\005 \001(\005\022\024\n\014own_new"
    "_rank\030\006 \001(\r\022\021\n\tserver_id\030\007 \001(\r\"K\n\036gr_get"
    "_arena_rank_data_request\022\026\n\016rank_start_p"
    "os\030\001 \001(\r\022\021\n\tserver_id\030\002 \001(\r\"i\n\034rg_get_ar"
    "ena_rank_data_reply\0226\n\trand_data\030\001 \001(\0132#"
    ".proto.common.arena_rank_info_array\022\021\n\ts"
    "erver_id\030\002 \001(\r\"/\n\032gr_arena_self_rank_req"
    "uest\022\021\n\tserver_id\030\001 \001(\r\";\n\030rg_arena_self"
    "_rank_reply\022\021\n\tserver_id\030\001 \001(\r\022\014\n\004rank\030\002"
    " \001(\r\"f\n\032ge_arena_fight_data_notify\022\023\n\013fi"
    "ght_value\030\001 \001(\r\0223\n\nfight_data\030\002 \001(\0132\037.pr"
    "oto.common.mirror_fight_data\"\'\n\025ge_role_"
    "online_notify\022\016\n\006online\030\001 \001(\r\"*\n\024ge_chal"
    "lenge_request\022\022\n\ntarget_uid\030\001 \001(\004\"(\n\022eg_"
    "challenge_reply\022\022\n\nreply_code\030\001 \001(\r\"/\n\034g"
    "e_challenge_process_request\022\017\n\007process\030\001"
    " \001(\r\"A\n\032eg_challenge_process_reply\022\022\n\nre"
    "ply_code\030\001 \001(\r\022\017\n\007process\030\002 \001(\r\"0\n\032eg_ch"
    "allenge_fight_request\022\022\n\ntarget_uid\030\001 \001("
    "\004\"*\n\030ge_challenge_fight_reply\022\016\n\006result\030"
    "\001 \001(\r\"2\n\032ge_pk_beat_criminal_notify\022\024\n\014c"
    "riminal_uid\030\001 \001(\004\"\036\n\034eg_challenge_transf"
    "er_notify\"\275\002\n\030eg_king_war_state_notify\022\022"
    "\n\ncountry_id\030\001 \001(\r\022\?\n\005state\030\002 \001(\0162\034.prot"
    "o.common.king_war_state:\022king_war_state_"
    "end\022\025\n\rdef_family_id\030\003 \001(\004\022\027\n\017def_family"
    "_name\030\004 \001(\t\022\025\n\ratt_family_id\030\005 \001(\004\022\027\n\017at"
    "t_family_name\030\006 \001(\t\022\027\n\017def_help_family\030\007"
    " \001(\004\022\034\n\024def_help_family_name\030\010 \001(\t\022\027\n\017at"
    "t_help_family\030\t \001(\004\022\034\n\024att_help_family_n"
    "ame\030\n \001(\t\"1\n\033eg_king_war_time_end_notify"
    "\022\022\n\ncountry_id\030\001 \001(\r\"j\n\021king_war_persona"
    "l\022\013\n\003uid\030\001 \001(\004\022\017\n\007exploit\030\002 \001(\004\022\014\n\004rank\030"
    "\003 \001(\r\022\022\n\nrank_level\030\004 \001(\r\022\025\n\rexploit_lev"
    "el\030\005 \001(\r\"z\n\031ge_king_war_result_notify\022\022\n"
    "\ncountry_id\030\001 \001(\r\022\025\n\rwin_family_id\030\002 \001(\004"
    "\0222\n\tall_roles\030\003 \003(\0132\037.proto.server.king_"
    "war_personal\"Y\n!ge_king_war_scene_user_n"
    "um_notify\022\022\n\ncountry_id\030\001 \001(\r\022\017\n\007att_num"
    "\030\002 \001(\r\022\017\n\007def_num\030\003 \001(\r\"m\n\037eg_check_user"
    "_buy_goods_request\022\013\n\003uid\030\001 \001(\004\022*\n\004info\030"
    "\002 \001(\0132\034.proto.common.user_buy_goods\022\021\n\tp"
    "urchased\030\003 \001(\r\"\240\001\n\035ge_check_user_buy_goo"
    "ds_reply\022\013\n\003uid\030\001 \001(\004\022*\n\004info\030\002 \001(\0132\034.pr"
    "oto.common.user_buy_goods\0223\n\013change_data"
    "\030\003 \001(\0132\036.proto.common.role_change_data\022\021"
    "\n\tpurchased\030\004 \001(\r\"\226\002\n\031eg_give_user_goods"
    "_notify\022\013\n\003uid\030\001 \001(\004\022\022\n\nreply_code\030\002 \001(\r"
    "\022*\n\004info\030\003 \001(\0132\034.proto.common.user_buy_g"
    "oods\022\021\n\tpurchased\030\004 \001(\r\0223\n\013change_data\030\005"
    " \001(\0132\036.proto.common.role_change_data\0221\n\017"
    "shop_goods_data\030\006 \001(\0132\030.proto.common.sho"
    "p_goods\0221\n\017user_goods_data\030\007 \001(\0132\030.proto"
    ".common.user_goods\".\n\031er_world_cup_data_"
    "request\022\021\n\tserver_id\030\001 \001(\r\"b\n\027re_world_c"
    "up_data_reply\0224\n\016world_cup_info\030\001 \001(\0132\034."
    "proto.common.world_cup_data\022\021\n\tserver_id"
    "\030\002 \001(\r\"Q\n\032re_world_cup_battle_notify\0223\n\013"
    "battle_info\030\001 \001(\0132\036.proto.common.world_c"
    "up_battle\"Q\n\030re_world_cup_mail_notify\022\021\n"
    "\tserver_id\030\001 \001(\r\022\023\n\013player_name\030\002 \001(\t\022\r\n"
    "\005round\030\003 \001(\r\"L\n\"re_world_cup_coming_quar"
    "ter_notify\022\021\n\tserver_id\030\001 \001(\r\022\023\n\013time_re"
    "main\030\002 \001(\r\"I\n\037re_world_cup_coming_soon_n"
    "otify\022\021\n\tserver_id\030\001 \001(\r\022\023\n\013time_remain\030"
    "\002 \001(\r\"x\n\031re_world_cup_ready_notify\022\021\n\tse"
    "rver_id\030\001 \001(\r\0223\n\013battle_info\030\002 \001(\0132\036.pro"
    "to.common.world_cup_battle\022\023\n\013time_remai"
    "n\030\003 \001(\r\"Z\n\031gr_world_cup_play_request\022\021\n\t"
    "server_id\030\001 \001(\r\022*\n\003rcd\030\002 \001(\0132\035.proto.com"
    "mon.role_cross_data\"@\n\027rg_world_cup_play"
    "_reply\022\021\n\tserver_id\030\001 \001(\r\022\022\n\nreply_code\030"
    "\002 \001(\r\"Q\n\032re_world_cup_update_notify\0223\n\013b"
    "attle_info\030\001 \001(\0132\036.proto.common.world_cu"
    "p_battle\"2\n\035er_world_cup_bet_data_reques"
    "t\022\021\n\tserver_id\030\001 \001(\r\"_\n\033re_world_cup_bet"
    "_data_reply\022\021\n\tserver_id\030\001 \001(\r\022-\n\010bet_da"
    "ta\030\002 \003(\0132\033.proto.common.world_cup_bet\"l\n"
    "\030gr_world_cup_bet_request\022\022\n\nbattle_uid\030"
    "\001 \001(\004\022\016\n\006winner\030\002 \001(\004\022\014\n\004odds\030\003 \001(\r\022\013\n\003b"
    "et\030\004 \001(\r\022\021\n\tserver_id\030\005 \001(\r\"\211\001\n\026rg_world"
    "_cup_bet_reply\022\022\n\nreply_code\030\001 \001(\r\022\014\n\004od"
    "ds\030\002 \001(\r\022\013\n\003bet\030\003 \001(\r\022-\n\010self_bet\030\004 \001(\0132"
    "\033.proto.common.world_cup_bet\022\021\n\tserver_i"
    "d\030\005 \001(\r\"H\n\037gr_world_cup_bet_reward_reque"
    "st\022\022\n\nbattle_uid\030\001 \001(\004\022\021\n\tserver_id\030\002 \001("
    "\r\"V\n\035rg_world_cup_bet_reward_reply\022\022\n\nre"
    "ply_code\030\001 \001(\r\022\016\n\006reward\030\002 \001(\r\022\021\n\tserver"
    "_id\030\003 \001(\r\"B\n\031er_world_cup_odds_request\022\021"
    "\n\tserver_id\030\001 \001(\r\022\022\n\nbattle_uid\030\002 \001(\004\"]\n"
    "\027re_world_cup_odds_reply\022\021\n\tserver_id\030\001 "
    "\001(\r\022/\n\todds_data\030\002 \001(\0132\034.proto.common.wo"
    "rld_cup_odds\"a\n\023eg_red_point_notify\022\013\n\003u"
    "id\030\001 \001(\004\022.\n\010red_type\030\002 \001(\0162\034.proto.commo"
    "n.RED_POINT_TYPE\022\r\n\005param\030\003 \003(\r\"\321\001\n\021troo"
    "p_shadow_base\022\020\n\010role_uid\030\001 \001(\004\022*\n\004blob\030"
    "\002 \001(\0132\034.proto.common.role_blob_data\022\017\n\007c"
    "ountry\030\003 \001(\r\022\024\n\014plugin_modle\030\004 \001(\r\022\027\n\017co"
    "untry_officer\030\005 \001(\r\022\021\n\tfamily_id\030\006 \001(\004\022\023"
    "\n\013family_name\030\007 \001(\t\022\026\n\016family_officer\030\010 "
    "\001(\r\"[\n\020troop_extra_info\022\021\n\ttutor_tid\030\001 \001"
    "(\r\0224\n\013shadow_info\030\002 \001(\0132\037.proto.server.t"
    "roop_shadow_base\"o\n\021troop_server_data\022&\n"
    "\004base\030\001 \001(\0132\030.proto.common.troop_data\0222\n"
    "\nextra_data\030\002 \001(\0132\036.proto.server.troop_e"
    "xtra_info\"i\n\025eg_troop_event_notify\022\r\n\005ev"
    "ent\030\001 \001(\r\022\021\n\tmember_id\030\002 \001(\004\022.\n\005troop\030\003 "
    "\001(\0132\037.proto.server.troop_server_data\"9\n\027"
    "ge_troop_create_request\022\014\n\004type\030\001 \001(\r\022\020\n"
    "\010role_uid\030\002 \001(\004\"+\n\033ge_troop_auto_match_r"
    "equest\022\014\n\004type\030\001 \001(\r\")\n\025ge_troop_join_re"
    "quest\022\020\n\010troop_id\030\001 \001(\004\"1\n\034eg_troop_agre"
    "e_apply_request\022\021\n\tapply_uid\030\001 \001(\004\"C\n\032ge"
    "_troop_agree_apply_reply\022\021\n\tapply_uid\030\001 "
    "\001(\004\022\022\n\nreply_code\030\002 \001(\r\"W\n\037ge_troop_proc"
    "ess_invite_request\022\020\n\010troop_id\030\001 \001(\004\022\017\n\007"
    "process\030\002 \001(\r\022\021\n\tgame_code\030\003 \001(\r\"\032\n\030ge_t"
    "roop_dissolve_notify\"\027\n\025ge_troop_back_re"
    "quest\".\n\034ge_troop_transmission_notify\022\016\n"
    "\006result\030\001 \001(\r\"\030\n\026ge_troop_escape_notify\""
    "Q\n\035eg_troop_invite_shadow_notify\0220\n\013memb"
    "er_info\030\001 \001(\0132\033.proto.common.friend_memb"
    "er\"A\n\032ge_troop_del_shadow_notify\022\020\n\010troo"
    "p_id\030\001 \001(\004\022\021\n\tmember_id\030\002 \001(\004\"*\n\026ge_troo"
    "p_friend_notify\022\020\n\010troop_id\030\001 \001(\004\"[\n\023gam"
    "e_scene_reg_info\022\020\n\010scene_id\030\001 \001(\004\022\017\n\007ma"
    "p_tid\030\002 \001(\r\022\013\n\003num\030\003 \001(\r\022\024\n\014is_diversion"
    "\030\004 \001(\010\":\n\022game_scene_reg_ret\022\020\n\010scene_id"
    "\030\001 \001(\004\022\022\n\nis_success\030\002 \001(\010\"S\n\031ge_game_sc"
    "ene_reg_request\0226\n\013scene_infos\030\002 \003(\0132!.p"
    "roto.server.game_scene_reg_info\"Z\n\027eg_ga"
    "me_scene_reg_reply\022\017\n\007game_id\030\001 \001(\r\022.\n\004r"
    "ets\030\002 \003(\0132 .proto.server.game_scene_reg_"
    "ret\">\n\031ge_role_scene_info_notify\022\020\n\010scen"
    "e_id\030\001 \001(\004\022\017\n\007map_tid\030\002 \001(\r\"@\n\033ge_game_s"
    "cene_unload_notify\022\020\n\010scene_id\030\001 \001(\004\022\017\n\007"
    "mpa_tid\030\002 \001(\r\"\206\001\n\023dungeon_create_data\022\017\n"
    "\007game_id\030\001 \001(\r\022\022\n\ndungeon_id\030\002 \001(\r\022/\n\004ty"
    "pe\030\003 \001(\0162!.proto.server.dungeon_create_t"
    "ype\022\031\n\021dungeon_create_id\030\004 \001(\004\"J\n\027ge_ope"
    "n_dungeon_request\022/\n\004data\030\001 \001(\0132!.proto."
    "server.dungeon_create_data\"K\n\030eg_create_"
    "dugeon_request\022/\n\004data\030\001 \001(\0132!.proto.ser"
    "ver.dungeon_create_data\"\216\001\n\026ge_create_du"
    "geon_reply\022\022\n\nreply_code\030\001 \001(\r\022/\n\004data\030\002"
    " \001(\0132!.proto.server.dungeon_create_data\022"
    "/\n\004info\030\003 \001(\0132!.proto.server.game_scene_"
    "reg_info\"\215\001\n\025eg_open_dungeon_reply\022\022\n\nre"
    "ply_code\030\001 \001(\r\022/\n\004data\030\002 \001(\0132!.proto.ser"
    "ver.dungeon_create_data\022/\n\004info\030\003 \001(\0132!."
    "proto.server.game_scene_reg_info\"8\n\025ge_s"
    "cene_state_notify\022\020\n\010scene_id\030\001 \001(\004\022\r\n\005s"
    "tate\030\002 \001(\r\"\206\001\n\024ge_goods_buy_request\022\021\n\tg"
    "oods_uid\030\001 \001(\004\022\020\n\010item_tid\030\002 \001(\r\022\021\n\tbuy_"
    "count\030\003 \001(\r\022\r\n\005price\030\004 \001(\r\022\'\n\006reason\030\005 \001"
    "(\0132\027.proto.common.ex_reason\"\240\001\n\022eg_goods"
    "_buy_reply\022\022\n\nreply_code\030\001 \001(\r\022\021\n\tbuy_co"
    "unt\030\002 \001(\r\022\r\n\005price\030\003 \001(\r\022+\n\titem_info\030\004 "
    "\001(\0132\030.proto.common.goods_item\022\'\n\006reason\030"
    "\005 \001(\0132\027.proto.common.ex_reason\"e\n\025ge_goo"
    "ds_sell_request\022\020\n\010item_uid\030\001 \001(\004\022\r\n\005pri"
    "ce\030\002 \001(\r\022+\n\titem_info\030\003 \001(\0132\030.proto.comm"
    "on.goods_item\"w\n\023eg_goods_sell_reply\022\022\n\n"
    "reply_code\030\001 \001(\r\022\020\n\010item_uid\030\002 \001(\004\022\r\n\005pr"
    "ice\030\003 \001(\r\022+\n\titem_info\030\004 \001(\0132\030.proto.com"
    "mon.goods_item\",\n\027ge_goods_return_reques"
    "t\022\021\n\tgoods_uid\030\001 \001(\004\"X\n\025eg_goods_return_"
    "reply\022\022\n\nreply_code\030\001 \001(\r\022+\n\titem_info\030\002"
    " \001(\0132\030.proto.common.goods_item\"O\n\027ge_goo"
    "ds_resell_request\022\021\n\tgoods_uid\030\001 \001(\004\022\022\n\n"
    "sell_count\030\002 \001(\r\022\r\n\005price\030\003 \001(\r\"N\n\025eg_go"
    "ods_resell_reply\022\022\n\nreply_code\030\001 \001(\r\022\022\n\n"
    "sell_count\030\002 \001(\r\022\r\n\005price\030\003 \001(\r\"\031\n\027ge_go"
    "ods_profit_request\";\n\025eg_goods_profit_re"
    "ply\022\022\n\nreply_code\030\001 \001(\r\022\016\n\006profit\030\002 \001(\r\""
    "1\n ge_expedition_fight_data_request\022\r\n\005l"
    "evel\030\001 \001(\r\"[\n\036eg_expedition_fight_data_r"
    "eply\0229\n\nstage_list\030\001 \003(\0132%.proto.common."
    "expedition_stage_single\".\n\035ge_expedition"
    "_refresh_request\022\r\n\005level\030\001 \001(\r\"X\n\033eg_ex"
    "pedition_refresh_reply\0229\n\nstage_list\030\001 \003"
    "(\0132%.proto.common.expedition_stage_singl"
    "e\"F\n#ge_expedition_refresh_stage_request"
    "\022\r\n\005level\030\001 \001(\r\022\020\n\010stage_id\030\002 \001(\r\"^\n!eg_"
    "expedition_refresh_stage_reply\0229\n\nstage_"
    "data\030\001 \001(\0132%.proto.common.expedition_sta"
    "ge_single\"1\n\032ge_expedition_help_request\022"
    "\023\n\013helper_list\030\001 \003(\004\".\n\030eg_expedition_he"
    "lp_reply\022\022\n\nreply_code\030\001 \001(\r\"2\n\033global_d"
    "ata_day_update_time\022\023\n\013update_time\030\001 \001(\r"
    "\"n\n\026global_data_family_war\022\017\n\007week_id\030\001 "
    "\001(\r\022C\n\005state\030\002 \001(\0162\036.proto.common.family"
    "_war_state:\024family_war_state_end\"D\n\030glob"
    "al_data_country_data\022\023\n\013period_type\030\001 \001("
    "\r\022\023\n\013period_time\030\002 \001(\r\"W\n\031global_data_ki"
    "ng_war_data\022\r\n\005state\030\001 \001(\r\022\026\n\016state_end_"
    "time\030\002 \001(\r\022\023\n\013battle_time\030\003 \001(\r\"F\n\026eg_of"
    "fline_data_notify\022,\n\003ord\030\001 \001(\0132\037.proto.c"
    "ommon.offline_role_data\"F\n\026ge_offline_da"
    "ta_notify\022,\n\003ord\030\001 \001(\0132\037.proto.common.of"
    "fline_role_data\"O\n\037eg_notify_progress_st"
    "ate_notify\022\014\n\004type\030\001 \001(\r\022\016\n\006param1\030\002 \001(\r"
    "\022\016\n\006param2\030\003 \001(\r\"O\n\037hg_notify_progress_s"
    "tate_notify\022\014\n\004type\030\001 \001(\r\022\016\n\006param1\030\002 \001("
    "\r\022\016\n\006param2\030\003 \001(\r\"a\n\027ge_tower_trigger_no"
    "tify\0222\n\rtower_trigger\030\001 \003(\0132\033.proto.comm"
    "on.tower_trigger\022\022\n\nfriend_uid\030\002 \001(\004\"M\n\027"
    "eg_tower_trigger_notify\0222\n\rtower_trigger"
    "\030\001 \003(\0132\033.proto.common.tower_trigger\"/\n\031e"
    "g_two_side_friend_notify\022\022\n\nfriend_uid\030\001"
    " \001(\004\"U\n\033ge_check_sys_notice_request\0226\n\017s"
    "ys_notice_list\030\001 \001(\0132\035.proto.common.sys_"
    "notity_data\"S\n\031eg_check_sys_notice_reply"
    "\0226\n\017sys_notice_list\030\001 \001(\0132\035.proto.common"
    ".sys_notity_data\"R\n\030eg_syn_sys_notice_no"
    "tify\0226\n\017sys_notice_list\030\001 \001(\0132\035.proto.co"
    "mmon.sys_notity_data\"\034\n\032ge_gm_clear_noti"
    "ce_request\"\033\n\031eg_gm_clear_notice_notify\""
    "\215\001\n\032ge_role_simple_data_notify\022<\n\004type\030\001"
    " \001(\0162\034.proto.common.role_data_type:\020simp"
    "le_info_type\0221\n\013simple_data\030\002 \001(\0132\034.prot"
    "o.common.role_blob_data\"\036\n\034eg_offline_ar"
    "ena_join_notify\"R\n\034ge_offline_arena_form"
    "_notify\0222\n\tform_data\030\001 \001(\0132\037.proto.commo"
    "n.mirror_fight_data\"r\n\036eg_offline_arena_"
    "fight_request\0223\n\nenemy_data\030\001 \001(\0132\037.prot"
    "o.common.mirror_fight_data\022\033\n\023offline_ar"
    "ena_class\030\002 \001(\r\".\n\034ge_offline_arena_figh"
    "t_reply\022\016\n\006is_win\030\001 \001(\r\"V\n$eg_offline_ar"
    "ena_record_award_notify\022.\n\titem_list\030\001 \003"
    "(\0132\033.proto.common.mail_item_obj\"6\n#eg_of"
    "fline_arena_score_award_notify\022\017\n\007drop_i"
    "d\030\001 \001(\r\"E\n#eg_offline_arena_sweep_award_"
    "notify\022\017\n\007drop_id\030\001 \001(\r\022\r\n\005count\030\002 \001(\r\"I"
    "\n#eg_offline_arena_class_award_notify\022\017\n"
    "\007drop_id\030\001 \003(\r\022\021\n\tcur_class\030\002 \001(\r\"-\n\034ge_"
    "offline_arena_buy_request\022\r\n\005money\030\001 \001(\r"
    "\"\?\n\032eg_offline_arena_buy_reply\022\022\n\nreply_"
    "code\030\001 \001(\r\022\r\n\005money\030\002 \001(\r\".\n\036ge_offline_"
    "arena_gmrank_notify\022\014\n\004rank\030\001 \001(\r\"6\n!hr_"
    "get_hero_strategy_info_request\022\021\n\tserver"
    "_id\030\001 \001(\r\"i\n\037rh_get_hero_strategy_info_r"
    "eply\022\021\n\tserver_id\030\001 \001(\r\0223\n\thero_info\030\002 \003"
    "(\0132 .proto.common.hero_strategy_info\"[\n\032"
    "ge_troop_sync_task_request\022\020\n\010troop_id\030\001"
    " \001(\004\022+\n\ttask_info\030\002 \001(\0132\030.proto.common.t"
    "ask_state\"C\n\032eg_buy_wish_summon_request\022"
    "\021\n\tsummon_id\030\001 \001(\r\022\022\n\nreply_code\030\002 \001(\r\"A"
    "\n\030ge_buy_wish_summon_reply\022\021\n\tsummon_id\030"
    "\001 \001(\r\022\022\n\nreply_code\030\002 \001(\r\"I\n eg_king_ope"
    "n_wish_summon_request\022\021\n\tsummon_id\030\001 \001(\r"
    "\022\022\n\nreply_code\030\002 \001(\r\"t\n\036ge_king_open_wis"
    "h_summon_reply\022\021\n\tsummon_id\030\001 \001(\r\022\022\n\nrep"
    "ly_code\030\002 \001(\r\022+\n\003rcd\030\003 \001(\0132\036.proto.commo"
    "n.role_change_data\"y\n\036ge_modify_family_m"
    "oney_request\022\021\n\tfamily_id\030\001 \001(\004\022\014\n\004type\030"
    "\002 \001(\r\022\013\n\003num\030\003 \001(\r\022\023\n\013source_type\030\004 \001(\r\022"
    "\024\n\014source_param\030\005 \001(\r\"{\n\037ge_modify_count"
    "ry_money_request\022\022\n\ncountry_id\030\001 \001(\r\022\014\n\004"
    "type\030\002 \001(\r\022\013\n\003num\030\003 \001(\r\022\023\n\013source_type\030\004"
    " \001(\r\022\024\n\014source_param\030\005 \001(\r\"P\n\035ge_get_wis"
    "h_summon_info_reply\022/\n\010buy_info\030\001 \003(\0132\035."
    "proto.common.buy_summon_info\"s\n\027ge_desti"
    "ne_item_request\022\017\n\007role_id\030\001 \001(\004\022\021\n\tsear"
    "ch_id\030\002 \001(\r\022\013\n\003num\030\003 \001(\r\022\'\n\006reason\030\004 \001(\013"
    "2\027.proto.common.ex_reason\"\245\001\n\025eg_destine"
    "_item_reply\022\017\n\007role_id\030\001 \001(\004\022\021\n\tgoods_ui"
    "d\030\002 \001(\004\022\017\n\007item_id\030\003 \001(\r\022\013\n\003num\030\004 \001(\r\022\r\n"
    "\005price\030\005 \001(\r\022\'\n\006reason\030\006 \001(\0132\027.proto.com"
    "mon.ex_reason\022\022\n\nreply_code\030\007 \001(\r\".\n\031ge_"
    "undestine_item_request\022\021\n\tgoods_uid\030\001 \001("
    "\004\"]\n\035ge_push_general_event_request\022\r\n\005in"
    "dex\030\001 \001(\r\022\020\n\010role_uid\030\002 \001(\004\022\014\n\004name\030\003 \001("
    "\t\022\r\n\005value\030\004 \001(\r\"[\n eg_sync_general_even"
    "t_count_info\0227\n\014general_info\030\001 \003(\0132!.pro"
    "to.common.general_info_single\"L\n\032eg_sync"
    "_general_event_data\022.\n\004info\030\001 \003(\0132 .prot"
    "o.common.general_event_data\"X\n\032eg_sync_g"
    "eneral_event_open\022\n\n\002id\030\001 \001(\r\022.\n\004info\030\002 "
    "\001(\0132 .proto.common.general_event_data\"X\n"
    "\032eg_sync_general_event_done\022\n\n\002id\030\001 \001(\r\022"
    ".\n\004info\030\002 \001(\0132 .proto.common.general_eve"
    "nt_data\"%\n\024eg_sync_server_level\022\r\n\005level"
    "\030\001 \001(\r\"6\n\020me_transport_ntf\022\020\n\010role_uid\030\001"
    " \001(\004\022\020\n\010scene_id\030\002 \001(\r\"9\n\023eg_gm_transpor"
    "t_ntf\022\020\n\010role_uid\030\001 \001(\004\022\020\n\010scene_id\030\002 \001("
    "\r\"c\n!ea_send_gm_msg_to_account_request\022\020"
    "\n\010cmd_type\030\001 \001(\r\022,\n\003msg\030\002 \001(\0132\037.proto.co"
    "mmon.gm_msg_to_account\"5\n\037ae_send_gm_msg"
    "_to_account_reply\022\022\n\nreply_code\030\001 \001(\r\"b\n"
    " al_send_gm_msg_to_account_requst\022\020\n\010cmd"
    "_type\030\001 \001(\r\022,\n\003msg\030\002 \001(\0132\037.proto.common."
    "gm_msg_to_account\"5\n\037la_send_gm_msg_to_a"
    "ccount_reply\022\022\n\nreply_code\030\001 \001(\r\"v\n!ln_s"
    "end_gm_msg_to_account_request\022\020\n\010cmd_typ"
    "e\030\001 \001(\r\022\021\n\tserver_id\030\002 \001(\r\022,\n\003msg\030\003 \001(\0132"
    "\037.proto.common.gm_msg_to_account\"5\n\037nl_s"
    "end_gm_msg_to_account_reply\022\022\n\nreply_cod"
    "e\030\001 \001(\r\"\205\001\n\022me_manage_role_ntf\022\020\n\010role_u"
    "id\030\001 \003(\004\022\023\n\013manage_type\030\002 \001(\r\022\023\n\013offset_"
    "time\030\003 \001(\r\022\020\n\010admin_id\030\004 \001(\r\022\016\n\006reason\030\005"
    " \001(\t\022\021\n\toper_name\030\006 \001(\t\"\255\001\n\022em_manage_ro"
    "le_ntf\0228\n\nreply_data\030\001 \003(\0132$.proto.gm_co"
    "mmon.manage_reply_single\022\020\n\010admin_id\030\002 \001"
    "(\r\022\023\n\013manage_type\030\003 \001(\r\022\023\n\013offset_time\030\004"
    " \001(\r\022\016\n\006reason\030\005 \001(\t\022\021\n\toper_name\030\006 \001(\t\""
    ".\n\026eh_silence_role_notify\022\024\n\014silence_tim"
    "e\030\001 \001(\r\"0\n\032nl_syn_account_info_notify\022\022\n"
    "\naccount_id\030\001 \001(\r\"0\n\032nd_syn_account_info"
    "_notify\022\022\n\naccount_id\030\001 \001(\r\"8\n\026gd_change"
    "_name_request\022\020\n\010new_name\030\001 \001(\t\022\014\n\004cost\030"
    "\002 \001(\r\"J\n\024dg_change_name_reply\022\022\n\nreply_c"
    "ode\030\001 \001(\r\022\020\n\010new_name\030\002 \001(\t\022\014\n\004cost\030\003 \001("
    "\r\")\n\025de_change_name_notify\022\020\n\010new_name\030\001"
    " \001(\t\")\n\025eh_change_name_notify\022\020\n\010new_nam"
    "e\030\001 \001(\t\"\?\n\027me_reload_config_notify\022\021\n\tlo"
    "ad_type\030\001 \001(\r\022\021\n\tfile_name\030\002 \001(\t\"\?\n\027eg_r"
    "eload_config_notify\022\021\n\tload_type\030\001 \001(\r\022\021"
    "\n\tfile_name\030\002 \001(\t\"\234\001\n\036ge_change_friendli"
    "ness_request\022\022\n\nmy_role_id\030\001 \001(\004\022\026\n\016frie"
    "nd_role_id\030\002 \001(\004\022\024\n\014change_value\030\003 \001(\005\0228"
    "\n\006reason\030\004 \001(\0162(.proto.common.change_fri"
    "endliness_reason\"\233\001\n\035eg_change_friendlin"
    "ess_notify\022\022\n\nmy_role_id\030\001 \001(\004\022\026\n\016friend"
    "_role_id\030\002 \001(\004\022\024\n\014change_value\030\003 \001(\005\0228\n\006"
    "reason\030\004 \001(\0162(.proto.common.change_frien"
    "dliness_reason\".\n\033ge_get_friendliness_re"
    "quest\022\017\n\007role_id\030\001 \001(\004\"C\n\023player_friendl"
    "iness\022\026\n\016friend_role_id\030\001 \001(\004\022\024\n\014friendl"
    "iness\030\002 \001(\r\"e\n\031eg_get_friendliness_reply"
    "\022\017\n\007role_id\030\001 \001(\004\0227\n\014friendliness\030\002 \003(\0132"
    "!.proto.server.player_friendliness\"\255\001\n!e"
    "g_friend_point_operation_request\022\017\n\007role"
    "_id\030\001 \001(\004\022\026\n\016friend_role_id\030\002 \001(\004\0227\n\tope"
    "ration\030\003 \001(\0162$.proto.server.friend_point"
    "_operation\022\022\n\nparameter1\030\004 \001(\005\022\022\n\nparame"
    "ter2\030\005 \001(\005\"\260\002\n\037ge_friend_point_operation"
    "_reply\022\017\n\007role_id\030\001 \001(\004\022\026\n\016friend_role_i"
    "d\030\002 \001(\004\0227\n\toperation\030\003 \001(\0162$.proto.serve"
    "r.friend_point_operation\022\022\n\nparameter1\030\004"
    " \001(\005\022\022\n\nparameter2\030\005 \001(\005\022\r\n\005info1\030\006 \001(\005\022"
    "\r\n\005info2\030\007 \001(\005\022\r\n\005info3\030\n \001(\t\0223\n\013change_"
    "data\030\010 \001(\0132\036.proto.common.role_change_da"
    "ta\022\022\n\nreply_code\030\t \001(\005\022\r\n\005info4\030\013 \001(\005\"_\n"
    "\032sv_cross_area_video_notify\022-\n\004base\030\001 \001("
    "\0132\037.proto.common.video_single_base\022\022\n\nfi"
    "ght_data\030\002 \001(\014\"Z\n\025gv_tower_video_notify\022"
    "-\n\004base\030\001 \001(\0132\037.proto.common.video_singl"
    "e_base\022\022\n\nfight_data\030\002 \001(\014*\351\003\n\016data_sync"
    "_type\022\030\n\024data_sync_type_begin\020\001\022\035\n\031data_"
    "sync_type_country_id\020\002\022\"\n\036data_sync_type"
    "_country_officer\020\003\022\030\n\024data_sync_type_lev"
    "el\020\004\022!\n\035data_sync_type_fighting_value\020\005\022"
    " \n\034data_sync_type_country_money\020\006\022\036\n\032dat"
    "a_sync_type_server_time\020\010\022\037\n\033data_sync_t"
    "ype_family_money\020\t\022!\n\035data_sync_type_fam"
    "ily_officer\020\020\022&\n\"data_sync_type_family_c"
    "ontribution\020\021\022\035\n\031data_sync_type_field_bo"
    "ss\020\022\022\035\n\031data_sync_type_head_frame\020\023\022\036\n\032d"
    "ata_sync_type_main_plugin\020\024\022\030\n\024data_sync"
    "_type_charm\020\025\022\027\n\022data_sync_type_end\020\220N*\322"
    "\001\n\021scene_change_type\022\025\n\021scene_change_non"
    "e\020\000\022\026\n\022login_server_scene\020\001\022\030\n\024relogin_s"
    "erver_scene\020\002\022\025\n\021user_change_scene\020\003\022\026\n\022"
    "user_enter_dungeon\020\004\022\023\n\017user_troop_jump\020"
    "\005\022\027\n\023forced_change_scene\020\006\022\027\n\023center_cha"
    "nge_scene\020\007*\304\003\n\030family_money_change_type"
    "\022\034\n\030family_money_change_none\020\000\022%\n!family"
    "_money_change_king_war_cost\020\001\022*\n&family_"
    "money_change_king_war_fail_back\020\002\022+\n\'fam"
    "ily_money_change_king_war_error_back\020\003\022\036"
    "\n\032family_money_change_gm_add\020\004\022%\n!family"
    "_money_change_maintain_cost\020\005\022\035\n\031family_"
    "money_update_build\020\006\022\037\n\033family_money_cle"
    "ar_build_cd\020\007\022 \n\034family_money_change_tas"
    "k_add\020\010\022\036\n\032family_money_king_war_back\020\t\022"
    "\037\n\033family_money_family_war_win\020\n\022 \n\034fami"
    "ly_money_family_war_lose\020\013*~\n\031country_mo"
    "ney_change_type\022\035\n\031country_money_change_"
    "none\020\000\022\037\n\033country_money_change_gm_add\020\001\022"
    "!\n\035country_money_change_task_add\020\002*M\n\rEM"
    "_FIELD_MODE\022\023\n\017FIELD_BOSS_NONE\020\000\022\023\n\017FIEL"
    "D_BOSS_KILL\020\001\022\022\n\016FILED_BOSS_END\020\002*K\n\013em_"
    "map_type\022\021\n\rmap_type_none\020\000\022\023\n\017map_type_"
    "static\020\001\022\024\n\020map_type_dynamic\020\002*I\n\023dungeo"
    "n_create_type\022\031\n\025dungeon_create_single\020\001"
    "\022\027\n\023dungeon_create_team\020\002*\337\001\n\rem_scene_t"
    "ype\022\026\n\022em_scene_type_none\020\000\022\031\n\025em_scene_"
    "type_emperor\020\001\022\026\n\022em_scene_type_king\020\002\022\030"
    "\n\024em_scene_type_normal\020\003\022\030\n\024em_scene_typ"
    "e_prison\020\004\022\027\n\023em_scene_type_arena\020\005\022\030\n\024e"
    "m_scene_type_dugeon\020\010\022\034\n\030em_scene_type_f"
    "amily_war\020\t*\251\001\n\020global_data_type\022\031\n\025glob"
    "al_data_type_none\020\000\022\034\n\030global_data_type_"
    "one_day\020\001\022\037\n\033global_data_type_family_war"
    "\020\002\022\034\n\030global_data_type_country\020\003\022\035\n\031glob"
    "al_data_type_king_war\020\004*r\n\026friend_point_"
    "operation\022 \n\034player_get_point_from_frien"
    "d\020\001\022\035\n\031player_get_relation_award\020\002\022\027\n\023pl"
    "ayer_give_present\020\003", 32539);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "server.proto", &protobuf_RegisterTypes);
  data_sync_item::default_instance_ = new data_sync_item();
  server_pingpong_request::default_instance_ = new server_pingpong_request();
  la_login_request::default_instance_ = new la_login_request();
  al_login_reply::default_instance_ = new al_login_reply();
  gr_role_leave_game_notify::default_instance_ = new gr_role_leave_game_notify();
  ag_role_enter_game_notify::default_instance_ = new ag_role_enter_game_notify();
  ga_role_move_notify::default_instance_ = new ga_role_move_notify();
  ga_role_into_vision_notify::default_instance_ = new ga_role_into_vision_notify();
  ga_role_out_vision_notify::default_instance_ = new ga_role_out_vision_notify();
  ga_broadcast_notify::default_instance_ = new ga_broadcast_notify();
  ea_broadcast_notify::default_instance_ = new ea_broadcast_notify();
  al_kick_role_notify::default_instance_ = new al_kick_role_notify();
  al_kick_gate_all_user_notify::default_instance_ = new al_kick_gate_all_user_notify();
  gh_kick_role_notify::default_instance_ = new gh_kick_role_notify();
  gd_batch_save_to_db_notify::default_instance_ = new gd_batch_save_to_db_notify();
  save_to_db::default_instance_ = new save_to_db();
  gd_role_data_request::default_instance_ = new gd_role_data_request();
  dg_role_data_reply::default_instance_ = new dg_role_data_reply();
  al_update_gate_user_num_notify::default_instance_ = new al_update_gate_user_num_notify();
  de_user_data_reply::default_instance_ = new de_user_data_reply();
  de_user_center_data_reply::default_instance_ = new de_user_center_data_reply();
  ed_sync_role_data_request::default_instance_ = new ed_sync_role_data_request();
  ag_save_user_notify::default_instance_ = new ag_save_user_notify();
  ln_syn_login_info_notify::default_instance_ = new ln_syn_login_info_notify();
  ln_close_server_notify::default_instance_ = new ln_close_server_notify();
  ln_user_num_notify::default_instance_ = new ln_user_num_notify();
  ag_syn_gate_info_notify::default_instance_ = new ag_syn_gate_info_notify();
  gh_syn_online_role_notify::default_instance_ = new gh_syn_online_role_notify();
  hg_test_notify::default_instance_ = new hg_test_notify();
  ah_syn_gate_info_notify::default_instance_ = new ah_syn_gate_info_notify();
  ha_test_reply::default_instance_ = new ha_test_reply();
  gh_syn_game_info_notify::default_instance_ = new gh_syn_game_info_notify();
  hg_chat_get_role_info_request::default_instance_ = new hg_chat_get_role_info_request();
  gh_chat_get_role_info_reply::default_instance_ = new gh_chat_get_role_info_reply();
  hg_get_nearby_roles_request::default_instance_ = new hg_get_nearby_roles_request();
  gh_get_nearby_roles_reply::default_instance_ = new gh_get_nearby_roles_reply();
  hg_task_seek_help_request::default_instance_ = new hg_task_seek_help_request();
  gh_task_seek_help_reply::default_instance_ = new gh_task_seek_help_reply();
  hf_syn_chat_info_notify::default_instance_ = new hf_syn_chat_info_notify();
  fh_syn_transfer_info_notify::default_instance_ = new fh_syn_transfer_info_notify();
  gh_gm_cmd_notify::default_instance_ = new gh_gm_cmd_notify();
  hf_gm_cmd_notify::default_instance_ = new hf_gm_cmd_notify();
  fh_test_reply::default_instance_ = new fh_test_reply();
  hg_syn_online_role_list_request::default_instance_ = new hg_syn_online_role_list_request();
  gh_syn_online_role_list_notify::default_instance_ = new gh_syn_online_role_list_notify();
  eh_country_member_change_notify::default_instance_ = new eh_country_member_change_notify();
  eh_family_member_change_notify::default_instance_ = new eh_family_member_change_notify();
  hf_get_server_channel_list_request::default_instance_ = new hf_get_server_channel_list_request();
  fh_get_server_channel_list_reply::default_instance_ = new fh_get_server_channel_list_reply();
  hf_change_server_channel_request::default_instance_ = new hf_change_server_channel_request();
  fh_change_server_channel_reply::default_instance_ = new fh_change_server_channel_reply();
  fh_change_server_channel_notify::default_instance_ = new fh_change_server_channel_notify();
  ha_change_server_channel_notify::default_instance_ = new ha_change_server_channel_notify();
  hf_server_channel_chat_request::default_instance_ = new hf_server_channel_chat_request();
  fh_server_channel_chat_reply::default_instance_ = new fh_server_channel_chat_reply();
  fh_server_channel_chat_notify::default_instance_ = new fh_server_channel_chat_notify();
  ha_server_channel_chat_notify::default_instance_ = new ha_server_channel_chat_notify();
  hf_personal_chat_request::default_instance_ = new hf_personal_chat_request();
  fh_personal_chat_notify::default_instance_ = new fh_personal_chat_notify();
  ha_personal_chat_notify::default_instance_ = new ha_personal_chat_notify();
  he_family_chat_notify::default_instance_ = new he_family_chat_notify();
  he_personal_chat_notify::default_instance_ = new he_personal_chat_notify();
  eh_kick_all_user_notify::default_instance_ = new eh_kick_all_user_notify();
  dn_create_role_request::default_instance_ = new dn_create_role_request();
  nd_create_role_reply::default_instance_ = new nd_create_role_reply();
  dn_role_data_update_notify::default_instance_ = new dn_role_data_update_notify();
  hg_user_channel_notify::default_instance_ = new hg_user_channel_notify();
  ge_syn_game_info_notify::default_instance_ = new ge_syn_game_info_notify();
  gd_syn_game_info_notify::default_instance_ = new gd_syn_game_info_notify();
  al_syn_gate_info_notify::default_instance_ = new al_syn_gate_info_notify();
  ga_syn_game_info_notify::default_instance_ = new ga_syn_game_info_notify();
  ga_syn_cross_id_notify::default_instance_ = new ga_syn_cross_id_notify();
  ae_syn_gate_info_notify::default_instance_ = new ae_syn_gate_info_notify();
  cross_server_data::default_instance_ = new cross_server_data();
  ae_reg_user_center_request::default_instance_ = new ae_reg_user_center_request();
  ae_unreg_user_scene_notify::default_instance_ = new ae_unreg_user_scene_notify();
  ea_unreg_user_center_notify::default_instance_ = new ea_unreg_user_center_notify();
  ae_create_role_request::default_instance_ = new ae_create_role_request();
  ea_create_role_reply::default_instance_ = new ea_create_role_reply();
  ae_user_cross_server_notify::default_instance_ = new ae_user_cross_server_notify();
  ea_kick_all_user_notify::default_instance_ = new ea_kick_all_user_notify();
  global_user_data::default_instance_ = new global_user_data();
  eg_unreg_user_scene_notify::default_instance_ = new eg_unreg_user_scene_notify();
  ge_unreg_user_scene_notify::default_instance_ = new ge_unreg_user_scene_notify();
  eg_reg_user_scene_request::default_instance_ = new eg_reg_user_scene_request();
  ge_reg_user_scene_reply::default_instance_ = new ge_reg_user_scene_reply();
  eg_relogin_scene_request::default_instance_ = new eg_relogin_scene_request();
  ge_user_cross_scene_request::default_instance_ = new ge_user_cross_scene_request();
  eg_user_cross_scene_reply::default_instance_ = new eg_user_cross_scene_reply();
  eg_kick_all_user_notify::default_instance_ = new eg_kick_all_user_notify();
  ed_create_role_request::default_instance_ = new ed_create_role_request();
  de_create_role_reply::default_instance_ = new de_create_role_reply();
  ed_query_role_data_request::default_instance_ = new ed_query_role_data_request();
  de_query_role_data_reply::default_instance_ = new de_query_role_data_reply();
  ed_role_leave_game_notify::default_instance_ = new ed_role_leave_game_notify();
  ag_unreg_user_scene_notify::default_instance_ = new ag_unreg_user_scene_notify();
  ga_unreg_user_scene_notify::default_instance_ = new ga_unreg_user_scene_notify();
  ga_reg_user_success_notify::default_instance_ = new ga_reg_user_success_notify();
  ga_user_cross_server_notify::default_instance_ = new ga_user_cross_server_notify();
  ge_city_trade_add_prosperity_value_notify::default_instance_ = new ge_city_trade_add_prosperity_value_notify();
  eg_city_base_info_notify::default_instance_ = new eg_city_base_info_notify();
  ge_get_city_list_request::default_instance_ = new ge_get_city_list_request();
  eg_get_city_list_reply::default_instance_ = new eg_get_city_list_reply();
  eh_test_request::default_instance_ = new eh_test_request();
  he_test_reply::default_instance_ = new he_test_reply();
  ge_update_rank_notify::default_instance_ = new ge_update_rank_notify();
  ge_create_family_request::default_instance_ = new ge_create_family_request();
  eg_update_family_info_notify::default_instance_ = new eg_update_family_info_notify();
  eg_create_family_reply::default_instance_ = new eg_create_family_reply();
  ge_impeach_family_general_request::default_instance_ = new ge_impeach_family_general_request();
  eg_impeach_family_general_reply::default_instance_ = new eg_impeach_family_general_reply();
  eg_notify_game_impeach_result::default_instance_ = new eg_notify_game_impeach_result();
  family_war_dungeon_info::default_instance_ = new family_war_dungeon_info();
  family_war_dungeon_data::default_instance_ = new family_war_dungeon_data();
  family_war_dungeon_back::default_instance_ = new family_war_dungeon_back();
  eg_prepare_family_war_request::default_instance_ = new eg_prepare_family_war_request();
  ge_prepare_family_war_reply::default_instance_ = new ge_prepare_family_war_reply();
  eg_family_war_start_notify::default_instance_ = new eg_family_war_start_notify();
  eg_family_war_end_notify::default_instance_ = new eg_family_war_end_notify();
  eg_enter_family_war_scene_request::default_instance_ = new eg_enter_family_war_scene_request();
  family_war_personal::default_instance_ = new family_war_personal();
  family_war_result_data::default_instance_ = new family_war_result_data();
  ge_family_war_early_result_notify::default_instance_ = new ge_family_war_early_result_notify();
  ge_family_war_result_notify::default_instance_ = new ge_family_war_result_notify();
  ge_family_update_glory_notify::default_instance_ = new ge_family_update_glory_notify();
  ge_family_prayer_request::default_instance_ = new ge_family_prayer_request();
  ge_family_prayer_gift_request::default_instance_ = new ge_family_prayer_gift_request();
  eg_family_prayer_gift_failed_notify::default_instance_ = new eg_family_prayer_gift_failed_notify();
  eg_family_country_change_notify::default_instance_ = new eg_family_country_change_notify();
  eg_family_level_change_notify::default_instance_ = new eg_family_level_change_notify();
  ge_family_shop_buy_request::default_instance_ = new ge_family_shop_buy_request();
  eg_family_shop_buy_reply::default_instance_ = new eg_family_shop_buy_reply();
  ge_family_shop_back_notify::default_instance_ = new ge_family_shop_back_notify();
  ge_gm_set_king_family_notify::default_instance_ = new ge_gm_set_king_family_notify();
  eg_update_country_notify::default_instance_ = new eg_update_country_notify();
  eg_country_name_change_request::default_instance_ = new eg_country_name_change_request();
  ge_country_name_change_reply::default_instance_ = new ge_country_name_change_reply();
  eg_country_year_name_request::default_instance_ = new eg_country_year_name_request();
  ge_country_year_name_reply::default_instance_ = new ge_country_year_name_reply();
  eg_sync_data_request::default_instance_ = new eg_sync_data_request();
  ge_sync_data_request::default_instance_ = new ge_sync_data_request();
  ge_ready_enter_scene_notify::default_instance_ = new ge_ready_enter_scene_notify();
  eg_summon_field_boss_request::default_instance_ = new eg_summon_field_boss_request();
  eg_field_boss_die_notify::default_instance_ = new eg_field_boss_die_notify();
  ge_summon_field_boss_replay::default_instance_ = new ge_summon_field_boss_replay();
  eg_clear_all_boss_notify::default_instance_ = new eg_clear_all_boss_notify();
  ge_field_boss_killed_notify::default_instance_ = new ge_field_boss_killed_notify();
  field_boss_rank::default_instance_ = new field_boss_rank();
  ge_field_boss_rank_notify::default_instance_ = new ge_field_boss_rank_notify();
  ge_check_drop_items_request::default_instance_ = new ge_check_drop_items_request();
  eg_check_drop_items_reply::default_instance_ = new eg_check_drop_items_reply();
  eg_syn_item_limit_notify::default_instance_ = new eg_syn_item_limit_notify();
  ge_redbag_send_notify::default_instance_ = new ge_redbag_send_notify();
  eg_redbag_draw_notify::default_instance_ = new eg_redbag_draw_notify();
  gall_reload_config_notify::default_instance_ = new gall_reload_config_notify();
  eg_chat_get_role_info_request::default_instance_ = new eg_chat_get_role_info_request();
  ge_chat_get_role_info_reply::default_instance_ = new ge_chat_get_role_info_reply();
  fr_syn_transfer_info_request::default_instance_ = new fr_syn_transfer_info_request();
  fr_test_request::default_instance_ = new fr_test_request();
  rf_test_reply::default_instance_ = new rf_test_reply();
  mail_get_addenda::default_instance_ = new mail_get_addenda();
  eg_mail_get_addenda_request::default_instance_ = new eg_mail_get_addenda_request();
  mail_get_addenda_back::default_instance_ = new mail_get_addenda_back();
  ge_mail_get_addenda_reply::default_instance_ = new ge_mail_get_addenda_reply();
  ge_mail_new_notify::default_instance_ = new ge_mail_new_notify();
  sr_syn_cross_info_notify::default_instance_ = new sr_syn_cross_info_notify();
  rs_syn_area_info_notify::default_instance_ = new rs_syn_area_info_notify();
  rs_cross_fight_test_notify::default_instance_ = new rs_cross_fight_test_notify();
  gr_cross_fight_test_notify::default_instance_ = new gr_cross_fight_test_notify();
  ef_syn_center_info_notify::default_instance_ = new ef_syn_center_info_notify();
  ef_test_request::default_instance_ = new ef_test_request();
  fe_syn_transfer_info_notify::default_instance_ = new fe_syn_transfer_info_notify();
  fe_test_reply::default_instance_ = new fe_test_reply();
  rs_arena_battle_notify::default_instance_ = new rs_arena_battle_notify();
  rs_arena_battle_ai_notify::default_instance_ = new rs_arena_battle_ai_notify();
  sr_arena_battle_result_notify::default_instance_ = new sr_arena_battle_result_notify();
  gr_arena_match_request::default_instance_ = new gr_arena_match_request();
  rg_arena_match_reply::default_instance_ = new rg_arena_match_reply();
  gr_arena_cancel_match_request::default_instance_ = new gr_arena_cancel_match_request();
  rg_arena_cancel_match_reply::default_instance_ = new rg_arena_cancel_match_reply();
  rg_arena_battle_result_notify::default_instance_ = new rg_arena_battle_result_notify();
  gr_get_arena_rank_data_request::default_instance_ = new gr_get_arena_rank_data_request();
  rg_get_arena_rank_data_reply::default_instance_ = new rg_get_arena_rank_data_reply();
  gr_arena_self_rank_request::default_instance_ = new gr_arena_self_rank_request();
  rg_arena_self_rank_reply::default_instance_ = new rg_arena_self_rank_reply();
  ge_arena_fight_data_notify::default_instance_ = new ge_arena_fight_data_notify();
  ge_role_online_notify::default_instance_ = new ge_role_online_notify();
  ge_challenge_request::default_instance_ = new ge_challenge_request();
  eg_challenge_reply::default_instance_ = new eg_challenge_reply();
  ge_challenge_process_request::default_instance_ = new ge_challenge_process_request();
  eg_challenge_process_reply::default_instance_ = new eg_challenge_process_reply();
  eg_challenge_fight_request::default_instance_ = new eg_challenge_fight_request();
  ge_challenge_fight_reply::default_instance_ = new ge_challenge_fight_reply();
  ge_pk_beat_criminal_notify::default_instance_ = new ge_pk_beat_criminal_notify();
  eg_challenge_transfer_notify::default_instance_ = new eg_challenge_transfer_notify();
  eg_king_war_state_notify::default_instance_ = new eg_king_war_state_notify();
  eg_king_war_time_end_notify::default_instance_ = new eg_king_war_time_end_notify();
  king_war_personal::default_instance_ = new king_war_personal();
  ge_king_war_result_notify::default_instance_ = new ge_king_war_result_notify();
  ge_king_war_scene_user_num_notify::default_instance_ = new ge_king_war_scene_user_num_notify();
  eg_check_user_buy_goods_request::default_instance_ = new eg_check_user_buy_goods_request();
  ge_check_user_buy_goods_reply::default_instance_ = new ge_check_user_buy_goods_reply();
  eg_give_user_goods_notify::default_instance_ = new eg_give_user_goods_notify();
  er_world_cup_data_request::default_instance_ = new er_world_cup_data_request();
  re_world_cup_data_reply::default_instance_ = new re_world_cup_data_reply();
  re_world_cup_battle_notify::default_instance_ = new re_world_cup_battle_notify();
  re_world_cup_mail_notify::default_instance_ = new re_world_cup_mail_notify();
  re_world_cup_coming_quarter_notify::default_instance_ = new re_world_cup_coming_quarter_notify();
  re_world_cup_coming_soon_notify::default_instance_ = new re_world_cup_coming_soon_notify();
  re_world_cup_ready_notify::default_instance_ = new re_world_cup_ready_notify();
  gr_world_cup_play_request::default_instance_ = new gr_world_cup_play_request();
  rg_world_cup_play_reply::default_instance_ = new rg_world_cup_play_reply();
  re_world_cup_update_notify::default_instance_ = new re_world_cup_update_notify();
  er_world_cup_bet_data_request::default_instance_ = new er_world_cup_bet_data_request();
  re_world_cup_bet_data_reply::default_instance_ = new re_world_cup_bet_data_reply();
  gr_world_cup_bet_request::default_instance_ = new gr_world_cup_bet_request();
  rg_world_cup_bet_reply::default_instance_ = new rg_world_cup_bet_reply();
  gr_world_cup_bet_reward_request::default_instance_ = new gr_world_cup_bet_reward_request();
  rg_world_cup_bet_reward_reply::default_instance_ = new rg_world_cup_bet_reward_reply();
  er_world_cup_odds_request::default_instance_ = new er_world_cup_odds_request();
  re_world_cup_odds_reply::default_instance_ = new re_world_cup_odds_reply();
  eg_red_point_notify::default_instance_ = new eg_red_point_notify();
  troop_shadow_base::default_instance_ = new troop_shadow_base();
  troop_extra_info::default_instance_ = new troop_extra_info();
  troop_server_data::default_instance_ = new troop_server_data();
  eg_troop_event_notify::default_instance_ = new eg_troop_event_notify();
  ge_troop_create_request::default_instance_ = new ge_troop_create_request();
  ge_troop_auto_match_request::default_instance_ = new ge_troop_auto_match_request();
  ge_troop_join_request::default_instance_ = new ge_troop_join_request();
  eg_troop_agree_apply_request::default_instance_ = new eg_troop_agree_apply_request();
  ge_troop_agree_apply_reply::default_instance_ = new ge_troop_agree_apply_reply();
  ge_troop_process_invite_request::default_instance_ = new ge_troop_process_invite_request();
  ge_troop_dissolve_notify::default_instance_ = new ge_troop_dissolve_notify();
  ge_troop_back_request::default_instance_ = new ge_troop_back_request();
  ge_troop_transmission_notify::default_instance_ = new ge_troop_transmission_notify();
  ge_troop_escape_notify::default_instance_ = new ge_troop_escape_notify();
  eg_troop_invite_shadow_notify::default_instance_ = new eg_troop_invite_shadow_notify();
  ge_troop_del_shadow_notify::default_instance_ = new ge_troop_del_shadow_notify();
  ge_troop_friend_notify::default_instance_ = new ge_troop_friend_notify();
  game_scene_reg_info::default_instance_ = new game_scene_reg_info();
  game_scene_reg_ret::default_instance_ = new game_scene_reg_ret();
  ge_game_scene_reg_request::default_instance_ = new ge_game_scene_reg_request();
  eg_game_scene_reg_reply::default_instance_ = new eg_game_scene_reg_reply();
  ge_role_scene_info_notify::default_instance_ = new ge_role_scene_info_notify();
  ge_game_scene_unload_notify::default_instance_ = new ge_game_scene_unload_notify();
  dungeon_create_data::default_instance_ = new dungeon_create_data();
  ge_open_dungeon_request::default_instance_ = new ge_open_dungeon_request();
  eg_create_dugeon_request::default_instance_ = new eg_create_dugeon_request();
  ge_create_dugeon_reply::default_instance_ = new ge_create_dugeon_reply();
  eg_open_dungeon_reply::default_instance_ = new eg_open_dungeon_reply();
  ge_scene_state_notify::default_instance_ = new ge_scene_state_notify();
  ge_goods_buy_request::default_instance_ = new ge_goods_buy_request();
  eg_goods_buy_reply::default_instance_ = new eg_goods_buy_reply();
  ge_goods_sell_request::default_instance_ = new ge_goods_sell_request();
  eg_goods_sell_reply::default_instance_ = new eg_goods_sell_reply();
  ge_goods_return_request::default_instance_ = new ge_goods_return_request();
  eg_goods_return_reply::default_instance_ = new eg_goods_return_reply();
  ge_goods_resell_request::default_instance_ = new ge_goods_resell_request();
  eg_goods_resell_reply::default_instance_ = new eg_goods_resell_reply();
  ge_goods_profit_request::default_instance_ = new ge_goods_profit_request();
  eg_goods_profit_reply::default_instance_ = new eg_goods_profit_reply();
  ge_expedition_fight_data_request::default_instance_ = new ge_expedition_fight_data_request();
  eg_expedition_fight_data_reply::default_instance_ = new eg_expedition_fight_data_reply();
  ge_expedition_refresh_request::default_instance_ = new ge_expedition_refresh_request();
  eg_expedition_refresh_reply::default_instance_ = new eg_expedition_refresh_reply();
  ge_expedition_refresh_stage_request::default_instance_ = new ge_expedition_refresh_stage_request();
  eg_expedition_refresh_stage_reply::default_instance_ = new eg_expedition_refresh_stage_reply();
  ge_expedition_help_request::default_instance_ = new ge_expedition_help_request();
  eg_expedition_help_reply::default_instance_ = new eg_expedition_help_reply();
  global_data_day_update_time::default_instance_ = new global_data_day_update_time();
  global_data_family_war::default_instance_ = new global_data_family_war();
  global_data_country_data::default_instance_ = new global_data_country_data();
  global_data_king_war_data::default_instance_ = new global_data_king_war_data();
  eg_offline_data_notify::default_instance_ = new eg_offline_data_notify();
  ge_offline_data_notify::default_instance_ = new ge_offline_data_notify();
  eg_notify_progress_state_notify::default_instance_ = new eg_notify_progress_state_notify();
  hg_notify_progress_state_notify::default_instance_ = new hg_notify_progress_state_notify();
  ge_tower_trigger_notify::default_instance_ = new ge_tower_trigger_notify();
  eg_tower_trigger_notify::default_instance_ = new eg_tower_trigger_notify();
  eg_two_side_friend_notify::default_instance_ = new eg_two_side_friend_notify();
  ge_check_sys_notice_request::default_instance_ = new ge_check_sys_notice_request();
  eg_check_sys_notice_reply::default_instance_ = new eg_check_sys_notice_reply();
  eg_syn_sys_notice_notify::default_instance_ = new eg_syn_sys_notice_notify();
  ge_gm_clear_notice_request::default_instance_ = new ge_gm_clear_notice_request();
  eg_gm_clear_notice_notify::default_instance_ = new eg_gm_clear_notice_notify();
  ge_role_simple_data_notify::default_instance_ = new ge_role_simple_data_notify();
  eg_offline_arena_join_notify::default_instance_ = new eg_offline_arena_join_notify();
  ge_offline_arena_form_notify::default_instance_ = new ge_offline_arena_form_notify();
  eg_offline_arena_fight_request::default_instance_ = new eg_offline_arena_fight_request();
  ge_offline_arena_fight_reply::default_instance_ = new ge_offline_arena_fight_reply();
  eg_offline_arena_record_award_notify::default_instance_ = new eg_offline_arena_record_award_notify();
  eg_offline_arena_score_award_notify::default_instance_ = new eg_offline_arena_score_award_notify();
  eg_offline_arena_sweep_award_notify::default_instance_ = new eg_offline_arena_sweep_award_notify();
  eg_offline_arena_class_award_notify::default_instance_ = new eg_offline_arena_class_award_notify();
  ge_offline_arena_buy_request::default_instance_ = new ge_offline_arena_buy_request();
  eg_offline_arena_buy_reply::default_instance_ = new eg_offline_arena_buy_reply();
  ge_offline_arena_gmrank_notify::default_instance_ = new ge_offline_arena_gmrank_notify();
  hr_get_hero_strategy_info_request::default_instance_ = new hr_get_hero_strategy_info_request();
  rh_get_hero_strategy_info_reply::default_instance_ = new rh_get_hero_strategy_info_reply();
  ge_troop_sync_task_request::default_instance_ = new ge_troop_sync_task_request();
  eg_buy_wish_summon_request::default_instance_ = new eg_buy_wish_summon_request();
  ge_buy_wish_summon_reply::default_instance_ = new ge_buy_wish_summon_reply();
  eg_king_open_wish_summon_request::default_instance_ = new eg_king_open_wish_summon_request();
  ge_king_open_wish_summon_reply::default_instance_ = new ge_king_open_wish_summon_reply();
  ge_modify_family_money_request::default_instance_ = new ge_modify_family_money_request();
  ge_modify_country_money_request::default_instance_ = new ge_modify_country_money_request();
  ge_get_wish_summon_info_reply::default_instance_ = new ge_get_wish_summon_info_reply();
  ge_destine_item_request::default_instance_ = new ge_destine_item_request();
  eg_destine_item_reply::default_instance_ = new eg_destine_item_reply();
  ge_undestine_item_request::default_instance_ = new ge_undestine_item_request();
  ge_push_general_event_request::default_instance_ = new ge_push_general_event_request();
  eg_sync_general_event_count_info::default_instance_ = new eg_sync_general_event_count_info();
  eg_sync_general_event_data::default_instance_ = new eg_sync_general_event_data();
  eg_sync_general_event_open::default_instance_ = new eg_sync_general_event_open();
  eg_sync_general_event_done::default_instance_ = new eg_sync_general_event_done();
  eg_sync_server_level::default_instance_ = new eg_sync_server_level();
  me_transport_ntf::default_instance_ = new me_transport_ntf();
  eg_gm_transport_ntf::default_instance_ = new eg_gm_transport_ntf();
  ea_send_gm_msg_to_account_request::default_instance_ = new ea_send_gm_msg_to_account_request();
  ae_send_gm_msg_to_account_reply::default_instance_ = new ae_send_gm_msg_to_account_reply();
  al_send_gm_msg_to_account_requst::default_instance_ = new al_send_gm_msg_to_account_requst();
  la_send_gm_msg_to_account_reply::default_instance_ = new la_send_gm_msg_to_account_reply();
  ln_send_gm_msg_to_account_request::default_instance_ = new ln_send_gm_msg_to_account_request();
  nl_send_gm_msg_to_account_reply::default_instance_ = new nl_send_gm_msg_to_account_reply();
  me_manage_role_ntf::default_instance_ = new me_manage_role_ntf();
  em_manage_role_ntf::default_instance_ = new em_manage_role_ntf();
  eh_silence_role_notify::default_instance_ = new eh_silence_role_notify();
  nl_syn_account_info_notify::default_instance_ = new nl_syn_account_info_notify();
  nd_syn_account_info_notify::default_instance_ = new nd_syn_account_info_notify();
  gd_change_name_request::default_instance_ = new gd_change_name_request();
  dg_change_name_reply::default_instance_ = new dg_change_name_reply();
  de_change_name_notify::default_instance_ = new de_change_name_notify();
  eh_change_name_notify::default_instance_ = new eh_change_name_notify();
  me_reload_config_notify::default_instance_ = new me_reload_config_notify();
  eg_reload_config_notify::default_instance_ = new eg_reload_config_notify();
  ge_change_friendliness_request::default_instance_ = new ge_change_friendliness_request();
  eg_change_friendliness_notify::default_instance_ = new eg_change_friendliness_notify();
  ge_get_friendliness_request::default_instance_ = new ge_get_friendliness_request();
  player_friendliness::default_instance_ = new player_friendliness();
  eg_get_friendliness_reply::default_instance_ = new eg_get_friendliness_reply();
  eg_friend_point_operation_request::default_instance_ = new eg_friend_point_operation_request();
  ge_friend_point_operation_reply::default_instance_ = new ge_friend_point_operation_reply();
  sv_cross_area_video_notify::default_instance_ = new sv_cross_area_video_notify();
  gv_tower_video_notify::default_instance_ = new gv_tower_video_notify();
  data_sync_item::default_instance_->InitAsDefaultInstance();
  server_pingpong_request::default_instance_->InitAsDefaultInstance();
  la_login_request::default_instance_->InitAsDefaultInstance();
  al_login_reply::default_instance_->InitAsDefaultInstance();
  gr_role_leave_game_notify::default_instance_->InitAsDefaultInstance();
  ag_role_enter_game_notify::default_instance_->InitAsDefaultInstance();
  ga_role_move_notify::default_instance_->InitAsDefaultInstance();
  ga_role_into_vision_notify::default_instance_->InitAsDefaultInstance();
  ga_role_out_vision_notify::default_instance_->InitAsDefaultInstance();
  ga_broadcast_notify::default_instance_->InitAsDefaultInstance();
  ea_broadcast_notify::default_instance_->InitAsDefaultInstance();
  al_kick_role_notify::default_instance_->InitAsDefaultInstance();
  al_kick_gate_all_user_notify::default_instance_->InitAsDefaultInstance();
  gh_kick_role_notify::default_instance_->InitAsDefaultInstance();
  gd_batch_save_to_db_notify::default_instance_->InitAsDefaultInstance();
  save_to_db::default_instance_->InitAsDefaultInstance();
  gd_role_data_request::default_instance_->InitAsDefaultInstance();
  dg_role_data_reply::default_instance_->InitAsDefaultInstance();
  al_update_gate_user_num_notify::default_instance_->InitAsDefaultInstance();
  de_user_data_reply::default_instance_->InitAsDefaultInstance();
  de_user_center_data_reply::default_instance_->InitAsDefaultInstance();
  ed_sync_role_data_request::default_instance_->InitAsDefaultInstance();
  ag_save_user_notify::default_instance_->InitAsDefaultInstance();
  ln_syn_login_info_notify::default_instance_->InitAsDefaultInstance();
  ln_close_server_notify::default_instance_->InitAsDefaultInstance();
  ln_user_num_notify::default_instance_->InitAsDefaultInstance();
  ag_syn_gate_info_notify::default_instance_->InitAsDefaultInstance();
  gh_syn_online_role_notify::default_instance_->InitAsDefaultInstance();
  hg_test_notify::default_instance_->InitAsDefaultInstance();
  ah_syn_gate_info_notify::default_instance_->InitAsDefaultInstance();
  ha_test_reply::default_instance_->InitAsDefaultInstance();
  gh_syn_game_info_notify::default_instance_->InitAsDefaultInstance();
  hg_chat_get_role_info_request::default_instance_->InitAsDefaultInstance();
  gh_chat_get_role_info_reply::default_instance_->InitAsDefaultInstance();
  hg_get_nearby_roles_request::default_instance_->InitAsDefaultInstance();
  gh_get_nearby_roles_reply::default_instance_->InitAsDefaultInstance();
  hg_task_seek_help_request::default_instance_->InitAsDefaultInstance();
  gh_task_seek_help_reply::default_instance_->InitAsDefaultInstance();
  hf_syn_chat_info_notify::default_instance_->InitAsDefaultInstance();
  fh_syn_transfer_info_notify::default_instance_->InitAsDefaultInstance();
  gh_gm_cmd_notify::default_instance_->InitAsDefaultInstance();
  hf_gm_cmd_notify::default_instance_->InitAsDefaultInstance();
  fh_test_reply::default_instance_->InitAsDefaultInstance();
  hg_syn_online_role_list_request::default_instance_->InitAsDefaultInstance();
  gh_syn_online_role_list_notify::default_instance_->InitAsDefaultInstance();
  eh_country_member_change_notify::default_instance_->InitAsDefaultInstance();
  eh_family_member_change_notify::default_instance_->InitAsDefaultInstance();
  hf_get_server_channel_list_request::default_instance_->InitAsDefaultInstance();
  fh_get_server_channel_list_reply::default_instance_->InitAsDefaultInstance();
  hf_change_server_channel_request::default_instance_->InitAsDefaultInstance();
  fh_change_server_channel_reply::default_instance_->InitAsDefaultInstance();
  fh_change_server_channel_notify::default_instance_->InitAsDefaultInstance();
  ha_change_server_channel_notify::default_instance_->InitAsDefaultInstance();
  hf_server_channel_chat_request::default_instance_->InitAsDefaultInstance();
  fh_server_channel_chat_reply::default_instance_->InitAsDefaultInstance();
  fh_server_channel_chat_notify::default_instance_->InitAsDefaultInstance();
  ha_server_channel_chat_notify::default_instance_->InitAsDefaultInstance();
  hf_personal_chat_request::default_instance_->InitAsDefaultInstance();
  fh_personal_chat_notify::default_instance_->InitAsDefaultInstance();
  ha_personal_chat_notify::default_instance_->InitAsDefaultInstance();
  he_family_chat_notify::default_instance_->InitAsDefaultInstance();
  he_personal_chat_notify::default_instance_->InitAsDefaultInstance();
  eh_kick_all_user_notify::default_instance_->InitAsDefaultInstance();
  dn_create_role_request::default_instance_->InitAsDefaultInstance();
  nd_create_role_reply::default_instance_->InitAsDefaultInstance();
  dn_role_data_update_notify::default_instance_->InitAsDefaultInstance();
  hg_user_channel_notify::default_instance_->InitAsDefaultInstance();
  ge_syn_game_info_notify::default_instance_->InitAsDefaultInstance();
  gd_syn_game_info_notify::default_instance_->InitAsDefaultInstance();
  al_syn_gate_info_notify::default_instance_->InitAsDefaultInstance();
  ga_syn_game_info_notify::default_instance_->InitAsDefaultInstance();
  ga_syn_cross_id_notify::default_instance_->InitAsDefaultInstance();
  ae_syn_gate_info_notify::default_instance_->InitAsDefaultInstance();
  cross_server_data::default_instance_->InitAsDefaultInstance();
  ae_reg_user_center_request::default_instance_->InitAsDefaultInstance();
  ae_unreg_user_scene_notify::default_instance_->InitAsDefaultInstance();
  ea_unreg_user_center_notify::default_instance_->InitAsDefaultInstance();
  ae_create_role_request::default_instance_->InitAsDefaultInstance();
  ea_create_role_reply::default_instance_->InitAsDefaultInstance();
  ae_user_cross_server_notify::default_instance_->InitAsDefaultInstance();
  ea_kick_all_user_notify::default_instance_->InitAsDefaultInstance();
  global_user_data::default_instance_->InitAsDefaultInstance();
  eg_unreg_user_scene_notify::default_instance_->InitAsDefaultInstance();
  ge_unreg_user_scene_notify::default_instance_->InitAsDefaultInstance();
  eg_reg_user_scene_request::default_instance_->InitAsDefaultInstance();
  ge_reg_user_scene_reply::default_instance_->InitAsDefaultInstance();
  eg_relogin_scene_request::default_instance_->InitAsDefaultInstance();
  ge_user_cross_scene_request::default_instance_->InitAsDefaultInstance();
  eg_user_cross_scene_reply::default_instance_->InitAsDefaultInstance();
  eg_kick_all_user_notify::default_instance_->InitAsDefaultInstance();
  ed_create_role_request::default_instance_->InitAsDefaultInstance();
  de_create_role_reply::default_instance_->InitAsDefaultInstance();
  ed_query_role_data_request::default_instance_->InitAsDefaultInstance();
  de_query_role_data_reply::default_instance_->InitAsDefaultInstance();
  ed_role_leave_game_notify::default_instance_->InitAsDefaultInstance();
  ag_unreg_user_scene_notify::default_instance_->InitAsDefaultInstance();
  ga_unreg_user_scene_notify::default_instance_->InitAsDefaultInstance();
  ga_reg_user_success_notify::default_instance_->InitAsDefaultInstance();
  ga_user_cross_server_notify::default_instance_->InitAsDefaultInstance();
  ge_city_trade_add_prosperity_value_notify::default_instance_->InitAsDefaultInstance();
  eg_city_base_info_notify::default_instance_->InitAsDefaultInstance();
  ge_get_city_list_request::default_instance_->InitAsDefaultInstance();
  eg_get_city_list_reply::default_instance_->InitAsDefaultInstance();
  eh_test_request::default_instance_->InitAsDefaultInstance();
  he_test_reply::default_instance_->InitAsDefaultInstance();
  ge_update_rank_notify::default_instance_->InitAsDefaultInstance();
  ge_create_family_request::default_instance_->InitAsDefaultInstance();
  eg_update_family_info_notify::default_instance_->InitAsDefaultInstance();
  eg_create_family_reply::default_instance_->InitAsDefaultInstance();
  ge_impeach_family_general_request::default_instance_->InitAsDefaultInstance();
  eg_impeach_family_general_reply::default_instance_->InitAsDefaultInstance();
  eg_notify_game_impeach_result::default_instance_->InitAsDefaultInstance();
  family_war_dungeon_info::default_instance_->InitAsDefaultInstance();
  family_war_dungeon_data::default_instance_->InitAsDefaultInstance();
  family_war_dungeon_back::default_instance_->InitAsDefaultInstance();
  eg_prepare_family_war_request::default_instance_->InitAsDefaultInstance();
  ge_prepare_family_war_reply::default_instance_->InitAsDefaultInstance();
  eg_family_war_start_notify::default_instance_->InitAsDefaultInstance();
  eg_family_war_end_notify::default_instance_->InitAsDefaultInstance();
  eg_enter_family_war_scene_request::default_instance_->InitAsDefaultInstance();
  family_war_personal::default_instance_->InitAsDefaultInstance();
  family_war_result_data::default_instance_->InitAsDefaultInstance();
  ge_family_war_early_result_notify::default_instance_->InitAsDefaultInstance();
  ge_family_war_result_notify::default_instance_->InitAsDefaultInstance();
  ge_family_update_glory_notify::default_instance_->InitAsDefaultInstance();
  ge_family_prayer_request::default_instance_->InitAsDefaultInstance();
  ge_family_prayer_gift_request::default_instance_->InitAsDefaultInstance();
  eg_family_prayer_gift_failed_notify::default_instance_->InitAsDefaultInstance();
  eg_family_country_change_notify::default_instance_->InitAsDefaultInstance();
  eg_family_level_change_notify::default_instance_->InitAsDefaultInstance();
  ge_family_shop_buy_request::default_instance_->InitAsDefaultInstance();
  eg_family_shop_buy_reply::default_instance_->InitAsDefaultInstance();
  ge_family_shop_back_notify::default_instance_->InitAsDefaultInstance();
  ge_gm_set_king_family_notify::default_instance_->InitAsDefaultInstance();
  eg_update_country_notify::default_instance_->InitAsDefaultInstance();
  eg_country_name_change_request::default_instance_->InitAsDefaultInstance();
  ge_country_name_change_reply::default_instance_->InitAsDefaultInstance();
  eg_country_year_name_request::default_instance_->InitAsDefaultInstance();
  ge_country_year_name_reply::default_instance_->InitAsDefaultInstance();
  eg_sync_data_request::default_instance_->InitAsDefaultInstance();
  ge_sync_data_request::default_instance_->InitAsDefaultInstance();
  ge_ready_enter_scene_notify::default_instance_->InitAsDefaultInstance();
  eg_summon_field_boss_request::default_instance_->InitAsDefaultInstance();
  eg_field_boss_die_notify::default_instance_->InitAsDefaultInstance();
  ge_summon_field_boss_replay::default_instance_->InitAsDefaultInstance();
  eg_clear_all_boss_notify::default_instance_->InitAsDefaultInstance();
  ge_field_boss_killed_notify::default_instance_->InitAsDefaultInstance();
  field_boss_rank::default_instance_->InitAsDefaultInstance();
  ge_field_boss_rank_notify::default_instance_->InitAsDefaultInstance();
  ge_check_drop_items_request::default_instance_->InitAsDefaultInstance();
  eg_check_drop_items_reply::default_instance_->InitAsDefaultInstance();
  eg_syn_item_limit_notify::default_instance_->InitAsDefaultInstance();
  ge_redbag_send_notify::default_instance_->InitAsDefaultInstance();
  eg_redbag_draw_notify::default_instance_->InitAsDefaultInstance();
  gall_reload_config_notify::default_instance_->InitAsDefaultInstance();
  eg_chat_get_role_info_request::default_instance_->InitAsDefaultInstance();
  ge_chat_get_role_info_reply::default_instance_->InitAsDefaultInstance();
  fr_syn_transfer_info_request::default_instance_->InitAsDefaultInstance();
  fr_test_request::default_instance_->InitAsDefaultInstance();
  rf_test_reply::default_instance_->InitAsDefaultInstance();
  mail_get_addenda::default_instance_->InitAsDefaultInstance();
  eg_mail_get_addenda_request::default_instance_->InitAsDefaultInstance();
  mail_get_addenda_back::default_instance_->InitAsDefaultInstance();
  ge_mail_get_addenda_reply::default_instance_->InitAsDefaultInstance();
  ge_mail_new_notify::default_instance_->InitAsDefaultInstance();
  sr_syn_cross_info_notify::default_instance_->InitAsDefaultInstance();
  rs_syn_area_info_notify::default_instance_->InitAsDefaultInstance();
  rs_cross_fight_test_notify::default_instance_->InitAsDefaultInstance();
  gr_cross_fight_test_notify::default_instance_->InitAsDefaultInstance();
  ef_syn_center_info_notify::default_instance_->InitAsDefaultInstance();
  ef_test_request::default_instance_->InitAsDefaultInstance();
  fe_syn_transfer_info_notify::default_instance_->InitAsDefaultInstance();
  fe_test_reply::default_instance_->InitAsDefaultInstance();
  rs_arena_battle_notify::default_instance_->InitAsDefaultInstance();
  rs_arena_battle_ai_notify::default_instance_->InitAsDefaultInstance();
  sr_arena_battle_result_notify::default_instance_->InitAsDefaultInstance();
  gr_arena_match_request::default_instance_->InitAsDefaultInstance();
  rg_arena_match_reply::default_instance_->InitAsDefaultInstance();
  gr_arena_cancel_match_request::default_instance_->InitAsDefaultInstance();
  rg_arena_cancel_match_reply::default_instance_->InitAsDefaultInstance();
  rg_arena_battle_result_notify::default_instance_->InitAsDefaultInstance();
  gr_get_arena_rank_data_request::default_instance_->InitAsDefaultInstance();
  rg_get_arena_rank_data_reply::default_instance_->InitAsDefaultInstance();
  gr_arena_self_rank_request::default_instance_->InitAsDefaultInstance();
  rg_arena_self_rank_reply::default_instance_->InitAsDefaultInstance();
  ge_arena_fight_data_notify::default_instance_->InitAsDefaultInstance();
  ge_role_online_notify::default_instance_->InitAsDefaultInstance();
  ge_challenge_request::default_instance_->InitAsDefaultInstance();
  eg_challenge_reply::default_instance_->InitAsDefaultInstance();
  ge_challenge_process_request::default_instance_->InitAsDefaultInstance();
  eg_challenge_process_reply::default_instance_->InitAsDefaultInstance();
  eg_challenge_fight_request::default_instance_->InitAsDefaultInstance();
  ge_challenge_fight_reply::default_instance_->InitAsDefaultInstance();
  ge_pk_beat_criminal_notify::default_instance_->InitAsDefaultInstance();
  eg_challenge_transfer_notify::default_instance_->InitAsDefaultInstance();
  eg_king_war_state_notify::default_instance_->InitAsDefaultInstance();
  eg_king_war_time_end_notify::default_instance_->InitAsDefaultInstance();
  king_war_personal::default_instance_->InitAsDefaultInstance();
  ge_king_war_result_notify::default_instance_->InitAsDefaultInstance();
  ge_king_war_scene_user_num_notify::default_instance_->InitAsDefaultInstance();
  eg_check_user_buy_goods_request::default_instance_->InitAsDefaultInstance();
  ge_check_user_buy_goods_reply::default_instance_->InitAsDefaultInstance();
  eg_give_user_goods_notify::default_instance_->InitAsDefaultInstance();
  er_world_cup_data_request::default_instance_->InitAsDefaultInstance();
  re_world_cup_data_reply::default_instance_->InitAsDefaultInstance();
  re_world_cup_battle_notify::default_instance_->InitAsDefaultInstance();
  re_world_cup_mail_notify::default_instance_->InitAsDefaultInstance();
  re_world_cup_coming_quarter_notify::default_instance_->InitAsDefaultInstance();
  re_world_cup_coming_soon_notify::default_instance_->InitAsDefaultInstance();
  re_world_cup_ready_notify::default_instance_->InitAsDefaultInstance();
  gr_world_cup_play_request::default_instance_->InitAsDefaultInstance();
  rg_world_cup_play_reply::default_instance_->InitAsDefaultInstance();
  re_world_cup_update_notify::default_instance_->InitAsDefaultInstance();
  er_world_cup_bet_data_request::default_instance_->InitAsDefaultInstance();
  re_world_cup_bet_data_reply::default_instance_->InitAsDefaultInstance();
  gr_world_cup_bet_request::default_instance_->InitAsDefaultInstance();
  rg_world_cup_bet_reply::default_instance_->InitAsDefaultInstance();
  gr_world_cup_bet_reward_request::default_instance_->InitAsDefaultInstance();
  rg_world_cup_bet_reward_reply::default_instance_->InitAsDefaultInstance();
  er_world_cup_odds_request::default_instance_->InitAsDefaultInstance();
  re_world_cup_odds_reply::default_instance_->InitAsDefaultInstance();
  eg_red_point_notify::default_instance_->InitAsDefaultInstance();
  troop_shadow_base::default_instance_->InitAsDefaultInstance();
  troop_extra_info::default_instance_->InitAsDefaultInstance();
  troop_server_data::default_instance_->InitAsDefaultInstance();
  eg_troop_event_notify::default_instance_->InitAsDefaultInstance();
  ge_troop_create_request::default_instance_->InitAsDefaultInstance();
  ge_troop_auto_match_request::default_instance_->InitAsDefaultInstance();
  ge_troop_join_request::default_instance_->InitAsDefaultInstance();
  eg_troop_agree_apply_request::default_instance_->InitAsDefaultInstance();
  ge_troop_agree_apply_reply::default_instance_->InitAsDefaultInstance();
  ge_troop_process_invite_request::default_instance_->InitAsDefaultInstance();
  ge_troop_dissolve_notify::default_instance_->InitAsDefaultInstance();
  ge_troop_back_request::default_instance_->InitAsDefaultInstance();
  ge_troop_transmission_notify::default_instance_->InitAsDefaultInstance();
  ge_troop_escape_notify::default_instance_->InitAsDefaultInstance();
  eg_troop_invite_shadow_notify::default_instance_->InitAsDefaultInstance();
  ge_troop_del_shadow_notify::default_instance_->InitAsDefaultInstance();
  ge_troop_friend_notify::default_instance_->InitAsDefaultInstance();
  game_scene_reg_info::default_instance_->InitAsDefaultInstance();
  game_scene_reg_ret::default_instance_->InitAsDefaultInstance();
  ge_game_scene_reg_request::default_instance_->InitAsDefaultInstance();
  eg_game_scene_reg_reply::default_instance_->InitAsDefaultInstance();
  ge_role_scene_info_notify::default_instance_->InitAsDefaultInstance();
  ge_game_scene_unload_notify::default_instance_->InitAsDefaultInstance();
  dungeon_create_data::default_instance_->InitAsDefaultInstance();
  ge_open_dungeon_request::default_instance_->InitAsDefaultInstance();
  eg_create_dugeon_request::default_instance_->InitAsDefaultInstance();
  ge_create_dugeon_reply::default_instance_->InitAsDefaultInstance();
  eg_open_dungeon_reply::default_instance_->InitAsDefaultInstance();
  ge_scene_state_notify::default_instance_->InitAsDefaultInstance();
  ge_goods_buy_request::default_instance_->InitAsDefaultInstance();
  eg_goods_buy_reply::default_instance_->InitAsDefaultInstance();
  ge_goods_sell_request::default_instance_->InitAsDefaultInstance();
  eg_goods_sell_reply::default_instance_->InitAsDefaultInstance();
  ge_goods_return_request::default_instance_->InitAsDefaultInstance();
  eg_goods_return_reply::default_instance_->InitAsDefaultInstance();
  ge_goods_resell_request::default_instance_->InitAsDefaultInstance();
  eg_goods_resell_reply::default_instance_->InitAsDefaultInstance();
  ge_goods_profit_request::default_instance_->InitAsDefaultInstance();
  eg_goods_profit_reply::default_instance_->InitAsDefaultInstance();
  ge_expedition_fight_data_request::default_instance_->InitAsDefaultInstance();
  eg_expedition_fight_data_reply::default_instance_->InitAsDefaultInstance();
  ge_expedition_refresh_request::default_instance_->InitAsDefaultInstance();
  eg_expedition_refresh_reply::default_instance_->InitAsDefaultInstance();
  ge_expedition_refresh_stage_request::default_instance_->InitAsDefaultInstance();
  eg_expedition_refresh_stage_reply::default_instance_->InitAsDefaultInstance();
  ge_expedition_help_request::default_instance_->InitAsDefaultInstance();
  eg_expedition_help_reply::default_instance_->InitAsDefaultInstance();
  global_data_day_update_time::default_instance_->InitAsDefaultInstance();
  global_data_family_war::default_instance_->InitAsDefaultInstance();
  global_data_country_data::default_instance_->InitAsDefaultInstance();
  global_data_king_war_data::default_instance_->InitAsDefaultInstance();
  eg_offline_data_notify::default_instance_->InitAsDefaultInstance();
  ge_offline_data_notify::default_instance_->InitAsDefaultInstance();
  eg_notify_progress_state_notify::default_instance_->InitAsDefaultInstance();
  hg_notify_progress_state_notify::default_instance_->InitAsDefaultInstance();
  ge_tower_trigger_notify::default_instance_->InitAsDefaultInstance();
  eg_tower_trigger_notify::default_instance_->InitAsDefaultInstance();
  eg_two_side_friend_notify::default_instance_->InitAsDefaultInstance();
  ge_check_sys_notice_request::default_instance_->InitAsDefaultInstance();
  eg_check_sys_notice_reply::default_instance_->InitAsDefaultInstance();
  eg_syn_sys_notice_notify::default_instance_->InitAsDefaultInstance();
  ge_gm_clear_notice_request::default_instance_->InitAsDefaultInstance();
  eg_gm_clear_notice_notify::default_instance_->InitAsDefaultInstance();
  ge_role_simple_data_notify::default_instance_->InitAsDefaultInstance();
  eg_offline_arena_join_notify::default_instance_->InitAsDefaultInstance();
  ge_offline_arena_form_notify::default_instance_->InitAsDefaultInstance();
  eg_offline_arena_fight_request::default_instance_->InitAsDefaultInstance();
  ge_offline_arena_fight_reply::default_instance_->InitAsDefaultInstance();
  eg_offline_arena_record_award_notify::default_instance_->InitAsDefaultInstance();
  eg_offline_arena_score_award_notify::default_instance_->InitAsDefaultInstance();
  eg_offline_arena_sweep_award_notify::default_instance_->InitAsDefaultInstance();
  eg_offline_arena_class_award_notify::default_instance_->InitAsDefaultInstance();
  ge_offline_arena_buy_request::default_instance_->InitAsDefaultInstance();
  eg_offline_arena_buy_reply::default_instance_->InitAsDefaultInstance();
  ge_offline_arena_gmrank_notify::default_instance_->InitAsDefaultInstance();
  hr_get_hero_strategy_info_request::default_instance_->InitAsDefaultInstance();
  rh_get_hero_strategy_info_reply::default_instance_->InitAsDefaultInstance();
  ge_troop_sync_task_request::default_instance_->InitAsDefaultInstance();
  eg_buy_wish_summon_request::default_instance_->InitAsDefaultInstance();
  ge_buy_wish_summon_reply::default_instance_->InitAsDefaultInstance();
  eg_king_open_wish_summon_request::default_instance_->InitAsDefaultInstance();
  ge_king_open_wish_summon_reply::default_instance_->InitAsDefaultInstance();
  ge_modify_family_money_request::default_instance_->InitAsDefaultInstance();
  ge_modify_country_money_request::default_instance_->InitAsDefaultInstance();
  ge_get_wish_summon_info_reply::default_instance_->InitAsDefaultInstance();
  ge_destine_item_request::default_instance_->InitAsDefaultInstance();
  eg_destine_item_reply::default_instance_->InitAsDefaultInstance();
  ge_undestine_item_request::default_instance_->InitAsDefaultInstance();
  ge_push_general_event_request::default_instance_->InitAsDefaultInstance();
  eg_sync_general_event_count_info::default_instance_->InitAsDefaultInstance();
  eg_sync_general_event_data::default_instance_->InitAsDefaultInstance();
  eg_sync_general_event_open::default_instance_->InitAsDefaultInstance();
  eg_sync_general_event_done::default_instance_->InitAsDefaultInstance();
  eg_sync_server_level::default_instance_->InitAsDefaultInstance();
  me_transport_ntf::default_instance_->InitAsDefaultInstance();
  eg_gm_transport_ntf::default_instance_->InitAsDefaultInstance();
  ea_send_gm_msg_to_account_request::default_instance_->InitAsDefaultInstance();
  ae_send_gm_msg_to_account_reply::default_instance_->InitAsDefaultInstance();
  al_send_gm_msg_to_account_requst::default_instance_->InitAsDefaultInstance();
  la_send_gm_msg_to_account_reply::default_instance_->InitAsDefaultInstance();
  ln_send_gm_msg_to_account_request::default_instance_->InitAsDefaultInstance();
  nl_send_gm_msg_to_account_reply::default_instance_->InitAsDefaultInstance();
  me_manage_role_ntf::default_instance_->InitAsDefaultInstance();
  em_manage_role_ntf::default_instance_->InitAsDefaultInstance();
  eh_silence_role_notify::default_instance_->InitAsDefaultInstance();
  nl_syn_account_info_notify::default_instance_->InitAsDefaultInstance();
  nd_syn_account_info_notify::default_instance_->InitAsDefaultInstance();
  gd_change_name_request::default_instance_->InitAsDefaultInstance();
  dg_change_name_reply::default_instance_->InitAsDefaultInstance();
  de_change_name_notify::default_instance_->InitAsDefaultInstance();
  eh_change_name_notify::default_instance_->InitAsDefaultInstance();
  me_reload_config_notify::default_instance_->InitAsDefaultInstance();
  eg_reload_config_notify::default_instance_->InitAsDefaultInstance();
  ge_change_friendliness_request::default_instance_->InitAsDefaultInstance();
  eg_change_friendliness_notify::default_instance_->InitAsDefaultInstance();
  ge_get_friendliness_request::default_instance_->InitAsDefaultInstance();
  player_friendliness::default_instance_->InitAsDefaultInstance();
  eg_get_friendliness_reply::default_instance_->InitAsDefaultInstance();
  eg_friend_point_operation_request::default_instance_->InitAsDefaultInstance();
  ge_friend_point_operation_reply::default_instance_->InitAsDefaultInstance();
  sv_cross_area_video_notify::default_instance_->InitAsDefaultInstance();
  gv_tower_video_notify::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_server_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_server_2eproto {
  StaticDescriptorInitializer_server_2eproto() {
    protobuf_AddDesc_server_2eproto();
  }
} static_descriptor_initializer_server_2eproto_;
const ::google::protobuf::EnumDescriptor* data_sync_type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return data_sync_type_descriptor_;
}
bool data_sync_type_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 8:
    case 9:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 10000:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* scene_change_type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return scene_change_type_descriptor_;
}
bool scene_change_type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* family_money_change_type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return family_money_change_type_descriptor_;
}
bool family_money_change_type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* country_money_change_type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return country_money_change_type_descriptor_;
}
bool country_money_change_type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EM_FIELD_MODE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EM_FIELD_MODE_descriptor_;
}
bool EM_FIELD_MODE_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* em_map_type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return em_map_type_descriptor_;
}
bool em_map_type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* dungeon_create_type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return dungeon_create_type_descriptor_;
}
bool dungeon_create_type_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* em_scene_type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return em_scene_type_descriptor_;
}
bool em_scene_type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* global_data_type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return global_data_type_descriptor_;
}
bool global_data_type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* friend_point_operation_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return friend_point_operation_descriptor_;
}
bool friend_point_operation_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int data_sync_item::kTypeFieldNumber;
const int data_sync_item::kValueFieldNumber;
#endif  // !_MSC_VER

data_sync_item::data_sync_item()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void data_sync_item::InitAsDefaultInstance() {
}

data_sync_item::data_sync_item(const data_sync_item& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void data_sync_item::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

data_sync_item::~data_sync_item() {
  SharedDtor();
}

void data_sync_item::SharedDtor() {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void data_sync_item::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* data_sync_item::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return data_sync_item_descriptor_;
}

const data_sync_item& data_sync_item::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

data_sync_item* data_sync_item::default_instance_ = NULL;

data_sync_item* data_sync_item::New() const {
  return new data_sync_item;
}

void data_sync_item::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 1;
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::kEmptyString) {
        value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool data_sync_item::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.server.data_sync_type type = 1 [default = data_sync_type_begin];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::server::data_sync_type_IsValid(value)) {
            set_type(static_cast< ::proto::server::data_sync_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // optional string value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void data_sync_item::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .proto.server.data_sync_type type = 1 [default = data_sync_type_begin];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* data_sync_item::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .proto.server.data_sync_type type = 1 [default = data_sync_type_begin];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int data_sync_item::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .proto.server.data_sync_type type = 1 [default = data_sync_type_begin];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional string value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void data_sync_item::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const data_sync_item* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const data_sync_item*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void data_sync_item::MergeFrom(const data_sync_item& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void data_sync_item::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void data_sync_item::CopyFrom(const data_sync_item& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool data_sync_item::IsInitialized() const {

  return true;
}

void data_sync_item::Swap(data_sync_item* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata data_sync_item::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = data_sync_item_descriptor_;
  metadata.reflection = data_sync_item_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

server_pingpong_request::server_pingpong_request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void server_pingpong_request::InitAsDefaultInstance() {
}

server_pingpong_request::server_pingpong_request(const server_pingpong_request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void server_pingpong_request::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

server_pingpong_request::~server_pingpong_request() {
  SharedDtor();
}

void server_pingpong_request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void server_pingpong_request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* server_pingpong_request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return server_pingpong_request_descriptor_;
}

const server_pingpong_request& server_pingpong_request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

server_pingpong_request* server_pingpong_request::default_instance_ = NULL;

server_pingpong_request* server_pingpong_request::New() const {
  return new server_pingpong_request;
}

void server_pingpong_request::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool server_pingpong_request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void server_pingpong_request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* server_pingpong_request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int server_pingpong_request::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void server_pingpong_request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const server_pingpong_request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const server_pingpong_request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void server_pingpong_request::MergeFrom(const server_pingpong_request& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void server_pingpong_request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void server_pingpong_request::CopyFrom(const server_pingpong_request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool server_pingpong_request::IsInitialized() const {

  return true;
}

void server_pingpong_request::Swap(server_pingpong_request* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata server_pingpong_request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = server_pingpong_request_descriptor_;
  metadata.reflection = server_pingpong_request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int la_login_request::kGuidFieldNumber;
#endif  // !_MSC_VER

la_login_request::la_login_request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void la_login_request::InitAsDefaultInstance() {
}

la_login_request::la_login_request(const la_login_request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void la_login_request::SharedCtor() {
  _cached_size_ = 0;
  guid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

la_login_request::~la_login_request() {
  SharedDtor();
}

void la_login_request::SharedDtor() {
  if (guid_ != &::google::protobuf::internal::kEmptyString) {
    delete guid_;
  }
  if (this != default_instance_) {
  }
}

void la_login_request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* la_login_request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return la_login_request_descriptor_;
}

const la_login_request& la_login_request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

la_login_request* la_login_request::default_instance_ = NULL;

la_login_request* la_login_request::New() const {
  return new la_login_request;
}

void la_login_request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_guid()) {
      if (guid_ != &::google::protobuf::internal::kEmptyString) {
        guid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool la_login_request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string guid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->guid().data(), this->guid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void la_login_request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string guid = 1;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guid().data(), this->guid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->guid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* la_login_request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string guid = 1;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guid().data(), this->guid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->guid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int la_login_request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string guid = 1;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void la_login_request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const la_login_request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const la_login_request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void la_login_request::MergeFrom(const la_login_request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guid()) {
      set_guid(from.guid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void la_login_request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void la_login_request::CopyFrom(const la_login_request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool la_login_request::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void la_login_request::Swap(la_login_request* other) {
  if (other != this) {
    std::swap(guid_, other->guid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata la_login_request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = la_login_request_descriptor_;
  metadata.reflection = la_login_request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int al_login_reply::kReplyCodeFieldNumber;
const int al_login_reply::kGuidFieldNumber;
const int al_login_reply::kGateIpFieldNumber;
const int al_login_reply::kGatePortFieldNumber;
const int al_login_reply::kSessionIdFieldNumber;
#endif  // !_MSC_VER

al_login_reply::al_login_reply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void al_login_reply::InitAsDefaultInstance() {
}

al_login_reply::al_login_reply(const al_login_reply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void al_login_reply::SharedCtor() {
  _cached_size_ = 0;
  reply_code_ = 0u;
  guid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  gate_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  gate_port_ = 0u;
  session_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

al_login_reply::~al_login_reply() {
  SharedDtor();
}

void al_login_reply::SharedDtor() {
  if (guid_ != &::google::protobuf::internal::kEmptyString) {
    delete guid_;
  }
  if (gate_ip_ != &::google::protobuf::internal::kEmptyString) {
    delete gate_ip_;
  }
  if (session_id_ != &::google::protobuf::internal::kEmptyString) {
    delete session_id_;
  }
  if (this != default_instance_) {
  }
}

void al_login_reply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* al_login_reply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return al_login_reply_descriptor_;
}

const al_login_reply& al_login_reply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

al_login_reply* al_login_reply::default_instance_ = NULL;

al_login_reply* al_login_reply::New() const {
  return new al_login_reply;
}

void al_login_reply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    reply_code_ = 0u;
    if (has_guid()) {
      if (guid_ != &::google::protobuf::internal::kEmptyString) {
        guid_->clear();
      }
    }
    if (has_gate_ip()) {
      if (gate_ip_ != &::google::protobuf::internal::kEmptyString) {
        gate_ip_->clear();
      }
    }
    gate_port_ = 0u;
    if (has_session_id()) {
      if (session_id_ != &::google::protobuf::internal::kEmptyString) {
        session_id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool al_login_reply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 reply_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reply_code_)));
          set_has_reply_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_guid;
        break;
      }

      // optional string guid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_guid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->guid().data(), this->guid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_gate_ip;
        break;
      }

      // optional string gate_ip = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gate_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gate_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->gate_ip().data(), this->gate_ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_gate_port;
        break;
      }

      // optional uint32 gate_port = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gate_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gate_port_)));
          set_has_gate_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_session_id;
        break;
      }

      // optional string session_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_session_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_session_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->session_id().data(), this->session_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void al_login_reply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 reply_code = 1;
  if (has_reply_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->reply_code(), output);
  }

  // optional string guid = 2;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guid().data(), this->guid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->guid(), output);
  }

  // optional string gate_ip = 3;
  if (has_gate_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gate_ip().data(), this->gate_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->gate_ip(), output);
  }

  // optional uint32 gate_port = 4;
  if (has_gate_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->gate_port(), output);
  }

  // optional string session_id = 5;
  if (has_session_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->session_id().data(), this->session_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->session_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* al_login_reply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 reply_code = 1;
  if (has_reply_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->reply_code(), target);
  }

  // optional string guid = 2;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guid().data(), this->guid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->guid(), target);
  }

  // optional string gate_ip = 3;
  if (has_gate_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gate_ip().data(), this->gate_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->gate_ip(), target);
  }

  // optional uint32 gate_port = 4;
  if (has_gate_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->gate_port(), target);
  }

  // optional string session_id = 5;
  if (has_session_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->session_id().data(), this->session_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->session_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int al_login_reply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 reply_code = 1;
    if (has_reply_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reply_code());
    }

    // optional string guid = 2;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guid());
    }

    // optional string gate_ip = 3;
    if (has_gate_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gate_ip());
    }

    // optional uint32 gate_port = 4;
    if (has_gate_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gate_port());
    }

    // optional string session_id = 5;
    if (has_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->session_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void al_login_reply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const al_login_reply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const al_login_reply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void al_login_reply::MergeFrom(const al_login_reply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reply_code()) {
      set_reply_code(from.reply_code());
    }
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_gate_ip()) {
      set_gate_ip(from.gate_ip());
    }
    if (from.has_gate_port()) {
      set_gate_port(from.gate_port());
    }
    if (from.has_session_id()) {
      set_session_id(from.session_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void al_login_reply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void al_login_reply::CopyFrom(const al_login_reply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool al_login_reply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void al_login_reply::Swap(al_login_reply* other) {
  if (other != this) {
    std::swap(reply_code_, other->reply_code_);
    std::swap(guid_, other->guid_);
    std::swap(gate_ip_, other->gate_ip_);
    std::swap(gate_port_, other->gate_port_);
    std::swap(session_id_, other->session_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata al_login_reply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = al_login_reply_descriptor_;
  metadata.reflection = al_login_reply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

gr_role_leave_game_notify::gr_role_leave_game_notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gr_role_leave_game_notify::InitAsDefaultInstance() {
}

gr_role_leave_game_notify::gr_role_leave_game_notify(const gr_role_leave_game_notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gr_role_leave_game_notify::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gr_role_leave_game_notify::~gr_role_leave_game_notify() {
  SharedDtor();
}

void gr_role_leave_game_notify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void gr_role_leave_game_notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gr_role_leave_game_notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gr_role_leave_game_notify_descriptor_;
}

const gr_role_leave_game_notify& gr_role_leave_game_notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

gr_role_leave_game_notify* gr_role_leave_game_notify::default_instance_ = NULL;

gr_role_leave_game_notify* gr_role_leave_game_notify::New() const {
  return new gr_role_leave_game_notify;
}

void gr_role_leave_game_notify::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gr_role_leave_game_notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void gr_role_leave_game_notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gr_role_leave_game_notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gr_role_leave_game_notify::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gr_role_leave_game_notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gr_role_leave_game_notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gr_role_leave_game_notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gr_role_leave_game_notify::MergeFrom(const gr_role_leave_game_notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gr_role_leave_game_notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gr_role_leave_game_notify::CopyFrom(const gr_role_leave_game_notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gr_role_leave_game_notify::IsInitialized() const {

  return true;
}

void gr_role_leave_game_notify::Swap(gr_role_leave_game_notify* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gr_role_leave_game_notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gr_role_leave_game_notify_descriptor_;
  metadata.reflection = gr_role_leave_game_notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

ag_role_enter_game_notify::ag_role_enter_game_notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ag_role_enter_game_notify::InitAsDefaultInstance() {
}

ag_role_enter_game_notify::ag_role_enter_game_notify(const ag_role_enter_game_notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ag_role_enter_game_notify::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ag_role_enter_game_notify::~ag_role_enter_game_notify() {
  SharedDtor();
}

void ag_role_enter_game_notify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ag_role_enter_game_notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ag_role_enter_game_notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ag_role_enter_game_notify_descriptor_;
}

const ag_role_enter_game_notify& ag_role_enter_game_notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

ag_role_enter_game_notify* ag_role_enter_game_notify::default_instance_ = NULL;

ag_role_enter_game_notify* ag_role_enter_game_notify::New() const {
  return new ag_role_enter_game_notify;
}

void ag_role_enter_game_notify::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ag_role_enter_game_notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void ag_role_enter_game_notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ag_role_enter_game_notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ag_role_enter_game_notify::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ag_role_enter_game_notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ag_role_enter_game_notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ag_role_enter_game_notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ag_role_enter_game_notify::MergeFrom(const ag_role_enter_game_notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ag_role_enter_game_notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ag_role_enter_game_notify::CopyFrom(const ag_role_enter_game_notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ag_role_enter_game_notify::IsInitialized() const {

  return true;
}

void ag_role_enter_game_notify::Swap(ag_role_enter_game_notify* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ag_role_enter_game_notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ag_role_enter_game_notify_descriptor_;
  metadata.reflection = ag_role_enter_game_notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ga_role_move_notify::kRoleListFieldNumber;
const int ga_role_move_notify::kMsgFieldNumber;
#endif  // !_MSC_VER

ga_role_move_notify::ga_role_move_notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ga_role_move_notify::InitAsDefaultInstance() {
  msg_ = const_cast< ::proto::client::gc_move_notify*>(&::proto::client::gc_move_notify::default_instance());
}

ga_role_move_notify::ga_role_move_notify(const ga_role_move_notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ga_role_move_notify::SharedCtor() {
  _cached_size_ = 0;
  msg_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ga_role_move_notify::~ga_role_move_notify() {
  SharedDtor();
}

void ga_role_move_notify::SharedDtor() {
  if (this != default_instance_) {
    delete msg_;
  }
}

void ga_role_move_notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ga_role_move_notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ga_role_move_notify_descriptor_;
}

const ga_role_move_notify& ga_role_move_notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

ga_role_move_notify* ga_role_move_notify::default_instance_ = NULL;

ga_role_move_notify* ga_role_move_notify::New() const {
  return new ga_role_move_notify;
}

void ga_role_move_notify::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (has_msg()) {
      if (msg_ != NULL) msg_->::proto::client::gc_move_notify::Clear();
    }
  }
  role_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ga_role_move_notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint64 role_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 8, input, this->mutable_role_list())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_role_list())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_role_list;
        if (input->ExpectTag(18)) goto parse_msg;
        break;
      }

      // required .proto.client.gc_move_notify msg = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ga_role_move_notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint64 role_list = 1;
  for (int i = 0; i < this->role_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      1, this->role_list(i), output);
  }

  // required .proto.client.gc_move_notify msg = 2;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->msg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ga_role_move_notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint64 role_list = 1;
  for (int i = 0; i < this->role_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(1, this->role_list(i), target);
  }

  // required .proto.client.gc_move_notify msg = 2;
  if (has_msg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->msg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ga_role_move_notify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required .proto.client.gc_move_notify msg = 2;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->msg());
    }

  }
  // repeated uint64 role_list = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->role_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->role_list(i));
    }
    total_size += 1 * this->role_list_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ga_role_move_notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ga_role_move_notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ga_role_move_notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ga_role_move_notify::MergeFrom(const ga_role_move_notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  role_list_.MergeFrom(from.role_list_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_msg()) {
      mutable_msg()->::proto::client::gc_move_notify::MergeFrom(from.msg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ga_role_move_notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ga_role_move_notify::CopyFrom(const ga_role_move_notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ga_role_move_notify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  return true;
}

void ga_role_move_notify::Swap(ga_role_move_notify* other) {
  if (other != this) {
    role_list_.Swap(&other->role_list_);
    std::swap(msg_, other->msg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ga_role_move_notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ga_role_move_notify_descriptor_;
  metadata.reflection = ga_role_move_notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ga_role_into_vision_notify::kRoleListFieldNumber;
const int ga_role_into_vision_notify::kMsgFieldNumber;
#endif  // !_MSC_VER

ga_role_into_vision_notify::ga_role_into_vision_notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ga_role_into_vision_notify::InitAsDefaultInstance() {
  msg_ = const_cast< ::proto::client::gc_role_into_vision_notify*>(&::proto::client::gc_role_into_vision_notify::default_instance());
}

ga_role_into_vision_notify::ga_role_into_vision_notify(const ga_role_into_vision_notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ga_role_into_vision_notify::SharedCtor() {
  _cached_size_ = 0;
  msg_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ga_role_into_vision_notify::~ga_role_into_vision_notify() {
  SharedDtor();
}

void ga_role_into_vision_notify::SharedDtor() {
  if (this != default_instance_) {
    delete msg_;
  }
}

void ga_role_into_vision_notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ga_role_into_vision_notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ga_role_into_vision_notify_descriptor_;
}

const ga_role_into_vision_notify& ga_role_into_vision_notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

ga_role_into_vision_notify* ga_role_into_vision_notify::default_instance_ = NULL;

ga_role_into_vision_notify* ga_role_into_vision_notify::New() const {
  return new ga_role_into_vision_notify;
}

void ga_role_into_vision_notify::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (has_msg()) {
      if (msg_ != NULL) msg_->::proto::client::gc_role_into_vision_notify::Clear();
    }
  }
  role_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ga_role_into_vision_notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint64 role_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 8, input, this->mutable_role_list())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_role_list())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_role_list;
        if (input->ExpectTag(18)) goto parse_msg;
        break;
      }

      // required .proto.client.gc_role_into_vision_notify msg = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ga_role_into_vision_notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint64 role_list = 1;
  for (int i = 0; i < this->role_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      1, this->role_list(i), output);
  }

  // required .proto.client.gc_role_into_vision_notify msg = 2;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->msg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ga_role_into_vision_notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint64 role_list = 1;
  for (int i = 0; i < this->role_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(1, this->role_list(i), target);
  }

  // required .proto.client.gc_role_into_vision_notify msg = 2;
  if (has_msg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->msg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ga_role_into_vision_notify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required .proto.client.gc_role_into_vision_notify msg = 2;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->msg());
    }

  }
  // repeated uint64 role_list = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->role_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->role_list(i));
    }
    total_size += 1 * this->role_list_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ga_role_into_vision_notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ga_role_into_vision_notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ga_role_into_vision_notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ga_role_into_vision_notify::MergeFrom(const ga_role_into_vision_notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  role_list_.MergeFrom(from.role_list_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_msg()) {
      mutable_msg()->::proto::client::gc_role_into_vision_notify::MergeFrom(from.msg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ga_role_into_vision_notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ga_role_into_vision_notify::CopyFrom(const ga_role_into_vision_notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ga_role_into_vision_notify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  return true;
}

void ga_role_into_vision_notify::Swap(ga_role_into_vision_notify* other) {
  if (other != this) {
    role_list_.Swap(&other->role_list_);
    std::swap(msg_, other->msg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ga_role_into_vision_notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ga_role_into_vision_notify_descriptor_;
  metadata.reflection = ga_role_into_vision_notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ga_role_out_vision_notify::kRoleListFieldNumber;
const int ga_role_out_vision_notify::kMsgFieldNumber;
#endif  // !_MSC_VER

ga_role_out_vision_notify::ga_role_out_vision_notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ga_role_out_vision_notify::InitAsDefaultInstance() {
  msg_ = const_cast< ::proto::client::gc_role_outo_vision_notify*>(&::proto::client::gc_role_outo_vision_notify::default_instance());
}

ga_role_out_vision_notify::ga_role_out_vision_notify(const ga_role_out_vision_notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ga_role_out_vision_notify::SharedCtor() {
  _cached_size_ = 0;
  msg_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ga_role_out_vision_notify::~ga_role_out_vision_notify() {
  SharedDtor();
}

void ga_role_out_vision_notify::SharedDtor() {
  if (this != default_instance_) {
    delete msg_;
  }
}

void ga_role_out_vision_notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ga_role_out_vision_notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ga_role_out_vision_notify_descriptor_;
}

const ga_role_out_vision_notify& ga_role_out_vision_notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

ga_role_out_vision_notify* ga_role_out_vision_notify::default_instance_ = NULL;

ga_role_out_vision_notify* ga_role_out_vision_notify::New() const {
  return new ga_role_out_vision_notify;
}

void ga_role_out_vision_notify::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (has_msg()) {
      if (msg_ != NULL) msg_->::proto::client::gc_role_outo_vision_notify::Clear();
    }
  }
  role_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ga_role_out_vision_notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint64 role_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 8, input, this->mutable_role_list())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_role_list())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_role_list;
        if (input->ExpectTag(18)) goto parse_msg;
        break;
      }

      // required .proto.client.gc_role_outo_vision_notify msg = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ga_role_out_vision_notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint64 role_list = 1;
  for (int i = 0; i < this->role_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      1, this->role_list(i), output);
  }

  // required .proto.client.gc_role_outo_vision_notify msg = 2;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->msg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ga_role_out_vision_notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint64 role_list = 1;
  for (int i = 0; i < this->role_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(1, this->role_list(i), target);
  }

  // required .proto.client.gc_role_outo_vision_notify msg = 2;
  if (has_msg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->msg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ga_role_out_vision_notify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required .proto.client.gc_role_outo_vision_notify msg = 2;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->msg());
    }

  }
  // repeated uint64 role_list = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->role_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->role_list(i));
    }
    total_size += 1 * this->role_list_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ga_role_out_vision_notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ga_role_out_vision_notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ga_role_out_vision_notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ga_role_out_vision_notify::MergeFrom(const ga_role_out_vision_notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  role_list_.MergeFrom(from.role_list_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_msg()) {
      mutable_msg()->::proto::client::gc_role_outo_vision_notify::MergeFrom(from.msg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ga_role_out_vision_notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ga_role_out_vision_notify::CopyFrom(const ga_role_out_vision_notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ga_role_out_vision_notify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  return true;
}

void ga_role_out_vision_notify::Swap(ga_role_out_vision_notify* other) {
  if (other != this) {
    role_list_.Swap(&other->role_list_);
    std::swap(msg_, other->msg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ga_role_out_vision_notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ga_role_out_vision_notify_descriptor_;
  metadata.reflection = ga_role_out_vision_notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ga_broadcast_notify::kRoleListFieldNumber;
const int ga_broadcast_notify::kCmdFieldNumber;
const int ga_broadcast_notify::kDataFieldNumber;
#endif  // !_MSC_VER

ga_broadcast_notify::ga_broadcast_notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ga_broadcast_notify::InitAsDefaultInstance() {
}

ga_broadcast_notify::ga_broadcast_notify(const ga_broadcast_notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ga_broadcast_notify::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 0u;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ga_broadcast_notify::~ga_broadcast_notify() {
  SharedDtor();
}

void ga_broadcast_notify::SharedDtor() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void ga_broadcast_notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ga_broadcast_notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ga_broadcast_notify_descriptor_;
}

const ga_broadcast_notify& ga_broadcast_notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

ga_broadcast_notify* ga_broadcast_notify::default_instance_ = NULL;

ga_broadcast_notify* ga_broadcast_notify::New() const {
  return new ga_broadcast_notify;
}

void ga_broadcast_notify::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    cmd_ = 0u;
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::kEmptyString) {
        data_->clear();
      }
    }
  }
  role_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ga_broadcast_notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint64 role_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 8, input, this->mutable_role_list())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_role_list())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_role_list;
        if (input->ExpectTag(16)) goto parse_cmd;
        break;
      }

      // optional uint32 cmd = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cmd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cmd_)));
          set_has_cmd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_data;
        break;
      }

      // optional bytes data = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ga_broadcast_notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint64 role_list = 1;
  for (int i = 0; i < this->role_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      1, this->role_list(i), output);
  }

  // optional uint32 cmd = 2;
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->cmd(), output);
  }

  // optional bytes data = 3;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ga_broadcast_notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint64 role_list = 1;
  for (int i = 0; i < this->role_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(1, this->role_list(i), target);
  }

  // optional uint32 cmd = 2;
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->cmd(), target);
  }

  // optional bytes data = 3;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ga_broadcast_notify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 cmd = 2;
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cmd());
    }

    // optional bytes data = 3;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

  }
  // repeated uint64 role_list = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->role_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->role_list(i));
    }
    total_size += 1 * this->role_list_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ga_broadcast_notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ga_broadcast_notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ga_broadcast_notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ga_broadcast_notify::MergeFrom(const ga_broadcast_notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  role_list_.MergeFrom(from.role_list_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ga_broadcast_notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ga_broadcast_notify::CopyFrom(const ga_broadcast_notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ga_broadcast_notify::IsInitialized() const {

  return true;
}

void ga_broadcast_notify::Swap(ga_broadcast_notify* other) {
  if (other != this) {
    role_list_.Swap(&other->role_list_);
    std::swap(cmd_, other->cmd_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ga_broadcast_notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ga_broadcast_notify_descriptor_;
  metadata.reflection = ga_broadcast_notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ea_broadcast_notify::kRoleListFieldNumber;
const int ea_broadcast_notify::kCmdFieldNumber;
const int ea_broadcast_notify::kDataFieldNumber;
#endif  // !_MSC_VER

ea_broadcast_notify::ea_broadcast_notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ea_broadcast_notify::InitAsDefaultInstance() {
}

ea_broadcast_notify::ea_broadcast_notify(const ea_broadcast_notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ea_broadcast_notify::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 0u;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ea_broadcast_notify::~ea_broadcast_notify() {
  SharedDtor();
}

void ea_broadcast_notify::SharedDtor() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void ea_broadcast_notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ea_broadcast_notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ea_broadcast_notify_descriptor_;
}

const ea_broadcast_notify& ea_broadcast_notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

ea_broadcast_notify* ea_broadcast_notify::default_instance_ = NULL;

ea_broadcast_notify* ea_broadcast_notify::New() const {
  return new ea_broadcast_notify;
}

void ea_broadcast_notify::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    cmd_ = 0u;
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::kEmptyString) {
        data_->clear();
      }
    }
  }
  role_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ea_broadcast_notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint64 role_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 8, input, this->mutable_role_list())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_role_list())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_role_list;
        if (input->ExpectTag(16)) goto parse_cmd;
        break;
      }

      // optional uint32 cmd = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cmd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cmd_)));
          set_has_cmd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_data;
        break;
      }

      // optional bytes data = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ea_broadcast_notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint64 role_list = 1;
  for (int i = 0; i < this->role_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      1, this->role_list(i), output);
  }

  // optional uint32 cmd = 2;
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->cmd(), output);
  }

  // optional bytes data = 3;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ea_broadcast_notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint64 role_list = 1;
  for (int i = 0; i < this->role_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(1, this->role_list(i), target);
  }

  // optional uint32 cmd = 2;
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->cmd(), target);
  }

  // optional bytes data = 3;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ea_broadcast_notify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 cmd = 2;
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cmd());
    }

    // optional bytes data = 3;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

  }
  // repeated uint64 role_list = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->role_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->role_list(i));
    }
    total_size += 1 * this->role_list_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ea_broadcast_notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ea_broadcast_notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ea_broadcast_notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ea_broadcast_notify::MergeFrom(const ea_broadcast_notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  role_list_.MergeFrom(from.role_list_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ea_broadcast_notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ea_broadcast_notify::CopyFrom(const ea_broadcast_notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ea_broadcast_notify::IsInitialized() const {

  return true;
}

void ea_broadcast_notify::Swap(ea_broadcast_notify* other) {
  if (other != this) {
    role_list_.Swap(&other->role_list_);
    std::swap(cmd_, other->cmd_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ea_broadcast_notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ea_broadcast_notify_descriptor_;
  metadata.reflection = ea_broadcast_notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

al_kick_role_notify::al_kick_role_notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void al_kick_role_notify::InitAsDefaultInstance() {
}

al_kick_role_notify::al_kick_role_notify(const al_kick_role_notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void al_kick_role_notify::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

al_kick_role_notify::~al_kick_role_notify() {
  SharedDtor();
}

void al_kick_role_notify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void al_kick_role_notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* al_kick_role_notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return al_kick_role_notify_descriptor_;
}

const al_kick_role_notify& al_kick_role_notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

al_kick_role_notify* al_kick_role_notify::default_instance_ = NULL;

al_kick_role_notify* al_kick_role_notify::New() const {
  return new al_kick_role_notify;
}

void al_kick_role_notify::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool al_kick_role_notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void al_kick_role_notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* al_kick_role_notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int al_kick_role_notify::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void al_kick_role_notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const al_kick_role_notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const al_kick_role_notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void al_kick_role_notify::MergeFrom(const al_kick_role_notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void al_kick_role_notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void al_kick_role_notify::CopyFrom(const al_kick_role_notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool al_kick_role_notify::IsInitialized() const {

  return true;
}

void al_kick_role_notify::Swap(al_kick_role_notify* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata al_kick_role_notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = al_kick_role_notify_descriptor_;
  metadata.reflection = al_kick_role_notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int al_kick_gate_all_user_notify::kGateIdFieldNumber;
#endif  // !_MSC_VER

al_kick_gate_all_user_notify::al_kick_gate_all_user_notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void al_kick_gate_all_user_notify::InitAsDefaultInstance() {
}

al_kick_gate_all_user_notify::al_kick_gate_all_user_notify(const al_kick_gate_all_user_notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void al_kick_gate_all_user_notify::SharedCtor() {
  _cached_size_ = 0;
  gate_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

al_kick_gate_all_user_notify::~al_kick_gate_all_user_notify() {
  SharedDtor();
}

void al_kick_gate_all_user_notify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void al_kick_gate_all_user_notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* al_kick_gate_all_user_notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return al_kick_gate_all_user_notify_descriptor_;
}

const al_kick_gate_all_user_notify& al_kick_gate_all_user_notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

al_kick_gate_all_user_notify* al_kick_gate_all_user_notify::default_instance_ = NULL;

al_kick_gate_all_user_notify* al_kick_gate_all_user_notify::New() const {
  return new al_kick_gate_all_user_notify;
}

void al_kick_gate_all_user_notify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gate_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool al_kick_gate_all_user_notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 gate_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gate_id_)));
          set_has_gate_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void al_kick_gate_all_user_notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 gate_id = 1;
  if (has_gate_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gate_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* al_kick_gate_all_user_notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 gate_id = 1;
  if (has_gate_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->gate_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int al_kick_gate_all_user_notify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 gate_id = 1;
    if (has_gate_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gate_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void al_kick_gate_all_user_notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const al_kick_gate_all_user_notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const al_kick_gate_all_user_notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void al_kick_gate_all_user_notify::MergeFrom(const al_kick_gate_all_user_notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gate_id()) {
      set_gate_id(from.gate_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void al_kick_gate_all_user_notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void al_kick_gate_all_user_notify::CopyFrom(const al_kick_gate_all_user_notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool al_kick_gate_all_user_notify::IsInitialized() const {

  return true;
}

void al_kick_gate_all_user_notify::Swap(al_kick_gate_all_user_notify* other) {
  if (other != this) {
    std::swap(gate_id_, other->gate_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata al_kick_gate_all_user_notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = al_kick_gate_all_user_notify_descriptor_;
  metadata.reflection = al_kick_gate_all_user_notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

gh_kick_role_notify::gh_kick_role_notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gh_kick_role_notify::InitAsDefaultInstance() {
}

gh_kick_role_notify::gh_kick_role_notify(const gh_kick_role_notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gh_kick_role_notify::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gh_kick_role_notify::~gh_kick_role_notify() {
  SharedDtor();
}

void gh_kick_role_notify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void gh_kick_role_notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gh_kick_role_notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gh_kick_role_notify_descriptor_;
}

const gh_kick_role_notify& gh_kick_role_notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

gh_kick_role_notify* gh_kick_role_notify::default_instance_ = NULL;

gh_kick_role_notify* gh_kick_role_notify::New() const {
  return new gh_kick_role_notify;
}

void gh_kick_role_notify::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gh_kick_role_notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void gh_kick_role_notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gh_kick_role_notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gh_kick_role_notify::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gh_kick_role_notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gh_kick_role_notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gh_kick_role_notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gh_kick_role_notify::MergeFrom(const gh_kick_role_notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gh_kick_role_notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gh_kick_role_notify::CopyFrom(const gh_kick_role_notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gh_kick_role_notify::IsInitialized() const {

  return true;
}

void gh_kick_role_notify::Swap(gh_kick_role_notify* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gh_kick_role_notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gh_kick_role_notify_descriptor_;
  metadata.reflection = gh_kick_role_notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int gd_batch_save_to_db_notify::kDatasFieldNumber;
const int gd_batch_save_to_db_notify::kTypeFieldNumber;
#endif  // !_MSC_VER

gd_batch_save_to_db_notify::gd_batch_save_to_db_notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gd_batch_save_to_db_notify::InitAsDefaultInstance() {
}

gd_batch_save_to_db_notify::gd_batch_save_to_db_notify(const gd_batch_save_to_db_notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gd_batch_save_to_db_notify::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gd_batch_save_to_db_notify::~gd_batch_save_to_db_notify() {
  SharedDtor();
}

void gd_batch_save_to_db_notify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void gd_batch_save_to_db_notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gd_batch_save_to_db_notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gd_batch_save_to_db_notify_descriptor_;
}

const gd_batch_save_to_db_notify& gd_batch_save_to_db_notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

gd_batch_save_to_db_notify* gd_batch_save_to_db_notify::default_instance_ = NULL;

gd_batch_save_to_db_notify* gd_batch_save_to_db_notify::New() const {
  return new gd_batch_save_to_db_notify;
}

void gd_batch_save_to_db_notify::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    type_ = 0u;
  }
  datas_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gd_batch_save_to_db_notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.server.save_to_db datas = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_datas:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_datas()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_datas;
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional uint32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gd_batch_save_to_db_notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto.server.save_to_db datas = 1;
  for (int i = 0; i < this->datas_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->datas(i), output);
  }

  // optional uint32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gd_batch_save_to_db_notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto.server.save_to_db datas = 1;
  for (int i = 0; i < this->datas_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->datas(i), target);
  }

  // optional uint32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gd_batch_save_to_db_notify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

  }
  // repeated .proto.server.save_to_db datas = 1;
  total_size += 1 * this->datas_size();
  for (int i = 0; i < this->datas_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->datas(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gd_batch_save_to_db_notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gd_batch_save_to_db_notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gd_batch_save_to_db_notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gd_batch_save_to_db_notify::MergeFrom(const gd_batch_save_to_db_notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  datas_.MergeFrom(from.datas_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gd_batch_save_to_db_notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gd_batch_save_to_db_notify::CopyFrom(const gd_batch_save_to_db_notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gd_batch_save_to_db_notify::IsInitialized() const {

  for (int i = 0; i < datas_size(); i++) {
    if (!this->datas(i).IsInitialized()) return false;
  }
  return true;
}

void gd_batch_save_to_db_notify::Swap(gd_batch_save_to_db_notify* other) {
  if (other != this) {
    datas_.Swap(&other->datas_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gd_batch_save_to_db_notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gd_batch_save_to_db_notify_descriptor_;
  metadata.reflection = gd_batch_save_to_db_notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int save_to_db::kKeyFieldNumber;
const int save_to_db::kDataFieldNumber;
const int save_to_db::kNewFlagFieldNumber;
const int save_to_db::kUidFieldNumber;
#endif  // !_MSC_VER

save_to_db::save_to_db()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void save_to_db::InitAsDefaultInstance() {
}

save_to_db::save_to_db(const save_to_db& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void save_to_db::SharedCtor() {
  _cached_size_ = 0;
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  new_flag_ = false;
  uid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

save_to_db::~save_to_db() {
  SharedDtor();
}

void save_to_db::SharedDtor() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void save_to_db::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* save_to_db::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return save_to_db_descriptor_;
}

const save_to_db& save_to_db::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

save_to_db* save_to_db::default_instance_ = NULL;

save_to_db* save_to_db::New() const {
  return new save_to_db;
}

void save_to_db::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::kEmptyString) {
        key_->clear();
      }
    }
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::kEmptyString) {
        data_->clear();
      }
    }
    new_flag_ = false;
    uid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool save_to_db::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // required bytes data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_new_flag;
        break;
      }

      // optional bool new_flag = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_new_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &new_flag_)));
          set_has_new_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_uid;
        break;
      }

      // optional uint64 uid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void save_to_db::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->key(), output);
  }

  // required bytes data = 2;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->data(), output);
  }

  // optional bool new_flag = 3;
  if (has_new_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->new_flag(), output);
  }

  // optional uint64 uid = 4;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->uid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* save_to_db::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // required bytes data = 2;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->data(), target);
  }

  // optional bool new_flag = 3;
  if (has_new_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->new_flag(), target);
  }

  // optional uint64 uid = 4;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->uid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int save_to_db::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

    // required bytes data = 2;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

    // optional bool new_flag = 3;
    if (has_new_flag()) {
      total_size += 1 + 1;
    }

    // optional uint64 uid = 4;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void save_to_db::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const save_to_db* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const save_to_db*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void save_to_db::MergeFrom(const save_to_db& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
    if (from.has_new_flag()) {
      set_new_flag(from.new_flag());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void save_to_db::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void save_to_db::CopyFrom(const save_to_db& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool save_to_db::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void save_to_db::Swap(save_to_db* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(data_, other->data_);
    std::swap(new_flag_, other->new_flag_);
    std::swap(uid_, other->uid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata save_to_db::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = save_to_db_descriptor_;
  metadata.reflection = save_to_db_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int gd_role_data_request::kTimeFieldNumber;
#endif  // !_MSC_VER

gd_role_data_request::gd_role_data_request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gd_role_data_request::InitAsDefaultInstance() {
}

gd_role_data_request::gd_role_data_request(const gd_role_data_request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gd_role_data_request::SharedCtor() {
  _cached_size_ = 0;
  time_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gd_role_data_request::~gd_role_data_request() {
  SharedDtor();
}

void gd_role_data_request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void gd_role_data_request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gd_role_data_request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gd_role_data_request_descriptor_;
}

const gd_role_data_request& gd_role_data_request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

gd_role_data_request* gd_role_data_request::default_instance_ = NULL;

gd_role_data_request* gd_role_data_request::New() const {
  return new gd_role_data_request;
}

void gd_role_data_request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    time_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gd_role_data_request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 time = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gd_role_data_request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 time = 1;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gd_role_data_request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 time = 1;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gd_role_data_request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 time = 1;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gd_role_data_request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gd_role_data_request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gd_role_data_request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gd_role_data_request::MergeFrom(const gd_role_data_request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gd_role_data_request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gd_role_data_request::CopyFrom(const gd_role_data_request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gd_role_data_request::IsInitialized() const {

  return true;
}

void gd_role_data_request::Swap(gd_role_data_request* other) {
  if (other != this) {
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gd_role_data_request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gd_role_data_request_descriptor_;
  metadata.reflection = gd_role_data_request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int dg_role_data_reply::kReplyCodeFieldNumber;
const int dg_role_data_reply::kRoleFieldNumber;
const int dg_role_data_reply::kItemFieldNumber;
const int dg_role_data_reply::kHeroFieldNumber;
const int dg_role_data_reply::kFormationFieldNumber;
const int dg_role_data_reply::kTaskFieldNumber;
const int dg_role_data_reply::kTradeItemFieldNumber;
const int dg_role_data_reply::kMountDataFieldNumber;
const int dg_role_data_reply::kCountryBountyFieldNumber;
const int dg_role_data_reply::kActivitiesDataFieldNumber;
const int dg_role_data_reply::kArenaRoleDataFieldNumber;
const int dg_role_data_reply::kAchieveFieldNumber;
const int dg_role_data_reply::kTowerFieldNumber;
const int dg_role_data_reply::kLuckydrawFieldNumber;
const int dg_role_data_reply::kDungeonDataFieldNumber;
const int dg_role_data_reply::kExpeditionDataFieldNumber;
const int dg_role_data_reply::kActiveRewardDataFieldNumber;
const int dg_role_data_reply::kRandomShopDataFieldNumber;
const int dg_role_data_reply::kLevelRwdDataFieldNumber;
const int dg_role_data_reply::kLevelRwdMailDataFieldNumber;
const int dg_role_data_reply::kBussinessActDataFieldNumber;
const int dg_role_data_reply::kLiandanDataFieldNumber;
const int dg_role_data_reply::kEquipPlanDataFieldNumber;
const int dg_role_data_reply::kPatrolDataFieldNumber;
const int dg_role_data_reply::kDungeonTimesDataFieldNumber;
const int dg_role_data_reply::kFamilySkillDataFieldNumber;
const int dg_role_data_reply::kGeneralEventDataFieldNumber;
const int dg_role_data_reply::kRechargeDataFieldNumber;
const int dg_role_data_reply::kOfficeDataFieldNumber;
#endif  // !_MSC_VER

dg_role_data_reply::dg_role_data_reply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void dg_role_data_reply::InitAsDefaultInstance() {
  role_ = const_cast< ::proto::common::role_data*>(&::proto::common::role_data::default_instance());
  item_ = const_cast< ::proto::common::item_data*>(&::proto::common::item_data::default_instance());
  hero_ = const_cast< ::proto::common::hero_data*>(&::proto::common::hero_data::default_instance());
  formation_ = const_cast< ::proto::common::formation_data*>(&::proto::common::formation_data::default_instance());
  task_ = const_cast< ::proto::common::task_data*>(&::proto::common::task_data::default_instance());
  trade_item_ = const_cast< ::proto::common::role_trade_item*>(&::proto::common::role_trade_item::default_instance());
  mount_data_ = const_cast< ::proto::common::mount_data*>(&::proto::common::mount_data::default_instance());
  country_bounty_ = const_cast< ::proto::common::country_bounty_data*>(&::proto::common::country_bounty_data::default_instance());
  activities_data_ = const_cast< ::proto::common::activities_data*>(&::proto::common::activities_data::default_instance());
  arena_role_data_ = const_cast< ::proto::common::arena_role_data*>(&::proto::common::arena_role_data::default_instance());
  achieve_ = const_cast< ::proto::common::achieve_data*>(&::proto::common::achieve_data::default_instance());
  tower_ = const_cast< ::proto::common::tower_data*>(&::proto::common::tower_data::default_instance());
  luckydraw_ = const_cast< ::proto::common::luckydraw_data*>(&::proto::common::luckydraw_data::default_instance());
  dungeon_data_ = const_cast< ::proto::common::role_all_dungeon_data*>(&::proto::common::role_all_dungeon_data::default_instance());
  expedition_data_ = const_cast< ::proto::common::expedition_data*>(&::proto::common::expedition_data::default_instance());
  active_reward_data_ = const_cast< ::proto::common::active_reward_data*>(&::proto::common::active_reward_data::default_instance());
  random_shop_data_ = const_cast< ::proto::common::role_random_shop_data*>(&::proto::common::role_random_shop_data::default_instance());
  level_rwd_data_ = const_cast< ::proto::common::level_reward_recived_list*>(&::proto::common::level_reward_recived_list::default_instance());
  level_rwd_mail_data_ = const_cast< ::proto::common::level_reward_mail_recived_list*>(&::proto::common::level_reward_mail_recived_list::default_instance());
  bussiness_act_data_ = const_cast< ::proto::common::bussiness_act_data*>(&::proto::common::bussiness_act_data::default_instance());
  liandan_data_ = const_cast< ::proto::common::liandan_data*>(&::proto::common::liandan_data::default_instance());
  equip_plan_data_ = const_cast< ::proto::common::equip_plan_data*>(&::proto::common::equip_plan_data::default_instance());
  patrol_data_ = const_cast< ::proto::common::patrol_hire_data*>(&::proto::common::patrol_hire_data::default_instance());
  dungeon_times_data_ = const_cast< ::proto::common::role_all_dungeon_times_data*>(&::proto::common::role_all_dungeon_times_data::default_instance());
  family_skill_data_ = const_cast< ::proto::common::family_skill_data*>(&::proto::common::family_skill_data::default_instance());
  general_event_data_ = const_cast< ::proto::common::general_event_save_data*>(&::proto::common::general_event_save_data::default_instance());
  recharge_data_ = const_cast< ::proto::common::recharge_data*>(&::proto::common::recharge_data::default_instance());
  office_data_ = const_cast< ::proto::common::office_data*>(&::proto::common::office_data::default_instance());
}

dg_role_data_reply::dg_role_data_reply(const dg_role_data_reply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void dg_role_data_reply::SharedCtor() {
  _cached_size_ = 0;
  reply_code_ = 0u;
  role_ = NULL;
  item_ = NULL;
  hero_ = NULL;
  formation_ = NULL;
  task_ = NULL;
  trade_item_ = NULL;
  mount_data_ = NULL;
  country_bounty_ = NULL;
  activities_data_ = NULL;
  arena_role_data_ = NULL;
  achieve_ = NULL;
  tower_ = NULL;
  luckydraw_ = NULL;
  dungeon_data_ = NULL;
  expedition_data_ = NULL;
  active_reward_data_ = NULL;
  random_shop_data_ = NULL;
  level_rwd_data_ = NULL;
  level_rwd_mail_data_ = NULL;
  bussiness_act_data_ = NULL;
  liandan_data_ = NULL;
  equip_plan_data_ = NULL;
  patrol_data_ = NULL;
  dungeon_times_data_ = NULL;
  family_skill_data_ = NULL;
  general_event_data_ = NULL;
  recharge_data_ = NULL;
  office_data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

dg_role_data_reply::~dg_role_data_reply() {
  SharedDtor();
}

void dg_role_data_reply::SharedDtor() {
  if (this != default_instance_) {
    delete role_;
    delete item_;
    delete hero_;
    delete formation_;
    delete task_;
    delete trade_item_;
    delete mount_data_;
    delete country_bounty_;
    delete activities_data_;
    delete arena_role_data_;
    delete achieve_;
    delete tower_;
    delete luckydraw_;
    delete dungeon_data_;
    delete expedition_data_;
    delete active_reward_data_;
    delete random_shop_data_;
    delete level_rwd_data_;
    delete level_rwd_mail_data_;
    delete bussiness_act_data_;
    delete liandan_data_;
    delete equip_plan_data_;
    delete patrol_data_;
    delete dungeon_times_data_;
    delete family_skill_data_;
    delete general_event_data_;
    delete recharge_data_;
    delete office_data_;
  }
}

void dg_role_data_reply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* dg_role_data_reply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return dg_role_data_reply_descriptor_;
}

const dg_role_data_reply& dg_role_data_reply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

dg_role_data_reply* dg_role_data_reply::default_instance_ = NULL;

dg_role_data_reply* dg_role_data_reply::New() const {
  return new dg_role_data_reply;
}

void dg_role_data_reply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    reply_code_ = 0u;
    if (has_role()) {
      if (role_ != NULL) role_->::proto::common::role_data::Clear();
    }
    if (has_item()) {
      if (item_ != NULL) item_->::proto::common::item_data::Clear();
    }
    if (has_hero()) {
      if (hero_ != NULL) hero_->::proto::common::hero_data::Clear();
    }
    if (has_formation()) {
      if (formation_ != NULL) formation_->::proto::common::formation_data::Clear();
    }
    if (has_task()) {
      if (task_ != NULL) task_->::proto::common::task_data::Clear();
    }
    if (has_trade_item()) {
      if (trade_item_ != NULL) trade_item_->::proto::common::role_trade_item::Clear();
    }
    if (has_mount_data()) {
      if (mount_data_ != NULL) mount_data_->::proto::common::mount_data::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_country_bounty()) {
      if (country_bounty_ != NULL) country_bounty_->::proto::common::country_bounty_data::Clear();
    }
    if (has_activities_data()) {
      if (activities_data_ != NULL) activities_data_->::proto::common::activities_data::Clear();
    }
    if (has_arena_role_data()) {
      if (arena_role_data_ != NULL) arena_role_data_->::proto::common::arena_role_data::Clear();
    }
    if (has_achieve()) {
      if (achieve_ != NULL) achieve_->::proto::common::achieve_data::Clear();
    }
    if (has_tower()) {
      if (tower_ != NULL) tower_->::proto::common::tower_data::Clear();
    }
    if (has_luckydraw()) {
      if (luckydraw_ != NULL) luckydraw_->::proto::common::luckydraw_data::Clear();
    }
    if (has_dungeon_data()) {
      if (dungeon_data_ != NULL) dungeon_data_->::proto::common::role_all_dungeon_data::Clear();
    }
    if (has_expedition_data()) {
      if (expedition_data_ != NULL) expedition_data_->::proto::common::expedition_data::Clear();
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_active_reward_data()) {
      if (active_reward_data_ != NULL) active_reward_data_->::proto::common::active_reward_data::Clear();
    }
    if (has_random_shop_data()) {
      if (random_shop_data_ != NULL) random_shop_data_->::proto::common::role_random_shop_data::Clear();
    }
    if (has_level_rwd_data()) {
      if (level_rwd_data_ != NULL) level_rwd_data_->::proto::common::level_reward_recived_list::Clear();
    }
    if (has_level_rwd_mail_data()) {
      if (level_rwd_mail_data_ != NULL) level_rwd_mail_data_->::proto::common::level_reward_mail_recived_list::Clear();
    }
    if (has_bussiness_act_data()) {
      if (bussiness_act_data_ != NULL) bussiness_act_data_->::proto::common::bussiness_act_data::Clear();
    }
    if (has_liandan_data()) {
      if (liandan_data_ != NULL) liandan_data_->::proto::common::liandan_data::Clear();
    }
    if (has_equip_plan_data()) {
      if (equip_plan_data_ != NULL) equip_plan_data_->::proto::common::equip_plan_data::Clear();
    }
    if (has_patrol_data()) {
      if (patrol_data_ != NULL) patrol_data_->::proto::common::patrol_hire_data::Clear();
    }
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (has_dungeon_times_data()) {
      if (dungeon_times_data_ != NULL) dungeon_times_data_->::proto::common::role_all_dungeon_times_data::Clear();
    }
    if (has_family_skill_data()) {
      if (family_skill_data_ != NULL) family_skill_data_->::proto::common::family_skill_data::Clear();
    }
    if (has_general_event_data()) {
      if (general_event_data_ != NULL) general_event_data_->::proto::common::general_event_save_data::Clear();
    }
    if (has_recharge_data()) {
      if (recharge_data_ != NULL) recharge_data_->::proto::common::recharge_data::Clear();
    }
    if (has_office_data()) {
      if (office_data_ != NULL) office_data_->::proto::common::office_data::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool dg_role_data_reply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 reply_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reply_code_)));
          set_has_reply_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_role;
        break;
      }

      // optional .proto.common.role_data role = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_role:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_role()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_item;
        break;
      }

      // optional .proto.common.item_data item = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_item()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_hero;
        break;
      }

      // optional .proto.common.hero_data hero = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hero:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hero()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_formation;
        break;
      }

      // optional .proto.common.formation_data formation = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_formation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_formation()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_task;
        break;
      }

      // optional .proto.common.task_data task = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_task:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_task()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_trade_item;
        break;
      }

      // optional .proto.common.role_trade_item trade_item = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_trade_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_trade_item()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_mount_data;
        break;
      }

      // optional .proto.common.mount_data mount_data = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mount_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mount_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_country_bounty;
        break;
      }

      // optional .proto.common.country_bounty_data country_bounty = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_country_bounty:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_country_bounty()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_activities_data;
        break;
      }

      // optional .proto.common.activities_data activities_data = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_activities_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_activities_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_arena_role_data;
        break;
      }

      // optional .proto.common.arena_role_data arena_role_data = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_arena_role_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_arena_role_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_achieve;
        break;
      }

      // optional .proto.common.achieve_data achieve = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_achieve:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_achieve()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_tower;
        break;
      }

      // optional .proto.common.tower_data tower = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tower:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tower()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_luckydraw;
        break;
      }

      // optional .proto.common.luckydraw_data luckydraw = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_luckydraw:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_luckydraw()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_dungeon_data;
        break;
      }

      // optional .proto.common.role_all_dungeon_data dungeon_data = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dungeon_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dungeon_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_expedition_data;
        break;
      }

      // optional .proto.common.expedition_data expedition_data = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_expedition_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_expedition_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_active_reward_data;
        break;
      }

      // optional .proto.common.active_reward_data active_reward_data = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_active_reward_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_active_reward_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_random_shop_data;
        break;
      }

      // optional .proto.common.role_random_shop_data random_shop_data = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_random_shop_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_random_shop_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_level_rwd_data;
        break;
      }

      // optional .proto.common.level_reward_recived_list level_rwd_data = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_level_rwd_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_level_rwd_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(170)) goto parse_level_rwd_mail_data;
        break;
      }

      // optional .proto.common.level_reward_mail_recived_list level_rwd_mail_data = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_level_rwd_mail_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_level_rwd_mail_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(178)) goto parse_bussiness_act_data;
        break;
      }

      // optional .proto.common.bussiness_act_data bussiness_act_data = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bussiness_act_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bussiness_act_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(186)) goto parse_liandan_data;
        break;
      }

      // optional .proto.common.liandan_data liandan_data = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_liandan_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_liandan_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(194)) goto parse_equip_plan_data;
        break;
      }

      // optional .proto.common.equip_plan_data equip_plan_data = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equip_plan_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_equip_plan_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(202)) goto parse_patrol_data;
        break;
      }

      // optional .proto.common.patrol_hire_data patrol_data = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_patrol_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_patrol_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(210)) goto parse_dungeon_times_data;
        break;
      }

      // optional .proto.common.role_all_dungeon_times_data dungeon_times_data = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dungeon_times_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dungeon_times_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(218)) goto parse_family_skill_data;
        break;
      }

      // optional .proto.common.family_skill_data family_skill_data = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_family_skill_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_family_skill_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(226)) goto parse_general_event_data;
        break;
      }

      // optional .proto.common.general_event_save_data general_event_data = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_general_event_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_general_event_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(234)) goto parse_recharge_data;
        break;
      }

      // optional .proto.common.recharge_data recharge_data = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_recharge_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_recharge_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(242)) goto parse_office_data;
        break;
      }

      // optional .proto.common.office_data office_data = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_office_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_office_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void dg_role_data_reply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 reply_code = 1;
  if (has_reply_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->reply_code(), output);
  }

  // optional .proto.common.role_data role = 2;
  if (has_role()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->role(), output);
  }

  // optional .proto.common.item_data item = 3;
  if (has_item()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->item(), output);
  }

  // optional .proto.common.hero_data hero = 4;
  if (has_hero()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->hero(), output);
  }

  // optional .proto.common.formation_data formation = 5;
  if (has_formation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->formation(), output);
  }

  // optional .proto.common.task_data task = 7;
  if (has_task()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->task(), output);
  }

  // optional .proto.common.role_trade_item trade_item = 8;
  if (has_trade_item()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->trade_item(), output);
  }

  // optional .proto.common.mount_data mount_data = 9;
  if (has_mount_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->mount_data(), output);
  }

  // optional .proto.common.country_bounty_data country_bounty = 10;
  if (has_country_bounty()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->country_bounty(), output);
  }

  // optional .proto.common.activities_data activities_data = 11;
  if (has_activities_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->activities_data(), output);
  }

  // optional .proto.common.arena_role_data arena_role_data = 12;
  if (has_arena_role_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->arena_role_data(), output);
  }

  // optional .proto.common.achieve_data achieve = 13;
  if (has_achieve()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->achieve(), output);
  }

  // optional .proto.common.tower_data tower = 14;
  if (has_tower()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->tower(), output);
  }

  // optional .proto.common.luckydraw_data luckydraw = 15;
  if (has_luckydraw()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->luckydraw(), output);
  }

  // optional .proto.common.role_all_dungeon_data dungeon_data = 16;
  if (has_dungeon_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->dungeon_data(), output);
  }

  // optional .proto.common.expedition_data expedition_data = 17;
  if (has_expedition_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->expedition_data(), output);
  }

  // optional .proto.common.active_reward_data active_reward_data = 18;
  if (has_active_reward_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, this->active_reward_data(), output);
  }

  // optional .proto.common.role_random_shop_data random_shop_data = 19;
  if (has_random_shop_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, this->random_shop_data(), output);
  }

  // optional .proto.common.level_reward_recived_list level_rwd_data = 20;
  if (has_level_rwd_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->level_rwd_data(), output);
  }

  // optional .proto.common.level_reward_mail_recived_list level_rwd_mail_data = 21;
  if (has_level_rwd_mail_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, this->level_rwd_mail_data(), output);
  }

  // optional .proto.common.bussiness_act_data bussiness_act_data = 22;
  if (has_bussiness_act_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, this->bussiness_act_data(), output);
  }

  // optional .proto.common.liandan_data liandan_data = 23;
  if (has_liandan_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      23, this->liandan_data(), output);
  }

  // optional .proto.common.equip_plan_data equip_plan_data = 24;
  if (has_equip_plan_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      24, this->equip_plan_data(), output);
  }

  // optional .proto.common.patrol_hire_data patrol_data = 25;
  if (has_patrol_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      25, this->patrol_data(), output);
  }

  // optional .proto.common.role_all_dungeon_times_data dungeon_times_data = 26;
  if (has_dungeon_times_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      26, this->dungeon_times_data(), output);
  }

  // optional .proto.common.family_skill_data family_skill_data = 27;
  if (has_family_skill_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      27, this->family_skill_data(), output);
  }

  // optional .proto.common.general_event_save_data general_event_data = 28;
  if (has_general_event_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      28, this->general_event_data(), output);
  }

  // optional .proto.common.recharge_data recharge_data = 29;
  if (has_recharge_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      29, this->recharge_data(), output);
  }

  // optional .proto.common.office_data office_data = 30;
  if (has_office_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      30, this->office_data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* dg_role_data_reply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 reply_code = 1;
  if (has_reply_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->reply_code(), target);
  }

  // optional .proto.common.role_data role = 2;
  if (has_role()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->role(), target);
  }

  // optional .proto.common.item_data item = 3;
  if (has_item()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->item(), target);
  }

  // optional .proto.common.hero_data hero = 4;
  if (has_hero()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->hero(), target);
  }

  // optional .proto.common.formation_data formation = 5;
  if (has_formation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->formation(), target);
  }

  // optional .proto.common.task_data task = 7;
  if (has_task()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->task(), target);
  }

  // optional .proto.common.role_trade_item trade_item = 8;
  if (has_trade_item()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->trade_item(), target);
  }

  // optional .proto.common.mount_data mount_data = 9;
  if (has_mount_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->mount_data(), target);
  }

  // optional .proto.common.country_bounty_data country_bounty = 10;
  if (has_country_bounty()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->country_bounty(), target);
  }

  // optional .proto.common.activities_data activities_data = 11;
  if (has_activities_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->activities_data(), target);
  }

  // optional .proto.common.arena_role_data arena_role_data = 12;
  if (has_arena_role_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->arena_role_data(), target);
  }

  // optional .proto.common.achieve_data achieve = 13;
  if (has_achieve()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->achieve(), target);
  }

  // optional .proto.common.tower_data tower = 14;
  if (has_tower()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->tower(), target);
  }

  // optional .proto.common.luckydraw_data luckydraw = 15;
  if (has_luckydraw()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->luckydraw(), target);
  }

  // optional .proto.common.role_all_dungeon_data dungeon_data = 16;
  if (has_dungeon_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->dungeon_data(), target);
  }

  // optional .proto.common.expedition_data expedition_data = 17;
  if (has_expedition_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        17, this->expedition_data(), target);
  }

  // optional .proto.common.active_reward_data active_reward_data = 18;
  if (has_active_reward_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        18, this->active_reward_data(), target);
  }

  // optional .proto.common.role_random_shop_data random_shop_data = 19;
  if (has_random_shop_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        19, this->random_shop_data(), target);
  }

  // optional .proto.common.level_reward_recived_list level_rwd_data = 20;
  if (has_level_rwd_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, this->level_rwd_data(), target);
  }

  // optional .proto.common.level_reward_mail_recived_list level_rwd_mail_data = 21;
  if (has_level_rwd_mail_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        21, this->level_rwd_mail_data(), target);
  }

  // optional .proto.common.bussiness_act_data bussiness_act_data = 22;
  if (has_bussiness_act_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        22, this->bussiness_act_data(), target);
  }

  // optional .proto.common.liandan_data liandan_data = 23;
  if (has_liandan_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        23, this->liandan_data(), target);
  }

  // optional .proto.common.equip_plan_data equip_plan_data = 24;
  if (has_equip_plan_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        24, this->equip_plan_data(), target);
  }

  // optional .proto.common.patrol_hire_data patrol_data = 25;
  if (has_patrol_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        25, this->patrol_data(), target);
  }

  // optional .proto.common.role_all_dungeon_times_data dungeon_times_data = 26;
  if (has_dungeon_times_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        26, this->dungeon_times_data(), target);
  }

  // optional .proto.common.family_skill_data family_skill_data = 27;
  if (has_family_skill_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        27, this->family_skill_data(), target);
  }

  // optional .proto.common.general_event_save_data general_event_data = 28;
  if (has_general_event_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        28, this->general_event_data(), target);
  }

  // optional .proto.common.recharge_data recharge_data = 29;
  if (has_recharge_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        29, this->recharge_data(), target);
  }

  // optional .proto.common.office_data office_data = 30;
  if (has_office_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        30, this->office_data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int dg_role_data_reply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 reply_code = 1;
    if (has_reply_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reply_code());
    }

    // optional .proto.common.role_data role = 2;
    if (has_role()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->role());
    }

    // optional .proto.common.item_data item = 3;
    if (has_item()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->item());
    }

    // optional .proto.common.hero_data hero = 4;
    if (has_hero()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->hero());
    }

    // optional .proto.common.formation_data formation = 5;
    if (has_formation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->formation());
    }

    // optional .proto.common.task_data task = 7;
    if (has_task()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->task());
    }

    // optional .proto.common.role_trade_item trade_item = 8;
    if (has_trade_item()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->trade_item());
    }

    // optional .proto.common.mount_data mount_data = 9;
    if (has_mount_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mount_data());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .proto.common.country_bounty_data country_bounty = 10;
    if (has_country_bounty()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->country_bounty());
    }

    // optional .proto.common.activities_data activities_data = 11;
    if (has_activities_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->activities_data());
    }

    // optional .proto.common.arena_role_data arena_role_data = 12;
    if (has_arena_role_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->arena_role_data());
    }

    // optional .proto.common.achieve_data achieve = 13;
    if (has_achieve()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->achieve());
    }

    // optional .proto.common.tower_data tower = 14;
    if (has_tower()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tower());
    }

    // optional .proto.common.luckydraw_data luckydraw = 15;
    if (has_luckydraw()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->luckydraw());
    }

    // optional .proto.common.role_all_dungeon_data dungeon_data = 16;
    if (has_dungeon_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dungeon_data());
    }

    // optional .proto.common.expedition_data expedition_data = 17;
    if (has_expedition_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->expedition_data());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional .proto.common.active_reward_data active_reward_data = 18;
    if (has_active_reward_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->active_reward_data());
    }

    // optional .proto.common.role_random_shop_data random_shop_data = 19;
    if (has_random_shop_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->random_shop_data());
    }

    // optional .proto.common.level_reward_recived_list level_rwd_data = 20;
    if (has_level_rwd_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->level_rwd_data());
    }

    // optional .proto.common.level_reward_mail_recived_list level_rwd_mail_data = 21;
    if (has_level_rwd_mail_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->level_rwd_mail_data());
    }

    // optional .proto.common.bussiness_act_data bussiness_act_data = 22;
    if (has_bussiness_act_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bussiness_act_data());
    }

    // optional .proto.common.liandan_data liandan_data = 23;
    if (has_liandan_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->liandan_data());
    }

    // optional .proto.common.equip_plan_data equip_plan_data = 24;
    if (has_equip_plan_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->equip_plan_data());
    }

    // optional .proto.common.patrol_hire_data patrol_data = 25;
    if (has_patrol_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->patrol_data());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional .proto.common.role_all_dungeon_times_data dungeon_times_data = 26;
    if (has_dungeon_times_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dungeon_times_data());
    }

    // optional .proto.common.family_skill_data family_skill_data = 27;
    if (has_family_skill_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->family_skill_data());
    }

    // optional .proto.common.general_event_save_data general_event_data = 28;
    if (has_general_event_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->general_event_data());
    }

    // optional .proto.common.recharge_data recharge_data = 29;
    if (has_recharge_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->recharge_data());
    }

    // optional .proto.common.office_data office_data = 30;
    if (has_office_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->office_data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void dg_role_data_reply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const dg_role_data_reply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const dg_role_data_reply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void dg_role_data_reply::MergeFrom(const dg_role_data_reply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reply_code()) {
      set_reply_code(from.reply_code());
    }
    if (from.has_role()) {
      mutable_role()->::proto::common::role_data::MergeFrom(from.role());
    }
    if (from.has_item()) {
      mutable_item()->::proto::common::item_data::MergeFrom(from.item());
    }
    if (from.has_hero()) {
      mutable_hero()->::proto::common::hero_data::MergeFrom(from.hero());
    }
    if (from.has_formation()) {
      mutable_formation()->::proto::common::formation_data::MergeFrom(from.formation());
    }
    if (from.has_task()) {
      mutable_task()->::proto::common::task_data::MergeFrom(from.task());
    }
    if (from.has_trade_item()) {
      mutable_trade_item()->::proto::common::role_trade_item::MergeFrom(from.trade_item());
    }
    if (from.has_mount_data()) {
      mutable_mount_data()->::proto::common::mount_data::MergeFrom(from.mount_data());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_country_bounty()) {
      mutable_country_bounty()->::proto::common::country_bounty_data::MergeFrom(from.country_bounty());
    }
    if (from.has_activities_data()) {
      mutable_activities_data()->::proto::common::activities_data::MergeFrom(from.activities_data());
    }
    if (from.has_arena_role_data()) {
      mutable_arena_role_data()->::proto::common::arena_role_data::MergeFrom(from.arena_role_data());
    }
    if (from.has_achieve()) {
      mutable_achieve()->::proto::common::achieve_data::MergeFrom(from.achieve());
    }
    if (from.has_tower()) {
      mutable_tower()->::proto::common::tower_data::MergeFrom(from.tower());
    }
    if (from.has_luckydraw()) {
      mutable_luckydraw()->::proto::common::luckydraw_data::MergeFrom(from.luckydraw());
    }
    if (from.has_dungeon_data()) {
      mutable_dungeon_data()->::proto::common::role_all_dungeon_data::MergeFrom(from.dungeon_data());
    }
    if (from.has_expedition_data()) {
      mutable_expedition_data()->::proto::common::expedition_data::MergeFrom(from.expedition_data());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_active_reward_data()) {
      mutable_active_reward_data()->::proto::common::active_reward_data::MergeFrom(from.active_reward_data());
    }
    if (from.has_random_shop_data()) {
      mutable_random_shop_data()->::proto::common::role_random_shop_data::MergeFrom(from.random_shop_data());
    }
    if (from.has_level_rwd_data()) {
      mutable_level_rwd_data()->::proto::common::level_reward_recived_list::MergeFrom(from.level_rwd_data());
    }
    if (from.has_level_rwd_mail_data()) {
      mutable_level_rwd_mail_data()->::proto::common::level_reward_mail_recived_list::MergeFrom(from.level_rwd_mail_data());
    }
    if (from.has_bussiness_act_data()) {
      mutable_bussiness_act_data()->::proto::common::bussiness_act_data::MergeFrom(from.bussiness_act_data());
    }
    if (from.has_liandan_data()) {
      mutable_liandan_data()->::proto::common::liandan_data::MergeFrom(from.liandan_data());
    }
    if (from.has_equip_plan_data()) {
      mutable_equip_plan_data()->::proto::common::equip_plan_data::MergeFrom(from.equip_plan_data());
    }
    if (from.has_patrol_data()) {
      mutable_patrol_data()->::proto::common::patrol_hire_data::MergeFrom(from.patrol_data());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_dungeon_times_data()) {
      mutable_dungeon_times_data()->::proto::common::role_all_dungeon_times_data::MergeFrom(from.dungeon_times_data());
    }
    if (from.has_family_skill_data()) {
      mutable_family_skill_data()->::proto::common::family_skill_data::MergeFrom(from.family_skill_data());
    }
    if (from.has_general_event_data()) {
      mutable_general_event_data()->::proto::common::general_event_save_data::MergeFrom(from.general_event_data());
    }
    if (from.has_recharge_data()) {
      mutable_recharge_data()->::proto::common::recharge_data::MergeFrom(from.recharge_data());
    }
    if (from.has_office_data()) {
      mutable_office_data()->::proto::common::office_data::MergeFrom(from.office_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void dg_role_data_reply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void dg_role_data_reply::CopyFrom(const dg_role_data_reply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool dg_role_data_reply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void dg_role_data_reply::Swap(dg_role_data_reply* other) {
  if (other != this) {
    std::swap(reply_code_, other->reply_code_);
    std::swap(role_, other->role_);
    std::swap(item_, other->item_);
    std::swap(hero_, other->hero_);
    std::swap(formation_, other->formation_);
    std::swap(task_, other->task_);
    std::swap(trade_item_, other->trade_item_);
    std::swap(mount_data_, other->mount_data_);
    std::swap(country_bounty_, other->country_bounty_);
    std::swap(activities_data_, other->activities_data_);
    std::swap(arena_role_data_, other->arena_role_data_);
    std::swap(achieve_, other->achieve_);
    std::swap(tower_, other->tower_);
    std::swap(luckydraw_, other->luckydraw_);
    std::swap(dungeon_data_, other->dungeon_data_);
    std::swap(expedition_data_, other->expedition_data_);
    std::swap(active_reward_data_, other->active_reward_data_);
    std::swap(random_shop_data_, other->random_shop_data_);
    std::swap(level_rwd_data_, other->level_rwd_data_);
    std::swap(level_rwd_mail_data_, other->level_rwd_mail_data_);
    std::swap(bussiness_act_data_, other->bussiness_act_data_);
    std::swap(liandan_data_, other->liandan_data_);
    std::swap(equip_plan_data_, other->equip_plan_data_);
    std::swap(patrol_data_, other->patrol_data_);
    std::swap(dungeon_times_data_, other->dungeon_times_data_);
    std::swap(family_skill_data_, other->family_skill_data_);
    std::swap(general_event_data_, other->general_event_data_);
    std::swap(recharge_data_, other->recharge_data_);
    std::swap(office_data_, other->office_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata dg_role_data_reply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = dg_role_data_reply_descriptor_;
  metadata.reflection = dg_role_data_reply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int al_update_gate_user_num_notify::kNumFieldNumber;
#endif  // !_MSC_VER

al_update_gate_user_num_notify::al_update_gate_user_num_notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void al_update_gate_user_num_notify::InitAsDefaultInstance() {
}

al_update_gate_user_num_notify::al_update_gate_user_num_notify(const al_update_gate_user_num_notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void al_update_gate_user_num_notify::SharedCtor() {
  _cached_size_ = 0;
  num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

al_update_gate_user_num_notify::~al_update_gate_user_num_notify() {
  SharedDtor();
}

void al_update_gate_user_num_notify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void al_update_gate_user_num_notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* al_update_gate_user_num_notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return al_update_gate_user_num_notify_descriptor_;
}

const al_update_gate_user_num_notify& al_update_gate_user_num_notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

al_update_gate_user_num_notify* al_update_gate_user_num_notify::default_instance_ = NULL;

al_update_gate_user_num_notify* al_update_gate_user_num_notify::New() const {
  return new al_update_gate_user_num_notify;
}

void al_update_gate_user_num_notify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    num_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool al_update_gate_user_num_notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 num = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void al_update_gate_user_num_notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 num = 1;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* al_update_gate_user_num_notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 num = 1;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int al_update_gate_user_num_notify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 num = 1;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void al_update_gate_user_num_notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const al_update_gate_user_num_notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const al_update_gate_user_num_notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void al_update_gate_user_num_notify::MergeFrom(const al_update_gate_user_num_notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void al_update_gate_user_num_notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void al_update_gate_user_num_notify::CopyFrom(const al_update_gate_user_num_notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool al_update_gate_user_num_notify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void al_update_gate_user_num_notify::Swap(al_update_gate_user_num_notify* other) {
  if (other != this) {
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata al_update_gate_user_num_notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = al_update_gate_user_num_notify_descriptor_;
  metadata.reflection = al_update_gate_user_num_notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int de_user_data_reply::kNameFieldNumber;
const int de_user_data_reply::kLevelFieldNumber;
#endif  // !_MSC_VER

de_user_data_reply::de_user_data_reply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void de_user_data_reply::InitAsDefaultInstance() {
}

de_user_data_reply::de_user_data_reply(const de_user_data_reply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void de_user_data_reply::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  level_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

de_user_data_reply::~de_user_data_reply() {
  SharedDtor();
}

void de_user_data_reply::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void de_user_data_reply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* de_user_data_reply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return de_user_data_reply_descriptor_;
}

const de_user_data_reply& de_user_data_reply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

de_user_data_reply* de_user_data_reply::default_instance_ = NULL;

de_user_data_reply* de_user_data_reply::New() const {
  return new de_user_data_reply;
}

void de_user_data_reply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    level_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool de_user_data_reply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }

      // required uint32 level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void de_user_data_reply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // required uint32 level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->level(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* de_user_data_reply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required uint32 level = 2;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->level(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int de_user_data_reply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required uint32 level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void de_user_data_reply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const de_user_data_reply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const de_user_data_reply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void de_user_data_reply::MergeFrom(const de_user_data_reply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void de_user_data_reply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void de_user_data_reply::CopyFrom(const de_user_data_reply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool de_user_data_reply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void de_user_data_reply::Swap(de_user_data_reply* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(level_, other->level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata de_user_data_reply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = de_user_data_reply_descriptor_;
  metadata.reflection = de_user_data_reply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

de_user_center_data_reply::de_user_center_data_reply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void de_user_center_data_reply::InitAsDefaultInstance() {
}

de_user_center_data_reply::de_user_center_data_reply(const de_user_center_data_reply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void de_user_center_data_reply::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

de_user_center_data_reply::~de_user_center_data_reply() {
  SharedDtor();
}

void de_user_center_data_reply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void de_user_center_data_reply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* de_user_center_data_reply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return de_user_center_data_reply_descriptor_;
}

const de_user_center_data_reply& de_user_center_data_reply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

de_user_center_data_reply* de_user_center_data_reply::default_instance_ = NULL;

de_user_center_data_reply* de_user_center_data_reply::New() const {
  return new de_user_center_data_reply;
}

void de_user_center_data_reply::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool de_user_center_data_reply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void de_user_center_data_reply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* de_user_center_data_reply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int de_user_center_data_reply::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void de_user_center_data_reply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const de_user_center_data_reply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const de_user_center_data_reply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void de_user_center_data_reply::MergeFrom(const de_user_center_data_reply& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void de_user_center_data_reply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void de_user_center_data_reply::CopyFrom(const de_user_center_data_reply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool de_user_center_data_reply::IsInitialized() const {

  return true;
}

void de_user_center_data_reply::Swap(de_user_center_data_reply* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata de_user_center_data_reply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = de_user_center_data_reply_descriptor_;
  metadata.reflection = de_user_center_data_reply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

ed_sync_role_data_request::ed_sync_role_data_request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ed_sync_role_data_request::InitAsDefaultInstance() {
}

ed_sync_role_data_request::ed_sync_role_data_request(const ed_sync_role_data_request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ed_sync_role_data_request::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ed_sync_role_data_request::~ed_sync_role_data_request() {
  SharedDtor();
}

void ed_sync_role_data_request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ed_sync_role_data_request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ed_sync_role_data_request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ed_sync_role_data_request_descriptor_;
}

const ed_sync_role_data_request& ed_sync_role_data_request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

ed_sync_role_data_request* ed_sync_role_data_request::default_instance_ = NULL;

ed_sync_role_data_request* ed_sync_role_data_request::New() const {
  return new ed_sync_role_data_request;
}

void ed_sync_role_data_request::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ed_sync_role_data_request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void ed_sync_role_data_request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ed_sync_role_data_request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ed_sync_role_data_request::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ed_sync_role_data_request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ed_sync_role_data_request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ed_sync_role_data_request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ed_sync_role_data_request::MergeFrom(const ed_sync_role_data_request& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ed_sync_role_data_request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ed_sync_role_data_request::CopyFrom(const ed_sync_role_data_request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ed_sync_role_data_request::IsInitialized() const {

  return true;
}

void ed_sync_role_data_request::Swap(ed_sync_role_data_request* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ed_sync_role_data_request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ed_sync_role_data_request_descriptor_;
  metadata.reflection = ed_sync_role_data_request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

ag_save_user_notify::ag_save_user_notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ag_save_user_notify::InitAsDefaultInstance() {
}

ag_save_user_notify::ag_save_user_notify(const ag_save_user_notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ag_save_user_notify::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ag_save_user_notify::~ag_save_user_notify() {
  SharedDtor();
}

void ag_save_user_notify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ag_save_user_notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ag_save_user_notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ag_save_user_notify_descriptor_;
}

const ag_save_user_notify& ag_save_user_notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

ag_save_user_notify* ag_save_user_notify::default_instance_ = NULL;

ag_save_user_notify* ag_save_user_notify::New() const {
  return new ag_save_user_notify;
}

void ag_save_user_notify::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ag_save_user_notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void ag_save_user_notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ag_save_user_notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ag_save_user_notify::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ag_save_user_notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ag_save_user_notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ag_save_user_notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ag_save_user_notify::MergeFrom(const ag_save_user_notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ag_save_user_notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ag_save_user_notify::CopyFrom(const ag_save_user_notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ag_save_user_notify::IsInitialized() const {

  return true;
}

void ag_save_user_notify::Swap(ag_save_user_notify* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ag_save_user_notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ag_save_user_notify_descriptor_;
  metadata.reflection = ag_save_user_notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ln_syn_login_info_notify::kServerIdFieldNumber;
const int ln_syn_login_info_notify::kLoginIpFieldNumber;
const int ln_syn_login_info_notify::kLoginPortFieldNumber;
const int ln_syn_login_info_notify::kServerNameFieldNumber;
const int ln_syn_login_info_notify::kCanCreateNewRoleFieldNumber;
#endif  // !_MSC_VER

ln_syn_login_info_notify::ln_syn_login_info_notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ln_syn_login_info_notify::InitAsDefaultInstance() {
}

ln_syn_login_info_notify::ln_syn_login_info_notify(const ln_syn_login_info_notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ln_syn_login_info_notify::SharedCtor() {
  _cached_size_ = 0;
  server_id_ = 0u;
  login_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  login_port_ = 0u;
  server_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  can_create_new_role_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ln_syn_login_info_notify::~ln_syn_login_info_notify() {
  SharedDtor();
}

void ln_syn_login_info_notify::SharedDtor() {
  if (login_ip_ != &::google::protobuf::internal::kEmptyString) {
    delete login_ip_;
  }
  if (server_name_ != &::google::protobuf::internal::kEmptyString) {
    delete server_name_;
  }
  if (this != default_instance_) {
  }
}

void ln_syn_login_info_notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ln_syn_login_info_notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ln_syn_login_info_notify_descriptor_;
}

const ln_syn_login_info_notify& ln_syn_login_info_notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

ln_syn_login_info_notify* ln_syn_login_info_notify::default_instance_ = NULL;

ln_syn_login_info_notify* ln_syn_login_info_notify::New() const {
  return new ln_syn_login_info_notify;
}

void ln_syn_login_info_notify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    server_id_ = 0u;
    if (has_login_ip()) {
      if (login_ip_ != &::google::protobuf::internal::kEmptyString) {
        login_ip_->clear();
      }
    }
    login_port_ = 0u;
    if (has_server_name()) {
      if (server_name_ != &::google::protobuf::internal::kEmptyString) {
        server_name_->clear();
      }
    }
    can_create_new_role_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ln_syn_login_info_notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 server_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_id_)));
          set_has_server_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_login_ip;
        break;
      }

      // optional string login_ip = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_login_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_login_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->login_ip().data(), this->login_ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_login_port;
        break;
      }

      // optional uint32 login_port = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_login_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &login_port_)));
          set_has_login_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_server_name;
        break;
      }

      // optional string server_name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_server_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_server_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->server_name().data(), this->server_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_can_create_new_role;
        break;
      }

      // optional uint32 can_create_new_role = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_can_create_new_role:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &can_create_new_role_)));
          set_has_can_create_new_role();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ln_syn_login_info_notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 server_id = 1;
  if (has_server_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->server_id(), output);
  }

  // optional string login_ip = 2;
  if (has_login_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->login_ip().data(), this->login_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->login_ip(), output);
  }

  // optional uint32 login_port = 3;
  if (has_login_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->login_port(), output);
  }

  // optional string server_name = 4;
  if (has_server_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->server_name().data(), this->server_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->server_name(), output);
  }

  // optional uint32 can_create_new_role = 5;
  if (has_can_create_new_role()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->can_create_new_role(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ln_syn_login_info_notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 server_id = 1;
  if (has_server_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->server_id(), target);
  }

  // optional string login_ip = 2;
  if (has_login_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->login_ip().data(), this->login_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->login_ip(), target);
  }

  // optional uint32 login_port = 3;
  if (has_login_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->login_port(), target);
  }

  // optional string server_name = 4;
  if (has_server_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->server_name().data(), this->server_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->server_name(), target);
  }

  // optional uint32 can_create_new_role = 5;
  if (has_can_create_new_role()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->can_create_new_role(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ln_syn_login_info_notify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 server_id = 1;
    if (has_server_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_id());
    }

    // optional string login_ip = 2;
    if (has_login_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->login_ip());
    }

    // optional uint32 login_port = 3;
    if (has_login_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->login_port());
    }

    // optional string server_name = 4;
    if (has_server_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->server_name());
    }

    // optional uint32 can_create_new_role = 5;
    if (has_can_create_new_role()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->can_create_new_role());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ln_syn_login_info_notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ln_syn_login_info_notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ln_syn_login_info_notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ln_syn_login_info_notify::MergeFrom(const ln_syn_login_info_notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_server_id()) {
      set_server_id(from.server_id());
    }
    if (from.has_login_ip()) {
      set_login_ip(from.login_ip());
    }
    if (from.has_login_port()) {
      set_login_port(from.login_port());
    }
    if (from.has_server_name()) {
      set_server_name(from.server_name());
    }
    if (from.has_can_create_new_role()) {
      set_can_create_new_role(from.can_create_new_role());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ln_syn_login_info_notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ln_syn_login_info_notify::CopyFrom(const ln_syn_login_info_notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ln_syn_login_info_notify::IsInitialized() const {

  return true;
}

void ln_syn_login_info_notify::Swap(ln_syn_login_info_notify* other) {
  if (other != this) {
    std::swap(server_id_, other->server_id_);
    std::swap(login_ip_, other->login_ip_);
    std::swap(login_port_, other->login_port_);
    std::swap(server_name_, other->server_name_);
    std::swap(can_create_new_role_, other->can_create_new_role_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ln_syn_login_info_notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ln_syn_login_info_notify_descriptor_;
  metadata.reflection = ln_syn_login_info_notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ln_close_server_notify::kServerIdFieldNumber;
#endif  // !_MSC_VER

ln_close_server_notify::ln_close_server_notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ln_close_server_notify::InitAsDefaultInstance() {
}

ln_close_server_notify::ln_close_server_notify(const ln_close_server_notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ln_close_server_notify::SharedCtor() {
  _cached_size_ = 0;
  server_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ln_close_server_notify::~ln_close_server_notify() {
  SharedDtor();
}

void ln_close_server_notify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ln_close_server_notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ln_close_server_notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ln_close_server_notify_descriptor_;
}

const ln_close_server_notify& ln_close_server_notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

ln_close_server_notify* ln_close_server_notify::default_instance_ = NULL;

ln_close_server_notify* ln_close_server_notify::New() const {
  return new ln_close_server_notify;
}

void ln_close_server_notify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    server_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ln_close_server_notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 server_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_id_)));
          set_has_server_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ln_close_server_notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 server_id = 1;
  if (has_server_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->server_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ln_close_server_notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 server_id = 1;
  if (has_server_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->server_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ln_close_server_notify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 server_id = 1;
    if (has_server_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ln_close_server_notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ln_close_server_notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ln_close_server_notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ln_close_server_notify::MergeFrom(const ln_close_server_notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_server_id()) {
      set_server_id(from.server_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ln_close_server_notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ln_close_server_notify::CopyFrom(const ln_close_server_notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ln_close_server_notify::IsInitialized() const {

  return true;
}

void ln_close_server_notify::Swap(ln_close_server_notify* other) {
  if (other != this) {
    std::swap(server_id_, other->server_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ln_close_server_notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ln_close_server_notify_descriptor_;
  metadata.reflection = ln_close_server_notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ln_user_num_notify::kServerIdFieldNumber;
const int ln_user_num_notify::kUserNumFieldNumber;
#endif  // !_MSC_VER

ln_user_num_notify::ln_user_num_notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ln_user_num_notify::InitAsDefaultInstance() {
}

ln_user_num_notify::ln_user_num_notify(const ln_user_num_notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ln_user_num_notify::SharedCtor() {
  _cached_size_ = 0;
  server_id_ = 0u;
  user_num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ln_user_num_notify::~ln_user_num_notify() {
  SharedDtor();
}

void ln_user_num_notify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ln_user_num_notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ln_user_num_notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ln_user_num_notify_descriptor_;
}

const ln_user_num_notify& ln_user_num_notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

ln_user_num_notify* ln_user_num_notify::default_instance_ = NULL;

ln_user_num_notify* ln_user_num_notify::New() const {
  return new ln_user_num_notify;
}

void ln_user_num_notify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    server_id_ = 0u;
    user_num_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ln_user_num_notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 server_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_id_)));
          set_has_server_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_user_num;
        break;
      }

      // optional uint32 user_num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_user_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_num_)));
          set_has_user_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ln_user_num_notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 server_id = 1;
  if (has_server_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->server_id(), output);
  }

  // optional uint32 user_num = 2;
  if (has_user_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->user_num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ln_user_num_notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 server_id = 1;
  if (has_server_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->server_id(), target);
  }

  // optional uint32 user_num = 2;
  if (has_user_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->user_num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ln_user_num_notify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 server_id = 1;
    if (has_server_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_id());
    }

    // optional uint32 user_num = 2;
    if (has_user_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ln_user_num_notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ln_user_num_notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ln_user_num_notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ln_user_num_notify::MergeFrom(const ln_user_num_notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_server_id()) {
      set_server_id(from.server_id());
    }
    if (from.has_user_num()) {
      set_user_num(from.user_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ln_user_num_notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ln_user_num_notify::CopyFrom(const ln_user_num_notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ln_user_num_notify::IsInitialized() const {

  return true;
}

void ln_user_num_notify::Swap(ln_user_num_notify* other) {
  if (other != this) {
    std::swap(server_id_, other->server_id_);
    std::swap(user_num_, other->user_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ln_user_num_notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ln_user_num_notify_descriptor_;
  metadata.reflection = ln_user_num_notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ag_syn_gate_info_notify::kGateIdFieldNumber;
const int ag_syn_gate_info_notify::kServerIdFieldNumber;
#endif  // !_MSC_VER

ag_syn_gate_info_notify::ag_syn_gate_info_notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ag_syn_gate_info_notify::InitAsDefaultInstance() {
}

ag_syn_gate_info_notify::ag_syn_gate_info_notify(const ag_syn_gate_info_notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ag_syn_gate_info_notify::SharedCtor() {
  _cached_size_ = 0;
  gate_id_ = 0u;
  server_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ag_syn_gate_info_notify::~ag_syn_gate_info_notify() {
  SharedDtor();
}

void ag_syn_gate_info_notify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ag_syn_gate_info_notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ag_syn_gate_info_notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ag_syn_gate_info_notify_descriptor_;
}

const ag_syn_gate_info_notify& ag_syn_gate_info_notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

ag_syn_gate_info_notify* ag_syn_gate_info_notify::default_instance_ = NULL;

ag_syn_gate_info_notify* ag_syn_gate_info_notify::New() const {
  return new ag_syn_gate_info_notify;
}

void ag_syn_gate_info_notify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gate_id_ = 0u;
    server_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ag_syn_gate_info_notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 gate_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gate_id_)));
          set_has_gate_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_server_id;
        break;
      }

      // optional uint32 server_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_server_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_id_)));
          set_has_server_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ag_syn_gate_info_notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 gate_id = 1;
  if (has_gate_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gate_id(), output);
  }

  // optional uint32 server_id = 2;
  if (has_server_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->server_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ag_syn_gate_info_notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 gate_id = 1;
  if (has_gate_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->gate_id(), target);
  }

  // optional uint32 server_id = 2;
  if (has_server_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->server_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ag_syn_gate_info_notify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 gate_id = 1;
    if (has_gate_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gate_id());
    }

    // optional uint32 server_id = 2;
    if (has_server_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ag_syn_gate_info_notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ag_syn_gate_info_notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ag_syn_gate_info_notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ag_syn_gate_info_notify::MergeFrom(const ag_syn_gate_info_notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gate_id()) {
      set_gate_id(from.gate_id());
    }
    if (from.has_server_id()) {
      set_server_id(from.server_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ag_syn_gate_info_notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ag_syn_gate_info_notify::CopyFrom(const ag_syn_gate_info_notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ag_syn_gate_info_notify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ag_syn_gate_info_notify::Swap(ag_syn_gate_info_notify* other) {
  if (other != this) {
    std::swap(gate_id_, other->gate_id_);
    std::swap(server_id_, other->server_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ag_syn_gate_info_notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ag_syn_gate_info_notify_descriptor_;
  metadata.reflection = ag_syn_gate_info_notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int gh_syn_online_role_notify::kChatInfoFieldNumber;
#endif  // !_MSC_VER

gh_syn_online_role_notify::gh_syn_online_role_notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gh_syn_online_role_notify::InitAsDefaultInstance() {
  chat_info_ = const_cast< ::proto::common::chat_syn_user_info*>(&::proto::common::chat_syn_user_info::default_instance());
}

gh_syn_online_role_notify::gh_syn_online_role_notify(const gh_syn_online_role_notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gh_syn_online_role_notify::SharedCtor() {
  _cached_size_ = 0;
  chat_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gh_syn_online_role_notify::~gh_syn_online_role_notify() {
  SharedDtor();
}

void gh_syn_online_role_notify::SharedDtor() {
  if (this != default_instance_) {
    delete chat_info_;
  }
}

void gh_syn_online_role_notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gh_syn_online_role_notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gh_syn_online_role_notify_descriptor_;
}

const gh_syn_online_role_notify& gh_syn_online_role_notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

gh_syn_online_role_notify* gh_syn_online_role_notify::default_instance_ = NULL;

gh_syn_online_role_notify* gh_syn_online_role_notify::New() const {
  return new gh_syn_online_role_notify;
}

void gh_syn_online_role_notify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_chat_info()) {
      if (chat_info_ != NULL) chat_info_->::proto::common::chat_syn_user_info::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gh_syn_online_role_notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .proto.common.chat_syn_user_info chat_info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_chat_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gh_syn_online_role_notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .proto.common.chat_syn_user_info chat_info = 1;
  if (has_chat_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->chat_info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gh_syn_online_role_notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .proto.common.chat_syn_user_info chat_info = 1;
  if (has_chat_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->chat_info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gh_syn_online_role_notify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .proto.common.chat_syn_user_info chat_info = 1;
    if (has_chat_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->chat_info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gh_syn_online_role_notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gh_syn_online_role_notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gh_syn_online_role_notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gh_syn_online_role_notify::MergeFrom(const gh_syn_online_role_notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chat_info()) {
      mutable_chat_info()->::proto::common::chat_syn_user_info::MergeFrom(from.chat_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gh_syn_online_role_notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gh_syn_online_role_notify::CopyFrom(const gh_syn_online_role_notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gh_syn_online_role_notify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void gh_syn_online_role_notify::Swap(gh_syn_online_role_notify* other) {
  if (other != this) {
    std::swap(chat_info_, other->chat_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gh_syn_online_role_notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gh_syn_online_role_notify_descriptor_;
  metadata.reflection = gh_syn_online_role_notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

hg_test_notify::hg_test_notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void hg_test_notify::InitAsDefaultInstance() {
}

hg_test_notify::hg_test_notify(const hg_test_notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void hg_test_notify::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

hg_test_notify::~hg_test_notify() {
  SharedDtor();
}

void hg_test_notify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void hg_test_notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* hg_test_notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return hg_test_notify_descriptor_;
}

const hg_test_notify& hg_test_notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

hg_test_notify* hg_test_notify::default_instance_ = NULL;

hg_test_notify* hg_test_notify::New() const {
  return new hg_test_notify;
}

void hg_test_notify::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool hg_test_notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void hg_test_notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* hg_test_notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int hg_test_notify::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void hg_test_notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const hg_test_notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const hg_test_notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void hg_test_notify::MergeFrom(const hg_test_notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void hg_test_notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void hg_test_notify::CopyFrom(const hg_test_notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool hg_test_notify::IsInitialized() const {

  return true;
}

void hg_test_notify::Swap(hg_test_notify* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata hg_test_notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = hg_test_notify_descriptor_;
  metadata.reflection = hg_test_notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ah_syn_gate_info_notify::kGateIdFieldNumber;
#endif  // !_MSC_VER

ah_syn_gate_info_notify::ah_syn_gate_info_notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ah_syn_gate_info_notify::InitAsDefaultInstance() {
}

ah_syn_gate_info_notify::ah_syn_gate_info_notify(const ah_syn_gate_info_notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ah_syn_gate_info_notify::SharedCtor() {
  _cached_size_ = 0;
  gate_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ah_syn_gate_info_notify::~ah_syn_gate_info_notify() {
  SharedDtor();
}

void ah_syn_gate_info_notify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ah_syn_gate_info_notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ah_syn_gate_info_notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ah_syn_gate_info_notify_descriptor_;
}

const ah_syn_gate_info_notify& ah_syn_gate_info_notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

ah_syn_gate_info_notify* ah_syn_gate_info_notify::default_instance_ = NULL;

ah_syn_gate_info_notify* ah_syn_gate_info_notify::New() const {
  return new ah_syn_gate_info_notify;
}

void ah_syn_gate_info_notify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gate_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ah_syn_gate_info_notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 gate_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gate_id_)));
          set_has_gate_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ah_syn_gate_info_notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 gate_id = 1;
  if (has_gate_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gate_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ah_syn_gate_info_notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 gate_id = 1;
  if (has_gate_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->gate_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ah_syn_gate_info_notify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 gate_id = 1;
    if (has_gate_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gate_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ah_syn_gate_info_notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ah_syn_gate_info_notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ah_syn_gate_info_notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ah_syn_gate_info_notify::MergeFrom(const ah_syn_gate_info_notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gate_id()) {
      set_gate_id(from.gate_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ah_syn_gate_info_notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ah_syn_gate_info_notify::CopyFrom(const ah_syn_gate_info_notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ah_syn_gate_info_notify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ah_syn_gate_info_notify::Swap(ah_syn_gate_info_notify* other) {
  if (other != this) {
    std::swap(gate_id_, other->gate_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ah_syn_gate_info_notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ah_syn_gate_info_notify_descriptor_;
  metadata.reflection = ah_syn_gate_info_notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

ha_test_reply::ha_test_reply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ha_test_reply::InitAsDefaultInstance() {
}

ha_test_reply::ha_test_reply(const ha_test_reply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ha_test_reply::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ha_test_reply::~ha_test_reply() {
  SharedDtor();
}

void ha_test_reply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ha_test_reply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ha_test_reply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ha_test_reply_descriptor_;
}

const ha_test_reply& ha_test_reply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

ha_test_reply* ha_test_reply::default_instance_ = NULL;

ha_test_reply* ha_test_reply::New() const {
  return new ha_test_reply;
}

void ha_test_reply::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ha_test_reply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void ha_test_reply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ha_test_reply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ha_test_reply::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ha_test_reply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ha_test_reply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ha_test_reply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ha_test_reply::MergeFrom(const ha_test_reply& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ha_test_reply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ha_test_reply::CopyFrom(const ha_test_reply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ha_test_reply::IsInitialized() const {

  return true;
}

void ha_test_reply::Swap(ha_test_reply* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ha_test_reply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ha_test_reply_descriptor_;
  metadata.reflection = ha_test_reply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int gh_syn_game_info_notify::kGameIdFieldNumber;
#endif  // !_MSC_VER

gh_syn_game_info_notify::gh_syn_game_info_notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gh_syn_game_info_notify::InitAsDefaultInstance() {
}

gh_syn_game_info_notify::gh_syn_game_info_notify(const gh_syn_game_info_notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gh_syn_game_info_notify::SharedCtor() {
  _cached_size_ = 0;
  game_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gh_syn_game_info_notify::~gh_syn_game_info_notify() {
  SharedDtor();
}

void gh_syn_game_info_notify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void gh_syn_game_info_notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gh_syn_game_info_notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gh_syn_game_info_notify_descriptor_;
}

const gh_syn_game_info_notify& gh_syn_game_info_notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

gh_syn_game_info_notify* gh_syn_game_info_notify::default_instance_ = NULL;

gh_syn_game_info_notify* gh_syn_game_info_notify::New() const {
  return new gh_syn_game_info_notify;
}

void gh_syn_game_info_notify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    game_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gh_syn_game_info_notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 game_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_id_)));
          set_has_game_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gh_syn_game_info_notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 game_id = 1;
  if (has_game_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->game_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gh_syn_game_info_notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 game_id = 1;
  if (has_game_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->game_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gh_syn_game_info_notify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 game_id = 1;
    if (has_game_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gh_syn_game_info_notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gh_syn_game_info_notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gh_syn_game_info_notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gh_syn_game_info_notify::MergeFrom(const gh_syn_game_info_notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_game_id()) {
      set_game_id(from.game_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gh_syn_game_info_notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gh_syn_game_info_notify::CopyFrom(const gh_syn_game_info_notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gh_syn_game_info_notify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void gh_syn_game_info_notify::Swap(gh_syn_game_info_notify* other) {
  if (other != this) {
    std::swap(game_id_, other->game_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gh_syn_game_info_notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gh_syn_game_info_notify_descriptor_;
  metadata.reflection = gh_syn_game_info_notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int hg_chat_get_role_info_request::kParamListFieldNumber;
const int hg_chat_get_role_info_request::kChatNotifyFieldNumber;
#endif  // !_MSC_VER

hg_chat_get_role_info_request::hg_chat_get_role_info_request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void hg_chat_get_role_info_request::InitAsDefaultInstance() {
  chat_notify_ = const_cast< ::proto::common::chat_common_data*>(&::proto::common::chat_common_data::default_instance());
}

hg_chat_get_role_info_request::hg_chat_get_role_info_request(const hg_chat_get_role_info_request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void hg_chat_get_role_info_request::SharedCtor() {
  _cached_size_ = 0;
  chat_notify_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

hg_chat_get_role_info_request::~hg_chat_get_role_info_request() {
  SharedDtor();
}

void hg_chat_get_role_info_request::SharedDtor() {
  if (this != default_instance_) {
    delete chat_notify_;
  }
}

void hg_chat_get_role_info_request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* hg_chat_get_role_info_request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return hg_chat_get_role_info_request_descriptor_;
}

const hg_chat_get_role_info_request& hg_chat_get_role_info_request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

hg_chat_get_role_info_request* hg_chat_get_role_info_request::default_instance_ = NULL;

hg_chat_get_role_info_request* hg_chat_get_role_info_request::New() const {
  return new hg_chat_get_role_info_request;
}

void hg_chat_get_role_info_request::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (has_chat_notify()) {
      if (chat_notify_ != NULL) chat_notify_->::proto::common::chat_common_data::Clear();
    }
  }
  param_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool hg_chat_get_role_info_request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.common.chat_param param_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_param_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_param_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_param_list;
        if (input->ExpectTag(18)) goto parse_chat_notify;
        break;
      }

      // required .proto.common.chat_common_data chat_notify = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_chat_notify:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_chat_notify()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void hg_chat_get_role_info_request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto.common.chat_param param_list = 1;
  for (int i = 0; i < this->param_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->param_list(i), output);
  }

  // required .proto.common.chat_common_data chat_notify = 2;
  if (has_chat_notify()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->chat_notify(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* hg_chat_get_role_info_request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto.common.chat_param param_list = 1;
  for (int i = 0; i < this->param_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->param_list(i), target);
  }

  // required .proto.common.chat_common_data chat_notify = 2;
  if (has_chat_notify()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->chat_notify(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int hg_chat_get_role_info_request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required .proto.common.chat_common_data chat_notify = 2;
    if (has_chat_notify()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->chat_notify());
    }

  }
  // repeated .proto.common.chat_param param_list = 1;
  total_size += 1 * this->param_list_size();
  for (int i = 0; i < this->param_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->param_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void hg_chat_get_role_info_request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const hg_chat_get_role_info_request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const hg_chat_get_role_info_request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void hg_chat_get_role_info_request::MergeFrom(const hg_chat_get_role_info_request& from) {
  GOOGLE_CHECK_NE(&from, this);
  param_list_.MergeFrom(from.param_list_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_chat_notify()) {
      mutable_chat_notify()->::proto::common::chat_common_data::MergeFrom(from.chat_notify());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void hg_chat_get_role_info_request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void hg_chat_get_role_info_request::CopyFrom(const hg_chat_get_role_info_request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool hg_chat_get_role_info_request::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  if (has_chat_notify()) {
    if (!this->chat_notify().IsInitialized()) return false;
  }
  return true;
}

void hg_chat_get_role_info_request::Swap(hg_chat_get_role_info_request* other) {
  if (other != this) {
    param_list_.Swap(&other->param_list_);
    std::swap(chat_notify_, other->chat_notify_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata hg_chat_get_role_info_request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = hg_chat_get_role_info_request_descriptor_;
  metadata.reflection = hg_chat_get_role_info_request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int gh_chat_get_role_info_reply::kReplyCodeFieldNumber;
const int gh_chat_get_role_info_reply::kChatRoleInfoFieldNumber;
const int gh_chat_get_role_info_reply::kChatNotifyFieldNumber;
#endif  // !_MSC_VER

gh_chat_get_role_info_reply::gh_chat_get_role_info_reply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gh_chat_get_role_info_reply::InitAsDefaultInstance() {
  chat_role_info_ = const_cast< ::proto::common::chat_common_role_info*>(&::proto::common::chat_common_role_info::default_instance());
  chat_notify_ = const_cast< ::proto::common::chat_common_data*>(&::proto::common::chat_common_data::default_instance());
}

gh_chat_get_role_info_reply::gh_chat_get_role_info_reply(const gh_chat_get_role_info_reply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gh_chat_get_role_info_reply::SharedCtor() {
  _cached_size_ = 0;
  reply_code_ = 0u;
  chat_role_info_ = NULL;
  chat_notify_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gh_chat_get_role_info_reply::~gh_chat_get_role_info_reply() {
  SharedDtor();
}

void gh_chat_get_role_info_reply::SharedDtor() {
  if (this != default_instance_) {
    delete chat_role_info_;
    delete chat_notify_;
  }
}

void gh_chat_get_role_info_reply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gh_chat_get_role_info_reply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gh_chat_get_role_info_reply_descriptor_;
}

const gh_chat_get_role_info_reply& gh_chat_get_role_info_reply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

gh_chat_get_role_info_reply* gh_chat_get_role_info_reply::default_instance_ = NULL;

gh_chat_get_role_info_reply* gh_chat_get_role_info_reply::New() const {
  return new gh_chat_get_role_info_reply;
}

void gh_chat_get_role_info_reply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    reply_code_ = 0u;
    if (has_chat_role_info()) {
      if (chat_role_info_ != NULL) chat_role_info_->::proto::common::chat_common_role_info::Clear();
    }
    if (has_chat_notify()) {
      if (chat_notify_ != NULL) chat_notify_->::proto::common::chat_common_data::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gh_chat_get_role_info_reply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 reply_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reply_code_)));
          set_has_reply_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_chat_role_info;
        break;
      }

      // optional .proto.common.chat_common_role_info chat_role_info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_chat_role_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_chat_role_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_chat_notify;
        break;
      }

      // required .proto.common.chat_common_data chat_notify = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_chat_notify:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_chat_notify()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gh_chat_get_role_info_reply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 reply_code = 1;
  if (has_reply_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->reply_code(), output);
  }

  // optional .proto.common.chat_common_role_info chat_role_info = 2;
  if (has_chat_role_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->chat_role_info(), output);
  }

  // required .proto.common.chat_common_data chat_notify = 3;
  if (has_chat_notify()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->chat_notify(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gh_chat_get_role_info_reply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 reply_code = 1;
  if (has_reply_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->reply_code(), target);
  }

  // optional .proto.common.chat_common_role_info chat_role_info = 2;
  if (has_chat_role_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->chat_role_info(), target);
  }

  // required .proto.common.chat_common_data chat_notify = 3;
  if (has_chat_notify()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->chat_notify(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gh_chat_get_role_info_reply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 reply_code = 1;
    if (has_reply_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reply_code());
    }

    // optional .proto.common.chat_common_role_info chat_role_info = 2;
    if (has_chat_role_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->chat_role_info());
    }

    // required .proto.common.chat_common_data chat_notify = 3;
    if (has_chat_notify()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->chat_notify());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gh_chat_get_role_info_reply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gh_chat_get_role_info_reply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gh_chat_get_role_info_reply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gh_chat_get_role_info_reply::MergeFrom(const gh_chat_get_role_info_reply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reply_code()) {
      set_reply_code(from.reply_code());
    }
    if (from.has_chat_role_info()) {
      mutable_chat_role_info()->::proto::common::chat_common_role_info::MergeFrom(from.chat_role_info());
    }
    if (from.has_chat_notify()) {
      mutable_chat_notify()->::proto::common::chat_common_data::MergeFrom(from.chat_notify());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gh_chat_get_role_info_reply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gh_chat_get_role_info_reply::CopyFrom(const gh_chat_get_role_info_reply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gh_chat_get_role_info_reply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000004) != 0x00000004) return false;

  if (has_chat_notify()) {
    if (!this->chat_notify().IsInitialized()) return false;
  }
  return true;
}

void gh_chat_get_role_info_reply::Swap(gh_chat_get_role_info_reply* other) {
  if (other != this) {
    std::swap(reply_code_, other->reply_code_);
    std::swap(chat_role_info_, other->chat_role_info_);
    std::swap(chat_notify_, other->chat_notify_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gh_chat_get_role_info_reply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gh_chat_get_role_info_reply_descriptor_;
  metadata.reflection = gh_chat_get_role_info_reply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int hg_get_nearby_roles_request::kChatChannelFieldNumber;
const int hg_get_nearby_roles_request::kChatInfoFieldNumber;
const int hg_get_nearby_roles_request::kHeadIconIdFieldNumber;
const int hg_get_nearby_roles_request::kRoleLevelFieldNumber;
const int hg_get_nearby_roles_request::kParamFieldNumber;
const int hg_get_nearby_roles_request::kChatRoleInfoFieldNumber;
#endif  // !_MSC_VER

hg_get_nearby_roles_request::hg_get_nearby_roles_request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void hg_get_nearby_roles_request::InitAsDefaultInstance() {
  chat_role_info_ = const_cast< ::proto::common::chat_common_role_info*>(&::proto::common::chat_common_role_info::default_instance());
}

hg_get_nearby_roles_request::hg_get_nearby_roles_request(const hg_get_nearby_roles_request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void hg_get_nearby_roles_request::SharedCtor() {
  _cached_size_ = 0;
  chat_channel_ = 2;
  chat_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  head_icon_id_ = 0u;
  role_level_ = 0u;
  param_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  chat_role_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

hg_get_nearby_roles_request::~hg_get_nearby_roles_request() {
  SharedDtor();
}

void hg_get_nearby_roles_request::SharedDtor() {
  if (chat_info_ != &::google::protobuf::internal::kEmptyString) {
    delete chat_info_;
  }
  if (param_ != &::google::protobuf::internal::kEmptyString) {
    delete param_;
  }
  if (this != default_instance_) {
    delete chat_role_info_;
  }
}

void hg_get_nearby_roles_request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* hg_get_nearby_roles_request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return hg_get_nearby_roles_request_descriptor_;
}

const hg_get_nearby_roles_request& hg_get_nearby_roles_request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

hg_get_nearby_roles_request* hg_get_nearby_roles_request::default_instance_ = NULL;

hg_get_nearby_roles_request* hg_get_nearby_roles_request::New() const {
  return new hg_get_nearby_roles_request;
}

void hg_get_nearby_roles_request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    chat_channel_ = 2;
    if (has_chat_info()) {
      if (chat_info_ != &::google::protobuf::internal::kEmptyString) {
        chat_info_->clear();
      }
    }
    head_icon_id_ = 0u;
    role_level_ = 0u;
    if (has_param()) {
      if (param_ != &::google::protobuf::internal::kEmptyString) {
        param_->clear();
      }
    }
    if (has_chat_role_info()) {
      if (chat_role_info_ != NULL) chat_role_info_->::proto::common::chat_common_role_info::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool hg_get_nearby_roles_request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.common.chat_channel chat_channel = 1 [default = chat_channel_vicinity];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::common::chat_channel_IsValid(value)) {
            set_chat_channel(static_cast< ::proto::common::chat_channel >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_chat_info;
        break;
      }

      // optional string chat_info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_chat_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_chat_info()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->chat_info().data(), this->chat_info().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_head_icon_id;
        break;
      }

      // optional uint32 head_icon_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_head_icon_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &head_icon_id_)));
          set_has_head_icon_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_role_level;
        break;
      }

      // optional uint32 role_level = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_level_)));
          set_has_role_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_param;
        break;
      }

      // optional string param = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_param()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->param().data(), this->param().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_chat_role_info;
        break;
      }

      // optional .proto.common.chat_common_role_info chat_role_info = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_chat_role_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_chat_role_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void hg_get_nearby_roles_request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .proto.common.chat_channel chat_channel = 1 [default = chat_channel_vicinity];
  if (has_chat_channel()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->chat_channel(), output);
  }

  // optional string chat_info = 2;
  if (has_chat_info()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->chat_info().data(), this->chat_info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->chat_info(), output);
  }

  // optional uint32 head_icon_id = 3;
  if (has_head_icon_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->head_icon_id(), output);
  }

  // optional uint32 role_level = 4;
  if (has_role_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->role_level(), output);
  }

  // optional string param = 5;
  if (has_param()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->param().data(), this->param().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->param(), output);
  }

  // optional .proto.common.chat_common_role_info chat_role_info = 6;
  if (has_chat_role_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->chat_role_info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* hg_get_nearby_roles_request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .proto.common.chat_channel chat_channel = 1 [default = chat_channel_vicinity];
  if (has_chat_channel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->chat_channel(), target);
  }

  // optional string chat_info = 2;
  if (has_chat_info()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->chat_info().data(), this->chat_info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->chat_info(), target);
  }

  // optional uint32 head_icon_id = 3;
  if (has_head_icon_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->head_icon_id(), target);
  }

  // optional uint32 role_level = 4;
  if (has_role_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->role_level(), target);
  }

  // optional string param = 5;
  if (has_param()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->param().data(), this->param().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->param(), target);
  }

  // optional .proto.common.chat_common_role_info chat_role_info = 6;
  if (has_chat_role_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->chat_role_info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int hg_get_nearby_roles_request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .proto.common.chat_channel chat_channel = 1 [default = chat_channel_vicinity];
    if (has_chat_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->chat_channel());
    }

    // optional string chat_info = 2;
    if (has_chat_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->chat_info());
    }

    // optional uint32 head_icon_id = 3;
    if (has_head_icon_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->head_icon_id());
    }

    // optional uint32 role_level = 4;
    if (has_role_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->role_level());
    }

    // optional string param = 5;
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->param());
    }

    // optional .proto.common.chat_common_role_info chat_role_info = 6;
    if (has_chat_role_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->chat_role_info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void hg_get_nearby_roles_request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const hg_get_nearby_roles_request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const hg_get_nearby_roles_request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void hg_get_nearby_roles_request::MergeFrom(const hg_get_nearby_roles_request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chat_channel()) {
      set_chat_channel(from.chat_channel());
    }
    if (from.has_chat_info()) {
      set_chat_info(from.chat_info());
    }
    if (from.has_head_icon_id()) {
      set_head_icon_id(from.head_icon_id());
    }
    if (from.has_role_level()) {
      set_role_level(from.role_level());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_chat_role_info()) {
      mutable_chat_role_info()->::proto::common::chat_common_role_info::MergeFrom(from.chat_role_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void hg_get_nearby_roles_request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void hg_get_nearby_roles_request::CopyFrom(const hg_get_nearby_roles_request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool hg_get_nearby_roles_request::IsInitialized() const {

  return true;
}

void hg_get_nearby_roles_request::Swap(hg_get_nearby_roles_request* other) {
  if (other != this) {
    std::swap(chat_channel_, other->chat_channel_);
    std::swap(chat_info_, other->chat_info_);
    std::swap(head_icon_id_, other->head_icon_id_);
    std::swap(role_level_, other->role_level_);
    std::swap(param_, other->param_);
    std::swap(chat_role_info_, other->chat_role_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata hg_get_nearby_roles_request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = hg_get_nearby_roles_request_descriptor_;
  metadata.reflection = hg_get_nearby_roles_request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int gh_get_nearby_roles_reply::kReplyCodeFieldNumber;
const int gh_get_nearby_roles_reply::kChatChannelFieldNumber;
const int gh_get_nearby_roles_reply::kChatInfoFieldNumber;
const int gh_get_nearby_roles_reply::kRoleUidsFieldNumber;
const int gh_get_nearby_roles_reply::kHeadIconIdFieldNumber;
const int gh_get_nearby_roles_reply::kRoleLevelFieldNumber;
const int gh_get_nearby_roles_reply::kParamFieldNumber;
const int gh_get_nearby_roles_reply::kChatRoleInfoFieldNumber;
#endif  // !_MSC_VER

gh_get_nearby_roles_reply::gh_get_nearby_roles_reply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gh_get_nearby_roles_reply::InitAsDefaultInstance() {
  chat_role_info_ = const_cast< ::proto::common::chat_common_role_info*>(&::proto::common::chat_common_role_info::default_instance());
}

gh_get_nearby_roles_reply::gh_get_nearby_roles_reply(const gh_get_nearby_roles_reply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gh_get_nearby_roles_reply::SharedCtor() {
  _cached_size_ = 0;
  reply_code_ = 0u;
  chat_channel_ = 2;
  chat_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  head_icon_id_ = 0u;
  role_level_ = 0u;
  param_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  chat_role_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gh_get_nearby_roles_reply::~gh_get_nearby_roles_reply() {
  SharedDtor();
}

void gh_get_nearby_roles_reply::SharedDtor() {
  if (chat_info_ != &::google::protobuf::internal::kEmptyString) {
    delete chat_info_;
  }
  if (param_ != &::google::protobuf::internal::kEmptyString) {
    delete param_;
  }
  if (this != default_instance_) {
    delete chat_role_info_;
  }
}

void gh_get_nearby_roles_reply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gh_get_nearby_roles_reply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gh_get_nearby_roles_reply_descriptor_;
}

const gh_get_nearby_roles_reply& gh_get_nearby_roles_reply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

gh_get_nearby_roles_reply* gh_get_nearby_roles_reply::default_instance_ = NULL;

gh_get_nearby_roles_reply* gh_get_nearby_roles_reply::New() const {
  return new gh_get_nearby_roles_reply;
}

void gh_get_nearby_roles_reply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    reply_code_ = 0u;
    chat_channel_ = 2;
    if (has_chat_info()) {
      if (chat_info_ != &::google::protobuf::internal::kEmptyString) {
        chat_info_->clear();
      }
    }
    head_icon_id_ = 0u;
    role_level_ = 0u;
    if (has_param()) {
      if (param_ != &::google::protobuf::internal::kEmptyString) {
        param_->clear();
      }
    }
    if (has_chat_role_info()) {
      if (chat_role_info_ != NULL) chat_role_info_->::proto::common::chat_common_role_info::Clear();
    }
  }
  role_uids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gh_get_nearby_roles_reply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 reply_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reply_code_)));
          set_has_reply_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_chat_channel;
        break;
      }

      // optional .proto.common.chat_channel chat_channel = 2 [default = chat_channel_vicinity];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chat_channel:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::common::chat_channel_IsValid(value)) {
            set_chat_channel(static_cast< ::proto::common::chat_channel >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_chat_info;
        break;
      }

      // optional string chat_info = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_chat_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_chat_info()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->chat_info().data(), this->chat_info().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_role_uids;
        break;
      }

      // repeated uint64 role_uids = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_uids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 32, input, this->mutable_role_uids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_role_uids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_role_uids;
        if (input->ExpectTag(40)) goto parse_head_icon_id;
        break;
      }

      // optional uint32 head_icon_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_head_icon_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &head_icon_id_)));
          set_has_head_icon_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_role_level;
        break;
      }

      // optional uint32 role_level = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_level_)));
          set_has_role_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_param;
        break;
      }

      // optional string param = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_param()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->param().data(), this->param().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_chat_role_info;
        break;
      }

      // optional .proto.common.chat_common_role_info chat_role_info = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_chat_role_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_chat_role_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gh_get_nearby_roles_reply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 reply_code = 1;
  if (has_reply_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->reply_code(), output);
  }

  // optional .proto.common.chat_channel chat_channel = 2 [default = chat_channel_vicinity];
  if (has_chat_channel()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->chat_channel(), output);
  }

  // optional string chat_info = 3;
  if (has_chat_info()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->chat_info().data(), this->chat_info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->chat_info(), output);
  }

  // repeated uint64 role_uids = 4;
  for (int i = 0; i < this->role_uids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      4, this->role_uids(i), output);
  }

  // optional uint32 head_icon_id = 5;
  if (has_head_icon_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->head_icon_id(), output);
  }

  // optional uint32 role_level = 6;
  if (has_role_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->role_level(), output);
  }

  // optional string param = 7;
  if (has_param()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->param().data(), this->param().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->param(), output);
  }

  // optional .proto.common.chat_common_role_info chat_role_info = 8;
  if (has_chat_role_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->chat_role_info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gh_get_nearby_roles_reply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 reply_code = 1;
  if (has_reply_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->reply_code(), target);
  }

  // optional .proto.common.chat_channel chat_channel = 2 [default = chat_channel_vicinity];
  if (has_chat_channel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->chat_channel(), target);
  }

  // optional string chat_info = 3;
  if (has_chat_info()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->chat_info().data(), this->chat_info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->chat_info(), target);
  }

  // repeated uint64 role_uids = 4;
  for (int i = 0; i < this->role_uids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(4, this->role_uids(i), target);
  }

  // optional uint32 head_icon_id = 5;
  if (has_head_icon_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->head_icon_id(), target);
  }

  // optional uint32 role_level = 6;
  if (has_role_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->role_level(), target);
  }

  // optional string param = 7;
  if (has_param()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->param().data(), this->param().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->param(), target);
  }

  // optional .proto.common.chat_common_role_info chat_role_info = 8;
  if (has_chat_role_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->chat_role_info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gh_get_nearby_roles_reply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 reply_code = 1;
    if (has_reply_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reply_code());
    }

    // optional .proto.common.chat_channel chat_channel = 2 [default = chat_channel_vicinity];
    if (has_chat_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->chat_channel());
    }

    // optional string chat_info = 3;
    if (has_chat_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->chat_info());
    }

    // optional uint32 head_icon_id = 5;
    if (has_head_icon_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->head_icon_id());
    }

    // optional uint32 role_level = 6;
    if (has_role_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->role_level());
    }

    // optional string param = 7;
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->param());
    }

    // optional .proto.common.chat_common_role_info chat_role_info = 8;
    if (has_chat_role_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->chat_role_info());
    }

  }
  // repeated uint64 role_uids = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->role_uids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->role_uids(i));
    }
    total_size += 1 * this->role_uids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gh_get_nearby_roles_reply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gh_get_nearby_roles_reply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gh_get_nearby_roles_reply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gh_get_nearby_roles_reply::MergeFrom(const gh_get_nearby_roles_reply& from) {
  GOOGLE_CHECK_NE(&from, this);
  role_uids_.MergeFrom(from.role_uids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reply_code()) {
      set_reply_code(from.reply_code());
    }
    if (from.has_chat_channel()) {
      set_chat_channel(from.chat_channel());
    }
    if (from.has_chat_info()) {
      set_chat_info(from.chat_info());
    }
    if (from.has_head_icon_id()) {
      set_head_icon_id(from.head_icon_id());
    }
    if (from.has_role_level()) {
      set_role_level(from.role_level());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_chat_role_info()) {
      mutable_chat_role_info()->::proto::common::chat_common_role_info::MergeFrom(from.chat_role_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gh_get_nearby_roles_reply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gh_get_nearby_roles_reply::CopyFrom(const gh_get_nearby_roles_reply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gh_get_nearby_roles_reply::IsInitialized() const {

  return true;
}

void gh_get_nearby_roles_reply::Swap(gh_get_nearby_roles_reply* other) {
  if (other != this) {
    std::swap(reply_code_, other->reply_code_);
    std::swap(chat_channel_, other->chat_channel_);
    std::swap(chat_info_, other->chat_info_);
    role_uids_.Swap(&other->role_uids_);
    std::swap(head_icon_id_, other->head_icon_id_);
    std::swap(role_level_, other->role_level_);
    std::swap(param_, other->param_);
    std::swap(chat_role_info_, other->chat_role_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gh_get_nearby_roles_reply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gh_get_nearby_roles_reply_descriptor_;
  metadata.reflection = gh_get_nearby_roles_reply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int hg_task_seek_help_request::kTaskIdFieldNumber;
#endif  // !_MSC_VER

hg_task_seek_help_request::hg_task_seek_help_request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void hg_task_seek_help_request::InitAsDefaultInstance() {
}

hg_task_seek_help_request::hg_task_seek_help_request(const hg_task_seek_help_request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void hg_task_seek_help_request::SharedCtor() {
  _cached_size_ = 0;
  task_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

hg_task_seek_help_request::~hg_task_seek_help_request() {
  SharedDtor();
}

void hg_task_seek_help_request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void hg_task_seek_help_request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* hg_task_seek_help_request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return hg_task_seek_help_request_descriptor_;
}

const hg_task_seek_help_request& hg_task_seek_help_request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

hg_task_seek_help_request* hg_task_seek_help_request::default_instance_ = NULL;

hg_task_seek_help_request* hg_task_seek_help_request::New() const {
  return new hg_task_seek_help_request;
}

void hg_task_seek_help_request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    task_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool hg_task_seek_help_request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 task_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &task_id_)));
          set_has_task_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void hg_task_seek_help_request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 task_id = 2;
  if (has_task_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->task_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* hg_task_seek_help_request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 task_id = 2;
  if (has_task_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->task_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int hg_task_seek_help_request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 task_id = 2;
    if (has_task_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->task_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void hg_task_seek_help_request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const hg_task_seek_help_request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const hg_task_seek_help_request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void hg_task_seek_help_request::MergeFrom(const hg_task_seek_help_request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_task_id()) {
      set_task_id(from.task_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void hg_task_seek_help_request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void hg_task_seek_help_request::CopyFrom(const hg_task_seek_help_request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool hg_task_seek_help_request::IsInitialized() const {

  return true;
}

void hg_task_seek_help_request::Swap(hg_task_seek_help_request* other) {
  if (other != this) {
    std::swap(task_id_, other->task_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata hg_task_seek_help_request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = hg_task_seek_help_request_descriptor_;
  metadata.reflection = hg_task_seek_help_request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int gh_task_seek_help_reply::kReplyCodeFieldNumber;
#endif  // !_MSC_VER

gh_task_seek_help_reply::gh_task_seek_help_reply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gh_task_seek_help_reply::InitAsDefaultInstance() {
}

gh_task_seek_help_reply::gh_task_seek_help_reply(const gh_task_seek_help_reply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gh_task_seek_help_reply::SharedCtor() {
  _cached_size_ = 0;
  reply_code_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gh_task_seek_help_reply::~gh_task_seek_help_reply() {
  SharedDtor();
}

void gh_task_seek_help_reply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void gh_task_seek_help_reply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gh_task_seek_help_reply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gh_task_seek_help_reply_descriptor_;
}

const gh_task_seek_help_reply& gh_task_seek_help_reply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

gh_task_seek_help_reply* gh_task_seek_help_reply::default_instance_ = NULL;

gh_task_seek_help_reply* gh_task_seek_help_reply::New() const {
  return new gh_task_seek_help_reply;
}

void gh_task_seek_help_reply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    reply_code_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gh_task_seek_help_reply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 reply_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reply_code_)));
          set_has_reply_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gh_task_seek_help_reply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 reply_code = 1;
  if (has_reply_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->reply_code(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gh_task_seek_help_reply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 reply_code = 1;
  if (has_reply_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->reply_code(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gh_task_seek_help_reply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 reply_code = 1;
    if (has_reply_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reply_code());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gh_task_seek_help_reply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gh_task_seek_help_reply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gh_task_seek_help_reply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gh_task_seek_help_reply::MergeFrom(const gh_task_seek_help_reply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reply_code()) {
      set_reply_code(from.reply_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gh_task_seek_help_reply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gh_task_seek_help_reply::CopyFrom(const gh_task_seek_help_reply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gh_task_seek_help_reply::IsInitialized() const {

  return true;
}

void gh_task_seek_help_reply::Swap(gh_task_seek_help_reply* other) {
  if (other != this) {
    std::swap(reply_code_, other->reply_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gh_task_seek_help_reply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gh_task_seek_help_reply_descriptor_;
  metadata.reflection = gh_task_seek_help_reply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int hf_syn_chat_info_notify::kServerGroupIdFieldNumber;
const int hf_syn_chat_info_notify::kServerNameFieldNumber;
#endif  // !_MSC_VER

hf_syn_chat_info_notify::hf_syn_chat_info_notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void hf_syn_chat_info_notify::InitAsDefaultInstance() {
}

hf_syn_chat_info_notify::hf_syn_chat_info_notify(const hf_syn_chat_info_notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void hf_syn_chat_info_notify::SharedCtor() {
  _cached_size_ = 0;
  server_group_id_ = 0u;
  server_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

hf_syn_chat_info_notify::~hf_syn_chat_info_notify() {
  SharedDtor();
}

void hf_syn_chat_info_notify::SharedDtor() {
  if (server_name_ != &::google::protobuf::internal::kEmptyString) {
    delete server_name_;
  }
  if (this != default_instance_) {
  }
}

void hf_syn_chat_info_notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* hf_syn_chat_info_notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return hf_syn_chat_info_notify_descriptor_;
}

const hf_syn_chat_info_notify& hf_syn_chat_info_notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

hf_syn_chat_info_notify* hf_syn_chat_info_notify::default_instance_ = NULL;

hf_syn_chat_info_notify* hf_syn_chat_info_notify::New() const {
  return new hf_syn_chat_info_notify;
}

void hf_syn_chat_info_notify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    server_group_id_ = 0u;
    if (has_server_name()) {
      if (server_name_ != &::google::protobuf::internal::kEmptyString) {
        server_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool hf_syn_chat_info_notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 server_group_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_group_id_)));
          set_has_server_group_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_server_name;
        break;
      }

      // optional string server_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_server_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_server_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->server_name().data(), this->server_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void hf_syn_chat_info_notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 server_group_id = 1;
  if (has_server_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->server_group_id(), output);
  }

  // optional string server_name = 2;
  if (has_server_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->server_name().data(), this->server_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->server_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* hf_syn_chat_info_notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 server_group_id = 1;
  if (has_server_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->server_group_id(), target);
  }

  // optional string server_name = 2;
  if (has_server_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->server_name().data(), this->server_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->server_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int hf_syn_chat_info_notify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 server_group_id = 1;
    if (has_server_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_group_id());
    }

    // optional string server_name = 2;
    if (has_server_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->server_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void hf_syn_chat_info_notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const hf_syn_chat_info_notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const hf_syn_chat_info_notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void hf_syn_chat_info_notify::MergeFrom(const hf_syn_chat_info_notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_server_group_id()) {
      set_server_group_id(from.server_group_id());
    }
    if (from.has_server_name()) {
      set_server_name(from.server_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void hf_syn_chat_info_notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void hf_syn_chat_info_notify::CopyFrom(const hf_syn_chat_info_notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool hf_syn_chat_info_notify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void hf_syn_chat_info_notify::Swap(hf_syn_chat_info_notify* other) {
  if (other != this) {
    std::swap(server_group_id_, other->server_group_id_);
    std::swap(server_name_, other->server_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata hf_syn_chat_info_notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = hf_syn_chat_info_notify_descriptor_;
  metadata.reflection = hf_syn_chat_info_notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int fh_syn_transfer_info_notify::kServerIdFieldNumber;
#endif  // !_MSC_VER

fh_syn_transfer_info_notify::fh_syn_transfer_info_notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void fh_syn_transfer_info_notify::InitAsDefaultInstance() {
}

fh_syn_transfer_info_notify::fh_syn_transfer_info_notify(const fh_syn_transfer_info_notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void fh_syn_transfer_info_notify::SharedCtor() {
  _cached_size_ = 0;
  server_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

fh_syn_transfer_info_notify::~fh_syn_transfer_info_notify() {
  SharedDtor();
}

void fh_syn_transfer_info_notify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void fh_syn_transfer_info_notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* fh_syn_transfer_info_notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return fh_syn_transfer_info_notify_descriptor_;
}

const fh_syn_transfer_info_notify& fh_syn_transfer_info_notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

fh_syn_transfer_info_notify* fh_syn_transfer_info_notify::default_instance_ = NULL;

fh_syn_transfer_info_notify* fh_syn_transfer_info_notify::New() const {
  return new fh_syn_transfer_info_notify;
}

void fh_syn_transfer_info_notify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    server_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool fh_syn_transfer_info_notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 server_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_id_)));
          set_has_server_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void fh_syn_transfer_info_notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 server_id = 1;
  if (has_server_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->server_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* fh_syn_transfer_info_notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 server_id = 1;
  if (has_server_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->server_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int fh_syn_transfer_info_notify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 server_id = 1;
    if (has_server_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void fh_syn_transfer_info_notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const fh_syn_transfer_info_notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const fh_syn_transfer_info_notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void fh_syn_transfer_info_notify::MergeFrom(const fh_syn_transfer_info_notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_server_id()) {
      set_server_id(from.server_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void fh_syn_transfer_info_notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void fh_syn_transfer_info_notify::CopyFrom(const fh_syn_transfer_info_notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fh_syn_transfer_info_notify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void fh_syn_transfer_info_notify::Swap(fh_syn_transfer_info_notify* other) {
  if (other != this) {
    std::swap(server_id_, other->server_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata fh_syn_transfer_info_notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = fh_syn_transfer_info_notify_descriptor_;
  metadata.reflection = fh_syn_transfer_info_notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int gh_gm_cmd_notify::kCmdsFieldNumber;
#endif  // !_MSC_VER

gh_gm_cmd_notify::gh_gm_cmd_notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gh_gm_cmd_notify::InitAsDefaultInstance() {
}

gh_gm_cmd_notify::gh_gm_cmd_notify(const gh_gm_cmd_notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gh_gm_cmd_notify::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gh_gm_cmd_notify::~gh_gm_cmd_notify() {
  SharedDtor();
}

void gh_gm_cmd_notify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void gh_gm_cmd_notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gh_gm_cmd_notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gh_gm_cmd_notify_descriptor_;
}

const gh_gm_cmd_notify& gh_gm_cmd_notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

gh_gm_cmd_notify* gh_gm_cmd_notify::default_instance_ = NULL;

gh_gm_cmd_notify* gh_gm_cmd_notify::New() const {
  return new gh_gm_cmd_notify;
}

void gh_gm_cmd_notify::Clear() {
  cmds_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gh_gm_cmd_notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string cmds = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cmds:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_cmds()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->cmds(this->cmds_size() - 1).data(),
            this->cmds(this->cmds_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_cmds;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gh_gm_cmd_notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated string cmds = 1;
  for (int i = 0; i < this->cmds_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->cmds(i).data(), this->cmds(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->cmds(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gh_gm_cmd_notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated string cmds = 1;
  for (int i = 0; i < this->cmds_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cmds(i).data(), this->cmds(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->cmds(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gh_gm_cmd_notify::ByteSize() const {
  int total_size = 0;

  // repeated string cmds = 1;
  total_size += 1 * this->cmds_size();
  for (int i = 0; i < this->cmds_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->cmds(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gh_gm_cmd_notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gh_gm_cmd_notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gh_gm_cmd_notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gh_gm_cmd_notify::MergeFrom(const gh_gm_cmd_notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  cmds_.MergeFrom(from.cmds_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gh_gm_cmd_notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gh_gm_cmd_notify::CopyFrom(const gh_gm_cmd_notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gh_gm_cmd_notify::IsInitialized() const {

  return true;
}

void gh_gm_cmd_notify::Swap(gh_gm_cmd_notify* other) {
  if (other != this) {
    cmds_.Swap(&other->cmds_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gh_gm_cmd_notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gh_gm_cmd_notify_descriptor_;
  metadata.reflection = gh_gm_cmd_notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int hf_gm_cmd_notify::kCmdsFieldNumber;
#endif  // !_MSC_VER

hf_gm_cmd_notify::hf_gm_cmd_notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void hf_gm_cmd_notify::InitAsDefaultInstance() {
}

hf_gm_cmd_notify::hf_gm_cmd_notify(const hf_gm_cmd_notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void hf_gm_cmd_notify::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

hf_gm_cmd_notify::~hf_gm_cmd_notify() {
  SharedDtor();
}

void hf_gm_cmd_notify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void hf_gm_cmd_notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* hf_gm_cmd_notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return hf_gm_cmd_notify_descriptor_;
}

const hf_gm_cmd_notify& hf_gm_cmd_notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

hf_gm_cmd_notify* hf_gm_cmd_notify::default_instance_ = NULL;

hf_gm_cmd_notify* hf_gm_cmd_notify::New() const {
  return new hf_gm_cmd_notify;
}

void hf_gm_cmd_notify::Clear() {
  cmds_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool hf_gm_cmd_notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string cmds = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cmds:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_cmds()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->cmds(this->cmds_size() - 1).data(),
            this->cmds(this->cmds_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_cmds;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void hf_gm_cmd_notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated string cmds = 1;
  for (int i = 0; i < this->cmds_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->cmds(i).data(), this->cmds(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->cmds(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* hf_gm_cmd_notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated string cmds = 1;
  for (int i = 0; i < this->cmds_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cmds(i).data(), this->cmds(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->cmds(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int hf_gm_cmd_notify::ByteSize() const {
  int total_size = 0;

  // repeated string cmds = 1;
  total_size += 1 * this->cmds_size();
  for (int i = 0; i < this->cmds_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->cmds(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void hf_gm_cmd_notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const hf_gm_cmd_notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const hf_gm_cmd_notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void hf_gm_cmd_notify::MergeFrom(const hf_gm_cmd_notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  cmds_.MergeFrom(from.cmds_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void hf_gm_cmd_notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void hf_gm_cmd_notify::CopyFrom(const hf_gm_cmd_notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool hf_gm_cmd_notify::IsInitialized() const {

  return true;
}

void hf_gm_cmd_notify::Swap(hf_gm_cmd_notify* other) {
  if (other != this) {
    cmds_.Swap(&other->cmds_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata hf_gm_cmd_notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = hf_gm_cmd_notify_descriptor_;
  metadata.reflection = hf_gm_cmd_notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int fh_test_reply::kServerIdFieldNumber;
#endif  // !_MSC_VER

fh_test_reply::fh_test_reply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void fh_test_reply::InitAsDefaultInstance() {
}

fh_test_reply::fh_test_reply(const fh_test_reply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void fh_test_reply::SharedCtor() {
  _cached_size_ = 0;
  server_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

fh_test_reply::~fh_test_reply() {
  SharedDtor();
}

void fh_test_reply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void fh_test_reply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* fh_test_reply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return fh_test_reply_descriptor_;
}

const fh_test_reply& fh_test_reply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

fh_test_reply* fh_test_reply::default_instance_ = NULL;

fh_test_reply* fh_test_reply::New() const {
  return new fh_test_reply;
}

void fh_test_reply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    server_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool fh_test_reply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 server_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_id_)));
          set_has_server_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void fh_test_reply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 server_id = 1;
  if (has_server_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->server_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* fh_test_reply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 server_id = 1;
  if (has_server_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->server_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int fh_test_reply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 server_id = 1;
    if (has_server_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void fh_test_reply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const fh_test_reply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const fh_test_reply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void fh_test_reply::MergeFrom(const fh_test_reply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_server_id()) {
      set_server_id(from.server_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void fh_test_reply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void fh_test_reply::CopyFrom(const fh_test_reply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fh_test_reply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void fh_test_reply::Swap(fh_test_reply* other) {
  if (other != this) {
    std::swap(server_id_, other->server_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata fh_test_reply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = fh_test_reply_descriptor_;
  metadata.reflection = fh_test_reply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

hg_syn_online_role_list_request::hg_syn_online_role_list_request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void hg_syn_online_role_list_request::InitAsDefaultInstance() {
}

hg_syn_online_role_list_request::hg_syn_online_role_list_request(const hg_syn_online_role_list_request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void hg_syn_online_role_list_request::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

hg_syn_online_role_list_request::~hg_syn_online_role_list_request() {
  SharedDtor();
}

void hg_syn_online_role_list_request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void hg_syn_online_role_list_request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* hg_syn_online_role_list_request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return hg_syn_online_role_list_request_descriptor_;
}

const hg_syn_online_role_list_request& hg_syn_online_role_list_request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

hg_syn_online_role_list_request* hg_syn_online_role_list_request::default_instance_ = NULL;

hg_syn_online_role_list_request* hg_syn_online_role_list_request::New() const {
  return new hg_syn_online_role_list_request;
}

void hg_syn_online_role_list_request::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool hg_syn_online_role_list_request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void hg_syn_online_role_list_request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* hg_syn_online_role_list_request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int hg_syn_online_role_list_request::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void hg_syn_online_role_list_request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const hg_syn_online_role_list_request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const hg_syn_online_role_list_request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void hg_syn_online_role_list_request::MergeFrom(const hg_syn_online_role_list_request& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void hg_syn_online_role_list_request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void hg_syn_online_role_list_request::CopyFrom(const hg_syn_online_role_list_request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool hg_syn_online_role_list_request::IsInitialized() const {

  return true;
}

void hg_syn_online_role_list_request::Swap(hg_syn_online_role_list_request* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata hg_syn_online_role_list_request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = hg_syn_online_role_list_request_descriptor_;
  metadata.reflection = hg_syn_online_role_list_request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int gh_syn_online_role_list_notify::kServerIdFieldNumber;
const int gh_syn_online_role_list_notify::kUserListFieldNumber;
#endif  // !_MSC_VER

gh_syn_online_role_list_notify::gh_syn_online_role_list_notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gh_syn_online_role_list_notify::InitAsDefaultInstance() {
}

gh_syn_online_role_list_notify::gh_syn_online_role_list_notify(const gh_syn_online_role_list_notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gh_syn_online_role_list_notify::SharedCtor() {
  _cached_size_ = 0;
  server_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gh_syn_online_role_list_notify::~gh_syn_online_role_list_notify() {
  SharedDtor();
}

void gh_syn_online_role_list_notify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void gh_syn_online_role_list_notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gh_syn_online_role_list_notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gh_syn_online_role_list_notify_descriptor_;
}

const gh_syn_online_role_list_notify& gh_syn_online_role_list_notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

gh_syn_online_role_list_notify* gh_syn_online_role_list_notify::default_instance_ = NULL;

gh_syn_online_role_list_notify* gh_syn_online_role_list_notify::New() const {
  return new gh_syn_online_role_list_notify;
}

void gh_syn_online_role_list_notify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    server_id_ = 0u;
  }
  user_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gh_syn_online_role_list_notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 server_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_id_)));
          set_has_server_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_user_list;
        break;
      }

      // repeated .proto.common.chat_syn_user_info user_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_user_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_user_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gh_syn_online_role_list_notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 server_id = 1;
  if (has_server_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->server_id(), output);
  }

  // repeated .proto.common.chat_syn_user_info user_list = 2;
  for (int i = 0; i < this->user_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->user_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gh_syn_online_role_list_notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 server_id = 1;
  if (has_server_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->server_id(), target);
  }

  // repeated .proto.common.chat_syn_user_info user_list = 2;
  for (int i = 0; i < this->user_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->user_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gh_syn_online_role_list_notify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 server_id = 1;
    if (has_server_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_id());
    }

  }
  // repeated .proto.common.chat_syn_user_info user_list = 2;
  total_size += 1 * this->user_list_size();
  for (int i = 0; i < this->user_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->user_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gh_syn_online_role_list_notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gh_syn_online_role_list_notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gh_syn_online_role_list_notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gh_syn_online_role_list_notify::MergeFrom(const gh_syn_online_role_list_notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  user_list_.MergeFrom(from.user_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_server_id()) {
      set_server_id(from.server_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gh_syn_online_role_list_notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gh_syn_online_role_list_notify::CopyFrom(const gh_syn_online_role_list_notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gh_syn_online_role_list_notify::IsInitialized() const {

  return true;
}

void gh_syn_online_role_list_notify::Swap(gh_syn_online_role_list_notify* other) {
  if (other != this) {
    std::swap(server_id_, other->server_id_);
    user_list_.Swap(&other->user_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gh_syn_online_role_list_notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gh_syn_online_role_list_notify_descriptor_;
  metadata.reflection = gh_syn_online_role_list_notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int eh_country_member_change_notify::kCountryIdFieldNumber;
const int eh_country_member_change_notify::kChangeTypeFieldNumber;
const int eh_country_member_change_notify::kRoleUidFieldNumber;
#endif  // !_MSC_VER

eh_country_member_change_notify::eh_country_member_change_notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void eh_country_member_change_notify::InitAsDefaultInstance() {
}

eh_country_member_change_notify::eh_country_member_change_notify(const eh_country_member_change_notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void eh_country_member_change_notify::SharedCtor() {
  _cached_size_ = 0;
  country_id_ = 0u;
  change_type_ = 0u;
  role_uid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

eh_country_member_change_notify::~eh_country_member_change_notify() {
  SharedDtor();
}

void eh_country_member_change_notify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void eh_country_member_change_notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* eh_country_member_change_notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return eh_country_member_change_notify_descriptor_;
}

const eh_country_member_change_notify& eh_country_member_change_notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

eh_country_member_change_notify* eh_country_member_change_notify::default_instance_ = NULL;

eh_country_member_change_notify* eh_country_member_change_notify::New() const {
  return new eh_country_member_change_notify;
}

void eh_country_member_change_notify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    country_id_ = 0u;
    change_type_ = 0u;
    role_uid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool eh_country_member_change_notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 country_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &country_id_)));
          set_has_country_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_change_type;
        break;
      }

      // optional uint32 change_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_change_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &change_type_)));
          set_has_change_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_role_uid;
        break;
      }

      // optional uint64 role_uid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_uid_)));
          set_has_role_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void eh_country_member_change_notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 country_id = 1;
  if (has_country_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->country_id(), output);
  }

  // optional uint32 change_type = 2;
  if (has_change_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->change_type(), output);
  }

  // optional uint64 role_uid = 3;
  if (has_role_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->role_uid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* eh_country_member_change_notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 country_id = 1;
  if (has_country_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->country_id(), target);
  }

  // optional uint32 change_type = 2;
  if (has_change_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->change_type(), target);
  }

  // optional uint64 role_uid = 3;
  if (has_role_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->role_uid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int eh_country_member_change_notify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 country_id = 1;
    if (has_country_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->country_id());
    }

    // optional uint32 change_type = 2;
    if (has_change_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->change_type());
    }

    // optional uint64 role_uid = 3;
    if (has_role_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_uid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void eh_country_member_change_notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const eh_country_member_change_notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const eh_country_member_change_notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void eh_country_member_change_notify::MergeFrom(const eh_country_member_change_notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_country_id()) {
      set_country_id(from.country_id());
    }
    if (from.has_change_type()) {
      set_change_type(from.change_type());
    }
    if (from.has_role_uid()) {
      set_role_uid(from.role_uid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void eh_country_member_change_notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void eh_country_member_change_notify::CopyFrom(const eh_country_member_change_notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool eh_country_member_change_notify::IsInitialized() const {

  return true;
}

void eh_country_member_change_notify::Swap(eh_country_member_change_notify* other) {
  if (other != this) {
    std::swap(country_id_, other->country_id_);
    std::swap(change_type_, other->change_type_);
    std::swap(role_uid_, other->role_uid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata eh_country_member_change_notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = eh_country_member_change_notify_descriptor_;
  metadata.reflection = eh_country_member_change_notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int eh_family_member_change_notify::kFamilyIdFieldNumber;
const int eh_family_member_change_notify::kChangeTypeFieldNumber;
const int eh_family_member_change_notify::kRoleUidFieldNumber;
#endif  // !_MSC_VER

eh_family_member_change_notify::eh_family_member_change_notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void eh_family_member_change_notify::InitAsDefaultInstance() {
}

eh_family_member_change_notify::eh_family_member_change_notify(const eh_family_member_change_notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void eh_family_member_change_notify::SharedCtor() {
  _cached_size_ = 0;
  family_id_ = GOOGLE_ULONGLONG(0);
  change_type_ = 0u;
  role_uid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

eh_family_member_change_notify::~eh_family_member_change_notify() {
  SharedDtor();
}

void eh_family_member_change_notify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void eh_family_member_change_notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* eh_family_member_change_notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return eh_family_member_change_notify_descriptor_;
}

const eh_family_member_change_notify& eh_family_member_change_notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

eh_family_member_change_notify* eh_family_member_change_notify::default_instance_ = NULL;

eh_family_member_change_notify* eh_family_member_change_notify::New() const {
  return new eh_family_member_change_notify;
}

void eh_family_member_change_notify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    family_id_ = GOOGLE_ULONGLONG(0);
    change_type_ = 0u;
    role_uid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool eh_family_member_change_notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 family_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &family_id_)));
          set_has_family_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_change_type;
        break;
      }

      // optional uint32 change_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_change_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &change_type_)));
          set_has_change_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_role_uid;
        break;
      }

      // optional uint64 role_uid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_uid_)));
          set_has_role_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void eh_family_member_change_notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 family_id = 1;
  if (has_family_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->family_id(), output);
  }

  // optional uint32 change_type = 2;
  if (has_change_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->change_type(), output);
  }

  // optional uint64 role_uid = 3;
  if (has_role_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->role_uid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* eh_family_member_change_notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 family_id = 1;
  if (has_family_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->family_id(), target);
  }

  // optional uint32 change_type = 2;
  if (has_change_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->change_type(), target);
  }

  // optional uint64 role_uid = 3;
  if (has_role_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->role_uid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int eh_family_member_change_notify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 family_id = 1;
    if (has_family_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->family_id());
    }

    // optional uint32 change_type = 2;
    if (has_change_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->change_type());
    }

    // optional uint64 role_uid = 3;
    if (has_role_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_uid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void eh_family_member_change_notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const eh_family_member_change_notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const eh_family_member_change_notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void eh_family_member_change_notify::MergeFrom(const eh_family_member_change_notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_family_id()) {
      set_family_id(from.family_id());
    }
    if (from.has_change_type()) {
      set_change_type(from.change_type());
    }
    if (from.has_role_uid()) {
      set_role_uid(from.role_uid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void eh_family_member_change_notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void eh_family_member_change_notify::CopyFrom(const eh_family_member_change_notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool eh_family_member_change_notify::IsInitialized() const {

  return true;
}

void eh_family_member_change_notify::Swap(eh_family_member_change_notify* other) {
  if (other != this) {
    std::swap(family_id_, other->family_id_);
    std::swap(change_type_, other->change_type_);
    std::swap(role_uid_, other->role_uid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata eh_family_member_change_notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = eh_family_member_change_notify_descriptor_;
  metadata.reflection = eh_family_member_change_notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

hf_get_server_channel_list_request::hf_get_server_channel_list_request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void hf_get_server_channel_list_request::InitAsDefaultInstance() {
}

hf_get_server_channel_list_request::hf_get_server_channel_list_request(const hf_get_server_channel_list_request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void hf_get_server_channel_list_request::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

hf_get_server_channel_list_request::~hf_get_server_channel_list_request() {
  SharedDtor();
}

void hf_get_server_channel_list_request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void hf_get_server_channel_list_request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* hf_get_server_channel_list_request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return hf_get_server_channel_list_request_descriptor_;
}

const hf_get_server_channel_list_request& hf_get_server_channel_list_request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

hf_get_server_channel_list_request* hf_get_server_channel_list_request::default_instance_ = NULL;

hf_get_server_channel_list_request* hf_get_server_channel_list_request::New() const {
  return new hf_get_server_channel_list_request;
}

void hf_get_server_channel_list_request::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool hf_get_server_channel_list_request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void hf_get_server_channel_list_request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* hf_get_server_channel_list_request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int hf_get_server_channel_list_request::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void hf_get_server_channel_list_request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const hf_get_server_channel_list_request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const hf_get_server_channel_list_request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void hf_get_server_channel_list_request::MergeFrom(const hf_get_server_channel_list_request& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void hf_get_server_channel_list_request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void hf_get_server_channel_list_request::CopyFrom(const hf_get_server_channel_list_request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool hf_get_server_channel_list_request::IsInitialized() const {

  return true;
}

void hf_get_server_channel_list_request::Swap(hf_get_server_channel_list_request* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata hf_get_server_channel_list_request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = hf_get_server_channel_list_request_descriptor_;
  metadata.reflection = hf_get_server_channel_list_request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int fh_get_server_channel_list_reply::kReplyCodeFieldNumber;
const int fh_get_server_channel_list_reply::kServerChannelDataFieldNumber;
#endif  // !_MSC_VER

fh_get_server_channel_list_reply::fh_get_server_channel_list_reply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void fh_get_server_channel_list_reply::InitAsDefaultInstance() {
  server_channel_data_ = const_cast< ::proto::common::server_channel_data*>(&::proto::common::server_channel_data::default_instance());
}

fh_get_server_channel_list_reply::fh_get_server_channel_list_reply(const fh_get_server_channel_list_reply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void fh_get_server_channel_list_reply::SharedCtor() {
  _cached_size_ = 0;
  reply_code_ = 0u;
  server_channel_data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

fh_get_server_channel_list_reply::~fh_get_server_channel_list_reply() {
  SharedDtor();
}

void fh_get_server_channel_list_reply::SharedDtor() {
  if (this != default_instance_) {
    delete server_channel_data_;
  }
}

void fh_get_server_channel_list_reply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* fh_get_server_channel_list_reply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return fh_get_server_channel_list_reply_descriptor_;
}

const fh_get_server_channel_list_reply& fh_get_server_channel_list_reply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

fh_get_server_channel_list_reply* fh_get_server_channel_list_reply::default_instance_ = NULL;

fh_get_server_channel_list_reply* fh_get_server_channel_list_reply::New() const {
  return new fh_get_server_channel_list_reply;
}

void fh_get_server_channel_list_reply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    reply_code_ = 0u;
    if (has_server_channel_data()) {
      if (server_channel_data_ != NULL) server_channel_data_->::proto::common::server_channel_data::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool fh_get_server_channel_list_reply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 reply_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reply_code_)));
          set_has_reply_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_server_channel_data;
        break;
      }

      // optional .proto.common.server_channel_data server_channel_data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_server_channel_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_server_channel_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void fh_get_server_channel_list_reply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 reply_code = 1;
  if (has_reply_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->reply_code(), output);
  }

  // optional .proto.common.server_channel_data server_channel_data = 2;
  if (has_server_channel_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->server_channel_data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* fh_get_server_channel_list_reply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 reply_code = 1;
  if (has_reply_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->reply_code(), target);
  }

  // optional .proto.common.server_channel_data server_channel_data = 2;
  if (has_server_channel_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->server_channel_data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int fh_get_server_channel_list_reply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 reply_code = 1;
    if (has_reply_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reply_code());
    }

    // optional .proto.common.server_channel_data server_channel_data = 2;
    if (has_server_channel_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->server_channel_data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void fh_get_server_channel_list_reply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const fh_get_server_channel_list_reply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const fh_get_server_channel_list_reply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void fh_get_server_channel_list_reply::MergeFrom(const fh_get_server_channel_list_reply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reply_code()) {
      set_reply_code(from.reply_code());
    }
    if (from.has_server_channel_data()) {
      mutable_server_channel_data()->::proto::common::server_channel_data::MergeFrom(from.server_channel_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void fh_get_server_channel_list_reply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void fh_get_server_channel_list_reply::CopyFrom(const fh_get_server_channel_list_reply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fh_get_server_channel_list_reply::IsInitialized() const {

  return true;
}

void fh_get_server_channel_list_reply::Swap(fh_get_server_channel_list_reply* other) {
  if (other != this) {
    std::swap(reply_code_, other->reply_code_);
    std::swap(server_channel_data_, other->server_channel_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata fh_get_server_channel_list_reply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = fh_get_server_channel_list_reply_descriptor_;
  metadata.reflection = fh_get_server_channel_list_reply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int hf_change_server_channel_request::kDstChannelIdFieldNumber;
const int hf_change_server_channel_request::kUserNameFieldNumber;
const int hf_change_server_channel_request::kTypeFieldNumber;
#endif  // !_MSC_VER

hf_change_server_channel_request::hf_change_server_channel_request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void hf_change_server_channel_request::InitAsDefaultInstance() {
}

hf_change_server_channel_request::hf_change_server_channel_request(const hf_change_server_channel_request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void hf_change_server_channel_request::SharedCtor() {
  _cached_size_ = 0;
  dst_channel_id_ = 0u;
  user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

hf_change_server_channel_request::~hf_change_server_channel_request() {
  SharedDtor();
}

void hf_change_server_channel_request::SharedDtor() {
  if (user_name_ != &::google::protobuf::internal::kEmptyString) {
    delete user_name_;
  }
  if (this != default_instance_) {
  }
}

void hf_change_server_channel_request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* hf_change_server_channel_request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return hf_change_server_channel_request_descriptor_;
}

const hf_change_server_channel_request& hf_change_server_channel_request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

hf_change_server_channel_request* hf_change_server_channel_request::default_instance_ = NULL;

hf_change_server_channel_request* hf_change_server_channel_request::New() const {
  return new hf_change_server_channel_request;
}

void hf_change_server_channel_request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    dst_channel_id_ = 0u;
    if (has_user_name()) {
      if (user_name_ != &::google::protobuf::internal::kEmptyString) {
        user_name_->clear();
      }
    }
    type_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool hf_change_server_channel_request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 dst_channel_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dst_channel_id_)));
          set_has_dst_channel_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_user_name;
        break;
      }

      // optional string user_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user_name().data(), this->user_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // optional uint32 type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void hf_change_server_channel_request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 dst_channel_id = 1;
  if (has_dst_channel_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->dst_channel_id(), output);
  }

  // optional string user_name = 2;
  if (has_user_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_name().data(), this->user_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->user_name(), output);
  }

  // optional uint32 type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* hf_change_server_channel_request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 dst_channel_id = 1;
  if (has_dst_channel_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->dst_channel_id(), target);
  }

  // optional string user_name = 2;
  if (has_user_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_name().data(), this->user_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->user_name(), target);
  }

  // optional uint32 type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int hf_change_server_channel_request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 dst_channel_id = 1;
    if (has_dst_channel_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dst_channel_id());
    }

    // optional string user_name = 2;
    if (has_user_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_name());
    }

    // optional uint32 type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void hf_change_server_channel_request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const hf_change_server_channel_request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const hf_change_server_channel_request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void hf_change_server_channel_request::MergeFrom(const hf_change_server_channel_request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dst_channel_id()) {
      set_dst_channel_id(from.dst_channel_id());
    }
    if (from.has_user_name()) {
      set_user_name(from.user_name());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void hf_change_server_channel_request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void hf_change_server_channel_request::CopyFrom(const hf_change_server_channel_request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool hf_change_server_channel_request::IsInitialized() const {

  return true;
}

void hf_change_server_channel_request::Swap(hf_change_server_channel_request* other) {
  if (other != this) {
    std::swap(dst_channel_id_, other->dst_channel_id_);
    std::swap(user_name_, other->user_name_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata hf_change_server_channel_request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = hf_change_server_channel_request_descriptor_;
  metadata.reflection = hf_change_server_channel_request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int fh_change_server_channel_reply::kReplyCodeFieldNumber;
const int fh_change_server_channel_reply::kChannelIdFieldNumber;
#endif  // !_MSC_VER

fh_change_server_channel_reply::fh_change_server_channel_reply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void fh_change_server_channel_reply::InitAsDefaultInstance() {
}

fh_change_server_channel_reply::fh_change_server_channel_reply(const fh_change_server_channel_reply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void fh_change_server_channel_reply::SharedCtor() {
  _cached_size_ = 0;
  reply_code_ = 0u;
  channel_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

fh_change_server_channel_reply::~fh_change_server_channel_reply() {
  SharedDtor();
}

void fh_change_server_channel_reply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void fh_change_server_channel_reply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* fh_change_server_channel_reply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return fh_change_server_channel_reply_descriptor_;
}

const fh_change_server_channel_reply& fh_change_server_channel_reply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

fh_change_server_channel_reply* fh_change_server_channel_reply::default_instance_ = NULL;

fh_change_server_channel_reply* fh_change_server_channel_reply::New() const {
  return new fh_change_server_channel_reply;
}

void fh_change_server_channel_reply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    reply_code_ = 0u;
    channel_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool fh_change_server_channel_reply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 reply_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reply_code_)));
          set_has_reply_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_channel_id;
        break;
      }

      // optional uint32 channel_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_channel_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channel_id_)));
          set_has_channel_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void fh_change_server_channel_reply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 reply_code = 1;
  if (has_reply_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->reply_code(), output);
  }

  // optional uint32 channel_id = 2;
  if (has_channel_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->channel_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* fh_change_server_channel_reply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 reply_code = 1;
  if (has_reply_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->reply_code(), target);
  }

  // optional uint32 channel_id = 2;
  if (has_channel_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->channel_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int fh_change_server_channel_reply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 reply_code = 1;
    if (has_reply_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reply_code());
    }

    // optional uint32 channel_id = 2;
    if (has_channel_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channel_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void fh_change_server_channel_reply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const fh_change_server_channel_reply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const fh_change_server_channel_reply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void fh_change_server_channel_reply::MergeFrom(const fh_change_server_channel_reply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reply_code()) {
      set_reply_code(from.reply_code());
    }
    if (from.has_channel_id()) {
      set_channel_id(from.channel_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void fh_change_server_channel_reply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void fh_change_server_channel_reply::CopyFrom(const fh_change_server_channel_reply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fh_change_server_channel_reply::IsInitialized() const {

  return true;
}

void fh_change_server_channel_reply::Swap(fh_change_server_channel_reply* other) {
  if (other != this) {
    std::swap(reply_code_, other->reply_code_);
    std::swap(channel_id_, other->channel_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata fh_change_server_channel_reply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = fh_change_server_channel_reply_descriptor_;
  metadata.reflection = fh_change_server_channel_reply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int fh_change_server_channel_notify::kRoleListFieldNumber;
const int fh_change_server_channel_notify::kHcMsgFieldNumber;
#endif  // !_MSC_VER

fh_change_server_channel_notify::fh_change_server_channel_notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void fh_change_server_channel_notify::InitAsDefaultInstance() {
  role_list_ = const_cast< ::proto::common::fh_channel_role_list*>(&::proto::common::fh_channel_role_list::default_instance());
  hc_msg_ = const_cast< ::proto::client::hc_change_server_channel_notify*>(&::proto::client::hc_change_server_channel_notify::default_instance());
}

fh_change_server_channel_notify::fh_change_server_channel_notify(const fh_change_server_channel_notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void fh_change_server_channel_notify::SharedCtor() {
  _cached_size_ = 0;
  role_list_ = NULL;
  hc_msg_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

fh_change_server_channel_notify::~fh_change_server_channel_notify() {
  SharedDtor();
}

void fh_change_server_channel_notify::SharedDtor() {
  if (this != default_instance_) {
    delete role_list_;
    delete hc_msg_;
  }
}

void fh_change_server_channel_notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* fh_change_server_channel_notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return fh_change_server_channel_notify_descriptor_;
}

const fh_change_server_channel_notify& fh_change_server_channel_notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

fh_change_server_channel_notify* fh_change_server_channel_notify::default_instance_ = NULL;

fh_change_server_channel_notify* fh_change_server_channel_notify::New() const {
  return new fh_change_server_channel_notify;
}

void fh_change_server_channel_notify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_role_list()) {
      if (role_list_ != NULL) role_list_->::proto::common::fh_channel_role_list::Clear();
    }
    if (has_hc_msg()) {
      if (hc_msg_ != NULL) hc_msg_->::proto::client::hc_change_server_channel_notify::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool fh_change_server_channel_notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .proto.common.fh_channel_role_list role_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_role_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_hc_msg;
        break;
      }

      // required .proto.client.hc_change_server_channel_notify hc_msg = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hc_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hc_msg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void fh_change_server_channel_notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .proto.common.fh_channel_role_list role_list = 1;
  if (has_role_list()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->role_list(), output);
  }

  // required .proto.client.hc_change_server_channel_notify hc_msg = 2;
  if (has_hc_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->hc_msg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* fh_change_server_channel_notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .proto.common.fh_channel_role_list role_list = 1;
  if (has_role_list()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->role_list(), target);
  }

  // required .proto.client.hc_change_server_channel_notify hc_msg = 2;
  if (has_hc_msg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->hc_msg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int fh_change_server_channel_notify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .proto.common.fh_channel_role_list role_list = 1;
    if (has_role_list()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->role_list());
    }

    // required .proto.client.hc_change_server_channel_notify hc_msg = 2;
    if (has_hc_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->hc_msg());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void fh_change_server_channel_notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const fh_change_server_channel_notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const fh_change_server_channel_notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void fh_change_server_channel_notify::MergeFrom(const fh_change_server_channel_notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_list()) {
      mutable_role_list()->::proto::common::fh_channel_role_list::MergeFrom(from.role_list());
    }
    if (from.has_hc_msg()) {
      mutable_hc_msg()->::proto::client::hc_change_server_channel_notify::MergeFrom(from.hc_msg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void fh_change_server_channel_notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void fh_change_server_channel_notify::CopyFrom(const fh_change_server_channel_notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fh_change_server_channel_notify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void fh_change_server_channel_notify::Swap(fh_change_server_channel_notify* other) {
  if (other != this) {
    std::swap(role_list_, other->role_list_);
    std::swap(hc_msg_, other->hc_msg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata fh_change_server_channel_notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = fh_change_server_channel_notify_descriptor_;
  metadata.reflection = fh_change_server_channel_notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ha_change_server_channel_notify::kFhMsgFieldNumber;
#endif  // !_MSC_VER

ha_change_server_channel_notify::ha_change_server_channel_notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ha_change_server_channel_notify::InitAsDefaultInstance() {
  fh_msg_ = const_cast< ::proto::server::fh_change_server_channel_notify*>(&::proto::server::fh_change_server_channel_notify::default_instance());
}

ha_change_server_channel_notify::ha_change_server_channel_notify(const ha_change_server_channel_notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ha_change_server_channel_notify::SharedCtor() {
  _cached_size_ = 0;
  fh_msg_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ha_change_server_channel_notify::~ha_change_server_channel_notify() {
  SharedDtor();
}

void ha_change_server_channel_notify::SharedDtor() {
  if (this != default_instance_) {
    delete fh_msg_;
  }
}

void ha_change_server_channel_notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ha_change_server_channel_notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ha_change_server_channel_notify_descriptor_;
}

const ha_change_server_channel_notify& ha_change_server_channel_notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

ha_change_server_channel_notify* ha_change_server_channel_notify::default_instance_ = NULL;

ha_change_server_channel_notify* ha_change_server_channel_notify::New() const {
  return new ha_change_server_channel_notify;
}

void ha_change_server_channel_notify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_fh_msg()) {
      if (fh_msg_ != NULL) fh_msg_->::proto::server::fh_change_server_channel_notify::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ha_change_server_channel_notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .proto.server.fh_change_server_channel_notify fh_msg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fh_msg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ha_change_server_channel_notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .proto.server.fh_change_server_channel_notify fh_msg = 1;
  if (has_fh_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->fh_msg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ha_change_server_channel_notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .proto.server.fh_change_server_channel_notify fh_msg = 1;
  if (has_fh_msg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->fh_msg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ha_change_server_channel_notify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .proto.server.fh_change_server_channel_notify fh_msg = 1;
    if (has_fh_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fh_msg());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ha_change_server_channel_notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ha_change_server_channel_notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ha_change_server_channel_notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ha_change_server_channel_notify::MergeFrom(const ha_change_server_channel_notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fh_msg()) {
      mutable_fh_msg()->::proto::server::fh_change_server_channel_notify::MergeFrom(from.fh_msg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ha_change_server_channel_notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ha_change_server_channel_notify::CopyFrom(const ha_change_server_channel_notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ha_change_server_channel_notify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_fh_msg()) {
    if (!this->fh_msg().IsInitialized()) return false;
  }
  return true;
}

void ha_change_server_channel_notify::Swap(ha_change_server_channel_notify* other) {
  if (other != this) {
    std::swap(fh_msg_, other->fh_msg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ha_change_server_channel_notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ha_change_server_channel_notify_descriptor_;
  metadata.reflection = ha_change_server_channel_notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int hf_server_channel_chat_request::kChatInfoFieldNumber;
#endif  // !_MSC_VER

hf_server_channel_chat_request::hf_server_channel_chat_request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void hf_server_channel_chat_request::InitAsDefaultInstance() {
}

hf_server_channel_chat_request::hf_server_channel_chat_request(const hf_server_channel_chat_request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void hf_server_channel_chat_request::SharedCtor() {
  _cached_size_ = 0;
  chat_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

hf_server_channel_chat_request::~hf_server_channel_chat_request() {
  SharedDtor();
}

void hf_server_channel_chat_request::SharedDtor() {
  if (chat_info_ != &::google::protobuf::internal::kEmptyString) {
    delete chat_info_;
  }
  if (this != default_instance_) {
  }
}

void hf_server_channel_chat_request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* hf_server_channel_chat_request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return hf_server_channel_chat_request_descriptor_;
}

const hf_server_channel_chat_request& hf_server_channel_chat_request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

hf_server_channel_chat_request* hf_server_channel_chat_request::default_instance_ = NULL;

hf_server_channel_chat_request* hf_server_channel_chat_request::New() const {
  return new hf_server_channel_chat_request;
}

void hf_server_channel_chat_request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_chat_info()) {
      if (chat_info_ != &::google::protobuf::internal::kEmptyString) {
        chat_info_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool hf_server_channel_chat_request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string chat_info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_chat_info()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->chat_info().data(), this->chat_info().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void hf_server_channel_chat_request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string chat_info = 1;
  if (has_chat_info()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->chat_info().data(), this->chat_info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->chat_info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* hf_server_channel_chat_request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string chat_info = 1;
  if (has_chat_info()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->chat_info().data(), this->chat_info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->chat_info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int hf_server_channel_chat_request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string chat_info = 1;
    if (has_chat_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->chat_info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void hf_server_channel_chat_request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const hf_server_channel_chat_request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const hf_server_channel_chat_request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void hf_server_channel_chat_request::MergeFrom(const hf_server_channel_chat_request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chat_info()) {
      set_chat_info(from.chat_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void hf_server_channel_chat_request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void hf_server_channel_chat_request::CopyFrom(const hf_server_channel_chat_request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool hf_server_channel_chat_request::IsInitialized() const {

  return true;
}

void hf_server_channel_chat_request::Swap(hf_server_channel_chat_request* other) {
  if (other != this) {
    std::swap(chat_info_, other->chat_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata hf_server_channel_chat_request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = hf_server_channel_chat_request_descriptor_;
  metadata.reflection = hf_server_channel_chat_request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int fh_server_channel_chat_reply::kReplyCodeFieldNumber;
#endif  // !_MSC_VER

fh_server_channel_chat_reply::fh_server_channel_chat_reply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void fh_server_channel_chat_reply::InitAsDefaultInstance() {
}

fh_server_channel_chat_reply::fh_server_channel_chat_reply(const fh_server_channel_chat_reply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void fh_server_channel_chat_reply::SharedCtor() {
  _cached_size_ = 0;
  reply_code_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

fh_server_channel_chat_reply::~fh_server_channel_chat_reply() {
  SharedDtor();
}

void fh_server_channel_chat_reply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void fh_server_channel_chat_reply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* fh_server_channel_chat_reply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return fh_server_channel_chat_reply_descriptor_;
}

const fh_server_channel_chat_reply& fh_server_channel_chat_reply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

fh_server_channel_chat_reply* fh_server_channel_chat_reply::default_instance_ = NULL;

fh_server_channel_chat_reply* fh_server_channel_chat_reply::New() const {
  return new fh_server_channel_chat_reply;
}

void fh_server_channel_chat_reply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    reply_code_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool fh_server_channel_chat_reply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 reply_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reply_code_)));
          set_has_reply_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void fh_server_channel_chat_reply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 reply_code = 1;
  if (has_reply_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->reply_code(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* fh_server_channel_chat_reply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 reply_code = 1;
  if (has_reply_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->reply_code(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int fh_server_channel_chat_reply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 reply_code = 1;
    if (has_reply_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reply_code());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void fh_server_channel_chat_reply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const fh_server_channel_chat_reply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const fh_server_channel_chat_reply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void fh_server_channel_chat_reply::MergeFrom(const fh_server_channel_chat_reply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reply_code()) {
      set_reply_code(from.reply_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void fh_server_channel_chat_reply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void fh_server_channel_chat_reply::CopyFrom(const fh_server_channel_chat_reply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fh_server_channel_chat_reply::IsInitialized() const {

  return true;
}

void fh_server_channel_chat_reply::Swap(fh_server_channel_chat_reply* other) {
  if (other != this) {
    std::swap(reply_code_, other->reply_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata fh_server_channel_chat_reply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = fh_server_channel_chat_reply_descriptor_;
  metadata.reflection = fh_server_channel_chat_reply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int fh_server_channel_chat_notify::kRoleListFieldNumber;
const int fh_server_channel_chat_notify::kHcMsgFieldNumber;
#endif  // !_MSC_VER

fh_server_channel_chat_notify::fh_server_channel_chat_notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void fh_server_channel_chat_notify::InitAsDefaultInstance() {
  role_list_ = const_cast< ::proto::common::fh_channel_role_list*>(&::proto::common::fh_channel_role_list::default_instance());
  hc_msg_ = const_cast< ::proto::client::hc_server_channel_chat_notify*>(&::proto::client::hc_server_channel_chat_notify::default_instance());
}

fh_server_channel_chat_notify::fh_server_channel_chat_notify(const fh_server_channel_chat_notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void fh_server_channel_chat_notify::SharedCtor() {
  _cached_size_ = 0;
  role_list_ = NULL;
  hc_msg_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

fh_server_channel_chat_notify::~fh_server_channel_chat_notify() {
  SharedDtor();
}

void fh_server_channel_chat_notify::SharedDtor() {
  if (this != default_instance_) {
    delete role_list_;
    delete hc_msg_;
  }
}

void fh_server_channel_chat_notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* fh_server_channel_chat_notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return fh_server_channel_chat_notify_descriptor_;
}

const fh_server_channel_chat_notify& fh_server_channel_chat_notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

fh_server_channel_chat_notify* fh_server_channel_chat_notify::default_instance_ = NULL;

fh_server_channel_chat_notify* fh_server_channel_chat_notify::New() const {
  return new fh_server_channel_chat_notify;
}

void fh_server_channel_chat_notify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_role_list()) {
      if (role_list_ != NULL) role_list_->::proto::common::fh_channel_role_list::Clear();
    }
    if (has_hc_msg()) {
      if (hc_msg_ != NULL) hc_msg_->::proto::client::hc_server_channel_chat_notify::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool fh_server_channel_chat_notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .proto.common.fh_channel_role_list role_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_role_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_hc_msg;
        break;
      }

      // required .proto.client.hc_server_channel_chat_notify hc_msg = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hc_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hc_msg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void fh_server_channel_chat_notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .proto.common.fh_channel_role_list role_list = 1;
  if (has_role_list()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->role_list(), output);
  }

  // required .proto.client.hc_server_channel_chat_notify hc_msg = 2;
  if (has_hc_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->hc_msg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* fh_server_channel_chat_notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .proto.common.fh_channel_role_list role_list = 1;
  if (has_role_list()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->role_list(), target);
  }

  // required .proto.client.hc_server_channel_chat_notify hc_msg = 2;
  if (has_hc_msg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->hc_msg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int fh_server_channel_chat_notify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .proto.common.fh_channel_role_list role_list = 1;
    if (has_role_list()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->role_list());
    }

    // required .proto.client.hc_server_channel_chat_notify hc_msg = 2;
    if (has_hc_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->hc_msg());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void fh_server_channel_chat_notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const fh_server_channel_chat_notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const fh_server_channel_chat_notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void fh_server_channel_chat_notify::MergeFrom(const fh_server_channel_chat_notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_list()) {
      mutable_role_list()->::proto::common::fh_channel_role_list::MergeFrom(from.role_list());
    }
    if (from.has_hc_msg()) {
      mutable_hc_msg()->::proto::client::hc_server_channel_chat_notify::MergeFrom(from.hc_msg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void fh_server_channel_chat_notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void fh_server_channel_chat_notify::CopyFrom(const fh_server_channel_chat_notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fh_server_channel_chat_notify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void fh_server_channel_chat_notify::Swap(fh_server_channel_chat_notify* other) {
  if (other != this) {
    std::swap(role_list_, other->role_list_);
    std::swap(hc_msg_, other->hc_msg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata fh_server_channel_chat_notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = fh_server_channel_chat_notify_descriptor_;
  metadata.reflection = fh_server_channel_chat_notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ha_server_channel_chat_notify::kFhMsgFieldNumber;
#endif  // !_MSC_VER

ha_server_channel_chat_notify::ha_server_channel_chat_notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ha_server_channel_chat_notify::InitAsDefaultInstance() {
  fh_msg_ = const_cast< ::proto::server::fh_server_channel_chat_notify*>(&::proto::server::fh_server_channel_chat_notify::default_instance());
}

ha_server_channel_chat_notify::ha_server_channel_chat_notify(const ha_server_channel_chat_notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ha_server_channel_chat_notify::SharedCtor() {
  _cached_size_ = 0;
  fh_msg_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ha_server_channel_chat_notify::~ha_server_channel_chat_notify() {
  SharedDtor();
}

void ha_server_channel_chat_notify::SharedDtor() {
  if (this != default_instance_) {
    delete fh_msg_;
  }
}

void ha_server_channel_chat_notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ha_server_channel_chat_notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ha_server_channel_chat_notify_descriptor_;
}

const ha_server_channel_chat_notify& ha_server_channel_chat_notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

ha_server_channel_chat_notify* ha_server_channel_chat_notify::default_instance_ = NULL;

ha_server_channel_chat_notify* ha_server_channel_chat_notify::New() const {
  return new ha_server_channel_chat_notify;
}

void ha_server_channel_chat_notify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_fh_msg()) {
      if (fh_msg_ != NULL) fh_msg_->::proto::server::fh_server_channel_chat_notify::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ha_server_channel_chat_notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .proto.server.fh_server_channel_chat_notify fh_msg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fh_msg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ha_server_channel_chat_notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .proto.server.fh_server_channel_chat_notify fh_msg = 1;
  if (has_fh_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->fh_msg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ha_server_channel_chat_notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .proto.server.fh_server_channel_chat_notify fh_msg = 1;
  if (has_fh_msg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->fh_msg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ha_server_channel_chat_notify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .proto.server.fh_server_channel_chat_notify fh_msg = 1;
    if (has_fh_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fh_msg());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ha_server_channel_chat_notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ha_server_channel_chat_notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ha_server_channel_chat_notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ha_server_channel_chat_notify::MergeFrom(const ha_server_channel_chat_notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fh_msg()) {
      mutable_fh_msg()->::proto::server::fh_server_channel_chat_notify::MergeFrom(from.fh_msg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ha_server_channel_chat_notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ha_server_channel_chat_notify::CopyFrom(const ha_server_channel_chat_notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ha_server_channel_chat_notify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_fh_msg()) {
    if (!this->fh_msg().IsInitialized()) return false;
  }
  return true;
}

void ha_server_channel_chat_notify::Swap(ha_server_channel_chat_notify* other) {
  if (other != this) {
    std::swap(fh_msg_, other->fh_msg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ha_server_channel_chat_notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ha_server_channel_chat_notify_descriptor_;
  metadata.reflection = ha_server_channel_chat_notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

hf_personal_chat_request::hf_personal_chat_request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void hf_personal_chat_request::InitAsDefaultInstance() {
}

hf_personal_chat_request::hf_personal_chat_request(const hf_personal_chat_request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void hf_personal_chat_request::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

hf_personal_chat_request::~hf_personal_chat_request() {
  SharedDtor();
}

void hf_personal_chat_request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void hf_personal_chat_request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* hf_personal_chat_request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return hf_personal_chat_request_descriptor_;
}

const hf_personal_chat_request& hf_personal_chat_request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

hf_personal_chat_request* hf_personal_chat_request::default_instance_ = NULL;

hf_personal_chat_request* hf_personal_chat_request::New() const {
  return new hf_personal_chat_request;
}

void hf_personal_chat_request::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool hf_personal_chat_request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void hf_personal_chat_request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* hf_personal_chat_request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int hf_personal_chat_request::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void hf_personal_chat_request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const hf_personal_chat_request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const hf_personal_chat_request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void hf_personal_chat_request::MergeFrom(const hf_personal_chat_request& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void hf_personal_chat_request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void hf_personal_chat_request::CopyFrom(const hf_personal_chat_request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool hf_personal_chat_request::IsInitialized() const {

  return true;
}

void hf_personal_chat_request::Swap(hf_personal_chat_request* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata hf_personal_chat_request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = hf_personal_chat_request_descriptor_;
  metadata.reflection = hf_personal_chat_request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

fh_personal_chat_notify::fh_personal_chat_notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void fh_personal_chat_notify::InitAsDefaultInstance() {
}

fh_personal_chat_notify::fh_personal_chat_notify(const fh_personal_chat_notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void fh_personal_chat_notify::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

fh_personal_chat_notify::~fh_personal_chat_notify() {
  SharedDtor();
}

void fh_personal_chat_notify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void fh_personal_chat_notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* fh_personal_chat_notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return fh_personal_chat_notify_descriptor_;
}

const fh_personal_chat_notify& fh_personal_chat_notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

fh_personal_chat_notify* fh_personal_chat_notify::default_instance_ = NULL;

fh_personal_chat_notify* fh_personal_chat_notify::New() const {
  return new fh_personal_chat_notify;
}

void fh_personal_chat_notify::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool fh_personal_chat_notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void fh_personal_chat_notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* fh_personal_chat_notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int fh_personal_chat_notify::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void fh_personal_chat_notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const fh_personal_chat_notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const fh_personal_chat_notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void fh_personal_chat_notify::MergeFrom(const fh_personal_chat_notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void fh_personal_chat_notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void fh_personal_chat_notify::CopyFrom(const fh_personal_chat_notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fh_personal_chat_notify::IsInitialized() const {

  return true;
}

void fh_personal_chat_notify::Swap(fh_personal_chat_notify* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata fh_personal_chat_notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = fh_personal_chat_notify_descriptor_;
  metadata.reflection = fh_personal_chat_notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

ha_personal_chat_notify::ha_personal_chat_notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ha_personal_chat_notify::InitAsDefaultInstance() {
}

ha_personal_chat_notify::ha_personal_chat_notify(const ha_personal_chat_notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ha_personal_chat_notify::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ha_personal_chat_notify::~ha_personal_chat_notify() {
  SharedDtor();
}

void ha_personal_chat_notify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ha_personal_chat_notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ha_personal_chat_notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ha_personal_chat_notify_descriptor_;
}

const ha_personal_chat_notify& ha_personal_chat_notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

ha_personal_chat_notify* ha_personal_chat_notify::default_instance_ = NULL;

ha_personal_chat_notify* ha_personal_chat_notify::New() const {
  return new ha_personal_chat_notify;
}

void ha_personal_chat_notify::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ha_personal_chat_notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void ha_personal_chat_notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ha_personal_chat_notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ha_personal_chat_notify::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ha_personal_chat_notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ha_personal_chat_notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ha_personal_chat_notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ha_personal_chat_notify::MergeFrom(const ha_personal_chat_notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ha_personal_chat_notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ha_personal_chat_notify::CopyFrom(const ha_personal_chat_notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ha_personal_chat_notify::IsInitialized() const {

  return true;
}

void ha_personal_chat_notify::Swap(ha_personal_chat_notify* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ha_personal_chat_notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ha_personal_chat_notify_descriptor_;
  metadata.reflection = ha_personal_chat_notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int he_family_chat_notify::kSrcUidFieldNumber;
const int he_family_chat_notify::kFamilyUidFieldNumber;
#endif  // !_MSC_VER

he_family_chat_notify::he_family_chat_notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void he_family_chat_notify::InitAsDefaultInstance() {
}

he_family_chat_notify::he_family_chat_notify(const he_family_chat_notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void he_family_chat_notify::SharedCtor() {
  _cached_size_ = 0;
  src_uid_ = GOOGLE_ULONGLONG(0);
  family_uid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

he_family_chat_notify::~he_family_chat_notify() {
  SharedDtor();
}

void he_family_chat_notify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void he_family_chat_notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* he_family_chat_notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return he_family_chat_notify_descriptor_;
}

const he_family_chat_notify& he_family_chat_notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

he_family_chat_notify* he_family_chat_notify::default_instance_ = NULL;

he_family_chat_notify* he_family_chat_notify::New() const {
  return new he_family_chat_notify;
}

void he_family_chat_notify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    src_uid_ = GOOGLE_ULONGLONG(0);
    family_uid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool he_family_chat_notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 src_uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &src_uid_)));
          set_has_src_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_family_uid;
        break;
      }

      // optional uint64 family_uid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_family_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &family_uid_)));
          set_has_family_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void he_family_chat_notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 src_uid = 1;
  if (has_src_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->src_uid(), output);
  }

  // optional uint64 family_uid = 2;
  if (has_family_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->family_uid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* he_family_chat_notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 src_uid = 1;
  if (has_src_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->src_uid(), target);
  }

  // optional uint64 family_uid = 2;
  if (has_family_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->family_uid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int he_family_chat_notify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 src_uid = 1;
    if (has_src_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->src_uid());
    }

    // optional uint64 family_uid = 2;
    if (has_family_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->family_uid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void he_family_chat_notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const he_family_chat_notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const he_family_chat_notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void he_family_chat_notify::MergeFrom(const he_family_chat_notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_src_uid()) {
      set_src_uid(from.src_uid());
    }
    if (from.has_family_uid()) {
      set_family_uid(from.family_uid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void he_family_chat_notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void he_family_chat_notify::CopyFrom(const he_family_chat_notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool he_family_chat_notify::IsInitialized() const {

  return true;
}

void he_family_chat_notify::Swap(he_family_chat_notify* other) {
  if (other != this) {
    std::swap(src_uid_, other->src_uid_);
    std::swap(family_uid_, other->family_uid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata he_family_chat_notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = he_family_chat_notify_descriptor_;
  metadata.reflection = he_family_chat_notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int he_personal_chat_notify::kSrcUidFieldNumber;
const int he_personal_chat_notify::kTarUidFieldNumber;
#endif  // !_MSC_VER

he_personal_chat_notify::he_personal_chat_notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void he_personal_chat_notify::InitAsDefaultInstance() {
}

he_personal_chat_notify::he_personal_chat_notify(const he_personal_chat_notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void he_personal_chat_notify::SharedCtor() {
  _cached_size_ = 0;
  src_uid_ = GOOGLE_ULONGLONG(0);
  tar_uid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

he_personal_chat_notify::~he_personal_chat_notify() {
  SharedDtor();
}

void he_personal_chat_notify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void he_personal_chat_notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* he_personal_chat_notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return he_personal_chat_notify_descriptor_;
}

const he_personal_chat_notify& he_personal_chat_notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

he_personal_chat_notify* he_personal_chat_notify::default_instance_ = NULL;

he_personal_chat_notify* he_personal_chat_notify::New() const {
  return new he_personal_chat_notify;
}

void he_personal_chat_notify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    src_uid_ = GOOGLE_ULONGLONG(0);
    tar_uid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool he_personal_chat_notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 src_uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &src_uid_)));
          set_has_src_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_tar_uid;
        break;
      }

      // optional uint64 tar_uid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tar_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &tar_uid_)));
          set_has_tar_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void he_personal_chat_notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 src_uid = 1;
  if (has_src_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->src_uid(), output);
  }

  // optional uint64 tar_uid = 2;
  if (has_tar_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->tar_uid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* he_personal_chat_notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 src_uid = 1;
  if (has_src_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->src_uid(), target);
  }

  // optional uint64 tar_uid = 2;
  if (has_tar_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->tar_uid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int he_personal_chat_notify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 src_uid = 1;
    if (has_src_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->src_uid());
    }

    // optional uint64 tar_uid = 2;
    if (has_tar_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->tar_uid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void he_personal_chat_notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const he_personal_chat_notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const he_personal_chat_notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void he_personal_chat_notify::MergeFrom(const he_personal_chat_notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_src_uid()) {
      set_src_uid(from.src_uid());
    }
    if (from.has_tar_uid()) {
      set_tar_uid(from.tar_uid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void he_personal_chat_notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void he_personal_chat_notify::CopyFrom(const he_personal_chat_notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool he_personal_chat_notify::IsInitialized() const {

  return true;
}

void he_personal_chat_notify::Swap(he_personal_chat_notify* other) {
  if (other != this) {
    std::swap(src_uid_, other->src_uid_);
    std::swap(tar_uid_, other->tar_uid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata he_personal_chat_notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = he_personal_chat_notify_descriptor_;
  metadata.reflection = he_personal_chat_notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int eh_kick_all_user_notify::kReasonFieldNumber;
#endif  // !_MSC_VER

eh_kick_all_user_notify::eh_kick_all_user_notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void eh_kick_all_user_notify::InitAsDefaultInstance() {
}

eh_kick_all_user_notify::eh_kick_all_user_notify(const eh_kick_all_user_notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void eh_kick_all_user_notify::SharedCtor() {
  _cached_size_ = 0;
  reason_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

eh_kick_all_user_notify::~eh_kick_all_user_notify() {
  SharedDtor();
}

void eh_kick_all_user_notify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void eh_kick_all_user_notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* eh_kick_all_user_notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return eh_kick_all_user_notify_descriptor_;
}

const eh_kick_all_user_notify& eh_kick_all_user_notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

eh_kick_all_user_notify* eh_kick_all_user_notify::default_instance_ = NULL;

eh_kick_all_user_notify* eh_kick_all_user_notify::New() const {
  return new eh_kick_all_user_notify;
}

void eh_kick_all_user_notify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    reason_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool eh_kick_all_user_notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 reason = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reason_)));
          set_has_reason();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void eh_kick_all_user_notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 reason = 1;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->reason(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* eh_kick_all_user_notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 reason = 1;
  if (has_reason()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->reason(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int eh_kick_all_user_notify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 reason = 1;
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reason());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void eh_kick_all_user_notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const eh_kick_all_user_notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const eh_kick_all_user_notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void eh_kick_all_user_notify::MergeFrom(const eh_kick_all_user_notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reason()) {
      set_reason(from.reason());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void eh_kick_all_user_notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void eh_kick_all_user_notify::CopyFrom(const eh_kick_all_user_notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool eh_kick_all_user_notify::IsInitialized() const {

  return true;
}

void eh_kick_all_user_notify::Swap(eh_kick_all_user_notify* other) {
  if (other != this) {
    std::swap(reason_, other->reason_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata eh_kick_all_user_notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = eh_kick_all_user_notify_descriptor_;
  metadata.reflection = eh_kick_all_user_notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int dn_create_role_request::kAccountIdFieldNumber;
const int dn_create_role_request::kServerIdFieldNumber;
const int dn_create_role_request::kGateIdFieldNumber;
const int dn_create_role_request::kRoleDataFieldNumber;
#endif  // !_MSC_VER

dn_create_role_request::dn_create_role_request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void dn_create_role_request::InitAsDefaultInstance() {
  role_data_ = const_cast< ::proto::common::account_role_data*>(&::proto::common::account_role_data::default_instance());
}

dn_create_role_request::dn_create_role_request(const dn_create_role_request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void dn_create_role_request::SharedCtor() {
  _cached_size_ = 0;
  account_id_ = GOOGLE_ULONGLONG(0);
  server_id_ = 0u;
  gate_id_ = 0u;
  role_data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

dn_create_role_request::~dn_create_role_request() {
  SharedDtor();
}

void dn_create_role_request::SharedDtor() {
  if (this != default_instance_) {
    delete role_data_;
  }
}

void dn_create_role_request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* dn_create_role_request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return dn_create_role_request_descriptor_;
}

const dn_create_role_request& dn_create_role_request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

dn_create_role_request* dn_create_role_request::default_instance_ = NULL;

dn_create_role_request* dn_create_role_request::New() const {
  return new dn_create_role_request;
}

void dn_create_role_request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    account_id_ = GOOGLE_ULONGLONG(0);
    server_id_ = 0u;
    gate_id_ = 0u;
    if (has_role_data()) {
      if (role_data_ != NULL) role_data_->::proto::common::account_role_data::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool dn_create_role_request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 account_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &account_id_)));
          set_has_account_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_server_id;
        break;
      }

      // optional uint32 server_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_server_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_id_)));
          set_has_server_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_gate_id;
        break;
      }

      // optional uint32 gate_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gate_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gate_id_)));
          set_has_gate_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_role_data;
        break;
      }

      // optional .proto.common.account_role_data role_data = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_role_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_role_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void dn_create_role_request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 account_id = 1;
  if (has_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->account_id(), output);
  }

  // optional uint32 server_id = 2;
  if (has_server_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->server_id(), output);
  }

  // optional uint32 gate_id = 3;
  if (has_gate_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->gate_id(), output);
  }

  // optional .proto.common.account_role_data role_data = 4;
  if (has_role_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->role_data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* dn_create_role_request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 account_id = 1;
  if (has_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->account_id(), target);
  }

  // optional uint32 server_id = 2;
  if (has_server_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->server_id(), target);
  }

  // optional uint32 gate_id = 3;
  if (has_gate_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->gate_id(), target);
  }

  // optional .proto.common.account_role_data role_data = 4;
  if (has_role_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->role_data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int dn_create_role_request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 account_id = 1;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->account_id());
    }

    // optional uint32 server_id = 2;
    if (has_server_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_id());
    }

    // optional uint32 gate_id = 3;
    if (has_gate_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gate_id());
    }

    // optional .proto.common.account_role_data role_data = 4;
    if (has_role_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->role_data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void dn_create_role_request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const dn_create_role_request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const dn_create_role_request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void dn_create_role_request::MergeFrom(const dn_create_role_request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account_id()) {
      set_account_id(from.account_id());
    }
    if (from.has_server_id()) {
      set_server_id(from.server_id());
    }
    if (from.has_gate_id()) {
      set_gate_id(from.gate_id());
    }
    if (from.has_role_data()) {
      mutable_role_data()->::proto::common::account_role_data::MergeFrom(from.role_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void dn_create_role_request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void dn_create_role_request::CopyFrom(const dn_create_role_request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool dn_create_role_request::IsInitialized() const {

  return true;
}

void dn_create_role_request::Swap(dn_create_role_request* other) {
  if (other != this) {
    std::swap(account_id_, other->account_id_);
    std::swap(server_id_, other->server_id_);
    std::swap(gate_id_, other->gate_id_);
    std::swap(role_data_, other->role_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata dn_create_role_request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = dn_create_role_request_descriptor_;
  metadata.reflection = dn_create_role_request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int nd_create_role_reply::kReplyCodeFieldNumber;
const int nd_create_role_reply::kGateIdFieldNumber;
const int nd_create_role_reply::kRoleDataFieldNumber;
const int nd_create_role_reply::kTimeFieldNumber;
#endif  // !_MSC_VER

nd_create_role_reply::nd_create_role_reply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void nd_create_role_reply::InitAsDefaultInstance() {
  role_data_ = const_cast< ::proto::common::account_role_data*>(&::proto::common::account_role_data::default_instance());
}

nd_create_role_reply::nd_create_role_reply(const nd_create_role_reply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void nd_create_role_reply::SharedCtor() {
  _cached_size_ = 0;
  reply_code_ = 0u;
  gate_id_ = 0u;
  role_data_ = NULL;
  time_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

nd_create_role_reply::~nd_create_role_reply() {
  SharedDtor();
}

void nd_create_role_reply::SharedDtor() {
  if (this != default_instance_) {
    delete role_data_;
  }
}

void nd_create_role_reply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* nd_create_role_reply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return nd_create_role_reply_descriptor_;
}

const nd_create_role_reply& nd_create_role_reply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

nd_create_role_reply* nd_create_role_reply::default_instance_ = NULL;

nd_create_role_reply* nd_create_role_reply::New() const {
  return new nd_create_role_reply;
}

void nd_create_role_reply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    reply_code_ = 0u;
    gate_id_ = 0u;
    if (has_role_data()) {
      if (role_data_ != NULL) role_data_->::proto::common::account_role_data::Clear();
    }
    time_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool nd_create_role_reply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 reply_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reply_code_)));
          set_has_reply_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gate_id;
        break;
      }

      // optional uint32 gate_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gate_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gate_id_)));
          set_has_gate_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_role_data;
        break;
      }

      // optional .proto.common.account_role_data role_data = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_role_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_role_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_time;
        break;
      }

      // optional uint64 time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void nd_create_role_reply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 reply_code = 1;
  if (has_reply_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->reply_code(), output);
  }

  // optional uint32 gate_id = 2;
  if (has_gate_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->gate_id(), output);
  }

  // optional .proto.common.account_role_data role_data = 3;
  if (has_role_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->role_data(), output);
  }

  // optional uint64 time = 4;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* nd_create_role_reply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 reply_code = 1;
  if (has_reply_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->reply_code(), target);
  }

  // optional uint32 gate_id = 2;
  if (has_gate_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->gate_id(), target);
  }

  // optional .proto.common.account_role_data role_data = 3;
  if (has_role_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->role_data(), target);
  }

  // optional uint64 time = 4;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int nd_create_role_reply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 reply_code = 1;
    if (has_reply_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reply_code());
    }

    // optional uint32 gate_id = 2;
    if (has_gate_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gate_id());
    }

    // optional .proto.common.account_role_data role_data = 3;
    if (has_role_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->role_data());
    }

    // optional uint64 time = 4;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void nd_create_role_reply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const nd_create_role_reply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const nd_create_role_reply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void nd_create_role_reply::MergeFrom(const nd_create_role_reply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reply_code()) {
      set_reply_code(from.reply_code());
    }
    if (from.has_gate_id()) {
      set_gate_id(from.gate_id());
    }
    if (from.has_role_data()) {
      mutable_role_data()->::proto::common::account_role_data::MergeFrom(from.role_data());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void nd_create_role_reply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void nd_create_role_reply::CopyFrom(const nd_create_role_reply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool nd_create_role_reply::IsInitialized() const {

  return true;
}

void nd_create_role_reply::Swap(nd_create_role_reply* other) {
  if (other != this) {
    std::swap(reply_code_, other->reply_code_);
    std::swap(gate_id_, other->gate_id_);
    std::swap(role_data_, other->role_data_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata nd_create_role_reply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = nd_create_role_reply_descriptor_;
  metadata.reflection = nd_create_role_reply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int dn_role_data_update_notify::kRoleDataFieldNumber;
#endif  // !_MSC_VER

dn_role_data_update_notify::dn_role_data_update_notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void dn_role_data_update_notify::InitAsDefaultInstance() {
  role_data_ = const_cast< ::proto::common::account_role_data*>(&::proto::common::account_role_data::default_instance());
}

dn_role_data_update_notify::dn_role_data_update_notify(const dn_role_data_update_notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void dn_role_data_update_notify::SharedCtor() {
  _cached_size_ = 0;
  role_data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

dn_role_data_update_notify::~dn_role_data_update_notify() {
  SharedDtor();
}

void dn_role_data_update_notify::SharedDtor() {
  if (this != default_instance_) {
    delete role_data_;
  }
}

void dn_role_data_update_notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* dn_role_data_update_notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return dn_role_data_update_notify_descriptor_;
}

const dn_role_data_update_notify& dn_role_data_update_notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

dn_role_data_update_notify* dn_role_data_update_notify::default_instance_ = NULL;

dn_role_data_update_notify* dn_role_data_update_notify::New() const {
  return new dn_role_data_update_notify;
}

void dn_role_data_update_notify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_role_data()) {
      if (role_data_ != NULL) role_data_->::proto::common::account_role_data::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool dn_role_data_update_notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.common.account_role_data role_data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_role_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void dn_role_data_update_notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .proto.common.account_role_data role_data = 1;
  if (has_role_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->role_data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* dn_role_data_update_notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .proto.common.account_role_data role_data = 1;
  if (has_role_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->role_data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int dn_role_data_update_notify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .proto.common.account_role_data role_data = 1;
    if (has_role_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->role_data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void dn_role_data_update_notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const dn_role_data_update_notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const dn_role_data_update_notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void dn_role_data_update_notify::MergeFrom(const dn_role_data_update_notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_data()) {
      mutable_role_data()->::proto::common::account_role_data::MergeFrom(from.role_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void dn_role_data_update_notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void dn_role_data_update_notify::CopyFrom(const dn_role_data_update_notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool dn_role_data_update_notify::IsInitialized() const {

  return true;
}

void dn_role_data_update_notify::Swap(dn_role_data_update_notify* other) {
  if (other != this) {
    std::swap(role_data_, other->role_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata dn_role_data_update_notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = dn_role_data_update_notify_descriptor_;
  metadata.reflection = dn_role_data_update_notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int hg_user_channel_notify::kUserUidFieldNumber;
const int hg_user_channel_notify::kChannelIdFieldNumber;
#endif  // !_MSC_VER

hg_user_channel_notify::hg_user_channel_notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void hg_user_channel_notify::InitAsDefaultInstance() {
}

hg_user_channel_notify::hg_user_channel_notify(const hg_user_channel_notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void hg_user_channel_notify::SharedCtor() {
  _cached_size_ = 0;
  user_uid_ = GOOGLE_ULONGLONG(0);
  channel_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

hg_user_channel_notify::~hg_user_channel_notify() {
  SharedDtor();
}

void hg_user_channel_notify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void hg_user_channel_notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* hg_user_channel_notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return hg_user_channel_notify_descriptor_;
}

const hg_user_channel_notify& hg_user_channel_notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

hg_user_channel_notify* hg_user_channel_notify::default_instance_ = NULL;

hg_user_channel_notify* hg_user_channel_notify::New() const {
  return new hg_user_channel_notify;
}

void hg_user_channel_notify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    user_uid_ = GOOGLE_ULONGLONG(0);
    channel_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool hg_user_channel_notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 user_uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_uid_)));
          set_has_user_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_channel_id;
        break;
      }

      // optional uint64 channel_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_channel_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &channel_id_)));
          set_has_channel_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void hg_user_channel_notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 user_uid = 1;
  if (has_user_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->user_uid(), output);
  }

  // optional uint64 channel_id = 2;
  if (has_channel_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->channel_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* hg_user_channel_notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 user_uid = 1;
  if (has_user_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->user_uid(), target);
  }

  // optional uint64 channel_id = 2;
  if (has_channel_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->channel_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int hg_user_channel_notify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 user_uid = 1;
    if (has_user_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_uid());
    }

    // optional uint64 channel_id = 2;
    if (has_channel_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->channel_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void hg_user_channel_notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const hg_user_channel_notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const hg_user_channel_notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void hg_user_channel_notify::MergeFrom(const hg_user_channel_notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_uid()) {
      set_user_uid(from.user_uid());
    }
    if (from.has_channel_id()) {
      set_channel_id(from.channel_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void hg_user_channel_notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void hg_user_channel_notify::CopyFrom(const hg_user_channel_notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool hg_user_channel_notify::IsInitialized() const {

  return true;
}

void hg_user_channel_notify::Swap(hg_user_channel_notify* other) {
  if (other != this) {
    std::swap(user_uid_, other->user_uid_);
    std::swap(channel_id_, other->channel_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata hg_user_channel_notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = hg_user_channel_notify_descriptor_;
  metadata.reflection = hg_user_channel_notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ge_syn_game_info_notify::kGameIdFieldNumber;
const int ge_syn_game_info_notify::kRegsFieldNumber;
#endif  // !_MSC_VER

ge_syn_game_info_notify::ge_syn_game_info_notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ge_syn_game_info_notify::InitAsDefaultInstance() {
  regs_ = const_cast< ::proto::server::ge_game_scene_reg_request*>(&::proto::server::ge_game_scene_reg_request::default_instance());
}

ge_syn_game_info_notify::ge_syn_game_info_notify(const ge_syn_game_info_notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ge_syn_game_info_notify::SharedCtor() {
  _cached_size_ = 0;
  game_id_ = 0u;
  regs_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ge_syn_game_info_notify::~ge_syn_game_info_notify() {
  SharedDtor();
}

void ge_syn_game_info_notify::SharedDtor() {
  if (this != default_instance_) {
    delete regs_;
  }
}

void ge_syn_game_info_notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ge_syn_game_info_notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ge_syn_game_info_notify_descriptor_;
}

const ge_syn_game_info_notify& ge_syn_game_info_notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

ge_syn_game_info_notify* ge_syn_game_info_notify::default_instance_ = NULL;

ge_syn_game_info_notify* ge_syn_game_info_notify::New() const {
  return new ge_syn_game_info_notify;
}

void ge_syn_game_info_notify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    game_id_ = 0u;
    if (has_regs()) {
      if (regs_ != NULL) regs_->::proto::server::ge_game_scene_reg_request::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ge_syn_game_info_notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 game_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_id_)));
          set_has_game_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_regs;
        break;
      }

      // optional .proto.server.ge_game_scene_reg_request regs = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_regs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_regs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ge_syn_game_info_notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 game_id = 1;
  if (has_game_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->game_id(), output);
  }

  // optional .proto.server.ge_game_scene_reg_request regs = 2;
  if (has_regs()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->regs(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ge_syn_game_info_notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 game_id = 1;
  if (has_game_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->game_id(), target);
  }

  // optional .proto.server.ge_game_scene_reg_request regs = 2;
  if (has_regs()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->regs(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ge_syn_game_info_notify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 game_id = 1;
    if (has_game_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_id());
    }

    // optional .proto.server.ge_game_scene_reg_request regs = 2;
    if (has_regs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->regs());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ge_syn_game_info_notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ge_syn_game_info_notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ge_syn_game_info_notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ge_syn_game_info_notify::MergeFrom(const ge_syn_game_info_notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_game_id()) {
      set_game_id(from.game_id());
    }
    if (from.has_regs()) {
      mutable_regs()->::proto::server::ge_game_scene_reg_request::MergeFrom(from.regs());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ge_syn_game_info_notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ge_syn_game_info_notify::CopyFrom(const ge_syn_game_info_notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ge_syn_game_info_notify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ge_syn_game_info_notify::Swap(ge_syn_game_info_notify* other) {
  if (other != this) {
    std::swap(game_id_, other->game_id_);
    std::swap(regs_, other->regs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ge_syn_game_info_notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ge_syn_game_info_notify_descriptor_;
  metadata.reflection = ge_syn_game_info_notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int gd_syn_game_info_notify::kGameIdFieldNumber;
#endif  // !_MSC_VER

gd_syn_game_info_notify::gd_syn_game_info_notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gd_syn_game_info_notify::InitAsDefaultInstance() {
}

gd_syn_game_info_notify::gd_syn_game_info_notify(const gd_syn_game_info_notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gd_syn_game_info_notify::SharedCtor() {
  _cached_size_ = 0;
  game_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gd_syn_game_info_notify::~gd_syn_game_info_notify() {
  SharedDtor();
}

void gd_syn_game_info_notify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void gd_syn_game_info_notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gd_syn_game_info_notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gd_syn_game_info_notify_descriptor_;
}

const gd_syn_game_info_notify& gd_syn_game_info_notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

gd_syn_game_info_notify* gd_syn_game_info_notify::default_instance_ = NULL;

gd_syn_game_info_notify* gd_syn_game_info_notify::New() const {
  return new gd_syn_game_info_notify;
}

void gd_syn_game_info_notify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    game_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gd_syn_game_info_notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 game_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_id_)));
          set_has_game_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gd_syn_game_info_notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 game_id = 1;
  if (has_game_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->game_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gd_syn_game_info_notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 game_id = 1;
  if (has_game_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->game_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gd_syn_game_info_notify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 game_id = 1;
    if (has_game_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gd_syn_game_info_notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gd_syn_game_info_notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gd_syn_game_info_notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gd_syn_game_info_notify::MergeFrom(const gd_syn_game_info_notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_game_id()) {
      set_game_id(from.game_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gd_syn_game_info_notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gd_syn_game_info_notify::CopyFrom(const gd_syn_game_info_notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gd_syn_game_info_notify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void gd_syn_game_info_notify::Swap(gd_syn_game_info_notify* other) {
  if (other != this) {
    std::swap(game_id_, other->game_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gd_syn_game_info_notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gd_syn_game_info_notify_descriptor_;
  metadata.reflection = gd_syn_game_info_notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int al_syn_gate_info_notify::kGateIdFieldNumber;
const int al_syn_gate_info_notify::kUserListFieldNumber;
#endif  // !_MSC_VER

al_syn_gate_info_notify::al_syn_gate_info_notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void al_syn_gate_info_notify::InitAsDefaultInstance() {
}

al_syn_gate_info_notify::al_syn_gate_info_notify(const al_syn_gate_info_notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void al_syn_gate_info_notify::SharedCtor() {
  _cached_size_ = 0;
  gate_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

al_syn_gate_info_notify::~al_syn_gate_info_notify() {
  SharedDtor();
}

void al_syn_gate_info_notify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void al_syn_gate_info_notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* al_syn_gate_info_notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return al_syn_gate_info_notify_descriptor_;
}

const al_syn_gate_info_notify& al_syn_gate_info_notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

al_syn_gate_info_notify* al_syn_gate_info_notify::default_instance_ = NULL;

al_syn_gate_info_notify* al_syn_gate_info_notify::New() const {
  return new al_syn_gate_info_notify;
}

void al_syn_gate_info_notify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gate_id_ = 0u;
  }
  user_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool al_syn_gate_info_notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 gate_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gate_id_)));
          set_has_gate_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_user_list;
        break;
      }

      // repeated uint64 user_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_user_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 16, input, this->mutable_user_list())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_user_list())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_user_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void al_syn_gate_info_notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 gate_id = 1;
  if (has_gate_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gate_id(), output);
  }

  // repeated uint64 user_list = 2;
  for (int i = 0; i < this->user_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      2, this->user_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* al_syn_gate_info_notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 gate_id = 1;
  if (has_gate_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->gate_id(), target);
  }

  // repeated uint64 user_list = 2;
  for (int i = 0; i < this->user_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(2, this->user_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int al_syn_gate_info_notify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 gate_id = 1;
    if (has_gate_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gate_id());
    }

  }
  // repeated uint64 user_list = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->user_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->user_list(i));
    }
    total_size += 1 * this->user_list_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void al_syn_gate_info_notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const al_syn_gate_info_notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const al_syn_gate_info_notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void al_syn_gate_info_notify::MergeFrom(const al_syn_gate_info_notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  user_list_.MergeFrom(from.user_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gate_id()) {
      set_gate_id(from.gate_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void al_syn_gate_info_notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void al_syn_gate_info_notify::CopyFrom(const al_syn_gate_info_notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool al_syn_gate_info_notify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void al_syn_gate_info_notify::Swap(al_syn_gate_info_notify* other) {
  if (other != this) {
    std::swap(gate_id_, other->gate_id_);
    user_list_.Swap(&other->user_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata al_syn_gate_info_notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = al_syn_gate_info_notify_descriptor_;
  metadata.reflection = al_syn_gate_info_notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ga_syn_game_info_notify::kGameIdFieldNumber;
const int ga_syn_game_info_notify::kGameTypeFieldNumber;
#endif  // !_MSC_VER

ga_syn_game_info_notify::ga_syn_game_info_notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ga_syn_game_info_notify::InitAsDefaultInstance() {
}

ga_syn_game_info_notify::ga_syn_game_info_notify(const ga_syn_game_info_notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ga_syn_game_info_notify::SharedCtor() {
  _cached_size_ = 0;
  game_id_ = 0u;
  game_type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ga_syn_game_info_notify::~ga_syn_game_info_notify() {
  SharedDtor();
}

void ga_syn_game_info_notify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ga_syn_game_info_notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ga_syn_game_info_notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ga_syn_game_info_notify_descriptor_;
}

const ga_syn_game_info_notify& ga_syn_game_info_notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

ga_syn_game_info_notify* ga_syn_game_info_notify::default_instance_ = NULL;

ga_syn_game_info_notify* ga_syn_game_info_notify::New() const {
  return new ga_syn_game_info_notify;
}

void ga_syn_game_info_notify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    game_id_ = 0u;
    game_type_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ga_syn_game_info_notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 game_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_id_)));
          set_has_game_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_game_type;
        break;
      }

      // optional uint32 game_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_game_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_type_)));
          set_has_game_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ga_syn_game_info_notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 game_id = 1;
  if (has_game_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->game_id(), output);
  }

  // optional uint32 game_type = 2;
  if (has_game_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->game_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ga_syn_game_info_notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 game_id = 1;
  if (has_game_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->game_id(), target);
  }

  // optional uint32 game_type = 2;
  if (has_game_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->game_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ga_syn_game_info_notify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 game_id = 1;
    if (has_game_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_id());
    }

    // optional uint32 game_type = 2;
    if (has_game_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ga_syn_game_info_notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ga_syn_game_info_notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ga_syn_game_info_notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ga_syn_game_info_notify::MergeFrom(const ga_syn_game_info_notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_game_id()) {
      set_game_id(from.game_id());
    }
    if (from.has_game_type()) {
      set_game_type(from.game_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ga_syn_game_info_notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ga_syn_game_info_notify::CopyFrom(const ga_syn_game_info_notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ga_syn_game_info_notify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ga_syn_game_info_notify::Swap(ga_syn_game_info_notify* other) {
  if (other != this) {
    std::swap(game_id_, other->game_id_);
    std::swap(game_type_, other->game_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ga_syn_game_info_notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ga_syn_game_info_notify_descriptor_;
  metadata.reflection = ga_syn_game_info_notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ga_syn_cross_id_notify::kUserIdFieldNumber;
const int ga_syn_cross_id_notify::kCrossIdFieldNumber;
#endif  // !_MSC_VER

ga_syn_cross_id_notify::ga_syn_cross_id_notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ga_syn_cross_id_notify::InitAsDefaultInstance() {
}

ga_syn_cross_id_notify::ga_syn_cross_id_notify(const ga_syn_cross_id_notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ga_syn_cross_id_notify::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
  cross_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ga_syn_cross_id_notify::~ga_syn_cross_id_notify() {
  SharedDtor();
}

void ga_syn_cross_id_notify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ga_syn_cross_id_notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ga_syn_cross_id_notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ga_syn_cross_id_notify_descriptor_;
}

const ga_syn_cross_id_notify& ga_syn_cross_id_notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

ga_syn_cross_id_notify* ga_syn_cross_id_notify::default_instance_ = NULL;

ga_syn_cross_id_notify* ga_syn_cross_id_notify::New() const {
  return new ga_syn_cross_id_notify;
}

void ga_syn_cross_id_notify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    user_id_ = GOOGLE_ULONGLONG(0);
    cross_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ga_syn_cross_id_notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 user_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cross_id;
        break;
      }

      // optional uint32 cross_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cross_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cross_id_)));
          set_has_cross_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ga_syn_cross_id_notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->user_id(), output);
  }

  // optional uint32 cross_id = 2;
  if (has_cross_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->cross_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ga_syn_cross_id_notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->user_id(), target);
  }

  // optional uint32 cross_id = 2;
  if (has_cross_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->cross_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ga_syn_cross_id_notify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_id());
    }

    // optional uint32 cross_id = 2;
    if (has_cross_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cross_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ga_syn_cross_id_notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ga_syn_cross_id_notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ga_syn_cross_id_notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ga_syn_cross_id_notify::MergeFrom(const ga_syn_cross_id_notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_cross_id()) {
      set_cross_id(from.cross_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ga_syn_cross_id_notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ga_syn_cross_id_notify::CopyFrom(const ga_syn_cross_id_notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ga_syn_cross_id_notify::IsInitialized() const {

  return true;
}

void ga_syn_cross_id_notify::Swap(ga_syn_cross_id_notify* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(cross_id_, other->cross_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ga_syn_cross_id_notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ga_syn_cross_id_notify_descriptor_;
  metadata.reflection = ga_syn_cross_id_notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ae_syn_gate_info_notify::kGateIdFieldNumber;
#endif  // !_MSC_VER

ae_syn_gate_info_notify::ae_syn_gate_info_notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ae_syn_gate_info_notify::InitAsDefaultInstance() {
}

ae_syn_gate_info_notify::ae_syn_gate_info_notify(const ae_syn_gate_info_notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ae_syn_gate_info_notify::SharedCtor() {
  _cached_size_ = 0;
  gate_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ae_syn_gate_info_notify::~ae_syn_gate_info_notify() {
  SharedDtor();
}

void ae_syn_gate_info_notify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ae_syn_gate_info_notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ae_syn_gate_info_notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ae_syn_gate_info_notify_descriptor_;
}

const ae_syn_gate_info_notify& ae_syn_gate_info_notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

ae_syn_gate_info_notify* ae_syn_gate_info_notify::default_instance_ = NULL;

ae_syn_gate_info_notify* ae_syn_gate_info_notify::New() const {
  return new ae_syn_gate_info_notify;
}

void ae_syn_gate_info_notify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gate_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ae_syn_gate_info_notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 gate_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gate_id_)));
          set_has_gate_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ae_syn_gate_info_notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 gate_id = 1;
  if (has_gate_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gate_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ae_syn_gate_info_notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 gate_id = 1;
  if (has_gate_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->gate_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ae_syn_gate_info_notify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 gate_id = 1;
    if (has_gate_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gate_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ae_syn_gate_info_notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ae_syn_gate_info_notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ae_syn_gate_info_notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ae_syn_gate_info_notify::MergeFrom(const ae_syn_gate_info_notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gate_id()) {
      set_gate_id(from.gate_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ae_syn_gate_info_notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ae_syn_gate_info_notify::CopyFrom(const ae_syn_gate_info_notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ae_syn_gate_info_notify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ae_syn_gate_info_notify::Swap(ae_syn_gate_info_notify* other) {
  if (other != this) {
    std::swap(gate_id_, other->gate_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ae_syn_gate_info_notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ae_syn_gate_info_notify_descriptor_;
  metadata.reflection = ae_syn_gate_info_notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int cross_server_data::kTypeFieldNumber;
const int cross_server_data::kSceneIdFieldNumber;
const int cross_server_data::kDesXFieldNumber;
const int cross_server_data::kDesYFieldNumber;
const int cross_server_data::kDesDirFieldNumber;
const int cross_server_data::kTroopIdFieldNumber;
#endif  // !_MSC_VER

cross_server_data::cross_server_data()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void cross_server_data::InitAsDefaultInstance() {
}

cross_server_data::cross_server_data(const cross_server_data& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void cross_server_data::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  scene_id_ = GOOGLE_ULONGLONG(0);
  des_x_ = 0;
  des_y_ = 0;
  des_dir_ = 0;
  troop_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

cross_server_data::~cross_server_data() {
  SharedDtor();
}

void cross_server_data::SharedDtor() {
  if (this != default_instance_) {
  }
}

void cross_server_data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* cross_server_data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return cross_server_data_descriptor_;
}

const cross_server_data& cross_server_data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

cross_server_data* cross_server_data::default_instance_ = NULL;

cross_server_data* cross_server_data::New() const {
  return new cross_server_data;
}

void cross_server_data::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    scene_id_ = GOOGLE_ULONGLONG(0);
    des_x_ = 0;
    des_y_ = 0;
    des_dir_ = 0;
    troop_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool cross_server_data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.server.scene_change_type type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::server::scene_change_type_IsValid(value)) {
            set_type(static_cast< ::proto::server::scene_change_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_scene_id;
        break;
      }

      // optional uint64 scene_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scene_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &scene_id_)));
          set_has_scene_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_des_x;
        break;
      }

      // optional float des_x = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_des_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &des_x_)));
          set_has_des_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_des_y;
        break;
      }

      // optional float des_y = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_des_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &des_y_)));
          set_has_des_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_des_dir;
        break;
      }

      // optional float des_dir = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_des_dir:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &des_dir_)));
          set_has_des_dir();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_troop_id;
        break;
      }

      // optional uint64 troop_id = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_troop_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &troop_id_)));
          set_has_troop_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void cross_server_data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .proto.server.scene_change_type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional uint64 scene_id = 2;
  if (has_scene_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->scene_id(), output);
  }

  // optional float des_x = 3;
  if (has_des_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->des_x(), output);
  }

  // optional float des_y = 4;
  if (has_des_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->des_y(), output);
  }

  // optional float des_dir = 5;
  if (has_des_dir()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->des_dir(), output);
  }

  // optional uint64 troop_id = 6;
  if (has_troop_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->troop_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* cross_server_data::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .proto.server.scene_change_type type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional uint64 scene_id = 2;
  if (has_scene_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->scene_id(), target);
  }

  // optional float des_x = 3;
  if (has_des_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->des_x(), target);
  }

  // optional float des_y = 4;
  if (has_des_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->des_y(), target);
  }

  // optional float des_dir = 5;
  if (has_des_dir()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->des_dir(), target);
  }

  // optional uint64 troop_id = 6;
  if (has_troop_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->troop_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int cross_server_data::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .proto.server.scene_change_type type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional uint64 scene_id = 2;
    if (has_scene_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->scene_id());
    }

    // optional float des_x = 3;
    if (has_des_x()) {
      total_size += 1 + 4;
    }

    // optional float des_y = 4;
    if (has_des_y()) {
      total_size += 1 + 4;
    }

    // optional float des_dir = 5;
    if (has_des_dir()) {
      total_size += 1 + 4;
    }

    // optional uint64 troop_id = 6;
    if (has_troop_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->troop_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void cross_server_data::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const cross_server_data* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const cross_server_data*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void cross_server_data::MergeFrom(const cross_server_data& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_scene_id()) {
      set_scene_id(from.scene_id());
    }
    if (from.has_des_x()) {
      set_des_x(from.des_x());
    }
    if (from.has_des_y()) {
      set_des_y(from.des_y());
    }
    if (from.has_des_dir()) {
      set_des_dir(from.des_dir());
    }
    if (from.has_troop_id()) {
      set_troop_id(from.troop_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void cross_server_data::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void cross_server_data::CopyFrom(const cross_server_data& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool cross_server_data::IsInitialized() const {

  return true;
}

void cross_server_data::Swap(cross_server_data* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(scene_id_, other->scene_id_);
    std::swap(des_x_, other->des_x_);
    std::swap(des_y_, other->des_y_);
    std::swap(des_dir_, other->des_dir_);
    std::swap(troop_id_, other->troop_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata cross_server_data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = cross_server_data_descriptor_;
  metadata.reflection = cross_server_data_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ae_reg_user_center_request::kUidFieldNumber;
#endif  // !_MSC_VER

ae_reg_user_center_request::ae_reg_user_center_request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ae_reg_user_center_request::InitAsDefaultInstance() {
}

ae_reg_user_center_request::ae_reg_user_center_request(const ae_reg_user_center_request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ae_reg_user_center_request::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ae_reg_user_center_request::~ae_reg_user_center_request() {
  SharedDtor();
}

void ae_reg_user_center_request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ae_reg_user_center_request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ae_reg_user_center_request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ae_reg_user_center_request_descriptor_;
}

const ae_reg_user_center_request& ae_reg_user_center_request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

ae_reg_user_center_request* ae_reg_user_center_request::default_instance_ = NULL;

ae_reg_user_center_request* ae_reg_user_center_request::New() const {
  return new ae_reg_user_center_request;
}

void ae_reg_user_center_request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ae_reg_user_center_request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ae_reg_user_center_request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ae_reg_user_center_request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->uid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ae_reg_user_center_request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ae_reg_user_center_request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ae_reg_user_center_request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ae_reg_user_center_request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ae_reg_user_center_request::MergeFrom(const ae_reg_user_center_request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ae_reg_user_center_request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ae_reg_user_center_request::CopyFrom(const ae_reg_user_center_request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ae_reg_user_center_request::IsInitialized() const {

  return true;
}

void ae_reg_user_center_request::Swap(ae_reg_user_center_request* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ae_reg_user_center_request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ae_reg_user_center_request_descriptor_;
  metadata.reflection = ae_reg_user_center_request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ae_unreg_user_scene_notify::kUidFieldNumber;
const int ae_unreg_user_scene_notify::kUnregCodeFieldNumber;
const int ae_unreg_user_scene_notify::kKickReasonFieldNumber;
#endif  // !_MSC_VER

ae_unreg_user_scene_notify::ae_unreg_user_scene_notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ae_unreg_user_scene_notify::InitAsDefaultInstance() {
}

ae_unreg_user_scene_notify::ae_unreg_user_scene_notify(const ae_unreg_user_scene_notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ae_unreg_user_scene_notify::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_ULONGLONG(0);
  unreg_code_ = 0u;
  kick_reason_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ae_unreg_user_scene_notify::~ae_unreg_user_scene_notify() {
  SharedDtor();
}

void ae_unreg_user_scene_notify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ae_unreg_user_scene_notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ae_unreg_user_scene_notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ae_unreg_user_scene_notify_descriptor_;
}

const ae_unreg_user_scene_notify& ae_unreg_user_scene_notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

ae_unreg_user_scene_notify* ae_unreg_user_scene_notify::default_instance_ = NULL;

ae_unreg_user_scene_notify* ae_unreg_user_scene_notify::New() const {
  return new ae_unreg_user_scene_notify;
}

void ae_unreg_user_scene_notify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = GOOGLE_ULONGLONG(0);
    unreg_code_ = 0u;
    kick_reason_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ae_unreg_user_scene_notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_unreg_code;
        break;
      }

      // optional uint32 unreg_code = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_unreg_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unreg_code_)));
          set_has_unreg_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_kick_reason;
        break;
      }

      // optional uint32 kick_reason = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_kick_reason:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &kick_reason_)));
          set_has_kick_reason();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ae_unreg_user_scene_notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uid(), output);
  }

  // optional uint32 unreg_code = 2;
  if (has_unreg_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->unreg_code(), output);
  }

  // optional uint32 kick_reason = 3;
  if (has_kick_reason()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->kick_reason(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ae_unreg_user_scene_notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->uid(), target);
  }

  // optional uint32 unreg_code = 2;
  if (has_unreg_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->unreg_code(), target);
  }

  // optional uint32 kick_reason = 3;
  if (has_kick_reason()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->kick_reason(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ae_unreg_user_scene_notify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uid());
    }

    // optional uint32 unreg_code = 2;
    if (has_unreg_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->unreg_code());
    }

    // optional uint32 kick_reason = 3;
    if (has_kick_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->kick_reason());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ae_unreg_user_scene_notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ae_unreg_user_scene_notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ae_unreg_user_scene_notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ae_unreg_user_scene_notify::MergeFrom(const ae_unreg_user_scene_notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_unreg_code()) {
      set_unreg_code(from.unreg_code());
    }
    if (from.has_kick_reason()) {
      set_kick_reason(from.kick_reason());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ae_unreg_user_scene_notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ae_unreg_user_scene_notify::CopyFrom(const ae_unreg_user_scene_notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ae_unreg_user_scene_notify::IsInitialized() const {

  return true;
}

void ae_unreg_user_scene_notify::Swap(ae_unreg_user_scene_notify* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(unreg_code_, other->unreg_code_);
    std::swap(kick_reason_, other->kick_reason_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ae_unreg_user_scene_notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ae_unreg_user_scene_notify_descriptor_;
  metadata.reflection = ae_unreg_user_scene_notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ea_unreg_user_center_notify::kUidFieldNumber;
const int ea_unreg_user_center_notify::kUnregCodeFieldNumber;
const int ea_unreg_user_center_notify::kCodeParamFieldNumber;
#endif  // !_MSC_VER

ea_unreg_user_center_notify::ea_unreg_user_center_notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ea_unreg_user_center_notify::InitAsDefaultInstance() {
}

ea_unreg_user_center_notify::ea_unreg_user_center_notify(const ea_unreg_user_center_notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ea_unreg_user_center_notify::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_ULONGLONG(0);
  unreg_code_ = 0u;
  code_param_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ea_unreg_user_center_notify::~ea_unreg_user_center_notify() {
  SharedDtor();
}

void ea_unreg_user_center_notify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ea_unreg_user_center_notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ea_unreg_user_center_notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ea_unreg_user_center_notify_descriptor_;
}

const ea_unreg_user_center_notify& ea_unreg_user_center_notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

ea_unreg_user_center_notify* ea_unreg_user_center_notify::default_instance_ = NULL;

ea_unreg_user_center_notify* ea_unreg_user_center_notify::New() const {
  return new ea_unreg_user_center_notify;
}

void ea_unreg_user_center_notify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = GOOGLE_ULONGLONG(0);
    unreg_code_ = 0u;
    code_param_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ea_unreg_user_center_notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_unreg_code;
        break;
      }

      // optional uint32 unreg_code = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_unreg_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unreg_code_)));
          set_has_unreg_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_code_param;
        break;
      }

      // optional uint32 code_param = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_code_param:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &code_param_)));
          set_has_code_param();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ea_unreg_user_center_notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uid(), output);
  }

  // optional uint32 unreg_code = 2;
  if (has_unreg_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->unreg_code(), output);
  }

  // optional uint32 code_param = 3;
  if (has_code_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->code_param(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ea_unreg_user_center_notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->uid(), target);
  }

  // optional uint32 unreg_code = 2;
  if (has_unreg_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->unreg_code(), target);
  }

  // optional uint32 code_param = 3;
  if (has_code_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->code_param(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ea_unreg_user_center_notify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uid());
    }

    // optional uint32 unreg_code = 2;
    if (has_unreg_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->unreg_code());
    }

    // optional uint32 code_param = 3;
    if (has_code_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->code_param());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ea_unreg_user_center_notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ea_unreg_user_center_notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ea_unreg_user_center_notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ea_unreg_user_center_notify::MergeFrom(const ea_unreg_user_center_notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_unreg_code()) {
      set_unreg_code(from.unreg_code());
    }
    if (from.has_code_param()) {
      set_code_param(from.code_param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ea_unreg_user_center_notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ea_unreg_user_center_notify::CopyFrom(const ea_unreg_user_center_notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ea_unreg_user_center_notify::IsInitialized() const {

  return true;
}

void ea_unreg_user_center_notify::Swap(ea_unreg_user_center_notify* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(unreg_code_, other->unreg_code_);
    std::swap(code_param_, other->code_param_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ea_unreg_user_center_notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ea_unreg_user_center_notify_descriptor_;
  metadata.reflection = ea_unreg_user_center_notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ae_create_role_request::kUidFieldNumber;
const int ae_create_role_request::kNicknameFieldNumber;
const int ae_create_role_request::kRoleTypeFieldNumber;
#endif  // !_MSC_VER

ae_create_role_request::ae_create_role_request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ae_create_role_request::InitAsDefaultInstance() {
}

ae_create_role_request::ae_create_role_request(const ae_create_role_request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ae_create_role_request::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_ULONGLONG(0);
  nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  role_type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ae_create_role_request::~ae_create_role_request() {
  SharedDtor();
}

void ae_create_role_request::SharedDtor() {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    delete nickname_;
  }
  if (this != default_instance_) {
  }
}

void ae_create_role_request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ae_create_role_request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ae_create_role_request_descriptor_;
}

const ae_create_role_request& ae_create_role_request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

ae_create_role_request* ae_create_role_request::default_instance_ = NULL;

ae_create_role_request* ae_create_role_request::New() const {
  return new ae_create_role_request;
}

void ae_create_role_request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = GOOGLE_ULONGLONG(0);
    if (has_nickname()) {
      if (nickname_ != &::google::protobuf::internal::kEmptyString) {
        nickname_->clear();
      }
    }
    role_type_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ae_create_role_request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_nickname;
        break;
      }

      // optional string nickname = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nickname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->nickname().data(), this->nickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_role_type;
        break;
      }

      // optional uint32 role_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_type_)));
          set_has_role_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ae_create_role_request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uid(), output);
  }

  // optional string nickname = 2;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->nickname(), output);
  }

  // optional uint32 role_type = 3;
  if (has_role_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->role_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ae_create_role_request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->uid(), target);
  }

  // optional string nickname = 2;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->nickname(), target);
  }

  // optional uint32 role_type = 3;
  if (has_role_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->role_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ae_create_role_request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uid());
    }

    // optional string nickname = 2;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }

    // optional uint32 role_type = 3;
    if (has_role_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->role_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ae_create_role_request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ae_create_role_request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ae_create_role_request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ae_create_role_request::MergeFrom(const ae_create_role_request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_nickname()) {
      set_nickname(from.nickname());
    }
    if (from.has_role_type()) {
      set_role_type(from.role_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ae_create_role_request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ae_create_role_request::CopyFrom(const ae_create_role_request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ae_create_role_request::IsInitialized() const {

  return true;
}

void ae_create_role_request::Swap(ae_create_role_request* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(nickname_, other->nickname_);
    std::swap(role_type_, other->role_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ae_create_role_request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ae_create_role_request_descriptor_;
  metadata.reflection = ae_create_role_request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ea_create_role_reply::kUidFieldNumber;
const int ea_create_role_reply::kReplyCodeFieldNumber;
#endif  // !_MSC_VER

ea_create_role_reply::ea_create_role_reply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ea_create_role_reply::InitAsDefaultInstance() {
}

ea_create_role_reply::ea_create_role_reply(const ea_create_role_reply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ea_create_role_reply::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_ULONGLONG(0);
  reply_code_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ea_create_role_reply::~ea_create_role_reply() {
  SharedDtor();
}

void ea_create_role_reply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ea_create_role_reply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ea_create_role_reply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ea_create_role_reply_descriptor_;
}

const ea_create_role_reply& ea_create_role_reply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

ea_create_role_reply* ea_create_role_reply::default_instance_ = NULL;

ea_create_role_reply* ea_create_role_reply::New() const {
  return new ea_create_role_reply;
}

void ea_create_role_reply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = GOOGLE_ULONGLONG(0);
    reply_code_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ea_create_role_reply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_reply_code;
        break;
      }

      // optional uint32 reply_code = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reply_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reply_code_)));
          set_has_reply_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ea_create_role_reply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uid(), output);
  }

  // optional uint32 reply_code = 2;
  if (has_reply_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->reply_code(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ea_create_role_reply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->uid(), target);
  }

  // optional uint32 reply_code = 2;
  if (has_reply_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->reply_code(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ea_create_role_reply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uid());
    }

    // optional uint32 reply_code = 2;
    if (has_reply_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reply_code());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ea_create_role_reply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ea_create_role_reply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ea_create_role_reply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ea_create_role_reply::MergeFrom(const ea_create_role_reply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_reply_code()) {
      set_reply_code(from.reply_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ea_create_role_reply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ea_create_role_reply::CopyFrom(const ea_create_role_reply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ea_create_role_reply::IsInitialized() const {

  return true;
}

void ea_create_role_reply::Swap(ea_create_role_reply* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(reply_code_, other->reply_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ea_create_role_reply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ea_create_role_reply_descriptor_;
  metadata.reflection = ea_create_role_reply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ae_user_cross_server_notify::kDataFieldNumber;
#endif  // !_MSC_VER

ae_user_cross_server_notify::ae_user_cross_server_notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ae_user_cross_server_notify::InitAsDefaultInstance() {
  data_ = const_cast< ::proto::server::cross_server_data*>(&::proto::server::cross_server_data::default_instance());
}

ae_user_cross_server_notify::ae_user_cross_server_notify(const ae_user_cross_server_notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ae_user_cross_server_notify::SharedCtor() {
  _cached_size_ = 0;
  data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ae_user_cross_server_notify::~ae_user_cross_server_notify() {
  SharedDtor();
}

void ae_user_cross_server_notify::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
  }
}

void ae_user_cross_server_notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ae_user_cross_server_notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ae_user_cross_server_notify_descriptor_;
}

const ae_user_cross_server_notify& ae_user_cross_server_notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

ae_user_cross_server_notify* ae_user_cross_server_notify::default_instance_ = NULL;

ae_user_cross_server_notify* ae_user_cross_server_notify::New() const {
  return new ae_user_cross_server_notify;
}

void ae_user_cross_server_notify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_data()) {
      if (data_ != NULL) data_->::proto::server::cross_server_data::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ae_user_cross_server_notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.server.cross_server_data data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ae_user_cross_server_notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .proto.server.cross_server_data data = 1;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ae_user_cross_server_notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .proto.server.cross_server_data data = 1;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ae_user_cross_server_notify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .proto.server.cross_server_data data = 1;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ae_user_cross_server_notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ae_user_cross_server_notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ae_user_cross_server_notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ae_user_cross_server_notify::MergeFrom(const ae_user_cross_server_notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_data()) {
      mutable_data()->::proto::server::cross_server_data::MergeFrom(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ae_user_cross_server_notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ae_user_cross_server_notify::CopyFrom(const ae_user_cross_server_notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ae_user_cross_server_notify::IsInitialized() const {

  return true;
}

void ae_user_cross_server_notify::Swap(ae_user_cross_server_notify* other) {
  if (other != this) {
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ae_user_cross_server_notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ae_user_cross_server_notify_descriptor_;
  metadata.reflection = ae_user_cross_server_notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ea_kick_all_user_notify::kReasonFieldNumber;
#endif  // !_MSC_VER

ea_kick_all_user_notify::ea_kick_all_user_notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ea_kick_all_user_notify::InitAsDefaultInstance() {
}

ea_kick_all_user_notify::ea_kick_all_user_notify(const ea_kick_all_user_notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ea_kick_all_user_notify::SharedCtor() {
  _cached_size_ = 0;
  reason_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ea_kick_all_user_notify::~ea_kick_all_user_notify() {
  SharedDtor();
}

void ea_kick_all_user_notify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ea_kick_all_user_notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ea_kick_all_user_notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ea_kick_all_user_notify_descriptor_;
}

const ea_kick_all_user_notify& ea_kick_all_user_notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

ea_kick_all_user_notify* ea_kick_all_user_notify::default_instance_ = NULL;

ea_kick_all_user_notify* ea_kick_all_user_notify::New() const {
  return new ea_kick_all_user_notify;
}

void ea_kick_all_user_notify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    reason_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ea_kick_all_user_notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 reason = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reason_)));
          set_has_reason();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ea_kick_all_user_notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 reason = 1;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->reason(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ea_kick_all_user_notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 reason = 1;
  if (has_reason()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->reason(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ea_kick_all_user_notify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 reason = 1;
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reason());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ea_kick_all_user_notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ea_kick_all_user_notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ea_kick_all_user_notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ea_kick_all_user_notify::MergeFrom(const ea_kick_all_user_notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reason()) {
      set_reason(from.reason());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ea_kick_all_user_notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ea_kick_all_user_notify::CopyFrom(const ea_kick_all_user_notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ea_kick_all_user_notify::IsInitialized() const {

  return true;
}

void ea_kick_all_user_notify::Swap(ea_kick_all_user_notify* other) {
  if (other != this) {
    std::swap(reason_, other->reason_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ea_kick_all_user_notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ea_kick_all_user_notify_descriptor_;
  metadata.reflection = ea_kick_all_user_notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int global_user_data::kTypeFieldNumber;
const int global_user_data::kLevelFieldNumber;
const int global_user_data::kFightingFieldNumber;
const int global_user_data::kHeroPluginFieldNumber;
const int global_user_data::kSceneIdFieldNumber;
const int global_user_data::kMapTidFieldNumber;
const int global_user_data::kFamilyContributionFieldNumber;
const int global_user_data::kHeadFrameIdFieldNumber;
const int global_user_data::kCharmFieldNumber;
#endif  // !_MSC_VER

global_user_data::global_user_data()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void global_user_data::InitAsDefaultInstance() {
}

global_user_data::global_user_data(const global_user_data& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void global_user_data::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  level_ = 0u;
  fighting_ = 0u;
  hero_plugin_ = 0u;
  scene_id_ = GOOGLE_ULONGLONG(0);
  map_tid_ = 0u;
  family_contribution_ = 0u;
  head_frame_id_ = 0u;
  charm_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

global_user_data::~global_user_data() {
  SharedDtor();
}

void global_user_data::SharedDtor() {
  if (this != default_instance_) {
  }
}

void global_user_data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* global_user_data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return global_user_data_descriptor_;
}

const global_user_data& global_user_data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

global_user_data* global_user_data::default_instance_ = NULL;

global_user_data* global_user_data::New() const {
  return new global_user_data;
}

void global_user_data::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    level_ = 0u;
    fighting_ = 0u;
    hero_plugin_ = 0u;
    scene_id_ = GOOGLE_ULONGLONG(0);
    map_tid_ = 0u;
    family_contribution_ = 0u;
    head_frame_id_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    charm_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool global_user_data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.server.scene_change_type type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::server::scene_change_type_IsValid(value)) {
            set_type(static_cast< ::proto::server::scene_change_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }

      // optional uint32 level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_fighting;
        break;
      }

      // optional uint32 fighting = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fighting:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fighting_)));
          set_has_fighting();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_hero_plugin;
        break;
      }

      // optional uint32 hero_plugin = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hero_plugin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hero_plugin_)));
          set_has_hero_plugin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_scene_id;
        break;
      }

      // optional uint64 scene_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scene_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &scene_id_)));
          set_has_scene_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_map_tid;
        break;
      }

      // optional uint32 map_tid = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_map_tid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &map_tid_)));
          set_has_map_tid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_family_contribution;
        break;
      }

      // optional uint32 family_contribution = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_family_contribution:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &family_contribution_)));
          set_has_family_contribution();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_head_frame_id;
        break;
      }

      // optional uint32 head_frame_id = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_head_frame_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &head_frame_id_)));
          set_has_head_frame_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_charm;
        break;
      }

      // optional uint32 charm = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_charm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charm_)));
          set_has_charm();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void global_user_data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .proto.server.scene_change_type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional uint32 level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->level(), output);
  }

  // optional uint32 fighting = 3;
  if (has_fighting()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->fighting(), output);
  }

  // optional uint32 hero_plugin = 4;
  if (has_hero_plugin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->hero_plugin(), output);
  }

  // optional uint64 scene_id = 5;
  if (has_scene_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->scene_id(), output);
  }

  // optional uint32 map_tid = 6;
  if (has_map_tid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->map_tid(), output);
  }

  // optional uint32 family_contribution = 7;
  if (has_family_contribution()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->family_contribution(), output);
  }

  // optional uint32 head_frame_id = 8;
  if (has_head_frame_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->head_frame_id(), output);
  }

  // optional uint32 charm = 9;
  if (has_charm()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->charm(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* global_user_data::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .proto.server.scene_change_type type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional uint32 level = 2;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->level(), target);
  }

  // optional uint32 fighting = 3;
  if (has_fighting()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->fighting(), target);
  }

  // optional uint32 hero_plugin = 4;
  if (has_hero_plugin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->hero_plugin(), target);
  }

  // optional uint64 scene_id = 5;
  if (has_scene_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->scene_id(), target);
  }

  // optional uint32 map_tid = 6;
  if (has_map_tid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->map_tid(), target);
  }

  // optional uint32 family_contribution = 7;
  if (has_family_contribution()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->family_contribution(), target);
  }

  // optional uint32 head_frame_id = 8;
  if (has_head_frame_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->head_frame_id(), target);
  }

  // optional uint32 charm = 9;
  if (has_charm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->charm(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int global_user_data::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .proto.server.scene_change_type type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional uint32 level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional uint32 fighting = 3;
    if (has_fighting()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fighting());
    }

    // optional uint32 hero_plugin = 4;
    if (has_hero_plugin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hero_plugin());
    }

    // optional uint64 scene_id = 5;
    if (has_scene_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->scene_id());
    }

    // optional uint32 map_tid = 6;
    if (has_map_tid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->map_tid());
    }

    // optional uint32 family_contribution = 7;
    if (has_family_contribution()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->family_contribution());
    }

    // optional uint32 head_frame_id = 8;
    if (has_head_frame_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->head_frame_id());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 charm = 9;
    if (has_charm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charm());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void global_user_data::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const global_user_data* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const global_user_data*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void global_user_data::MergeFrom(const global_user_data& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_fighting()) {
      set_fighting(from.fighting());
    }
    if (from.has_hero_plugin()) {
      set_hero_plugin(from.hero_plugin());
    }
    if (from.has_scene_id()) {
      set_scene_id(from.scene_id());
    }
    if (from.has_map_tid()) {
      set_map_tid(from.map_tid());
    }
    if (from.has_family_contribution()) {
      set_family_contribution(from.family_contribution());
    }
    if (from.has_head_frame_id()) {
      set_head_frame_id(from.head_frame_id());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_charm()) {
      set_charm(from.charm());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void global_user_data::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void global_user_data::CopyFrom(const global_user_data& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool global_user_data::IsInitialized() const {

  return true;
}

void global_user_data::Swap(global_user_data* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(level_, other->level_);
    std::swap(fighting_, other->fighting_);
    std::swap(hero_plugin_, other->hero_plugin_);
    std::swap(scene_id_, other->scene_id_);
    std::swap(map_tid_, other->map_tid_);
    std::swap(family_contribution_, other->family_contribution_);
    std::swap(head_frame_id_, other->head_frame_id_);
    std::swap(charm_, other->charm_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata global_user_data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = global_user_data_descriptor_;
  metadata.reflection = global_user_data_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int eg_unreg_user_scene_notify::kUidFieldNumber;
const int eg_unreg_user_scene_notify::kUnregCodeFieldNumber;
#endif  // !_MSC_VER

eg_unreg_user_scene_notify::eg_unreg_user_scene_notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void eg_unreg_user_scene_notify::InitAsDefaultInstance() {
}

eg_unreg_user_scene_notify::eg_unreg_user_scene_notify(const eg_unreg_user_scene_notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void eg_unreg_user_scene_notify::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_ULONGLONG(0);
  unreg_code_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

eg_unreg_user_scene_notify::~eg_unreg_user_scene_notify() {
  SharedDtor();
}

void eg_unreg_user_scene_notify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void eg_unreg_user_scene_notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* eg_unreg_user_scene_notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return eg_unreg_user_scene_notify_descriptor_;
}

const eg_unreg_user_scene_notify& eg_unreg_user_scene_notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

eg_unreg_user_scene_notify* eg_unreg_user_scene_notify::default_instance_ = NULL;

eg_unreg_user_scene_notify* eg_unreg_user_scene_notify::New() const {
  return new eg_unreg_user_scene_notify;
}

void eg_unreg_user_scene_notify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = GOOGLE_ULONGLONG(0);
    unreg_code_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool eg_unreg_user_scene_notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_unreg_code;
        break;
      }

      // optional uint32 unreg_code = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_unreg_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unreg_code_)));
          set_has_unreg_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void eg_unreg_user_scene_notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uid(), output);
  }

  // optional uint32 unreg_code = 2;
  if (has_unreg_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->unreg_code(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* eg_unreg_user_scene_notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->uid(), target);
  }

  // optional uint32 unreg_code = 2;
  if (has_unreg_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->unreg_code(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int eg_unreg_user_scene_notify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uid());
    }

    // optional uint32 unreg_code = 2;
    if (has_unreg_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->unreg_code());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void eg_unreg_user_scene_notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const eg_unreg_user_scene_notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const eg_unreg_user_scene_notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void eg_unreg_user_scene_notify::MergeFrom(const eg_unreg_user_scene_notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_unreg_code()) {
      set_unreg_code(from.unreg_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void eg_unreg_user_scene_notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void eg_unreg_user_scene_notify::CopyFrom(const eg_unreg_user_scene_notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool eg_unreg_user_scene_notify::IsInitialized() const {

  return true;
}

void eg_unreg_user_scene_notify::Swap(eg_unreg_user_scene_notify* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(unreg_code_, other->unreg_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata eg_unreg_user_scene_notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = eg_unreg_user_scene_notify_descriptor_;
  metadata.reflection = eg_unreg_user_scene_notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ge_unreg_user_scene_notify::kUidFieldNumber;
const int ge_unreg_user_scene_notify::kUnregCodeFieldNumber;
const int ge_unreg_user_scene_notify::kKickReasonFieldNumber;
#endif  // !_MSC_VER

ge_unreg_user_scene_notify::ge_unreg_user_scene_notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ge_unreg_user_scene_notify::InitAsDefaultInstance() {
}

ge_unreg_user_scene_notify::ge_unreg_user_scene_notify(const ge_unreg_user_scene_notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ge_unreg_user_scene_notify::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_ULONGLONG(0);
  unreg_code_ = 0u;
  kick_reason_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ge_unreg_user_scene_notify::~ge_unreg_user_scene_notify() {
  SharedDtor();
}

void ge_unreg_user_scene_notify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ge_unreg_user_scene_notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ge_unreg_user_scene_notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ge_unreg_user_scene_notify_descriptor_;
}

const ge_unreg_user_scene_notify& ge_unreg_user_scene_notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

ge_unreg_user_scene_notify* ge_unreg_user_scene_notify::default_instance_ = NULL;

ge_unreg_user_scene_notify* ge_unreg_user_scene_notify::New() const {
  return new ge_unreg_user_scene_notify;
}

void ge_unreg_user_scene_notify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = GOOGLE_ULONGLONG(0);
    unreg_code_ = 0u;
    kick_reason_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ge_unreg_user_scene_notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_unreg_code;
        break;
      }

      // optional uint32 unreg_code = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_unreg_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unreg_code_)));
          set_has_unreg_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_kick_reason;
        break;
      }

      // optional uint32 kick_reason = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_kick_reason:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &kick_reason_)));
          set_has_kick_reason();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ge_unreg_user_scene_notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uid(), output);
  }

  // optional uint32 unreg_code = 2;
  if (has_unreg_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->unreg_code(), output);
  }

  // optional uint32 kick_reason = 3;
  if (has_kick_reason()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->kick_reason(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ge_unreg_user_scene_notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->uid(), target);
  }

  // optional uint32 unreg_code = 2;
  if (has_unreg_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->unreg_code(), target);
  }

  // optional uint32 kick_reason = 3;
  if (has_kick_reason()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->kick_reason(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ge_unreg_user_scene_notify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uid());
    }

    // optional uint32 unreg_code = 2;
    if (has_unreg_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->unreg_code());
    }

    // optional uint32 kick_reason = 3;
    if (has_kick_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->kick_reason());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ge_unreg_user_scene_notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ge_unreg_user_scene_notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ge_unreg_user_scene_notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ge_unreg_user_scene_notify::MergeFrom(const ge_unreg_user_scene_notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_unreg_code()) {
      set_unreg_code(from.unreg_code());
    }
    if (from.has_kick_reason()) {
      set_kick_reason(from.kick_reason());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ge_unreg_user_scene_notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ge_unreg_user_scene_notify::CopyFrom(const ge_unreg_user_scene_notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ge_unreg_user_scene_notify::IsInitialized() const {

  return true;
}

void ge_unreg_user_scene_notify::Swap(ge_unreg_user_scene_notify* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(unreg_code_, other->unreg_code_);
    std::swap(kick_reason_, other->kick_reason_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ge_unreg_user_scene_notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ge_unreg_user_scene_notify_descriptor_;
  metadata.reflection = ge_unreg_user_scene_notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int eg_reg_user_scene_request::kUidFieldNumber;
const int eg_reg_user_scene_request::kGateIdFieldNumber;
const int eg_reg_user_scene_request::kSceneDataFieldNumber;
const int eg_reg_user_scene_request::kFamilyIdFieldNumber;
const int eg_reg_user_scene_request::kFamilyNameFieldNumber;
const int eg_reg_user_scene_request::kFamilyOfficerFieldNumber;
const int eg_reg_user_scene_request::kCountryIdFieldNumber;
const int eg_reg_user_scene_request::kCountryOfficerFieldNumber;
const int eg_reg_user_scene_request::kFamilyLevelFieldNumber;
const int eg_reg_user_scene_request::kCharmFieldNumber;
#endif  // !_MSC_VER

eg_reg_user_scene_request::eg_reg_user_scene_request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void eg_reg_user_scene_request::InitAsDefaultInstance() {
  scene_data_ = const_cast< ::proto::server::cross_server_data*>(&::proto::server::cross_server_data::default_instance());
}

eg_reg_user_scene_request::eg_reg_user_scene_request(const eg_reg_user_scene_request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void eg_reg_user_scene_request::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_ULONGLONG(0);
  gate_id_ = 0u;
  scene_data_ = NULL;
  family_id_ = GOOGLE_ULONGLONG(0);
  family_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  family_officer_ = 0u;
  country_id_ = 0u;
  country_officer_ = 0u;
  family_level_ = 0u;
  charm_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

eg_reg_user_scene_request::~eg_reg_user_scene_request() {
  SharedDtor();
}

void eg_reg_user_scene_request::SharedDtor() {
  if (family_name_ != &::google::protobuf::internal::kEmptyString) {
    delete family_name_;
  }
  if (this != default_instance_) {
    delete scene_data_;
  }
}

void eg_reg_user_scene_request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* eg_reg_user_scene_request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return eg_reg_user_scene_request_descriptor_;
}

const eg_reg_user_scene_request& eg_reg_user_scene_request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

eg_reg_user_scene_request* eg_reg_user_scene_request::default_instance_ = NULL;

eg_reg_user_scene_request* eg_reg_user_scene_request::New() const {
  return new eg_reg_user_scene_request;
}

void eg_reg_user_scene_request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = GOOGLE_ULONGLONG(0);
    gate_id_ = 0u;
    if (has_scene_data()) {
      if (scene_data_ != NULL) scene_data_->::proto::server::cross_server_data::Clear();
    }
    family_id_ = GOOGLE_ULONGLONG(0);
    if (has_family_name()) {
      if (family_name_ != &::google::protobuf::internal::kEmptyString) {
        family_name_->clear();
      }
    }
    family_officer_ = 0u;
    country_id_ = 0u;
    country_officer_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    family_level_ = 0u;
    charm_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool eg_reg_user_scene_request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gate_id;
        break;
      }

      // optional uint32 gate_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gate_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gate_id_)));
          set_has_gate_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_scene_data;
        break;
      }

      // optional .proto.server.cross_server_data scene_data = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_scene_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_scene_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_family_id;
        break;
      }

      // optional uint64 family_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_family_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &family_id_)));
          set_has_family_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_family_name;
        break;
      }

      // optional string family_name = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_family_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_family_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->family_name().data(), this->family_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_family_officer;
        break;
      }

      // optional uint32 family_officer = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_family_officer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &family_officer_)));
          set_has_family_officer();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_country_id;
        break;
      }

      // optional uint32 country_id = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_country_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &country_id_)));
          set_has_country_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_country_officer;
        break;
      }

      // optional uint32 country_officer = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_country_officer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &country_officer_)));
          set_has_country_officer();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_family_level;
        break;
      }

      // optional uint32 family_level = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_family_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &family_level_)));
          set_has_family_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_charm;
        break;
      }

      // optional uint32 charm = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_charm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charm_)));
          set_has_charm();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void eg_reg_user_scene_request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uid(), output);
  }

  // optional uint32 gate_id = 2;
  if (has_gate_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->gate_id(), output);
  }

  // optional .proto.server.cross_server_data scene_data = 3;
  if (has_scene_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->scene_data(), output);
  }

  // optional uint64 family_id = 4;
  if (has_family_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->family_id(), output);
  }

  // optional string family_name = 5;
  if (has_family_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->family_name().data(), this->family_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->family_name(), output);
  }

  // optional uint32 family_officer = 6;
  if (has_family_officer()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->family_officer(), output);
  }

  // optional uint32 country_id = 7;
  if (has_country_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->country_id(), output);
  }

  // optional uint32 country_officer = 8;
  if (has_country_officer()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->country_officer(), output);
  }

  // optional uint32 family_level = 9;
  if (has_family_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->family_level(), output);
  }

  // optional uint32 charm = 10;
  if (has_charm()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->charm(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* eg_reg_user_scene_request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->uid(), target);
  }

  // optional uint32 gate_id = 2;
  if (has_gate_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->gate_id(), target);
  }

  // optional .proto.server.cross_server_data scene_data = 3;
  if (has_scene_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->scene_data(), target);
  }

  // optional uint64 family_id = 4;
  if (has_family_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->family_id(), target);
  }

  // optional string family_name = 5;
  if (has_family_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->family_name().data(), this->family_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->family_name(), target);
  }

  // optional uint32 family_officer = 6;
  if (has_family_officer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->family_officer(), target);
  }

  // optional uint32 country_id = 7;
  if (has_country_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->country_id(), target);
  }

  // optional uint32 country_officer = 8;
  if (has_country_officer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->country_officer(), target);
  }

  // optional uint32 family_level = 9;
  if (has_family_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->family_level(), target);
  }

  // optional uint32 charm = 10;
  if (has_charm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->charm(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int eg_reg_user_scene_request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uid());
    }

    // optional uint32 gate_id = 2;
    if (has_gate_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gate_id());
    }

    // optional .proto.server.cross_server_data scene_data = 3;
    if (has_scene_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->scene_data());
    }

    // optional uint64 family_id = 4;
    if (has_family_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->family_id());
    }

    // optional string family_name = 5;
    if (has_family_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->family_name());
    }

    // optional uint32 family_officer = 6;
    if (has_family_officer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->family_officer());
    }

    // optional uint32 country_id = 7;
    if (has_country_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->country_id());
    }

    // optional uint32 country_officer = 8;
    if (has_country_officer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->country_officer());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 family_level = 9;
    if (has_family_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->family_level());
    }

    // optional uint32 charm = 10;
    if (has_charm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charm());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void eg_reg_user_scene_request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const eg_reg_user_scene_request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const eg_reg_user_scene_request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void eg_reg_user_scene_request::MergeFrom(const eg_reg_user_scene_request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_gate_id()) {
      set_gate_id(from.gate_id());
    }
    if (from.has_scene_data()) {
      mutable_scene_data()->::proto::server::cross_server_data::MergeFrom(from.scene_data());
    }
    if (from.has_family_id()) {
      set_family_id(from.family_id());
    }
    if (from.has_family_name()) {
      set_family_name(from.family_name());
    }
    if (from.has_family_officer()) {
      set_family_officer(from.family_officer());
    }
    if (from.has_country_id()) {
      set_country_id(from.country_id());
    }
    if (from.has_country_officer()) {
      set_country_officer(from.country_officer());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_family_level()) {
      set_family_level(from.family_level());
    }
    if (from.has_charm()) {
      set_charm(from.charm());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void eg_reg_user_scene_request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void eg_reg_user_scene_request::CopyFrom(const eg_reg_user_scene_request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool eg_reg_user_scene_request::IsInitialized() const {

  return true;
}

void eg_reg_user_scene_request::Swap(eg_reg_user_scene_request* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(gate_id_, other->gate_id_);
    std::swap(scene_data_, other->scene_data_);
    std::swap(family_id_, other->family_id_);
    std::swap(family_name_, other->family_name_);
    std::swap(family_officer_, other->family_officer_);
    std::swap(country_id_, other->country_id_);
    std::swap(country_officer_, other->country_officer_);
    std::swap(family_level_, other->family_level_);
    std::swap(charm_, other->charm_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata eg_reg_user_scene_request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = eg_reg_user_scene_request_descriptor_;
  metadata.reflection = eg_reg_user_scene_request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ge_reg_user_scene_reply::kUidFieldNumber;
const int ge_reg_user_scene_reply::kUserDataFieldNumber;
#endif  // !_MSC_VER

ge_reg_user_scene_reply::ge_reg_user_scene_reply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ge_reg_user_scene_reply::InitAsDefaultInstance() {
  user_data_ = const_cast< ::proto::server::global_user_data*>(&::proto::server::global_user_data::default_instance());
}

ge_reg_user_scene_reply::ge_reg_user_scene_reply(const ge_reg_user_scene_reply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ge_reg_user_scene_reply::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_ULONGLONG(0);
  user_data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ge_reg_user_scene_reply::~ge_reg_user_scene_reply() {
  SharedDtor();
}

void ge_reg_user_scene_reply::SharedDtor() {
  if (this != default_instance_) {
    delete user_data_;
  }
}

void ge_reg_user_scene_reply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ge_reg_user_scene_reply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ge_reg_user_scene_reply_descriptor_;
}

const ge_reg_user_scene_reply& ge_reg_user_scene_reply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

ge_reg_user_scene_reply* ge_reg_user_scene_reply::default_instance_ = NULL;

ge_reg_user_scene_reply* ge_reg_user_scene_reply::New() const {
  return new ge_reg_user_scene_reply;
}

void ge_reg_user_scene_reply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = GOOGLE_ULONGLONG(0);
    if (has_user_data()) {
      if (user_data_ != NULL) user_data_->::proto::server::global_user_data::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ge_reg_user_scene_reply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_user_data;
        break;
      }

      // optional .proto.server.global_user_data user_data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ge_reg_user_scene_reply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uid(), output);
  }

  // optional .proto.server.global_user_data user_data = 2;
  if (has_user_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->user_data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ge_reg_user_scene_reply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->uid(), target);
  }

  // optional .proto.server.global_user_data user_data = 2;
  if (has_user_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->user_data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ge_reg_user_scene_reply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uid());
    }

    // optional .proto.server.global_user_data user_data = 2;
    if (has_user_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user_data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ge_reg_user_scene_reply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ge_reg_user_scene_reply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ge_reg_user_scene_reply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ge_reg_user_scene_reply::MergeFrom(const ge_reg_user_scene_reply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_user_data()) {
      mutable_user_data()->::proto::server::global_user_data::MergeFrom(from.user_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ge_reg_user_scene_reply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ge_reg_user_scene_reply::CopyFrom(const ge_reg_user_scene_reply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ge_reg_user_scene_reply::IsInitialized() const {

  return true;
}

void ge_reg_user_scene_reply::Swap(ge_reg_user_scene_reply* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(user_data_, other->user_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ge_reg_user_scene_reply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ge_reg_user_scene_reply_descriptor_;
  metadata.reflection = ge_reg_user_scene_reply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int eg_relogin_scene_request::kUidFieldNumber;
const int eg_relogin_scene_request::kGateIdFieldNumber;
#endif  // !_MSC_VER

eg_relogin_scene_request::eg_relogin_scene_request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void eg_relogin_scene_request::InitAsDefaultInstance() {
}

eg_relogin_scene_request::eg_relogin_scene_request(const eg_relogin_scene_request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void eg_relogin_scene_request::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_ULONGLONG(0);
  gate_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

eg_relogin_scene_request::~eg_relogin_scene_request() {
  SharedDtor();
}

void eg_relogin_scene_request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void eg_relogin_scene_request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* eg_relogin_scene_request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return eg_relogin_scene_request_descriptor_;
}

const eg_relogin_scene_request& eg_relogin_scene_request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

eg_relogin_scene_request* eg_relogin_scene_request::default_instance_ = NULL;

eg_relogin_scene_request* eg_relogin_scene_request::New() const {
  return new eg_relogin_scene_request;
}

void eg_relogin_scene_request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = GOOGLE_ULONGLONG(0);
    gate_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool eg_relogin_scene_request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gate_id;
        break;
      }

      // optional uint32 gate_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gate_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gate_id_)));
          set_has_gate_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void eg_relogin_scene_request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uid(), output);
  }

  // optional uint32 gate_id = 2;
  if (has_gate_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->gate_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* eg_relogin_scene_request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->uid(), target);
  }

  // optional uint32 gate_id = 2;
  if (has_gate_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->gate_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int eg_relogin_scene_request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uid());
    }

    // optional uint32 gate_id = 2;
    if (has_gate_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gate_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void eg_relogin_scene_request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const eg_relogin_scene_request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const eg_relogin_scene_request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void eg_relogin_scene_request::MergeFrom(const eg_relogin_scene_request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_gate_id()) {
      set_gate_id(from.gate_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void eg_relogin_scene_request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void eg_relogin_scene_request::CopyFrom(const eg_relogin_scene_request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool eg_relogin_scene_request::IsInitialized() const {

  return true;
}

void eg_relogin_scene_request::Swap(eg_relogin_scene_request* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(gate_id_, other->gate_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata eg_relogin_scene_request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = eg_relogin_scene_request_descriptor_;
  metadata.reflection = eg_relogin_scene_request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ge_user_cross_scene_request::kDataFieldNumber;
#endif  // !_MSC_VER

ge_user_cross_scene_request::ge_user_cross_scene_request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ge_user_cross_scene_request::InitAsDefaultInstance() {
  data_ = const_cast< ::proto::server::cross_server_data*>(&::proto::server::cross_server_data::default_instance());
}

ge_user_cross_scene_request::ge_user_cross_scene_request(const ge_user_cross_scene_request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ge_user_cross_scene_request::SharedCtor() {
  _cached_size_ = 0;
  data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ge_user_cross_scene_request::~ge_user_cross_scene_request() {
  SharedDtor();
}

void ge_user_cross_scene_request::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
  }
}

void ge_user_cross_scene_request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ge_user_cross_scene_request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ge_user_cross_scene_request_descriptor_;
}

const ge_user_cross_scene_request& ge_user_cross_scene_request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

ge_user_cross_scene_request* ge_user_cross_scene_request::default_instance_ = NULL;

ge_user_cross_scene_request* ge_user_cross_scene_request::New() const {
  return new ge_user_cross_scene_request;
}

void ge_user_cross_scene_request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_data()) {
      if (data_ != NULL) data_->::proto::server::cross_server_data::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ge_user_cross_scene_request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.server.cross_server_data data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ge_user_cross_scene_request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .proto.server.cross_server_data data = 1;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ge_user_cross_scene_request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .proto.server.cross_server_data data = 1;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ge_user_cross_scene_request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .proto.server.cross_server_data data = 1;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ge_user_cross_scene_request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ge_user_cross_scene_request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ge_user_cross_scene_request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ge_user_cross_scene_request::MergeFrom(const ge_user_cross_scene_request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_data()) {
      mutable_data()->::proto::server::cross_server_data::MergeFrom(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ge_user_cross_scene_request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ge_user_cross_scene_request::CopyFrom(const ge_user_cross_scene_request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ge_user_cross_scene_request::IsInitialized() const {

  return true;
}

void ge_user_cross_scene_request::Swap(ge_user_cross_scene_request* other) {
  if (other != this) {
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ge_user_cross_scene_request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ge_user_cross_scene_request_descriptor_;
  metadata.reflection = ge_user_cross_scene_request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int eg_user_cross_scene_reply::kReplyCodeFieldNumber;
const int eg_user_cross_scene_reply::kDataFieldNumber;
#endif  // !_MSC_VER

eg_user_cross_scene_reply::eg_user_cross_scene_reply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void eg_user_cross_scene_reply::InitAsDefaultInstance() {
  data_ = const_cast< ::proto::server::cross_server_data*>(&::proto::server::cross_server_data::default_instance());
}

eg_user_cross_scene_reply::eg_user_cross_scene_reply(const eg_user_cross_scene_reply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void eg_user_cross_scene_reply::SharedCtor() {
  _cached_size_ = 0;
  reply_code_ = 0u;
  data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

eg_user_cross_scene_reply::~eg_user_cross_scene_reply() {
  SharedDtor();
}

void eg_user_cross_scene_reply::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
  }
}

void eg_user_cross_scene_reply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* eg_user_cross_scene_reply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return eg_user_cross_scene_reply_descriptor_;
}

const eg_user_cross_scene_reply& eg_user_cross_scene_reply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

eg_user_cross_scene_reply* eg_user_cross_scene_reply::default_instance_ = NULL;

eg_user_cross_scene_reply* eg_user_cross_scene_reply::New() const {
  return new eg_user_cross_scene_reply;
}

void eg_user_cross_scene_reply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    reply_code_ = 0u;
    if (has_data()) {
      if (data_ != NULL) data_->::proto::server::cross_server_data::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool eg_user_cross_scene_reply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 reply_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reply_code_)));
          set_has_reply_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // optional .proto.server.cross_server_data data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void eg_user_cross_scene_reply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 reply_code = 1;
  if (has_reply_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->reply_code(), output);
  }

  // optional .proto.server.cross_server_data data = 2;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* eg_user_cross_scene_reply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 reply_code = 1;
  if (has_reply_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->reply_code(), target);
  }

  // optional .proto.server.cross_server_data data = 2;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int eg_user_cross_scene_reply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 reply_code = 1;
    if (has_reply_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reply_code());
    }

    // optional .proto.server.cross_server_data data = 2;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void eg_user_cross_scene_reply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const eg_user_cross_scene_reply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const eg_user_cross_scene_reply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void eg_user_cross_scene_reply::MergeFrom(const eg_user_cross_scene_reply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reply_code()) {
      set_reply_code(from.reply_code());
    }
    if (from.has_data()) {
      mutable_data()->::proto::server::cross_server_data::MergeFrom(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void eg_user_cross_scene_reply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void eg_user_cross_scene_reply::CopyFrom(const eg_user_cross_scene_reply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool eg_user_cross_scene_reply::IsInitialized() const {

  return true;
}

void eg_user_cross_scene_reply::Swap(eg_user_cross_scene_reply* other) {
  if (other != this) {
    std::swap(reply_code_, other->reply_code_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata eg_user_cross_scene_reply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = eg_user_cross_scene_reply_descriptor_;
  metadata.reflection = eg_user_cross_scene_reply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int eg_kick_all_user_notify::kReasonFieldNumber;
#endif  // !_MSC_VER

eg_kick_all_user_notify::eg_kick_all_user_notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void eg_kick_all_user_notify::InitAsDefaultInstance() {
}

eg_kick_all_user_notify::eg_kick_all_user_notify(const eg_kick_all_user_notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void eg_kick_all_user_notify::SharedCtor() {
  _cached_size_ = 0;
  reason_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

eg_kick_all_user_notify::~eg_kick_all_user_notify() {
  SharedDtor();
}

void eg_kick_all_user_notify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void eg_kick_all_user_notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* eg_kick_all_user_notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return eg_kick_all_user_notify_descriptor_;
}

const eg_kick_all_user_notify& eg_kick_all_user_notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

eg_kick_all_user_notify* eg_kick_all_user_notify::default_instance_ = NULL;

eg_kick_all_user_notify* eg_kick_all_user_notify::New() const {
  return new eg_kick_all_user_notify;
}

void eg_kick_all_user_notify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    reason_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool eg_kick_all_user_notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 reason = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reason_)));
          set_has_reason();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void eg_kick_all_user_notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 reason = 1;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->reason(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* eg_kick_all_user_notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 reason = 1;
  if (has_reason()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->reason(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int eg_kick_all_user_notify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 reason = 1;
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reason());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void eg_kick_all_user_notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const eg_kick_all_user_notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const eg_kick_all_user_notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void eg_kick_all_user_notify::MergeFrom(const eg_kick_all_user_notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reason()) {
      set_reason(from.reason());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void eg_kick_all_user_notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void eg_kick_all_user_notify::CopyFrom(const eg_kick_all_user_notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool eg_kick_all_user_notify::IsInitialized() const {

  return true;
}

void eg_kick_all_user_notify::Swap(eg_kick_all_user_notify* other) {
  if (other != this) {
    std::swap(reason_, other->reason_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata eg_kick_all_user_notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = eg_kick_all_user_notify_descriptor_;
  metadata.reflection = eg_kick_all_user_notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ed_create_role_request::kUidFieldNumber;
const int ed_create_role_request::kNicknameFieldNumber;
const int ed_create_role_request::kRoleTypeFieldNumber;
const int ed_create_role_request::kGateIdFieldNumber;
const int ed_create_role_request::kTimeFieldNumber;
#endif  // !_MSC_VER

ed_create_role_request::ed_create_role_request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ed_create_role_request::InitAsDefaultInstance() {
}

ed_create_role_request::ed_create_role_request(const ed_create_role_request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ed_create_role_request::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_ULONGLONG(0);
  nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  role_type_ = 0u;
  gate_id_ = 0u;
  time_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ed_create_role_request::~ed_create_role_request() {
  SharedDtor();
}

void ed_create_role_request::SharedDtor() {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    delete nickname_;
  }
  if (this != default_instance_) {
  }
}

void ed_create_role_request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ed_create_role_request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ed_create_role_request_descriptor_;
}

const ed_create_role_request& ed_create_role_request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

ed_create_role_request* ed_create_role_request::default_instance_ = NULL;

ed_create_role_request* ed_create_role_request::New() const {
  return new ed_create_role_request;
}

void ed_create_role_request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = GOOGLE_ULONGLONG(0);
    if (has_nickname()) {
      if (nickname_ != &::google::protobuf::internal::kEmptyString) {
        nickname_->clear();
      }
    }
    role_type_ = 0u;
    gate_id_ = 0u;
    time_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ed_create_role_request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_nickname;
        break;
      }

      // optional string nickname = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nickname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->nickname().data(), this->nickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_role_type;
        break;
      }

      // optional uint32 role_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_type_)));
          set_has_role_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_gate_id;
        break;
      }

      // optional uint32 gate_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gate_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gate_id_)));
          set_has_gate_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_time;
        break;
      }

      // optional uint64 time = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ed_create_role_request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uid(), output);
  }

  // optional string nickname = 2;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->nickname(), output);
  }

  // optional uint32 role_type = 3;
  if (has_role_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->role_type(), output);
  }

  // optional uint32 gate_id = 4;
  if (has_gate_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->gate_id(), output);
  }

  // optional uint64 time = 5;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ed_create_role_request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->uid(), target);
  }

  // optional string nickname = 2;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->nickname(), target);
  }

  // optional uint32 role_type = 3;
  if (has_role_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->role_type(), target);
  }

  // optional uint32 gate_id = 4;
  if (has_gate_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->gate_id(), target);
  }

  // optional uint64 time = 5;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ed_create_role_request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uid());
    }

    // optional string nickname = 2;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }

    // optional uint32 role_type = 3;
    if (has_role_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->role_type());
    }

    // optional uint32 gate_id = 4;
    if (has_gate_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gate_id());
    }

    // optional uint64 time = 5;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ed_create_role_request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ed_create_role_request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ed_create_role_request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ed_create_role_request::MergeFrom(const ed_create_role_request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_nickname()) {
      set_nickname(from.nickname());
    }
    if (from.has_role_type()) {
      set_role_type(from.role_type());
    }
    if (from.has_gate_id()) {
      set_gate_id(from.gate_id());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ed_create_role_request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ed_create_role_request::CopyFrom(const ed_create_role_request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ed_create_role_request::IsInitialized() const {

  return true;
}

void ed_create_role_request::Swap(ed_create_role_request* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(nickname_, other->nickname_);
    std::swap(role_type_, other->role_type_);
    std::swap(gate_id_, other->gate_id_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ed_create_role_request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ed_create_role_request_descriptor_;
  metadata.reflection = ed_create_role_request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int de_create_role_reply::kUidFieldNumber;
const int de_create_role_reply::kReplyCodeFieldNumber;
const int de_create_role_reply::kGateIdFieldNumber;
const int de_create_role_reply::kNameFieldNumber;
const int de_create_role_reply::kCreateTimeFieldNumber;
const int de_create_role_reply::kRoleTypeFieldNumber;
const int de_create_role_reply::kChannelIdFieldNumber;
#endif  // !_MSC_VER

de_create_role_reply::de_create_role_reply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void de_create_role_reply::InitAsDefaultInstance() {
}

de_create_role_reply::de_create_role_reply(const de_create_role_reply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void de_create_role_reply::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_ULONGLONG(0);
  reply_code_ = 0u;
  gate_id_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  create_time_ = 0u;
  role_type_ = 0u;
  channel_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

de_create_role_reply::~de_create_role_reply() {
  SharedDtor();
}

void de_create_role_reply::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void de_create_role_reply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* de_create_role_reply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return de_create_role_reply_descriptor_;
}

const de_create_role_reply& de_create_role_reply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

de_create_role_reply* de_create_role_reply::default_instance_ = NULL;

de_create_role_reply* de_create_role_reply::New() const {
  return new de_create_role_reply;
}

void de_create_role_reply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = GOOGLE_ULONGLONG(0);
    reply_code_ = 0u;
    gate_id_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    create_time_ = 0u;
    role_type_ = 0u;
    channel_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool de_create_role_reply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_reply_code;
        break;
      }

      // optional uint32 reply_code = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reply_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reply_code_)));
          set_has_reply_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_gate_id;
        break;
      }

      // optional uint32 gate_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gate_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gate_id_)));
          set_has_gate_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_name;
        break;
      }

      // optional string name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_create_time;
        break;
      }

      // optional uint32 create_time = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_create_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &create_time_)));
          set_has_create_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_role_type;
        break;
      }

      // optional uint32 role_type = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_type_)));
          set_has_role_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_channel_id;
        break;
      }

      // optional uint32 channel_id = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_channel_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channel_id_)));
          set_has_channel_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void de_create_role_reply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uid(), output);
  }

  // optional uint32 reply_code = 2;
  if (has_reply_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->reply_code(), output);
  }

  // optional uint32 gate_id = 3;
  if (has_gate_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->gate_id(), output);
  }

  // optional string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->name(), output);
  }

  // optional uint32 create_time = 5;
  if (has_create_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->create_time(), output);
  }

  // optional uint32 role_type = 6;
  if (has_role_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->role_type(), output);
  }

  // optional uint32 channel_id = 7;
  if (has_channel_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->channel_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* de_create_role_reply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->uid(), target);
  }

  // optional uint32 reply_code = 2;
  if (has_reply_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->reply_code(), target);
  }

  // optional uint32 gate_id = 3;
  if (has_gate_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->gate_id(), target);
  }

  // optional string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->name(), target);
  }

  // optional uint32 create_time = 5;
  if (has_create_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->create_time(), target);
  }

  // optional uint32 role_type = 6;
  if (has_role_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->role_type(), target);
  }

  // optional uint32 channel_id = 7;
  if (has_channel_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->channel_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int de_create_role_reply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uid());
    }

    // optional uint32 reply_code = 2;
    if (has_reply_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reply_code());
    }

    // optional uint32 gate_id = 3;
    if (has_gate_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gate_id());
    }

    // optional string name = 4;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 create_time = 5;
    if (has_create_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->create_time());
    }

    // optional uint32 role_type = 6;
    if (has_role_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->role_type());
    }

    // optional uint32 channel_id = 7;
    if (has_channel_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channel_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void de_create_role_reply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const de_create_role_reply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const de_create_role_reply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void de_create_role_reply::MergeFrom(const de_create_role_reply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_reply_code()) {
      set_reply_code(from.reply_code());
    }
    if (from.has_gate_id()) {
      set_gate_id(from.gate_id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_create_time()) {
      set_create_time(from.create_time());
    }
    if (from.has_role_type()) {
      set_role_type(from.role_type());
    }
    if (from.has_channel_id()) {
      set_channel_id(from.channel_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void de_create_role_reply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void de_create_role_reply::CopyFrom(const de_create_role_reply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool de_create_role_reply::IsInitialized() const {

  return true;
}

void de_create_role_reply::Swap(de_create_role_reply* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(reply_code_, other->reply_code_);
    std::swap(gate_id_, other->gate_id_);
    std::swap(name_, other->name_);
    std::swap(create_time_, other->create_time_);
    std::swap(role_type_, other->role_type_);
    std::swap(channel_id_, other->channel_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata de_create_role_reply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = de_create_role_reply_descriptor_;
  metadata.reflection = de_create_role_reply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ed_query_role_data_request::kUidFieldNumber;
const int ed_query_role_data_request::kGateIdFieldNumber;
#endif  // !_MSC_VER

ed_query_role_data_request::ed_query_role_data_request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ed_query_role_data_request::InitAsDefaultInstance() {
}

ed_query_role_data_request::ed_query_role_data_request(const ed_query_role_data_request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ed_query_role_data_request::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_ULONGLONG(0);
  gate_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ed_query_role_data_request::~ed_query_role_data_request() {
  SharedDtor();
}

void ed_query_role_data_request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ed_query_role_data_request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ed_query_role_data_request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ed_query_role_data_request_descriptor_;
}

const ed_query_role_data_request& ed_query_role_data_request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

ed_query_role_data_request* ed_query_role_data_request::default_instance_ = NULL;

ed_query_role_data_request* ed_query_role_data_request::New() const {
  return new ed_query_role_data_request;
}

void ed_query_role_data_request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = GOOGLE_ULONGLONG(0);
    gate_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ed_query_role_data_request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gate_id;
        break;
      }

      // optional uint32 gate_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gate_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gate_id_)));
          set_has_gate_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ed_query_role_data_request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uid(), output);
  }

  // optional uint32 gate_id = 2;
  if (has_gate_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->gate_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ed_query_role_data_request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->uid(), target);
  }

  // optional uint32 gate_id = 2;
  if (has_gate_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->gate_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ed_query_role_data_request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uid());
    }

    // optional uint32 gate_id = 2;
    if (has_gate_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gate_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ed_query_role_data_request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ed_query_role_data_request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ed_query_role_data_request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ed_query_role_data_request::MergeFrom(const ed_query_role_data_request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_gate_id()) {
      set_gate_id(from.gate_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ed_query_role_data_request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ed_query_role_data_request::CopyFrom(const ed_query_role_data_request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ed_query_role_data_request::IsInitialized() const {

  return true;
}

void ed_query_role_data_request::Swap(ed_query_role_data_request* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(gate_id_, other->gate_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ed_query_role_data_request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ed_query_role_data_request_descriptor_;
  metadata.reflection = ed_query_role_data_request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int de_query_role_data_reply::kUidFieldNumber;
const int de_query_role_data_reply::kGateIdFieldNumber;
#endif  // !_MSC_VER

de_query_role_data_reply::de_query_role_data_reply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void de_query_role_data_reply::InitAsDefaultInstance() {
}

de_query_role_data_reply::de_query_role_data_reply(const de_query_role_data_reply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void de_query_role_data_reply::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_ULONGLONG(0);
  gate_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

de_query_role_data_reply::~de_query_role_data_reply() {
  SharedDtor();
}

void de_query_role_data_reply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void de_query_role_data_reply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* de_query_role_data_reply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return de_query_role_data_reply_descriptor_;
}

const de_query_role_data_reply& de_query_role_data_reply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

de_query_role_data_reply* de_query_role_data_reply::default_instance_ = NULL;

de_query_role_data_reply* de_query_role_data_reply::New() const {
  return new de_query_role_data_reply;
}

void de_query_role_data_reply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = GOOGLE_ULONGLONG(0);
    gate_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool de_query_role_data_reply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gate_id;
        break;
      }

      // optional uint32 gate_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gate_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gate_id_)));
          set_has_gate_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void de_query_role_data_reply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uid(), output);
  }

  // optional uint32 gate_id = 2;
  if (has_gate_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->gate_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* de_query_role_data_reply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->uid(), target);
  }

  // optional uint32 gate_id = 2;
  if (has_gate_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->gate_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int de_query_role_data_reply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uid());
    }

    // optional uint32 gate_id = 2;
    if (has_gate_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gate_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void de_query_role_data_reply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const de_query_role_data_reply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const de_query_role_data_reply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void de_query_role_data_reply::MergeFrom(const de_query_role_data_reply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_gate_id()) {
      set_gate_id(from.gate_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void de_query_role_data_reply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void de_query_role_data_reply::CopyFrom(const de_query_role_data_reply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool de_query_role_data_reply::IsInitialized() const {

  return true;
}

void de_query_role_data_reply::Swap(de_query_role_data_reply* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(gate_id_, other->gate_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata de_query_role_data_reply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = de_query_role_data_reply_descriptor_;
  metadata.reflection = de_query_role_data_reply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

ed_role_leave_game_notify::ed_role_leave_game_notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ed_role_leave_game_notify::InitAsDefaultInstance() {
}

ed_role_leave_game_notify::ed_role_leave_game_notify(const ed_role_leave_game_notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ed_role_leave_game_notify::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ed_role_leave_game_notify::~ed_role_leave_game_notify() {
  SharedDtor();
}

void ed_role_leave_game_notify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ed_role_leave_game_notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ed_role_leave_game_notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ed_role_leave_game_notify_descriptor_;
}

const ed_role_leave_game_notify& ed_role_leave_game_notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

ed_role_leave_game_notify* ed_role_leave_game_notify::default_instance_ = NULL;

ed_role_leave_game_notify* ed_role_leave_game_notify::New() const {
  return new ed_role_leave_game_notify;
}

void ed_role_leave_game_notify::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ed_role_leave_game_notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void ed_role_leave_game_notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ed_role_leave_game_notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ed_role_leave_game_notify::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ed_role_leave_game_notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ed_role_leave_game_notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ed_role_leave_game_notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ed_role_leave_game_notify::MergeFrom(const ed_role_leave_game_notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ed_role_leave_game_notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ed_role_leave_game_notify::CopyFrom(const ed_role_leave_game_notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ed_role_leave_game_notify::IsInitialized() const {

  return true;
}

void ed_role_leave_game_notify::Swap(ed_role_leave_game_notify* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ed_role_leave_game_notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ed_role_leave_game_notify_descriptor_;
  metadata.reflection = ed_role_leave_game_notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ag_unreg_user_scene_notify::kUidFieldNumber;
const int ag_unreg_user_scene_notify::kUnregCodeFieldNumber;
const int ag_unreg_user_scene_notify::kKickReasonFieldNumber;
#endif  // !_MSC_VER

ag_unreg_user_scene_notify::ag_unreg_user_scene_notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ag_unreg_user_scene_notify::InitAsDefaultInstance() {
}

ag_unreg_user_scene_notify::ag_unreg_user_scene_notify(const ag_unreg_user_scene_notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ag_unreg_user_scene_notify::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_ULONGLONG(0);
  unreg_code_ = 0u;
  kick_reason_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ag_unreg_user_scene_notify::~ag_unreg_user_scene_notify() {
  SharedDtor();
}

void ag_unreg_user_scene_notify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ag_unreg_user_scene_notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ag_unreg_user_scene_notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ag_unreg_user_scene_notify_descriptor_;
}

const ag_unreg_user_scene_notify& ag_unreg_user_scene_notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

ag_unreg_user_scene_notify* ag_unreg_user_scene_notify::default_instance_ = NULL;

ag_unreg_user_scene_notify* ag_unreg_user_scene_notify::New() const {
  return new ag_unreg_user_scene_notify;
}

void ag_unreg_user_scene_notify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = GOOGLE_ULONGLONG(0);
    unreg_code_ = 0u;
    kick_reason_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ag_unreg_user_scene_notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_unreg_code;
        break;
      }

      // optional uint32 unreg_code = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_unreg_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unreg_code_)));
          set_has_unreg_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_kick_reason;
        break;
      }

      // optional uint32 kick_reason = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_kick_reason:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &kick_reason_)));
          set_has_kick_reason();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ag_unreg_user_scene_notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uid(), output);
  }

  // optional uint32 unreg_code = 2;
  if (has_unreg_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->unreg_code(), output);
  }

  // optional uint32 kick_reason = 3;
  if (has_kick_reason()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->kick_reason(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ag_unreg_user_scene_notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->uid(), target);
  }

  // optional uint32 unreg_code = 2;
  if (has_unreg_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->unreg_code(), target);
  }

  // optional uint32 kick_reason = 3;
  if (has_kick_reason()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->kick_reason(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ag_unreg_user_scene_notify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uid());
    }

    // optional uint32 unreg_code = 2;
    if (has_unreg_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->unreg_code());
    }

    // optional uint32 kick_reason = 3;
    if (has_kick_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->kick_reason());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ag_unreg_user_scene_notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ag_unreg_user_scene_notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ag_unreg_user_scene_notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ag_unreg_user_scene_notify::MergeFrom(const ag_unreg_user_scene_notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_unreg_code()) {
      set_unreg_code(from.unreg_code());
    }
    if (from.has_kick_reason()) {
      set_kick_reason(from.kick_reason());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ag_unreg_user_scene_notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ag_unreg_user_scene_notify::CopyFrom(const ag_unreg_user_scene_notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ag_unreg_user_scene_notify::IsInitialized() const {

  return true;
}

void ag_unreg_user_scene_notify::Swap(ag_unreg_user_scene_notify* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(unreg_code_, other->unreg_code_);
    std::swap(kick_reason_, other->kick_reason_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ag_unreg_user_scene_notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ag_unreg_user_scene_notify_descriptor_;
  metadata.reflection = ag_unreg_user_scene_notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ga_unreg_user_scene_notify::kUidFieldNumber;
const int ga_unreg_user_scene_notify::kUnregCodeFieldNumber;
#endif  // !_MSC_VER

ga_unreg_user_scene_notify::ga_unreg_user_scene_notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ga_unreg_user_scene_notify::InitAsDefaultInstance() {
}

ga_unreg_user_scene_notify::ga_unreg_user_scene_notify(const ga_unreg_user_scene_notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ga_unreg_user_scene_notify::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_ULONGLONG(0);
  unreg_code_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ga_unreg_user_scene_notify::~ga_unreg_user_scene_notify() {
  SharedDtor();
}

void ga_unreg_user_scene_notify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ga_unreg_user_scene_notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ga_unreg_user_scene_notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ga_unreg_user_scene_notify_descriptor_;
}

const ga_unreg_user_scene_notify& ga_unreg_user_scene_notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

ga_unreg_user_scene_notify* ga_unreg_user_scene_notify::default_instance_ = NULL;

ga_unreg_user_scene_notify* ga_unreg_user_scene_notify::New() const {
  return new ga_unreg_user_scene_notify;
}

void ga_unreg_user_scene_notify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = GOOGLE_ULONGLONG(0);
    unreg_code_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ga_unreg_user_scene_notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_unreg_code;
        break;
      }

      // optional uint32 unreg_code = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_unreg_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unreg_code_)));
          set_has_unreg_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ga_unreg_user_scene_notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uid(), output);
  }

  // optional uint32 unreg_code = 2;
  if (has_unreg_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->unreg_code(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ga_unreg_user_scene_notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->uid(), target);
  }

  // optional uint32 unreg_code = 2;
  if (has_unreg_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->unreg_code(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ga_unreg_user_scene_notify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uid());
    }

    // optional uint32 unreg_code = 2;
    if (has_unreg_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->unreg_code());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ga_unreg_user_scene_notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ga_unreg_user_scene_notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ga_unreg_user_scene_notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ga_unreg_user_scene_notify::MergeFrom(const ga_unreg_user_scene_notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_unreg_code()) {
      set_unreg_code(from.unreg_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ga_unreg_user_scene_notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ga_unreg_user_scene_notify::CopyFrom(const ga_unreg_user_scene_notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ga_unreg_user_scene_notify::IsInitialized() const {

  return true;
}

void ga_unreg_user_scene_notify::Swap(ga_unreg_user_scene_notify* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(unreg_code_, other->unreg_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ga_unreg_user_scene_notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ga_unreg_user_scene_notify_descriptor_;
  metadata.reflection = ga_unreg_user_scene_notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ga_reg_user_success_notify::kUidFieldNumber;
const int ga_reg_user_success_notify::kGateIdFieldNumber;
#endif  // !_MSC_VER

ga_reg_user_success_notify::ga_reg_user_success_notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ga_reg_user_success_notify::InitAsDefaultInstance() {
}

ga_reg_user_success_notify::ga_reg_user_success_notify(const ga_reg_user_success_notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ga_reg_user_success_notify::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0u;
  gate_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ga_reg_user_success_notify::~ga_reg_user_success_notify() {
  SharedDtor();
}

void ga_reg_user_success_notify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ga_reg_user_success_notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ga_reg_user_success_notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ga_reg_user_success_notify_descriptor_;
}

const ga_reg_user_success_notify& ga_reg_user_success_notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

ga_reg_user_success_notify* ga_reg_user_success_notify::default_instance_ = NULL;

ga_reg_user_success_notify* ga_reg_user_success_notify::New() const {
  return new ga_reg_user_success_notify;
}

void ga_reg_user_success_notify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = 0u;
    gate_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ga_reg_user_success_notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gate_id;
        break;
      }

      // optional uint32 gate_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gate_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gate_id_)));
          set_has_gate_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ga_reg_user_success_notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  // optional uint32 gate_id = 2;
  if (has_gate_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->gate_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ga_reg_user_success_notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uid(), target);
  }

  // optional uint32 gate_id = 2;
  if (has_gate_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->gate_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ga_reg_user_success_notify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // optional uint32 gate_id = 2;
    if (has_gate_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gate_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ga_reg_user_success_notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ga_reg_user_success_notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ga_reg_user_success_notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ga_reg_user_success_notify::MergeFrom(const ga_reg_user_success_notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_gate_id()) {
      set_gate_id(from.gate_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ga_reg_user_success_notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ga_reg_user_success_notify::CopyFrom(const ga_reg_user_success_notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ga_reg_user_success_notify::IsInitialized() const {

  return true;
}

void ga_reg_user_success_notify::Swap(ga_reg_user_success_notify* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(gate_id_, other->gate_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ga_reg_user_success_notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ga_reg_user_success_notify_descriptor_;
  metadata.reflection = ga_reg_user_success_notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ga_user_cross_server_notify::kDataFieldNumber;
#endif  // !_MSC_VER

ga_user_cross_server_notify::ga_user_cross_server_notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ga_user_cross_server_notify::InitAsDefaultInstance() {
  data_ = const_cast< ::proto::server::cross_server_data*>(&::proto::server::cross_server_data::default_instance());
}

ga_user_cross_server_notify::ga_user_cross_server_notify(const ga_user_cross_server_notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ga_user_cross_server_notify::SharedCtor() {
  _cached_size_ = 0;
  data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ga_user_cross_server_notify::~ga_user_cross_server_notify() {
  SharedDtor();
}

void ga_user_cross_server_notify::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
  }
}

void ga_user_cross_server_notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ga_user_cross_server_notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ga_user_cross_server_notify_descriptor_;
}

const ga_user_cross_server_notify& ga_user_cross_server_notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

ga_user_cross_server_notify* ga_user_cross_server_notify::default_instance_ = NULL;

ga_user_cross_server_notify* ga_user_cross_server_notify::New() const {
  return new ga_user_cross_server_notify;
}

void ga_user_cross_server_notify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_data()) {
      if (data_ != NULL) data_->::proto::server::cross_server_data::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ga_user_cross_server_notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.server.cross_server_data data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ga_user_cross_server_notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .proto.server.cross_server_data data = 1;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ga_user_cross_server_notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .proto.server.cross_server_data data = 1;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ga_user_cross_server_notify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .proto.server.cross_server_data data = 1;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ga_user_cross_server_notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ga_user_cross_server_notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ga_user_cross_server_notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ga_user_cross_server_notify::MergeFrom(const ga_user_cross_server_notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_data()) {
      mutable_data()->::proto::server::cross_server_data::MergeFrom(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ga_user_cross_server_notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ga_user_cross_server_notify::CopyFrom(const ga_user_cross_server_notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ga_user_cross_server_notify::IsInitialized() const {

  return true;
}

void ga_user_cross_server_notify::Swap(ga_user_cross_server_notify* other) {
  if (other != this) {
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ga_user_cross_server_notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ga_user_cross_server_notify_descriptor_;
  metadata.reflection = ga_user_cross_server_notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ge_city_trade_add_prosperity_value_notify::kCityIdFieldNumber;
const int ge_city_trade_add_prosperity_value_notify::kAddProsperityValueFieldNumber;
#endif  // !_MSC_VER

ge_city_trade_add_prosperity_value_notify::ge_city_trade_add_prosperity_value_notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ge_city_trade_add_prosperity_value_notify::InitAsDefaultInstance() {
}

ge_city_trade_add_prosperity_value_notify::ge_city_trade_add_prosperity_value_notify(const ge_city_trade_add_prosperity_value_notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ge_city_trade_add_prosperity_value_notify::SharedCtor() {
  _cached_size_ = 0;
  city_id_ = 0u;
  add_prosperity_value_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ge_city_trade_add_prosperity_value_notify::~ge_city_trade_add_prosperity_value_notify() {
  SharedDtor();
}

void ge_city_trade_add_prosperity_value_notify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ge_city_trade_add_prosperity_value_notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ge_city_trade_add_prosperity_value_notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ge_city_trade_add_prosperity_value_notify_descriptor_;
}

const ge_city_trade_add_prosperity_value_notify& ge_city_trade_add_prosperity_value_notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

ge_city_trade_add_prosperity_value_notify* ge_city_trade_add_prosperity_value_notify::default_instance_ = NULL;

ge_city_trade_add_prosperity_value_notify* ge_city_trade_add_prosperity_value_notify::New() const {
  return new ge_city_trade_add_prosperity_value_notify;
}

void ge_city_trade_add_prosperity_value_notify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    city_id_ = 0u;
    add_prosperity_value_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ge_city_trade_add_prosperity_value_notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 city_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &city_id_)));
          set_has_city_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_add_prosperity_value;
        break;
      }

      // optional uint32 add_prosperity_value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_add_prosperity_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &add_prosperity_value_)));
          set_has_add_prosperity_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ge_city_trade_add_prosperity_value_notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 city_id = 1;
  if (has_city_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->city_id(), output);
  }

  // optional uint32 add_prosperity_value = 2;
  if (has_add_prosperity_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->add_prosperity_value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ge_city_trade_add_prosperity_value_notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 city_id = 1;
  if (has_city_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->city_id(), target);
  }

  // optional uint32 add_prosperity_value = 2;
  if (has_add_prosperity_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->add_prosperity_value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ge_city_trade_add_prosperity_value_notify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 city_id = 1;
    if (has_city_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->city_id());
    }

    // optional uint32 add_prosperity_value = 2;
    if (has_add_prosperity_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->add_prosperity_value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ge_city_trade_add_prosperity_value_notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ge_city_trade_add_prosperity_value_notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ge_city_trade_add_prosperity_value_notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ge_city_trade_add_prosperity_value_notify::MergeFrom(const ge_city_trade_add_prosperity_value_notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_city_id()) {
      set_city_id(from.city_id());
    }
    if (from.has_add_prosperity_value()) {
      set_add_prosperity_value(from.add_prosperity_value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ge_city_trade_add_prosperity_value_notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ge_city_trade_add_prosperity_value_notify::CopyFrom(const ge_city_trade_add_prosperity_value_notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ge_city_trade_add_prosperity_value_notify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ge_city_trade_add_prosperity_value_notify::Swap(ge_city_trade_add_prosperity_value_notify* other) {
  if (other != this) {
    std::swap(city_id_, other->city_id_);
    std::swap(add_prosperity_value_, other->add_prosperity_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ge_city_trade_add_prosperity_value_notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ge_city_trade_add_prosperity_value_notify_descriptor_;
  metadata.reflection = ge_city_trade_add_prosperity_value_notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int eg_city_base_info_notify::kCityInfoFieldNumber;
#endif  // !_MSC_VER

eg_city_base_info_notify::eg_city_base_info_notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void eg_city_base_info_notify::InitAsDefaultInstance() {
  city_info_ = const_cast< ::proto::common::city_base_info*>(&::proto::common::city_base_info::default_instance());
}

eg_city_base_info_notify::eg_city_base_info_notify(const eg_city_base_info_notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void eg_city_base_info_notify::SharedCtor() {
  _cached_size_ = 0;
  city_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

eg_city_base_info_notify::~eg_city_base_info_notify() {
  SharedDtor();
}

void eg_city_base_info_notify::SharedDtor() {
  if (this != default_instance_) {
    delete city_info_;
  }
}

void eg_city_base_info_notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* eg_city_base_info_notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return eg_city_base_info_notify_descriptor_;
}

const eg_city_base_info_notify& eg_city_base_info_notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

eg_city_base_info_notify* eg_city_base_info_notify::default_instance_ = NULL;

eg_city_base_info_notify* eg_city_base_info_notify::New() const {
  return new eg_city_base_info_notify;
}

void eg_city_base_info_notify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_city_info()) {
      if (city_info_ != NULL) city_info_->::proto::common::city_base_info::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool eg_city_base_info_notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .proto.common.city_base_info city_info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_city_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void eg_city_base_info_notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .proto.common.city_base_info city_info = 1;
  if (has_city_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->city_info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* eg_city_base_info_notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .proto.common.city_base_info city_info = 1;
  if (has_city_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->city_info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int eg_city_base_info_notify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .proto.common.city_base_info city_info = 1;
    if (has_city_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->city_info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void eg_city_base_info_notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const eg_city_base_info_notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const eg_city_base_info_notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void eg_city_base_info_notify::MergeFrom(const eg_city_base_info_notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_city_info()) {
      mutable_city_info()->::proto::common::city_base_info::MergeFrom(from.city_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void eg_city_base_info_notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void eg_city_base_info_notify::CopyFrom(const eg_city_base_info_notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool eg_city_base_info_notify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void eg_city_base_info_notify::Swap(eg_city_base_info_notify* other) {
  if (other != this) {
    std::swap(city_info_, other->city_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata eg_city_base_info_notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = eg_city_base_info_notify_descriptor_;
  metadata.reflection = eg_city_base_info_notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

ge_get_city_list_request::ge_get_city_list_request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ge_get_city_list_request::InitAsDefaultInstance() {
}

ge_get_city_list_request::ge_get_city_list_request(const ge_get_city_list_request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ge_get_city_list_request::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ge_get_city_list_request::~ge_get_city_list_request() {
  SharedDtor();
}

void ge_get_city_list_request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ge_get_city_list_request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ge_get_city_list_request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ge_get_city_list_request_descriptor_;
}

const ge_get_city_list_request& ge_get_city_list_request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

ge_get_city_list_request* ge_get_city_list_request::default_instance_ = NULL;

ge_get_city_list_request* ge_get_city_list_request::New() const {
  return new ge_get_city_list_request;
}

void ge_get_city_list_request::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ge_get_city_list_request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void ge_get_city_list_request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ge_get_city_list_request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ge_get_city_list_request::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ge_get_city_list_request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ge_get_city_list_request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ge_get_city_list_request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ge_get_city_list_request::MergeFrom(const ge_get_city_list_request& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ge_get_city_list_request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ge_get_city_list_request::CopyFrom(const ge_get_city_list_request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ge_get_city_list_request::IsInitialized() const {

  return true;
}

void ge_get_city_list_request::Swap(ge_get_city_list_request* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ge_get_city_list_request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ge_get_city_list_request_descriptor_;
  metadata.reflection = ge_get_city_list_request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int eg_get_city_list_reply::kCityListFieldNumber;
#endif  // !_MSC_VER

eg_get_city_list_reply::eg_get_city_list_reply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void eg_get_city_list_reply::InitAsDefaultInstance() {
}

eg_get_city_list_reply::eg_get_city_list_reply(const eg_get_city_list_reply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void eg_get_city_list_reply::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

eg_get_city_list_reply::~eg_get_city_list_reply() {
  SharedDtor();
}

void eg_get_city_list_reply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void eg_get_city_list_reply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* eg_get_city_list_reply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return eg_get_city_list_reply_descriptor_;
}

const eg_get_city_list_reply& eg_get_city_list_reply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

eg_get_city_list_reply* eg_get_city_list_reply::default_instance_ = NULL;

eg_get_city_list_reply* eg_get_city_list_reply::New() const {
  return new eg_get_city_list_reply;
}

void eg_get_city_list_reply::Clear() {
  city_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool eg_get_city_list_reply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.common.city_base_info city_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_city_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_city_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_city_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void eg_get_city_list_reply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto.common.city_base_info city_list = 1;
  for (int i = 0; i < this->city_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->city_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* eg_get_city_list_reply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto.common.city_base_info city_list = 1;
  for (int i = 0; i < this->city_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->city_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int eg_get_city_list_reply::ByteSize() const {
  int total_size = 0;

  // repeated .proto.common.city_base_info city_list = 1;
  total_size += 1 * this->city_list_size();
  for (int i = 0; i < this->city_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->city_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void eg_get_city_list_reply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const eg_get_city_list_reply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const eg_get_city_list_reply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void eg_get_city_list_reply::MergeFrom(const eg_get_city_list_reply& from) {
  GOOGLE_CHECK_NE(&from, this);
  city_list_.MergeFrom(from.city_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void eg_get_city_list_reply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void eg_get_city_list_reply::CopyFrom(const eg_get_city_list_reply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool eg_get_city_list_reply::IsInitialized() const {

  return true;
}

void eg_get_city_list_reply::Swap(eg_get_city_list_reply* other) {
  if (other != this) {
    city_list_.Swap(&other->city_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata eg_get_city_list_reply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = eg_get_city_list_reply_descriptor_;
  metadata.reflection = eg_get_city_list_reply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

eh_test_request::eh_test_request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void eh_test_request::InitAsDefaultInstance() {
}

eh_test_request::eh_test_request(const eh_test_request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void eh_test_request::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

eh_test_request::~eh_test_request() {
  SharedDtor();
}

void eh_test_request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void eh_test_request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* eh_test_request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return eh_test_request_descriptor_;
}

const eh_test_request& eh_test_request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

eh_test_request* eh_test_request::default_instance_ = NULL;

eh_test_request* eh_test_request::New() const {
  return new eh_test_request;
}

void eh_test_request::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool eh_test_request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void eh_test_request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* eh_test_request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int eh_test_request::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void eh_test_request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const eh_test_request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const eh_test_request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void eh_test_request::MergeFrom(const eh_test_request& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void eh_test_request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void eh_test_request::CopyFrom(const eh_test_request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool eh_test_request::IsInitialized() const {

  return true;
}

void eh_test_request::Swap(eh_test_request* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata eh_test_request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = eh_test_request_descriptor_;
  metadata.reflection = eh_test_request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

he_test_reply::he_test_reply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void he_test_reply::InitAsDefaultInstance() {
}

he_test_reply::he_test_reply(const he_test_reply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void he_test_reply::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

he_test_reply::~he_test_reply() {
  SharedDtor();
}

void he_test_reply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void he_test_reply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* he_test_reply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return he_test_reply_descriptor_;
}

const he_test_reply& he_test_reply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

he_test_reply* he_test_reply::default_instance_ = NULL;

he_test_reply* he_test_reply::New() const {
  return new he_test_reply;
}

void he_test_reply::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool he_test_reply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void he_test_reply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* he_test_reply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int he_test_reply::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void he_test_reply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const he_test_reply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const he_test_reply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void he_test_reply::MergeFrom(const he_test_reply& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void he_test_reply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void he_test_reply::CopyFrom(const he_test_reply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool he_test_reply::IsInitialized() const {

  return true;
}

void he_test_reply::Swap(he_test_reply* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata he_test_reply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = he_test_reply_descriptor_;
  metadata.reflection = he_test_reply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ge_update_rank_notify::kRankTypeFieldNumber;
const int ge_update_rank_notify::kKeyFieldNumber;
const int ge_update_rank_notify::kOwnerFieldNumber;
const int ge_update_rank_notify::kExtraFieldNumber;
#endif  // !_MSC_VER

ge_update_rank_notify::ge_update_rank_notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ge_update_rank_notify::InitAsDefaultInstance() {
  extra_ = const_cast< ::proto::common::rank_data_extra*>(&::proto::common::rank_data_extra::default_instance());
}

ge_update_rank_notify::ge_update_rank_notify(const ge_update_rank_notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ge_update_rank_notify::SharedCtor() {
  _cached_size_ = 0;
  rank_type_ = 0u;
  key_ = 0u;
  owner_ = GOOGLE_ULONGLONG(0);
  extra_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ge_update_rank_notify::~ge_update_rank_notify() {
  SharedDtor();
}

void ge_update_rank_notify::SharedDtor() {
  if (this != default_instance_) {
    delete extra_;
  }
}

void ge_update_rank_notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ge_update_rank_notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ge_update_rank_notify_descriptor_;
}

const ge_update_rank_notify& ge_update_rank_notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

ge_update_rank_notify* ge_update_rank_notify::default_instance_ = NULL;

ge_update_rank_notify* ge_update_rank_notify::New() const {
  return new ge_update_rank_notify;
}

void ge_update_rank_notify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rank_type_ = 0u;
    key_ = 0u;
    owner_ = GOOGLE_ULONGLONG(0);
    if (has_extra()) {
      if (extra_ != NULL) extra_->::proto::common::rank_data_extra::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ge_update_rank_notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 rank_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rank_type_)));
          set_has_rank_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_key;
        break;
      }

      // optional uint32 key = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_key:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &key_)));
          set_has_key();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_owner;
        break;
      }

      // optional uint64 owner = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_owner:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &owner_)));
          set_has_owner();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_extra;
        break;
      }

      // optional .proto.common.rank_data_extra extra = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_extra:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_extra()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ge_update_rank_notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 rank_type = 1;
  if (has_rank_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->rank_type(), output);
  }

  // optional uint32 key = 2;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->key(), output);
  }

  // optional uint64 owner = 3;
  if (has_owner()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->owner(), output);
  }

  // optional .proto.common.rank_data_extra extra = 4;
  if (has_extra()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->extra(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ge_update_rank_notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 rank_type = 1;
  if (has_rank_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->rank_type(), target);
  }

  // optional uint32 key = 2;
  if (has_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->key(), target);
  }

  // optional uint64 owner = 3;
  if (has_owner()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->owner(), target);
  }

  // optional .proto.common.rank_data_extra extra = 4;
  if (has_extra()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->extra(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ge_update_rank_notify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 rank_type = 1;
    if (has_rank_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rank_type());
    }

    // optional uint32 key = 2;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->key());
    }

    // optional uint64 owner = 3;
    if (has_owner()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->owner());
    }

    // optional .proto.common.rank_data_extra extra = 4;
    if (has_extra()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->extra());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ge_update_rank_notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ge_update_rank_notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ge_update_rank_notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ge_update_rank_notify::MergeFrom(const ge_update_rank_notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rank_type()) {
      set_rank_type(from.rank_type());
    }
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_owner()) {
      set_owner(from.owner());
    }
    if (from.has_extra()) {
      mutable_extra()->::proto::common::rank_data_extra::MergeFrom(from.extra());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ge_update_rank_notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ge_update_rank_notify::CopyFrom(const ge_update_rank_notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ge_update_rank_notify::IsInitialized() const {

  return true;
}

void ge_update_rank_notify::Swap(ge_update_rank_notify* other) {
  if (other != this) {
    std::swap(rank_type_, other->rank_type_);
    std::swap(key_, other->key_);
    std::swap(owner_, other->owner_);
    std::swap(extra_, other->extra_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ge_update_rank_notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ge_update_rank_notify_descriptor_;
  metadata.reflection = ge_update_rank_notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ge_create_family_request::kNameFieldNumber;
const int ge_create_family_request::kDeclarationFieldNumber;
#endif  // !_MSC_VER

ge_create_family_request::ge_create_family_request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ge_create_family_request::InitAsDefaultInstance() {
}

ge_create_family_request::ge_create_family_request(const ge_create_family_request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ge_create_family_request::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  declaration_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ge_create_family_request::~ge_create_family_request() {
  SharedDtor();
}

void ge_create_family_request::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (declaration_ != &::google::protobuf::internal::kEmptyString) {
    delete declaration_;
  }
  if (this != default_instance_) {
  }
}

void ge_create_family_request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ge_create_family_request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ge_create_family_request_descriptor_;
}

const ge_create_family_request& ge_create_family_request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

ge_create_family_request* ge_create_family_request::default_instance_ = NULL;

ge_create_family_request* ge_create_family_request::New() const {
  return new ge_create_family_request;
}

void ge_create_family_request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_declaration()) {
      if (declaration_ != &::google::protobuf::internal::kEmptyString) {
        declaration_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ge_create_family_request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_declaration;
        break;
      }

      // optional string declaration = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_declaration:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_declaration()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->declaration().data(), this->declaration().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ge_create_family_request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // optional string declaration = 2;
  if (has_declaration()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->declaration().data(), this->declaration().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->declaration(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ge_create_family_request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional string declaration = 2;
  if (has_declaration()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->declaration().data(), this->declaration().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->declaration(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ge_create_family_request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string declaration = 2;
    if (has_declaration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->declaration());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ge_create_family_request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ge_create_family_request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ge_create_family_request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ge_create_family_request::MergeFrom(const ge_create_family_request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_declaration()) {
      set_declaration(from.declaration());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ge_create_family_request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ge_create_family_request::CopyFrom(const ge_create_family_request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ge_create_family_request::IsInitialized() const {

  return true;
}

void ge_create_family_request::Swap(ge_create_family_request* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(declaration_, other->declaration_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ge_create_family_request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ge_create_family_request_descriptor_;
  metadata.reflection = ge_create_family_request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int eg_update_family_info_notify::kIdFieldNumber;
const int eg_update_family_info_notify::kNameFieldNumber;
const int eg_update_family_info_notify::kOfficerFieldNumber;
const int eg_update_family_info_notify::kCountryIdFieldNumber;
const int eg_update_family_info_notify::kFamilyLvFieldNumber;
#endif  // !_MSC_VER

eg_update_family_info_notify::eg_update_family_info_notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void eg_update_family_info_notify::InitAsDefaultInstance() {
}

eg_update_family_info_notify::eg_update_family_info_notify(const eg_update_family_info_notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void eg_update_family_info_notify::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  officer_ = 0u;
  country_id_ = 0u;
  family_lv_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

eg_update_family_info_notify::~eg_update_family_info_notify() {
  SharedDtor();
}

void eg_update_family_info_notify::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void eg_update_family_info_notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* eg_update_family_info_notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return eg_update_family_info_notify_descriptor_;
}

const eg_update_family_info_notify& eg_update_family_info_notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

eg_update_family_info_notify* eg_update_family_info_notify::default_instance_ = NULL;

eg_update_family_info_notify* eg_update_family_info_notify::New() const {
  return new eg_update_family_info_notify;
}

void eg_update_family_info_notify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_ULONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    officer_ = 0u;
    country_id_ = 0u;
    family_lv_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool eg_update_family_info_notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_officer;
        break;
      }

      // optional uint32 officer = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_officer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &officer_)));
          set_has_officer();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_country_id;
        break;
      }

      // optional uint32 country_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_country_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &country_id_)));
          set_has_country_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_family_lv;
        break;
      }

      // optional uint32 family_lv = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_family_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &family_lv_)));
          set_has_family_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void eg_update_family_info_notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // optional uint32 officer = 3;
  if (has_officer()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->officer(), output);
  }

  // optional uint32 country_id = 4;
  if (has_country_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->country_id(), output);
  }

  // optional uint32 family_lv = 5;
  if (has_family_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->family_lv(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* eg_update_family_info_notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional uint32 officer = 3;
  if (has_officer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->officer(), target);
  }

  // optional uint32 country_id = 4;
  if (has_country_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->country_id(), target);
  }

  // optional uint32 family_lv = 5;
  if (has_family_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->family_lv(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int eg_update_family_info_notify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 officer = 3;
    if (has_officer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->officer());
    }

    // optional uint32 country_id = 4;
    if (has_country_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->country_id());
    }

    // optional uint32 family_lv = 5;
    if (has_family_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->family_lv());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void eg_update_family_info_notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const eg_update_family_info_notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const eg_update_family_info_notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void eg_update_family_info_notify::MergeFrom(const eg_update_family_info_notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_officer()) {
      set_officer(from.officer());
    }
    if (from.has_country_id()) {
      set_country_id(from.country_id());
    }
    if (from.has_family_lv()) {
      set_family_lv(from.family_lv());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void eg_update_family_info_notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void eg_update_family_info_notify::CopyFrom(const eg_update_family_info_notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool eg_update_family_info_notify::IsInitialized() const {

  return true;
}

void eg_update_family_info_notify::Swap(eg_update_family_info_notify* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(officer_, other->officer_);
    std::swap(country_id_, other->country_id_);
    std::swap(family_lv_, other->family_lv_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata eg_update_family_info_notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = eg_update_family_info_notify_descriptor_;
  metadata.reflection = eg_update_family_info_notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int eg_create_family_reply::kReplyCodeFieldNumber;
const int eg_create_family_reply::kInfoFieldNumber;
#endif  // !_MSC_VER

eg_create_family_reply::eg_create_family_reply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void eg_create_family_reply::InitAsDefaultInstance() {
  info_ = const_cast< ::proto::server::eg_update_family_info_notify*>(&::proto::server::eg_update_family_info_notify::default_instance());
}

eg_create_family_reply::eg_create_family_reply(const eg_create_family_reply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void eg_create_family_reply::SharedCtor() {
  _cached_size_ = 0;
  reply_code_ = 0u;
  info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

eg_create_family_reply::~eg_create_family_reply() {
  SharedDtor();
}

void eg_create_family_reply::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
  }
}

void eg_create_family_reply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* eg_create_family_reply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return eg_create_family_reply_descriptor_;
}

const eg_create_family_reply& eg_create_family_reply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

eg_create_family_reply* eg_create_family_reply::default_instance_ = NULL;

eg_create_family_reply* eg_create_family_reply::New() const {
  return new eg_create_family_reply;
}

void eg_create_family_reply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    reply_code_ = 0u;
    if (has_info()) {
      if (info_ != NULL) info_->::proto::server::eg_update_family_info_notify::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool eg_create_family_reply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 reply_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reply_code_)));
          set_has_reply_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info;
        break;
      }

      // optional .proto.server.eg_update_family_info_notify info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void eg_create_family_reply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 reply_code = 1;
  if (has_reply_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->reply_code(), output);
  }

  // optional .proto.server.eg_update_family_info_notify info = 2;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* eg_create_family_reply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 reply_code = 1;
  if (has_reply_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->reply_code(), target);
  }

  // optional .proto.server.eg_update_family_info_notify info = 2;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int eg_create_family_reply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 reply_code = 1;
    if (has_reply_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reply_code());
    }

    // optional .proto.server.eg_update_family_info_notify info = 2;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void eg_create_family_reply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const eg_create_family_reply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const eg_create_family_reply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void eg_create_family_reply::MergeFrom(const eg_create_family_reply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reply_code()) {
      set_reply_code(from.reply_code());
    }
    if (from.has_info()) {
      mutable_info()->::proto::server::eg_update_family_info_notify::MergeFrom(from.info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void eg_create_family_reply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void eg_create_family_reply::CopyFrom(const eg_create_family_reply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool eg_create_family_reply::IsInitialized() const {

  return true;
}

void eg_create_family_reply::Swap(eg_create_family_reply* other) {
  if (other != this) {
    std::swap(reply_code_, other->reply_code_);
    std::swap(info_, other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata eg_create_family_reply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = eg_create_family_reply_descriptor_;
  metadata.reflection = eg_create_family_reply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

ge_impeach_family_general_request::ge_impeach_family_general_request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ge_impeach_family_general_request::InitAsDefaultInstance() {
}

ge_impeach_family_general_request::ge_impeach_family_general_request(const ge_impeach_family_general_request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ge_impeach_family_general_request::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ge_impeach_family_general_request::~ge_impeach_family_general_request() {
  SharedDtor();
}

void ge_impeach_family_general_request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ge_impeach_family_general_request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ge_impeach_family_general_request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ge_impeach_family_general_request_descriptor_;
}

const ge_impeach_family_general_request& ge_impeach_family_general_request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

ge_impeach_family_general_request* ge_impeach_family_general_request::default_instance_ = NULL;

ge_impeach_family_general_request* ge_impeach_family_general_request::New() const {
  return new ge_impeach_family_general_request;
}

void ge_impeach_family_general_request::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ge_impeach_family_general_request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void ge_impeach_family_general_request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ge_impeach_family_general_request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ge_impeach_family_general_request::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ge_impeach_family_general_request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ge_impeach_family_general_request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ge_impeach_family_general_request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ge_impeach_family_general_request::MergeFrom(const ge_impeach_family_general_request& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ge_impeach_family_general_request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ge_impeach_family_general_request::CopyFrom(const ge_impeach_family_general_request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ge_impeach_family_general_request::IsInitialized() const {

  return true;
}

void ge_impeach_family_general_request::Swap(ge_impeach_family_general_request* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ge_impeach_family_general_request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ge_impeach_family_general_request_descriptor_;
  metadata.reflection = ge_impeach_family_general_request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int eg_impeach_family_general_reply::kReplyCodeFieldNumber;
#endif  // !_MSC_VER

eg_impeach_family_general_reply::eg_impeach_family_general_reply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void eg_impeach_family_general_reply::InitAsDefaultInstance() {
}

eg_impeach_family_general_reply::eg_impeach_family_general_reply(const eg_impeach_family_general_reply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void eg_impeach_family_general_reply::SharedCtor() {
  _cached_size_ = 0;
  reply_code_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

eg_impeach_family_general_reply::~eg_impeach_family_general_reply() {
  SharedDtor();
}

void eg_impeach_family_general_reply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void eg_impeach_family_general_reply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* eg_impeach_family_general_reply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return eg_impeach_family_general_reply_descriptor_;
}

const eg_impeach_family_general_reply& eg_impeach_family_general_reply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

eg_impeach_family_general_reply* eg_impeach_family_general_reply::default_instance_ = NULL;

eg_impeach_family_general_reply* eg_impeach_family_general_reply::New() const {
  return new eg_impeach_family_general_reply;
}

void eg_impeach_family_general_reply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    reply_code_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool eg_impeach_family_general_reply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 reply_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reply_code_)));
          set_has_reply_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void eg_impeach_family_general_reply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 reply_code = 1;
  if (has_reply_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->reply_code(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* eg_impeach_family_general_reply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 reply_code = 1;
  if (has_reply_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->reply_code(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int eg_impeach_family_general_reply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 reply_code = 1;
    if (has_reply_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reply_code());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void eg_impeach_family_general_reply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const eg_impeach_family_general_reply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const eg_impeach_family_general_reply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void eg_impeach_family_general_reply::MergeFrom(const eg_impeach_family_general_reply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reply_code()) {
      set_reply_code(from.reply_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void eg_impeach_family_general_reply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void eg_impeach_family_general_reply::CopyFrom(const eg_impeach_family_general_reply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool eg_impeach_family_general_reply::IsInitialized() const {

  return true;
}

void eg_impeach_family_general_reply::Swap(eg_impeach_family_general_reply* other) {
  if (other != this) {
    std::swap(reply_code_, other->reply_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata eg_impeach_family_general_reply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = eg_impeach_family_general_reply_descriptor_;
  metadata.reflection = eg_impeach_family_general_reply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int eg_notify_game_impeach_result::kIsSucceedFieldNumber;
const int eg_notify_game_impeach_result::kMoneyReturnFieldNumber;
const int eg_notify_game_impeach_result::kRoleIdFieldNumber;
#endif  // !_MSC_VER

eg_notify_game_impeach_result::eg_notify_game_impeach_result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void eg_notify_game_impeach_result::InitAsDefaultInstance() {
}

eg_notify_game_impeach_result::eg_notify_game_impeach_result(const eg_notify_game_impeach_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void eg_notify_game_impeach_result::SharedCtor() {
  _cached_size_ = 0;
  is_succeed_ = false;
  money_return_ = 0u;
  role_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

eg_notify_game_impeach_result::~eg_notify_game_impeach_result() {
  SharedDtor();
}

void eg_notify_game_impeach_result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void eg_notify_game_impeach_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* eg_notify_game_impeach_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return eg_notify_game_impeach_result_descriptor_;
}

const eg_notify_game_impeach_result& eg_notify_game_impeach_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

eg_notify_game_impeach_result* eg_notify_game_impeach_result::default_instance_ = NULL;

eg_notify_game_impeach_result* eg_notify_game_impeach_result::New() const {
  return new eg_notify_game_impeach_result;
}

void eg_notify_game_impeach_result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    is_succeed_ = false;
    money_return_ = 0u;
    role_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool eg_notify_game_impeach_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool is_succeed = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_succeed_)));
          set_has_is_succeed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_money_return;
        break;
      }

      // optional uint32 money_return = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_money_return:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &money_return_)));
          set_has_money_return();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_role_id;
        break;
      }

      // optional uint64 role_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void eg_notify_game_impeach_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool is_succeed = 1;
  if (has_is_succeed()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_succeed(), output);
  }

  // optional uint32 money_return = 2;
  if (has_money_return()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->money_return(), output);
  }

  // optional uint64 role_id = 3;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->role_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* eg_notify_game_impeach_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool is_succeed = 1;
  if (has_is_succeed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_succeed(), target);
  }

  // optional uint32 money_return = 2;
  if (has_money_return()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->money_return(), target);
  }

  // optional uint64 role_id = 3;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->role_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int eg_notify_game_impeach_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool is_succeed = 1;
    if (has_is_succeed()) {
      total_size += 1 + 1;
    }

    // optional uint32 money_return = 2;
    if (has_money_return()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->money_return());
    }

    // optional uint64 role_id = 3;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void eg_notify_game_impeach_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const eg_notify_game_impeach_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const eg_notify_game_impeach_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void eg_notify_game_impeach_result::MergeFrom(const eg_notify_game_impeach_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_is_succeed()) {
      set_is_succeed(from.is_succeed());
    }
    if (from.has_money_return()) {
      set_money_return(from.money_return());
    }
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void eg_notify_game_impeach_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void eg_notify_game_impeach_result::CopyFrom(const eg_notify_game_impeach_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool eg_notify_game_impeach_result::IsInitialized() const {

  return true;
}

void eg_notify_game_impeach_result::Swap(eg_notify_game_impeach_result* other) {
  if (other != this) {
    std::swap(is_succeed_, other->is_succeed_);
    std::swap(money_return_, other->money_return_);
    std::swap(role_id_, other->role_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata eg_notify_game_impeach_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = eg_notify_game_impeach_result_descriptor_;
  metadata.reflection = eg_notify_game_impeach_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int family_war_dungeon_info::kFamilyIdFieldNumber;
const int family_war_dungeon_info::kFamilyNameFieldNumber;
#endif  // !_MSC_VER

family_war_dungeon_info::family_war_dungeon_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void family_war_dungeon_info::InitAsDefaultInstance() {
}

family_war_dungeon_info::family_war_dungeon_info(const family_war_dungeon_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void family_war_dungeon_info::SharedCtor() {
  _cached_size_ = 0;
  family_id_ = GOOGLE_ULONGLONG(0);
  family_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

family_war_dungeon_info::~family_war_dungeon_info() {
  SharedDtor();
}

void family_war_dungeon_info::SharedDtor() {
  if (family_name_ != &::google::protobuf::internal::kEmptyString) {
    delete family_name_;
  }
  if (this != default_instance_) {
  }
}

void family_war_dungeon_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* family_war_dungeon_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return family_war_dungeon_info_descriptor_;
}

const family_war_dungeon_info& family_war_dungeon_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

family_war_dungeon_info* family_war_dungeon_info::default_instance_ = NULL;

family_war_dungeon_info* family_war_dungeon_info::New() const {
  return new family_war_dungeon_info;
}

void family_war_dungeon_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    family_id_ = GOOGLE_ULONGLONG(0);
    if (has_family_name()) {
      if (family_name_ != &::google::protobuf::internal::kEmptyString) {
        family_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool family_war_dungeon_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 family_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &family_id_)));
          set_has_family_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_family_name;
        break;
      }

      // optional string family_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_family_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_family_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->family_name().data(), this->family_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void family_war_dungeon_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 family_id = 1;
  if (has_family_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->family_id(), output);
  }

  // optional string family_name = 2;
  if (has_family_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->family_name().data(), this->family_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->family_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* family_war_dungeon_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 family_id = 1;
  if (has_family_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->family_id(), target);
  }

  // optional string family_name = 2;
  if (has_family_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->family_name().data(), this->family_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->family_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int family_war_dungeon_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 family_id = 1;
    if (has_family_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->family_id());
    }

    // optional string family_name = 2;
    if (has_family_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->family_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void family_war_dungeon_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const family_war_dungeon_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const family_war_dungeon_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void family_war_dungeon_info::MergeFrom(const family_war_dungeon_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_family_id()) {
      set_family_id(from.family_id());
    }
    if (from.has_family_name()) {
      set_family_name(from.family_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void family_war_dungeon_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void family_war_dungeon_info::CopyFrom(const family_war_dungeon_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool family_war_dungeon_info::IsInitialized() const {

  return true;
}

void family_war_dungeon_info::Swap(family_war_dungeon_info* other) {
  if (other != this) {
    std::swap(family_id_, other->family_id_);
    std::swap(family_name_, other->family_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata family_war_dungeon_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = family_war_dungeon_info_descriptor_;
  metadata.reflection = family_war_dungeon_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int family_war_dungeon_data::kIdFieldNumber;
const int family_war_dungeon_data::kLeftFamilyFieldNumber;
const int family_war_dungeon_data::kRightFamilyFieldNumber;
#endif  // !_MSC_VER

family_war_dungeon_data::family_war_dungeon_data()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void family_war_dungeon_data::InitAsDefaultInstance() {
  left_family_ = const_cast< ::proto::server::family_war_dungeon_info*>(&::proto::server::family_war_dungeon_info::default_instance());
  right_family_ = const_cast< ::proto::server::family_war_dungeon_info*>(&::proto::server::family_war_dungeon_info::default_instance());
}

family_war_dungeon_data::family_war_dungeon_data(const family_war_dungeon_data& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void family_war_dungeon_data::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  left_family_ = NULL;
  right_family_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

family_war_dungeon_data::~family_war_dungeon_data() {
  SharedDtor();
}

void family_war_dungeon_data::SharedDtor() {
  if (this != default_instance_) {
    delete left_family_;
    delete right_family_;
  }
}

void family_war_dungeon_data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* family_war_dungeon_data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return family_war_dungeon_data_descriptor_;
}

const family_war_dungeon_data& family_war_dungeon_data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

family_war_dungeon_data* family_war_dungeon_data::default_instance_ = NULL;

family_war_dungeon_data* family_war_dungeon_data::New() const {
  return new family_war_dungeon_data;
}

void family_war_dungeon_data::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    if (has_left_family()) {
      if (left_family_ != NULL) left_family_->::proto::server::family_war_dungeon_info::Clear();
    }
    if (has_right_family()) {
      if (right_family_ != NULL) right_family_->::proto::server::family_war_dungeon_info::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool family_war_dungeon_data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_left_family;
        break;
      }

      // optional .proto.server.family_war_dungeon_info left_family = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_left_family:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_left_family()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_right_family;
        break;
      }

      // optional .proto.server.family_war_dungeon_info right_family = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_right_family:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_right_family()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void family_war_dungeon_data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional .proto.server.family_war_dungeon_info left_family = 2;
  if (has_left_family()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->left_family(), output);
  }

  // optional .proto.server.family_war_dungeon_info right_family = 3;
  if (has_right_family()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->right_family(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* family_war_dungeon_data::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional .proto.server.family_war_dungeon_info left_family = 2;
  if (has_left_family()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->left_family(), target);
  }

  // optional .proto.server.family_war_dungeon_info right_family = 3;
  if (has_right_family()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->right_family(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int family_war_dungeon_data::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional .proto.server.family_war_dungeon_info left_family = 2;
    if (has_left_family()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->left_family());
    }

    // optional .proto.server.family_war_dungeon_info right_family = 3;
    if (has_right_family()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->right_family());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void family_war_dungeon_data::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const family_war_dungeon_data* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const family_war_dungeon_data*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void family_war_dungeon_data::MergeFrom(const family_war_dungeon_data& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_left_family()) {
      mutable_left_family()->::proto::server::family_war_dungeon_info::MergeFrom(from.left_family());
    }
    if (from.has_right_family()) {
      mutable_right_family()->::proto::server::family_war_dungeon_info::MergeFrom(from.right_family());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void family_war_dungeon_data::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void family_war_dungeon_data::CopyFrom(const family_war_dungeon_data& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool family_war_dungeon_data::IsInitialized() const {

  return true;
}

void family_war_dungeon_data::Swap(family_war_dungeon_data* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(left_family_, other->left_family_);
    std::swap(right_family_, other->right_family_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata family_war_dungeon_data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = family_war_dungeon_data_descriptor_;
  metadata.reflection = family_war_dungeon_data_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int family_war_dungeon_back::kIdFieldNumber;
const int family_war_dungeon_back::kInfoFieldNumber;
#endif  // !_MSC_VER

family_war_dungeon_back::family_war_dungeon_back()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void family_war_dungeon_back::InitAsDefaultInstance() {
  info_ = const_cast< ::proto::server::game_scene_reg_info*>(&::proto::server::game_scene_reg_info::default_instance());
}

family_war_dungeon_back::family_war_dungeon_back(const family_war_dungeon_back& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void family_war_dungeon_back::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

family_war_dungeon_back::~family_war_dungeon_back() {
  SharedDtor();
}

void family_war_dungeon_back::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
  }
}

void family_war_dungeon_back::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* family_war_dungeon_back::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return family_war_dungeon_back_descriptor_;
}

const family_war_dungeon_back& family_war_dungeon_back::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

family_war_dungeon_back* family_war_dungeon_back::default_instance_ = NULL;

family_war_dungeon_back* family_war_dungeon_back::New() const {
  return new family_war_dungeon_back;
}

void family_war_dungeon_back::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    if (has_info()) {
      if (info_ != NULL) info_->::proto::server::game_scene_reg_info::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool family_war_dungeon_back::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info;
        break;
      }

      // optional .proto.server.game_scene_reg_info info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void family_war_dungeon_back::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional .proto.server.game_scene_reg_info info = 2;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* family_war_dungeon_back::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional .proto.server.game_scene_reg_info info = 2;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int family_war_dungeon_back::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional .proto.server.game_scene_reg_info info = 2;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void family_war_dungeon_back::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const family_war_dungeon_back* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const family_war_dungeon_back*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void family_war_dungeon_back::MergeFrom(const family_war_dungeon_back& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_info()) {
      mutable_info()->::proto::server::game_scene_reg_info::MergeFrom(from.info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void family_war_dungeon_back::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void family_war_dungeon_back::CopyFrom(const family_war_dungeon_back& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool family_war_dungeon_back::IsInitialized() const {

  return true;
}

void family_war_dungeon_back::Swap(family_war_dungeon_back* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(info_, other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata family_war_dungeon_back::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = family_war_dungeon_back_descriptor_;
  metadata.reflection = family_war_dungeon_back_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int eg_prepare_family_war_request::kStartTimeFieldNumber;
const int eg_prepare_family_war_request::kFamilyWarDataFieldNumber;
#endif  // !_MSC_VER

eg_prepare_family_war_request::eg_prepare_family_war_request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void eg_prepare_family_war_request::InitAsDefaultInstance() {
}

eg_prepare_family_war_request::eg_prepare_family_war_request(const eg_prepare_family_war_request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void eg_prepare_family_war_request::SharedCtor() {
  _cached_size_ = 0;
  start_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

eg_prepare_family_war_request::~eg_prepare_family_war_request() {
  SharedDtor();
}

void eg_prepare_family_war_request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void eg_prepare_family_war_request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* eg_prepare_family_war_request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return eg_prepare_family_war_request_descriptor_;
}

const eg_prepare_family_war_request& eg_prepare_family_war_request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

eg_prepare_family_war_request* eg_prepare_family_war_request::default_instance_ = NULL;

eg_prepare_family_war_request* eg_prepare_family_war_request::New() const {
  return new eg_prepare_family_war_request;
}

void eg_prepare_family_war_request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    start_time_ = 0u;
  }
  family_war_data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool eg_prepare_family_war_request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 start_time = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &start_time_)));
          set_has_start_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_family_war_data;
        break;
      }

      // repeated .proto.server.family_war_dungeon_data family_war_data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_family_war_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_family_war_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_family_war_data;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void eg_prepare_family_war_request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 start_time = 1;
  if (has_start_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->start_time(), output);
  }

  // repeated .proto.server.family_war_dungeon_data family_war_data = 2;
  for (int i = 0; i < this->family_war_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->family_war_data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* eg_prepare_family_war_request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 start_time = 1;
  if (has_start_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->start_time(), target);
  }

  // repeated .proto.server.family_war_dungeon_data family_war_data = 2;
  for (int i = 0; i < this->family_war_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->family_war_data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int eg_prepare_family_war_request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 start_time = 1;
    if (has_start_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->start_time());
    }

  }
  // repeated .proto.server.family_war_dungeon_data family_war_data = 2;
  total_size += 1 * this->family_war_data_size();
  for (int i = 0; i < this->family_war_data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->family_war_data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void eg_prepare_family_war_request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const eg_prepare_family_war_request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const eg_prepare_family_war_request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void eg_prepare_family_war_request::MergeFrom(const eg_prepare_family_war_request& from) {
  GOOGLE_CHECK_NE(&from, this);
  family_war_data_.MergeFrom(from.family_war_data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_start_time()) {
      set_start_time(from.start_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void eg_prepare_family_war_request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void eg_prepare_family_war_request::CopyFrom(const eg_prepare_family_war_request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool eg_prepare_family_war_request::IsInitialized() const {

  return true;
}

void eg_prepare_family_war_request::Swap(eg_prepare_family_war_request* other) {
  if (other != this) {
    std::swap(start_time_, other->start_time_);
    family_war_data_.Swap(&other->family_war_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata eg_prepare_family_war_request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = eg_prepare_family_war_request_descriptor_;
  metadata.reflection = eg_prepare_family_war_request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ge_prepare_family_war_reply::kDungeonsFieldNumber;
#endif  // !_MSC_VER

ge_prepare_family_war_reply::ge_prepare_family_war_reply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ge_prepare_family_war_reply::InitAsDefaultInstance() {
}

ge_prepare_family_war_reply::ge_prepare_family_war_reply(const ge_prepare_family_war_reply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ge_prepare_family_war_reply::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ge_prepare_family_war_reply::~ge_prepare_family_war_reply() {
  SharedDtor();
}

void ge_prepare_family_war_reply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ge_prepare_family_war_reply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ge_prepare_family_war_reply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ge_prepare_family_war_reply_descriptor_;
}

const ge_prepare_family_war_reply& ge_prepare_family_war_reply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

ge_prepare_family_war_reply* ge_prepare_family_war_reply::default_instance_ = NULL;

ge_prepare_family_war_reply* ge_prepare_family_war_reply::New() const {
  return new ge_prepare_family_war_reply;
}

void ge_prepare_family_war_reply::Clear() {
  dungeons_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ge_prepare_family_war_reply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.server.family_war_dungeon_back dungeons = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dungeons:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_dungeons()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_dungeons;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ge_prepare_family_war_reply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto.server.family_war_dungeon_back dungeons = 1;
  for (int i = 0; i < this->dungeons_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->dungeons(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ge_prepare_family_war_reply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto.server.family_war_dungeon_back dungeons = 1;
  for (int i = 0; i < this->dungeons_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->dungeons(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ge_prepare_family_war_reply::ByteSize() const {
  int total_size = 0;

  // repeated .proto.server.family_war_dungeon_back dungeons = 1;
  total_size += 1 * this->dungeons_size();
  for (int i = 0; i < this->dungeons_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->dungeons(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ge_prepare_family_war_reply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ge_prepare_family_war_reply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ge_prepare_family_war_reply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ge_prepare_family_war_reply::MergeFrom(const ge_prepare_family_war_reply& from) {
  GOOGLE_CHECK_NE(&from, this);
  dungeons_.MergeFrom(from.dungeons_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ge_prepare_family_war_reply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ge_prepare_family_war_reply::CopyFrom(const ge_prepare_family_war_reply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ge_prepare_family_war_reply::IsInitialized() const {

  return true;
}

void ge_prepare_family_war_reply::Swap(ge_prepare_family_war_reply* other) {
  if (other != this) {
    dungeons_.Swap(&other->dungeons_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ge_prepare_family_war_reply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ge_prepare_family_war_reply_descriptor_;
  metadata.reflection = ge_prepare_family_war_reply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int eg_family_war_start_notify::kEndTimeFieldNumber;
#endif  // !_MSC_VER

eg_family_war_start_notify::eg_family_war_start_notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void eg_family_war_start_notify::InitAsDefaultInstance() {
}

eg_family_war_start_notify::eg_family_war_start_notify(const eg_family_war_start_notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void eg_family_war_start_notify::SharedCtor() {
  _cached_size_ = 0;
  end_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

eg_family_war_start_notify::~eg_family_war_start_notify() {
  SharedDtor();
}

void eg_family_war_start_notify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void eg_family_war_start_notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* eg_family_war_start_notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return eg_family_war_start_notify_descriptor_;
}

const eg_family_war_start_notify& eg_family_war_start_notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

eg_family_war_start_notify* eg_family_war_start_notify::default_instance_ = NULL;

eg_family_war_start_notify* eg_family_war_start_notify::New() const {
  return new eg_family_war_start_notify;
}

void eg_family_war_start_notify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    end_time_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool eg_family_war_start_notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 end_time = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &end_time_)));
          set_has_end_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void eg_family_war_start_notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 end_time = 1;
  if (has_end_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->end_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* eg_family_war_start_notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 end_time = 1;
  if (has_end_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->end_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int eg_family_war_start_notify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 end_time = 1;
    if (has_end_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->end_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void eg_family_war_start_notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const eg_family_war_start_notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const eg_family_war_start_notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void eg_family_war_start_notify::MergeFrom(const eg_family_war_start_notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_end_time()) {
      set_end_time(from.end_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void eg_family_war_start_notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void eg_family_war_start_notify::CopyFrom(const eg_family_war_start_notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool eg_family_war_start_notify::IsInitialized() const {

  return true;
}

void eg_family_war_start_notify::Swap(eg_family_war_start_notify* other) {
  if (other != this) {
    std::swap(end_time_, other->end_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata eg_family_war_start_notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = eg_family_war_start_notify_descriptor_;
  metadata.reflection = eg_family_war_start_notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

eg_family_war_end_notify::eg_family_war_end_notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void eg_family_war_end_notify::InitAsDefaultInstance() {
}

eg_family_war_end_notify::eg_family_war_end_notify(const eg_family_war_end_notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void eg_family_war_end_notify::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

eg_family_war_end_notify::~eg_family_war_end_notify() {
  SharedDtor();
}

void eg_family_war_end_notify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void eg_family_war_end_notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* eg_family_war_end_notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return eg_family_war_end_notify_descriptor_;
}

const eg_family_war_end_notify& eg_family_war_end_notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

eg_family_war_end_notify* eg_family_war_end_notify::default_instance_ = NULL;

eg_family_war_end_notify* eg_family_war_end_notify::New() const {
  return new eg_family_war_end_notify;
}

void eg_family_war_end_notify::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool eg_family_war_end_notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void eg_family_war_end_notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* eg_family_war_end_notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int eg_family_war_end_notify::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void eg_family_war_end_notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const eg_family_war_end_notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const eg_family_war_end_notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void eg_family_war_end_notify::MergeFrom(const eg_family_war_end_notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void eg_family_war_end_notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void eg_family_war_end_notify::CopyFrom(const eg_family_war_end_notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool eg_family_war_end_notify::IsInitialized() const {

  return true;
}

void eg_family_war_end_notify::Swap(eg_family_war_end_notify* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata eg_family_war_end_notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = eg_family_war_end_notify_descriptor_;
  metadata.reflection = eg_family_war_end_notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int eg_enter_family_war_scene_request::kUidFieldNumber;
const int eg_enter_family_war_scene_request::kFamilyDungeonIdFieldNumber;
#endif  // !_MSC_VER

eg_enter_family_war_scene_request::eg_enter_family_war_scene_request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void eg_enter_family_war_scene_request::InitAsDefaultInstance() {
}

eg_enter_family_war_scene_request::eg_enter_family_war_scene_request(const eg_enter_family_war_scene_request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void eg_enter_family_war_scene_request::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_ULONGLONG(0);
  family_dungeon_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

eg_enter_family_war_scene_request::~eg_enter_family_war_scene_request() {
  SharedDtor();
}

void eg_enter_family_war_scene_request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void eg_enter_family_war_scene_request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* eg_enter_family_war_scene_request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return eg_enter_family_war_scene_request_descriptor_;
}

const eg_enter_family_war_scene_request& eg_enter_family_war_scene_request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

eg_enter_family_war_scene_request* eg_enter_family_war_scene_request::default_instance_ = NULL;

eg_enter_family_war_scene_request* eg_enter_family_war_scene_request::New() const {
  return new eg_enter_family_war_scene_request;
}

void eg_enter_family_war_scene_request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = GOOGLE_ULONGLONG(0);
    family_dungeon_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool eg_enter_family_war_scene_request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_family_dungeon_id;
        break;
      }

      // optional uint64 family_dungeon_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_family_dungeon_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &family_dungeon_id_)));
          set_has_family_dungeon_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void eg_enter_family_war_scene_request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uid(), output);
  }

  // optional uint64 family_dungeon_id = 2;
  if (has_family_dungeon_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->family_dungeon_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* eg_enter_family_war_scene_request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->uid(), target);
  }

  // optional uint64 family_dungeon_id = 2;
  if (has_family_dungeon_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->family_dungeon_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int eg_enter_family_war_scene_request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uid());
    }

    // optional uint64 family_dungeon_id = 2;
    if (has_family_dungeon_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->family_dungeon_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void eg_enter_family_war_scene_request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const eg_enter_family_war_scene_request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const eg_enter_family_war_scene_request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void eg_enter_family_war_scene_request::MergeFrom(const eg_enter_family_war_scene_request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_family_dungeon_id()) {
      set_family_dungeon_id(from.family_dungeon_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void eg_enter_family_war_scene_request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void eg_enter_family_war_scene_request::CopyFrom(const eg_enter_family_war_scene_request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool eg_enter_family_war_scene_request::IsInitialized() const {

  return true;
}

void eg_enter_family_war_scene_request::Swap(eg_enter_family_war_scene_request* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(family_dungeon_id_, other->family_dungeon_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata eg_enter_family_war_scene_request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = eg_enter_family_war_scene_request_descriptor_;
  metadata.reflection = eg_enter_family_war_scene_request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int family_war_personal::kUidFieldNumber;
const int family_war_personal::kExploitFieldNumber;
const int family_war_personal::kRankFieldNumber;
const int family_war_personal::kRankLevelFieldNumber;
const int family_war_personal::kExploitLevelFieldNumber;
#endif  // !_MSC_VER

family_war_personal::family_war_personal()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void family_war_personal::InitAsDefaultInstance() {
}

family_war_personal::family_war_personal(const family_war_personal& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void family_war_personal::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_ULONGLONG(0);
  exploit_ = GOOGLE_ULONGLONG(0);
  rank_ = 0u;
  rank_level_ = 0u;
  exploit_level_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

family_war_personal::~family_war_personal() {
  SharedDtor();
}

void family_war_personal::SharedDtor() {
  if (this != default_instance_) {
  }
}

void family_war_personal::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* family_war_personal::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return family_war_personal_descriptor_;
}

const family_war_personal& family_war_personal::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

family_war_personal* family_war_personal::default_instance_ = NULL;

family_war_personal* family_war_personal::New() const {
  return new family_war_personal;
}

void family_war_personal::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = GOOGLE_ULONGLONG(0);
    exploit_ = GOOGLE_ULONGLONG(0);
    rank_ = 0u;
    rank_level_ = 0u;
    exploit_level_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool family_war_personal::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_exploit;
        break;
      }

      // optional uint64 exploit = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exploit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &exploit_)));
          set_has_exploit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_rank;
        break;
      }

      // optional uint32 rank = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_rank_level;
        break;
      }

      // optional uint32 rank_level = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rank_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rank_level_)));
          set_has_rank_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_exploit_level;
        break;
      }

      // optional uint32 exploit_level = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exploit_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &exploit_level_)));
          set_has_exploit_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void family_war_personal::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uid(), output);
  }

  // optional uint64 exploit = 2;
  if (has_exploit()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->exploit(), output);
  }

  // optional uint32 rank = 3;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->rank(), output);
  }

  // optional uint32 rank_level = 4;
  if (has_rank_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->rank_level(), output);
  }

  // optional uint32 exploit_level = 5;
  if (has_exploit_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->exploit_level(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* family_war_personal::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->uid(), target);
  }

  // optional uint64 exploit = 2;
  if (has_exploit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->exploit(), target);
  }

  // optional uint32 rank = 3;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->rank(), target);
  }

  // optional uint32 rank_level = 4;
  if (has_rank_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->rank_level(), target);
  }

  // optional uint32 exploit_level = 5;
  if (has_exploit_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->exploit_level(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int family_war_personal::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uid());
    }

    // optional uint64 exploit = 2;
    if (has_exploit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->exploit());
    }

    // optional uint32 rank = 3;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rank());
    }

    // optional uint32 rank_level = 4;
    if (has_rank_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rank_level());
    }

    // optional uint32 exploit_level = 5;
    if (has_exploit_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->exploit_level());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void family_war_personal::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const family_war_personal* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const family_war_personal*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void family_war_personal::MergeFrom(const family_war_personal& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_exploit()) {
      set_exploit(from.exploit());
    }
    if (from.has_rank()) {
      set_rank(from.rank());
    }
    if (from.has_rank_level()) {
      set_rank_level(from.rank_level());
    }
    if (from.has_exploit_level()) {
      set_exploit_level(from.exploit_level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void family_war_personal::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void family_war_personal::CopyFrom(const family_war_personal& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool family_war_personal::IsInitialized() const {

  return true;
}

void family_war_personal::Swap(family_war_personal* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(exploit_, other->exploit_);
    std::swap(rank_, other->rank_);
    std::swap(rank_level_, other->rank_level_);
    std::swap(exploit_level_, other->exploit_level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata family_war_personal::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = family_war_personal_descriptor_;
  metadata.reflection = family_war_personal_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int family_war_result_data::kIdFieldNumber;
const int family_war_result_data::kWinFamilyIdFieldNumber;
const int family_war_result_data::kLeftFamilyScoreFieldNumber;
const int family_war_result_data::kRightFamilyScoreFieldNumber;
const int family_war_result_data::kAllRolesFieldNumber;
#endif  // !_MSC_VER

family_war_result_data::family_war_result_data()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void family_war_result_data::InitAsDefaultInstance() {
}

family_war_result_data::family_war_result_data(const family_war_result_data& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void family_war_result_data::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  win_family_id_ = GOOGLE_ULONGLONG(0);
  left_family_score_ = 0u;
  right_family_score_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

family_war_result_data::~family_war_result_data() {
  SharedDtor();
}

void family_war_result_data::SharedDtor() {
  if (this != default_instance_) {
  }
}

void family_war_result_data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* family_war_result_data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return family_war_result_data_descriptor_;
}

const family_war_result_data& family_war_result_data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

family_war_result_data* family_war_result_data::default_instance_ = NULL;

family_war_result_data* family_war_result_data::New() const {
  return new family_war_result_data;
}

void family_war_result_data::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    win_family_id_ = GOOGLE_ULONGLONG(0);
    left_family_score_ = 0u;
    right_family_score_ = 0u;
  }
  all_roles_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool family_war_result_data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_win_family_id;
        break;
      }

      // optional uint64 win_family_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_win_family_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &win_family_id_)));
          set_has_win_family_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_left_family_score;
        break;
      }

      // optional uint32 left_family_score = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_left_family_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &left_family_score_)));
          set_has_left_family_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_right_family_score;
        break;
      }

      // optional uint32 right_family_score = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_right_family_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &right_family_score_)));
          set_has_right_family_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_all_roles;
        break;
      }

      // repeated .proto.server.family_war_personal all_roles = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_all_roles:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_all_roles()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_all_roles;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void family_war_result_data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional uint64 win_family_id = 2;
  if (has_win_family_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->win_family_id(), output);
  }

  // optional uint32 left_family_score = 3;
  if (has_left_family_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->left_family_score(), output);
  }

  // optional uint32 right_family_score = 4;
  if (has_right_family_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->right_family_score(), output);
  }

  // repeated .proto.server.family_war_personal all_roles = 5;
  for (int i = 0; i < this->all_roles_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->all_roles(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* family_war_result_data::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional uint64 win_family_id = 2;
  if (has_win_family_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->win_family_id(), target);
  }

  // optional uint32 left_family_score = 3;
  if (has_left_family_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->left_family_score(), target);
  }

  // optional uint32 right_family_score = 4;
  if (has_right_family_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->right_family_score(), target);
  }

  // repeated .proto.server.family_war_personal all_roles = 5;
  for (int i = 0; i < this->all_roles_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->all_roles(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int family_war_result_data::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint64 win_family_id = 2;
    if (has_win_family_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->win_family_id());
    }

    // optional uint32 left_family_score = 3;
    if (has_left_family_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->left_family_score());
    }

    // optional uint32 right_family_score = 4;
    if (has_right_family_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->right_family_score());
    }

  }
  // repeated .proto.server.family_war_personal all_roles = 5;
  total_size += 1 * this->all_roles_size();
  for (int i = 0; i < this->all_roles_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->all_roles(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void family_war_result_data::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const family_war_result_data* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const family_war_result_data*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void family_war_result_data::MergeFrom(const family_war_result_data& from) {
  GOOGLE_CHECK_NE(&from, this);
  all_roles_.MergeFrom(from.all_roles_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_win_family_id()) {
      set_win_family_id(from.win_family_id());
    }
    if (from.has_left_family_score()) {
      set_left_family_score(from.left_family_score());
    }
    if (from.has_right_family_score()) {
      set_right_family_score(from.right_family_score());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void family_war_result_data::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void family_war_result_data::CopyFrom(const family_war_result_data& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool family_war_result_data::IsInitialized() const {

  return true;
}

void family_war_result_data::Swap(family_war_result_data* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(win_family_id_, other->win_family_id_);
    std::swap(left_family_score_, other->left_family_score_);
    std::swap(right_family_score_, other->right_family_score_);
    all_roles_.Swap(&other->all_roles_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata family_war_result_data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = family_war_result_data_descriptor_;
  metadata.reflection = family_war_result_data_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ge_family_war_early_result_notify::kDataFieldNumber;
#endif  // !_MSC_VER

ge_family_war_early_result_notify::ge_family_war_early_result_notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ge_family_war_early_result_notify::InitAsDefaultInstance() {
  data_ = const_cast< ::proto::server::family_war_result_data*>(&::proto::server::family_war_result_data::default_instance());
}

ge_family_war_early_result_notify::ge_family_war_early_result_notify(const ge_family_war_early_result_notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ge_family_war_early_result_notify::SharedCtor() {
  _cached_size_ = 0;
  data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ge_family_war_early_result_notify::~ge_family_war_early_result_notify() {
  SharedDtor();
}

void ge_family_war_early_result_notify::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
  }
}

void ge_family_war_early_result_notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ge_family_war_early_result_notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ge_family_war_early_result_notify_descriptor_;
}

const ge_family_war_early_result_notify& ge_family_war_early_result_notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

ge_family_war_early_result_notify* ge_family_war_early_result_notify::default_instance_ = NULL;

ge_family_war_early_result_notify* ge_family_war_early_result_notify::New() const {
  return new ge_family_war_early_result_notify;
}

void ge_family_war_early_result_notify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_data()) {
      if (data_ != NULL) data_->::proto::server::family_war_result_data::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ge_family_war_early_result_notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.server.family_war_result_data data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ge_family_war_early_result_notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .proto.server.family_war_result_data data = 1;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ge_family_war_early_result_notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .proto.server.family_war_result_data data = 1;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ge_family_war_early_result_notify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .proto.server.family_war_result_data data = 1;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ge_family_war_early_result_notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ge_family_war_early_result_notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ge_family_war_early_result_notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ge_family_war_early_result_notify::MergeFrom(const ge_family_war_early_result_notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_data()) {
      mutable_data()->::proto::server::family_war_result_data::MergeFrom(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ge_family_war_early_result_notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ge_family_war_early_result_notify::CopyFrom(const ge_family_war_early_result_notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ge_family_war_early_result_notify::IsInitialized() const {

  return true;
}

void ge_family_war_early_result_notify::Swap(ge_family_war_early_result_notify* other) {
  if (other != this) {
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ge_family_war_early_result_notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ge_family_war_early_result_notify_descriptor_;
  metadata.reflection = ge_family_war_early_result_notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ge_family_war_result_notify::kDatasFieldNumber;
#endif  // !_MSC_VER

ge_family_war_result_notify::ge_family_war_result_notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ge_family_war_result_notify::InitAsDefaultInstance() {
}

ge_family_war_result_notify::ge_family_war_result_notify(const ge_family_war_result_notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ge_family_war_result_notify::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ge_family_war_result_notify::~ge_family_war_result_notify() {
  SharedDtor();
}

void ge_family_war_result_notify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ge_family_war_result_notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ge_family_war_result_notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ge_family_war_result_notify_descriptor_;
}

const ge_family_war_result_notify& ge_family_war_result_notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

ge_family_war_result_notify* ge_family_war_result_notify::default_instance_ = NULL;

ge_family_war_result_notify* ge_family_war_result_notify::New() const {
  return new ge_family_war_result_notify;
}

void ge_family_war_result_notify::Clear() {
  datas_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ge_family_war_result_notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.server.family_war_result_data datas = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_datas:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_datas()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_datas;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ge_family_war_result_notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto.server.family_war_result_data datas = 1;
  for (int i = 0; i < this->datas_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->datas(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ge_family_war_result_notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto.server.family_war_result_data datas = 1;
  for (int i = 0; i < this->datas_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->datas(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ge_family_war_result_notify::ByteSize() const {
  int total_size = 0;

  // repeated .proto.server.family_war_result_data datas = 1;
  total_size += 1 * this->datas_size();
  for (int i = 0; i < this->datas_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->datas(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ge_family_war_result_notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ge_family_war_result_notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ge_family_war_result_notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ge_family_war_result_notify::MergeFrom(const ge_family_war_result_notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  datas_.MergeFrom(from.datas_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ge_family_war_result_notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ge_family_war_result_notify::CopyFrom(const ge_family_war_result_notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ge_family_war_result_notify::IsInitialized() const {

  return true;
}

void ge_family_war_result_notify::Swap(ge_family_war_result_notify* other) {
  if (other != this) {
    datas_.Swap(&other->datas_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ge_family_war_result_notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ge_family_war_result_notify_descriptor_;
  metadata.reflection = ge_family_war_result_notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ge_family_update_glory_notify::kFamilyIdFieldNumber;
const int ge_family_update_glory_notify::kGloryFieldNumber;
#endif  // !_MSC_VER

ge_family_update_glory_notify::ge_family_update_glory_notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ge_family_update_glory_notify::InitAsDefaultInstance() {
}

ge_family_update_glory_notify::ge_family_update_glory_notify(const ge_family_update_glory_notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ge_family_update_glory_notify::SharedCtor() {
  _cached_size_ = 0;
  family_id_ = GOOGLE_ULONGLONG(0);
  glory_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ge_family_update_glory_notify::~ge_family_update_glory_notify() {
  SharedDtor();
}

void ge_family_update_glory_notify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ge_family_update_glory_notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ge_family_update_glory_notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ge_family_update_glory_notify_descriptor_;
}

const ge_family_update_glory_notify& ge_family_update_glory_notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

ge_family_update_glory_notify* ge_family_update_glory_notify::default_instance_ = NULL;

ge_family_update_glory_notify* ge_family_update_glory_notify::New() const {
  return new ge_family_update_glory_notify;
}

void ge_family_update_glory_notify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    family_id_ = GOOGLE_ULONGLONG(0);
    glory_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ge_family_update_glory_notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 family_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &family_id_)));
          set_has_family_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_glory;
        break;
      }

      // optional uint32 glory = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_glory:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &glory_)));
          set_has_glory();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ge_family_update_glory_notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 family_id = 1;
  if (has_family_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->family_id(), output);
  }

  // optional uint32 glory = 2;
  if (has_glory()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->glory(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ge_family_update_glory_notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 family_id = 1;
  if (has_family_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->family_id(), target);
  }

  // optional uint32 glory = 2;
  if (has_glory()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->glory(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ge_family_update_glory_notify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 family_id = 1;
    if (has_family_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->family_id());
    }

    // optional uint32 glory = 2;
    if (has_glory()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->glory());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ge_family_update_glory_notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ge_family_update_glory_notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ge_family_update_glory_notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ge_family_update_glory_notify::MergeFrom(const ge_family_update_glory_notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_family_id()) {
      set_family_id(from.family_id());
    }
    if (from.has_glory()) {
      set_glory(from.glory());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ge_family_update_glory_notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ge_family_update_glory_notify::CopyFrom(const ge_family_update_glory_notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ge_family_update_glory_notify::IsInitialized() const {

  return true;
}

void ge_family_update_glory_notify::Swap(ge_family_update_glory_notify* other) {
  if (other != this) {
    std::swap(family_id_, other->family_id_);
    std::swap(glory_, other->glory_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ge_family_update_glory_notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ge_family_update_glory_notify_descriptor_;
  metadata.reflection = ge_family_update_glory_notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ge_family_prayer_request::kHeroTidFieldNumber;
const int ge_family_prayer_request::kHeroNumFieldNumber;
#endif  // !_MSC_VER

ge_family_prayer_request::ge_family_prayer_request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ge_family_prayer_request::InitAsDefaultInstance() {
}

ge_family_prayer_request::ge_family_prayer_request(const ge_family_prayer_request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ge_family_prayer_request::SharedCtor() {
  _cached_size_ = 0;
  hero_tid_ = 0u;
  hero_num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ge_family_prayer_request::~ge_family_prayer_request() {
  SharedDtor();
}

void ge_family_prayer_request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ge_family_prayer_request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ge_family_prayer_request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ge_family_prayer_request_descriptor_;
}

const ge_family_prayer_request& ge_family_prayer_request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

ge_family_prayer_request* ge_family_prayer_request::default_instance_ = NULL;

ge_family_prayer_request* ge_family_prayer_request::New() const {
  return new ge_family_prayer_request;
}

void ge_family_prayer_request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    hero_tid_ = 0u;
    hero_num_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ge_family_prayer_request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 hero_tid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hero_tid_)));
          set_has_hero_tid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_hero_num;
        break;
      }

      // optional uint32 hero_num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hero_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hero_num_)));
          set_has_hero_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ge_family_prayer_request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 hero_tid = 1;
  if (has_hero_tid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->hero_tid(), output);
  }

  // optional uint32 hero_num = 2;
  if (has_hero_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->hero_num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ge_family_prayer_request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 hero_tid = 1;
  if (has_hero_tid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->hero_tid(), target);
  }

  // optional uint32 hero_num = 2;
  if (has_hero_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->hero_num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ge_family_prayer_request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 hero_tid = 1;
    if (has_hero_tid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hero_tid());
    }

    // optional uint32 hero_num = 2;
    if (has_hero_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hero_num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ge_family_prayer_request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ge_family_prayer_request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ge_family_prayer_request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ge_family_prayer_request::MergeFrom(const ge_family_prayer_request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hero_tid()) {
      set_hero_tid(from.hero_tid());
    }
    if (from.has_hero_num()) {
      set_hero_num(from.hero_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ge_family_prayer_request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ge_family_prayer_request::CopyFrom(const ge_family_prayer_request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ge_family_prayer_request::IsInitialized() const {

  return true;
}

void ge_family_prayer_request::Swap(ge_family_prayer_request* other) {
  if (other != this) {
    std::swap(hero_tid_, other->hero_tid_);
    std::swap(hero_num_, other->hero_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ge_family_prayer_request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ge_family_prayer_request_descriptor_;
  metadata.reflection = ge_family_prayer_request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ge_family_prayer_gift_request::kRoleIdFieldNumber;
const int ge_family_prayer_gift_request::kHeroTidFieldNumber;
const int ge_family_prayer_gift_request::kHeroNumFieldNumber;
const int ge_family_prayer_gift_request::kHeroRarityFieldNumber;
const int ge_family_prayer_gift_request::kHeroMaterialIdFieldNumber;
const int ge_family_prayer_gift_request::kChangeDataFieldNumber;
#endif  // !_MSC_VER

ge_family_prayer_gift_request::ge_family_prayer_gift_request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ge_family_prayer_gift_request::InitAsDefaultInstance() {
  change_data_ = const_cast< ::proto::common::role_change_data*>(&::proto::common::role_change_data::default_instance());
}

ge_family_prayer_gift_request::ge_family_prayer_gift_request(const ge_family_prayer_gift_request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ge_family_prayer_gift_request::SharedCtor() {
  _cached_size_ = 0;
  role_id_ = GOOGLE_ULONGLONG(0);
  hero_tid_ = 0u;
  hero_num_ = 0u;
  hero_rarity_ = 0u;
  hero_material_id_ = 0u;
  change_data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ge_family_prayer_gift_request::~ge_family_prayer_gift_request() {
  SharedDtor();
}

void ge_family_prayer_gift_request::SharedDtor() {
  if (this != default_instance_) {
    delete change_data_;
  }
}

void ge_family_prayer_gift_request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ge_family_prayer_gift_request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ge_family_prayer_gift_request_descriptor_;
}

const ge_family_prayer_gift_request& ge_family_prayer_gift_request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

ge_family_prayer_gift_request* ge_family_prayer_gift_request::default_instance_ = NULL;

ge_family_prayer_gift_request* ge_family_prayer_gift_request::New() const {
  return new ge_family_prayer_gift_request;
}

void ge_family_prayer_gift_request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_id_ = GOOGLE_ULONGLONG(0);
    hero_tid_ = 0u;
    hero_num_ = 0u;
    hero_rarity_ = 0u;
    hero_material_id_ = 0u;
    if (has_change_data()) {
      if (change_data_ != NULL) change_data_->::proto::common::role_change_data::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ge_family_prayer_gift_request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 role_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_hero_tid;
        break;
      }

      // optional uint32 hero_tid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hero_tid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hero_tid_)));
          set_has_hero_tid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_hero_num;
        break;
      }

      // optional uint32 hero_num = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hero_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hero_num_)));
          set_has_hero_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_hero_rarity;
        break;
      }

      // optional uint32 hero_rarity = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hero_rarity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hero_rarity_)));
          set_has_hero_rarity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_hero_material_id;
        break;
      }

      // optional uint32 hero_material_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hero_material_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hero_material_id_)));
          set_has_hero_material_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_change_data;
        break;
      }

      // optional .proto.common.role_change_data change_data = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_change_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_change_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ge_family_prayer_gift_request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 role_id = 1;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->role_id(), output);
  }

  // optional uint32 hero_tid = 2;
  if (has_hero_tid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->hero_tid(), output);
  }

  // optional uint32 hero_num = 3;
  if (has_hero_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->hero_num(), output);
  }

  // optional uint32 hero_rarity = 4;
  if (has_hero_rarity()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->hero_rarity(), output);
  }

  // optional uint32 hero_material_id = 5;
  if (has_hero_material_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->hero_material_id(), output);
  }

  // optional .proto.common.role_change_data change_data = 6;
  if (has_change_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->change_data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ge_family_prayer_gift_request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 role_id = 1;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->role_id(), target);
  }

  // optional uint32 hero_tid = 2;
  if (has_hero_tid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->hero_tid(), target);
  }

  // optional uint32 hero_num = 3;
  if (has_hero_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->hero_num(), target);
  }

  // optional uint32 hero_rarity = 4;
  if (has_hero_rarity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->hero_rarity(), target);
  }

  // optional uint32 hero_material_id = 5;
  if (has_hero_material_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->hero_material_id(), target);
  }

  // optional .proto.common.role_change_data change_data = 6;
  if (has_change_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->change_data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ge_family_prayer_gift_request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 role_id = 1;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_id());
    }

    // optional uint32 hero_tid = 2;
    if (has_hero_tid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hero_tid());
    }

    // optional uint32 hero_num = 3;
    if (has_hero_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hero_num());
    }

    // optional uint32 hero_rarity = 4;
    if (has_hero_rarity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hero_rarity());
    }

    // optional uint32 hero_material_id = 5;
    if (has_hero_material_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hero_material_id());
    }

    // optional .proto.common.role_change_data change_data = 6;
    if (has_change_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->change_data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ge_family_prayer_gift_request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ge_family_prayer_gift_request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ge_family_prayer_gift_request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ge_family_prayer_gift_request::MergeFrom(const ge_family_prayer_gift_request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_hero_tid()) {
      set_hero_tid(from.hero_tid());
    }
    if (from.has_hero_num()) {
      set_hero_num(from.hero_num());
    }
    if (from.has_hero_rarity()) {
      set_hero_rarity(from.hero_rarity());
    }
    if (from.has_hero_material_id()) {
      set_hero_material_id(from.hero_material_id());
    }
    if (from.has_change_data()) {
      mutable_change_data()->::proto::common::role_change_data::MergeFrom(from.change_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ge_family_prayer_gift_request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ge_family_prayer_gift_request::CopyFrom(const ge_family_prayer_gift_request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ge_family_prayer_gift_request::IsInitialized() const {

  return true;
}

void ge_family_prayer_gift_request::Swap(ge_family_prayer_gift_request* other) {
  if (other != this) {
    std::swap(role_id_, other->role_id_);
    std::swap(hero_tid_, other->hero_tid_);
    std::swap(hero_num_, other->hero_num_);
    std::swap(hero_rarity_, other->hero_rarity_);
    std::swap(hero_material_id_, other->hero_material_id_);
    std::swap(change_data_, other->change_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ge_family_prayer_gift_request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ge_family_prayer_gift_request_descriptor_;
  metadata.reflection = ge_family_prayer_gift_request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int eg_family_prayer_gift_failed_notify::kReplyCodeFieldNumber;
const int eg_family_prayer_gift_failed_notify::kRoleIdFieldNumber;
const int eg_family_prayer_gift_failed_notify::kHeroTidFieldNumber;
const int eg_family_prayer_gift_failed_notify::kHeroNumFieldNumber;
const int eg_family_prayer_gift_failed_notify::kHeroMaterialIdFieldNumber;
const int eg_family_prayer_gift_failed_notify::kRwdItemFieldNumber;
const int eg_family_prayer_gift_failed_notify::kChangeDataFieldNumber;
#endif  // !_MSC_VER

eg_family_prayer_gift_failed_notify::eg_family_prayer_gift_failed_notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void eg_family_prayer_gift_failed_notify::InitAsDefaultInstance() {
  change_data_ = const_cast< ::proto::common::role_change_data*>(&::proto::common::role_change_data::default_instance());
}

eg_family_prayer_gift_failed_notify::eg_family_prayer_gift_failed_notify(const eg_family_prayer_gift_failed_notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void eg_family_prayer_gift_failed_notify::SharedCtor() {
  _cached_size_ = 0;
  reply_code_ = 0u;
  role_id_ = GOOGLE_ULONGLONG(0);
  hero_tid_ = 0u;
  hero_num_ = 0u;
  hero_material_id_ = 0u;
  rwd_item_ = 0u;
  change_data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

eg_family_prayer_gift_failed_notify::~eg_family_prayer_gift_failed_notify() {
  SharedDtor();
}

void eg_family_prayer_gift_failed_notify::SharedDtor() {
  if (this != default_instance_) {
    delete change_data_;
  }
}

void eg_family_prayer_gift_failed_notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* eg_family_prayer_gift_failed_notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return eg_family_prayer_gift_failed_notify_descriptor_;
}

const eg_family_prayer_gift_failed_notify& eg_family_prayer_gift_failed_notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

eg_family_prayer_gift_failed_notify* eg_family_prayer_gift_failed_notify::default_instance_ = NULL;

eg_family_prayer_gift_failed_notify* eg_family_prayer_gift_failed_notify::New() const {
  return new eg_family_prayer_gift_failed_notify;
}

void eg_family_prayer_gift_failed_notify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    reply_code_ = 0u;
    role_id_ = GOOGLE_ULONGLONG(0);
    hero_tid_ = 0u;
    hero_num_ = 0u;
    hero_material_id_ = 0u;
    rwd_item_ = 0u;
    if (has_change_data()) {
      if (change_data_ != NULL) change_data_->::proto::common::role_change_data::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool eg_family_prayer_gift_failed_notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 reply_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reply_code_)));
          set_has_reply_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_role_id;
        break;
      }

      // optional uint64 role_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_hero_tid;
        break;
      }

      // optional uint32 hero_tid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hero_tid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hero_tid_)));
          set_has_hero_tid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_hero_num;
        break;
      }

      // optional uint32 hero_num = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hero_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hero_num_)));
          set_has_hero_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_hero_material_id;
        break;
      }

      // optional uint32 hero_material_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hero_material_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hero_material_id_)));
          set_has_hero_material_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_rwd_item;
        break;
      }

      // optional uint32 rwd_item = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rwd_item:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rwd_item_)));
          set_has_rwd_item();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_change_data;
        break;
      }

      // optional .proto.common.role_change_data change_data = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_change_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_change_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void eg_family_prayer_gift_failed_notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 reply_code = 1;
  if (has_reply_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->reply_code(), output);
  }

  // optional uint64 role_id = 2;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->role_id(), output);
  }

  // optional uint32 hero_tid = 3;
  if (has_hero_tid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->hero_tid(), output);
  }

  // optional uint32 hero_num = 4;
  if (has_hero_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->hero_num(), output);
  }

  // optional uint32 hero_material_id = 5;
  if (has_hero_material_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->hero_material_id(), output);
  }

  // optional uint32 rwd_item = 6;
  if (has_rwd_item()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->rwd_item(), output);
  }

  // optional .proto.common.role_change_data change_data = 7;
  if (has_change_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->change_data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* eg_family_prayer_gift_failed_notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 reply_code = 1;
  if (has_reply_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->reply_code(), target);
  }

  // optional uint64 role_id = 2;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->role_id(), target);
  }

  // optional uint32 hero_tid = 3;
  if (has_hero_tid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->hero_tid(), target);
  }

  // optional uint32 hero_num = 4;
  if (has_hero_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->hero_num(), target);
  }

  // optional uint32 hero_material_id = 5;
  if (has_hero_material_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->hero_material_id(), target);
  }

  // optional uint32 rwd_item = 6;
  if (has_rwd_item()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->rwd_item(), target);
  }

  // optional .proto.common.role_change_data change_data = 7;
  if (has_change_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->change_data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int eg_family_prayer_gift_failed_notify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 reply_code = 1;
    if (has_reply_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reply_code());
    }

    // optional uint64 role_id = 2;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_id());
    }

    // optional uint32 hero_tid = 3;
    if (has_hero_tid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hero_tid());
    }

    // optional uint32 hero_num = 4;
    if (has_hero_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hero_num());
    }

    // optional uint32 hero_material_id = 5;
    if (has_hero_material_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hero_material_id());
    }

    // optional uint32 rwd_item = 6;
    if (has_rwd_item()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rwd_item());
    }

    // optional .proto.common.role_change_data change_data = 7;
    if (has_change_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->change_data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void eg_family_prayer_gift_failed_notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const eg_family_prayer_gift_failed_notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const eg_family_prayer_gift_failed_notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void eg_family_prayer_gift_failed_notify::MergeFrom(const eg_family_prayer_gift_failed_notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reply_code()) {
      set_reply_code(from.reply_code());
    }
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_hero_tid()) {
      set_hero_tid(from.hero_tid());
    }
    if (from.has_hero_num()) {
      set_hero_num(from.hero_num());
    }
    if (from.has_hero_material_id()) {
      set_hero_material_id(from.hero_material_id());
    }
    if (from.has_rwd_item()) {
      set_rwd_item(from.rwd_item());
    }
    if (from.has_change_data()) {
      mutable_change_data()->::proto::common::role_change_data::MergeFrom(from.change_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void eg_family_prayer_gift_failed_notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void eg_family_prayer_gift_failed_notify::CopyFrom(const eg_family_prayer_gift_failed_notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool eg_family_prayer_gift_failed_notify::IsInitialized() const {

  return true;
}

void eg_family_prayer_gift_failed_notify::Swap(eg_family_prayer_gift_failed_notify* other) {
  if (other != this) {
    std::swap(reply_code_, other->reply_code_);
    std::swap(role_id_, other->role_id_);
    std::swap(hero_tid_, other->hero_tid_);
    std::swap(hero_num_, other->hero_num_);
    std::swap(hero_material_id_, other->hero_material_id_);
    std::swap(rwd_item_, other->rwd_item_);
    std::swap(change_data_, other->change_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata eg_family_prayer_gift_failed_notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = eg_family_prayer_gift_failed_notify_descriptor_;
  metadata.reflection = eg_family_prayer_gift_failed_notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int eg_family_country_change_notify::kRoleListFieldNumber;
const int eg_family_country_change_notify::kCountryIdFieldNumber;
#endif  // !_MSC_VER

eg_family_country_change_notify::eg_family_country_change_notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void eg_family_country_change_notify::InitAsDefaultInstance() {
}

eg_family_country_change_notify::eg_family_country_change_notify(const eg_family_country_change_notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void eg_family_country_change_notify::SharedCtor() {
  _cached_size_ = 0;
  country_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

eg_family_country_change_notify::~eg_family_country_change_notify() {
  SharedDtor();
}

void eg_family_country_change_notify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void eg_family_country_change_notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* eg_family_country_change_notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return eg_family_country_change_notify_descriptor_;
}

const eg_family_country_change_notify& eg_family_country_change_notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

eg_family_country_change_notify* eg_family_country_change_notify::default_instance_ = NULL;

eg_family_country_change_notify* eg_family_country_change_notify::New() const {
  return new eg_family_country_change_notify;
}

void eg_family_country_change_notify::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    country_id_ = 0u;
  }
  role_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool eg_family_country_change_notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint64 role_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 8, input, this->mutable_role_list())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_role_list())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_role_list;
        if (input->ExpectTag(16)) goto parse_country_id;
        break;
      }

      // optional uint32 country_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_country_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &country_id_)));
          set_has_country_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void eg_family_country_change_notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint64 role_list = 1;
  for (int i = 0; i < this->role_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      1, this->role_list(i), output);
  }

  // optional uint32 country_id = 2;
  if (has_country_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->country_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* eg_family_country_change_notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint64 role_list = 1;
  for (int i = 0; i < this->role_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(1, this->role_list(i), target);
  }

  // optional uint32 country_id = 2;
  if (has_country_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->country_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int eg_family_country_change_notify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 country_id = 2;
    if (has_country_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->country_id());
    }

  }
  // repeated uint64 role_list = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->role_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->role_list(i));
    }
    total_size += 1 * this->role_list_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void eg_family_country_change_notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const eg_family_country_change_notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const eg_family_country_change_notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void eg_family_country_change_notify::MergeFrom(const eg_family_country_change_notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  role_list_.MergeFrom(from.role_list_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_country_id()) {
      set_country_id(from.country_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void eg_family_country_change_notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void eg_family_country_change_notify::CopyFrom(const eg_family_country_change_notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool eg_family_country_change_notify::IsInitialized() const {

  return true;
}

void eg_family_country_change_notify::Swap(eg_family_country_change_notify* other) {
  if (other != this) {
    role_list_.Swap(&other->role_list_);
    std::swap(country_id_, other->country_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata eg_family_country_change_notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = eg_family_country_change_notify_descriptor_;
  metadata.reflection = eg_family_country_change_notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int eg_family_level_change_notify::kRoleListFieldNumber;
const int eg_family_level_change_notify::kFamilyLevelFieldNumber;
#endif  // !_MSC_VER

eg_family_level_change_notify::eg_family_level_change_notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void eg_family_level_change_notify::InitAsDefaultInstance() {
}

eg_family_level_change_notify::eg_family_level_change_notify(const eg_family_level_change_notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void eg_family_level_change_notify::SharedCtor() {
  _cached_size_ = 0;
  family_level_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

eg_family_level_change_notify::~eg_family_level_change_notify() {
  SharedDtor();
}

void eg_family_level_change_notify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void eg_family_level_change_notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* eg_family_level_change_notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return eg_family_level_change_notify_descriptor_;
}

const eg_family_level_change_notify& eg_family_level_change_notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

eg_family_level_change_notify* eg_family_level_change_notify::default_instance_ = NULL;

eg_family_level_change_notify* eg_family_level_change_notify::New() const {
  return new eg_family_level_change_notify;
}

void eg_family_level_change_notify::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    family_level_ = 0u;
  }
  role_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool eg_family_level_change_notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint64 role_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 8, input, this->mutable_role_list())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_role_list())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_role_list;
        if (input->ExpectTag(16)) goto parse_family_level;
        break;
      }

      // optional uint32 family_level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_family_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &family_level_)));
          set_has_family_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void eg_family_level_change_notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint64 role_list = 1;
  for (int i = 0; i < this->role_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      1, this->role_list(i), output);
  }

  // optional uint32 family_level = 2;
  if (has_family_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->family_level(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* eg_family_level_change_notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint64 role_list = 1;
  for (int i = 0; i < this->role_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(1, this->role_list(i), target);
  }

  // optional uint32 family_level = 2;
  if (has_family_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->family_level(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int eg_family_level_change_notify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 family_level = 2;
    if (has_family_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->family_level());
    }

  }
  // repeated uint64 role_list = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->role_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->role_list(i));
    }
    total_size += 1 * this->role_list_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void eg_family_level_change_notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const eg_family_level_change_notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const eg_family_level_change_notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void eg_family_level_change_notify::MergeFrom(const eg_family_level_change_notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  role_list_.MergeFrom(from.role_list_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_family_level()) {
      set_family_level(from.family_level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void eg_family_level_change_notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void eg_family_level_change_notify::CopyFrom(const eg_family_level_change_notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool eg_family_level_change_notify::IsInitialized() const {

  return true;
}

void eg_family_level_change_notify::Swap(eg_family_level_change_notify* other) {
  if (other != this) {
    role_list_.Swap(&other->role_list_);
    std::swap(family_level_, other->family_level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata eg_family_level_change_notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = eg_family_level_change_notify_descriptor_;
  metadata.reflection = eg_family_level_change_notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ge_family_shop_buy_request::kIndexFieldNumber;
const int ge_family_shop_buy_request::kShopItemFieldNumber;
const int ge_family_shop_buy_request::kNumFieldNumber;
#endif  // !_MSC_VER

ge_family_shop_buy_request::ge_family_shop_buy_request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ge_family_shop_buy_request::InitAsDefaultInstance() {
}

ge_family_shop_buy_request::ge_family_shop_buy_request(const ge_family_shop_buy_request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ge_family_shop_buy_request::SharedCtor() {
  _cached_size_ = 0;
  index_ = 0u;
  shop_item_ = 0u;
  num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ge_family_shop_buy_request::~ge_family_shop_buy_request() {
  SharedDtor();
}

void ge_family_shop_buy_request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ge_family_shop_buy_request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ge_family_shop_buy_request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ge_family_shop_buy_request_descriptor_;
}

const ge_family_shop_buy_request& ge_family_shop_buy_request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

ge_family_shop_buy_request* ge_family_shop_buy_request::default_instance_ = NULL;

ge_family_shop_buy_request* ge_family_shop_buy_request::New() const {
  return new ge_family_shop_buy_request;
}

void ge_family_shop_buy_request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    index_ = 0u;
    shop_item_ = 0u;
    num_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ge_family_shop_buy_request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_shop_item;
        break;
      }

      // optional uint32 shop_item = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_shop_item:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &shop_item_)));
          set_has_shop_item();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_num;
        break;
      }

      // optional uint32 num = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ge_family_shop_buy_request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 index = 1;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->index(), output);
  }

  // optional uint32 shop_item = 2;
  if (has_shop_item()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->shop_item(), output);
  }

  // optional uint32 num = 3;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ge_family_shop_buy_request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 index = 1;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->index(), target);
  }

  // optional uint32 shop_item = 2;
  if (has_shop_item()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->shop_item(), target);
  }

  // optional uint32 num = 3;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ge_family_shop_buy_request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 index = 1;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->index());
    }

    // optional uint32 shop_item = 2;
    if (has_shop_item()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->shop_item());
    }

    // optional uint32 num = 3;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ge_family_shop_buy_request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ge_family_shop_buy_request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ge_family_shop_buy_request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ge_family_shop_buy_request::MergeFrom(const ge_family_shop_buy_request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_shop_item()) {
      set_shop_item(from.shop_item());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ge_family_shop_buy_request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ge_family_shop_buy_request::CopyFrom(const ge_family_shop_buy_request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ge_family_shop_buy_request::IsInitialized() const {

  return true;
}

void ge_family_shop_buy_request::Swap(ge_family_shop_buy_request* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    std::swap(shop_item_, other->shop_item_);
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ge_family_shop_buy_request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ge_family_shop_buy_request_descriptor_;
  metadata.reflection = ge_family_shop_buy_request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int eg_family_shop_buy_reply::kRefreshTimeFieldNumber;
const int eg_family_shop_buy_reply::kIndexFieldNumber;
const int eg_family_shop_buy_reply::kShopItemFieldNumber;
const int eg_family_shop_buy_reply::kNumFieldNumber;
const int eg_family_shop_buy_reply::kShopDataFieldNumber;
const int eg_family_shop_buy_reply::kPersonalDataFieldNumber;
#endif  // !_MSC_VER

eg_family_shop_buy_reply::eg_family_shop_buy_reply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void eg_family_shop_buy_reply::InitAsDefaultInstance() {
  shop_data_ = const_cast< ::proto::common::family_shop_data*>(&::proto::common::family_shop_data::default_instance());
  personal_data_ = const_cast< ::proto::common::family_shop_personal_data*>(&::proto::common::family_shop_personal_data::default_instance());
}

eg_family_shop_buy_reply::eg_family_shop_buy_reply(const eg_family_shop_buy_reply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void eg_family_shop_buy_reply::SharedCtor() {
  _cached_size_ = 0;
  refresh_time_ = 0u;
  index_ = 0u;
  shop_item_ = 0u;
  num_ = 0u;
  shop_data_ = NULL;
  personal_data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

eg_family_shop_buy_reply::~eg_family_shop_buy_reply() {
  SharedDtor();
}

void eg_family_shop_buy_reply::SharedDtor() {
  if (this != default_instance_) {
    delete shop_data_;
    delete personal_data_;
  }
}

void eg_family_shop_buy_reply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* eg_family_shop_buy_reply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return eg_family_shop_buy_reply_descriptor_;
}

const eg_family_shop_buy_reply& eg_family_shop_buy_reply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

eg_family_shop_buy_reply* eg_family_shop_buy_reply::default_instance_ = NULL;

eg_family_shop_buy_reply* eg_family_shop_buy_reply::New() const {
  return new eg_family_shop_buy_reply;
}

void eg_family_shop_buy_reply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    refresh_time_ = 0u;
    index_ = 0u;
    shop_item_ = 0u;
    num_ = 0u;
    if (has_shop_data()) {
      if (shop_data_ != NULL) shop_data_->::proto::common::family_shop_data::Clear();
    }
    if (has_personal_data()) {
      if (personal_data_ != NULL) personal_data_->::proto::common::family_shop_personal_data::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool eg_family_shop_buy_reply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 refresh_time = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &refresh_time_)));
          set_has_refresh_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_index;
        break;
      }

      // optional uint32 index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_shop_item;
        break;
      }

      // optional uint32 shop_item = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_shop_item:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &shop_item_)));
          set_has_shop_item();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_num;
        break;
      }

      // optional uint32 num = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_shop_data;
        break;
      }

      // optional .proto.common.family_shop_data shop_data = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_shop_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_shop_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_personal_data;
        break;
      }

      // optional .proto.common.family_shop_personal_data personal_data = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_personal_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_personal_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void eg_family_shop_buy_reply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 refresh_time = 1;
  if (has_refresh_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->refresh_time(), output);
  }

  // optional uint32 index = 2;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->index(), output);
  }

  // optional uint32 shop_item = 3;
  if (has_shop_item()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->shop_item(), output);
  }

  // optional uint32 num = 4;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->num(), output);
  }

  // optional .proto.common.family_shop_data shop_data = 5;
  if (has_shop_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->shop_data(), output);
  }

  // optional .proto.common.family_shop_personal_data personal_data = 6;
  if (has_personal_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->personal_data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* eg_family_shop_buy_reply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 refresh_time = 1;
  if (has_refresh_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->refresh_time(), target);
  }

  // optional uint32 index = 2;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->index(), target);
  }

  // optional uint32 shop_item = 3;
  if (has_shop_item()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->shop_item(), target);
  }

  // optional uint32 num = 4;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->num(), target);
  }

  // optional .proto.common.family_shop_data shop_data = 5;
  if (has_shop_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->shop_data(), target);
  }

  // optional .proto.common.family_shop_personal_data personal_data = 6;
  if (has_personal_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->personal_data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int eg_family_shop_buy_reply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 refresh_time = 1;
    if (has_refresh_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->refresh_time());
    }

    // optional uint32 index = 2;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->index());
    }

    // optional uint32 shop_item = 3;
    if (has_shop_item()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->shop_item());
    }

    // optional uint32 num = 4;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }

    // optional .proto.common.family_shop_data shop_data = 5;
    if (has_shop_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->shop_data());
    }

    // optional .proto.common.family_shop_personal_data personal_data = 6;
    if (has_personal_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->personal_data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void eg_family_shop_buy_reply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const eg_family_shop_buy_reply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const eg_family_shop_buy_reply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void eg_family_shop_buy_reply::MergeFrom(const eg_family_shop_buy_reply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_refresh_time()) {
      set_refresh_time(from.refresh_time());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_shop_item()) {
      set_shop_item(from.shop_item());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_shop_data()) {
      mutable_shop_data()->::proto::common::family_shop_data::MergeFrom(from.shop_data());
    }
    if (from.has_personal_data()) {
      mutable_personal_data()->::proto::common::family_shop_personal_data::MergeFrom(from.personal_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void eg_family_shop_buy_reply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void eg_family_shop_buy_reply::CopyFrom(const eg_family_shop_buy_reply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool eg_family_shop_buy_reply::IsInitialized() const {

  return true;
}

void eg_family_shop_buy_reply::Swap(eg_family_shop_buy_reply* other) {
  if (other != this) {
    std::swap(refresh_time_, other->refresh_time_);
    std::swap(index_, other->index_);
    std::swap(shop_item_, other->shop_item_);
    std::swap(num_, other->num_);
    std::swap(shop_data_, other->shop_data_);
    std::swap(personal_data_, other->personal_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata eg_family_shop_buy_reply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = eg_family_shop_buy_reply_descriptor_;
  metadata.reflection = eg_family_shop_buy_reply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ge_family_shop_back_notify::kRefreshTimeFieldNumber;
const int ge_family_shop_back_notify::kIndexFieldNumber;
const int ge_family_shop_back_notify::kNumFieldNumber;
#endif  // !_MSC_VER

ge_family_shop_back_notify::ge_family_shop_back_notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ge_family_shop_back_notify::InitAsDefaultInstance() {
}

ge_family_shop_back_notify::ge_family_shop_back_notify(const ge_family_shop_back_notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ge_family_shop_back_notify::SharedCtor() {
  _cached_size_ = 0;
  refresh_time_ = 0u;
  index_ = 0u;
  num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ge_family_shop_back_notify::~ge_family_shop_back_notify() {
  SharedDtor();
}

void ge_family_shop_back_notify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ge_family_shop_back_notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ge_family_shop_back_notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ge_family_shop_back_notify_descriptor_;
}

const ge_family_shop_back_notify& ge_family_shop_back_notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

ge_family_shop_back_notify* ge_family_shop_back_notify::default_instance_ = NULL;

ge_family_shop_back_notify* ge_family_shop_back_notify::New() const {
  return new ge_family_shop_back_notify;
}

void ge_family_shop_back_notify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    refresh_time_ = 0u;
    index_ = 0u;
    num_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ge_family_shop_back_notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 refresh_time = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &refresh_time_)));
          set_has_refresh_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_index;
        break;
      }

      // optional uint32 index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_num;
        break;
      }

      // optional uint32 num = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ge_family_shop_back_notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 refresh_time = 1;
  if (has_refresh_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->refresh_time(), output);
  }

  // optional uint32 index = 2;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->index(), output);
  }

  // optional uint32 num = 3;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ge_family_shop_back_notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 refresh_time = 1;
  if (has_refresh_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->refresh_time(), target);
  }

  // optional uint32 index = 2;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->index(), target);
  }

  // optional uint32 num = 3;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ge_family_shop_back_notify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 refresh_time = 1;
    if (has_refresh_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->refresh_time());
    }

    // optional uint32 index = 2;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->index());
    }

    // optional uint32 num = 3;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ge_family_shop_back_notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ge_family_shop_back_notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ge_family_shop_back_notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ge_family_shop_back_notify::MergeFrom(const ge_family_shop_back_notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_refresh_time()) {
      set_refresh_time(from.refresh_time());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ge_family_shop_back_notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ge_family_shop_back_notify::CopyFrom(const ge_family_shop_back_notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ge_family_shop_back_notify::IsInitialized() const {

  return true;
}

void ge_family_shop_back_notify::Swap(ge_family_shop_back_notify* other) {
  if (other != this) {
    std::swap(refresh_time_, other->refresh_time_);
    std::swap(index_, other->index_);
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ge_family_shop_back_notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ge_family_shop_back_notify_descriptor_;
  metadata.reflection = ge_family_shop_back_notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ge_gm_set_king_family_notify::kCountryIdFieldNumber;
const int ge_gm_set_king_family_notify::kFamilyUidFieldNumber;
#endif  // !_MSC_VER

ge_gm_set_king_family_notify::ge_gm_set_king_family_notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ge_gm_set_king_family_notify::InitAsDefaultInstance() {
}

ge_gm_set_king_family_notify::ge_gm_set_king_family_notify(const ge_gm_set_king_family_notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ge_gm_set_king_family_notify::SharedCtor() {
  _cached_size_ = 0;
  country_id_ = 0u;
  family_uid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ge_gm_set_king_family_notify::~ge_gm_set_king_family_notify() {
  SharedDtor();
}

void ge_gm_set_king_family_notify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ge_gm_set_king_family_notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ge_gm_set_king_family_notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ge_gm_set_king_family_notify_descriptor_;
}

const ge_gm_set_king_family_notify& ge_gm_set_king_family_notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

ge_gm_set_king_family_notify* ge_gm_set_king_family_notify::default_instance_ = NULL;

ge_gm_set_king_family_notify* ge_gm_set_king_family_notify::New() const {
  return new ge_gm_set_king_family_notify;
}

void ge_gm_set_king_family_notify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    country_id_ = 0u;
    family_uid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ge_gm_set_king_family_notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 country_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &country_id_)));
          set_has_country_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_family_uid;
        break;
      }

      // optional uint64 family_uid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_family_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &family_uid_)));
          set_has_family_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ge_gm_set_king_family_notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 country_id = 1;
  if (has_country_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->country_id(), output);
  }

  // optional uint64 family_uid = 2;
  if (has_family_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->family_uid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ge_gm_set_king_family_notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 country_id = 1;
  if (has_country_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->country_id(), target);
  }

  // optional uint64 family_uid = 2;
  if (has_family_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->family_uid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ge_gm_set_king_family_notify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 country_id = 1;
    if (has_country_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->country_id());
    }

    // optional uint64 family_uid = 2;
    if (has_family_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->family_uid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ge_gm_set_king_family_notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ge_gm_set_king_family_notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ge_gm_set_king_family_notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ge_gm_set_king_family_notify::MergeFrom(const ge_gm_set_king_family_notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_country_id()) {
      set_country_id(from.country_id());
    }
    if (from.has_family_uid()) {
      set_family_uid(from.family_uid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ge_gm_set_king_family_notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ge_gm_set_king_family_notify::CopyFrom(const ge_gm_set_king_family_notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ge_gm_set_king_family_notify::IsInitialized() const {

  return true;
}

void ge_gm_set_king_family_notify::Swap(ge_gm_set_king_family_notify* other) {
  if (other != this) {
    std::swap(country_id_, other->country_id_);
    std::swap(family_uid_, other->family_uid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ge_gm_set_king_family_notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ge_gm_set_king_family_notify_descriptor_;
  metadata.reflection = ge_gm_set_king_family_notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int eg_update_country_notify::kCountriesFieldNumber;
#endif  // !_MSC_VER

eg_update_country_notify::eg_update_country_notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void eg_update_country_notify::InitAsDefaultInstance() {
}

eg_update_country_notify::eg_update_country_notify(const eg_update_country_notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void eg_update_country_notify::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

eg_update_country_notify::~eg_update_country_notify() {
  SharedDtor();
}

void eg_update_country_notify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void eg_update_country_notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* eg_update_country_notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return eg_update_country_notify_descriptor_;
}

const eg_update_country_notify& eg_update_country_notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

eg_update_country_notify* eg_update_country_notify::default_instance_ = NULL;

eg_update_country_notify* eg_update_country_notify::New() const {
  return new eg_update_country_notify;
}

void eg_update_country_notify::Clear() {
  countries_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool eg_update_country_notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.common.country_common countries = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_countries:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_countries()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_countries;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void eg_update_country_notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto.common.country_common countries = 1;
  for (int i = 0; i < this->countries_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->countries(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* eg_update_country_notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto.common.country_common countries = 1;
  for (int i = 0; i < this->countries_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->countries(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int eg_update_country_notify::ByteSize() const {
  int total_size = 0;

  // repeated .proto.common.country_common countries = 1;
  total_size += 1 * this->countries_size();
  for (int i = 0; i < this->countries_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->countries(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void eg_update_country_notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const eg_update_country_notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const eg_update_country_notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void eg_update_country_notify::MergeFrom(const eg_update_country_notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  countries_.MergeFrom(from.countries_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void eg_update_country_notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void eg_update_country_notify::CopyFrom(const eg_update_country_notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool eg_update_country_notify::IsInitialized() const {

  return true;
}

void eg_update_country_notify::Swap(eg_update_country_notify* other) {
  if (other != this) {
    countries_.Swap(&other->countries_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata eg_update_country_notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = eg_update_country_notify_descriptor_;
  metadata.reflection = eg_update_country_notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int eg_country_name_change_request::kNameFieldNumber;
const int eg_country_name_change_request::kFlagIdFieldNumber;
#endif  // !_MSC_VER

eg_country_name_change_request::eg_country_name_change_request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void eg_country_name_change_request::InitAsDefaultInstance() {
}

eg_country_name_change_request::eg_country_name_change_request(const eg_country_name_change_request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void eg_country_name_change_request::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  flag_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

eg_country_name_change_request::~eg_country_name_change_request() {
  SharedDtor();
}

void eg_country_name_change_request::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void eg_country_name_change_request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* eg_country_name_change_request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return eg_country_name_change_request_descriptor_;
}

const eg_country_name_change_request& eg_country_name_change_request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

eg_country_name_change_request* eg_country_name_change_request::default_instance_ = NULL;

eg_country_name_change_request* eg_country_name_change_request::New() const {
  return new eg_country_name_change_request;
}

void eg_country_name_change_request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    flag_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool eg_country_name_change_request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_flag_id;
        break;
      }

      // optional uint32 flag_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flag_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flag_id_)));
          set_has_flag_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void eg_country_name_change_request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // optional uint32 flag_id = 2;
  if (has_flag_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->flag_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* eg_country_name_change_request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional uint32 flag_id = 2;
  if (has_flag_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->flag_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int eg_country_name_change_request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 flag_id = 2;
    if (has_flag_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flag_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void eg_country_name_change_request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const eg_country_name_change_request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const eg_country_name_change_request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void eg_country_name_change_request::MergeFrom(const eg_country_name_change_request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_flag_id()) {
      set_flag_id(from.flag_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void eg_country_name_change_request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void eg_country_name_change_request::CopyFrom(const eg_country_name_change_request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool eg_country_name_change_request::IsInitialized() const {

  return true;
}

void eg_country_name_change_request::Swap(eg_country_name_change_request* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(flag_id_, other->flag_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata eg_country_name_change_request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = eg_country_name_change_request_descriptor_;
  metadata.reflection = eg_country_name_change_request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ge_country_name_change_reply::kReplyCodeFieldNumber;
const int ge_country_name_change_reply::kNameFieldNumber;
const int ge_country_name_change_reply::kFlagIdFieldNumber;
const int ge_country_name_change_reply::kChangeDataFieldNumber;
#endif  // !_MSC_VER

ge_country_name_change_reply::ge_country_name_change_reply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ge_country_name_change_reply::InitAsDefaultInstance() {
  change_data_ = const_cast< ::proto::common::role_change_data*>(&::proto::common::role_change_data::default_instance());
}

ge_country_name_change_reply::ge_country_name_change_reply(const ge_country_name_change_reply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ge_country_name_change_reply::SharedCtor() {
  _cached_size_ = 0;
  reply_code_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  flag_id_ = 0u;
  change_data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ge_country_name_change_reply::~ge_country_name_change_reply() {
  SharedDtor();
}

void ge_country_name_change_reply::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
    delete change_data_;
  }
}

void ge_country_name_change_reply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ge_country_name_change_reply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ge_country_name_change_reply_descriptor_;
}

const ge_country_name_change_reply& ge_country_name_change_reply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

ge_country_name_change_reply* ge_country_name_change_reply::default_instance_ = NULL;

ge_country_name_change_reply* ge_country_name_change_reply::New() const {
  return new ge_country_name_change_reply;
}

void ge_country_name_change_reply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    reply_code_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    flag_id_ = 0u;
    if (has_change_data()) {
      if (change_data_ != NULL) change_data_->::proto::common::role_change_data::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ge_country_name_change_reply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 reply_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reply_code_)));
          set_has_reply_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_flag_id;
        break;
      }

      // optional uint32 flag_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flag_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flag_id_)));
          set_has_flag_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_change_data;
        break;
      }

      // optional .proto.common.role_change_data change_data = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_change_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_change_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ge_country_name_change_reply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 reply_code = 1;
  if (has_reply_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->reply_code(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // optional uint32 flag_id = 3;
  if (has_flag_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->flag_id(), output);
  }

  // optional .proto.common.role_change_data change_data = 4;
  if (has_change_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->change_data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ge_country_name_change_reply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 reply_code = 1;
  if (has_reply_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->reply_code(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional uint32 flag_id = 3;
  if (has_flag_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->flag_id(), target);
  }

  // optional .proto.common.role_change_data change_data = 4;
  if (has_change_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->change_data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ge_country_name_change_reply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 reply_code = 1;
    if (has_reply_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reply_code());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 flag_id = 3;
    if (has_flag_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flag_id());
    }

    // optional .proto.common.role_change_data change_data = 4;
    if (has_change_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->change_data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ge_country_name_change_reply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ge_country_name_change_reply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ge_country_name_change_reply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ge_country_name_change_reply::MergeFrom(const ge_country_name_change_reply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reply_code()) {
      set_reply_code(from.reply_code());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_flag_id()) {
      set_flag_id(from.flag_id());
    }
    if (from.has_change_data()) {
      mutable_change_data()->::proto::common::role_change_data::MergeFrom(from.change_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ge_country_name_change_reply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ge_country_name_change_reply::CopyFrom(const ge_country_name_change_reply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ge_country_name_change_reply::IsInitialized() const {

  return true;
}

void ge_country_name_change_reply::Swap(ge_country_name_change_reply* other) {
  if (other != this) {
    std::swap(reply_code_, other->reply_code_);
    std::swap(name_, other->name_);
    std::swap(flag_id_, other->flag_id_);
    std::swap(change_data_, other->change_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ge_country_name_change_reply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ge_country_name_change_reply_descriptor_;
  metadata.reflection = ge_country_name_change_reply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int eg_country_year_name_request::kNameFieldNumber;
#endif  // !_MSC_VER

eg_country_year_name_request::eg_country_year_name_request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void eg_country_year_name_request::InitAsDefaultInstance() {
}

eg_country_year_name_request::eg_country_year_name_request(const eg_country_year_name_request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void eg_country_year_name_request::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

eg_country_year_name_request::~eg_country_year_name_request() {
  SharedDtor();
}

void eg_country_year_name_request::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void eg_country_year_name_request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* eg_country_year_name_request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return eg_country_year_name_request_descriptor_;
}

const eg_country_year_name_request& eg_country_year_name_request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

eg_country_year_name_request* eg_country_year_name_request::default_instance_ = NULL;

eg_country_year_name_request* eg_country_year_name_request::New() const {
  return new eg_country_year_name_request;
}

void eg_country_year_name_request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool eg_country_year_name_request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void eg_country_year_name_request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* eg_country_year_name_request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int eg_country_year_name_request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void eg_country_year_name_request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const eg_country_year_name_request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const eg_country_year_name_request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void eg_country_year_name_request::MergeFrom(const eg_country_year_name_request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void eg_country_year_name_request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void eg_country_year_name_request::CopyFrom(const eg_country_year_name_request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool eg_country_year_name_request::IsInitialized() const {

  return true;
}

void eg_country_year_name_request::Swap(eg_country_year_name_request* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata eg_country_year_name_request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = eg_country_year_name_request_descriptor_;
  metadata.reflection = eg_country_year_name_request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ge_country_year_name_reply::kReplyCodeFieldNumber;
const int ge_country_year_name_reply::kNameFieldNumber;
const int ge_country_year_name_reply::kChangeDataFieldNumber;
#endif  // !_MSC_VER

ge_country_year_name_reply::ge_country_year_name_reply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ge_country_year_name_reply::InitAsDefaultInstance() {
  change_data_ = const_cast< ::proto::common::role_change_data*>(&::proto::common::role_change_data::default_instance());
}

ge_country_year_name_reply::ge_country_year_name_reply(const ge_country_year_name_reply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ge_country_year_name_reply::SharedCtor() {
  _cached_size_ = 0;
  reply_code_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  change_data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ge_country_year_name_reply::~ge_country_year_name_reply() {
  SharedDtor();
}

void ge_country_year_name_reply::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
    delete change_data_;
  }
}

void ge_country_year_name_reply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ge_country_year_name_reply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ge_country_year_name_reply_descriptor_;
}

const ge_country_year_name_reply& ge_country_year_name_reply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

ge_country_year_name_reply* ge_country_year_name_reply::default_instance_ = NULL;

ge_country_year_name_reply* ge_country_year_name_reply::New() const {
  return new ge_country_year_name_reply;
}

void ge_country_year_name_reply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    reply_code_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_change_data()) {
      if (change_data_ != NULL) change_data_->::proto::common::role_change_data::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ge_country_year_name_reply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 reply_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reply_code_)));
          set_has_reply_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_change_data;
        break;
      }

      // optional .proto.common.role_change_data change_data = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_change_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_change_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ge_country_year_name_reply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 reply_code = 1;
  if (has_reply_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->reply_code(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // optional .proto.common.role_change_data change_data = 3;
  if (has_change_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->change_data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ge_country_year_name_reply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 reply_code = 1;
  if (has_reply_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->reply_code(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional .proto.common.role_change_data change_data = 3;
  if (has_change_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->change_data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ge_country_year_name_reply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 reply_code = 1;
    if (has_reply_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reply_code());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional .proto.common.role_change_data change_data = 3;
    if (has_change_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->change_data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ge_country_year_name_reply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ge_country_year_name_reply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ge_country_year_name_reply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ge_country_year_name_reply::MergeFrom(const ge_country_year_name_reply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reply_code()) {
      set_reply_code(from.reply_code());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_change_data()) {
      mutable_change_data()->::proto::common::role_change_data::MergeFrom(from.change_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ge_country_year_name_reply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ge_country_year_name_reply::CopyFrom(const ge_country_year_name_reply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ge_country_year_name_reply::IsInitialized() const {

  return true;
}

void ge_country_year_name_reply::Swap(ge_country_year_name_reply* other) {
  if (other != this) {
    std::swap(reply_code_, other->reply_code_);
    std::swap(name_, other->name_);
    std::swap(change_data_, other->change_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ge_country_year_name_reply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ge_country_year_name_reply_descriptor_;
  metadata.reflection = ge_country_year_name_reply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int eg_sync_data_request::kItemsFieldNumber;
#endif  // !_MSC_VER

eg_sync_data_request::eg_sync_data_request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void eg_sync_data_request::InitAsDefaultInstance() {
}

eg_sync_data_request::eg_sync_data_request(const eg_sync_data_request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void eg_sync_data_request::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

eg_sync_data_request::~eg_sync_data_request() {
  SharedDtor();
}

void eg_sync_data_request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void eg_sync_data_request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* eg_sync_data_request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return eg_sync_data_request_descriptor_;
}

const eg_sync_data_request& eg_sync_data_request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

eg_sync_data_request* eg_sync_data_request::default_instance_ = NULL;

eg_sync_data_request* eg_sync_data_request::New() const {
  return new eg_sync_data_request;
}

void eg_sync_data_request::Clear() {
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool eg_sync_data_request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.server.data_sync_item items = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_items;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void eg_sync_data_request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto.server.data_sync_item items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->items(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* eg_sync_data_request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto.server.data_sync_item items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->items(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int eg_sync_data_request::ByteSize() const {
  int total_size = 0;

  // repeated .proto.server.data_sync_item items = 1;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void eg_sync_data_request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const eg_sync_data_request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const eg_sync_data_request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void eg_sync_data_request::MergeFrom(const eg_sync_data_request& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void eg_sync_data_request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void eg_sync_data_request::CopyFrom(const eg_sync_data_request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool eg_sync_data_request::IsInitialized() const {

  return true;
}

void eg_sync_data_request::Swap(eg_sync_data_request* other) {
  if (other != this) {
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata eg_sync_data_request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = eg_sync_data_request_descriptor_;
  metadata.reflection = eg_sync_data_request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ge_sync_data_request::kItemsFieldNumber;
#endif  // !_MSC_VER

ge_sync_data_request::ge_sync_data_request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ge_sync_data_request::InitAsDefaultInstance() {
}

ge_sync_data_request::ge_sync_data_request(const ge_sync_data_request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ge_sync_data_request::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ge_sync_data_request::~ge_sync_data_request() {
  SharedDtor();
}

void ge_sync_data_request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ge_sync_data_request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ge_sync_data_request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ge_sync_data_request_descriptor_;
}

const ge_sync_data_request& ge_sync_data_request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

ge_sync_data_request* ge_sync_data_request::default_instance_ = NULL;

ge_sync_data_request* ge_sync_data_request::New() const {
  return new ge_sync_data_request;
}

void ge_sync_data_request::Clear() {
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ge_sync_data_request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.server.data_sync_item items = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_items;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ge_sync_data_request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto.server.data_sync_item items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->items(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ge_sync_data_request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto.server.data_sync_item items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->items(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ge_sync_data_request::ByteSize() const {
  int total_size = 0;

  // repeated .proto.server.data_sync_item items = 1;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ge_sync_data_request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ge_sync_data_request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ge_sync_data_request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ge_sync_data_request::MergeFrom(const ge_sync_data_request& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ge_sync_data_request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ge_sync_data_request::CopyFrom(const ge_sync_data_request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ge_sync_data_request::IsInitialized() const {

  return true;
}

void ge_sync_data_request::Swap(ge_sync_data_request* other) {
  if (other != this) {
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ge_sync_data_request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ge_sync_data_request_descriptor_;
  metadata.reflection = ge_sync_data_request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

ge_ready_enter_scene_notify::ge_ready_enter_scene_notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ge_ready_enter_scene_notify::InitAsDefaultInstance() {
}

ge_ready_enter_scene_notify::ge_ready_enter_scene_notify(const ge_ready_enter_scene_notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ge_ready_enter_scene_notify::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ge_ready_enter_scene_notify::~ge_ready_enter_scene_notify() {
  SharedDtor();
}

void ge_ready_enter_scene_notify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ge_ready_enter_scene_notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ge_ready_enter_scene_notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ge_ready_enter_scene_notify_descriptor_;
}

const ge_ready_enter_scene_notify& ge_ready_enter_scene_notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

ge_ready_enter_scene_notify* ge_ready_enter_scene_notify::default_instance_ = NULL;

ge_ready_enter_scene_notify* ge_ready_enter_scene_notify::New() const {
  return new ge_ready_enter_scene_notify;
}

void ge_ready_enter_scene_notify::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ge_ready_enter_scene_notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void ge_ready_enter_scene_notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ge_ready_enter_scene_notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ge_ready_enter_scene_notify::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ge_ready_enter_scene_notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ge_ready_enter_scene_notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ge_ready_enter_scene_notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ge_ready_enter_scene_notify::MergeFrom(const ge_ready_enter_scene_notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ge_ready_enter_scene_notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ge_ready_enter_scene_notify::CopyFrom(const ge_ready_enter_scene_notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ge_ready_enter_scene_notify::IsInitialized() const {

  return true;
}

void ge_ready_enter_scene_notify::Swap(ge_ready_enter_scene_notify* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ge_ready_enter_scene_notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ge_ready_enter_scene_notify_descriptor_;
  metadata.reflection = ge_ready_enter_scene_notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int eg_summon_field_boss_request::kIdFieldNumber;
const int eg_summon_field_boss_request::kSceneIdFieldNumber;
const int eg_summon_field_boss_request::kObjectIdFieldNumber;
const int eg_summon_field_boss_request::kMonsterIdFieldNumber;
const int eg_summon_field_boss_request::kPosXFieldNumber;
const int eg_summon_field_boss_request::kPosYFieldNumber;
const int eg_summon_field_boss_request::kDirFieldNumber;
#endif  // !_MSC_VER

eg_summon_field_boss_request::eg_summon_field_boss_request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void eg_summon_field_boss_request::InitAsDefaultInstance() {
}

eg_summon_field_boss_request::eg_summon_field_boss_request(const eg_summon_field_boss_request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void eg_summon_field_boss_request::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  scene_id_ = GOOGLE_ULONGLONG(0);
  object_id_ = GOOGLE_ULONGLONG(0);
  monster_id_ = 0u;
  pos_x_ = 0u;
  pos_y_ = 0u;
  dir_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

eg_summon_field_boss_request::~eg_summon_field_boss_request() {
  SharedDtor();
}

void eg_summon_field_boss_request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void eg_summon_field_boss_request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* eg_summon_field_boss_request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return eg_summon_field_boss_request_descriptor_;
}

const eg_summon_field_boss_request& eg_summon_field_boss_request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

eg_summon_field_boss_request* eg_summon_field_boss_request::default_instance_ = NULL;

eg_summon_field_boss_request* eg_summon_field_boss_request::New() const {
  return new eg_summon_field_boss_request;
}

void eg_summon_field_boss_request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    scene_id_ = GOOGLE_ULONGLONG(0);
    object_id_ = GOOGLE_ULONGLONG(0);
    monster_id_ = 0u;
    pos_x_ = 0u;
    pos_y_ = 0u;
    dir_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool eg_summon_field_boss_request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_scene_id;
        break;
      }

      // optional uint64 scene_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scene_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &scene_id_)));
          set_has_scene_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_object_id;
        break;
      }

      // optional uint64 object_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_object_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &object_id_)));
          set_has_object_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_monster_id;
        break;
      }

      // optional uint32 monster_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_monster_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &monster_id_)));
          set_has_monster_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_pos_x;
        break;
      }

      // optional uint32 pos_x = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pos_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pos_x_)));
          set_has_pos_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_pos_y;
        break;
      }

      // optional uint32 pos_y = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pos_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pos_y_)));
          set_has_pos_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_dir;
        break;
      }

      // optional uint32 dir = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dir:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dir_)));
          set_has_dir();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void eg_summon_field_boss_request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional uint64 scene_id = 2;
  if (has_scene_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->scene_id(), output);
  }

  // optional uint64 object_id = 3;
  if (has_object_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->object_id(), output);
  }

  // optional uint32 monster_id = 4;
  if (has_monster_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->monster_id(), output);
  }

  // optional uint32 pos_x = 5;
  if (has_pos_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->pos_x(), output);
  }

  // optional uint32 pos_y = 6;
  if (has_pos_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->pos_y(), output);
  }

  // optional uint32 dir = 7;
  if (has_dir()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->dir(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* eg_summon_field_boss_request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional uint64 scene_id = 2;
  if (has_scene_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->scene_id(), target);
  }

  // optional uint64 object_id = 3;
  if (has_object_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->object_id(), target);
  }

  // optional uint32 monster_id = 4;
  if (has_monster_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->monster_id(), target);
  }

  // optional uint32 pos_x = 5;
  if (has_pos_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->pos_x(), target);
  }

  // optional uint32 pos_y = 6;
  if (has_pos_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->pos_y(), target);
  }

  // optional uint32 dir = 7;
  if (has_dir()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->dir(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int eg_summon_field_boss_request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint64 scene_id = 2;
    if (has_scene_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->scene_id());
    }

    // optional uint64 object_id = 3;
    if (has_object_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->object_id());
    }

    // optional uint32 monster_id = 4;
    if (has_monster_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->monster_id());
    }

    // optional uint32 pos_x = 5;
    if (has_pos_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pos_x());
    }

    // optional uint32 pos_y = 6;
    if (has_pos_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pos_y());
    }

    // optional uint32 dir = 7;
    if (has_dir()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dir());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void eg_summon_field_boss_request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const eg_summon_field_boss_request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const eg_summon_field_boss_request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void eg_summon_field_boss_request::MergeFrom(const eg_summon_field_boss_request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_scene_id()) {
      set_scene_id(from.scene_id());
    }
    if (from.has_object_id()) {
      set_object_id(from.object_id());
    }
    if (from.has_monster_id()) {
      set_monster_id(from.monster_id());
    }
    if (from.has_pos_x()) {
      set_pos_x(from.pos_x());
    }
    if (from.has_pos_y()) {
      set_pos_y(from.pos_y());
    }
    if (from.has_dir()) {
      set_dir(from.dir());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void eg_summon_field_boss_request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void eg_summon_field_boss_request::CopyFrom(const eg_summon_field_boss_request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool eg_summon_field_boss_request::IsInitialized() const {

  return true;
}

void eg_summon_field_boss_request::Swap(eg_summon_field_boss_request* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(scene_id_, other->scene_id_);
    std::swap(object_id_, other->object_id_);
    std::swap(monster_id_, other->monster_id_);
    std::swap(pos_x_, other->pos_x_);
    std::swap(pos_y_, other->pos_y_);
    std::swap(dir_, other->dir_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata eg_summon_field_boss_request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = eg_summon_field_boss_request_descriptor_;
  metadata.reflection = eg_summon_field_boss_request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int eg_field_boss_die_notify::kObjectIdFieldNumber;
const int eg_field_boss_die_notify::kModeFieldNumber;
#endif  // !_MSC_VER

eg_field_boss_die_notify::eg_field_boss_die_notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void eg_field_boss_die_notify::InitAsDefaultInstance() {
}

eg_field_boss_die_notify::eg_field_boss_die_notify(const eg_field_boss_die_notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void eg_field_boss_die_notify::SharedCtor() {
  _cached_size_ = 0;
  object_id_ = GOOGLE_ULONGLONG(0);
  mode_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

eg_field_boss_die_notify::~eg_field_boss_die_notify() {
  SharedDtor();
}

void eg_field_boss_die_notify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void eg_field_boss_die_notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* eg_field_boss_die_notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return eg_field_boss_die_notify_descriptor_;
}

const eg_field_boss_die_notify& eg_field_boss_die_notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

eg_field_boss_die_notify* eg_field_boss_die_notify::default_instance_ = NULL;

eg_field_boss_die_notify* eg_field_boss_die_notify::New() const {
  return new eg_field_boss_die_notify;
}

void eg_field_boss_die_notify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    object_id_ = GOOGLE_ULONGLONG(0);
    mode_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool eg_field_boss_die_notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 object_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &object_id_)));
          set_has_object_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_mode;
        break;
      }

      // optional .proto.server.EM_FIELD_MODE mode = 2 [default = FIELD_BOSS_NONE];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mode:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::server::EM_FIELD_MODE_IsValid(value)) {
            set_mode(static_cast< ::proto::server::EM_FIELD_MODE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void eg_field_boss_die_notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 object_id = 1;
  if (has_object_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->object_id(), output);
  }

  // optional .proto.server.EM_FIELD_MODE mode = 2 [default = FIELD_BOSS_NONE];
  if (has_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->mode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* eg_field_boss_die_notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 object_id = 1;
  if (has_object_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->object_id(), target);
  }

  // optional .proto.server.EM_FIELD_MODE mode = 2 [default = FIELD_BOSS_NONE];
  if (has_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->mode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int eg_field_boss_die_notify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 object_id = 1;
    if (has_object_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->object_id());
    }

    // optional .proto.server.EM_FIELD_MODE mode = 2 [default = FIELD_BOSS_NONE];
    if (has_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->mode());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void eg_field_boss_die_notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const eg_field_boss_die_notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const eg_field_boss_die_notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void eg_field_boss_die_notify::MergeFrom(const eg_field_boss_die_notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_object_id()) {
      set_object_id(from.object_id());
    }
    if (from.has_mode()) {
      set_mode(from.mode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void eg_field_boss_die_notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void eg_field_boss_die_notify::CopyFrom(const eg_field_boss_die_notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool eg_field_boss_die_notify::IsInitialized() const {

  return true;
}

void eg_field_boss_die_notify::Swap(eg_field_boss_die_notify* other) {
  if (other != this) {
    std::swap(object_id_, other->object_id_);
    std::swap(mode_, other->mode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata eg_field_boss_die_notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = eg_field_boss_die_notify_descriptor_;
  metadata.reflection = eg_field_boss_die_notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ge_summon_field_boss_replay::kReplyCodeFieldNumber;
const int ge_summon_field_boss_replay::kIdFieldNumber;
const int ge_summon_field_boss_replay::kObjectIdFieldNumber;
#endif  // !_MSC_VER

ge_summon_field_boss_replay::ge_summon_field_boss_replay()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ge_summon_field_boss_replay::InitAsDefaultInstance() {
}

ge_summon_field_boss_replay::ge_summon_field_boss_replay(const ge_summon_field_boss_replay& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ge_summon_field_boss_replay::SharedCtor() {
  _cached_size_ = 0;
  reply_code_ = 0u;
  id_ = 0u;
  object_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ge_summon_field_boss_replay::~ge_summon_field_boss_replay() {
  SharedDtor();
}

void ge_summon_field_boss_replay::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ge_summon_field_boss_replay::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ge_summon_field_boss_replay::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ge_summon_field_boss_replay_descriptor_;
}

const ge_summon_field_boss_replay& ge_summon_field_boss_replay::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

ge_summon_field_boss_replay* ge_summon_field_boss_replay::default_instance_ = NULL;

ge_summon_field_boss_replay* ge_summon_field_boss_replay::New() const {
  return new ge_summon_field_boss_replay;
}

void ge_summon_field_boss_replay::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    reply_code_ = 0u;
    id_ = 0u;
    object_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ge_summon_field_boss_replay::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 reply_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reply_code_)));
          set_has_reply_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional uint32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_object_id;
        break;
      }

      // optional uint64 object_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_object_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &object_id_)));
          set_has_object_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ge_summon_field_boss_replay::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 reply_code = 1;
  if (has_reply_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->reply_code(), output);
  }

  // optional uint32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->id(), output);
  }

  // optional uint64 object_id = 3;
  if (has_object_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->object_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ge_summon_field_boss_replay::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 reply_code = 1;
  if (has_reply_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->reply_code(), target);
  }

  // optional uint32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->id(), target);
  }

  // optional uint64 object_id = 3;
  if (has_object_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->object_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ge_summon_field_boss_replay::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 reply_code = 1;
    if (has_reply_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reply_code());
    }

    // optional uint32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint64 object_id = 3;
    if (has_object_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->object_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ge_summon_field_boss_replay::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ge_summon_field_boss_replay* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ge_summon_field_boss_replay*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ge_summon_field_boss_replay::MergeFrom(const ge_summon_field_boss_replay& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reply_code()) {
      set_reply_code(from.reply_code());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_object_id()) {
      set_object_id(from.object_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ge_summon_field_boss_replay::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ge_summon_field_boss_replay::CopyFrom(const ge_summon_field_boss_replay& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ge_summon_field_boss_replay::IsInitialized() const {

  return true;
}

void ge_summon_field_boss_replay::Swap(ge_summon_field_boss_replay* other) {
  if (other != this) {
    std::swap(reply_code_, other->reply_code_);
    std::swap(id_, other->id_);
    std::swap(object_id_, other->object_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ge_summon_field_boss_replay::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ge_summon_field_boss_replay_descriptor_;
  metadata.reflection = ge_summon_field_boss_replay_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int eg_clear_all_boss_notify::kObjectIdsFieldNumber;
#endif  // !_MSC_VER

eg_clear_all_boss_notify::eg_clear_all_boss_notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void eg_clear_all_boss_notify::InitAsDefaultInstance() {
}

eg_clear_all_boss_notify::eg_clear_all_boss_notify(const eg_clear_all_boss_notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void eg_clear_all_boss_notify::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

eg_clear_all_boss_notify::~eg_clear_all_boss_notify() {
  SharedDtor();
}

void eg_clear_all_boss_notify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void eg_clear_all_boss_notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* eg_clear_all_boss_notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return eg_clear_all_boss_notify_descriptor_;
}

const eg_clear_all_boss_notify& eg_clear_all_boss_notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

eg_clear_all_boss_notify* eg_clear_all_boss_notify::default_instance_ = NULL;

eg_clear_all_boss_notify* eg_clear_all_boss_notify::New() const {
  return new eg_clear_all_boss_notify;
}

void eg_clear_all_boss_notify::Clear() {
  object_ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool eg_clear_all_boss_notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint64 object_ids = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_object_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 8, input, this->mutable_object_ids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_object_ids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_object_ids;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void eg_clear_all_boss_notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint64 object_ids = 1;
  for (int i = 0; i < this->object_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      1, this->object_ids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* eg_clear_all_boss_notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint64 object_ids = 1;
  for (int i = 0; i < this->object_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(1, this->object_ids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int eg_clear_all_boss_notify::ByteSize() const {
  int total_size = 0;

  // repeated uint64 object_ids = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->object_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->object_ids(i));
    }
    total_size += 1 * this->object_ids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void eg_clear_all_boss_notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const eg_clear_all_boss_notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const eg_clear_all_boss_notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void eg_clear_all_boss_notify::MergeFrom(const eg_clear_all_boss_notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  object_ids_.MergeFrom(from.object_ids_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void eg_clear_all_boss_notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void eg_clear_all_boss_notify::CopyFrom(const eg_clear_all_boss_notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool eg_clear_all_boss_notify::IsInitialized() const {

  return true;
}

void eg_clear_all_boss_notify::Swap(eg_clear_all_boss_notify* other) {
  if (other != this) {
    object_ids_.Swap(&other->object_ids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata eg_clear_all_boss_notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = eg_clear_all_boss_notify_descriptor_;
  metadata.reflection = eg_clear_all_boss_notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ge_field_boss_killed_notify::kIdFieldNumber;
const int ge_field_boss_killed_notify::kObjectIdFieldNumber;
const int ge_field_boss_killed_notify::kKillerNameFieldNumber;
#endif  // !_MSC_VER

ge_field_boss_killed_notify::ge_field_boss_killed_notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ge_field_boss_killed_notify::InitAsDefaultInstance() {
}

ge_field_boss_killed_notify::ge_field_boss_killed_notify(const ge_field_boss_killed_notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ge_field_boss_killed_notify::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  object_id_ = GOOGLE_ULONGLONG(0);
  killer_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ge_field_boss_killed_notify::~ge_field_boss_killed_notify() {
  SharedDtor();
}

void ge_field_boss_killed_notify::SharedDtor() {
  if (killer_name_ != &::google::protobuf::internal::kEmptyString) {
    delete killer_name_;
  }
  if (this != default_instance_) {
  }
}

void ge_field_boss_killed_notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ge_field_boss_killed_notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ge_field_boss_killed_notify_descriptor_;
}

const ge_field_boss_killed_notify& ge_field_boss_killed_notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

ge_field_boss_killed_notify* ge_field_boss_killed_notify::default_instance_ = NULL;

ge_field_boss_killed_notify* ge_field_boss_killed_notify::New() const {
  return new ge_field_boss_killed_notify;
}

void ge_field_boss_killed_notify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    object_id_ = GOOGLE_ULONGLONG(0);
    if (has_killer_name()) {
      if (killer_name_ != &::google::protobuf::internal::kEmptyString) {
        killer_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ge_field_boss_killed_notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_object_id;
        break;
      }

      // optional uint64 object_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_object_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &object_id_)));
          set_has_object_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_killer_name;
        break;
      }

      // optional string killer_name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_killer_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_killer_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->killer_name().data(), this->killer_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ge_field_boss_killed_notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional uint64 object_id = 2;
  if (has_object_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->object_id(), output);
  }

  // optional string killer_name = 4;
  if (has_killer_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->killer_name().data(), this->killer_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->killer_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ge_field_boss_killed_notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional uint64 object_id = 2;
  if (has_object_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->object_id(), target);
  }

  // optional string killer_name = 4;
  if (has_killer_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->killer_name().data(), this->killer_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->killer_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ge_field_boss_killed_notify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint64 object_id = 2;
    if (has_object_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->object_id());
    }

    // optional string killer_name = 4;
    if (has_killer_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->killer_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ge_field_boss_killed_notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ge_field_boss_killed_notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ge_field_boss_killed_notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ge_field_boss_killed_notify::MergeFrom(const ge_field_boss_killed_notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_object_id()) {
      set_object_id(from.object_id());
    }
    if (from.has_killer_name()) {
      set_killer_name(from.killer_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ge_field_boss_killed_notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ge_field_boss_killed_notify::CopyFrom(const ge_field_boss_killed_notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ge_field_boss_killed_notify::IsInitialized() const {

  return true;
}

void ge_field_boss_killed_notify::Swap(ge_field_boss_killed_notify* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(object_id_, other->object_id_);
    std::swap(killer_name_, other->killer_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ge_field_boss_killed_notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ge_field_boss_killed_notify_descriptor_;
  metadata.reflection = ge_field_boss_killed_notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int field_boss_rank::kRankIdFieldNumber;
const int field_boss_rank::kUidsFieldNumber;
#endif  // !_MSC_VER

field_boss_rank::field_boss_rank()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void field_boss_rank::InitAsDefaultInstance() {
}

field_boss_rank::field_boss_rank(const field_boss_rank& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void field_boss_rank::SharedCtor() {
  _cached_size_ = 0;
  rank_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

field_boss_rank::~field_boss_rank() {
  SharedDtor();
}

void field_boss_rank::SharedDtor() {
  if (this != default_instance_) {
  }
}

void field_boss_rank::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* field_boss_rank::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return field_boss_rank_descriptor_;
}

const field_boss_rank& field_boss_rank::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

field_boss_rank* field_boss_rank::default_instance_ = NULL;

field_boss_rank* field_boss_rank::New() const {
  return new field_boss_rank;
}

void field_boss_rank::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rank_id_ = 0u;
  }
  uids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool field_boss_rank::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 rank_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rank_id_)));
          set_has_rank_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uids;
        break;
      }

      // repeated uint64 uids = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 16, input, this->mutable_uids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_uids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uids;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void field_boss_rank::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 rank_id = 1;
  if (has_rank_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->rank_id(), output);
  }

  // repeated uint64 uids = 2;
  for (int i = 0; i < this->uids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      2, this->uids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* field_boss_rank::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 rank_id = 1;
  if (has_rank_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->rank_id(), target);
  }

  // repeated uint64 uids = 2;
  for (int i = 0; i < this->uids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(2, this->uids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int field_boss_rank::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 rank_id = 1;
    if (has_rank_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rank_id());
    }

  }
  // repeated uint64 uids = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->uids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->uids(i));
    }
    total_size += 1 * this->uids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void field_boss_rank::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const field_boss_rank* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const field_boss_rank*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void field_boss_rank::MergeFrom(const field_boss_rank& from) {
  GOOGLE_CHECK_NE(&from, this);
  uids_.MergeFrom(from.uids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rank_id()) {
      set_rank_id(from.rank_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void field_boss_rank::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void field_boss_rank::CopyFrom(const field_boss_rank& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool field_boss_rank::IsInitialized() const {

  return true;
}

void field_boss_rank::Swap(field_boss_rank* other) {
  if (other != this) {
    std::swap(rank_id_, other->rank_id_);
    uids_.Swap(&other->uids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata field_boss_rank::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = field_boss_rank_descriptor_;
  metadata.reflection = field_boss_rank_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ge_field_boss_rank_notify::kIdFieldNumber;
const int ge_field_boss_rank_notify::kMonsterIdFieldNumber;
const int ge_field_boss_rank_notify::kModeFieldNumber;
const int ge_field_boss_rank_notify::kPersionRanksFieldNumber;
const int ge_field_boss_rank_notify::kFamilyRanksFieldNumber;
const int ge_field_boss_rank_notify::kKillersFieldNumber;
#endif  // !_MSC_VER

ge_field_boss_rank_notify::ge_field_boss_rank_notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ge_field_boss_rank_notify::InitAsDefaultInstance() {
}

ge_field_boss_rank_notify::ge_field_boss_rank_notify(const ge_field_boss_rank_notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ge_field_boss_rank_notify::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  monster_id_ = 0u;
  mode_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ge_field_boss_rank_notify::~ge_field_boss_rank_notify() {
  SharedDtor();
}

void ge_field_boss_rank_notify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ge_field_boss_rank_notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ge_field_boss_rank_notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ge_field_boss_rank_notify_descriptor_;
}

const ge_field_boss_rank_notify& ge_field_boss_rank_notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

ge_field_boss_rank_notify* ge_field_boss_rank_notify::default_instance_ = NULL;

ge_field_boss_rank_notify* ge_field_boss_rank_notify::New() const {
  return new ge_field_boss_rank_notify;
}

void ge_field_boss_rank_notify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    monster_id_ = 0u;
    mode_ = 0;
  }
  persion_ranks_.Clear();
  family_ranks_.Clear();
  killers_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ge_field_boss_rank_notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_monster_id;
        break;
      }

      // optional uint32 monster_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_monster_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &monster_id_)));
          set_has_monster_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_mode;
        break;
      }

      // optional .proto.server.EM_FIELD_MODE mode = 3 [default = FIELD_BOSS_NONE];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mode:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::server::EM_FIELD_MODE_IsValid(value)) {
            set_mode(static_cast< ::proto::server::EM_FIELD_MODE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_persion_ranks;
        break;
      }

      // repeated .proto.server.field_boss_rank persion_ranks = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_persion_ranks:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_persion_ranks()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_persion_ranks;
        if (input->ExpectTag(42)) goto parse_family_ranks;
        break;
      }

      // repeated .proto.server.field_boss_rank family_ranks = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_family_ranks:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_family_ranks()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_family_ranks;
        if (input->ExpectTag(48)) goto parse_killers;
        break;
      }

      // repeated uint64 killers = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_killers:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 48, input, this->mutable_killers())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_killers())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_killers;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ge_field_boss_rank_notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional uint32 monster_id = 2;
  if (has_monster_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->monster_id(), output);
  }

  // optional .proto.server.EM_FIELD_MODE mode = 3 [default = FIELD_BOSS_NONE];
  if (has_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->mode(), output);
  }

  // repeated .proto.server.field_boss_rank persion_ranks = 4;
  for (int i = 0; i < this->persion_ranks_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->persion_ranks(i), output);
  }

  // repeated .proto.server.field_boss_rank family_ranks = 5;
  for (int i = 0; i < this->family_ranks_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->family_ranks(i), output);
  }

  // repeated uint64 killers = 6;
  for (int i = 0; i < this->killers_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      6, this->killers(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ge_field_boss_rank_notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional uint32 monster_id = 2;
  if (has_monster_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->monster_id(), target);
  }

  // optional .proto.server.EM_FIELD_MODE mode = 3 [default = FIELD_BOSS_NONE];
  if (has_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->mode(), target);
  }

  // repeated .proto.server.field_boss_rank persion_ranks = 4;
  for (int i = 0; i < this->persion_ranks_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->persion_ranks(i), target);
  }

  // repeated .proto.server.field_boss_rank family_ranks = 5;
  for (int i = 0; i < this->family_ranks_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->family_ranks(i), target);
  }

  // repeated uint64 killers = 6;
  for (int i = 0; i < this->killers_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(6, this->killers(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ge_field_boss_rank_notify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 monster_id = 2;
    if (has_monster_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->monster_id());
    }

    // optional .proto.server.EM_FIELD_MODE mode = 3 [default = FIELD_BOSS_NONE];
    if (has_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->mode());
    }

  }
  // repeated .proto.server.field_boss_rank persion_ranks = 4;
  total_size += 1 * this->persion_ranks_size();
  for (int i = 0; i < this->persion_ranks_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->persion_ranks(i));
  }

  // repeated .proto.server.field_boss_rank family_ranks = 5;
  total_size += 1 * this->family_ranks_size();
  for (int i = 0; i < this->family_ranks_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->family_ranks(i));
  }

  // repeated uint64 killers = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->killers_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->killers(i));
    }
    total_size += 1 * this->killers_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ge_field_boss_rank_notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ge_field_boss_rank_notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ge_field_boss_rank_notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ge_field_boss_rank_notify::MergeFrom(const ge_field_boss_rank_notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  persion_ranks_.MergeFrom(from.persion_ranks_);
  family_ranks_.MergeFrom(from.family_ranks_);
  killers_.MergeFrom(from.killers_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_monster_id()) {
      set_monster_id(from.monster_id());
    }
    if (from.has_mode()) {
      set_mode(from.mode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ge_field_boss_rank_notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ge_field_boss_rank_notify::CopyFrom(const ge_field_boss_rank_notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ge_field_boss_rank_notify::IsInitialized() const {

  return true;
}

void ge_field_boss_rank_notify::Swap(ge_field_boss_rank_notify* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(monster_id_, other->monster_id_);
    std::swap(mode_, other->mode_);
    persion_ranks_.Swap(&other->persion_ranks_);
    family_ranks_.Swap(&other->family_ranks_);
    killers_.Swap(&other->killers_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ge_field_boss_rank_notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ge_field_boss_rank_notify_descriptor_;
  metadata.reflection = ge_field_boss_rank_notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ge_check_drop_items_request::kItemListFieldNumber;
#endif  // !_MSC_VER

ge_check_drop_items_request::ge_check_drop_items_request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ge_check_drop_items_request::InitAsDefaultInstance() {
}

ge_check_drop_items_request::ge_check_drop_items_request(const ge_check_drop_items_request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ge_check_drop_items_request::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ge_check_drop_items_request::~ge_check_drop_items_request() {
  SharedDtor();
}

void ge_check_drop_items_request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ge_check_drop_items_request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ge_check_drop_items_request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ge_check_drop_items_request_descriptor_;
}

const ge_check_drop_items_request& ge_check_drop_items_request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

ge_check_drop_items_request* ge_check_drop_items_request::default_instance_ = NULL;

ge_check_drop_items_request* ge_check_drop_items_request::New() const {
  return new ge_check_drop_items_request;
}

void ge_check_drop_items_request::Clear() {
  item_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ge_check_drop_items_request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.common.item_limit_data item_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_item_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ge_check_drop_items_request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto.common.item_limit_data item_list = 1;
  for (int i = 0; i < this->item_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->item_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ge_check_drop_items_request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto.common.item_limit_data item_list = 1;
  for (int i = 0; i < this->item_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->item_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ge_check_drop_items_request::ByteSize() const {
  int total_size = 0;

  // repeated .proto.common.item_limit_data item_list = 1;
  total_size += 1 * this->item_list_size();
  for (int i = 0; i < this->item_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ge_check_drop_items_request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ge_check_drop_items_request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ge_check_drop_items_request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ge_check_drop_items_request::MergeFrom(const ge_check_drop_items_request& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_list_.MergeFrom(from.item_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ge_check_drop_items_request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ge_check_drop_items_request::CopyFrom(const ge_check_drop_items_request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ge_check_drop_items_request::IsInitialized() const {

  return true;
}

void ge_check_drop_items_request::Swap(ge_check_drop_items_request* other) {
  if (other != this) {
    item_list_.Swap(&other->item_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ge_check_drop_items_request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ge_check_drop_items_request_descriptor_;
  metadata.reflection = ge_check_drop_items_request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int eg_check_drop_items_reply::kItemListFieldNumber;
#endif  // !_MSC_VER

eg_check_drop_items_reply::eg_check_drop_items_reply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void eg_check_drop_items_reply::InitAsDefaultInstance() {
}

eg_check_drop_items_reply::eg_check_drop_items_reply(const eg_check_drop_items_reply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void eg_check_drop_items_reply::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

eg_check_drop_items_reply::~eg_check_drop_items_reply() {
  SharedDtor();
}

void eg_check_drop_items_reply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void eg_check_drop_items_reply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* eg_check_drop_items_reply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return eg_check_drop_items_reply_descriptor_;
}

const eg_check_drop_items_reply& eg_check_drop_items_reply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

eg_check_drop_items_reply* eg_check_drop_items_reply::default_instance_ = NULL;

eg_check_drop_items_reply* eg_check_drop_items_reply::New() const {
  return new eg_check_drop_items_reply;
}

void eg_check_drop_items_reply::Clear() {
  item_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool eg_check_drop_items_reply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.common.item_limit_data item_list = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_item_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void eg_check_drop_items_reply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto.common.item_limit_data item_list = 3;
  for (int i = 0; i < this->item_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->item_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* eg_check_drop_items_reply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto.common.item_limit_data item_list = 3;
  for (int i = 0; i < this->item_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->item_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int eg_check_drop_items_reply::ByteSize() const {
  int total_size = 0;

  // repeated .proto.common.item_limit_data item_list = 3;
  total_size += 1 * this->item_list_size();
  for (int i = 0; i < this->item_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void eg_check_drop_items_reply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const eg_check_drop_items_reply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const eg_check_drop_items_reply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void eg_check_drop_items_reply::MergeFrom(const eg_check_drop_items_reply& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_list_.MergeFrom(from.item_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void eg_check_drop_items_reply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void eg_check_drop_items_reply::CopyFrom(const eg_check_drop_items_reply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool eg_check_drop_items_reply::IsInitialized() const {

  return true;
}

void eg_check_drop_items_reply::Swap(eg_check_drop_items_reply* other) {
  if (other != this) {
    item_list_.Swap(&other->item_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata eg_check_drop_items_reply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = eg_check_drop_items_reply_descriptor_;
  metadata.reflection = eg_check_drop_items_reply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int eg_syn_item_limit_notify::kItemListFieldNumber;
#endif  // !_MSC_VER

eg_syn_item_limit_notify::eg_syn_item_limit_notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void eg_syn_item_limit_notify::InitAsDefaultInstance() {
}

eg_syn_item_limit_notify::eg_syn_item_limit_notify(const eg_syn_item_limit_notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void eg_syn_item_limit_notify::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

eg_syn_item_limit_notify::~eg_syn_item_limit_notify() {
  SharedDtor();
}

void eg_syn_item_limit_notify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void eg_syn_item_limit_notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* eg_syn_item_limit_notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return eg_syn_item_limit_notify_descriptor_;
}

const eg_syn_item_limit_notify& eg_syn_item_limit_notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

eg_syn_item_limit_notify* eg_syn_item_limit_notify::default_instance_ = NULL;

eg_syn_item_limit_notify* eg_syn_item_limit_notify::New() const {
  return new eg_syn_item_limit_notify;
}

void eg_syn_item_limit_notify::Clear() {
  item_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool eg_syn_item_limit_notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.common.item_limit_data item_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_item_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void eg_syn_item_limit_notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto.common.item_limit_data item_list = 1;
  for (int i = 0; i < this->item_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->item_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* eg_syn_item_limit_notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto.common.item_limit_data item_list = 1;
  for (int i = 0; i < this->item_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->item_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int eg_syn_item_limit_notify::ByteSize() const {
  int total_size = 0;

  // repeated .proto.common.item_limit_data item_list = 1;
  total_size += 1 * this->item_list_size();
  for (int i = 0; i < this->item_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void eg_syn_item_limit_notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const eg_syn_item_limit_notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const eg_syn_item_limit_notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void eg_syn_item_limit_notify::MergeFrom(const eg_syn_item_limit_notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_list_.MergeFrom(from.item_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void eg_syn_item_limit_notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void eg_syn_item_limit_notify::CopyFrom(const eg_syn_item_limit_notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool eg_syn_item_limit_notify::IsInitialized() const {

  return true;
}

void eg_syn_item_limit_notify::Swap(eg_syn_item_limit_notify* other) {
  if (other != this) {
    item_list_.Swap(&other->item_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata eg_syn_item_limit_notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = eg_syn_item_limit_notify_descriptor_;
  metadata.reflection = eg_syn_item_limit_notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ge_redbag_send_notify::kCountFieldNumber;
const int ge_redbag_send_notify::kMoneyFieldNumber;
#endif  // !_MSC_VER

ge_redbag_send_notify::ge_redbag_send_notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ge_redbag_send_notify::InitAsDefaultInstance() {
}

ge_redbag_send_notify::ge_redbag_send_notify(const ge_redbag_send_notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ge_redbag_send_notify::SharedCtor() {
  _cached_size_ = 0;
  count_ = 0u;
  money_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ge_redbag_send_notify::~ge_redbag_send_notify() {
  SharedDtor();
}

void ge_redbag_send_notify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ge_redbag_send_notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ge_redbag_send_notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ge_redbag_send_notify_descriptor_;
}

const ge_redbag_send_notify& ge_redbag_send_notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

ge_redbag_send_notify* ge_redbag_send_notify::default_instance_ = NULL;

ge_redbag_send_notify* ge_redbag_send_notify::New() const {
  return new ge_redbag_send_notify;
}

void ge_redbag_send_notify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    count_ = 0u;
    money_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ge_redbag_send_notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 count = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_money;
        break;
      }

      // optional uint32 money = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &money_)));
          set_has_money();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ge_redbag_send_notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 count = 1;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->count(), output);
  }

  // optional uint32 money = 2;
  if (has_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->money(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ge_redbag_send_notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 count = 1;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->count(), target);
  }

  // optional uint32 money = 2;
  if (has_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->money(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ge_redbag_send_notify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 count = 1;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

    // optional uint32 money = 2;
    if (has_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->money());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ge_redbag_send_notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ge_redbag_send_notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ge_redbag_send_notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ge_redbag_send_notify::MergeFrom(const ge_redbag_send_notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_money()) {
      set_money(from.money());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ge_redbag_send_notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ge_redbag_send_notify::CopyFrom(const ge_redbag_send_notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ge_redbag_send_notify::IsInitialized() const {

  return true;
}

void ge_redbag_send_notify::Swap(ge_redbag_send_notify* other) {
  if (other != this) {
    std::swap(count_, other->count_);
    std::swap(money_, other->money_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ge_redbag_send_notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ge_redbag_send_notify_descriptor_;
  metadata.reflection = ge_redbag_send_notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int eg_redbag_draw_notify::kMoneyFieldNumber;
#endif  // !_MSC_VER

eg_redbag_draw_notify::eg_redbag_draw_notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void eg_redbag_draw_notify::InitAsDefaultInstance() {
}

eg_redbag_draw_notify::eg_redbag_draw_notify(const eg_redbag_draw_notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void eg_redbag_draw_notify::SharedCtor() {
  _cached_size_ = 0;
  money_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

eg_redbag_draw_notify::~eg_redbag_draw_notify() {
  SharedDtor();
}

void eg_redbag_draw_notify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void eg_redbag_draw_notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* eg_redbag_draw_notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return eg_redbag_draw_notify_descriptor_;
}

const eg_redbag_draw_notify& eg_redbag_draw_notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

eg_redbag_draw_notify* eg_redbag_draw_notify::default_instance_ = NULL;

eg_redbag_draw_notify* eg_redbag_draw_notify::New() const {
  return new eg_redbag_draw_notify;
}

void eg_redbag_draw_notify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    money_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool eg_redbag_draw_notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 money = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &money_)));
          set_has_money();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void eg_redbag_draw_notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 money = 1;
  if (has_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->money(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* eg_redbag_draw_notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 money = 1;
  if (has_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->money(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int eg_redbag_draw_notify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 money = 1;
    if (has_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->money());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void eg_redbag_draw_notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const eg_redbag_draw_notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const eg_redbag_draw_notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void eg_redbag_draw_notify::MergeFrom(const eg_redbag_draw_notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_money()) {
      set_money(from.money());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void eg_redbag_draw_notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void eg_redbag_draw_notify::CopyFrom(const eg_redbag_draw_notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool eg_redbag_draw_notify::IsInitialized() const {

  return true;
}

void eg_redbag_draw_notify::Swap(eg_redbag_draw_notify* other) {
  if (other != this) {
    std::swap(money_, other->money_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata eg_redbag_draw_notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = eg_redbag_draw_notify_descriptor_;
  metadata.reflection = eg_redbag_draw_notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

gall_reload_config_notify::gall_reload_config_notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gall_reload_config_notify::InitAsDefaultInstance() {
}

gall_reload_config_notify::gall_reload_config_notify(const gall_reload_config_notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gall_reload_config_notify::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gall_reload_config_notify::~gall_reload_config_notify() {
  SharedDtor();
}

void gall_reload_config_notify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void gall_reload_config_notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gall_reload_config_notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gall_reload_config_notify_descriptor_;
}

const gall_reload_config_notify& gall_reload_config_notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

gall_reload_config_notify* gall_reload_config_notify::default_instance_ = NULL;

gall_reload_config_notify* gall_reload_config_notify::New() const {
  return new gall_reload_config_notify;
}

void gall_reload_config_notify::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gall_reload_config_notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void gall_reload_config_notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gall_reload_config_notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gall_reload_config_notify::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gall_reload_config_notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gall_reload_config_notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gall_reload_config_notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gall_reload_config_notify::MergeFrom(const gall_reload_config_notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gall_reload_config_notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gall_reload_config_notify::CopyFrom(const gall_reload_config_notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gall_reload_config_notify::IsInitialized() const {

  return true;
}

void gall_reload_config_notify::Swap(gall_reload_config_notify* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gall_reload_config_notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gall_reload_config_notify_descriptor_;
  metadata.reflection = gall_reload_config_notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int eg_chat_get_role_info_request::kParamListFieldNumber;
const int eg_chat_get_role_info_request::kChatNotifyFieldNumber;
#endif  // !_MSC_VER

eg_chat_get_role_info_request::eg_chat_get_role_info_request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void eg_chat_get_role_info_request::InitAsDefaultInstance() {
  chat_notify_ = const_cast< ::proto::common::chat_common_data*>(&::proto::common::chat_common_data::default_instance());
}

eg_chat_get_role_info_request::eg_chat_get_role_info_request(const eg_chat_get_role_info_request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void eg_chat_get_role_info_request::SharedCtor() {
  _cached_size_ = 0;
  chat_notify_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

eg_chat_get_role_info_request::~eg_chat_get_role_info_request() {
  SharedDtor();
}

void eg_chat_get_role_info_request::SharedDtor() {
  if (this != default_instance_) {
    delete chat_notify_;
  }
}

void eg_chat_get_role_info_request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* eg_chat_get_role_info_request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return eg_chat_get_role_info_request_descriptor_;
}

const eg_chat_get_role_info_request& eg_chat_get_role_info_request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

eg_chat_get_role_info_request* eg_chat_get_role_info_request::default_instance_ = NULL;

eg_chat_get_role_info_request* eg_chat_get_role_info_request::New() const {
  return new eg_chat_get_role_info_request;
}

void eg_chat_get_role_info_request::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (has_chat_notify()) {
      if (chat_notify_ != NULL) chat_notify_->::proto::common::chat_common_data::Clear();
    }
  }
  param_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool eg_chat_get_role_info_request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.common.chat_param param_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_param_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_param_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_param_list;
        if (input->ExpectTag(18)) goto parse_chat_notify;
        break;
      }

      // required .proto.common.chat_common_data chat_notify = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_chat_notify:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_chat_notify()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void eg_chat_get_role_info_request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto.common.chat_param param_list = 1;
  for (int i = 0; i < this->param_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->param_list(i), output);
  }

  // required .proto.common.chat_common_data chat_notify = 2;
  if (has_chat_notify()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->chat_notify(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* eg_chat_get_role_info_request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto.common.chat_param param_list = 1;
  for (int i = 0; i < this->param_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->param_list(i), target);
  }

  // required .proto.common.chat_common_data chat_notify = 2;
  if (has_chat_notify()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->chat_notify(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int eg_chat_get_role_info_request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required .proto.common.chat_common_data chat_notify = 2;
    if (has_chat_notify()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->chat_notify());
    }

  }
  // repeated .proto.common.chat_param param_list = 1;
  total_size += 1 * this->param_list_size();
  for (int i = 0; i < this->param_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->param_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void eg_chat_get_role_info_request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const eg_chat_get_role_info_request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const eg_chat_get_role_info_request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void eg_chat_get_role_info_request::MergeFrom(const eg_chat_get_role_info_request& from) {
  GOOGLE_CHECK_NE(&from, this);
  param_list_.MergeFrom(from.param_list_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_chat_notify()) {
      mutable_chat_notify()->::proto::common::chat_common_data::MergeFrom(from.chat_notify());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void eg_chat_get_role_info_request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void eg_chat_get_role_info_request::CopyFrom(const eg_chat_get_role_info_request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool eg_chat_get_role_info_request::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  if (has_chat_notify()) {
    if (!this->chat_notify().IsInitialized()) return false;
  }
  return true;
}

void eg_chat_get_role_info_request::Swap(eg_chat_get_role_info_request* other) {
  if (other != this) {
    param_list_.Swap(&other->param_list_);
    std::swap(chat_notify_, other->chat_notify_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata eg_chat_get_role_info_request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = eg_chat_get_role_info_request_descriptor_;
  metadata.reflection = eg_chat_get_role_info_request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ge_chat_get_role_info_reply::kReplyCodeFieldNumber;
const int ge_chat_get_role_info_reply::kChatRoleInfoFieldNumber;
const int ge_chat_get_role_info_reply::kChatNotifyFieldNumber;
#endif  // !_MSC_VER

ge_chat_get_role_info_reply::ge_chat_get_role_info_reply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ge_chat_get_role_info_reply::InitAsDefaultInstance() {
  chat_role_info_ = const_cast< ::proto::common::chat_common_role_info*>(&::proto::common::chat_common_role_info::default_instance());
  chat_notify_ = const_cast< ::proto::common::chat_common_data*>(&::proto::common::chat_common_data::default_instance());
}

ge_chat_get_role_info_reply::ge_chat_get_role_info_reply(const ge_chat_get_role_info_reply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ge_chat_get_role_info_reply::SharedCtor() {
  _cached_size_ = 0;
  reply_code_ = 0u;
  chat_role_info_ = NULL;
  chat_notify_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ge_chat_get_role_info_reply::~ge_chat_get_role_info_reply() {
  SharedDtor();
}

void ge_chat_get_role_info_reply::SharedDtor() {
  if (this != default_instance_) {
    delete chat_role_info_;
    delete chat_notify_;
  }
}

void ge_chat_get_role_info_reply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ge_chat_get_role_info_reply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ge_chat_get_role_info_reply_descriptor_;
}

const ge_chat_get_role_info_reply& ge_chat_get_role_info_reply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

ge_chat_get_role_info_reply* ge_chat_get_role_info_reply::default_instance_ = NULL;

ge_chat_get_role_info_reply* ge_chat_get_role_info_reply::New() const {
  return new ge_chat_get_role_info_reply;
}

void ge_chat_get_role_info_reply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    reply_code_ = 0u;
    if (has_chat_role_info()) {
      if (chat_role_info_ != NULL) chat_role_info_->::proto::common::chat_common_role_info::Clear();
    }
    if (has_chat_notify()) {
      if (chat_notify_ != NULL) chat_notify_->::proto::common::chat_common_data::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ge_chat_get_role_info_reply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 reply_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reply_code_)));
          set_has_reply_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_chat_role_info;
        break;
      }

      // optional .proto.common.chat_common_role_info chat_role_info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_chat_role_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_chat_role_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_chat_notify;
        break;
      }

      // required .proto.common.chat_common_data chat_notify = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_chat_notify:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_chat_notify()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ge_chat_get_role_info_reply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 reply_code = 1;
  if (has_reply_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->reply_code(), output);
  }

  // optional .proto.common.chat_common_role_info chat_role_info = 2;
  if (has_chat_role_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->chat_role_info(), output);
  }

  // required .proto.common.chat_common_data chat_notify = 3;
  if (has_chat_notify()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->chat_notify(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ge_chat_get_role_info_reply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 reply_code = 1;
  if (has_reply_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->reply_code(), target);
  }

  // optional .proto.common.chat_common_role_info chat_role_info = 2;
  if (has_chat_role_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->chat_role_info(), target);
  }

  // required .proto.common.chat_common_data chat_notify = 3;
  if (has_chat_notify()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->chat_notify(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ge_chat_get_role_info_reply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 reply_code = 1;
    if (has_reply_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reply_code());
    }

    // optional .proto.common.chat_common_role_info chat_role_info = 2;
    if (has_chat_role_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->chat_role_info());
    }

    // required .proto.common.chat_common_data chat_notify = 3;
    if (has_chat_notify()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->chat_notify());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ge_chat_get_role_info_reply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ge_chat_get_role_info_reply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ge_chat_get_role_info_reply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ge_chat_get_role_info_reply::MergeFrom(const ge_chat_get_role_info_reply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reply_code()) {
      set_reply_code(from.reply_code());
    }
    if (from.has_chat_role_info()) {
      mutable_chat_role_info()->::proto::common::chat_common_role_info::MergeFrom(from.chat_role_info());
    }
    if (from.has_chat_notify()) {
      mutable_chat_notify()->::proto::common::chat_common_data::MergeFrom(from.chat_notify());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ge_chat_get_role_info_reply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ge_chat_get_role_info_reply::CopyFrom(const ge_chat_get_role_info_reply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ge_chat_get_role_info_reply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000004) != 0x00000004) return false;

  if (has_chat_notify()) {
    if (!this->chat_notify().IsInitialized()) return false;
  }
  return true;
}

void ge_chat_get_role_info_reply::Swap(ge_chat_get_role_info_reply* other) {
  if (other != this) {
    std::swap(reply_code_, other->reply_code_);
    std::swap(chat_role_info_, other->chat_role_info_);
    std::swap(chat_notify_, other->chat_notify_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ge_chat_get_role_info_reply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ge_chat_get_role_info_reply_descriptor_;
  metadata.reflection = ge_chat_get_role_info_reply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int fr_syn_transfer_info_request::kServerIdFieldNumber;
#endif  // !_MSC_VER

fr_syn_transfer_info_request::fr_syn_transfer_info_request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void fr_syn_transfer_info_request::InitAsDefaultInstance() {
}

fr_syn_transfer_info_request::fr_syn_transfer_info_request(const fr_syn_transfer_info_request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void fr_syn_transfer_info_request::SharedCtor() {
  _cached_size_ = 0;
  server_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

fr_syn_transfer_info_request::~fr_syn_transfer_info_request() {
  SharedDtor();
}

void fr_syn_transfer_info_request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void fr_syn_transfer_info_request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* fr_syn_transfer_info_request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return fr_syn_transfer_info_request_descriptor_;
}

const fr_syn_transfer_info_request& fr_syn_transfer_info_request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

fr_syn_transfer_info_request* fr_syn_transfer_info_request::default_instance_ = NULL;

fr_syn_transfer_info_request* fr_syn_transfer_info_request::New() const {
  return new fr_syn_transfer_info_request;
}

void fr_syn_transfer_info_request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    server_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool fr_syn_transfer_info_request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 server_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_id_)));
          set_has_server_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void fr_syn_transfer_info_request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 server_id = 1;
  if (has_server_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->server_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* fr_syn_transfer_info_request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 server_id = 1;
  if (has_server_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->server_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int fr_syn_transfer_info_request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 server_id = 1;
    if (has_server_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void fr_syn_transfer_info_request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const fr_syn_transfer_info_request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const fr_syn_transfer_info_request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void fr_syn_transfer_info_request::MergeFrom(const fr_syn_transfer_info_request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_server_id()) {
      set_server_id(from.server_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void fr_syn_transfer_info_request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void fr_syn_transfer_info_request::CopyFrom(const fr_syn_transfer_info_request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fr_syn_transfer_info_request::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void fr_syn_transfer_info_request::Swap(fr_syn_transfer_info_request* other) {
  if (other != this) {
    std::swap(server_id_, other->server_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata fr_syn_transfer_info_request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = fr_syn_transfer_info_request_descriptor_;
  metadata.reflection = fr_syn_transfer_info_request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int fr_test_request::kTest1FieldNumber;
#endif  // !_MSC_VER

fr_test_request::fr_test_request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void fr_test_request::InitAsDefaultInstance() {
}

fr_test_request::fr_test_request(const fr_test_request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void fr_test_request::SharedCtor() {
  _cached_size_ = 0;
  test1_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

fr_test_request::~fr_test_request() {
  SharedDtor();
}

void fr_test_request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void fr_test_request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* fr_test_request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return fr_test_request_descriptor_;
}

const fr_test_request& fr_test_request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

fr_test_request* fr_test_request::default_instance_ = NULL;

fr_test_request* fr_test_request::New() const {
  return new fr_test_request;
}

void fr_test_request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    test1_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool fr_test_request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 test1 = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &test1_)));
          set_has_test1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void fr_test_request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 test1 = 1;
  if (has_test1()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->test1(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* fr_test_request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 test1 = 1;
  if (has_test1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->test1(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int fr_test_request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 test1 = 1;
    if (has_test1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->test1());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void fr_test_request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const fr_test_request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const fr_test_request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void fr_test_request::MergeFrom(const fr_test_request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_test1()) {
      set_test1(from.test1());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void fr_test_request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void fr_test_request::CopyFrom(const fr_test_request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fr_test_request::IsInitialized() const {

  return true;
}

void fr_test_request::Swap(fr_test_request* other) {
  if (other != this) {
    std::swap(test1_, other->test1_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata fr_test_request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = fr_test_request_descriptor_;
  metadata.reflection = fr_test_request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int rf_test_reply::kTest1FieldNumber;
#endif  // !_MSC_VER

rf_test_reply::rf_test_reply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void rf_test_reply::InitAsDefaultInstance() {
}

rf_test_reply::rf_test_reply(const rf_test_reply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void rf_test_reply::SharedCtor() {
  _cached_size_ = 0;
  test1_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

rf_test_reply::~rf_test_reply() {
  SharedDtor();
}

void rf_test_reply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void rf_test_reply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* rf_test_reply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return rf_test_reply_descriptor_;
}

const rf_test_reply& rf_test_reply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

rf_test_reply* rf_test_reply::default_instance_ = NULL;

rf_test_reply* rf_test_reply::New() const {
  return new rf_test_reply;
}

void rf_test_reply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    test1_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool rf_test_reply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 test1 = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &test1_)));
          set_has_test1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void rf_test_reply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 test1 = 1;
  if (has_test1()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->test1(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* rf_test_reply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 test1 = 1;
  if (has_test1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->test1(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int rf_test_reply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 test1 = 1;
    if (has_test1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->test1());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void rf_test_reply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const rf_test_reply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const rf_test_reply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void rf_test_reply::MergeFrom(const rf_test_reply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_test1()) {
      set_test1(from.test1());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void rf_test_reply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void rf_test_reply::CopyFrom(const rf_test_reply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool rf_test_reply::IsInitialized() const {

  return true;
}

void rf_test_reply::Swap(rf_test_reply* other) {
  if (other != this) {
    std::swap(test1_, other->test1_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata rf_test_reply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = rf_test_reply_descriptor_;
  metadata.reflection = rf_test_reply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mail_get_addenda::kMailIdFieldNumber;
const int mail_get_addenda::kObjsFieldNumber;
const int mail_get_addenda::kItemTypeFieldNumber;
#endif  // !_MSC_VER

mail_get_addenda::mail_get_addenda()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void mail_get_addenda::InitAsDefaultInstance() {
}

mail_get_addenda::mail_get_addenda(const mail_get_addenda& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void mail_get_addenda::SharedCtor() {
  _cached_size_ = 0;
  mail_id_ = GOOGLE_ULONGLONG(0);
  item_type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mail_get_addenda::~mail_get_addenda() {
  SharedDtor();
}

void mail_get_addenda::SharedDtor() {
  if (this != default_instance_) {
  }
}

void mail_get_addenda::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mail_get_addenda::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mail_get_addenda_descriptor_;
}

const mail_get_addenda& mail_get_addenda::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

mail_get_addenda* mail_get_addenda::default_instance_ = NULL;

mail_get_addenda* mail_get_addenda::New() const {
  return new mail_get_addenda;
}

void mail_get_addenda::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mail_id_ = GOOGLE_ULONGLONG(0);
    item_type_ = 0u;
  }
  objs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mail_get_addenda::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 mail_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &mail_id_)));
          set_has_mail_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_objs;
        break;
      }

      // repeated .proto.common.mail_item_obj objs = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_objs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_objs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_objs;
        if (input->ExpectTag(24)) goto parse_item_type;
        break;
      }

      // optional uint32 item_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_type_)));
          set_has_item_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void mail_get_addenda::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 mail_id = 1;
  if (has_mail_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->mail_id(), output);
  }

  // repeated .proto.common.mail_item_obj objs = 2;
  for (int i = 0; i < this->objs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->objs(i), output);
  }

  // optional uint32 item_type = 3;
  if (has_item_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->item_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* mail_get_addenda::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 mail_id = 1;
  if (has_mail_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->mail_id(), target);
  }

  // repeated .proto.common.mail_item_obj objs = 2;
  for (int i = 0; i < this->objs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->objs(i), target);
  }

  // optional uint32 item_type = 3;
  if (has_item_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->item_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int mail_get_addenda::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 mail_id = 1;
    if (has_mail_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->mail_id());
    }

    // optional uint32 item_type = 3;
    if (has_item_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_type());
    }

  }
  // repeated .proto.common.mail_item_obj objs = 2;
  total_size += 1 * this->objs_size();
  for (int i = 0; i < this->objs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->objs(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mail_get_addenda::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mail_get_addenda* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mail_get_addenda*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mail_get_addenda::MergeFrom(const mail_get_addenda& from) {
  GOOGLE_CHECK_NE(&from, this);
  objs_.MergeFrom(from.objs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mail_id()) {
      set_mail_id(from.mail_id());
    }
    if (from.has_item_type()) {
      set_item_type(from.item_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mail_get_addenda::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mail_get_addenda::CopyFrom(const mail_get_addenda& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mail_get_addenda::IsInitialized() const {

  return true;
}

void mail_get_addenda::Swap(mail_get_addenda* other) {
  if (other != this) {
    std::swap(mail_id_, other->mail_id_);
    objs_.Swap(&other->objs_);
    std::swap(item_type_, other->item_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mail_get_addenda::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mail_get_addenda_descriptor_;
  metadata.reflection = mail_get_addenda_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int eg_mail_get_addenda_request::kUidFieldNumber;
const int eg_mail_get_addenda_request::kAddendasFieldNumber;
#endif  // !_MSC_VER

eg_mail_get_addenda_request::eg_mail_get_addenda_request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void eg_mail_get_addenda_request::InitAsDefaultInstance() {
}

eg_mail_get_addenda_request::eg_mail_get_addenda_request(const eg_mail_get_addenda_request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void eg_mail_get_addenda_request::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

eg_mail_get_addenda_request::~eg_mail_get_addenda_request() {
  SharedDtor();
}

void eg_mail_get_addenda_request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void eg_mail_get_addenda_request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* eg_mail_get_addenda_request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return eg_mail_get_addenda_request_descriptor_;
}

const eg_mail_get_addenda_request& eg_mail_get_addenda_request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

eg_mail_get_addenda_request* eg_mail_get_addenda_request::default_instance_ = NULL;

eg_mail_get_addenda_request* eg_mail_get_addenda_request::New() const {
  return new eg_mail_get_addenda_request;
}

void eg_mail_get_addenda_request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = GOOGLE_ULONGLONG(0);
  }
  addendas_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool eg_mail_get_addenda_request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_addendas;
        break;
      }

      // repeated .proto.server.mail_get_addenda addendas = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_addendas:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_addendas()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_addendas;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void eg_mail_get_addenda_request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uid(), output);
  }

  // repeated .proto.server.mail_get_addenda addendas = 2;
  for (int i = 0; i < this->addendas_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->addendas(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* eg_mail_get_addenda_request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->uid(), target);
  }

  // repeated .proto.server.mail_get_addenda addendas = 2;
  for (int i = 0; i < this->addendas_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->addendas(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int eg_mail_get_addenda_request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uid());
    }

  }
  // repeated .proto.server.mail_get_addenda addendas = 2;
  total_size += 1 * this->addendas_size();
  for (int i = 0; i < this->addendas_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->addendas(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void eg_mail_get_addenda_request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const eg_mail_get_addenda_request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const eg_mail_get_addenda_request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void eg_mail_get_addenda_request::MergeFrom(const eg_mail_get_addenda_request& from) {
  GOOGLE_CHECK_NE(&from, this);
  addendas_.MergeFrom(from.addendas_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void eg_mail_get_addenda_request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void eg_mail_get_addenda_request::CopyFrom(const eg_mail_get_addenda_request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool eg_mail_get_addenda_request::IsInitialized() const {

  return true;
}

void eg_mail_get_addenda_request::Swap(eg_mail_get_addenda_request* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    addendas_.Swap(&other->addendas_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata eg_mail_get_addenda_request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = eg_mail_get_addenda_request_descriptor_;
  metadata.reflection = eg_mail_get_addenda_request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mail_get_addenda_back::kMailIdFieldNumber;
const int mail_get_addenda_back::kReplyCodeFieldNumber;
#endif  // !_MSC_VER

mail_get_addenda_back::mail_get_addenda_back()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void mail_get_addenda_back::InitAsDefaultInstance() {
}

mail_get_addenda_back::mail_get_addenda_back(const mail_get_addenda_back& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void mail_get_addenda_back::SharedCtor() {
  _cached_size_ = 0;
  mail_id_ = GOOGLE_ULONGLONG(0);
  reply_code_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mail_get_addenda_back::~mail_get_addenda_back() {
  SharedDtor();
}

void mail_get_addenda_back::SharedDtor() {
  if (this != default_instance_) {
  }
}

void mail_get_addenda_back::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mail_get_addenda_back::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mail_get_addenda_back_descriptor_;
}

const mail_get_addenda_back& mail_get_addenda_back::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

mail_get_addenda_back* mail_get_addenda_back::default_instance_ = NULL;

mail_get_addenda_back* mail_get_addenda_back::New() const {
  return new mail_get_addenda_back;
}

void mail_get_addenda_back::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mail_id_ = GOOGLE_ULONGLONG(0);
    reply_code_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mail_get_addenda_back::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 mail_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &mail_id_)));
          set_has_mail_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_reply_code;
        break;
      }

      // optional uint32 reply_code = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reply_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reply_code_)));
          set_has_reply_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void mail_get_addenda_back::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 mail_id = 1;
  if (has_mail_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->mail_id(), output);
  }

  // optional uint32 reply_code = 2;
  if (has_reply_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->reply_code(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* mail_get_addenda_back::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 mail_id = 1;
  if (has_mail_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->mail_id(), target);
  }

  // optional uint32 reply_code = 2;
  if (has_reply_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->reply_code(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int mail_get_addenda_back::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 mail_id = 1;
    if (has_mail_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->mail_id());
    }

    // optional uint32 reply_code = 2;
    if (has_reply_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reply_code());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mail_get_addenda_back::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mail_get_addenda_back* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mail_get_addenda_back*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mail_get_addenda_back::MergeFrom(const mail_get_addenda_back& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mail_id()) {
      set_mail_id(from.mail_id());
    }
    if (from.has_reply_code()) {
      set_reply_code(from.reply_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mail_get_addenda_back::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mail_get_addenda_back::CopyFrom(const mail_get_addenda_back& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mail_get_addenda_back::IsInitialized() const {

  return true;
}

void mail_get_addenda_back::Swap(mail_get_addenda_back* other) {
  if (other != this) {
    std::swap(mail_id_, other->mail_id_);
    std::swap(reply_code_, other->reply_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mail_get_addenda_back::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mail_get_addenda_back_descriptor_;
  metadata.reflection = mail_get_addenda_back_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ge_mail_get_addenda_reply::kUidFieldNumber;
const int ge_mail_get_addenda_reply::kBacksFieldNumber;
#endif  // !_MSC_VER

ge_mail_get_addenda_reply::ge_mail_get_addenda_reply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ge_mail_get_addenda_reply::InitAsDefaultInstance() {
}

ge_mail_get_addenda_reply::ge_mail_get_addenda_reply(const ge_mail_get_addenda_reply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ge_mail_get_addenda_reply::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ge_mail_get_addenda_reply::~ge_mail_get_addenda_reply() {
  SharedDtor();
}

void ge_mail_get_addenda_reply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ge_mail_get_addenda_reply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ge_mail_get_addenda_reply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ge_mail_get_addenda_reply_descriptor_;
}

const ge_mail_get_addenda_reply& ge_mail_get_addenda_reply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

ge_mail_get_addenda_reply* ge_mail_get_addenda_reply::default_instance_ = NULL;

ge_mail_get_addenda_reply* ge_mail_get_addenda_reply::New() const {
  return new ge_mail_get_addenda_reply;
}

void ge_mail_get_addenda_reply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = GOOGLE_ULONGLONG(0);
  }
  backs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ge_mail_get_addenda_reply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_backs;
        break;
      }

      // repeated .proto.server.mail_get_addenda_back backs = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_backs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_backs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_backs;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ge_mail_get_addenda_reply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uid(), output);
  }

  // repeated .proto.server.mail_get_addenda_back backs = 2;
  for (int i = 0; i < this->backs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->backs(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ge_mail_get_addenda_reply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->uid(), target);
  }

  // repeated .proto.server.mail_get_addenda_back backs = 2;
  for (int i = 0; i < this->backs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->backs(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ge_mail_get_addenda_reply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uid());
    }

  }
  // repeated .proto.server.mail_get_addenda_back backs = 2;
  total_size += 1 * this->backs_size();
  for (int i = 0; i < this->backs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->backs(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ge_mail_get_addenda_reply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ge_mail_get_addenda_reply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ge_mail_get_addenda_reply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ge_mail_get_addenda_reply::MergeFrom(const ge_mail_get_addenda_reply& from) {
  GOOGLE_CHECK_NE(&from, this);
  backs_.MergeFrom(from.backs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ge_mail_get_addenda_reply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ge_mail_get_addenda_reply::CopyFrom(const ge_mail_get_addenda_reply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ge_mail_get_addenda_reply::IsInitialized() const {

  return true;
}

void ge_mail_get_addenda_reply::Swap(ge_mail_get_addenda_reply* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    backs_.Swap(&other->backs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ge_mail_get_addenda_reply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ge_mail_get_addenda_reply_descriptor_;
  metadata.reflection = ge_mail_get_addenda_reply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ge_mail_new_notify::kUidsFieldNumber;
const int ge_mail_new_notify::kMailTypeFieldNumber;
const int ge_mail_new_notify::kFromIdFieldNumber;
const int ge_mail_new_notify::kFromNameFieldNumber;
const int ge_mail_new_notify::kContentIdFieldNumber;
const int ge_mail_new_notify::kTitleFieldNumber;
const int ge_mail_new_notify::kContentFieldNumber;
const int ge_mail_new_notify::kItemsFieldNumber;
const int ge_mail_new_notify::kGetTypeFieldNumber;
#endif  // !_MSC_VER

ge_mail_new_notify::ge_mail_new_notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ge_mail_new_notify::InitAsDefaultInstance() {
}

ge_mail_new_notify::ge_mail_new_notify(const ge_mail_new_notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ge_mail_new_notify::SharedCtor() {
  _cached_size_ = 0;
  mail_type_ = 0;
  from_id_ = GOOGLE_ULONGLONG(0);
  from_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  content_id_ = 0u;
  title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  items_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  get_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ge_mail_new_notify::~ge_mail_new_notify() {
  SharedDtor();
}

void ge_mail_new_notify::SharedDtor() {
  if (from_name_ != &::google::protobuf::internal::kEmptyString) {
    delete from_name_;
  }
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    delete title_;
  }
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (items_ != &::google::protobuf::internal::kEmptyString) {
    delete items_;
  }
  if (this != default_instance_) {
  }
}

void ge_mail_new_notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ge_mail_new_notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ge_mail_new_notify_descriptor_;
}

const ge_mail_new_notify& ge_mail_new_notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

ge_mail_new_notify* ge_mail_new_notify::default_instance_ = NULL;

ge_mail_new_notify* ge_mail_new_notify::New() const {
  return new ge_mail_new_notify;
}

void ge_mail_new_notify::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    mail_type_ = 0;
    from_id_ = GOOGLE_ULONGLONG(0);
    if (has_from_name()) {
      if (from_name_ != &::google::protobuf::internal::kEmptyString) {
        from_name_->clear();
      }
    }
    content_id_ = 0u;
    if (has_title()) {
      if (title_ != &::google::protobuf::internal::kEmptyString) {
        title_->clear();
      }
    }
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::kEmptyString) {
        content_->clear();
      }
    }
    if (has_items()) {
      if (items_ != &::google::protobuf::internal::kEmptyString) {
        items_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    get_type_ = 0;
  }
  uids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ge_mail_new_notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint64 uids = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 8, input, this->mutable_uids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_uids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_uids;
        if (input->ExpectTag(16)) goto parse_mail_type;
        break;
      }

      // optional .proto.common.em_mail_type mail_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mail_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::common::em_mail_type_IsValid(value)) {
            set_mail_type(static_cast< ::proto::common::em_mail_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_from_id;
        break;
      }

      // optional uint64 from_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_from_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &from_id_)));
          set_has_from_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_from_name;
        break;
      }

      // optional string from_name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_from_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_from_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->from_name().data(), this->from_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_content_id;
        break;
      }

      // optional uint32 content_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_content_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &content_id_)));
          set_has_content_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_title;
        break;
      }

      // optional string title = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->title().data(), this->title().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_content;
        break;
      }

      // optional string content = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_items;
        break;
      }

      // optional string items = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_items()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->items().data(), this->items().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_get_type;
        break;
      }

      // optional .proto.common.em_mail_get_type get_type = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_get_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::common::em_mail_get_type_IsValid(value)) {
            set_get_type(static_cast< ::proto::common::em_mail_get_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(9, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ge_mail_new_notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint64 uids = 1;
  for (int i = 0; i < this->uids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      1, this->uids(i), output);
  }

  // optional .proto.common.em_mail_type mail_type = 2;
  if (has_mail_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->mail_type(), output);
  }

  // optional uint64 from_id = 3;
  if (has_from_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->from_id(), output);
  }

  // optional string from_name = 4;
  if (has_from_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->from_name().data(), this->from_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->from_name(), output);
  }

  // optional uint32 content_id = 5;
  if (has_content_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->content_id(), output);
  }

  // optional string title = 6;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->title(), output);
  }

  // optional string content = 7;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->content(), output);
  }

  // optional string items = 8;
  if (has_items()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->items().data(), this->items().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->items(), output);
  }

  // optional .proto.common.em_mail_get_type get_type = 9;
  if (has_get_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->get_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ge_mail_new_notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint64 uids = 1;
  for (int i = 0; i < this->uids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(1, this->uids(i), target);
  }

  // optional .proto.common.em_mail_type mail_type = 2;
  if (has_mail_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->mail_type(), target);
  }

  // optional uint64 from_id = 3;
  if (has_from_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->from_id(), target);
  }

  // optional string from_name = 4;
  if (has_from_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->from_name().data(), this->from_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->from_name(), target);
  }

  // optional uint32 content_id = 5;
  if (has_content_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->content_id(), target);
  }

  // optional string title = 6;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->title(), target);
  }

  // optional string content = 7;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->content(), target);
  }

  // optional string items = 8;
  if (has_items()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->items().data(), this->items().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->items(), target);
  }

  // optional .proto.common.em_mail_get_type get_type = 9;
  if (has_get_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      9, this->get_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ge_mail_new_notify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .proto.common.em_mail_type mail_type = 2;
    if (has_mail_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->mail_type());
    }

    // optional uint64 from_id = 3;
    if (has_from_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->from_id());
    }

    // optional string from_name = 4;
    if (has_from_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->from_name());
    }

    // optional uint32 content_id = 5;
    if (has_content_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->content_id());
    }

    // optional string title = 6;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }

    // optional string content = 7;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

    // optional string items = 8;
    if (has_items()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->items());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .proto.common.em_mail_get_type get_type = 9;
    if (has_get_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->get_type());
    }

  }
  // repeated uint64 uids = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->uids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->uids(i));
    }
    total_size += 1 * this->uids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ge_mail_new_notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ge_mail_new_notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ge_mail_new_notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ge_mail_new_notify::MergeFrom(const ge_mail_new_notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  uids_.MergeFrom(from.uids_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_mail_type()) {
      set_mail_type(from.mail_type());
    }
    if (from.has_from_id()) {
      set_from_id(from.from_id());
    }
    if (from.has_from_name()) {
      set_from_name(from.from_name());
    }
    if (from.has_content_id()) {
      set_content_id(from.content_id());
    }
    if (from.has_title()) {
      set_title(from.title());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
    if (from.has_items()) {
      set_items(from.items());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_get_type()) {
      set_get_type(from.get_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ge_mail_new_notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ge_mail_new_notify::CopyFrom(const ge_mail_new_notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ge_mail_new_notify::IsInitialized() const {

  return true;
}

void ge_mail_new_notify::Swap(ge_mail_new_notify* other) {
  if (other != this) {
    uids_.Swap(&other->uids_);
    std::swap(mail_type_, other->mail_type_);
    std::swap(from_id_, other->from_id_);
    std::swap(from_name_, other->from_name_);
    std::swap(content_id_, other->content_id_);
    std::swap(title_, other->title_);
    std::swap(content_, other->content_);
    std::swap(items_, other->items_);
    std::swap(get_type_, other->get_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ge_mail_new_notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ge_mail_new_notify_descriptor_;
  metadata.reflection = ge_mail_new_notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int sr_syn_cross_info_notify::kCrossIdFieldNumber;
#endif  // !_MSC_VER

sr_syn_cross_info_notify::sr_syn_cross_info_notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void sr_syn_cross_info_notify::InitAsDefaultInstance() {
}

sr_syn_cross_info_notify::sr_syn_cross_info_notify(const sr_syn_cross_info_notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void sr_syn_cross_info_notify::SharedCtor() {
  _cached_size_ = 0;
  cross_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

sr_syn_cross_info_notify::~sr_syn_cross_info_notify() {
  SharedDtor();
}

void sr_syn_cross_info_notify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void sr_syn_cross_info_notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* sr_syn_cross_info_notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return sr_syn_cross_info_notify_descriptor_;
}

const sr_syn_cross_info_notify& sr_syn_cross_info_notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

sr_syn_cross_info_notify* sr_syn_cross_info_notify::default_instance_ = NULL;

sr_syn_cross_info_notify* sr_syn_cross_info_notify::New() const {
  return new sr_syn_cross_info_notify;
}

void sr_syn_cross_info_notify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cross_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool sr_syn_cross_info_notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 cross_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cross_id_)));
          set_has_cross_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void sr_syn_cross_info_notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 cross_id = 1;
  if (has_cross_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cross_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* sr_syn_cross_info_notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 cross_id = 1;
  if (has_cross_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->cross_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int sr_syn_cross_info_notify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 cross_id = 1;
    if (has_cross_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cross_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sr_syn_cross_info_notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const sr_syn_cross_info_notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const sr_syn_cross_info_notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void sr_syn_cross_info_notify::MergeFrom(const sr_syn_cross_info_notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cross_id()) {
      set_cross_id(from.cross_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void sr_syn_cross_info_notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void sr_syn_cross_info_notify::CopyFrom(const sr_syn_cross_info_notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sr_syn_cross_info_notify::IsInitialized() const {

  return true;
}

void sr_syn_cross_info_notify::Swap(sr_syn_cross_info_notify* other) {
  if (other != this) {
    std::swap(cross_id_, other->cross_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata sr_syn_cross_info_notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = sr_syn_cross_info_notify_descriptor_;
  metadata.reflection = sr_syn_cross_info_notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

rs_syn_area_info_notify::rs_syn_area_info_notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void rs_syn_area_info_notify::InitAsDefaultInstance() {
}

rs_syn_area_info_notify::rs_syn_area_info_notify(const rs_syn_area_info_notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void rs_syn_area_info_notify::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

rs_syn_area_info_notify::~rs_syn_area_info_notify() {
  SharedDtor();
}

void rs_syn_area_info_notify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void rs_syn_area_info_notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* rs_syn_area_info_notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return rs_syn_area_info_notify_descriptor_;
}

const rs_syn_area_info_notify& rs_syn_area_info_notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

rs_syn_area_info_notify* rs_syn_area_info_notify::default_instance_ = NULL;

rs_syn_area_info_notify* rs_syn_area_info_notify::New() const {
  return new rs_syn_area_info_notify;
}

void rs_syn_area_info_notify::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool rs_syn_area_info_notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void rs_syn_area_info_notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* rs_syn_area_info_notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int rs_syn_area_info_notify::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void rs_syn_area_info_notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const rs_syn_area_info_notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const rs_syn_area_info_notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void rs_syn_area_info_notify::MergeFrom(const rs_syn_area_info_notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void rs_syn_area_info_notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void rs_syn_area_info_notify::CopyFrom(const rs_syn_area_info_notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool rs_syn_area_info_notify::IsInitialized() const {

  return true;
}

void rs_syn_area_info_notify::Swap(rs_syn_area_info_notify* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata rs_syn_area_info_notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = rs_syn_area_info_notify_descriptor_;
  metadata.reflection = rs_syn_area_info_notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int rs_cross_fight_test_notify::kFightFieldNumber;
const int rs_cross_fight_test_notify::kUser1FieldNumber;
const int rs_cross_fight_test_notify::kUser2FieldNumber;
#endif  // !_MSC_VER

rs_cross_fight_test_notify::rs_cross_fight_test_notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void rs_cross_fight_test_notify::InitAsDefaultInstance() {
  fight_ = const_cast< ::proto::common::fight_param*>(&::proto::common::fight_param::default_instance());
  user1_ = const_cast< ::proto::common::role_cross_data*>(&::proto::common::role_cross_data::default_instance());
  user2_ = const_cast< ::proto::common::role_cross_data*>(&::proto::common::role_cross_data::default_instance());
}

rs_cross_fight_test_notify::rs_cross_fight_test_notify(const rs_cross_fight_test_notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void rs_cross_fight_test_notify::SharedCtor() {
  _cached_size_ = 0;
  fight_ = NULL;
  user1_ = NULL;
  user2_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

rs_cross_fight_test_notify::~rs_cross_fight_test_notify() {
  SharedDtor();
}

void rs_cross_fight_test_notify::SharedDtor() {
  if (this != default_instance_) {
    delete fight_;
    delete user1_;
    delete user2_;
  }
}

void rs_cross_fight_test_notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* rs_cross_fight_test_notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return rs_cross_fight_test_notify_descriptor_;
}

const rs_cross_fight_test_notify& rs_cross_fight_test_notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

rs_cross_fight_test_notify* rs_cross_fight_test_notify::default_instance_ = NULL;

rs_cross_fight_test_notify* rs_cross_fight_test_notify::New() const {
  return new rs_cross_fight_test_notify;
}

void rs_cross_fight_test_notify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_fight()) {
      if (fight_ != NULL) fight_->::proto::common::fight_param::Clear();
    }
    if (has_user1()) {
      if (user1_ != NULL) user1_->::proto::common::role_cross_data::Clear();
    }
    if (has_user2()) {
      if (user2_ != NULL) user2_->::proto::common::role_cross_data::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool rs_cross_fight_test_notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.common.fight_param fight = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fight()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_user1;
        break;
      }

      // optional .proto.common.role_cross_data user1 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user1:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user1()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_user2;
        break;
      }

      // optional .proto.common.role_cross_data user2 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user2()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void rs_cross_fight_test_notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .proto.common.fight_param fight = 1;
  if (has_fight()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->fight(), output);
  }

  // optional .proto.common.role_cross_data user1 = 2;
  if (has_user1()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->user1(), output);
  }

  // optional .proto.common.role_cross_data user2 = 3;
  if (has_user2()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->user2(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* rs_cross_fight_test_notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .proto.common.fight_param fight = 1;
  if (has_fight()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->fight(), target);
  }

  // optional .proto.common.role_cross_data user1 = 2;
  if (has_user1()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->user1(), target);
  }

  // optional .proto.common.role_cross_data user2 = 3;
  if (has_user2()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->user2(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int rs_cross_fight_test_notify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .proto.common.fight_param fight = 1;
    if (has_fight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fight());
    }

    // optional .proto.common.role_cross_data user1 = 2;
    if (has_user1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user1());
    }

    // optional .proto.common.role_cross_data user2 = 3;
    if (has_user2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user2());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void rs_cross_fight_test_notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const rs_cross_fight_test_notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const rs_cross_fight_test_notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void rs_cross_fight_test_notify::MergeFrom(const rs_cross_fight_test_notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fight()) {
      mutable_fight()->::proto::common::fight_param::MergeFrom(from.fight());
    }
    if (from.has_user1()) {
      mutable_user1()->::proto::common::role_cross_data::MergeFrom(from.user1());
    }
    if (from.has_user2()) {
      mutable_user2()->::proto::common::role_cross_data::MergeFrom(from.user2());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void rs_cross_fight_test_notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void rs_cross_fight_test_notify::CopyFrom(const rs_cross_fight_test_notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool rs_cross_fight_test_notify::IsInitialized() const {

  return true;
}

void rs_cross_fight_test_notify::Swap(rs_cross_fight_test_notify* other) {
  if (other != this) {
    std::swap(fight_, other->fight_);
    std::swap(user1_, other->user1_);
    std::swap(user2_, other->user2_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata rs_cross_fight_test_notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = rs_cross_fight_test_notify_descriptor_;
  metadata.reflection = rs_cross_fight_test_notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int gr_cross_fight_test_notify::kUserFieldNumber;
#endif  // !_MSC_VER

gr_cross_fight_test_notify::gr_cross_fight_test_notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gr_cross_fight_test_notify::InitAsDefaultInstance() {
  user_ = const_cast< ::proto::common::role_cross_data*>(&::proto::common::role_cross_data::default_instance());
}

gr_cross_fight_test_notify::gr_cross_fight_test_notify(const gr_cross_fight_test_notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gr_cross_fight_test_notify::SharedCtor() {
  _cached_size_ = 0;
  user_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gr_cross_fight_test_notify::~gr_cross_fight_test_notify() {
  SharedDtor();
}

void gr_cross_fight_test_notify::SharedDtor() {
  if (this != default_instance_) {
    delete user_;
  }
}

void gr_cross_fight_test_notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gr_cross_fight_test_notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gr_cross_fight_test_notify_descriptor_;
}

const gr_cross_fight_test_notify& gr_cross_fight_test_notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

gr_cross_fight_test_notify* gr_cross_fight_test_notify::default_instance_ = NULL;

gr_cross_fight_test_notify* gr_cross_fight_test_notify::New() const {
  return new gr_cross_fight_test_notify;
}

void gr_cross_fight_test_notify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_user()) {
      if (user_ != NULL) user_->::proto::common::role_cross_data::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gr_cross_fight_test_notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.common.role_cross_data user = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gr_cross_fight_test_notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .proto.common.role_cross_data user = 1;
  if (has_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->user(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gr_cross_fight_test_notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .proto.common.role_cross_data user = 1;
  if (has_user()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->user(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gr_cross_fight_test_notify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .proto.common.role_cross_data user = 1;
    if (has_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gr_cross_fight_test_notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gr_cross_fight_test_notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gr_cross_fight_test_notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gr_cross_fight_test_notify::MergeFrom(const gr_cross_fight_test_notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user()) {
      mutable_user()->::proto::common::role_cross_data::MergeFrom(from.user());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gr_cross_fight_test_notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gr_cross_fight_test_notify::CopyFrom(const gr_cross_fight_test_notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gr_cross_fight_test_notify::IsInitialized() const {

  return true;
}

void gr_cross_fight_test_notify::Swap(gr_cross_fight_test_notify* other) {
  if (other != this) {
    std::swap(user_, other->user_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gr_cross_fight_test_notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gr_cross_fight_test_notify_descriptor_;
  metadata.reflection = gr_cross_fight_test_notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ef_syn_center_info_notify::kServerIdFieldNumber;
#endif  // !_MSC_VER

ef_syn_center_info_notify::ef_syn_center_info_notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ef_syn_center_info_notify::InitAsDefaultInstance() {
}

ef_syn_center_info_notify::ef_syn_center_info_notify(const ef_syn_center_info_notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ef_syn_center_info_notify::SharedCtor() {
  _cached_size_ = 0;
  server_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ef_syn_center_info_notify::~ef_syn_center_info_notify() {
  SharedDtor();
}

void ef_syn_center_info_notify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ef_syn_center_info_notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ef_syn_center_info_notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ef_syn_center_info_notify_descriptor_;
}

const ef_syn_center_info_notify& ef_syn_center_info_notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

ef_syn_center_info_notify* ef_syn_center_info_notify::default_instance_ = NULL;

ef_syn_center_info_notify* ef_syn_center_info_notify::New() const {
  return new ef_syn_center_info_notify;
}

void ef_syn_center_info_notify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    server_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ef_syn_center_info_notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 server_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_id_)));
          set_has_server_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ef_syn_center_info_notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 server_id = 1;
  if (has_server_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->server_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ef_syn_center_info_notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 server_id = 1;
  if (has_server_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->server_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ef_syn_center_info_notify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 server_id = 1;
    if (has_server_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ef_syn_center_info_notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ef_syn_center_info_notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ef_syn_center_info_notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ef_syn_center_info_notify::MergeFrom(const ef_syn_center_info_notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_server_id()) {
      set_server_id(from.server_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ef_syn_center_info_notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ef_syn_center_info_notify::CopyFrom(const ef_syn_center_info_notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ef_syn_center_info_notify::IsInitialized() const {

  return true;
}

void ef_syn_center_info_notify::Swap(ef_syn_center_info_notify* other) {
  if (other != this) {
    std::swap(server_id_, other->server_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ef_syn_center_info_notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ef_syn_center_info_notify_descriptor_;
  metadata.reflection = ef_syn_center_info_notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ef_test_request::kRoleGameServerIdFieldNumber;
const int ef_test_request::kTest1FieldNumber;
#endif  // !_MSC_VER

ef_test_request::ef_test_request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ef_test_request::InitAsDefaultInstance() {
}

ef_test_request::ef_test_request(const ef_test_request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ef_test_request::SharedCtor() {
  _cached_size_ = 0;
  role_game_server_id_ = 0u;
  test1_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ef_test_request::~ef_test_request() {
  SharedDtor();
}

void ef_test_request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ef_test_request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ef_test_request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ef_test_request_descriptor_;
}

const ef_test_request& ef_test_request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

ef_test_request* ef_test_request::default_instance_ = NULL;

ef_test_request* ef_test_request::New() const {
  return new ef_test_request;
}

void ef_test_request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_game_server_id_ = 0u;
    test1_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ef_test_request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 role_game_server_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_game_server_id_)));
          set_has_role_game_server_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_test1;
        break;
      }

      // optional uint32 test1 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_test1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &test1_)));
          set_has_test1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ef_test_request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 role_game_server_id = 1;
  if (has_role_game_server_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->role_game_server_id(), output);
  }

  // optional uint32 test1 = 2;
  if (has_test1()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->test1(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ef_test_request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 role_game_server_id = 1;
  if (has_role_game_server_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->role_game_server_id(), target);
  }

  // optional uint32 test1 = 2;
  if (has_test1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->test1(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ef_test_request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 role_game_server_id = 1;
    if (has_role_game_server_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->role_game_server_id());
    }

    // optional uint32 test1 = 2;
    if (has_test1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->test1());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ef_test_request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ef_test_request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ef_test_request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ef_test_request::MergeFrom(const ef_test_request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_game_server_id()) {
      set_role_game_server_id(from.role_game_server_id());
    }
    if (from.has_test1()) {
      set_test1(from.test1());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ef_test_request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ef_test_request::CopyFrom(const ef_test_request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ef_test_request::IsInitialized() const {

  return true;
}

void ef_test_request::Swap(ef_test_request* other) {
  if (other != this) {
    std::swap(role_game_server_id_, other->role_game_server_id_);
    std::swap(test1_, other->test1_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ef_test_request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ef_test_request_descriptor_;
  metadata.reflection = ef_test_request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int fe_syn_transfer_info_notify::kServerIdFieldNumber;
#endif  // !_MSC_VER

fe_syn_transfer_info_notify::fe_syn_transfer_info_notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void fe_syn_transfer_info_notify::InitAsDefaultInstance() {
}

fe_syn_transfer_info_notify::fe_syn_transfer_info_notify(const fe_syn_transfer_info_notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void fe_syn_transfer_info_notify::SharedCtor() {
  _cached_size_ = 0;
  server_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

fe_syn_transfer_info_notify::~fe_syn_transfer_info_notify() {
  SharedDtor();
}

void fe_syn_transfer_info_notify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void fe_syn_transfer_info_notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* fe_syn_transfer_info_notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return fe_syn_transfer_info_notify_descriptor_;
}

const fe_syn_transfer_info_notify& fe_syn_transfer_info_notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

fe_syn_transfer_info_notify* fe_syn_transfer_info_notify::default_instance_ = NULL;

fe_syn_transfer_info_notify* fe_syn_transfer_info_notify::New() const {
  return new fe_syn_transfer_info_notify;
}

void fe_syn_transfer_info_notify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    server_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool fe_syn_transfer_info_notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 server_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_id_)));
          set_has_server_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void fe_syn_transfer_info_notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 server_id = 1;
  if (has_server_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->server_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* fe_syn_transfer_info_notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 server_id = 1;
  if (has_server_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->server_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int fe_syn_transfer_info_notify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 server_id = 1;
    if (has_server_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void fe_syn_transfer_info_notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const fe_syn_transfer_info_notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const fe_syn_transfer_info_notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void fe_syn_transfer_info_notify::MergeFrom(const fe_syn_transfer_info_notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_server_id()) {
      set_server_id(from.server_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void fe_syn_transfer_info_notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void fe_syn_transfer_info_notify::CopyFrom(const fe_syn_transfer_info_notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fe_syn_transfer_info_notify::IsInitialized() const {

  return true;
}

void fe_syn_transfer_info_notify::Swap(fe_syn_transfer_info_notify* other) {
  if (other != this) {
    std::swap(server_id_, other->server_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata fe_syn_transfer_info_notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = fe_syn_transfer_info_notify_descriptor_;
  metadata.reflection = fe_syn_transfer_info_notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int fe_test_reply::kRoleGameServerIdFieldNumber;
const int fe_test_reply::kTest1FieldNumber;
#endif  // !_MSC_VER

fe_test_reply::fe_test_reply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void fe_test_reply::InitAsDefaultInstance() {
}

fe_test_reply::fe_test_reply(const fe_test_reply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void fe_test_reply::SharedCtor() {
  _cached_size_ = 0;
  role_game_server_id_ = 0u;
  test1_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

fe_test_reply::~fe_test_reply() {
  SharedDtor();
}

void fe_test_reply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void fe_test_reply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* fe_test_reply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return fe_test_reply_descriptor_;
}

const fe_test_reply& fe_test_reply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

fe_test_reply* fe_test_reply::default_instance_ = NULL;

fe_test_reply* fe_test_reply::New() const {
  return new fe_test_reply;
}

void fe_test_reply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_game_server_id_ = 0u;
    test1_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool fe_test_reply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 role_game_server_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_game_server_id_)));
          set_has_role_game_server_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_test1;
        break;
      }

      // optional uint32 test1 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_test1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &test1_)));
          set_has_test1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void fe_test_reply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 role_game_server_id = 1;
  if (has_role_game_server_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->role_game_server_id(), output);
  }

  // optional uint32 test1 = 2;
  if (has_test1()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->test1(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* fe_test_reply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 role_game_server_id = 1;
  if (has_role_game_server_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->role_game_server_id(), target);
  }

  // optional uint32 test1 = 2;
  if (has_test1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->test1(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int fe_test_reply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 role_game_server_id = 1;
    if (has_role_game_server_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->role_game_server_id());
    }

    // optional uint32 test1 = 2;
    if (has_test1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->test1());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void fe_test_reply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const fe_test_reply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const fe_test_reply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void fe_test_reply::MergeFrom(const fe_test_reply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_game_server_id()) {
      set_role_game_server_id(from.role_game_server_id());
    }
    if (from.has_test1()) {
      set_test1(from.test1());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void fe_test_reply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void fe_test_reply::CopyFrom(const fe_test_reply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fe_test_reply::IsInitialized() const {

  return true;
}

void fe_test_reply::Swap(fe_test_reply* other) {
  if (other != this) {
    std::swap(role_game_server_id_, other->role_game_server_id_);
    std::swap(test1_, other->test1_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata fe_test_reply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = fe_test_reply_descriptor_;
  metadata.reflection = fe_test_reply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int rs_arena_battle_notify::kFightFieldNumber;
const int rs_arena_battle_notify::kUser1FieldNumber;
const int rs_arena_battle_notify::kUser2FieldNumber;
#endif  // !_MSC_VER

rs_arena_battle_notify::rs_arena_battle_notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void rs_arena_battle_notify::InitAsDefaultInstance() {
  fight_ = const_cast< ::proto::common::fight_param*>(&::proto::common::fight_param::default_instance());
  user1_ = const_cast< ::proto::common::role_cross_data*>(&::proto::common::role_cross_data::default_instance());
  user2_ = const_cast< ::proto::common::role_cross_data*>(&::proto::common::role_cross_data::default_instance());
}

rs_arena_battle_notify::rs_arena_battle_notify(const rs_arena_battle_notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void rs_arena_battle_notify::SharedCtor() {
  _cached_size_ = 0;
  fight_ = NULL;
  user1_ = NULL;
  user2_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

rs_arena_battle_notify::~rs_arena_battle_notify() {
  SharedDtor();
}

void rs_arena_battle_notify::SharedDtor() {
  if (this != default_instance_) {
    delete fight_;
    delete user1_;
    delete user2_;
  }
}

void rs_arena_battle_notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* rs_arena_battle_notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return rs_arena_battle_notify_descriptor_;
}

const rs_arena_battle_notify& rs_arena_battle_notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

rs_arena_battle_notify* rs_arena_battle_notify::default_instance_ = NULL;

rs_arena_battle_notify* rs_arena_battle_notify::New() const {
  return new rs_arena_battle_notify;
}

void rs_arena_battle_notify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_fight()) {
      if (fight_ != NULL) fight_->::proto::common::fight_param::Clear();
    }
    if (has_user1()) {
      if (user1_ != NULL) user1_->::proto::common::role_cross_data::Clear();
    }
    if (has_user2()) {
      if (user2_ != NULL) user2_->::proto::common::role_cross_data::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool rs_arena_battle_notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.common.fight_param fight = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fight()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_user1;
        break;
      }

      // optional .proto.common.role_cross_data user1 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user1:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user1()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_user2;
        break;
      }

      // optional .proto.common.role_cross_data user2 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user2()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void rs_arena_battle_notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .proto.common.fight_param fight = 1;
  if (has_fight()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->fight(), output);
  }

  // optional .proto.common.role_cross_data user1 = 2;
  if (has_user1()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->user1(), output);
  }

  // optional .proto.common.role_cross_data user2 = 3;
  if (has_user2()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->user2(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* rs_arena_battle_notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .proto.common.fight_param fight = 1;
  if (has_fight()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->fight(), target);
  }

  // optional .proto.common.role_cross_data user1 = 2;
  if (has_user1()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->user1(), target);
  }

  // optional .proto.common.role_cross_data user2 = 3;
  if (has_user2()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->user2(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int rs_arena_battle_notify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .proto.common.fight_param fight = 1;
    if (has_fight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fight());
    }

    // optional .proto.common.role_cross_data user1 = 2;
    if (has_user1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user1());
    }

    // optional .proto.common.role_cross_data user2 = 3;
    if (has_user2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user2());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void rs_arena_battle_notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const rs_arena_battle_notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const rs_arena_battle_notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void rs_arena_battle_notify::MergeFrom(const rs_arena_battle_notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fight()) {
      mutable_fight()->::proto::common::fight_param::MergeFrom(from.fight());
    }
    if (from.has_user1()) {
      mutable_user1()->::proto::common::role_cross_data::MergeFrom(from.user1());
    }
    if (from.has_user2()) {
      mutable_user2()->::proto::common::role_cross_data::MergeFrom(from.user2());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void rs_arena_battle_notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void rs_arena_battle_notify::CopyFrom(const rs_arena_battle_notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool rs_arena_battle_notify::IsInitialized() const {

  return true;
}

void rs_arena_battle_notify::Swap(rs_arena_battle_notify* other) {
  if (other != this) {
    std::swap(fight_, other->fight_);
    std::swap(user1_, other->user1_);
    std::swap(user2_, other->user2_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata rs_arena_battle_notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = rs_arena_battle_notify_descriptor_;
  metadata.reflection = rs_arena_battle_notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int rs_arena_battle_ai_notify::kFightFieldNumber;
const int rs_arena_battle_ai_notify::kUser1FieldNumber;
const int rs_arena_battle_ai_notify::kNpcFieldNumber;
#endif  // !_MSC_VER

rs_arena_battle_ai_notify::rs_arena_battle_ai_notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void rs_arena_battle_ai_notify::InitAsDefaultInstance() {
  fight_ = const_cast< ::proto::common::fight_param*>(&::proto::common::fight_param::default_instance());
  user1_ = const_cast< ::proto::common::role_cross_data*>(&::proto::common::role_cross_data::default_instance());
  npc_ = const_cast< ::proto::common::mirror_fight_data*>(&::proto::common::mirror_fight_data::default_instance());
}

rs_arena_battle_ai_notify::rs_arena_battle_ai_notify(const rs_arena_battle_ai_notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void rs_arena_battle_ai_notify::SharedCtor() {
  _cached_size_ = 0;
  fight_ = NULL;
  user1_ = NULL;
  npc_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

rs_arena_battle_ai_notify::~rs_arena_battle_ai_notify() {
  SharedDtor();
}

void rs_arena_battle_ai_notify::SharedDtor() {
  if (this != default_instance_) {
    delete fight_;
    delete user1_;
    delete npc_;
  }
}

void rs_arena_battle_ai_notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* rs_arena_battle_ai_notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return rs_arena_battle_ai_notify_descriptor_;
}

const rs_arena_battle_ai_notify& rs_arena_battle_ai_notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

rs_arena_battle_ai_notify* rs_arena_battle_ai_notify::default_instance_ = NULL;

rs_arena_battle_ai_notify* rs_arena_battle_ai_notify::New() const {
  return new rs_arena_battle_ai_notify;
}

void rs_arena_battle_ai_notify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_fight()) {
      if (fight_ != NULL) fight_->::proto::common::fight_param::Clear();
    }
    if (has_user1()) {
      if (user1_ != NULL) user1_->::proto::common::role_cross_data::Clear();
    }
    if (has_npc()) {
      if (npc_ != NULL) npc_->::proto::common::mirror_fight_data::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool rs_arena_battle_ai_notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.common.fight_param fight = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fight()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_user1;
        break;
      }

      // optional .proto.common.role_cross_data user1 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user1:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user1()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_npc;
        break;
      }

      // optional .proto.common.mirror_fight_data npc = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_npc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_npc()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void rs_arena_battle_ai_notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .proto.common.fight_param fight = 1;
  if (has_fight()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->fight(), output);
  }

  // optional .proto.common.role_cross_data user1 = 2;
  if (has_user1()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->user1(), output);
  }

  // optional .proto.common.mirror_fight_data npc = 3;
  if (has_npc()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->npc(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* rs_arena_battle_ai_notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .proto.common.fight_param fight = 1;
  if (has_fight()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->fight(), target);
  }

  // optional .proto.common.role_cross_data user1 = 2;
  if (has_user1()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->user1(), target);
  }

  // optional .proto.common.mirror_fight_data npc = 3;
  if (has_npc()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->npc(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int rs_arena_battle_ai_notify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .proto.common.fight_param fight = 1;
    if (has_fight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fight());
    }

    // optional .proto.common.role_cross_data user1 = 2;
    if (has_user1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user1());
    }

    // optional .proto.common.mirror_fight_data npc = 3;
    if (has_npc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->npc());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void rs_arena_battle_ai_notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const rs_arena_battle_ai_notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const rs_arena_battle_ai_notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void rs_arena_battle_ai_notify::MergeFrom(const rs_arena_battle_ai_notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fight()) {
      mutable_fight()->::proto::common::fight_param::MergeFrom(from.fight());
    }
    if (from.has_user1()) {
      mutable_user1()->::proto::common::role_cross_data::MergeFrom(from.user1());
    }
    if (from.has_npc()) {
      mutable_npc()->::proto::common::mirror_fight_data::MergeFrom(from.npc());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void rs_arena_battle_ai_notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void rs_arena_battle_ai_notify::CopyFrom(const rs_arena_battle_ai_notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool rs_arena_battle_ai_notify::IsInitialized() const {

  return true;
}

void rs_arena_battle_ai_notify::Swap(rs_arena_battle_ai_notify* other) {
  if (other != this) {
    std::swap(fight_, other->fight_);
    std::swap(user1_, other->user1_);
    std::swap(npc_, other->npc_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata rs_arena_battle_ai_notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = rs_arena_battle_ai_notify_descriptor_;
  metadata.reflection = rs_arena_battle_ai_notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int sr_arena_battle_result_notify::kWinObjFieldNumber;
const int sr_arena_battle_result_notify::kLoseObjFieldNumber;
const int sr_arena_battle_result_notify::kFightFieldNumber;
const int sr_arena_battle_result_notify::kWinHerosFieldNumber;
const int sr_arena_battle_result_notify::kLoseHerosFieldNumber;
#endif  // !_MSC_VER

sr_arena_battle_result_notify::sr_arena_battle_result_notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void sr_arena_battle_result_notify::InitAsDefaultInstance() {
  win_obj_ = const_cast< ::proto::common::obj_single*>(&::proto::common::obj_single::default_instance());
  lose_obj_ = const_cast< ::proto::common::obj_single*>(&::proto::common::obj_single::default_instance());
  fight_ = const_cast< ::proto::common::fight_param*>(&::proto::common::fight_param::default_instance());
  win_heros_ = const_cast< ::proto::common::hero_data*>(&::proto::common::hero_data::default_instance());
  lose_heros_ = const_cast< ::proto::common::hero_data*>(&::proto::common::hero_data::default_instance());
}

sr_arena_battle_result_notify::sr_arena_battle_result_notify(const sr_arena_battle_result_notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void sr_arena_battle_result_notify::SharedCtor() {
  _cached_size_ = 0;
  win_obj_ = NULL;
  lose_obj_ = NULL;
  fight_ = NULL;
  win_heros_ = NULL;
  lose_heros_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

sr_arena_battle_result_notify::~sr_arena_battle_result_notify() {
  SharedDtor();
}

void sr_arena_battle_result_notify::SharedDtor() {
  if (this != default_instance_) {
    delete win_obj_;
    delete lose_obj_;
    delete fight_;
    delete win_heros_;
    delete lose_heros_;
  }
}

void sr_arena_battle_result_notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* sr_arena_battle_result_notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return sr_arena_battle_result_notify_descriptor_;
}

const sr_arena_battle_result_notify& sr_arena_battle_result_notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

sr_arena_battle_result_notify* sr_arena_battle_result_notify::default_instance_ = NULL;

sr_arena_battle_result_notify* sr_arena_battle_result_notify::New() const {
  return new sr_arena_battle_result_notify;
}

void sr_arena_battle_result_notify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_win_obj()) {
      if (win_obj_ != NULL) win_obj_->::proto::common::obj_single::Clear();
    }
    if (has_lose_obj()) {
      if (lose_obj_ != NULL) lose_obj_->::proto::common::obj_single::Clear();
    }
    if (has_fight()) {
      if (fight_ != NULL) fight_->::proto::common::fight_param::Clear();
    }
    if (has_win_heros()) {
      if (win_heros_ != NULL) win_heros_->::proto::common::hero_data::Clear();
    }
    if (has_lose_heros()) {
      if (lose_heros_ != NULL) lose_heros_->::proto::common::hero_data::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool sr_arena_battle_result_notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.common.obj_single win_obj = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_win_obj()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_lose_obj;
        break;
      }

      // optional .proto.common.obj_single lose_obj = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_lose_obj:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_lose_obj()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_fight;
        break;
      }

      // optional .proto.common.fight_param fight = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fight:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fight()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_win_heros;
        break;
      }

      // optional .proto.common.hero_data win_heros = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_win_heros:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_win_heros()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_lose_heros;
        break;
      }

      // optional .proto.common.hero_data lose_heros = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_lose_heros:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_lose_heros()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void sr_arena_battle_result_notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .proto.common.obj_single win_obj = 1;
  if (has_win_obj()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->win_obj(), output);
  }

  // optional .proto.common.obj_single lose_obj = 2;
  if (has_lose_obj()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->lose_obj(), output);
  }

  // optional .proto.common.fight_param fight = 3;
  if (has_fight()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->fight(), output);
  }

  // optional .proto.common.hero_data win_heros = 4;
  if (has_win_heros()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->win_heros(), output);
  }

  // optional .proto.common.hero_data lose_heros = 5;
  if (has_lose_heros()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->lose_heros(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* sr_arena_battle_result_notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .proto.common.obj_single win_obj = 1;
  if (has_win_obj()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->win_obj(), target);
  }

  // optional .proto.common.obj_single lose_obj = 2;
  if (has_lose_obj()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->lose_obj(), target);
  }

  // optional .proto.common.fight_param fight = 3;
  if (has_fight()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->fight(), target);
  }

  // optional .proto.common.hero_data win_heros = 4;
  if (has_win_heros()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->win_heros(), target);
  }

  // optional .proto.common.hero_data lose_heros = 5;
  if (has_lose_heros()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->lose_heros(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int sr_arena_battle_result_notify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .proto.common.obj_single win_obj = 1;
    if (has_win_obj()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->win_obj());
    }

    // optional .proto.common.obj_single lose_obj = 2;
    if (has_lose_obj()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->lose_obj());
    }

    // optional .proto.common.fight_param fight = 3;
    if (has_fight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fight());
    }

    // optional .proto.common.hero_data win_heros = 4;
    if (has_win_heros()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->win_heros());
    }

    // optional .proto.common.hero_data lose_heros = 5;
    if (has_lose_heros()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->lose_heros());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sr_arena_battle_result_notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const sr_arena_battle_result_notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const sr_arena_battle_result_notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void sr_arena_battle_result_notify::MergeFrom(const sr_arena_battle_result_notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_win_obj()) {
      mutable_win_obj()->::proto::common::obj_single::MergeFrom(from.win_obj());
    }
    if (from.has_lose_obj()) {
      mutable_lose_obj()->::proto::common::obj_single::MergeFrom(from.lose_obj());
    }
    if (from.has_fight()) {
      mutable_fight()->::proto::common::fight_param::MergeFrom(from.fight());
    }
    if (from.has_win_heros()) {
      mutable_win_heros()->::proto::common::hero_data::MergeFrom(from.win_heros());
    }
    if (from.has_lose_heros()) {
      mutable_lose_heros()->::proto::common::hero_data::MergeFrom(from.lose_heros());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void sr_arena_battle_result_notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void sr_arena_battle_result_notify::CopyFrom(const sr_arena_battle_result_notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sr_arena_battle_result_notify::IsInitialized() const {

  return true;
}

void sr_arena_battle_result_notify::Swap(sr_arena_battle_result_notify* other) {
  if (other != this) {
    std::swap(win_obj_, other->win_obj_);
    std::swap(lose_obj_, other->lose_obj_);
    std::swap(fight_, other->fight_);
    std::swap(win_heros_, other->win_heros_);
    std::swap(lose_heros_, other->lose_heros_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata sr_arena_battle_result_notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = sr_arena_battle_result_notify_descriptor_;
  metadata.reflection = sr_arena_battle_result_notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int gr_arena_match_request::kScoreFieldNumber;
const int gr_arena_match_request::kArenaLevelFieldNumber;
const int gr_arena_match_request::kUserFieldNumber;
#endif  // !_MSC_VER

gr_arena_match_request::gr_arena_match_request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gr_arena_match_request::InitAsDefaultInstance() {
  user_ = const_cast< ::proto::common::role_cross_data*>(&::proto::common::role_cross_data::default_instance());
}

gr_arena_match_request::gr_arena_match_request(const gr_arena_match_request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gr_arena_match_request::SharedCtor() {
  _cached_size_ = 0;
  score_ = 0u;
  arena_level_ = 0u;
  user_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gr_arena_match_request::~gr_arena_match_request() {
  SharedDtor();
}

void gr_arena_match_request::SharedDtor() {
  if (this != default_instance_) {
    delete user_;
  }
}

void gr_arena_match_request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gr_arena_match_request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gr_arena_match_request_descriptor_;
}

const gr_arena_match_request& gr_arena_match_request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

gr_arena_match_request* gr_arena_match_request::default_instance_ = NULL;

gr_arena_match_request* gr_arena_match_request::New() const {
  return new gr_arena_match_request;
}

void gr_arena_match_request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    score_ = 0u;
    arena_level_ = 0u;
    if (has_user()) {
      if (user_ != NULL) user_->::proto::common::role_cross_data::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gr_arena_match_request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 score = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_arena_level;
        break;
      }

      // optional uint32 arena_level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_arena_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &arena_level_)));
          set_has_arena_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_user;
        break;
      }

      // optional .proto.common.role_cross_data user = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gr_arena_match_request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 score = 1;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->score(), output);
  }

  // optional uint32 arena_level = 2;
  if (has_arena_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->arena_level(), output);
  }

  // optional .proto.common.role_cross_data user = 3;
  if (has_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->user(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gr_arena_match_request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 score = 1;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->score(), target);
  }

  // optional uint32 arena_level = 2;
  if (has_arena_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->arena_level(), target);
  }

  // optional .proto.common.role_cross_data user = 3;
  if (has_user()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->user(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gr_arena_match_request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 score = 1;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->score());
    }

    // optional uint32 arena_level = 2;
    if (has_arena_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->arena_level());
    }

    // optional .proto.common.role_cross_data user = 3;
    if (has_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gr_arena_match_request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gr_arena_match_request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gr_arena_match_request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gr_arena_match_request::MergeFrom(const gr_arena_match_request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_arena_level()) {
      set_arena_level(from.arena_level());
    }
    if (from.has_user()) {
      mutable_user()->::proto::common::role_cross_data::MergeFrom(from.user());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gr_arena_match_request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gr_arena_match_request::CopyFrom(const gr_arena_match_request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gr_arena_match_request::IsInitialized() const {

  return true;
}

void gr_arena_match_request::Swap(gr_arena_match_request* other) {
  if (other != this) {
    std::swap(score_, other->score_);
    std::swap(arena_level_, other->arena_level_);
    std::swap(user_, other->user_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gr_arena_match_request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gr_arena_match_request_descriptor_;
  metadata.reflection = gr_arena_match_request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int rg_arena_match_reply::kReplyCodeFieldNumber;
const int rg_arena_match_reply::kTargetScoreFieldNumber;
const int rg_arena_match_reply::kTargetArenaLevelFieldNumber;
const int rg_arena_match_reply::kServerIdFieldNumber;
const int rg_arena_match_reply::kTargetUserFieldNumber;
#endif  // !_MSC_VER

rg_arena_match_reply::rg_arena_match_reply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void rg_arena_match_reply::InitAsDefaultInstance() {
  target_user_ = const_cast< ::proto::common::role_cross_data*>(&::proto::common::role_cross_data::default_instance());
}

rg_arena_match_reply::rg_arena_match_reply(const rg_arena_match_reply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void rg_arena_match_reply::SharedCtor() {
  _cached_size_ = 0;
  reply_code_ = 0u;
  target_score_ = 0u;
  target_arena_level_ = 0u;
  server_id_ = 0u;
  target_user_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

rg_arena_match_reply::~rg_arena_match_reply() {
  SharedDtor();
}

void rg_arena_match_reply::SharedDtor() {
  if (this != default_instance_) {
    delete target_user_;
  }
}

void rg_arena_match_reply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* rg_arena_match_reply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return rg_arena_match_reply_descriptor_;
}

const rg_arena_match_reply& rg_arena_match_reply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

rg_arena_match_reply* rg_arena_match_reply::default_instance_ = NULL;

rg_arena_match_reply* rg_arena_match_reply::New() const {
  return new rg_arena_match_reply;
}

void rg_arena_match_reply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    reply_code_ = 0u;
    target_score_ = 0u;
    target_arena_level_ = 0u;
    server_id_ = 0u;
    if (has_target_user()) {
      if (target_user_ != NULL) target_user_->::proto::common::role_cross_data::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool rg_arena_match_reply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 reply_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reply_code_)));
          set_has_reply_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_target_score;
        break;
      }

      // optional uint32 target_score = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_target_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &target_score_)));
          set_has_target_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_target_arena_level;
        break;
      }

      // optional uint32 target_arena_level = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_target_arena_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &target_arena_level_)));
          set_has_target_arena_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_server_id;
        break;
      }

      // optional uint32 server_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_server_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_id_)));
          set_has_server_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_target_user;
        break;
      }

      // optional .proto.common.role_cross_data target_user = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_target_user:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_target_user()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void rg_arena_match_reply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 reply_code = 1;
  if (has_reply_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->reply_code(), output);
  }

  // optional uint32 target_score = 2;
  if (has_target_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->target_score(), output);
  }

  // optional uint32 target_arena_level = 3;
  if (has_target_arena_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->target_arena_level(), output);
  }

  // optional uint32 server_id = 4;
  if (has_server_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->server_id(), output);
  }

  // optional .proto.common.role_cross_data target_user = 5;
  if (has_target_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->target_user(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* rg_arena_match_reply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 reply_code = 1;
  if (has_reply_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->reply_code(), target);
  }

  // optional uint32 target_score = 2;
  if (has_target_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->target_score(), target);
  }

  // optional uint32 target_arena_level = 3;
  if (has_target_arena_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->target_arena_level(), target);
  }

  // optional uint32 server_id = 4;
  if (has_server_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->server_id(), target);
  }

  // optional .proto.common.role_cross_data target_user = 5;
  if (has_target_user()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->target_user(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int rg_arena_match_reply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 reply_code = 1;
    if (has_reply_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reply_code());
    }

    // optional uint32 target_score = 2;
    if (has_target_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->target_score());
    }

    // optional uint32 target_arena_level = 3;
    if (has_target_arena_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->target_arena_level());
    }

    // optional uint32 server_id = 4;
    if (has_server_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_id());
    }

    // optional .proto.common.role_cross_data target_user = 5;
    if (has_target_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->target_user());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void rg_arena_match_reply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const rg_arena_match_reply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const rg_arena_match_reply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void rg_arena_match_reply::MergeFrom(const rg_arena_match_reply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reply_code()) {
      set_reply_code(from.reply_code());
    }
    if (from.has_target_score()) {
      set_target_score(from.target_score());
    }
    if (from.has_target_arena_level()) {
      set_target_arena_level(from.target_arena_level());
    }
    if (from.has_server_id()) {
      set_server_id(from.server_id());
    }
    if (from.has_target_user()) {
      mutable_target_user()->::proto::common::role_cross_data::MergeFrom(from.target_user());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void rg_arena_match_reply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void rg_arena_match_reply::CopyFrom(const rg_arena_match_reply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool rg_arena_match_reply::IsInitialized() const {

  return true;
}

void rg_arena_match_reply::Swap(rg_arena_match_reply* other) {
  if (other != this) {
    std::swap(reply_code_, other->reply_code_);
    std::swap(target_score_, other->target_score_);
    std::swap(target_arena_level_, other->target_arena_level_);
    std::swap(server_id_, other->server_id_);
    std::swap(target_user_, other->target_user_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata rg_arena_match_reply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = rg_arena_match_reply_descriptor_;
  metadata.reflection = rg_arena_match_reply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

gr_arena_cancel_match_request::gr_arena_cancel_match_request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gr_arena_cancel_match_request::InitAsDefaultInstance() {
}

gr_arena_cancel_match_request::gr_arena_cancel_match_request(const gr_arena_cancel_match_request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gr_arena_cancel_match_request::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gr_arena_cancel_match_request::~gr_arena_cancel_match_request() {
  SharedDtor();
}

void gr_arena_cancel_match_request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void gr_arena_cancel_match_request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gr_arena_cancel_match_request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gr_arena_cancel_match_request_descriptor_;
}

const gr_arena_cancel_match_request& gr_arena_cancel_match_request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

gr_arena_cancel_match_request* gr_arena_cancel_match_request::default_instance_ = NULL;

gr_arena_cancel_match_request* gr_arena_cancel_match_request::New() const {
  return new gr_arena_cancel_match_request;
}

void gr_arena_cancel_match_request::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gr_arena_cancel_match_request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void gr_arena_cancel_match_request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gr_arena_cancel_match_request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gr_arena_cancel_match_request::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gr_arena_cancel_match_request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gr_arena_cancel_match_request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gr_arena_cancel_match_request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gr_arena_cancel_match_request::MergeFrom(const gr_arena_cancel_match_request& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gr_arena_cancel_match_request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gr_arena_cancel_match_request::CopyFrom(const gr_arena_cancel_match_request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gr_arena_cancel_match_request::IsInitialized() const {

  return true;
}

void gr_arena_cancel_match_request::Swap(gr_arena_cancel_match_request* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gr_arena_cancel_match_request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gr_arena_cancel_match_request_descriptor_;
  metadata.reflection = gr_arena_cancel_match_request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int rg_arena_cancel_match_reply::kServerIdFieldNumber;
#endif  // !_MSC_VER

rg_arena_cancel_match_reply::rg_arena_cancel_match_reply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void rg_arena_cancel_match_reply::InitAsDefaultInstance() {
}

rg_arena_cancel_match_reply::rg_arena_cancel_match_reply(const rg_arena_cancel_match_reply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void rg_arena_cancel_match_reply::SharedCtor() {
  _cached_size_ = 0;
  server_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

rg_arena_cancel_match_reply::~rg_arena_cancel_match_reply() {
  SharedDtor();
}

void rg_arena_cancel_match_reply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void rg_arena_cancel_match_reply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* rg_arena_cancel_match_reply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return rg_arena_cancel_match_reply_descriptor_;
}

const rg_arena_cancel_match_reply& rg_arena_cancel_match_reply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

rg_arena_cancel_match_reply* rg_arena_cancel_match_reply::default_instance_ = NULL;

rg_arena_cancel_match_reply* rg_arena_cancel_match_reply::New() const {
  return new rg_arena_cancel_match_reply;
}

void rg_arena_cancel_match_reply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    server_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool rg_arena_cancel_match_reply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 server_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_id_)));
          set_has_server_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void rg_arena_cancel_match_reply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 server_id = 1;
  if (has_server_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->server_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* rg_arena_cancel_match_reply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 server_id = 1;
  if (has_server_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->server_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int rg_arena_cancel_match_reply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 server_id = 1;
    if (has_server_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void rg_arena_cancel_match_reply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const rg_arena_cancel_match_reply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const rg_arena_cancel_match_reply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void rg_arena_cancel_match_reply::MergeFrom(const rg_arena_cancel_match_reply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_server_id()) {
      set_server_id(from.server_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void rg_arena_cancel_match_reply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void rg_arena_cancel_match_reply::CopyFrom(const rg_arena_cancel_match_reply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool rg_arena_cancel_match_reply::IsInitialized() const {

  return true;
}

void rg_arena_cancel_match_reply::Swap(rg_arena_cancel_match_reply* other) {
  if (other != this) {
    std::swap(server_id_, other->server_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata rg_arena_cancel_match_reply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = rg_arena_cancel_match_reply_descriptor_;
  metadata.reflection = rg_arena_cancel_match_reply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int rg_arena_battle_result_notify::kIsWinFieldNumber;
const int rg_arena_battle_result_notify::kTargetScoreFieldNumber;
const int rg_arena_battle_result_notify::kTargetArenaLevelFieldNumber;
const int rg_arena_battle_result_notify::kTargetFieldNumber;
const int rg_arena_battle_result_notify::kOwnRankUpFieldNumber;
const int rg_arena_battle_result_notify::kOwnNewRankFieldNumber;
const int rg_arena_battle_result_notify::kServerIdFieldNumber;
#endif  // !_MSC_VER

rg_arena_battle_result_notify::rg_arena_battle_result_notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void rg_arena_battle_result_notify::InitAsDefaultInstance() {
  target_ = const_cast< ::proto::common::role_cross_data*>(&::proto::common::role_cross_data::default_instance());
}

rg_arena_battle_result_notify::rg_arena_battle_result_notify(const rg_arena_battle_result_notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void rg_arena_battle_result_notify::SharedCtor() {
  _cached_size_ = 0;
  is_win_ = 0u;
  target_score_ = 0u;
  target_arena_level_ = 0u;
  target_ = NULL;
  own_rank_up_ = 0;
  own_new_rank_ = 0u;
  server_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

rg_arena_battle_result_notify::~rg_arena_battle_result_notify() {
  SharedDtor();
}

void rg_arena_battle_result_notify::SharedDtor() {
  if (this != default_instance_) {
    delete target_;
  }
}

void rg_arena_battle_result_notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* rg_arena_battle_result_notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return rg_arena_battle_result_notify_descriptor_;
}

const rg_arena_battle_result_notify& rg_arena_battle_result_notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

rg_arena_battle_result_notify* rg_arena_battle_result_notify::default_instance_ = NULL;

rg_arena_battle_result_notify* rg_arena_battle_result_notify::New() const {
  return new rg_arena_battle_result_notify;
}

void rg_arena_battle_result_notify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    is_win_ = 0u;
    target_score_ = 0u;
    target_arena_level_ = 0u;
    if (has_target()) {
      if (target_ != NULL) target_->::proto::common::role_cross_data::Clear();
    }
    own_rank_up_ = 0;
    own_new_rank_ = 0u;
    server_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool rg_arena_battle_result_notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 is_win = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &is_win_)));
          set_has_is_win();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_target_score;
        break;
      }

      // optional uint32 target_score = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_target_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &target_score_)));
          set_has_target_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_target_arena_level;
        break;
      }

      // optional uint32 target_arena_level = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_target_arena_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &target_arena_level_)));
          set_has_target_arena_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_target;
        break;
      }

      // optional .proto.common.role_cross_data target = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_target:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_target()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_own_rank_up;
        break;
      }

      // optional int32 own_rank_up = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_own_rank_up:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &own_rank_up_)));
          set_has_own_rank_up();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_own_new_rank;
        break;
      }

      // optional uint32 own_new_rank = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_own_new_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &own_new_rank_)));
          set_has_own_new_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_server_id;
        break;
      }

      // optional uint32 server_id = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_server_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_id_)));
          set_has_server_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void rg_arena_battle_result_notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 is_win = 1;
  if (has_is_win()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->is_win(), output);
  }

  // optional uint32 target_score = 2;
  if (has_target_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->target_score(), output);
  }

  // optional uint32 target_arena_level = 3;
  if (has_target_arena_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->target_arena_level(), output);
  }

  // optional .proto.common.role_cross_data target = 4;
  if (has_target()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->target(), output);
  }

  // optional int32 own_rank_up = 5;
  if (has_own_rank_up()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->own_rank_up(), output);
  }

  // optional uint32 own_new_rank = 6;
  if (has_own_new_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->own_new_rank(), output);
  }

  // optional uint32 server_id = 7;
  if (has_server_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->server_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* rg_arena_battle_result_notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 is_win = 1;
  if (has_is_win()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->is_win(), target);
  }

  // optional uint32 target_score = 2;
  if (has_target_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->target_score(), target);
  }

  // optional uint32 target_arena_level = 3;
  if (has_target_arena_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->target_arena_level(), target);
  }

  // optional .proto.common.role_cross_data target = 4;
  if (has_target()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->target(), target);
  }

  // optional int32 own_rank_up = 5;
  if (has_own_rank_up()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->own_rank_up(), target);
  }

  // optional uint32 own_new_rank = 6;
  if (has_own_new_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->own_new_rank(), target);
  }

  // optional uint32 server_id = 7;
  if (has_server_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->server_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int rg_arena_battle_result_notify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 is_win = 1;
    if (has_is_win()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->is_win());
    }

    // optional uint32 target_score = 2;
    if (has_target_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->target_score());
    }

    // optional uint32 target_arena_level = 3;
    if (has_target_arena_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->target_arena_level());
    }

    // optional .proto.common.role_cross_data target = 4;
    if (has_target()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->target());
    }

    // optional int32 own_rank_up = 5;
    if (has_own_rank_up()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->own_rank_up());
    }

    // optional uint32 own_new_rank = 6;
    if (has_own_new_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->own_new_rank());
    }

    // optional uint32 server_id = 7;
    if (has_server_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void rg_arena_battle_result_notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const rg_arena_battle_result_notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const rg_arena_battle_result_notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void rg_arena_battle_result_notify::MergeFrom(const rg_arena_battle_result_notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_is_win()) {
      set_is_win(from.is_win());
    }
    if (from.has_target_score()) {
      set_target_score(from.target_score());
    }
    if (from.has_target_arena_level()) {
      set_target_arena_level(from.target_arena_level());
    }
    if (from.has_target()) {
      mutable_target()->::proto::common::role_cross_data::MergeFrom(from.target());
    }
    if (from.has_own_rank_up()) {
      set_own_rank_up(from.own_rank_up());
    }
    if (from.has_own_new_rank()) {
      set_own_new_rank(from.own_new_rank());
    }
    if (from.has_server_id()) {
      set_server_id(from.server_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void rg_arena_battle_result_notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void rg_arena_battle_result_notify::CopyFrom(const rg_arena_battle_result_notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool rg_arena_battle_result_notify::IsInitialized() const {

  return true;
}

void rg_arena_battle_result_notify::Swap(rg_arena_battle_result_notify* other) {
  if (other != this) {
    std::swap(is_win_, other->is_win_);
    std::swap(target_score_, other->target_score_);
    std::swap(target_arena_level_, other->target_arena_level_);
    std::swap(target_, other->target_);
    std::swap(own_rank_up_, other->own_rank_up_);
    std::swap(own_new_rank_, other->own_new_rank_);
    std::swap(server_id_, other->server_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata rg_arena_battle_result_notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = rg_arena_battle_result_notify_descriptor_;
  metadata.reflection = rg_arena_battle_result_notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int gr_get_arena_rank_data_request::kRankStartPosFieldNumber;
const int gr_get_arena_rank_data_request::kServerIdFieldNumber;
#endif  // !_MSC_VER

gr_get_arena_rank_data_request::gr_get_arena_rank_data_request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gr_get_arena_rank_data_request::InitAsDefaultInstance() {
}

gr_get_arena_rank_data_request::gr_get_arena_rank_data_request(const gr_get_arena_rank_data_request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gr_get_arena_rank_data_request::SharedCtor() {
  _cached_size_ = 0;
  rank_start_pos_ = 0u;
  server_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gr_get_arena_rank_data_request::~gr_get_arena_rank_data_request() {
  SharedDtor();
}

void gr_get_arena_rank_data_request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void gr_get_arena_rank_data_request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gr_get_arena_rank_data_request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gr_get_arena_rank_data_request_descriptor_;
}

const gr_get_arena_rank_data_request& gr_get_arena_rank_data_request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

gr_get_arena_rank_data_request* gr_get_arena_rank_data_request::default_instance_ = NULL;

gr_get_arena_rank_data_request* gr_get_arena_rank_data_request::New() const {
  return new gr_get_arena_rank_data_request;
}

void gr_get_arena_rank_data_request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rank_start_pos_ = 0u;
    server_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gr_get_arena_rank_data_request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 rank_start_pos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rank_start_pos_)));
          set_has_rank_start_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_server_id;
        break;
      }

      // optional uint32 server_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_server_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_id_)));
          set_has_server_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gr_get_arena_rank_data_request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 rank_start_pos = 1;
  if (has_rank_start_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->rank_start_pos(), output);
  }

  // optional uint32 server_id = 2;
  if (has_server_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->server_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gr_get_arena_rank_data_request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 rank_start_pos = 1;
  if (has_rank_start_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->rank_start_pos(), target);
  }

  // optional uint32 server_id = 2;
  if (has_server_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->server_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gr_get_arena_rank_data_request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 rank_start_pos = 1;
    if (has_rank_start_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rank_start_pos());
    }

    // optional uint32 server_id = 2;
    if (has_server_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gr_get_arena_rank_data_request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gr_get_arena_rank_data_request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gr_get_arena_rank_data_request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gr_get_arena_rank_data_request::MergeFrom(const gr_get_arena_rank_data_request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rank_start_pos()) {
      set_rank_start_pos(from.rank_start_pos());
    }
    if (from.has_server_id()) {
      set_server_id(from.server_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gr_get_arena_rank_data_request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gr_get_arena_rank_data_request::CopyFrom(const gr_get_arena_rank_data_request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gr_get_arena_rank_data_request::IsInitialized() const {

  return true;
}

void gr_get_arena_rank_data_request::Swap(gr_get_arena_rank_data_request* other) {
  if (other != this) {
    std::swap(rank_start_pos_, other->rank_start_pos_);
    std::swap(server_id_, other->server_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gr_get_arena_rank_data_request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gr_get_arena_rank_data_request_descriptor_;
  metadata.reflection = gr_get_arena_rank_data_request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int rg_get_arena_rank_data_reply::kRandDataFieldNumber;
const int rg_get_arena_rank_data_reply::kServerIdFieldNumber;
#endif  // !_MSC_VER

rg_get_arena_rank_data_reply::rg_get_arena_rank_data_reply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void rg_get_arena_rank_data_reply::InitAsDefaultInstance() {
  rand_data_ = const_cast< ::proto::common::arena_rank_info_array*>(&::proto::common::arena_rank_info_array::default_instance());
}

rg_get_arena_rank_data_reply::rg_get_arena_rank_data_reply(const rg_get_arena_rank_data_reply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void rg_get_arena_rank_data_reply::SharedCtor() {
  _cached_size_ = 0;
  rand_data_ = NULL;
  server_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

rg_get_arena_rank_data_reply::~rg_get_arena_rank_data_reply() {
  SharedDtor();
}

void rg_get_arena_rank_data_reply::SharedDtor() {
  if (this != default_instance_) {
    delete rand_data_;
  }
}

void rg_get_arena_rank_data_reply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* rg_get_arena_rank_data_reply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return rg_get_arena_rank_data_reply_descriptor_;
}

const rg_get_arena_rank_data_reply& rg_get_arena_rank_data_reply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

rg_get_arena_rank_data_reply* rg_get_arena_rank_data_reply::default_instance_ = NULL;

rg_get_arena_rank_data_reply* rg_get_arena_rank_data_reply::New() const {
  return new rg_get_arena_rank_data_reply;
}

void rg_get_arena_rank_data_reply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_rand_data()) {
      if (rand_data_ != NULL) rand_data_->::proto::common::arena_rank_info_array::Clear();
    }
    server_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool rg_get_arena_rank_data_reply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.common.arena_rank_info_array rand_data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rand_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_server_id;
        break;
      }

      // optional uint32 server_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_server_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_id_)));
          set_has_server_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void rg_get_arena_rank_data_reply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .proto.common.arena_rank_info_array rand_data = 1;
  if (has_rand_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rand_data(), output);
  }

  // optional uint32 server_id = 2;
  if (has_server_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->server_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* rg_get_arena_rank_data_reply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .proto.common.arena_rank_info_array rand_data = 1;
  if (has_rand_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->rand_data(), target);
  }

  // optional uint32 server_id = 2;
  if (has_server_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->server_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int rg_get_arena_rank_data_reply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .proto.common.arena_rank_info_array rand_data = 1;
    if (has_rand_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rand_data());
    }

    // optional uint32 server_id = 2;
    if (has_server_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void rg_get_arena_rank_data_reply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const rg_get_arena_rank_data_reply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const rg_get_arena_rank_data_reply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void rg_get_arena_rank_data_reply::MergeFrom(const rg_get_arena_rank_data_reply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rand_data()) {
      mutable_rand_data()->::proto::common::arena_rank_info_array::MergeFrom(from.rand_data());
    }
    if (from.has_server_id()) {
      set_server_id(from.server_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void rg_get_arena_rank_data_reply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void rg_get_arena_rank_data_reply::CopyFrom(const rg_get_arena_rank_data_reply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool rg_get_arena_rank_data_reply::IsInitialized() const {

  return true;
}

void rg_get_arena_rank_data_reply::Swap(rg_get_arena_rank_data_reply* other) {
  if (other != this) {
    std::swap(rand_data_, other->rand_data_);
    std::swap(server_id_, other->server_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata rg_get_arena_rank_data_reply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = rg_get_arena_rank_data_reply_descriptor_;
  metadata.reflection = rg_get_arena_rank_data_reply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int gr_arena_self_rank_request::kServerIdFieldNumber;
#endif  // !_MSC_VER

gr_arena_self_rank_request::gr_arena_self_rank_request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gr_arena_self_rank_request::InitAsDefaultInstance() {
}

gr_arena_self_rank_request::gr_arena_self_rank_request(const gr_arena_self_rank_request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gr_arena_self_rank_request::SharedCtor() {
  _cached_size_ = 0;
  server_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gr_arena_self_rank_request::~gr_arena_self_rank_request() {
  SharedDtor();
}

void gr_arena_self_rank_request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void gr_arena_self_rank_request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gr_arena_self_rank_request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gr_arena_self_rank_request_descriptor_;
}

const gr_arena_self_rank_request& gr_arena_self_rank_request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

gr_arena_self_rank_request* gr_arena_self_rank_request::default_instance_ = NULL;

gr_arena_self_rank_request* gr_arena_self_rank_request::New() const {
  return new gr_arena_self_rank_request;
}

void gr_arena_self_rank_request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    server_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gr_arena_self_rank_request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 server_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_id_)));
          set_has_server_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gr_arena_self_rank_request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 server_id = 1;
  if (has_server_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->server_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gr_arena_self_rank_request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 server_id = 1;
  if (has_server_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->server_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gr_arena_self_rank_request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 server_id = 1;
    if (has_server_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gr_arena_self_rank_request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gr_arena_self_rank_request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gr_arena_self_rank_request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gr_arena_self_rank_request::MergeFrom(const gr_arena_self_rank_request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_server_id()) {
      set_server_id(from.server_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gr_arena_self_rank_request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gr_arena_self_rank_request::CopyFrom(const gr_arena_self_rank_request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gr_arena_self_rank_request::IsInitialized() const {

  return true;
}

void gr_arena_self_rank_request::Swap(gr_arena_self_rank_request* other) {
  if (other != this) {
    std::swap(server_id_, other->server_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gr_arena_self_rank_request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gr_arena_self_rank_request_descriptor_;
  metadata.reflection = gr_arena_self_rank_request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int rg_arena_self_rank_reply::kServerIdFieldNumber;
const int rg_arena_self_rank_reply::kRankFieldNumber;
#endif  // !_MSC_VER

rg_arena_self_rank_reply::rg_arena_self_rank_reply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void rg_arena_self_rank_reply::InitAsDefaultInstance() {
}

rg_arena_self_rank_reply::rg_arena_self_rank_reply(const rg_arena_self_rank_reply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void rg_arena_self_rank_reply::SharedCtor() {
  _cached_size_ = 0;
  server_id_ = 0u;
  rank_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

rg_arena_self_rank_reply::~rg_arena_self_rank_reply() {
  SharedDtor();
}

void rg_arena_self_rank_reply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void rg_arena_self_rank_reply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* rg_arena_self_rank_reply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return rg_arena_self_rank_reply_descriptor_;
}

const rg_arena_self_rank_reply& rg_arena_self_rank_reply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

rg_arena_self_rank_reply* rg_arena_self_rank_reply::default_instance_ = NULL;

rg_arena_self_rank_reply* rg_arena_self_rank_reply::New() const {
  return new rg_arena_self_rank_reply;
}

void rg_arena_self_rank_reply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    server_id_ = 0u;
    rank_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool rg_arena_self_rank_reply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 server_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_id_)));
          set_has_server_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_rank;
        break;
      }

      // optional uint32 rank = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void rg_arena_self_rank_reply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 server_id = 1;
  if (has_server_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->server_id(), output);
  }

  // optional uint32 rank = 2;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->rank(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* rg_arena_self_rank_reply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 server_id = 1;
  if (has_server_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->server_id(), target);
  }

  // optional uint32 rank = 2;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->rank(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int rg_arena_self_rank_reply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 server_id = 1;
    if (has_server_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_id());
    }

    // optional uint32 rank = 2;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rank());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void rg_arena_self_rank_reply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const rg_arena_self_rank_reply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const rg_arena_self_rank_reply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void rg_arena_self_rank_reply::MergeFrom(const rg_arena_self_rank_reply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_server_id()) {
      set_server_id(from.server_id());
    }
    if (from.has_rank()) {
      set_rank(from.rank());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void rg_arena_self_rank_reply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void rg_arena_self_rank_reply::CopyFrom(const rg_arena_self_rank_reply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool rg_arena_self_rank_reply::IsInitialized() const {

  return true;
}

void rg_arena_self_rank_reply::Swap(rg_arena_self_rank_reply* other) {
  if (other != this) {
    std::swap(server_id_, other->server_id_);
    std::swap(rank_, other->rank_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata rg_arena_self_rank_reply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = rg_arena_self_rank_reply_descriptor_;
  metadata.reflection = rg_arena_self_rank_reply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ge_arena_fight_data_notify::kFightValueFieldNumber;
const int ge_arena_fight_data_notify::kFightDataFieldNumber;
#endif  // !_MSC_VER

ge_arena_fight_data_notify::ge_arena_fight_data_notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ge_arena_fight_data_notify::InitAsDefaultInstance() {
  fight_data_ = const_cast< ::proto::common::mirror_fight_data*>(&::proto::common::mirror_fight_data::default_instance());
}

ge_arena_fight_data_notify::ge_arena_fight_data_notify(const ge_arena_fight_data_notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ge_arena_fight_data_notify::SharedCtor() {
  _cached_size_ = 0;
  fight_value_ = 0u;
  fight_data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ge_arena_fight_data_notify::~ge_arena_fight_data_notify() {
  SharedDtor();
}

void ge_arena_fight_data_notify::SharedDtor() {
  if (this != default_instance_) {
    delete fight_data_;
  }
}

void ge_arena_fight_data_notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ge_arena_fight_data_notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ge_arena_fight_data_notify_descriptor_;
}

const ge_arena_fight_data_notify& ge_arena_fight_data_notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

ge_arena_fight_data_notify* ge_arena_fight_data_notify::default_instance_ = NULL;

ge_arena_fight_data_notify* ge_arena_fight_data_notify::New() const {
  return new ge_arena_fight_data_notify;
}

void ge_arena_fight_data_notify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    fight_value_ = 0u;
    if (has_fight_data()) {
      if (fight_data_ != NULL) fight_data_->::proto::common::mirror_fight_data::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ge_arena_fight_data_notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 fight_value = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fight_value_)));
          set_has_fight_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_fight_data;
        break;
      }

      // optional .proto.common.mirror_fight_data fight_data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fight_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fight_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ge_arena_fight_data_notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 fight_value = 1;
  if (has_fight_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->fight_value(), output);
  }

  // optional .proto.common.mirror_fight_data fight_data = 2;
  if (has_fight_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->fight_data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ge_arena_fight_data_notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 fight_value = 1;
  if (has_fight_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->fight_value(), target);
  }

  // optional .proto.common.mirror_fight_data fight_data = 2;
  if (has_fight_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->fight_data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ge_arena_fight_data_notify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 fight_value = 1;
    if (has_fight_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fight_value());
    }

    // optional .proto.common.mirror_fight_data fight_data = 2;
    if (has_fight_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fight_data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ge_arena_fight_data_notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ge_arena_fight_data_notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ge_arena_fight_data_notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ge_arena_fight_data_notify::MergeFrom(const ge_arena_fight_data_notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fight_value()) {
      set_fight_value(from.fight_value());
    }
    if (from.has_fight_data()) {
      mutable_fight_data()->::proto::common::mirror_fight_data::MergeFrom(from.fight_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ge_arena_fight_data_notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ge_arena_fight_data_notify::CopyFrom(const ge_arena_fight_data_notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ge_arena_fight_data_notify::IsInitialized() const {

  return true;
}

void ge_arena_fight_data_notify::Swap(ge_arena_fight_data_notify* other) {
  if (other != this) {
    std::swap(fight_value_, other->fight_value_);
    std::swap(fight_data_, other->fight_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ge_arena_fight_data_notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ge_arena_fight_data_notify_descriptor_;
  metadata.reflection = ge_arena_fight_data_notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ge_role_online_notify::kOnlineFieldNumber;
#endif  // !_MSC_VER

ge_role_online_notify::ge_role_online_notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ge_role_online_notify::InitAsDefaultInstance() {
}

ge_role_online_notify::ge_role_online_notify(const ge_role_online_notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ge_role_online_notify::SharedCtor() {
  _cached_size_ = 0;
  online_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ge_role_online_notify::~ge_role_online_notify() {
  SharedDtor();
}

void ge_role_online_notify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ge_role_online_notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ge_role_online_notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ge_role_online_notify_descriptor_;
}

const ge_role_online_notify& ge_role_online_notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

ge_role_online_notify* ge_role_online_notify::default_instance_ = NULL;

ge_role_online_notify* ge_role_online_notify::New() const {
  return new ge_role_online_notify;
}

void ge_role_online_notify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    online_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ge_role_online_notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 online = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &online_)));
          set_has_online();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ge_role_online_notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 online = 1;
  if (has_online()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->online(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ge_role_online_notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 online = 1;
  if (has_online()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->online(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ge_role_online_notify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 online = 1;
    if (has_online()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->online());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ge_role_online_notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ge_role_online_notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ge_role_online_notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ge_role_online_notify::MergeFrom(const ge_role_online_notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_online()) {
      set_online(from.online());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ge_role_online_notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ge_role_online_notify::CopyFrom(const ge_role_online_notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ge_role_online_notify::IsInitialized() const {

  return true;
}

void ge_role_online_notify::Swap(ge_role_online_notify* other) {
  if (other != this) {
    std::swap(online_, other->online_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ge_role_online_notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ge_role_online_notify_descriptor_;
  metadata.reflection = ge_role_online_notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ge_challenge_request::kTargetUidFieldNumber;
#endif  // !_MSC_VER

ge_challenge_request::ge_challenge_request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ge_challenge_request::InitAsDefaultInstance() {
}

ge_challenge_request::ge_challenge_request(const ge_challenge_request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ge_challenge_request::SharedCtor() {
  _cached_size_ = 0;
  target_uid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ge_challenge_request::~ge_challenge_request() {
  SharedDtor();
}

void ge_challenge_request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ge_challenge_request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ge_challenge_request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ge_challenge_request_descriptor_;
}

const ge_challenge_request& ge_challenge_request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

ge_challenge_request* ge_challenge_request::default_instance_ = NULL;

ge_challenge_request* ge_challenge_request::New() const {
  return new ge_challenge_request;
}

void ge_challenge_request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    target_uid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ge_challenge_request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 target_uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &target_uid_)));
          set_has_target_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ge_challenge_request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 target_uid = 1;
  if (has_target_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->target_uid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ge_challenge_request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 target_uid = 1;
  if (has_target_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->target_uid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ge_challenge_request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 target_uid = 1;
    if (has_target_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->target_uid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ge_challenge_request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ge_challenge_request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ge_challenge_request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ge_challenge_request::MergeFrom(const ge_challenge_request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_target_uid()) {
      set_target_uid(from.target_uid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ge_challenge_request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ge_challenge_request::CopyFrom(const ge_challenge_request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ge_challenge_request::IsInitialized() const {

  return true;
}

void ge_challenge_request::Swap(ge_challenge_request* other) {
  if (other != this) {
    std::swap(target_uid_, other->target_uid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ge_challenge_request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ge_challenge_request_descriptor_;
  metadata.reflection = ge_challenge_request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int eg_challenge_reply::kReplyCodeFieldNumber;
#endif  // !_MSC_VER

eg_challenge_reply::eg_challenge_reply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void eg_challenge_reply::InitAsDefaultInstance() {
}

eg_challenge_reply::eg_challenge_reply(const eg_challenge_reply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void eg_challenge_reply::SharedCtor() {
  _cached_size_ = 0;
  reply_code_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

eg_challenge_reply::~eg_challenge_reply() {
  SharedDtor();
}

void eg_challenge_reply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void eg_challenge_reply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* eg_challenge_reply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return eg_challenge_reply_descriptor_;
}

const eg_challenge_reply& eg_challenge_reply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

eg_challenge_reply* eg_challenge_reply::default_instance_ = NULL;

eg_challenge_reply* eg_challenge_reply::New() const {
  return new eg_challenge_reply;
}

void eg_challenge_reply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    reply_code_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool eg_challenge_reply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 reply_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reply_code_)));
          set_has_reply_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void eg_challenge_reply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 reply_code = 1;
  if (has_reply_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->reply_code(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* eg_challenge_reply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 reply_code = 1;
  if (has_reply_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->reply_code(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int eg_challenge_reply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 reply_code = 1;
    if (has_reply_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reply_code());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void eg_challenge_reply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const eg_challenge_reply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const eg_challenge_reply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void eg_challenge_reply::MergeFrom(const eg_challenge_reply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reply_code()) {
      set_reply_code(from.reply_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void eg_challenge_reply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void eg_challenge_reply::CopyFrom(const eg_challenge_reply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool eg_challenge_reply::IsInitialized() const {

  return true;
}

void eg_challenge_reply::Swap(eg_challenge_reply* other) {
  if (other != this) {
    std::swap(reply_code_, other->reply_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata eg_challenge_reply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = eg_challenge_reply_descriptor_;
  metadata.reflection = eg_challenge_reply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ge_challenge_process_request::kProcessFieldNumber;
#endif  // !_MSC_VER

ge_challenge_process_request::ge_challenge_process_request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ge_challenge_process_request::InitAsDefaultInstance() {
}

ge_challenge_process_request::ge_challenge_process_request(const ge_challenge_process_request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ge_challenge_process_request::SharedCtor() {
  _cached_size_ = 0;
  process_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ge_challenge_process_request::~ge_challenge_process_request() {
  SharedDtor();
}

void ge_challenge_process_request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ge_challenge_process_request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ge_challenge_process_request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ge_challenge_process_request_descriptor_;
}

const ge_challenge_process_request& ge_challenge_process_request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

ge_challenge_process_request* ge_challenge_process_request::default_instance_ = NULL;

ge_challenge_process_request* ge_challenge_process_request::New() const {
  return new ge_challenge_process_request;
}

void ge_challenge_process_request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    process_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ge_challenge_process_request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 process = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &process_)));
          set_has_process();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ge_challenge_process_request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 process = 1;
  if (has_process()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->process(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ge_challenge_process_request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 process = 1;
  if (has_process()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->process(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ge_challenge_process_request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 process = 1;
    if (has_process()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->process());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ge_challenge_process_request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ge_challenge_process_request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ge_challenge_process_request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ge_challenge_process_request::MergeFrom(const ge_challenge_process_request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_process()) {
      set_process(from.process());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ge_challenge_process_request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ge_challenge_process_request::CopyFrom(const ge_challenge_process_request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ge_challenge_process_request::IsInitialized() const {

  return true;
}

void ge_challenge_process_request::Swap(ge_challenge_process_request* other) {
  if (other != this) {
    std::swap(process_, other->process_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ge_challenge_process_request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ge_challenge_process_request_descriptor_;
  metadata.reflection = ge_challenge_process_request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int eg_challenge_process_reply::kReplyCodeFieldNumber;
const int eg_challenge_process_reply::kProcessFieldNumber;
#endif  // !_MSC_VER

eg_challenge_process_reply::eg_challenge_process_reply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void eg_challenge_process_reply::InitAsDefaultInstance() {
}

eg_challenge_process_reply::eg_challenge_process_reply(const eg_challenge_process_reply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void eg_challenge_process_reply::SharedCtor() {
  _cached_size_ = 0;
  reply_code_ = 0u;
  process_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

eg_challenge_process_reply::~eg_challenge_process_reply() {
  SharedDtor();
}

void eg_challenge_process_reply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void eg_challenge_process_reply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* eg_challenge_process_reply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return eg_challenge_process_reply_descriptor_;
}

const eg_challenge_process_reply& eg_challenge_process_reply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

eg_challenge_process_reply* eg_challenge_process_reply::default_instance_ = NULL;

eg_challenge_process_reply* eg_challenge_process_reply::New() const {
  return new eg_challenge_process_reply;
}

void eg_challenge_process_reply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    reply_code_ = 0u;
    process_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool eg_challenge_process_reply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 reply_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reply_code_)));
          set_has_reply_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_process;
        break;
      }

      // optional uint32 process = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_process:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &process_)));
          set_has_process();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void eg_challenge_process_reply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 reply_code = 1;
  if (has_reply_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->reply_code(), output);
  }

  // optional uint32 process = 2;
  if (has_process()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->process(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* eg_challenge_process_reply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 reply_code = 1;
  if (has_reply_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->reply_code(), target);
  }

  // optional uint32 process = 2;
  if (has_process()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->process(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int eg_challenge_process_reply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 reply_code = 1;
    if (has_reply_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reply_code());
    }

    // optional uint32 process = 2;
    if (has_process()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->process());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void eg_challenge_process_reply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const eg_challenge_process_reply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const eg_challenge_process_reply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void eg_challenge_process_reply::MergeFrom(const eg_challenge_process_reply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reply_code()) {
      set_reply_code(from.reply_code());
    }
    if (from.has_process()) {
      set_process(from.process());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void eg_challenge_process_reply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void eg_challenge_process_reply::CopyFrom(const eg_challenge_process_reply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool eg_challenge_process_reply::IsInitialized() const {

  return true;
}

void eg_challenge_process_reply::Swap(eg_challenge_process_reply* other) {
  if (other != this) {
    std::swap(reply_code_, other->reply_code_);
    std::swap(process_, other->process_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata eg_challenge_process_reply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = eg_challenge_process_reply_descriptor_;
  metadata.reflection = eg_challenge_process_reply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int eg_challenge_fight_request::kTargetUidFieldNumber;
#endif  // !_MSC_VER

eg_challenge_fight_request::eg_challenge_fight_request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void eg_challenge_fight_request::InitAsDefaultInstance() {
}

eg_challenge_fight_request::eg_challenge_fight_request(const eg_challenge_fight_request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void eg_challenge_fight_request::SharedCtor() {
  _cached_size_ = 0;
  target_uid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

eg_challenge_fight_request::~eg_challenge_fight_request() {
  SharedDtor();
}

void eg_challenge_fight_request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void eg_challenge_fight_request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* eg_challenge_fight_request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return eg_challenge_fight_request_descriptor_;
}

const eg_challenge_fight_request& eg_challenge_fight_request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

eg_challenge_fight_request* eg_challenge_fight_request::default_instance_ = NULL;

eg_challenge_fight_request* eg_challenge_fight_request::New() const {
  return new eg_challenge_fight_request;
}

void eg_challenge_fight_request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    target_uid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool eg_challenge_fight_request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 target_uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &target_uid_)));
          set_has_target_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void eg_challenge_fight_request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 target_uid = 1;
  if (has_target_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->target_uid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* eg_challenge_fight_request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 target_uid = 1;
  if (has_target_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->target_uid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int eg_challenge_fight_request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 target_uid = 1;
    if (has_target_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->target_uid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void eg_challenge_fight_request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const eg_challenge_fight_request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const eg_challenge_fight_request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void eg_challenge_fight_request::MergeFrom(const eg_challenge_fight_request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_target_uid()) {
      set_target_uid(from.target_uid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void eg_challenge_fight_request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void eg_challenge_fight_request::CopyFrom(const eg_challenge_fight_request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool eg_challenge_fight_request::IsInitialized() const {

  return true;
}

void eg_challenge_fight_request::Swap(eg_challenge_fight_request* other) {
  if (other != this) {
    std::swap(target_uid_, other->target_uid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata eg_challenge_fight_request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = eg_challenge_fight_request_descriptor_;
  metadata.reflection = eg_challenge_fight_request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ge_challenge_fight_reply::kResultFieldNumber;
#endif  // !_MSC_VER

ge_challenge_fight_reply::ge_challenge_fight_reply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ge_challenge_fight_reply::InitAsDefaultInstance() {
}

ge_challenge_fight_reply::ge_challenge_fight_reply(const ge_challenge_fight_reply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ge_challenge_fight_reply::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ge_challenge_fight_reply::~ge_challenge_fight_reply() {
  SharedDtor();
}

void ge_challenge_fight_reply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ge_challenge_fight_reply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ge_challenge_fight_reply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ge_challenge_fight_reply_descriptor_;
}

const ge_challenge_fight_reply& ge_challenge_fight_reply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

ge_challenge_fight_reply* ge_challenge_fight_reply::default_instance_ = NULL;

ge_challenge_fight_reply* ge_challenge_fight_reply::New() const {
  return new ge_challenge_fight_reply;
}

void ge_challenge_fight_reply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ge_challenge_fight_reply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ge_challenge_fight_reply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ge_challenge_fight_reply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ge_challenge_fight_reply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ge_challenge_fight_reply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ge_challenge_fight_reply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ge_challenge_fight_reply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ge_challenge_fight_reply::MergeFrom(const ge_challenge_fight_reply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ge_challenge_fight_reply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ge_challenge_fight_reply::CopyFrom(const ge_challenge_fight_reply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ge_challenge_fight_reply::IsInitialized() const {

  return true;
}

void ge_challenge_fight_reply::Swap(ge_challenge_fight_reply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ge_challenge_fight_reply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ge_challenge_fight_reply_descriptor_;
  metadata.reflection = ge_challenge_fight_reply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ge_pk_beat_criminal_notify::kCriminalUidFieldNumber;
#endif  // !_MSC_VER

ge_pk_beat_criminal_notify::ge_pk_beat_criminal_notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ge_pk_beat_criminal_notify::InitAsDefaultInstance() {
}

ge_pk_beat_criminal_notify::ge_pk_beat_criminal_notify(const ge_pk_beat_criminal_notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ge_pk_beat_criminal_notify::SharedCtor() {
  _cached_size_ = 0;
  criminal_uid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ge_pk_beat_criminal_notify::~ge_pk_beat_criminal_notify() {
  SharedDtor();
}

void ge_pk_beat_criminal_notify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ge_pk_beat_criminal_notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ge_pk_beat_criminal_notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ge_pk_beat_criminal_notify_descriptor_;
}

const ge_pk_beat_criminal_notify& ge_pk_beat_criminal_notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

ge_pk_beat_criminal_notify* ge_pk_beat_criminal_notify::default_instance_ = NULL;

ge_pk_beat_criminal_notify* ge_pk_beat_criminal_notify::New() const {
  return new ge_pk_beat_criminal_notify;
}

void ge_pk_beat_criminal_notify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    criminal_uid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ge_pk_beat_criminal_notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 criminal_uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &criminal_uid_)));
          set_has_criminal_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ge_pk_beat_criminal_notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 criminal_uid = 1;
  if (has_criminal_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->criminal_uid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ge_pk_beat_criminal_notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 criminal_uid = 1;
  if (has_criminal_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->criminal_uid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ge_pk_beat_criminal_notify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 criminal_uid = 1;
    if (has_criminal_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->criminal_uid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ge_pk_beat_criminal_notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ge_pk_beat_criminal_notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ge_pk_beat_criminal_notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ge_pk_beat_criminal_notify::MergeFrom(const ge_pk_beat_criminal_notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_criminal_uid()) {
      set_criminal_uid(from.criminal_uid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ge_pk_beat_criminal_notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ge_pk_beat_criminal_notify::CopyFrom(const ge_pk_beat_criminal_notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ge_pk_beat_criminal_notify::IsInitialized() const {

  return true;
}

void ge_pk_beat_criminal_notify::Swap(ge_pk_beat_criminal_notify* other) {
  if (other != this) {
    std::swap(criminal_uid_, other->criminal_uid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ge_pk_beat_criminal_notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ge_pk_beat_criminal_notify_descriptor_;
  metadata.reflection = ge_pk_beat_criminal_notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

eg_challenge_transfer_notify::eg_challenge_transfer_notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void eg_challenge_transfer_notify::InitAsDefaultInstance() {
}

eg_challenge_transfer_notify::eg_challenge_transfer_notify(const eg_challenge_transfer_notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void eg_challenge_transfer_notify::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

eg_challenge_transfer_notify::~eg_challenge_transfer_notify() {
  SharedDtor();
}

void eg_challenge_transfer_notify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void eg_challenge_transfer_notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* eg_challenge_transfer_notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return eg_challenge_transfer_notify_descriptor_;
}

const eg_challenge_transfer_notify& eg_challenge_transfer_notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

eg_challenge_transfer_notify* eg_challenge_transfer_notify::default_instance_ = NULL;

eg_challenge_transfer_notify* eg_challenge_transfer_notify::New() const {
  return new eg_challenge_transfer_notify;
}

void eg_challenge_transfer_notify::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool eg_challenge_transfer_notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void eg_challenge_transfer_notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* eg_challenge_transfer_notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int eg_challenge_transfer_notify::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void eg_challenge_transfer_notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const eg_challenge_transfer_notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const eg_challenge_transfer_notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void eg_challenge_transfer_notify::MergeFrom(const eg_challenge_transfer_notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void eg_challenge_transfer_notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void eg_challenge_transfer_notify::CopyFrom(const eg_challenge_transfer_notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool eg_challenge_transfer_notify::IsInitialized() const {

  return true;
}

void eg_challenge_transfer_notify::Swap(eg_challenge_transfer_notify* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata eg_challenge_transfer_notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = eg_challenge_transfer_notify_descriptor_;
  metadata.reflection = eg_challenge_transfer_notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int eg_king_war_state_notify::kCountryIdFieldNumber;
const int eg_king_war_state_notify::kStateFieldNumber;
const int eg_king_war_state_notify::kDefFamilyIdFieldNumber;
const int eg_king_war_state_notify::kDefFamilyNameFieldNumber;
const int eg_king_war_state_notify::kAttFamilyIdFieldNumber;
const int eg_king_war_state_notify::kAttFamilyNameFieldNumber;
const int eg_king_war_state_notify::kDefHelpFamilyFieldNumber;
const int eg_king_war_state_notify::kDefHelpFamilyNameFieldNumber;
const int eg_king_war_state_notify::kAttHelpFamilyFieldNumber;
const int eg_king_war_state_notify::kAttHelpFamilyNameFieldNumber;
#endif  // !_MSC_VER

eg_king_war_state_notify::eg_king_war_state_notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void eg_king_war_state_notify::InitAsDefaultInstance() {
}

eg_king_war_state_notify::eg_king_war_state_notify(const eg_king_war_state_notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void eg_king_war_state_notify::SharedCtor() {
  _cached_size_ = 0;
  country_id_ = 0u;
  state_ = 0;
  def_family_id_ = GOOGLE_ULONGLONG(0);
  def_family_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  att_family_id_ = GOOGLE_ULONGLONG(0);
  att_family_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  def_help_family_ = GOOGLE_ULONGLONG(0);
  def_help_family_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  att_help_family_ = GOOGLE_ULONGLONG(0);
  att_help_family_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

eg_king_war_state_notify::~eg_king_war_state_notify() {
  SharedDtor();
}

void eg_king_war_state_notify::SharedDtor() {
  if (def_family_name_ != &::google::protobuf::internal::kEmptyString) {
    delete def_family_name_;
  }
  if (att_family_name_ != &::google::protobuf::internal::kEmptyString) {
    delete att_family_name_;
  }
  if (def_help_family_name_ != &::google::protobuf::internal::kEmptyString) {
    delete def_help_family_name_;
  }
  if (att_help_family_name_ != &::google::protobuf::internal::kEmptyString) {
    delete att_help_family_name_;
  }
  if (this != default_instance_) {
  }
}

void eg_king_war_state_notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* eg_king_war_state_notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return eg_king_war_state_notify_descriptor_;
}

const eg_king_war_state_notify& eg_king_war_state_notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

eg_king_war_state_notify* eg_king_war_state_notify::default_instance_ = NULL;

eg_king_war_state_notify* eg_king_war_state_notify::New() const {
  return new eg_king_war_state_notify;
}

void eg_king_war_state_notify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    country_id_ = 0u;
    state_ = 0;
    def_family_id_ = GOOGLE_ULONGLONG(0);
    if (has_def_family_name()) {
      if (def_family_name_ != &::google::protobuf::internal::kEmptyString) {
        def_family_name_->clear();
      }
    }
    att_family_id_ = GOOGLE_ULONGLONG(0);
    if (has_att_family_name()) {
      if (att_family_name_ != &::google::protobuf::internal::kEmptyString) {
        att_family_name_->clear();
      }
    }
    def_help_family_ = GOOGLE_ULONGLONG(0);
    if (has_def_help_family_name()) {
      if (def_help_family_name_ != &::google::protobuf::internal::kEmptyString) {
        def_help_family_name_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    att_help_family_ = GOOGLE_ULONGLONG(0);
    if (has_att_help_family_name()) {
      if (att_help_family_name_ != &::google::protobuf::internal::kEmptyString) {
        att_help_family_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool eg_king_war_state_notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 country_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &country_id_)));
          set_has_country_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_state;
        break;
      }

      // optional .proto.common.king_war_state state = 2 [default = king_war_state_end];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::common::king_war_state_IsValid(value)) {
            set_state(static_cast< ::proto::common::king_war_state >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_def_family_id;
        break;
      }

      // optional uint64 def_family_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_def_family_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &def_family_id_)));
          set_has_def_family_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_def_family_name;
        break;
      }

      // optional string def_family_name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_def_family_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_def_family_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->def_family_name().data(), this->def_family_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_att_family_id;
        break;
      }

      // optional uint64 att_family_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_att_family_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &att_family_id_)));
          set_has_att_family_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_att_family_name;
        break;
      }

      // optional string att_family_name = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_att_family_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_att_family_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->att_family_name().data(), this->att_family_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_def_help_family;
        break;
      }

      // optional uint64 def_help_family = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_def_help_family:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &def_help_family_)));
          set_has_def_help_family();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_def_help_family_name;
        break;
      }

      // optional string def_help_family_name = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_def_help_family_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_def_help_family_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->def_help_family_name().data(), this->def_help_family_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_att_help_family;
        break;
      }

      // optional uint64 att_help_family = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_att_help_family:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &att_help_family_)));
          set_has_att_help_family();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_att_help_family_name;
        break;
      }

      // optional string att_help_family_name = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_att_help_family_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_att_help_family_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->att_help_family_name().data(), this->att_help_family_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void eg_king_war_state_notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 country_id = 1;
  if (has_country_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->country_id(), output);
  }

  // optional .proto.common.king_war_state state = 2 [default = king_war_state_end];
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->state(), output);
  }

  // optional uint64 def_family_id = 3;
  if (has_def_family_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->def_family_id(), output);
  }

  // optional string def_family_name = 4;
  if (has_def_family_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->def_family_name().data(), this->def_family_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->def_family_name(), output);
  }

  // optional uint64 att_family_id = 5;
  if (has_att_family_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->att_family_id(), output);
  }

  // optional string att_family_name = 6;
  if (has_att_family_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->att_family_name().data(), this->att_family_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->att_family_name(), output);
  }

  // optional uint64 def_help_family = 7;
  if (has_def_help_family()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->def_help_family(), output);
  }

  // optional string def_help_family_name = 8;
  if (has_def_help_family_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->def_help_family_name().data(), this->def_help_family_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->def_help_family_name(), output);
  }

  // optional uint64 att_help_family = 9;
  if (has_att_help_family()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->att_help_family(), output);
  }

  // optional string att_help_family_name = 10;
  if (has_att_help_family_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->att_help_family_name().data(), this->att_help_family_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->att_help_family_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* eg_king_war_state_notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 country_id = 1;
  if (has_country_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->country_id(), target);
  }

  // optional .proto.common.king_war_state state = 2 [default = king_war_state_end];
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->state(), target);
  }

  // optional uint64 def_family_id = 3;
  if (has_def_family_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->def_family_id(), target);
  }

  // optional string def_family_name = 4;
  if (has_def_family_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->def_family_name().data(), this->def_family_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->def_family_name(), target);
  }

  // optional uint64 att_family_id = 5;
  if (has_att_family_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->att_family_id(), target);
  }

  // optional string att_family_name = 6;
  if (has_att_family_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->att_family_name().data(), this->att_family_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->att_family_name(), target);
  }

  // optional uint64 def_help_family = 7;
  if (has_def_help_family()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->def_help_family(), target);
  }

  // optional string def_help_family_name = 8;
  if (has_def_help_family_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->def_help_family_name().data(), this->def_help_family_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->def_help_family_name(), target);
  }

  // optional uint64 att_help_family = 9;
  if (has_att_help_family()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->att_help_family(), target);
  }

  // optional string att_help_family_name = 10;
  if (has_att_help_family_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->att_help_family_name().data(), this->att_help_family_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->att_help_family_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int eg_king_war_state_notify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 country_id = 1;
    if (has_country_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->country_id());
    }

    // optional .proto.common.king_war_state state = 2 [default = king_war_state_end];
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
    }

    // optional uint64 def_family_id = 3;
    if (has_def_family_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->def_family_id());
    }

    // optional string def_family_name = 4;
    if (has_def_family_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->def_family_name());
    }

    // optional uint64 att_family_id = 5;
    if (has_att_family_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->att_family_id());
    }

    // optional string att_family_name = 6;
    if (has_att_family_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->att_family_name());
    }

    // optional uint64 def_help_family = 7;
    if (has_def_help_family()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->def_help_family());
    }

    // optional string def_help_family_name = 8;
    if (has_def_help_family_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->def_help_family_name());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint64 att_help_family = 9;
    if (has_att_help_family()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->att_help_family());
    }

    // optional string att_help_family_name = 10;
    if (has_att_help_family_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->att_help_family_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void eg_king_war_state_notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const eg_king_war_state_notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const eg_king_war_state_notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void eg_king_war_state_notify::MergeFrom(const eg_king_war_state_notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_country_id()) {
      set_country_id(from.country_id());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_def_family_id()) {
      set_def_family_id(from.def_family_id());
    }
    if (from.has_def_family_name()) {
      set_def_family_name(from.def_family_name());
    }
    if (from.has_att_family_id()) {
      set_att_family_id(from.att_family_id());
    }
    if (from.has_att_family_name()) {
      set_att_family_name(from.att_family_name());
    }
    if (from.has_def_help_family()) {
      set_def_help_family(from.def_help_family());
    }
    if (from.has_def_help_family_name()) {
      set_def_help_family_name(from.def_help_family_name());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_att_help_family()) {
      set_att_help_family(from.att_help_family());
    }
    if (from.has_att_help_family_name()) {
      set_att_help_family_name(from.att_help_family_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void eg_king_war_state_notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void eg_king_war_state_notify::CopyFrom(const eg_king_war_state_notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool eg_king_war_state_notify::IsInitialized() const {

  return true;
}

void eg_king_war_state_notify::Swap(eg_king_war_state_notify* other) {
  if (other != this) {
    std::swap(country_id_, other->country_id_);
    std::swap(state_, other->state_);
    std::swap(def_family_id_, other->def_family_id_);
    std::swap(def_family_name_, other->def_family_name_);
    std::swap(att_family_id_, other->att_family_id_);
    std::swap(att_family_name_, other->att_family_name_);
    std::swap(def_help_family_, other->def_help_family_);
    std::swap(def_help_family_name_, other->def_help_family_name_);
    std::swap(att_help_family_, other->att_help_family_);
    std::swap(att_help_family_name_, other->att_help_family_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata eg_king_war_state_notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = eg_king_war_state_notify_descriptor_;
  metadata.reflection = eg_king_war_state_notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int eg_king_war_time_end_notify::kCountryIdFieldNumber;
#endif  // !_MSC_VER

eg_king_war_time_end_notify::eg_king_war_time_end_notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void eg_king_war_time_end_notify::InitAsDefaultInstance() {
}

eg_king_war_time_end_notify::eg_king_war_time_end_notify(const eg_king_war_time_end_notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void eg_king_war_time_end_notify::SharedCtor() {
  _cached_size_ = 0;
  country_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

eg_king_war_time_end_notify::~eg_king_war_time_end_notify() {
  SharedDtor();
}

void eg_king_war_time_end_notify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void eg_king_war_time_end_notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* eg_king_war_time_end_notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return eg_king_war_time_end_notify_descriptor_;
}

const eg_king_war_time_end_notify& eg_king_war_time_end_notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

eg_king_war_time_end_notify* eg_king_war_time_end_notify::default_instance_ = NULL;

eg_king_war_time_end_notify* eg_king_war_time_end_notify::New() const {
  return new eg_king_war_time_end_notify;
}

void eg_king_war_time_end_notify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    country_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool eg_king_war_time_end_notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 country_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &country_id_)));
          set_has_country_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void eg_king_war_time_end_notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 country_id = 1;
  if (has_country_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->country_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* eg_king_war_time_end_notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 country_id = 1;
  if (has_country_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->country_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int eg_king_war_time_end_notify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 country_id = 1;
    if (has_country_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->country_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void eg_king_war_time_end_notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const eg_king_war_time_end_notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const eg_king_war_time_end_notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void eg_king_war_time_end_notify::MergeFrom(const eg_king_war_time_end_notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_country_id()) {
      set_country_id(from.country_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void eg_king_war_time_end_notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void eg_king_war_time_end_notify::CopyFrom(const eg_king_war_time_end_notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool eg_king_war_time_end_notify::IsInitialized() const {

  return true;
}

void eg_king_war_time_end_notify::Swap(eg_king_war_time_end_notify* other) {
  if (other != this) {
    std::swap(country_id_, other->country_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata eg_king_war_time_end_notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = eg_king_war_time_end_notify_descriptor_;
  metadata.reflection = eg_king_war_time_end_notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int king_war_personal::kUidFieldNumber;
const int king_war_personal::kExploitFieldNumber;
const int king_war_personal::kRankFieldNumber;
const int king_war_personal::kRankLevelFieldNumber;
const int king_war_personal::kExploitLevelFieldNumber;
#endif  // !_MSC_VER

king_war_personal::king_war_personal()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void king_war_personal::InitAsDefaultInstance() {
}

king_war_personal::king_war_personal(const king_war_personal& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void king_war_personal::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_ULONGLONG(0);
  exploit_ = GOOGLE_ULONGLONG(0);
  rank_ = 0u;
  rank_level_ = 0u;
  exploit_level_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

king_war_personal::~king_war_personal() {
  SharedDtor();
}

void king_war_personal::SharedDtor() {
  if (this != default_instance_) {
  }
}

void king_war_personal::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* king_war_personal::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return king_war_personal_descriptor_;
}

const king_war_personal& king_war_personal::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

king_war_personal* king_war_personal::default_instance_ = NULL;

king_war_personal* king_war_personal::New() const {
  return new king_war_personal;
}

void king_war_personal::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = GOOGLE_ULONGLONG(0);
    exploit_ = GOOGLE_ULONGLONG(0);
    rank_ = 0u;
    rank_level_ = 0u;
    exploit_level_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool king_war_personal::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_exploit;
        break;
      }

      // optional uint64 exploit = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exploit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &exploit_)));
          set_has_exploit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_rank;
        break;
      }

      // optional uint32 rank = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_rank_level;
        break;
      }

      // optional uint32 rank_level = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rank_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rank_level_)));
          set_has_rank_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_exploit_level;
        break;
      }

      // optional uint32 exploit_level = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exploit_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &exploit_level_)));
          set_has_exploit_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void king_war_personal::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uid(), output);
  }

  // optional uint64 exploit = 2;
  if (has_exploit()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->exploit(), output);
  }

  // optional uint32 rank = 3;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->rank(), output);
  }

  // optional uint32 rank_level = 4;
  if (has_rank_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->rank_level(), output);
  }

  // optional uint32 exploit_level = 5;
  if (has_exploit_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->exploit_level(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* king_war_personal::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->uid(), target);
  }

  // optional uint64 exploit = 2;
  if (has_exploit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->exploit(), target);
  }

  // optional uint32 rank = 3;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->rank(), target);
  }

  // optional uint32 rank_level = 4;
  if (has_rank_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->rank_level(), target);
  }

  // optional uint32 exploit_level = 5;
  if (has_exploit_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->exploit_level(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int king_war_personal::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uid());
    }

    // optional uint64 exploit = 2;
    if (has_exploit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->exploit());
    }

    // optional uint32 rank = 3;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rank());
    }

    // optional uint32 rank_level = 4;
    if (has_rank_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rank_level());
    }

    // optional uint32 exploit_level = 5;
    if (has_exploit_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->exploit_level());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void king_war_personal::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const king_war_personal* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const king_war_personal*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void king_war_personal::MergeFrom(const king_war_personal& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_exploit()) {
      set_exploit(from.exploit());
    }
    if (from.has_rank()) {
      set_rank(from.rank());
    }
    if (from.has_rank_level()) {
      set_rank_level(from.rank_level());
    }
    if (from.has_exploit_level()) {
      set_exploit_level(from.exploit_level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void king_war_personal::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void king_war_personal::CopyFrom(const king_war_personal& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool king_war_personal::IsInitialized() const {

  return true;
}

void king_war_personal::Swap(king_war_personal* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(exploit_, other->exploit_);
    std::swap(rank_, other->rank_);
    std::swap(rank_level_, other->rank_level_);
    std::swap(exploit_level_, other->exploit_level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata king_war_personal::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = king_war_personal_descriptor_;
  metadata.reflection = king_war_personal_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ge_king_war_result_notify::kCountryIdFieldNumber;
const int ge_king_war_result_notify::kWinFamilyIdFieldNumber;
const int ge_king_war_result_notify::kAllRolesFieldNumber;
#endif  // !_MSC_VER

ge_king_war_result_notify::ge_king_war_result_notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ge_king_war_result_notify::InitAsDefaultInstance() {
}

ge_king_war_result_notify::ge_king_war_result_notify(const ge_king_war_result_notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ge_king_war_result_notify::SharedCtor() {
  _cached_size_ = 0;
  country_id_ = 0u;
  win_family_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ge_king_war_result_notify::~ge_king_war_result_notify() {
  SharedDtor();
}

void ge_king_war_result_notify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ge_king_war_result_notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ge_king_war_result_notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ge_king_war_result_notify_descriptor_;
}

const ge_king_war_result_notify& ge_king_war_result_notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

ge_king_war_result_notify* ge_king_war_result_notify::default_instance_ = NULL;

ge_king_war_result_notify* ge_king_war_result_notify::New() const {
  return new ge_king_war_result_notify;
}

void ge_king_war_result_notify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    country_id_ = 0u;
    win_family_id_ = GOOGLE_ULONGLONG(0);
  }
  all_roles_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ge_king_war_result_notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 country_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &country_id_)));
          set_has_country_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_win_family_id;
        break;
      }

      // optional uint64 win_family_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_win_family_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &win_family_id_)));
          set_has_win_family_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_all_roles;
        break;
      }

      // repeated .proto.server.king_war_personal all_roles = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_all_roles:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_all_roles()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_all_roles;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ge_king_war_result_notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 country_id = 1;
  if (has_country_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->country_id(), output);
  }

  // optional uint64 win_family_id = 2;
  if (has_win_family_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->win_family_id(), output);
  }

  // repeated .proto.server.king_war_personal all_roles = 3;
  for (int i = 0; i < this->all_roles_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->all_roles(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ge_king_war_result_notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 country_id = 1;
  if (has_country_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->country_id(), target);
  }

  // optional uint64 win_family_id = 2;
  if (has_win_family_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->win_family_id(), target);
  }

  // repeated .proto.server.king_war_personal all_roles = 3;
  for (int i = 0; i < this->all_roles_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->all_roles(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ge_king_war_result_notify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 country_id = 1;
    if (has_country_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->country_id());
    }

    // optional uint64 win_family_id = 2;
    if (has_win_family_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->win_family_id());
    }

  }
  // repeated .proto.server.king_war_personal all_roles = 3;
  total_size += 1 * this->all_roles_size();
  for (int i = 0; i < this->all_roles_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->all_roles(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ge_king_war_result_notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ge_king_war_result_notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ge_king_war_result_notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ge_king_war_result_notify::MergeFrom(const ge_king_war_result_notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  all_roles_.MergeFrom(from.all_roles_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_country_id()) {
      set_country_id(from.country_id());
    }
    if (from.has_win_family_id()) {
      set_win_family_id(from.win_family_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ge_king_war_result_notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ge_king_war_result_notify::CopyFrom(const ge_king_war_result_notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ge_king_war_result_notify::IsInitialized() const {

  return true;
}

void ge_king_war_result_notify::Swap(ge_king_war_result_notify* other) {
  if (other != this) {
    std::swap(country_id_, other->country_id_);
    std::swap(win_family_id_, other->win_family_id_);
    all_roles_.Swap(&other->all_roles_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ge_king_war_result_notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ge_king_war_result_notify_descriptor_;
  metadata.reflection = ge_king_war_result_notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ge_king_war_scene_user_num_notify::kCountryIdFieldNumber;
const int ge_king_war_scene_user_num_notify::kAttNumFieldNumber;
const int ge_king_war_scene_user_num_notify::kDefNumFieldNumber;
#endif  // !_MSC_VER

ge_king_war_scene_user_num_notify::ge_king_war_scene_user_num_notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ge_king_war_scene_user_num_notify::InitAsDefaultInstance() {
}

ge_king_war_scene_user_num_notify::ge_king_war_scene_user_num_notify(const ge_king_war_scene_user_num_notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ge_king_war_scene_user_num_notify::SharedCtor() {
  _cached_size_ = 0;
  country_id_ = 0u;
  att_num_ = 0u;
  def_num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ge_king_war_scene_user_num_notify::~ge_king_war_scene_user_num_notify() {
  SharedDtor();
}

void ge_king_war_scene_user_num_notify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ge_king_war_scene_user_num_notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ge_king_war_scene_user_num_notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ge_king_war_scene_user_num_notify_descriptor_;
}

const ge_king_war_scene_user_num_notify& ge_king_war_scene_user_num_notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

ge_king_war_scene_user_num_notify* ge_king_war_scene_user_num_notify::default_instance_ = NULL;

ge_king_war_scene_user_num_notify* ge_king_war_scene_user_num_notify::New() const {
  return new ge_king_war_scene_user_num_notify;
}

void ge_king_war_scene_user_num_notify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    country_id_ = 0u;
    att_num_ = 0u;
    def_num_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ge_king_war_scene_user_num_notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 country_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &country_id_)));
          set_has_country_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_att_num;
        break;
      }

      // optional uint32 att_num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_att_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &att_num_)));
          set_has_att_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_def_num;
        break;
      }

      // optional uint32 def_num = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_def_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &def_num_)));
          set_has_def_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ge_king_war_scene_user_num_notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 country_id = 1;
  if (has_country_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->country_id(), output);
  }

  // optional uint32 att_num = 2;
  if (has_att_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->att_num(), output);
  }

  // optional uint32 def_num = 3;
  if (has_def_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->def_num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ge_king_war_scene_user_num_notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 country_id = 1;
  if (has_country_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->country_id(), target);
  }

  // optional uint32 att_num = 2;
  if (has_att_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->att_num(), target);
  }

  // optional uint32 def_num = 3;
  if (has_def_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->def_num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ge_king_war_scene_user_num_notify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 country_id = 1;
    if (has_country_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->country_id());
    }

    // optional uint32 att_num = 2;
    if (has_att_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->att_num());
    }

    // optional uint32 def_num = 3;
    if (has_def_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->def_num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ge_king_war_scene_user_num_notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ge_king_war_scene_user_num_notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ge_king_war_scene_user_num_notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ge_king_war_scene_user_num_notify::MergeFrom(const ge_king_war_scene_user_num_notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_country_id()) {
      set_country_id(from.country_id());
    }
    if (from.has_att_num()) {
      set_att_num(from.att_num());
    }
    if (from.has_def_num()) {
      set_def_num(from.def_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ge_king_war_scene_user_num_notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ge_king_war_scene_user_num_notify::CopyFrom(const ge_king_war_scene_user_num_notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ge_king_war_scene_user_num_notify::IsInitialized() const {

  return true;
}

void ge_king_war_scene_user_num_notify::Swap(ge_king_war_scene_user_num_notify* other) {
  if (other != this) {
    std::swap(country_id_, other->country_id_);
    std::swap(att_num_, other->att_num_);
    std::swap(def_num_, other->def_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ge_king_war_scene_user_num_notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ge_king_war_scene_user_num_notify_descriptor_;
  metadata.reflection = ge_king_war_scene_user_num_notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int eg_check_user_buy_goods_request::kUidFieldNumber;
const int eg_check_user_buy_goods_request::kInfoFieldNumber;
const int eg_check_user_buy_goods_request::kPurchasedFieldNumber;
#endif  // !_MSC_VER

eg_check_user_buy_goods_request::eg_check_user_buy_goods_request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void eg_check_user_buy_goods_request::InitAsDefaultInstance() {
  info_ = const_cast< ::proto::common::user_buy_goods*>(&::proto::common::user_buy_goods::default_instance());
}

eg_check_user_buy_goods_request::eg_check_user_buy_goods_request(const eg_check_user_buy_goods_request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void eg_check_user_buy_goods_request::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_ULONGLONG(0);
  info_ = NULL;
  purchased_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

eg_check_user_buy_goods_request::~eg_check_user_buy_goods_request() {
  SharedDtor();
}

void eg_check_user_buy_goods_request::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
  }
}

void eg_check_user_buy_goods_request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* eg_check_user_buy_goods_request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return eg_check_user_buy_goods_request_descriptor_;
}

const eg_check_user_buy_goods_request& eg_check_user_buy_goods_request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

eg_check_user_buy_goods_request* eg_check_user_buy_goods_request::default_instance_ = NULL;

eg_check_user_buy_goods_request* eg_check_user_buy_goods_request::New() const {
  return new eg_check_user_buy_goods_request;
}

void eg_check_user_buy_goods_request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = GOOGLE_ULONGLONG(0);
    if (has_info()) {
      if (info_ != NULL) info_->::proto::common::user_buy_goods::Clear();
    }
    purchased_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool eg_check_user_buy_goods_request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info;
        break;
      }

      // optional .proto.common.user_buy_goods info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_purchased;
        break;
      }

      // optional uint32 purchased = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_purchased:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &purchased_)));
          set_has_purchased();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void eg_check_user_buy_goods_request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uid(), output);
  }

  // optional .proto.common.user_buy_goods info = 2;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->info(), output);
  }

  // optional uint32 purchased = 3;
  if (has_purchased()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->purchased(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* eg_check_user_buy_goods_request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->uid(), target);
  }

  // optional .proto.common.user_buy_goods info = 2;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->info(), target);
  }

  // optional uint32 purchased = 3;
  if (has_purchased()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->purchased(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int eg_check_user_buy_goods_request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uid());
    }

    // optional .proto.common.user_buy_goods info = 2;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

    // optional uint32 purchased = 3;
    if (has_purchased()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->purchased());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void eg_check_user_buy_goods_request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const eg_check_user_buy_goods_request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const eg_check_user_buy_goods_request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void eg_check_user_buy_goods_request::MergeFrom(const eg_check_user_buy_goods_request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_info()) {
      mutable_info()->::proto::common::user_buy_goods::MergeFrom(from.info());
    }
    if (from.has_purchased()) {
      set_purchased(from.purchased());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void eg_check_user_buy_goods_request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void eg_check_user_buy_goods_request::CopyFrom(const eg_check_user_buy_goods_request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool eg_check_user_buy_goods_request::IsInitialized() const {

  return true;
}

void eg_check_user_buy_goods_request::Swap(eg_check_user_buy_goods_request* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(info_, other->info_);
    std::swap(purchased_, other->purchased_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata eg_check_user_buy_goods_request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = eg_check_user_buy_goods_request_descriptor_;
  metadata.reflection = eg_check_user_buy_goods_request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ge_check_user_buy_goods_reply::kUidFieldNumber;
const int ge_check_user_buy_goods_reply::kInfoFieldNumber;
const int ge_check_user_buy_goods_reply::kChangeDataFieldNumber;
const int ge_check_user_buy_goods_reply::kPurchasedFieldNumber;
#endif  // !_MSC_VER

ge_check_user_buy_goods_reply::ge_check_user_buy_goods_reply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ge_check_user_buy_goods_reply::InitAsDefaultInstance() {
  info_ = const_cast< ::proto::common::user_buy_goods*>(&::proto::common::user_buy_goods::default_instance());
  change_data_ = const_cast< ::proto::common::role_change_data*>(&::proto::common::role_change_data::default_instance());
}

ge_check_user_buy_goods_reply::ge_check_user_buy_goods_reply(const ge_check_user_buy_goods_reply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ge_check_user_buy_goods_reply::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_ULONGLONG(0);
  info_ = NULL;
  change_data_ = NULL;
  purchased_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ge_check_user_buy_goods_reply::~ge_check_user_buy_goods_reply() {
  SharedDtor();
}

void ge_check_user_buy_goods_reply::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
    delete change_data_;
  }
}

void ge_check_user_buy_goods_reply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ge_check_user_buy_goods_reply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ge_check_user_buy_goods_reply_descriptor_;
}

const ge_check_user_buy_goods_reply& ge_check_user_buy_goods_reply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

ge_check_user_buy_goods_reply* ge_check_user_buy_goods_reply::default_instance_ = NULL;

ge_check_user_buy_goods_reply* ge_check_user_buy_goods_reply::New() const {
  return new ge_check_user_buy_goods_reply;
}

void ge_check_user_buy_goods_reply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = GOOGLE_ULONGLONG(0);
    if (has_info()) {
      if (info_ != NULL) info_->::proto::common::user_buy_goods::Clear();
    }
    if (has_change_data()) {
      if (change_data_ != NULL) change_data_->::proto::common::role_change_data::Clear();
    }
    purchased_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ge_check_user_buy_goods_reply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info;
        break;
      }

      // optional .proto.common.user_buy_goods info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_change_data;
        break;
      }

      // optional .proto.common.role_change_data change_data = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_change_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_change_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_purchased;
        break;
      }

      // optional uint32 purchased = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_purchased:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &purchased_)));
          set_has_purchased();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ge_check_user_buy_goods_reply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uid(), output);
  }

  // optional .proto.common.user_buy_goods info = 2;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->info(), output);
  }

  // optional .proto.common.role_change_data change_data = 3;
  if (has_change_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->change_data(), output);
  }

  // optional uint32 purchased = 4;
  if (has_purchased()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->purchased(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ge_check_user_buy_goods_reply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->uid(), target);
  }

  // optional .proto.common.user_buy_goods info = 2;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->info(), target);
  }

  // optional .proto.common.role_change_data change_data = 3;
  if (has_change_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->change_data(), target);
  }

  // optional uint32 purchased = 4;
  if (has_purchased()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->purchased(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ge_check_user_buy_goods_reply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uid());
    }

    // optional .proto.common.user_buy_goods info = 2;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

    // optional .proto.common.role_change_data change_data = 3;
    if (has_change_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->change_data());
    }

    // optional uint32 purchased = 4;
    if (has_purchased()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->purchased());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ge_check_user_buy_goods_reply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ge_check_user_buy_goods_reply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ge_check_user_buy_goods_reply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ge_check_user_buy_goods_reply::MergeFrom(const ge_check_user_buy_goods_reply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_info()) {
      mutable_info()->::proto::common::user_buy_goods::MergeFrom(from.info());
    }
    if (from.has_change_data()) {
      mutable_change_data()->::proto::common::role_change_data::MergeFrom(from.change_data());
    }
    if (from.has_purchased()) {
      set_purchased(from.purchased());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ge_check_user_buy_goods_reply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ge_check_user_buy_goods_reply::CopyFrom(const ge_check_user_buy_goods_reply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ge_check_user_buy_goods_reply::IsInitialized() const {

  return true;
}

void ge_check_user_buy_goods_reply::Swap(ge_check_user_buy_goods_reply* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(info_, other->info_);
    std::swap(change_data_, other->change_data_);
    std::swap(purchased_, other->purchased_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ge_check_user_buy_goods_reply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ge_check_user_buy_goods_reply_descriptor_;
  metadata.reflection = ge_check_user_buy_goods_reply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int eg_give_user_goods_notify::kUidFieldNumber;
const int eg_give_user_goods_notify::kReplyCodeFieldNumber;
const int eg_give_user_goods_notify::kInfoFieldNumber;
const int eg_give_user_goods_notify::kPurchasedFieldNumber;
const int eg_give_user_goods_notify::kChangeDataFieldNumber;
const int eg_give_user_goods_notify::kShopGoodsDataFieldNumber;
const int eg_give_user_goods_notify::kUserGoodsDataFieldNumber;
#endif  // !_MSC_VER

eg_give_user_goods_notify::eg_give_user_goods_notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void eg_give_user_goods_notify::InitAsDefaultInstance() {
  info_ = const_cast< ::proto::common::user_buy_goods*>(&::proto::common::user_buy_goods::default_instance());
  change_data_ = const_cast< ::proto::common::role_change_data*>(&::proto::common::role_change_data::default_instance());
  shop_goods_data_ = const_cast< ::proto::common::shop_goods*>(&::proto::common::shop_goods::default_instance());
  user_goods_data_ = const_cast< ::proto::common::user_goods*>(&::proto::common::user_goods::default_instance());
}

eg_give_user_goods_notify::eg_give_user_goods_notify(const eg_give_user_goods_notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void eg_give_user_goods_notify::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_ULONGLONG(0);
  reply_code_ = 0u;
  info_ = NULL;
  purchased_ = 0u;
  change_data_ = NULL;
  shop_goods_data_ = NULL;
  user_goods_data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

eg_give_user_goods_notify::~eg_give_user_goods_notify() {
  SharedDtor();
}

void eg_give_user_goods_notify::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
    delete change_data_;
    delete shop_goods_data_;
    delete user_goods_data_;
  }
}

void eg_give_user_goods_notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* eg_give_user_goods_notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return eg_give_user_goods_notify_descriptor_;
}

const eg_give_user_goods_notify& eg_give_user_goods_notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

eg_give_user_goods_notify* eg_give_user_goods_notify::default_instance_ = NULL;

eg_give_user_goods_notify* eg_give_user_goods_notify::New() const {
  return new eg_give_user_goods_notify;
}

void eg_give_user_goods_notify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = GOOGLE_ULONGLONG(0);
    reply_code_ = 0u;
    if (has_info()) {
      if (info_ != NULL) info_->::proto::common::user_buy_goods::Clear();
    }
    purchased_ = 0u;
    if (has_change_data()) {
      if (change_data_ != NULL) change_data_->::proto::common::role_change_data::Clear();
    }
    if (has_shop_goods_data()) {
      if (shop_goods_data_ != NULL) shop_goods_data_->::proto::common::shop_goods::Clear();
    }
    if (has_user_goods_data()) {
      if (user_goods_data_ != NULL) user_goods_data_->::proto::common::user_goods::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool eg_give_user_goods_notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_reply_code;
        break;
      }

      // optional uint32 reply_code = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reply_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reply_code_)));
          set_has_reply_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_info;
        break;
      }

      // optional .proto.common.user_buy_goods info = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_purchased;
        break;
      }

      // optional uint32 purchased = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_purchased:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &purchased_)));
          set_has_purchased();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_change_data;
        break;
      }

      // optional .proto.common.role_change_data change_data = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_change_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_change_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_shop_goods_data;
        break;
      }

      // optional .proto.common.shop_goods shop_goods_data = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_shop_goods_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_shop_goods_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_user_goods_data;
        break;
      }

      // optional .proto.common.user_goods user_goods_data = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_goods_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user_goods_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void eg_give_user_goods_notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uid(), output);
  }

  // optional uint32 reply_code = 2;
  if (has_reply_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->reply_code(), output);
  }

  // optional .proto.common.user_buy_goods info = 3;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->info(), output);
  }

  // optional uint32 purchased = 4;
  if (has_purchased()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->purchased(), output);
  }

  // optional .proto.common.role_change_data change_data = 5;
  if (has_change_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->change_data(), output);
  }

  // optional .proto.common.shop_goods shop_goods_data = 6;
  if (has_shop_goods_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->shop_goods_data(), output);
  }

  // optional .proto.common.user_goods user_goods_data = 7;
  if (has_user_goods_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->user_goods_data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* eg_give_user_goods_notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->uid(), target);
  }

  // optional uint32 reply_code = 2;
  if (has_reply_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->reply_code(), target);
  }

  // optional .proto.common.user_buy_goods info = 3;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->info(), target);
  }

  // optional uint32 purchased = 4;
  if (has_purchased()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->purchased(), target);
  }

  // optional .proto.common.role_change_data change_data = 5;
  if (has_change_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->change_data(), target);
  }

  // optional .proto.common.shop_goods shop_goods_data = 6;
  if (has_shop_goods_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->shop_goods_data(), target);
  }

  // optional .proto.common.user_goods user_goods_data = 7;
  if (has_user_goods_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->user_goods_data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int eg_give_user_goods_notify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uid());
    }

    // optional uint32 reply_code = 2;
    if (has_reply_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reply_code());
    }

    // optional .proto.common.user_buy_goods info = 3;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

    // optional uint32 purchased = 4;
    if (has_purchased()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->purchased());
    }

    // optional .proto.common.role_change_data change_data = 5;
    if (has_change_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->change_data());
    }

    // optional .proto.common.shop_goods shop_goods_data = 6;
    if (has_shop_goods_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->shop_goods_data());
    }

    // optional .proto.common.user_goods user_goods_data = 7;
    if (has_user_goods_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user_goods_data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void eg_give_user_goods_notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const eg_give_user_goods_notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const eg_give_user_goods_notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void eg_give_user_goods_notify::MergeFrom(const eg_give_user_goods_notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_reply_code()) {
      set_reply_code(from.reply_code());
    }
    if (from.has_info()) {
      mutable_info()->::proto::common::user_buy_goods::MergeFrom(from.info());
    }
    if (from.has_purchased()) {
      set_purchased(from.purchased());
    }
    if (from.has_change_data()) {
      mutable_change_data()->::proto::common::role_change_data::MergeFrom(from.change_data());
    }
    if (from.has_shop_goods_data()) {
      mutable_shop_goods_data()->::proto::common::shop_goods::MergeFrom(from.shop_goods_data());
    }
    if (from.has_user_goods_data()) {
      mutable_user_goods_data()->::proto::common::user_goods::MergeFrom(from.user_goods_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void eg_give_user_goods_notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void eg_give_user_goods_notify::CopyFrom(const eg_give_user_goods_notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool eg_give_user_goods_notify::IsInitialized() const {

  return true;
}

void eg_give_user_goods_notify::Swap(eg_give_user_goods_notify* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(reply_code_, other->reply_code_);
    std::swap(info_, other->info_);
    std::swap(purchased_, other->purchased_);
    std::swap(change_data_, other->change_data_);
    std::swap(shop_goods_data_, other->shop_goods_data_);
    std::swap(user_goods_data_, other->user_goods_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata eg_give_user_goods_notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = eg_give_user_goods_notify_descriptor_;
  metadata.reflection = eg_give_user_goods_notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int er_world_cup_data_request::kServerIdFieldNumber;
#endif  // !_MSC_VER

er_world_cup_data_request::er_world_cup_data_request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void er_world_cup_data_request::InitAsDefaultInstance() {
}

er_world_cup_data_request::er_world_cup_data_request(const er_world_cup_data_request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void er_world_cup_data_request::SharedCtor() {
  _cached_size_ = 0;
  server_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

er_world_cup_data_request::~er_world_cup_data_request() {
  SharedDtor();
}

void er_world_cup_data_request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void er_world_cup_data_request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* er_world_cup_data_request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return er_world_cup_data_request_descriptor_;
}

const er_world_cup_data_request& er_world_cup_data_request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

er_world_cup_data_request* er_world_cup_data_request::default_instance_ = NULL;

er_world_cup_data_request* er_world_cup_data_request::New() const {
  return new er_world_cup_data_request;
}

void er_world_cup_data_request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    server_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool er_world_cup_data_request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 server_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_id_)));
          set_has_server_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void er_world_cup_data_request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 server_id = 1;
  if (has_server_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->server_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* er_world_cup_data_request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 server_id = 1;
  if (has_server_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->server_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int er_world_cup_data_request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 server_id = 1;
    if (has_server_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void er_world_cup_data_request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const er_world_cup_data_request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const er_world_cup_data_request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void er_world_cup_data_request::MergeFrom(const er_world_cup_data_request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_server_id()) {
      set_server_id(from.server_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void er_world_cup_data_request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void er_world_cup_data_request::CopyFrom(const er_world_cup_data_request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool er_world_cup_data_request::IsInitialized() const {

  return true;
}

void er_world_cup_data_request::Swap(er_world_cup_data_request* other) {
  if (other != this) {
    std::swap(server_id_, other->server_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata er_world_cup_data_request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = er_world_cup_data_request_descriptor_;
  metadata.reflection = er_world_cup_data_request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int re_world_cup_data_reply::kWorldCupInfoFieldNumber;
const int re_world_cup_data_reply::kServerIdFieldNumber;
#endif  // !_MSC_VER

re_world_cup_data_reply::re_world_cup_data_reply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void re_world_cup_data_reply::InitAsDefaultInstance() {
  world_cup_info_ = const_cast< ::proto::common::world_cup_data*>(&::proto::common::world_cup_data::default_instance());
}

re_world_cup_data_reply::re_world_cup_data_reply(const re_world_cup_data_reply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void re_world_cup_data_reply::SharedCtor() {
  _cached_size_ = 0;
  world_cup_info_ = NULL;
  server_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

re_world_cup_data_reply::~re_world_cup_data_reply() {
  SharedDtor();
}

void re_world_cup_data_reply::SharedDtor() {
  if (this != default_instance_) {
    delete world_cup_info_;
  }
}

void re_world_cup_data_reply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* re_world_cup_data_reply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return re_world_cup_data_reply_descriptor_;
}

const re_world_cup_data_reply& re_world_cup_data_reply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

re_world_cup_data_reply* re_world_cup_data_reply::default_instance_ = NULL;

re_world_cup_data_reply* re_world_cup_data_reply::New() const {
  return new re_world_cup_data_reply;
}

void re_world_cup_data_reply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_world_cup_info()) {
      if (world_cup_info_ != NULL) world_cup_info_->::proto::common::world_cup_data::Clear();
    }
    server_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool re_world_cup_data_reply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.common.world_cup_data world_cup_info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_world_cup_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_server_id;
        break;
      }

      // optional uint32 server_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_server_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_id_)));
          set_has_server_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void re_world_cup_data_reply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .proto.common.world_cup_data world_cup_info = 1;
  if (has_world_cup_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->world_cup_info(), output);
  }

  // optional uint32 server_id = 2;
  if (has_server_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->server_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* re_world_cup_data_reply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .proto.common.world_cup_data world_cup_info = 1;
  if (has_world_cup_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->world_cup_info(), target);
  }

  // optional uint32 server_id = 2;
  if (has_server_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->server_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int re_world_cup_data_reply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .proto.common.world_cup_data world_cup_info = 1;
    if (has_world_cup_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->world_cup_info());
    }

    // optional uint32 server_id = 2;
    if (has_server_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void re_world_cup_data_reply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const re_world_cup_data_reply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const re_world_cup_data_reply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void re_world_cup_data_reply::MergeFrom(const re_world_cup_data_reply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_world_cup_info()) {
      mutable_world_cup_info()->::proto::common::world_cup_data::MergeFrom(from.world_cup_info());
    }
    if (from.has_server_id()) {
      set_server_id(from.server_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void re_world_cup_data_reply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void re_world_cup_data_reply::CopyFrom(const re_world_cup_data_reply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool re_world_cup_data_reply::IsInitialized() const {

  return true;
}

void re_world_cup_data_reply::Swap(re_world_cup_data_reply* other) {
  if (other != this) {
    std::swap(world_cup_info_, other->world_cup_info_);
    std::swap(server_id_, other->server_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata re_world_cup_data_reply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = re_world_cup_data_reply_descriptor_;
  metadata.reflection = re_world_cup_data_reply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int re_world_cup_battle_notify::kBattleInfoFieldNumber;
#endif  // !_MSC_VER

re_world_cup_battle_notify::re_world_cup_battle_notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void re_world_cup_battle_notify::InitAsDefaultInstance() {
  battle_info_ = const_cast< ::proto::common::world_cup_battle*>(&::proto::common::world_cup_battle::default_instance());
}

re_world_cup_battle_notify::re_world_cup_battle_notify(const re_world_cup_battle_notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void re_world_cup_battle_notify::SharedCtor() {
  _cached_size_ = 0;
  battle_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

re_world_cup_battle_notify::~re_world_cup_battle_notify() {
  SharedDtor();
}

void re_world_cup_battle_notify::SharedDtor() {
  if (this != default_instance_) {
    delete battle_info_;
  }
}

void re_world_cup_battle_notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* re_world_cup_battle_notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return re_world_cup_battle_notify_descriptor_;
}

const re_world_cup_battle_notify& re_world_cup_battle_notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

re_world_cup_battle_notify* re_world_cup_battle_notify::default_instance_ = NULL;

re_world_cup_battle_notify* re_world_cup_battle_notify::New() const {
  return new re_world_cup_battle_notify;
}

void re_world_cup_battle_notify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_battle_info()) {
      if (battle_info_ != NULL) battle_info_->::proto::common::world_cup_battle::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool re_world_cup_battle_notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.common.world_cup_battle battle_info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_battle_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void re_world_cup_battle_notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .proto.common.world_cup_battle battle_info = 1;
  if (has_battle_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->battle_info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* re_world_cup_battle_notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .proto.common.world_cup_battle battle_info = 1;
  if (has_battle_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->battle_info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int re_world_cup_battle_notify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .proto.common.world_cup_battle battle_info = 1;
    if (has_battle_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->battle_info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void re_world_cup_battle_notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const re_world_cup_battle_notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const re_world_cup_battle_notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void re_world_cup_battle_notify::MergeFrom(const re_world_cup_battle_notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_battle_info()) {
      mutable_battle_info()->::proto::common::world_cup_battle::MergeFrom(from.battle_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void re_world_cup_battle_notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void re_world_cup_battle_notify::CopyFrom(const re_world_cup_battle_notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool re_world_cup_battle_notify::IsInitialized() const {

  return true;
}

void re_world_cup_battle_notify::Swap(re_world_cup_battle_notify* other) {
  if (other != this) {
    std::swap(battle_info_, other->battle_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata re_world_cup_battle_notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = re_world_cup_battle_notify_descriptor_;
  metadata.reflection = re_world_cup_battle_notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int re_world_cup_mail_notify::kServerIdFieldNumber;
const int re_world_cup_mail_notify::kPlayerNameFieldNumber;
const int re_world_cup_mail_notify::kRoundFieldNumber;
#endif  // !_MSC_VER

re_world_cup_mail_notify::re_world_cup_mail_notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void re_world_cup_mail_notify::InitAsDefaultInstance() {
}

re_world_cup_mail_notify::re_world_cup_mail_notify(const re_world_cup_mail_notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void re_world_cup_mail_notify::SharedCtor() {
  _cached_size_ = 0;
  server_id_ = 0u;
  player_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  round_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

re_world_cup_mail_notify::~re_world_cup_mail_notify() {
  SharedDtor();
}

void re_world_cup_mail_notify::SharedDtor() {
  if (player_name_ != &::google::protobuf::internal::kEmptyString) {
    delete player_name_;
  }
  if (this != default_instance_) {
  }
}

void re_world_cup_mail_notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* re_world_cup_mail_notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return re_world_cup_mail_notify_descriptor_;
}

const re_world_cup_mail_notify& re_world_cup_mail_notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

re_world_cup_mail_notify* re_world_cup_mail_notify::default_instance_ = NULL;

re_world_cup_mail_notify* re_world_cup_mail_notify::New() const {
  return new re_world_cup_mail_notify;
}

void re_world_cup_mail_notify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    server_id_ = 0u;
    if (has_player_name()) {
      if (player_name_ != &::google::protobuf::internal::kEmptyString) {
        player_name_->clear();
      }
    }
    round_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool re_world_cup_mail_notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 server_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_id_)));
          set_has_server_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_player_name;
        break;
      }

      // optional string player_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_player_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_player_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->player_name().data(), this->player_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_round;
        break;
      }

      // optional uint32 round = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_round:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &round_)));
          set_has_round();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void re_world_cup_mail_notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 server_id = 1;
  if (has_server_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->server_id(), output);
  }

  // optional string player_name = 2;
  if (has_player_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->player_name().data(), this->player_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->player_name(), output);
  }

  // optional uint32 round = 3;
  if (has_round()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->round(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* re_world_cup_mail_notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 server_id = 1;
  if (has_server_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->server_id(), target);
  }

  // optional string player_name = 2;
  if (has_player_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->player_name().data(), this->player_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->player_name(), target);
  }

  // optional uint32 round = 3;
  if (has_round()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->round(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int re_world_cup_mail_notify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 server_id = 1;
    if (has_server_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_id());
    }

    // optional string player_name = 2;
    if (has_player_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->player_name());
    }

    // optional uint32 round = 3;
    if (has_round()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->round());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void re_world_cup_mail_notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const re_world_cup_mail_notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const re_world_cup_mail_notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void re_world_cup_mail_notify::MergeFrom(const re_world_cup_mail_notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_server_id()) {
      set_server_id(from.server_id());
    }
    if (from.has_player_name()) {
      set_player_name(from.player_name());
    }
    if (from.has_round()) {
      set_round(from.round());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void re_world_cup_mail_notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void re_world_cup_mail_notify::CopyFrom(const re_world_cup_mail_notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool re_world_cup_mail_notify::IsInitialized() const {

  return true;
}

void re_world_cup_mail_notify::Swap(re_world_cup_mail_notify* other) {
  if (other != this) {
    std::swap(server_id_, other->server_id_);
    std::swap(player_name_, other->player_name_);
    std::swap(round_, other->round_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata re_world_cup_mail_notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = re_world_cup_mail_notify_descriptor_;
  metadata.reflection = re_world_cup_mail_notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int re_world_cup_coming_quarter_notify::kServerIdFieldNumber;
const int re_world_cup_coming_quarter_notify::kTimeRemainFieldNumber;
#endif  // !_MSC_VER

re_world_cup_coming_quarter_notify::re_world_cup_coming_quarter_notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void re_world_cup_coming_quarter_notify::InitAsDefaultInstance() {
}

re_world_cup_coming_quarter_notify::re_world_cup_coming_quarter_notify(const re_world_cup_coming_quarter_notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void re_world_cup_coming_quarter_notify::SharedCtor() {
  _cached_size_ = 0;
  server_id_ = 0u;
  time_remain_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

re_world_cup_coming_quarter_notify::~re_world_cup_coming_quarter_notify() {
  SharedDtor();
}

void re_world_cup_coming_quarter_notify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void re_world_cup_coming_quarter_notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* re_world_cup_coming_quarter_notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return re_world_cup_coming_quarter_notify_descriptor_;
}

const re_world_cup_coming_quarter_notify& re_world_cup_coming_quarter_notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

re_world_cup_coming_quarter_notify* re_world_cup_coming_quarter_notify::default_instance_ = NULL;

re_world_cup_coming_quarter_notify* re_world_cup_coming_quarter_notify::New() const {
  return new re_world_cup_coming_quarter_notify;
}

void re_world_cup_coming_quarter_notify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    server_id_ = 0u;
    time_remain_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool re_world_cup_coming_quarter_notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 server_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_id_)));
          set_has_server_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_time_remain;
        break;
      }

      // optional uint32 time_remain = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time_remain:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_remain_)));
          set_has_time_remain();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void re_world_cup_coming_quarter_notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 server_id = 1;
  if (has_server_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->server_id(), output);
  }

  // optional uint32 time_remain = 2;
  if (has_time_remain()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->time_remain(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* re_world_cup_coming_quarter_notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 server_id = 1;
  if (has_server_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->server_id(), target);
  }

  // optional uint32 time_remain = 2;
  if (has_time_remain()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->time_remain(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int re_world_cup_coming_quarter_notify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 server_id = 1;
    if (has_server_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_id());
    }

    // optional uint32 time_remain = 2;
    if (has_time_remain()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time_remain());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void re_world_cup_coming_quarter_notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const re_world_cup_coming_quarter_notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const re_world_cup_coming_quarter_notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void re_world_cup_coming_quarter_notify::MergeFrom(const re_world_cup_coming_quarter_notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_server_id()) {
      set_server_id(from.server_id());
    }
    if (from.has_time_remain()) {
      set_time_remain(from.time_remain());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void re_world_cup_coming_quarter_notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void re_world_cup_coming_quarter_notify::CopyFrom(const re_world_cup_coming_quarter_notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool re_world_cup_coming_quarter_notify::IsInitialized() const {

  return true;
}

void re_world_cup_coming_quarter_notify::Swap(re_world_cup_coming_quarter_notify* other) {
  if (other != this) {
    std::swap(server_id_, other->server_id_);
    std::swap(time_remain_, other->time_remain_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata re_world_cup_coming_quarter_notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = re_world_cup_coming_quarter_notify_descriptor_;
  metadata.reflection = re_world_cup_coming_quarter_notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int re_world_cup_coming_soon_notify::kServerIdFieldNumber;
const int re_world_cup_coming_soon_notify::kTimeRemainFieldNumber;
#endif  // !_MSC_VER

re_world_cup_coming_soon_notify::re_world_cup_coming_soon_notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void re_world_cup_coming_soon_notify::InitAsDefaultInstance() {
}

re_world_cup_coming_soon_notify::re_world_cup_coming_soon_notify(const re_world_cup_coming_soon_notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void re_world_cup_coming_soon_notify::SharedCtor() {
  _cached_size_ = 0;
  server_id_ = 0u;
  time_remain_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

re_world_cup_coming_soon_notify::~re_world_cup_coming_soon_notify() {
  SharedDtor();
}

void re_world_cup_coming_soon_notify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void re_world_cup_coming_soon_notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* re_world_cup_coming_soon_notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return re_world_cup_coming_soon_notify_descriptor_;
}

const re_world_cup_coming_soon_notify& re_world_cup_coming_soon_notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

re_world_cup_coming_soon_notify* re_world_cup_coming_soon_notify::default_instance_ = NULL;

re_world_cup_coming_soon_notify* re_world_cup_coming_soon_notify::New() const {
  return new re_world_cup_coming_soon_notify;
}

void re_world_cup_coming_soon_notify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    server_id_ = 0u;
    time_remain_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool re_world_cup_coming_soon_notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 server_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_id_)));
          set_has_server_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_time_remain;
        break;
      }

      // optional uint32 time_remain = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time_remain:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_remain_)));
          set_has_time_remain();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void re_world_cup_coming_soon_notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 server_id = 1;
  if (has_server_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->server_id(), output);
  }

  // optional uint32 time_remain = 2;
  if (has_time_remain()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->time_remain(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* re_world_cup_coming_soon_notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 server_id = 1;
  if (has_server_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->server_id(), target);
  }

  // optional uint32 time_remain = 2;
  if (has_time_remain()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->time_remain(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int re_world_cup_coming_soon_notify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 server_id = 1;
    if (has_server_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_id());
    }

    // optional uint32 time_remain = 2;
    if (has_time_remain()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time_remain());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void re_world_cup_coming_soon_notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const re_world_cup_coming_soon_notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const re_world_cup_coming_soon_notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void re_world_cup_coming_soon_notify::MergeFrom(const re_world_cup_coming_soon_notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_server_id()) {
      set_server_id(from.server_id());
    }
    if (from.has_time_remain()) {
      set_time_remain(from.time_remain());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void re_world_cup_coming_soon_notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void re_world_cup_coming_soon_notify::CopyFrom(const re_world_cup_coming_soon_notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool re_world_cup_coming_soon_notify::IsInitialized() const {

  return true;
}

void re_world_cup_coming_soon_notify::Swap(re_world_cup_coming_soon_notify* other) {
  if (other != this) {
    std::swap(server_id_, other->server_id_);
    std::swap(time_remain_, other->time_remain_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata re_world_cup_coming_soon_notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = re_world_cup_coming_soon_notify_descriptor_;
  metadata.reflection = re_world_cup_coming_soon_notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int re_world_cup_ready_notify::kServerIdFieldNumber;
const int re_world_cup_ready_notify::kBattleInfoFieldNumber;
const int re_world_cup_ready_notify::kTimeRemainFieldNumber;
#endif  // !_MSC_VER

re_world_cup_ready_notify::re_world_cup_ready_notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void re_world_cup_ready_notify::InitAsDefaultInstance() {
  battle_info_ = const_cast< ::proto::common::world_cup_battle*>(&::proto::common::world_cup_battle::default_instance());
}

re_world_cup_ready_notify::re_world_cup_ready_notify(const re_world_cup_ready_notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void re_world_cup_ready_notify::SharedCtor() {
  _cached_size_ = 0;
  server_id_ = 0u;
  battle_info_ = NULL;
  time_remain_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

re_world_cup_ready_notify::~re_world_cup_ready_notify() {
  SharedDtor();
}

void re_world_cup_ready_notify::SharedDtor() {
  if (this != default_instance_) {
    delete battle_info_;
  }
}

void re_world_cup_ready_notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* re_world_cup_ready_notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return re_world_cup_ready_notify_descriptor_;
}

const re_world_cup_ready_notify& re_world_cup_ready_notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

re_world_cup_ready_notify* re_world_cup_ready_notify::default_instance_ = NULL;

re_world_cup_ready_notify* re_world_cup_ready_notify::New() const {
  return new re_world_cup_ready_notify;
}

void re_world_cup_ready_notify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    server_id_ = 0u;
    if (has_battle_info()) {
      if (battle_info_ != NULL) battle_info_->::proto::common::world_cup_battle::Clear();
    }
    time_remain_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool re_world_cup_ready_notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 server_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_id_)));
          set_has_server_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_battle_info;
        break;
      }

      // optional .proto.common.world_cup_battle battle_info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_battle_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_battle_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_time_remain;
        break;
      }

      // optional uint32 time_remain = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time_remain:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_remain_)));
          set_has_time_remain();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void re_world_cup_ready_notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 server_id = 1;
  if (has_server_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->server_id(), output);
  }

  // optional .proto.common.world_cup_battle battle_info = 2;
  if (has_battle_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->battle_info(), output);
  }

  // optional uint32 time_remain = 3;
  if (has_time_remain()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->time_remain(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* re_world_cup_ready_notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 server_id = 1;
  if (has_server_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->server_id(), target);
  }

  // optional .proto.common.world_cup_battle battle_info = 2;
  if (has_battle_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->battle_info(), target);
  }

  // optional uint32 time_remain = 3;
  if (has_time_remain()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->time_remain(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int re_world_cup_ready_notify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 server_id = 1;
    if (has_server_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_id());
    }

    // optional .proto.common.world_cup_battle battle_info = 2;
    if (has_battle_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->battle_info());
    }

    // optional uint32 time_remain = 3;
    if (has_time_remain()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time_remain());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void re_world_cup_ready_notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const re_world_cup_ready_notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const re_world_cup_ready_notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void re_world_cup_ready_notify::MergeFrom(const re_world_cup_ready_notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_server_id()) {
      set_server_id(from.server_id());
    }
    if (from.has_battle_info()) {
      mutable_battle_info()->::proto::common::world_cup_battle::MergeFrom(from.battle_info());
    }
    if (from.has_time_remain()) {
      set_time_remain(from.time_remain());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void re_world_cup_ready_notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void re_world_cup_ready_notify::CopyFrom(const re_world_cup_ready_notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool re_world_cup_ready_notify::IsInitialized() const {

  return true;
}

void re_world_cup_ready_notify::Swap(re_world_cup_ready_notify* other) {
  if (other != this) {
    std::swap(server_id_, other->server_id_);
    std::swap(battle_info_, other->battle_info_);
    std::swap(time_remain_, other->time_remain_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata re_world_cup_ready_notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = re_world_cup_ready_notify_descriptor_;
  metadata.reflection = re_world_cup_ready_notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int gr_world_cup_play_request::kServerIdFieldNumber;
const int gr_world_cup_play_request::kRcdFieldNumber;
#endif  // !_MSC_VER

gr_world_cup_play_request::gr_world_cup_play_request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gr_world_cup_play_request::InitAsDefaultInstance() {
  rcd_ = const_cast< ::proto::common::role_cross_data*>(&::proto::common::role_cross_data::default_instance());
}

gr_world_cup_play_request::gr_world_cup_play_request(const gr_world_cup_play_request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gr_world_cup_play_request::SharedCtor() {
  _cached_size_ = 0;
  server_id_ = 0u;
  rcd_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gr_world_cup_play_request::~gr_world_cup_play_request() {
  SharedDtor();
}

void gr_world_cup_play_request::SharedDtor() {
  if (this != default_instance_) {
    delete rcd_;
  }
}

void gr_world_cup_play_request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gr_world_cup_play_request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gr_world_cup_play_request_descriptor_;
}

const gr_world_cup_play_request& gr_world_cup_play_request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

gr_world_cup_play_request* gr_world_cup_play_request::default_instance_ = NULL;

gr_world_cup_play_request* gr_world_cup_play_request::New() const {
  return new gr_world_cup_play_request;
}

void gr_world_cup_play_request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    server_id_ = 0u;
    if (has_rcd()) {
      if (rcd_ != NULL) rcd_->::proto::common::role_cross_data::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gr_world_cup_play_request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 server_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_id_)));
          set_has_server_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_rcd;
        break;
      }

      // optional .proto.common.role_cross_data rcd = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rcd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rcd()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gr_world_cup_play_request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 server_id = 1;
  if (has_server_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->server_id(), output);
  }

  // optional .proto.common.role_cross_data rcd = 2;
  if (has_rcd()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->rcd(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gr_world_cup_play_request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 server_id = 1;
  if (has_server_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->server_id(), target);
  }

  // optional .proto.common.role_cross_data rcd = 2;
  if (has_rcd()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->rcd(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gr_world_cup_play_request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 server_id = 1;
    if (has_server_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_id());
    }

    // optional .proto.common.role_cross_data rcd = 2;
    if (has_rcd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rcd());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gr_world_cup_play_request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gr_world_cup_play_request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gr_world_cup_play_request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gr_world_cup_play_request::MergeFrom(const gr_world_cup_play_request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_server_id()) {
      set_server_id(from.server_id());
    }
    if (from.has_rcd()) {
      mutable_rcd()->::proto::common::role_cross_data::MergeFrom(from.rcd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gr_world_cup_play_request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gr_world_cup_play_request::CopyFrom(const gr_world_cup_play_request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gr_world_cup_play_request::IsInitialized() const {

  return true;
}

void gr_world_cup_play_request::Swap(gr_world_cup_play_request* other) {
  if (other != this) {
    std::swap(server_id_, other->server_id_);
    std::swap(rcd_, other->rcd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gr_world_cup_play_request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gr_world_cup_play_request_descriptor_;
  metadata.reflection = gr_world_cup_play_request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int rg_world_cup_play_reply::kServerIdFieldNumber;
const int rg_world_cup_play_reply::kReplyCodeFieldNumber;
#endif  // !_MSC_VER

rg_world_cup_play_reply::rg_world_cup_play_reply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void rg_world_cup_play_reply::InitAsDefaultInstance() {
}

rg_world_cup_play_reply::rg_world_cup_play_reply(const rg_world_cup_play_reply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void rg_world_cup_play_reply::SharedCtor() {
  _cached_size_ = 0;
  server_id_ = 0u;
  reply_code_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

rg_world_cup_play_reply::~rg_world_cup_play_reply() {
  SharedDtor();
}

void rg_world_cup_play_reply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void rg_world_cup_play_reply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* rg_world_cup_play_reply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return rg_world_cup_play_reply_descriptor_;
}

const rg_world_cup_play_reply& rg_world_cup_play_reply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

rg_world_cup_play_reply* rg_world_cup_play_reply::default_instance_ = NULL;

rg_world_cup_play_reply* rg_world_cup_play_reply::New() const {
  return new rg_world_cup_play_reply;
}

void rg_world_cup_play_reply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    server_id_ = 0u;
    reply_code_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool rg_world_cup_play_reply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 server_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_id_)));
          set_has_server_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_reply_code;
        break;
      }

      // optional uint32 reply_code = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reply_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reply_code_)));
          set_has_reply_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void rg_world_cup_play_reply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 server_id = 1;
  if (has_server_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->server_id(), output);
  }

  // optional uint32 reply_code = 2;
  if (has_reply_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->reply_code(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* rg_world_cup_play_reply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 server_id = 1;
  if (has_server_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->server_id(), target);
  }

  // optional uint32 reply_code = 2;
  if (has_reply_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->reply_code(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int rg_world_cup_play_reply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 server_id = 1;
    if (has_server_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_id());
    }

    // optional uint32 reply_code = 2;
    if (has_reply_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reply_code());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void rg_world_cup_play_reply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const rg_world_cup_play_reply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const rg_world_cup_play_reply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void rg_world_cup_play_reply::MergeFrom(const rg_world_cup_play_reply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_server_id()) {
      set_server_id(from.server_id());
    }
    if (from.has_reply_code()) {
      set_reply_code(from.reply_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void rg_world_cup_play_reply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void rg_world_cup_play_reply::CopyFrom(const rg_world_cup_play_reply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool rg_world_cup_play_reply::IsInitialized() const {

  return true;
}

void rg_world_cup_play_reply::Swap(rg_world_cup_play_reply* other) {
  if (other != this) {
    std::swap(server_id_, other->server_id_);
    std::swap(reply_code_, other->reply_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata rg_world_cup_play_reply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = rg_world_cup_play_reply_descriptor_;
  metadata.reflection = rg_world_cup_play_reply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int re_world_cup_update_notify::kBattleInfoFieldNumber;
#endif  // !_MSC_VER

re_world_cup_update_notify::re_world_cup_update_notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void re_world_cup_update_notify::InitAsDefaultInstance() {
  battle_info_ = const_cast< ::proto::common::world_cup_battle*>(&::proto::common::world_cup_battle::default_instance());
}

re_world_cup_update_notify::re_world_cup_update_notify(const re_world_cup_update_notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void re_world_cup_update_notify::SharedCtor() {
  _cached_size_ = 0;
  battle_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

re_world_cup_update_notify::~re_world_cup_update_notify() {
  SharedDtor();
}

void re_world_cup_update_notify::SharedDtor() {
  if (this != default_instance_) {
    delete battle_info_;
  }
}

void re_world_cup_update_notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* re_world_cup_update_notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return re_world_cup_update_notify_descriptor_;
}

const re_world_cup_update_notify& re_world_cup_update_notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

re_world_cup_update_notify* re_world_cup_update_notify::default_instance_ = NULL;

re_world_cup_update_notify* re_world_cup_update_notify::New() const {
  return new re_world_cup_update_notify;
}

void re_world_cup_update_notify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_battle_info()) {
      if (battle_info_ != NULL) battle_info_->::proto::common::world_cup_battle::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool re_world_cup_update_notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.common.world_cup_battle battle_info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_battle_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void re_world_cup_update_notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .proto.common.world_cup_battle battle_info = 1;
  if (has_battle_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->battle_info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* re_world_cup_update_notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .proto.common.world_cup_battle battle_info = 1;
  if (has_battle_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->battle_info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int re_world_cup_update_notify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .proto.common.world_cup_battle battle_info = 1;
    if (has_battle_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->battle_info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void re_world_cup_update_notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const re_world_cup_update_notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const re_world_cup_update_notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void re_world_cup_update_notify::MergeFrom(const re_world_cup_update_notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_battle_info()) {
      mutable_battle_info()->::proto::common::world_cup_battle::MergeFrom(from.battle_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void re_world_cup_update_notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void re_world_cup_update_notify::CopyFrom(const re_world_cup_update_notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool re_world_cup_update_notify::IsInitialized() const {

  return true;
}

void re_world_cup_update_notify::Swap(re_world_cup_update_notify* other) {
  if (other != this) {
    std::swap(battle_info_, other->battle_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata re_world_cup_update_notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = re_world_cup_update_notify_descriptor_;
  metadata.reflection = re_world_cup_update_notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int er_world_cup_bet_data_request::kServerIdFieldNumber;
#endif  // !_MSC_VER

er_world_cup_bet_data_request::er_world_cup_bet_data_request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void er_world_cup_bet_data_request::InitAsDefaultInstance() {
}

er_world_cup_bet_data_request::er_world_cup_bet_data_request(const er_world_cup_bet_data_request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void er_world_cup_bet_data_request::SharedCtor() {
  _cached_size_ = 0;
  server_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

er_world_cup_bet_data_request::~er_world_cup_bet_data_request() {
  SharedDtor();
}

void er_world_cup_bet_data_request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void er_world_cup_bet_data_request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* er_world_cup_bet_data_request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return er_world_cup_bet_data_request_descriptor_;
}

const er_world_cup_bet_data_request& er_world_cup_bet_data_request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

er_world_cup_bet_data_request* er_world_cup_bet_data_request::default_instance_ = NULL;

er_world_cup_bet_data_request* er_world_cup_bet_data_request::New() const {
  return new er_world_cup_bet_data_request;
}

void er_world_cup_bet_data_request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    server_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool er_world_cup_bet_data_request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 server_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_id_)));
          set_has_server_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void er_world_cup_bet_data_request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 server_id = 1;
  if (has_server_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->server_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* er_world_cup_bet_data_request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 server_id = 1;
  if (has_server_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->server_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int er_world_cup_bet_data_request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 server_id = 1;
    if (has_server_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void er_world_cup_bet_data_request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const er_world_cup_bet_data_request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const er_world_cup_bet_data_request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void er_world_cup_bet_data_request::MergeFrom(const er_world_cup_bet_data_request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_server_id()) {
      set_server_id(from.server_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void er_world_cup_bet_data_request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void er_world_cup_bet_data_request::CopyFrom(const er_world_cup_bet_data_request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool er_world_cup_bet_data_request::IsInitialized() const {

  return true;
}

void er_world_cup_bet_data_request::Swap(er_world_cup_bet_data_request* other) {
  if (other != this) {
    std::swap(server_id_, other->server_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata er_world_cup_bet_data_request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = er_world_cup_bet_data_request_descriptor_;
  metadata.reflection = er_world_cup_bet_data_request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int re_world_cup_bet_data_reply::kServerIdFieldNumber;
const int re_world_cup_bet_data_reply::kBetDataFieldNumber;
#endif  // !_MSC_VER

re_world_cup_bet_data_reply::re_world_cup_bet_data_reply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void re_world_cup_bet_data_reply::InitAsDefaultInstance() {
}

re_world_cup_bet_data_reply::re_world_cup_bet_data_reply(const re_world_cup_bet_data_reply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void re_world_cup_bet_data_reply::SharedCtor() {
  _cached_size_ = 0;
  server_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

re_world_cup_bet_data_reply::~re_world_cup_bet_data_reply() {
  SharedDtor();
}

void re_world_cup_bet_data_reply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void re_world_cup_bet_data_reply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* re_world_cup_bet_data_reply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return re_world_cup_bet_data_reply_descriptor_;
}

const re_world_cup_bet_data_reply& re_world_cup_bet_data_reply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

re_world_cup_bet_data_reply* re_world_cup_bet_data_reply::default_instance_ = NULL;

re_world_cup_bet_data_reply* re_world_cup_bet_data_reply::New() const {
  return new re_world_cup_bet_data_reply;
}

void re_world_cup_bet_data_reply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    server_id_ = 0u;
  }
  bet_data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool re_world_cup_bet_data_reply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 server_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_id_)));
          set_has_server_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_bet_data;
        break;
      }

      // repeated .proto.common.world_cup_bet bet_data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bet_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_bet_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_bet_data;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void re_world_cup_bet_data_reply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 server_id = 1;
  if (has_server_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->server_id(), output);
  }

  // repeated .proto.common.world_cup_bet bet_data = 2;
  for (int i = 0; i < this->bet_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->bet_data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* re_world_cup_bet_data_reply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 server_id = 1;
  if (has_server_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->server_id(), target);
  }

  // repeated .proto.common.world_cup_bet bet_data = 2;
  for (int i = 0; i < this->bet_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->bet_data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int re_world_cup_bet_data_reply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 server_id = 1;
    if (has_server_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_id());
    }

  }
  // repeated .proto.common.world_cup_bet bet_data = 2;
  total_size += 1 * this->bet_data_size();
  for (int i = 0; i < this->bet_data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->bet_data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void re_world_cup_bet_data_reply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const re_world_cup_bet_data_reply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const re_world_cup_bet_data_reply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void re_world_cup_bet_data_reply::MergeFrom(const re_world_cup_bet_data_reply& from) {
  GOOGLE_CHECK_NE(&from, this);
  bet_data_.MergeFrom(from.bet_data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_server_id()) {
      set_server_id(from.server_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void re_world_cup_bet_data_reply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void re_world_cup_bet_data_reply::CopyFrom(const re_world_cup_bet_data_reply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool re_world_cup_bet_data_reply::IsInitialized() const {

  return true;
}

void re_world_cup_bet_data_reply::Swap(re_world_cup_bet_data_reply* other) {
  if (other != this) {
    std::swap(server_id_, other->server_id_);
    bet_data_.Swap(&other->bet_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata re_world_cup_bet_data_reply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = re_world_cup_bet_data_reply_descriptor_;
  metadata.reflection = re_world_cup_bet_data_reply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int gr_world_cup_bet_request::kBattleUidFieldNumber;
const int gr_world_cup_bet_request::kWinnerFieldNumber;
const int gr_world_cup_bet_request::kOddsFieldNumber;
const int gr_world_cup_bet_request::kBetFieldNumber;
const int gr_world_cup_bet_request::kServerIdFieldNumber;
#endif  // !_MSC_VER

gr_world_cup_bet_request::gr_world_cup_bet_request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gr_world_cup_bet_request::InitAsDefaultInstance() {
}

gr_world_cup_bet_request::gr_world_cup_bet_request(const gr_world_cup_bet_request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gr_world_cup_bet_request::SharedCtor() {
  _cached_size_ = 0;
  battle_uid_ = GOOGLE_ULONGLONG(0);
  winner_ = GOOGLE_ULONGLONG(0);
  odds_ = 0u;
  bet_ = 0u;
  server_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gr_world_cup_bet_request::~gr_world_cup_bet_request() {
  SharedDtor();
}

void gr_world_cup_bet_request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void gr_world_cup_bet_request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gr_world_cup_bet_request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gr_world_cup_bet_request_descriptor_;
}

const gr_world_cup_bet_request& gr_world_cup_bet_request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

gr_world_cup_bet_request* gr_world_cup_bet_request::default_instance_ = NULL;

gr_world_cup_bet_request* gr_world_cup_bet_request::New() const {
  return new gr_world_cup_bet_request;
}

void gr_world_cup_bet_request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    battle_uid_ = GOOGLE_ULONGLONG(0);
    winner_ = GOOGLE_ULONGLONG(0);
    odds_ = 0u;
    bet_ = 0u;
    server_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gr_world_cup_bet_request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 battle_uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &battle_uid_)));
          set_has_battle_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_winner;
        break;
      }

      // optional uint64 winner = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_winner:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &winner_)));
          set_has_winner();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_odds;
        break;
      }

      // optional uint32 odds = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_odds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &odds_)));
          set_has_odds();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_bet;
        break;
      }

      // optional uint32 bet = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bet:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bet_)));
          set_has_bet();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_server_id;
        break;
      }

      // optional uint32 server_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_server_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_id_)));
          set_has_server_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gr_world_cup_bet_request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 battle_uid = 1;
  if (has_battle_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->battle_uid(), output);
  }

  // optional uint64 winner = 2;
  if (has_winner()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->winner(), output);
  }

  // optional uint32 odds = 3;
  if (has_odds()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->odds(), output);
  }

  // optional uint32 bet = 4;
  if (has_bet()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->bet(), output);
  }

  // optional uint32 server_id = 5;
  if (has_server_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->server_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gr_world_cup_bet_request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 battle_uid = 1;
  if (has_battle_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->battle_uid(), target);
  }

  // optional uint64 winner = 2;
  if (has_winner()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->winner(), target);
  }

  // optional uint32 odds = 3;
  if (has_odds()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->odds(), target);
  }

  // optional uint32 bet = 4;
  if (has_bet()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->bet(), target);
  }

  // optional uint32 server_id = 5;
  if (has_server_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->server_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gr_world_cup_bet_request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 battle_uid = 1;
    if (has_battle_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->battle_uid());
    }

    // optional uint64 winner = 2;
    if (has_winner()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->winner());
    }

    // optional uint32 odds = 3;
    if (has_odds()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->odds());
    }

    // optional uint32 bet = 4;
    if (has_bet()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bet());
    }

    // optional uint32 server_id = 5;
    if (has_server_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gr_world_cup_bet_request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gr_world_cup_bet_request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gr_world_cup_bet_request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gr_world_cup_bet_request::MergeFrom(const gr_world_cup_bet_request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_battle_uid()) {
      set_battle_uid(from.battle_uid());
    }
    if (from.has_winner()) {
      set_winner(from.winner());
    }
    if (from.has_odds()) {
      set_odds(from.odds());
    }
    if (from.has_bet()) {
      set_bet(from.bet());
    }
    if (from.has_server_id()) {
      set_server_id(from.server_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gr_world_cup_bet_request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gr_world_cup_bet_request::CopyFrom(const gr_world_cup_bet_request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gr_world_cup_bet_request::IsInitialized() const {

  return true;
}

void gr_world_cup_bet_request::Swap(gr_world_cup_bet_request* other) {
  if (other != this) {
    std::swap(battle_uid_, other->battle_uid_);
    std::swap(winner_, other->winner_);
    std::swap(odds_, other->odds_);
    std::swap(bet_, other->bet_);
    std::swap(server_id_, other->server_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gr_world_cup_bet_request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gr_world_cup_bet_request_descriptor_;
  metadata.reflection = gr_world_cup_bet_request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int rg_world_cup_bet_reply::kReplyCodeFieldNumber;
const int rg_world_cup_bet_reply::kOddsFieldNumber;
const int rg_world_cup_bet_reply::kBetFieldNumber;
const int rg_world_cup_bet_reply::kSelfBetFieldNumber;
const int rg_world_cup_bet_reply::kServerIdFieldNumber;
#endif  // !_MSC_VER

rg_world_cup_bet_reply::rg_world_cup_bet_reply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void rg_world_cup_bet_reply::InitAsDefaultInstance() {
  self_bet_ = const_cast< ::proto::common::world_cup_bet*>(&::proto::common::world_cup_bet::default_instance());
}

rg_world_cup_bet_reply::rg_world_cup_bet_reply(const rg_world_cup_bet_reply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void rg_world_cup_bet_reply::SharedCtor() {
  _cached_size_ = 0;
  reply_code_ = 0u;
  odds_ = 0u;
  bet_ = 0u;
  self_bet_ = NULL;
  server_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

rg_world_cup_bet_reply::~rg_world_cup_bet_reply() {
  SharedDtor();
}

void rg_world_cup_bet_reply::SharedDtor() {
  if (this != default_instance_) {
    delete self_bet_;
  }
}

void rg_world_cup_bet_reply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* rg_world_cup_bet_reply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return rg_world_cup_bet_reply_descriptor_;
}

const rg_world_cup_bet_reply& rg_world_cup_bet_reply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

rg_world_cup_bet_reply* rg_world_cup_bet_reply::default_instance_ = NULL;

rg_world_cup_bet_reply* rg_world_cup_bet_reply::New() const {
  return new rg_world_cup_bet_reply;
}

void rg_world_cup_bet_reply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    reply_code_ = 0u;
    odds_ = 0u;
    bet_ = 0u;
    if (has_self_bet()) {
      if (self_bet_ != NULL) self_bet_->::proto::common::world_cup_bet::Clear();
    }
    server_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool rg_world_cup_bet_reply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 reply_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reply_code_)));
          set_has_reply_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_odds;
        break;
      }

      // optional uint32 odds = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_odds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &odds_)));
          set_has_odds();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_bet;
        break;
      }

      // optional uint32 bet = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bet:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bet_)));
          set_has_bet();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_self_bet;
        break;
      }

      // optional .proto.common.world_cup_bet self_bet = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_self_bet:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_self_bet()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_server_id;
        break;
      }

      // optional uint32 server_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_server_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_id_)));
          set_has_server_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void rg_world_cup_bet_reply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 reply_code = 1;
  if (has_reply_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->reply_code(), output);
  }

  // optional uint32 odds = 2;
  if (has_odds()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->odds(), output);
  }

  // optional uint32 bet = 3;
  if (has_bet()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->bet(), output);
  }

  // optional .proto.common.world_cup_bet self_bet = 4;
  if (has_self_bet()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->self_bet(), output);
  }

  // optional uint32 server_id = 5;
  if (has_server_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->server_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* rg_world_cup_bet_reply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 reply_code = 1;
  if (has_reply_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->reply_code(), target);
  }

  // optional uint32 odds = 2;
  if (has_odds()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->odds(), target);
  }

  // optional uint32 bet = 3;
  if (has_bet()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->bet(), target);
  }

  // optional .proto.common.world_cup_bet self_bet = 4;
  if (has_self_bet()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->self_bet(), target);
  }

  // optional uint32 server_id = 5;
  if (has_server_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->server_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int rg_world_cup_bet_reply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 reply_code = 1;
    if (has_reply_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reply_code());
    }

    // optional uint32 odds = 2;
    if (has_odds()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->odds());
    }

    // optional uint32 bet = 3;
    if (has_bet()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bet());
    }

    // optional .proto.common.world_cup_bet self_bet = 4;
    if (has_self_bet()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->self_bet());
    }

    // optional uint32 server_id = 5;
    if (has_server_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void rg_world_cup_bet_reply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const rg_world_cup_bet_reply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const rg_world_cup_bet_reply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void rg_world_cup_bet_reply::MergeFrom(const rg_world_cup_bet_reply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reply_code()) {
      set_reply_code(from.reply_code());
    }
    if (from.has_odds()) {
      set_odds(from.odds());
    }
    if (from.has_bet()) {
      set_bet(from.bet());
    }
    if (from.has_self_bet()) {
      mutable_self_bet()->::proto::common::world_cup_bet::MergeFrom(from.self_bet());
    }
    if (from.has_server_id()) {
      set_server_id(from.server_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void rg_world_cup_bet_reply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void rg_world_cup_bet_reply::CopyFrom(const rg_world_cup_bet_reply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool rg_world_cup_bet_reply::IsInitialized() const {

  return true;
}

void rg_world_cup_bet_reply::Swap(rg_world_cup_bet_reply* other) {
  if (other != this) {
    std::swap(reply_code_, other->reply_code_);
    std::swap(odds_, other->odds_);
    std::swap(bet_, other->bet_);
    std::swap(self_bet_, other->self_bet_);
    std::swap(server_id_, other->server_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata rg_world_cup_bet_reply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = rg_world_cup_bet_reply_descriptor_;
  metadata.reflection = rg_world_cup_bet_reply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int gr_world_cup_bet_reward_request::kBattleUidFieldNumber;
const int gr_world_cup_bet_reward_request::kServerIdFieldNumber;
#endif  // !_MSC_VER

gr_world_cup_bet_reward_request::gr_world_cup_bet_reward_request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gr_world_cup_bet_reward_request::InitAsDefaultInstance() {
}

gr_world_cup_bet_reward_request::gr_world_cup_bet_reward_request(const gr_world_cup_bet_reward_request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gr_world_cup_bet_reward_request::SharedCtor() {
  _cached_size_ = 0;
  battle_uid_ = GOOGLE_ULONGLONG(0);
  server_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gr_world_cup_bet_reward_request::~gr_world_cup_bet_reward_request() {
  SharedDtor();
}

void gr_world_cup_bet_reward_request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void gr_world_cup_bet_reward_request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gr_world_cup_bet_reward_request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gr_world_cup_bet_reward_request_descriptor_;
}

const gr_world_cup_bet_reward_request& gr_world_cup_bet_reward_request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

gr_world_cup_bet_reward_request* gr_world_cup_bet_reward_request::default_instance_ = NULL;

gr_world_cup_bet_reward_request* gr_world_cup_bet_reward_request::New() const {
  return new gr_world_cup_bet_reward_request;
}

void gr_world_cup_bet_reward_request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    battle_uid_ = GOOGLE_ULONGLONG(0);
    server_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gr_world_cup_bet_reward_request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 battle_uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &battle_uid_)));
          set_has_battle_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_server_id;
        break;
      }

      // optional uint32 server_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_server_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_id_)));
          set_has_server_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gr_world_cup_bet_reward_request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 battle_uid = 1;
  if (has_battle_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->battle_uid(), output);
  }

  // optional uint32 server_id = 2;
  if (has_server_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->server_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gr_world_cup_bet_reward_request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 battle_uid = 1;
  if (has_battle_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->battle_uid(), target);
  }

  // optional uint32 server_id = 2;
  if (has_server_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->server_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gr_world_cup_bet_reward_request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 battle_uid = 1;
    if (has_battle_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->battle_uid());
    }

    // optional uint32 server_id = 2;
    if (has_server_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gr_world_cup_bet_reward_request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gr_world_cup_bet_reward_request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gr_world_cup_bet_reward_request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gr_world_cup_bet_reward_request::MergeFrom(const gr_world_cup_bet_reward_request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_battle_uid()) {
      set_battle_uid(from.battle_uid());
    }
    if (from.has_server_id()) {
      set_server_id(from.server_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gr_world_cup_bet_reward_request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gr_world_cup_bet_reward_request::CopyFrom(const gr_world_cup_bet_reward_request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gr_world_cup_bet_reward_request::IsInitialized() const {

  return true;
}

void gr_world_cup_bet_reward_request::Swap(gr_world_cup_bet_reward_request* other) {
  if (other != this) {
    std::swap(battle_uid_, other->battle_uid_);
    std::swap(server_id_, other->server_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gr_world_cup_bet_reward_request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gr_world_cup_bet_reward_request_descriptor_;
  metadata.reflection = gr_world_cup_bet_reward_request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int rg_world_cup_bet_reward_reply::kReplyCodeFieldNumber;
const int rg_world_cup_bet_reward_reply::kRewardFieldNumber;
const int rg_world_cup_bet_reward_reply::kServerIdFieldNumber;
#endif  // !_MSC_VER

rg_world_cup_bet_reward_reply::rg_world_cup_bet_reward_reply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void rg_world_cup_bet_reward_reply::InitAsDefaultInstance() {
}

rg_world_cup_bet_reward_reply::rg_world_cup_bet_reward_reply(const rg_world_cup_bet_reward_reply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void rg_world_cup_bet_reward_reply::SharedCtor() {
  _cached_size_ = 0;
  reply_code_ = 0u;
  reward_ = 0u;
  server_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

rg_world_cup_bet_reward_reply::~rg_world_cup_bet_reward_reply() {
  SharedDtor();
}

void rg_world_cup_bet_reward_reply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void rg_world_cup_bet_reward_reply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* rg_world_cup_bet_reward_reply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return rg_world_cup_bet_reward_reply_descriptor_;
}

const rg_world_cup_bet_reward_reply& rg_world_cup_bet_reward_reply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

rg_world_cup_bet_reward_reply* rg_world_cup_bet_reward_reply::default_instance_ = NULL;

rg_world_cup_bet_reward_reply* rg_world_cup_bet_reward_reply::New() const {
  return new rg_world_cup_bet_reward_reply;
}

void rg_world_cup_bet_reward_reply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    reply_code_ = 0u;
    reward_ = 0u;
    server_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool rg_world_cup_bet_reward_reply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 reply_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reply_code_)));
          set_has_reply_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_reward;
        break;
      }

      // optional uint32 reward = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reward_)));
          set_has_reward();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_server_id;
        break;
      }

      // optional uint32 server_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_server_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_id_)));
          set_has_server_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void rg_world_cup_bet_reward_reply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 reply_code = 1;
  if (has_reply_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->reply_code(), output);
  }

  // optional uint32 reward = 2;
  if (has_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->reward(), output);
  }

  // optional uint32 server_id = 3;
  if (has_server_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->server_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* rg_world_cup_bet_reward_reply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 reply_code = 1;
  if (has_reply_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->reply_code(), target);
  }

  // optional uint32 reward = 2;
  if (has_reward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->reward(), target);
  }

  // optional uint32 server_id = 3;
  if (has_server_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->server_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int rg_world_cup_bet_reward_reply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 reply_code = 1;
    if (has_reply_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reply_code());
    }

    // optional uint32 reward = 2;
    if (has_reward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reward());
    }

    // optional uint32 server_id = 3;
    if (has_server_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void rg_world_cup_bet_reward_reply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const rg_world_cup_bet_reward_reply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const rg_world_cup_bet_reward_reply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void rg_world_cup_bet_reward_reply::MergeFrom(const rg_world_cup_bet_reward_reply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reply_code()) {
      set_reply_code(from.reply_code());
    }
    if (from.has_reward()) {
      set_reward(from.reward());
    }
    if (from.has_server_id()) {
      set_server_id(from.server_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void rg_world_cup_bet_reward_reply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void rg_world_cup_bet_reward_reply::CopyFrom(const rg_world_cup_bet_reward_reply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool rg_world_cup_bet_reward_reply::IsInitialized() const {

  return true;
}

void rg_world_cup_bet_reward_reply::Swap(rg_world_cup_bet_reward_reply* other) {
  if (other != this) {
    std::swap(reply_code_, other->reply_code_);
    std::swap(reward_, other->reward_);
    std::swap(server_id_, other->server_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata rg_world_cup_bet_reward_reply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = rg_world_cup_bet_reward_reply_descriptor_;
  metadata.reflection = rg_world_cup_bet_reward_reply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int er_world_cup_odds_request::kServerIdFieldNumber;
const int er_world_cup_odds_request::kBattleUidFieldNumber;
#endif  // !_MSC_VER

er_world_cup_odds_request::er_world_cup_odds_request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void er_world_cup_odds_request::InitAsDefaultInstance() {
}

er_world_cup_odds_request::er_world_cup_odds_request(const er_world_cup_odds_request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void er_world_cup_odds_request::SharedCtor() {
  _cached_size_ = 0;
  server_id_ = 0u;
  battle_uid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

er_world_cup_odds_request::~er_world_cup_odds_request() {
  SharedDtor();
}

void er_world_cup_odds_request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void er_world_cup_odds_request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* er_world_cup_odds_request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return er_world_cup_odds_request_descriptor_;
}

const er_world_cup_odds_request& er_world_cup_odds_request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

er_world_cup_odds_request* er_world_cup_odds_request::default_instance_ = NULL;

er_world_cup_odds_request* er_world_cup_odds_request::New() const {
  return new er_world_cup_odds_request;
}

void er_world_cup_odds_request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    server_id_ = 0u;
    battle_uid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool er_world_cup_odds_request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 server_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_id_)));
          set_has_server_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_battle_uid;
        break;
      }

      // optional uint64 battle_uid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_battle_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &battle_uid_)));
          set_has_battle_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void er_world_cup_odds_request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 server_id = 1;
  if (has_server_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->server_id(), output);
  }

  // optional uint64 battle_uid = 2;
  if (has_battle_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->battle_uid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* er_world_cup_odds_request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 server_id = 1;
  if (has_server_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->server_id(), target);
  }

  // optional uint64 battle_uid = 2;
  if (has_battle_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->battle_uid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int er_world_cup_odds_request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 server_id = 1;
    if (has_server_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_id());
    }

    // optional uint64 battle_uid = 2;
    if (has_battle_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->battle_uid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void er_world_cup_odds_request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const er_world_cup_odds_request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const er_world_cup_odds_request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void er_world_cup_odds_request::MergeFrom(const er_world_cup_odds_request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_server_id()) {
      set_server_id(from.server_id());
    }
    if (from.has_battle_uid()) {
      set_battle_uid(from.battle_uid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void er_world_cup_odds_request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void er_world_cup_odds_request::CopyFrom(const er_world_cup_odds_request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool er_world_cup_odds_request::IsInitialized() const {

  return true;
}

void er_world_cup_odds_request::Swap(er_world_cup_odds_request* other) {
  if (other != this) {
    std::swap(server_id_, other->server_id_);
    std::swap(battle_uid_, other->battle_uid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata er_world_cup_odds_request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = er_world_cup_odds_request_descriptor_;
  metadata.reflection = er_world_cup_odds_request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int re_world_cup_odds_reply::kServerIdFieldNumber;
const int re_world_cup_odds_reply::kOddsDataFieldNumber;
#endif  // !_MSC_VER

re_world_cup_odds_reply::re_world_cup_odds_reply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void re_world_cup_odds_reply::InitAsDefaultInstance() {
  odds_data_ = const_cast< ::proto::common::world_cup_odds*>(&::proto::common::world_cup_odds::default_instance());
}

re_world_cup_odds_reply::re_world_cup_odds_reply(const re_world_cup_odds_reply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void re_world_cup_odds_reply::SharedCtor() {
  _cached_size_ = 0;
  server_id_ = 0u;
  odds_data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

re_world_cup_odds_reply::~re_world_cup_odds_reply() {
  SharedDtor();
}

void re_world_cup_odds_reply::SharedDtor() {
  if (this != default_instance_) {
    delete odds_data_;
  }
}

void re_world_cup_odds_reply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* re_world_cup_odds_reply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return re_world_cup_odds_reply_descriptor_;
}

const re_world_cup_odds_reply& re_world_cup_odds_reply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

re_world_cup_odds_reply* re_world_cup_odds_reply::default_instance_ = NULL;

re_world_cup_odds_reply* re_world_cup_odds_reply::New() const {
  return new re_world_cup_odds_reply;
}

void re_world_cup_odds_reply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    server_id_ = 0u;
    if (has_odds_data()) {
      if (odds_data_ != NULL) odds_data_->::proto::common::world_cup_odds::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool re_world_cup_odds_reply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 server_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_id_)));
          set_has_server_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_odds_data;
        break;
      }

      // optional .proto.common.world_cup_odds odds_data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_odds_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_odds_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void re_world_cup_odds_reply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 server_id = 1;
  if (has_server_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->server_id(), output);
  }

  // optional .proto.common.world_cup_odds odds_data = 2;
  if (has_odds_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->odds_data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* re_world_cup_odds_reply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 server_id = 1;
  if (has_server_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->server_id(), target);
  }

  // optional .proto.common.world_cup_odds odds_data = 2;
  if (has_odds_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->odds_data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int re_world_cup_odds_reply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 server_id = 1;
    if (has_server_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_id());
    }

    // optional .proto.common.world_cup_odds odds_data = 2;
    if (has_odds_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->odds_data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void re_world_cup_odds_reply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const re_world_cup_odds_reply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const re_world_cup_odds_reply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void re_world_cup_odds_reply::MergeFrom(const re_world_cup_odds_reply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_server_id()) {
      set_server_id(from.server_id());
    }
    if (from.has_odds_data()) {
      mutable_odds_data()->::proto::common::world_cup_odds::MergeFrom(from.odds_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void re_world_cup_odds_reply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void re_world_cup_odds_reply::CopyFrom(const re_world_cup_odds_reply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool re_world_cup_odds_reply::IsInitialized() const {

  return true;
}

void re_world_cup_odds_reply::Swap(re_world_cup_odds_reply* other) {
  if (other != this) {
    std::swap(server_id_, other->server_id_);
    std::swap(odds_data_, other->odds_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata re_world_cup_odds_reply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = re_world_cup_odds_reply_descriptor_;
  metadata.reflection = re_world_cup_odds_reply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int eg_red_point_notify::kUidFieldNumber;
const int eg_red_point_notify::kRedTypeFieldNumber;
const int eg_red_point_notify::kParamFieldNumber;
#endif  // !_MSC_VER

eg_red_point_notify::eg_red_point_notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void eg_red_point_notify::InitAsDefaultInstance() {
}

eg_red_point_notify::eg_red_point_notify(const eg_red_point_notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void eg_red_point_notify::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_ULONGLONG(0);
  red_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

eg_red_point_notify::~eg_red_point_notify() {
  SharedDtor();
}

void eg_red_point_notify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void eg_red_point_notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* eg_red_point_notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return eg_red_point_notify_descriptor_;
}

const eg_red_point_notify& eg_red_point_notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

eg_red_point_notify* eg_red_point_notify::default_instance_ = NULL;

eg_red_point_notify* eg_red_point_notify::New() const {
  return new eg_red_point_notify;
}

void eg_red_point_notify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = GOOGLE_ULONGLONG(0);
    red_type_ = 0;
  }
  param_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool eg_red_point_notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_red_type;
        break;
      }

      // optional .proto.common.RED_POINT_TYPE red_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_red_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::common::RED_POINT_TYPE_IsValid(value)) {
            set_red_type(static_cast< ::proto::common::RED_POINT_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_param;
        break;
      }

      // repeated uint32 param = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_param:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_param())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_param())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_param;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void eg_red_point_notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uid(), output);
  }

  // optional .proto.common.RED_POINT_TYPE red_type = 2;
  if (has_red_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->red_type(), output);
  }

  // repeated uint32 param = 3;
  for (int i = 0; i < this->param_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->param(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* eg_red_point_notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->uid(), target);
  }

  // optional .proto.common.RED_POINT_TYPE red_type = 2;
  if (has_red_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->red_type(), target);
  }

  // repeated uint32 param = 3;
  for (int i = 0; i < this->param_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->param(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int eg_red_point_notify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uid());
    }

    // optional .proto.common.RED_POINT_TYPE red_type = 2;
    if (has_red_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->red_type());
    }

  }
  // repeated uint32 param = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->param_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->param(i));
    }
    total_size += 1 * this->param_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void eg_red_point_notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const eg_red_point_notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const eg_red_point_notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void eg_red_point_notify::MergeFrom(const eg_red_point_notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  param_.MergeFrom(from.param_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_red_type()) {
      set_red_type(from.red_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void eg_red_point_notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void eg_red_point_notify::CopyFrom(const eg_red_point_notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool eg_red_point_notify::IsInitialized() const {

  return true;
}

void eg_red_point_notify::Swap(eg_red_point_notify* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(red_type_, other->red_type_);
    param_.Swap(&other->param_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata eg_red_point_notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = eg_red_point_notify_descriptor_;
  metadata.reflection = eg_red_point_notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int troop_shadow_base::kRoleUidFieldNumber;
const int troop_shadow_base::kBlobFieldNumber;
const int troop_shadow_base::kCountryFieldNumber;
const int troop_shadow_base::kPluginModleFieldNumber;
const int troop_shadow_base::kCountryOfficerFieldNumber;
const int troop_shadow_base::kFamilyIdFieldNumber;
const int troop_shadow_base::kFamilyNameFieldNumber;
const int troop_shadow_base::kFamilyOfficerFieldNumber;
#endif  // !_MSC_VER

troop_shadow_base::troop_shadow_base()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void troop_shadow_base::InitAsDefaultInstance() {
  blob_ = const_cast< ::proto::common::role_blob_data*>(&::proto::common::role_blob_data::default_instance());
}

troop_shadow_base::troop_shadow_base(const troop_shadow_base& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void troop_shadow_base::SharedCtor() {
  _cached_size_ = 0;
  role_uid_ = GOOGLE_ULONGLONG(0);
  blob_ = NULL;
  country_ = 0u;
  plugin_modle_ = 0u;
  country_officer_ = 0u;
  family_id_ = GOOGLE_ULONGLONG(0);
  family_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  family_officer_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

troop_shadow_base::~troop_shadow_base() {
  SharedDtor();
}

void troop_shadow_base::SharedDtor() {
  if (family_name_ != &::google::protobuf::internal::kEmptyString) {
    delete family_name_;
  }
  if (this != default_instance_) {
    delete blob_;
  }
}

void troop_shadow_base::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* troop_shadow_base::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return troop_shadow_base_descriptor_;
}

const troop_shadow_base& troop_shadow_base::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

troop_shadow_base* troop_shadow_base::default_instance_ = NULL;

troop_shadow_base* troop_shadow_base::New() const {
  return new troop_shadow_base;
}

void troop_shadow_base::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_uid_ = GOOGLE_ULONGLONG(0);
    if (has_blob()) {
      if (blob_ != NULL) blob_->::proto::common::role_blob_data::Clear();
    }
    country_ = 0u;
    plugin_modle_ = 0u;
    country_officer_ = 0u;
    family_id_ = GOOGLE_ULONGLONG(0);
    if (has_family_name()) {
      if (family_name_ != &::google::protobuf::internal::kEmptyString) {
        family_name_->clear();
      }
    }
    family_officer_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool troop_shadow_base::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 role_uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_uid_)));
          set_has_role_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_blob;
        break;
      }

      // optional .proto.common.role_blob_data blob = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_blob:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_blob()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_country;
        break;
      }

      // optional uint32 country = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_country:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &country_)));
          set_has_country();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_plugin_modle;
        break;
      }

      // optional uint32 plugin_modle = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_plugin_modle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &plugin_modle_)));
          set_has_plugin_modle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_country_officer;
        break;
      }

      // optional uint32 country_officer = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_country_officer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &country_officer_)));
          set_has_country_officer();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_family_id;
        break;
      }

      // optional uint64 family_id = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_family_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &family_id_)));
          set_has_family_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_family_name;
        break;
      }

      // optional string family_name = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_family_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_family_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->family_name().data(), this->family_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_family_officer;
        break;
      }

      // optional uint32 family_officer = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_family_officer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &family_officer_)));
          set_has_family_officer();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void troop_shadow_base::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 role_uid = 1;
  if (has_role_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->role_uid(), output);
  }

  // optional .proto.common.role_blob_data blob = 2;
  if (has_blob()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->blob(), output);
  }

  // optional uint32 country = 3;
  if (has_country()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->country(), output);
  }

  // optional uint32 plugin_modle = 4;
  if (has_plugin_modle()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->plugin_modle(), output);
  }

  // optional uint32 country_officer = 5;
  if (has_country_officer()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->country_officer(), output);
  }

  // optional uint64 family_id = 6;
  if (has_family_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->family_id(), output);
  }

  // optional string family_name = 7;
  if (has_family_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->family_name().data(), this->family_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->family_name(), output);
  }

  // optional uint32 family_officer = 8;
  if (has_family_officer()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->family_officer(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* troop_shadow_base::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 role_uid = 1;
  if (has_role_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->role_uid(), target);
  }

  // optional .proto.common.role_blob_data blob = 2;
  if (has_blob()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->blob(), target);
  }

  // optional uint32 country = 3;
  if (has_country()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->country(), target);
  }

  // optional uint32 plugin_modle = 4;
  if (has_plugin_modle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->plugin_modle(), target);
  }

  // optional uint32 country_officer = 5;
  if (has_country_officer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->country_officer(), target);
  }

  // optional uint64 family_id = 6;
  if (has_family_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->family_id(), target);
  }

  // optional string family_name = 7;
  if (has_family_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->family_name().data(), this->family_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->family_name(), target);
  }

  // optional uint32 family_officer = 8;
  if (has_family_officer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->family_officer(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int troop_shadow_base::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 role_uid = 1;
    if (has_role_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_uid());
    }

    // optional .proto.common.role_blob_data blob = 2;
    if (has_blob()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->blob());
    }

    // optional uint32 country = 3;
    if (has_country()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->country());
    }

    // optional uint32 plugin_modle = 4;
    if (has_plugin_modle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->plugin_modle());
    }

    // optional uint32 country_officer = 5;
    if (has_country_officer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->country_officer());
    }

    // optional uint64 family_id = 6;
    if (has_family_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->family_id());
    }

    // optional string family_name = 7;
    if (has_family_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->family_name());
    }

    // optional uint32 family_officer = 8;
    if (has_family_officer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->family_officer());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void troop_shadow_base::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const troop_shadow_base* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const troop_shadow_base*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void troop_shadow_base::MergeFrom(const troop_shadow_base& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_uid()) {
      set_role_uid(from.role_uid());
    }
    if (from.has_blob()) {
      mutable_blob()->::proto::common::role_blob_data::MergeFrom(from.blob());
    }
    if (from.has_country()) {
      set_country(from.country());
    }
    if (from.has_plugin_modle()) {
      set_plugin_modle(from.plugin_modle());
    }
    if (from.has_country_officer()) {
      set_country_officer(from.country_officer());
    }
    if (from.has_family_id()) {
      set_family_id(from.family_id());
    }
    if (from.has_family_name()) {
      set_family_name(from.family_name());
    }
    if (from.has_family_officer()) {
      set_family_officer(from.family_officer());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void troop_shadow_base::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void troop_shadow_base::CopyFrom(const troop_shadow_base& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool troop_shadow_base::IsInitialized() const {

  return true;
}

void troop_shadow_base::Swap(troop_shadow_base* other) {
  if (other != this) {
    std::swap(role_uid_, other->role_uid_);
    std::swap(blob_, other->blob_);
    std::swap(country_, other->country_);
    std::swap(plugin_modle_, other->plugin_modle_);
    std::swap(country_officer_, other->country_officer_);
    std::swap(family_id_, other->family_id_);
    std::swap(family_name_, other->family_name_);
    std::swap(family_officer_, other->family_officer_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata troop_shadow_base::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = troop_shadow_base_descriptor_;
  metadata.reflection = troop_shadow_base_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int troop_extra_info::kTutorTidFieldNumber;
const int troop_extra_info::kShadowInfoFieldNumber;
#endif  // !_MSC_VER

troop_extra_info::troop_extra_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void troop_extra_info::InitAsDefaultInstance() {
  shadow_info_ = const_cast< ::proto::server::troop_shadow_base*>(&::proto::server::troop_shadow_base::default_instance());
}

troop_extra_info::troop_extra_info(const troop_extra_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void troop_extra_info::SharedCtor() {
  _cached_size_ = 0;
  tutor_tid_ = 0u;
  shadow_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

troop_extra_info::~troop_extra_info() {
  SharedDtor();
}

void troop_extra_info::SharedDtor() {
  if (this != default_instance_) {
    delete shadow_info_;
  }
}

void troop_extra_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* troop_extra_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return troop_extra_info_descriptor_;
}

const troop_extra_info& troop_extra_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

troop_extra_info* troop_extra_info::default_instance_ = NULL;

troop_extra_info* troop_extra_info::New() const {
  return new troop_extra_info;
}

void troop_extra_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tutor_tid_ = 0u;
    if (has_shadow_info()) {
      if (shadow_info_ != NULL) shadow_info_->::proto::server::troop_shadow_base::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool troop_extra_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 tutor_tid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tutor_tid_)));
          set_has_tutor_tid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_shadow_info;
        break;
      }

      // optional .proto.server.troop_shadow_base shadow_info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_shadow_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_shadow_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void troop_extra_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 tutor_tid = 1;
  if (has_tutor_tid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->tutor_tid(), output);
  }

  // optional .proto.server.troop_shadow_base shadow_info = 2;
  if (has_shadow_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->shadow_info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* troop_extra_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 tutor_tid = 1;
  if (has_tutor_tid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->tutor_tid(), target);
  }

  // optional .proto.server.troop_shadow_base shadow_info = 2;
  if (has_shadow_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->shadow_info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int troop_extra_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 tutor_tid = 1;
    if (has_tutor_tid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tutor_tid());
    }

    // optional .proto.server.troop_shadow_base shadow_info = 2;
    if (has_shadow_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->shadow_info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void troop_extra_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const troop_extra_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const troop_extra_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void troop_extra_info::MergeFrom(const troop_extra_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tutor_tid()) {
      set_tutor_tid(from.tutor_tid());
    }
    if (from.has_shadow_info()) {
      mutable_shadow_info()->::proto::server::troop_shadow_base::MergeFrom(from.shadow_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void troop_extra_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void troop_extra_info::CopyFrom(const troop_extra_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool troop_extra_info::IsInitialized() const {

  return true;
}

void troop_extra_info::Swap(troop_extra_info* other) {
  if (other != this) {
    std::swap(tutor_tid_, other->tutor_tid_);
    std::swap(shadow_info_, other->shadow_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata troop_extra_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = troop_extra_info_descriptor_;
  metadata.reflection = troop_extra_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int troop_server_data::kBaseFieldNumber;
const int troop_server_data::kExtraDataFieldNumber;
#endif  // !_MSC_VER

troop_server_data::troop_server_data()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void troop_server_data::InitAsDefaultInstance() {
  base_ = const_cast< ::proto::common::troop_data*>(&::proto::common::troop_data::default_instance());
  extra_data_ = const_cast< ::proto::server::troop_extra_info*>(&::proto::server::troop_extra_info::default_instance());
}

troop_server_data::troop_server_data(const troop_server_data& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void troop_server_data::SharedCtor() {
  _cached_size_ = 0;
  base_ = NULL;
  extra_data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

troop_server_data::~troop_server_data() {
  SharedDtor();
}

void troop_server_data::SharedDtor() {
  if (this != default_instance_) {
    delete base_;
    delete extra_data_;
  }
}

void troop_server_data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* troop_server_data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return troop_server_data_descriptor_;
}

const troop_server_data& troop_server_data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

troop_server_data* troop_server_data::default_instance_ = NULL;

troop_server_data* troop_server_data::New() const {
  return new troop_server_data;
}

void troop_server_data::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_base()) {
      if (base_ != NULL) base_->::proto::common::troop_data::Clear();
    }
    if (has_extra_data()) {
      if (extra_data_ != NULL) extra_data_->::proto::server::troop_extra_info::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool troop_server_data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.common.troop_data base = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_extra_data;
        break;
      }

      // optional .proto.server.troop_extra_info extra_data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_extra_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_extra_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void troop_server_data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .proto.common.troop_data base = 1;
  if (has_base()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->base(), output);
  }

  // optional .proto.server.troop_extra_info extra_data = 2;
  if (has_extra_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->extra_data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* troop_server_data::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .proto.common.troop_data base = 1;
  if (has_base()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->base(), target);
  }

  // optional .proto.server.troop_extra_info extra_data = 2;
  if (has_extra_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->extra_data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int troop_server_data::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .proto.common.troop_data base = 1;
    if (has_base()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->base());
    }

    // optional .proto.server.troop_extra_info extra_data = 2;
    if (has_extra_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->extra_data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void troop_server_data::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const troop_server_data* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const troop_server_data*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void troop_server_data::MergeFrom(const troop_server_data& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_base()) {
      mutable_base()->::proto::common::troop_data::MergeFrom(from.base());
    }
    if (from.has_extra_data()) {
      mutable_extra_data()->::proto::server::troop_extra_info::MergeFrom(from.extra_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void troop_server_data::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void troop_server_data::CopyFrom(const troop_server_data& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool troop_server_data::IsInitialized() const {

  return true;
}

void troop_server_data::Swap(troop_server_data* other) {
  if (other != this) {
    std::swap(base_, other->base_);
    std::swap(extra_data_, other->extra_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata troop_server_data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = troop_server_data_descriptor_;
  metadata.reflection = troop_server_data_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int eg_troop_event_notify::kEventFieldNumber;
const int eg_troop_event_notify::kMemberIdFieldNumber;
const int eg_troop_event_notify::kTroopFieldNumber;
#endif  // !_MSC_VER

eg_troop_event_notify::eg_troop_event_notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void eg_troop_event_notify::InitAsDefaultInstance() {
  troop_ = const_cast< ::proto::server::troop_server_data*>(&::proto::server::troop_server_data::default_instance());
}

eg_troop_event_notify::eg_troop_event_notify(const eg_troop_event_notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void eg_troop_event_notify::SharedCtor() {
  _cached_size_ = 0;
  event_ = 0u;
  member_id_ = GOOGLE_ULONGLONG(0);
  troop_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

eg_troop_event_notify::~eg_troop_event_notify() {
  SharedDtor();
}

void eg_troop_event_notify::SharedDtor() {
  if (this != default_instance_) {
    delete troop_;
  }
}

void eg_troop_event_notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* eg_troop_event_notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return eg_troop_event_notify_descriptor_;
}

const eg_troop_event_notify& eg_troop_event_notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

eg_troop_event_notify* eg_troop_event_notify::default_instance_ = NULL;

eg_troop_event_notify* eg_troop_event_notify::New() const {
  return new eg_troop_event_notify;
}

void eg_troop_event_notify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    event_ = 0u;
    member_id_ = GOOGLE_ULONGLONG(0);
    if (has_troop()) {
      if (troop_ != NULL) troop_->::proto::server::troop_server_data::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool eg_troop_event_notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 event = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &event_)));
          set_has_event();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_member_id;
        break;
      }

      // optional uint64 member_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_member_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &member_id_)));
          set_has_member_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_troop;
        break;
      }

      // optional .proto.server.troop_server_data troop = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_troop:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_troop()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void eg_troop_event_notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 event = 1;
  if (has_event()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->event(), output);
  }

  // optional uint64 member_id = 2;
  if (has_member_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->member_id(), output);
  }

  // optional .proto.server.troop_server_data troop = 3;
  if (has_troop()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->troop(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* eg_troop_event_notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 event = 1;
  if (has_event()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->event(), target);
  }

  // optional uint64 member_id = 2;
  if (has_member_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->member_id(), target);
  }

  // optional .proto.server.troop_server_data troop = 3;
  if (has_troop()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->troop(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int eg_troop_event_notify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 event = 1;
    if (has_event()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->event());
    }

    // optional uint64 member_id = 2;
    if (has_member_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->member_id());
    }

    // optional .proto.server.troop_server_data troop = 3;
    if (has_troop()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->troop());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void eg_troop_event_notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const eg_troop_event_notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const eg_troop_event_notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void eg_troop_event_notify::MergeFrom(const eg_troop_event_notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_event()) {
      set_event(from.event());
    }
    if (from.has_member_id()) {
      set_member_id(from.member_id());
    }
    if (from.has_troop()) {
      mutable_troop()->::proto::server::troop_server_data::MergeFrom(from.troop());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void eg_troop_event_notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void eg_troop_event_notify::CopyFrom(const eg_troop_event_notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool eg_troop_event_notify::IsInitialized() const {

  return true;
}

void eg_troop_event_notify::Swap(eg_troop_event_notify* other) {
  if (other != this) {
    std::swap(event_, other->event_);
    std::swap(member_id_, other->member_id_);
    std::swap(troop_, other->troop_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata eg_troop_event_notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = eg_troop_event_notify_descriptor_;
  metadata.reflection = eg_troop_event_notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ge_troop_create_request::kTypeFieldNumber;
const int ge_troop_create_request::kRoleUidFieldNumber;
#endif  // !_MSC_VER

ge_troop_create_request::ge_troop_create_request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ge_troop_create_request::InitAsDefaultInstance() {
}

ge_troop_create_request::ge_troop_create_request(const ge_troop_create_request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ge_troop_create_request::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  role_uid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ge_troop_create_request::~ge_troop_create_request() {
  SharedDtor();
}

void ge_troop_create_request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ge_troop_create_request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ge_troop_create_request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ge_troop_create_request_descriptor_;
}

const ge_troop_create_request& ge_troop_create_request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

ge_troop_create_request* ge_troop_create_request::default_instance_ = NULL;

ge_troop_create_request* ge_troop_create_request::New() const {
  return new ge_troop_create_request;
}

void ge_troop_create_request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0u;
    role_uid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ge_troop_create_request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_role_uid;
        break;
      }

      // optional uint64 role_uid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_uid_)));
          set_has_role_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ge_troop_create_request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  // optional uint64 role_uid = 2;
  if (has_role_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->role_uid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ge_troop_create_request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }

  // optional uint64 role_uid = 2;
  if (has_role_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->role_uid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ge_troop_create_request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional uint64 role_uid = 2;
    if (has_role_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_uid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ge_troop_create_request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ge_troop_create_request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ge_troop_create_request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ge_troop_create_request::MergeFrom(const ge_troop_create_request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_role_uid()) {
      set_role_uid(from.role_uid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ge_troop_create_request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ge_troop_create_request::CopyFrom(const ge_troop_create_request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ge_troop_create_request::IsInitialized() const {

  return true;
}

void ge_troop_create_request::Swap(ge_troop_create_request* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(role_uid_, other->role_uid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ge_troop_create_request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ge_troop_create_request_descriptor_;
  metadata.reflection = ge_troop_create_request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ge_troop_auto_match_request::kTypeFieldNumber;
#endif  // !_MSC_VER

ge_troop_auto_match_request::ge_troop_auto_match_request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ge_troop_auto_match_request::InitAsDefaultInstance() {
}

ge_troop_auto_match_request::ge_troop_auto_match_request(const ge_troop_auto_match_request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ge_troop_auto_match_request::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ge_troop_auto_match_request::~ge_troop_auto_match_request() {
  SharedDtor();
}

void ge_troop_auto_match_request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ge_troop_auto_match_request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ge_troop_auto_match_request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ge_troop_auto_match_request_descriptor_;
}

const ge_troop_auto_match_request& ge_troop_auto_match_request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

ge_troop_auto_match_request* ge_troop_auto_match_request::default_instance_ = NULL;

ge_troop_auto_match_request* ge_troop_auto_match_request::New() const {
  return new ge_troop_auto_match_request;
}

void ge_troop_auto_match_request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ge_troop_auto_match_request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ge_troop_auto_match_request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ge_troop_auto_match_request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ge_troop_auto_match_request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ge_troop_auto_match_request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ge_troop_auto_match_request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ge_troop_auto_match_request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ge_troop_auto_match_request::MergeFrom(const ge_troop_auto_match_request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ge_troop_auto_match_request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ge_troop_auto_match_request::CopyFrom(const ge_troop_auto_match_request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ge_troop_auto_match_request::IsInitialized() const {

  return true;
}

void ge_troop_auto_match_request::Swap(ge_troop_auto_match_request* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ge_troop_auto_match_request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ge_troop_auto_match_request_descriptor_;
  metadata.reflection = ge_troop_auto_match_request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ge_troop_join_request::kTroopIdFieldNumber;
#endif  // !_MSC_VER

ge_troop_join_request::ge_troop_join_request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ge_troop_join_request::InitAsDefaultInstance() {
}

ge_troop_join_request::ge_troop_join_request(const ge_troop_join_request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ge_troop_join_request::SharedCtor() {
  _cached_size_ = 0;
  troop_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ge_troop_join_request::~ge_troop_join_request() {
  SharedDtor();
}

void ge_troop_join_request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ge_troop_join_request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ge_troop_join_request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ge_troop_join_request_descriptor_;
}

const ge_troop_join_request& ge_troop_join_request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

ge_troop_join_request* ge_troop_join_request::default_instance_ = NULL;

ge_troop_join_request* ge_troop_join_request::New() const {
  return new ge_troop_join_request;
}

void ge_troop_join_request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    troop_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ge_troop_join_request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 troop_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &troop_id_)));
          set_has_troop_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ge_troop_join_request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 troop_id = 1;
  if (has_troop_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->troop_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ge_troop_join_request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 troop_id = 1;
  if (has_troop_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->troop_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ge_troop_join_request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 troop_id = 1;
    if (has_troop_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->troop_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ge_troop_join_request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ge_troop_join_request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ge_troop_join_request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ge_troop_join_request::MergeFrom(const ge_troop_join_request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_troop_id()) {
      set_troop_id(from.troop_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ge_troop_join_request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ge_troop_join_request::CopyFrom(const ge_troop_join_request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ge_troop_join_request::IsInitialized() const {

  return true;
}

void ge_troop_join_request::Swap(ge_troop_join_request* other) {
  if (other != this) {
    std::swap(troop_id_, other->troop_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ge_troop_join_request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ge_troop_join_request_descriptor_;
  metadata.reflection = ge_troop_join_request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int eg_troop_agree_apply_request::kApplyUidFieldNumber;
#endif  // !_MSC_VER

eg_troop_agree_apply_request::eg_troop_agree_apply_request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void eg_troop_agree_apply_request::InitAsDefaultInstance() {
}

eg_troop_agree_apply_request::eg_troop_agree_apply_request(const eg_troop_agree_apply_request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void eg_troop_agree_apply_request::SharedCtor() {
  _cached_size_ = 0;
  apply_uid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

eg_troop_agree_apply_request::~eg_troop_agree_apply_request() {
  SharedDtor();
}

void eg_troop_agree_apply_request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void eg_troop_agree_apply_request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* eg_troop_agree_apply_request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return eg_troop_agree_apply_request_descriptor_;
}

const eg_troop_agree_apply_request& eg_troop_agree_apply_request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

eg_troop_agree_apply_request* eg_troop_agree_apply_request::default_instance_ = NULL;

eg_troop_agree_apply_request* eg_troop_agree_apply_request::New() const {
  return new eg_troop_agree_apply_request;
}

void eg_troop_agree_apply_request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    apply_uid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool eg_troop_agree_apply_request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 apply_uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &apply_uid_)));
          set_has_apply_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void eg_troop_agree_apply_request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 apply_uid = 1;
  if (has_apply_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->apply_uid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* eg_troop_agree_apply_request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 apply_uid = 1;
  if (has_apply_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->apply_uid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int eg_troop_agree_apply_request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 apply_uid = 1;
    if (has_apply_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->apply_uid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void eg_troop_agree_apply_request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const eg_troop_agree_apply_request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const eg_troop_agree_apply_request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void eg_troop_agree_apply_request::MergeFrom(const eg_troop_agree_apply_request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_apply_uid()) {
      set_apply_uid(from.apply_uid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void eg_troop_agree_apply_request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void eg_troop_agree_apply_request::CopyFrom(const eg_troop_agree_apply_request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool eg_troop_agree_apply_request::IsInitialized() const {

  return true;
}

void eg_troop_agree_apply_request::Swap(eg_troop_agree_apply_request* other) {
  if (other != this) {
    std::swap(apply_uid_, other->apply_uid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata eg_troop_agree_apply_request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = eg_troop_agree_apply_request_descriptor_;
  metadata.reflection = eg_troop_agree_apply_request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ge_troop_agree_apply_reply::kApplyUidFieldNumber;
const int ge_troop_agree_apply_reply::kReplyCodeFieldNumber;
#endif  // !_MSC_VER

ge_troop_agree_apply_reply::ge_troop_agree_apply_reply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ge_troop_agree_apply_reply::InitAsDefaultInstance() {
}

ge_troop_agree_apply_reply::ge_troop_agree_apply_reply(const ge_troop_agree_apply_reply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ge_troop_agree_apply_reply::SharedCtor() {
  _cached_size_ = 0;
  apply_uid_ = GOOGLE_ULONGLONG(0);
  reply_code_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ge_troop_agree_apply_reply::~ge_troop_agree_apply_reply() {
  SharedDtor();
}

void ge_troop_agree_apply_reply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ge_troop_agree_apply_reply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ge_troop_agree_apply_reply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ge_troop_agree_apply_reply_descriptor_;
}

const ge_troop_agree_apply_reply& ge_troop_agree_apply_reply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

ge_troop_agree_apply_reply* ge_troop_agree_apply_reply::default_instance_ = NULL;

ge_troop_agree_apply_reply* ge_troop_agree_apply_reply::New() const {
  return new ge_troop_agree_apply_reply;
}

void ge_troop_agree_apply_reply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    apply_uid_ = GOOGLE_ULONGLONG(0);
    reply_code_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ge_troop_agree_apply_reply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 apply_uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &apply_uid_)));
          set_has_apply_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_reply_code;
        break;
      }

      // optional uint32 reply_code = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reply_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reply_code_)));
          set_has_reply_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ge_troop_agree_apply_reply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 apply_uid = 1;
  if (has_apply_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->apply_uid(), output);
  }

  // optional uint32 reply_code = 2;
  if (has_reply_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->reply_code(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ge_troop_agree_apply_reply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 apply_uid = 1;
  if (has_apply_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->apply_uid(), target);
  }

  // optional uint32 reply_code = 2;
  if (has_reply_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->reply_code(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ge_troop_agree_apply_reply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 apply_uid = 1;
    if (has_apply_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->apply_uid());
    }

    // optional uint32 reply_code = 2;
    if (has_reply_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reply_code());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ge_troop_agree_apply_reply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ge_troop_agree_apply_reply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ge_troop_agree_apply_reply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ge_troop_agree_apply_reply::MergeFrom(const ge_troop_agree_apply_reply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_apply_uid()) {
      set_apply_uid(from.apply_uid());
    }
    if (from.has_reply_code()) {
      set_reply_code(from.reply_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ge_troop_agree_apply_reply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ge_troop_agree_apply_reply::CopyFrom(const ge_troop_agree_apply_reply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ge_troop_agree_apply_reply::IsInitialized() const {

  return true;
}

void ge_troop_agree_apply_reply::Swap(ge_troop_agree_apply_reply* other) {
  if (other != this) {
    std::swap(apply_uid_, other->apply_uid_);
    std::swap(reply_code_, other->reply_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ge_troop_agree_apply_reply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ge_troop_agree_apply_reply_descriptor_;
  metadata.reflection = ge_troop_agree_apply_reply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ge_troop_process_invite_request::kTroopIdFieldNumber;
const int ge_troop_process_invite_request::kProcessFieldNumber;
const int ge_troop_process_invite_request::kGameCodeFieldNumber;
#endif  // !_MSC_VER

ge_troop_process_invite_request::ge_troop_process_invite_request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ge_troop_process_invite_request::InitAsDefaultInstance() {
}

ge_troop_process_invite_request::ge_troop_process_invite_request(const ge_troop_process_invite_request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ge_troop_process_invite_request::SharedCtor() {
  _cached_size_ = 0;
  troop_id_ = GOOGLE_ULONGLONG(0);
  process_ = 0u;
  game_code_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ge_troop_process_invite_request::~ge_troop_process_invite_request() {
  SharedDtor();
}

void ge_troop_process_invite_request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ge_troop_process_invite_request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ge_troop_process_invite_request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ge_troop_process_invite_request_descriptor_;
}

const ge_troop_process_invite_request& ge_troop_process_invite_request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

ge_troop_process_invite_request* ge_troop_process_invite_request::default_instance_ = NULL;

ge_troop_process_invite_request* ge_troop_process_invite_request::New() const {
  return new ge_troop_process_invite_request;
}

void ge_troop_process_invite_request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    troop_id_ = GOOGLE_ULONGLONG(0);
    process_ = 0u;
    game_code_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ge_troop_process_invite_request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 troop_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &troop_id_)));
          set_has_troop_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_process;
        break;
      }

      // optional uint32 process = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_process:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &process_)));
          set_has_process();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_game_code;
        break;
      }

      // optional uint32 game_code = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_game_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_code_)));
          set_has_game_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ge_troop_process_invite_request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 troop_id = 1;
  if (has_troop_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->troop_id(), output);
  }

  // optional uint32 process = 2;
  if (has_process()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->process(), output);
  }

  // optional uint32 game_code = 3;
  if (has_game_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->game_code(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ge_troop_process_invite_request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 troop_id = 1;
  if (has_troop_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->troop_id(), target);
  }

  // optional uint32 process = 2;
  if (has_process()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->process(), target);
  }

  // optional uint32 game_code = 3;
  if (has_game_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->game_code(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ge_troop_process_invite_request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 troop_id = 1;
    if (has_troop_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->troop_id());
    }

    // optional uint32 process = 2;
    if (has_process()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->process());
    }

    // optional uint32 game_code = 3;
    if (has_game_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_code());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ge_troop_process_invite_request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ge_troop_process_invite_request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ge_troop_process_invite_request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ge_troop_process_invite_request::MergeFrom(const ge_troop_process_invite_request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_troop_id()) {
      set_troop_id(from.troop_id());
    }
    if (from.has_process()) {
      set_process(from.process());
    }
    if (from.has_game_code()) {
      set_game_code(from.game_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ge_troop_process_invite_request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ge_troop_process_invite_request::CopyFrom(const ge_troop_process_invite_request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ge_troop_process_invite_request::IsInitialized() const {

  return true;
}

void ge_troop_process_invite_request::Swap(ge_troop_process_invite_request* other) {
  if (other != this) {
    std::swap(troop_id_, other->troop_id_);
    std::swap(process_, other->process_);
    std::swap(game_code_, other->game_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ge_troop_process_invite_request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ge_troop_process_invite_request_descriptor_;
  metadata.reflection = ge_troop_process_invite_request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

ge_troop_dissolve_notify::ge_troop_dissolve_notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ge_troop_dissolve_notify::InitAsDefaultInstance() {
}

ge_troop_dissolve_notify::ge_troop_dissolve_notify(const ge_troop_dissolve_notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ge_troop_dissolve_notify::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ge_troop_dissolve_notify::~ge_troop_dissolve_notify() {
  SharedDtor();
}

void ge_troop_dissolve_notify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ge_troop_dissolve_notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ge_troop_dissolve_notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ge_troop_dissolve_notify_descriptor_;
}

const ge_troop_dissolve_notify& ge_troop_dissolve_notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

ge_troop_dissolve_notify* ge_troop_dissolve_notify::default_instance_ = NULL;

ge_troop_dissolve_notify* ge_troop_dissolve_notify::New() const {
  return new ge_troop_dissolve_notify;
}

void ge_troop_dissolve_notify::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ge_troop_dissolve_notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void ge_troop_dissolve_notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ge_troop_dissolve_notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ge_troop_dissolve_notify::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ge_troop_dissolve_notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ge_troop_dissolve_notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ge_troop_dissolve_notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ge_troop_dissolve_notify::MergeFrom(const ge_troop_dissolve_notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ge_troop_dissolve_notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ge_troop_dissolve_notify::CopyFrom(const ge_troop_dissolve_notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ge_troop_dissolve_notify::IsInitialized() const {

  return true;
}

void ge_troop_dissolve_notify::Swap(ge_troop_dissolve_notify* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ge_troop_dissolve_notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ge_troop_dissolve_notify_descriptor_;
  metadata.reflection = ge_troop_dissolve_notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

ge_troop_back_request::ge_troop_back_request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ge_troop_back_request::InitAsDefaultInstance() {
}

ge_troop_back_request::ge_troop_back_request(const ge_troop_back_request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ge_troop_back_request::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ge_troop_back_request::~ge_troop_back_request() {
  SharedDtor();
}

void ge_troop_back_request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ge_troop_back_request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ge_troop_back_request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ge_troop_back_request_descriptor_;
}

const ge_troop_back_request& ge_troop_back_request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

ge_troop_back_request* ge_troop_back_request::default_instance_ = NULL;

ge_troop_back_request* ge_troop_back_request::New() const {
  return new ge_troop_back_request;
}

void ge_troop_back_request::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ge_troop_back_request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void ge_troop_back_request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ge_troop_back_request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ge_troop_back_request::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ge_troop_back_request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ge_troop_back_request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ge_troop_back_request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ge_troop_back_request::MergeFrom(const ge_troop_back_request& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ge_troop_back_request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ge_troop_back_request::CopyFrom(const ge_troop_back_request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ge_troop_back_request::IsInitialized() const {

  return true;
}

void ge_troop_back_request::Swap(ge_troop_back_request* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ge_troop_back_request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ge_troop_back_request_descriptor_;
  metadata.reflection = ge_troop_back_request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ge_troop_transmission_notify::kResultFieldNumber;
#endif  // !_MSC_VER

ge_troop_transmission_notify::ge_troop_transmission_notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ge_troop_transmission_notify::InitAsDefaultInstance() {
}

ge_troop_transmission_notify::ge_troop_transmission_notify(const ge_troop_transmission_notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ge_troop_transmission_notify::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ge_troop_transmission_notify::~ge_troop_transmission_notify() {
  SharedDtor();
}

void ge_troop_transmission_notify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ge_troop_transmission_notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ge_troop_transmission_notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ge_troop_transmission_notify_descriptor_;
}

const ge_troop_transmission_notify& ge_troop_transmission_notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

ge_troop_transmission_notify* ge_troop_transmission_notify::default_instance_ = NULL;

ge_troop_transmission_notify* ge_troop_transmission_notify::New() const {
  return new ge_troop_transmission_notify;
}

void ge_troop_transmission_notify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ge_troop_transmission_notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ge_troop_transmission_notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ge_troop_transmission_notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ge_troop_transmission_notify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ge_troop_transmission_notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ge_troop_transmission_notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ge_troop_transmission_notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ge_troop_transmission_notify::MergeFrom(const ge_troop_transmission_notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ge_troop_transmission_notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ge_troop_transmission_notify::CopyFrom(const ge_troop_transmission_notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ge_troop_transmission_notify::IsInitialized() const {

  return true;
}

void ge_troop_transmission_notify::Swap(ge_troop_transmission_notify* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ge_troop_transmission_notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ge_troop_transmission_notify_descriptor_;
  metadata.reflection = ge_troop_transmission_notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

ge_troop_escape_notify::ge_troop_escape_notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ge_troop_escape_notify::InitAsDefaultInstance() {
}

ge_troop_escape_notify::ge_troop_escape_notify(const ge_troop_escape_notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ge_troop_escape_notify::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ge_troop_escape_notify::~ge_troop_escape_notify() {
  SharedDtor();
}

void ge_troop_escape_notify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ge_troop_escape_notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ge_troop_escape_notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ge_troop_escape_notify_descriptor_;
}

const ge_troop_escape_notify& ge_troop_escape_notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

ge_troop_escape_notify* ge_troop_escape_notify::default_instance_ = NULL;

ge_troop_escape_notify* ge_troop_escape_notify::New() const {
  return new ge_troop_escape_notify;
}

void ge_troop_escape_notify::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ge_troop_escape_notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void ge_troop_escape_notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ge_troop_escape_notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ge_troop_escape_notify::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ge_troop_escape_notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ge_troop_escape_notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ge_troop_escape_notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ge_troop_escape_notify::MergeFrom(const ge_troop_escape_notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ge_troop_escape_notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ge_troop_escape_notify::CopyFrom(const ge_troop_escape_notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ge_troop_escape_notify::IsInitialized() const {

  return true;
}

void ge_troop_escape_notify::Swap(ge_troop_escape_notify* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ge_troop_escape_notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ge_troop_escape_notify_descriptor_;
  metadata.reflection = ge_troop_escape_notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int eg_troop_invite_shadow_notify::kMemberInfoFieldNumber;
#endif  // !_MSC_VER

eg_troop_invite_shadow_notify::eg_troop_invite_shadow_notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void eg_troop_invite_shadow_notify::InitAsDefaultInstance() {
  member_info_ = const_cast< ::proto::common::friend_member*>(&::proto::common::friend_member::default_instance());
}

eg_troop_invite_shadow_notify::eg_troop_invite_shadow_notify(const eg_troop_invite_shadow_notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void eg_troop_invite_shadow_notify::SharedCtor() {
  _cached_size_ = 0;
  member_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

eg_troop_invite_shadow_notify::~eg_troop_invite_shadow_notify() {
  SharedDtor();
}

void eg_troop_invite_shadow_notify::SharedDtor() {
  if (this != default_instance_) {
    delete member_info_;
  }
}

void eg_troop_invite_shadow_notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* eg_troop_invite_shadow_notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return eg_troop_invite_shadow_notify_descriptor_;
}

const eg_troop_invite_shadow_notify& eg_troop_invite_shadow_notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

eg_troop_invite_shadow_notify* eg_troop_invite_shadow_notify::default_instance_ = NULL;

eg_troop_invite_shadow_notify* eg_troop_invite_shadow_notify::New() const {
  return new eg_troop_invite_shadow_notify;
}

void eg_troop_invite_shadow_notify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_member_info()) {
      if (member_info_ != NULL) member_info_->::proto::common::friend_member::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool eg_troop_invite_shadow_notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.common.friend_member member_info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_member_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void eg_troop_invite_shadow_notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .proto.common.friend_member member_info = 1;
  if (has_member_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->member_info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* eg_troop_invite_shadow_notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .proto.common.friend_member member_info = 1;
  if (has_member_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->member_info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int eg_troop_invite_shadow_notify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .proto.common.friend_member member_info = 1;
    if (has_member_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->member_info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void eg_troop_invite_shadow_notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const eg_troop_invite_shadow_notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const eg_troop_invite_shadow_notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void eg_troop_invite_shadow_notify::MergeFrom(const eg_troop_invite_shadow_notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_member_info()) {
      mutable_member_info()->::proto::common::friend_member::MergeFrom(from.member_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void eg_troop_invite_shadow_notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void eg_troop_invite_shadow_notify::CopyFrom(const eg_troop_invite_shadow_notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool eg_troop_invite_shadow_notify::IsInitialized() const {

  return true;
}

void eg_troop_invite_shadow_notify::Swap(eg_troop_invite_shadow_notify* other) {
  if (other != this) {
    std::swap(member_info_, other->member_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata eg_troop_invite_shadow_notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = eg_troop_invite_shadow_notify_descriptor_;
  metadata.reflection = eg_troop_invite_shadow_notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ge_troop_del_shadow_notify::kTroopIdFieldNumber;
const int ge_troop_del_shadow_notify::kMemberIdFieldNumber;
#endif  // !_MSC_VER

ge_troop_del_shadow_notify::ge_troop_del_shadow_notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ge_troop_del_shadow_notify::InitAsDefaultInstance() {
}

ge_troop_del_shadow_notify::ge_troop_del_shadow_notify(const ge_troop_del_shadow_notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ge_troop_del_shadow_notify::SharedCtor() {
  _cached_size_ = 0;
  troop_id_ = GOOGLE_ULONGLONG(0);
  member_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ge_troop_del_shadow_notify::~ge_troop_del_shadow_notify() {
  SharedDtor();
}

void ge_troop_del_shadow_notify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ge_troop_del_shadow_notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ge_troop_del_shadow_notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ge_troop_del_shadow_notify_descriptor_;
}

const ge_troop_del_shadow_notify& ge_troop_del_shadow_notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

ge_troop_del_shadow_notify* ge_troop_del_shadow_notify::default_instance_ = NULL;

ge_troop_del_shadow_notify* ge_troop_del_shadow_notify::New() const {
  return new ge_troop_del_shadow_notify;
}

void ge_troop_del_shadow_notify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    troop_id_ = GOOGLE_ULONGLONG(0);
    member_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ge_troop_del_shadow_notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 troop_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &troop_id_)));
          set_has_troop_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_member_id;
        break;
      }

      // optional uint64 member_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_member_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &member_id_)));
          set_has_member_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ge_troop_del_shadow_notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 troop_id = 1;
  if (has_troop_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->troop_id(), output);
  }

  // optional uint64 member_id = 2;
  if (has_member_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->member_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ge_troop_del_shadow_notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 troop_id = 1;
  if (has_troop_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->troop_id(), target);
  }

  // optional uint64 member_id = 2;
  if (has_member_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->member_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ge_troop_del_shadow_notify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 troop_id = 1;
    if (has_troop_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->troop_id());
    }

    // optional uint64 member_id = 2;
    if (has_member_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->member_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ge_troop_del_shadow_notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ge_troop_del_shadow_notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ge_troop_del_shadow_notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ge_troop_del_shadow_notify::MergeFrom(const ge_troop_del_shadow_notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_troop_id()) {
      set_troop_id(from.troop_id());
    }
    if (from.has_member_id()) {
      set_member_id(from.member_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ge_troop_del_shadow_notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ge_troop_del_shadow_notify::CopyFrom(const ge_troop_del_shadow_notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ge_troop_del_shadow_notify::IsInitialized() const {

  return true;
}

void ge_troop_del_shadow_notify::Swap(ge_troop_del_shadow_notify* other) {
  if (other != this) {
    std::swap(troop_id_, other->troop_id_);
    std::swap(member_id_, other->member_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ge_troop_del_shadow_notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ge_troop_del_shadow_notify_descriptor_;
  metadata.reflection = ge_troop_del_shadow_notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ge_troop_friend_notify::kTroopIdFieldNumber;
#endif  // !_MSC_VER

ge_troop_friend_notify::ge_troop_friend_notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ge_troop_friend_notify::InitAsDefaultInstance() {
}

ge_troop_friend_notify::ge_troop_friend_notify(const ge_troop_friend_notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ge_troop_friend_notify::SharedCtor() {
  _cached_size_ = 0;
  troop_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ge_troop_friend_notify::~ge_troop_friend_notify() {
  SharedDtor();
}

void ge_troop_friend_notify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ge_troop_friend_notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ge_troop_friend_notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ge_troop_friend_notify_descriptor_;
}

const ge_troop_friend_notify& ge_troop_friend_notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

ge_troop_friend_notify* ge_troop_friend_notify::default_instance_ = NULL;

ge_troop_friend_notify* ge_troop_friend_notify::New() const {
  return new ge_troop_friend_notify;
}

void ge_troop_friend_notify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    troop_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ge_troop_friend_notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 troop_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &troop_id_)));
          set_has_troop_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ge_troop_friend_notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 troop_id = 1;
  if (has_troop_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->troop_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ge_troop_friend_notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 troop_id = 1;
  if (has_troop_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->troop_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ge_troop_friend_notify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 troop_id = 1;
    if (has_troop_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->troop_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ge_troop_friend_notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ge_troop_friend_notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ge_troop_friend_notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ge_troop_friend_notify::MergeFrom(const ge_troop_friend_notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_troop_id()) {
      set_troop_id(from.troop_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ge_troop_friend_notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ge_troop_friend_notify::CopyFrom(const ge_troop_friend_notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ge_troop_friend_notify::IsInitialized() const {

  return true;
}

void ge_troop_friend_notify::Swap(ge_troop_friend_notify* other) {
  if (other != this) {
    std::swap(troop_id_, other->troop_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ge_troop_friend_notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ge_troop_friend_notify_descriptor_;
  metadata.reflection = ge_troop_friend_notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int game_scene_reg_info::kSceneIdFieldNumber;
const int game_scene_reg_info::kMapTidFieldNumber;
const int game_scene_reg_info::kNumFieldNumber;
const int game_scene_reg_info::kIsDiversionFieldNumber;
#endif  // !_MSC_VER

game_scene_reg_info::game_scene_reg_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void game_scene_reg_info::InitAsDefaultInstance() {
}

game_scene_reg_info::game_scene_reg_info(const game_scene_reg_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void game_scene_reg_info::SharedCtor() {
  _cached_size_ = 0;
  scene_id_ = GOOGLE_ULONGLONG(0);
  map_tid_ = 0u;
  num_ = 0u;
  is_diversion_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

game_scene_reg_info::~game_scene_reg_info() {
  SharedDtor();
}

void game_scene_reg_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void game_scene_reg_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* game_scene_reg_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return game_scene_reg_info_descriptor_;
}

const game_scene_reg_info& game_scene_reg_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

game_scene_reg_info* game_scene_reg_info::default_instance_ = NULL;

game_scene_reg_info* game_scene_reg_info::New() const {
  return new game_scene_reg_info;
}

void game_scene_reg_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    scene_id_ = GOOGLE_ULONGLONG(0);
    map_tid_ = 0u;
    num_ = 0u;
    is_diversion_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool game_scene_reg_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 scene_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &scene_id_)));
          set_has_scene_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_map_tid;
        break;
      }

      // optional uint32 map_tid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_map_tid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &map_tid_)));
          set_has_map_tid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_num;
        break;
      }

      // optional uint32 num = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_is_diversion;
        break;
      }

      // optional bool is_diversion = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_diversion:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_diversion_)));
          set_has_is_diversion();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void game_scene_reg_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 scene_id = 1;
  if (has_scene_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->scene_id(), output);
  }

  // optional uint32 map_tid = 2;
  if (has_map_tid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->map_tid(), output);
  }

  // optional uint32 num = 3;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->num(), output);
  }

  // optional bool is_diversion = 4;
  if (has_is_diversion()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_diversion(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* game_scene_reg_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 scene_id = 1;
  if (has_scene_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->scene_id(), target);
  }

  // optional uint32 map_tid = 2;
  if (has_map_tid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->map_tid(), target);
  }

  // optional uint32 num = 3;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->num(), target);
  }

  // optional bool is_diversion = 4;
  if (has_is_diversion()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->is_diversion(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int game_scene_reg_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 scene_id = 1;
    if (has_scene_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->scene_id());
    }

    // optional uint32 map_tid = 2;
    if (has_map_tid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->map_tid());
    }

    // optional uint32 num = 3;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }

    // optional bool is_diversion = 4;
    if (has_is_diversion()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void game_scene_reg_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const game_scene_reg_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const game_scene_reg_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void game_scene_reg_info::MergeFrom(const game_scene_reg_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_scene_id()) {
      set_scene_id(from.scene_id());
    }
    if (from.has_map_tid()) {
      set_map_tid(from.map_tid());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_is_diversion()) {
      set_is_diversion(from.is_diversion());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void game_scene_reg_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void game_scene_reg_info::CopyFrom(const game_scene_reg_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool game_scene_reg_info::IsInitialized() const {

  return true;
}

void game_scene_reg_info::Swap(game_scene_reg_info* other) {
  if (other != this) {
    std::swap(scene_id_, other->scene_id_);
    std::swap(map_tid_, other->map_tid_);
    std::swap(num_, other->num_);
    std::swap(is_diversion_, other->is_diversion_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata game_scene_reg_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = game_scene_reg_info_descriptor_;
  metadata.reflection = game_scene_reg_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int game_scene_reg_ret::kSceneIdFieldNumber;
const int game_scene_reg_ret::kIsSuccessFieldNumber;
#endif  // !_MSC_VER

game_scene_reg_ret::game_scene_reg_ret()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void game_scene_reg_ret::InitAsDefaultInstance() {
}

game_scene_reg_ret::game_scene_reg_ret(const game_scene_reg_ret& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void game_scene_reg_ret::SharedCtor() {
  _cached_size_ = 0;
  scene_id_ = GOOGLE_ULONGLONG(0);
  is_success_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

game_scene_reg_ret::~game_scene_reg_ret() {
  SharedDtor();
}

void game_scene_reg_ret::SharedDtor() {
  if (this != default_instance_) {
  }
}

void game_scene_reg_ret::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* game_scene_reg_ret::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return game_scene_reg_ret_descriptor_;
}

const game_scene_reg_ret& game_scene_reg_ret::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

game_scene_reg_ret* game_scene_reg_ret::default_instance_ = NULL;

game_scene_reg_ret* game_scene_reg_ret::New() const {
  return new game_scene_reg_ret;
}

void game_scene_reg_ret::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    scene_id_ = GOOGLE_ULONGLONG(0);
    is_success_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool game_scene_reg_ret::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 scene_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &scene_id_)));
          set_has_scene_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_is_success;
        break;
      }

      // optional bool is_success = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_success:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_success_)));
          set_has_is_success();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void game_scene_reg_ret::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 scene_id = 1;
  if (has_scene_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->scene_id(), output);
  }

  // optional bool is_success = 2;
  if (has_is_success()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_success(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* game_scene_reg_ret::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 scene_id = 1;
  if (has_scene_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->scene_id(), target);
  }

  // optional bool is_success = 2;
  if (has_is_success()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_success(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int game_scene_reg_ret::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 scene_id = 1;
    if (has_scene_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->scene_id());
    }

    // optional bool is_success = 2;
    if (has_is_success()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void game_scene_reg_ret::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const game_scene_reg_ret* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const game_scene_reg_ret*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void game_scene_reg_ret::MergeFrom(const game_scene_reg_ret& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_scene_id()) {
      set_scene_id(from.scene_id());
    }
    if (from.has_is_success()) {
      set_is_success(from.is_success());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void game_scene_reg_ret::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void game_scene_reg_ret::CopyFrom(const game_scene_reg_ret& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool game_scene_reg_ret::IsInitialized() const {

  return true;
}

void game_scene_reg_ret::Swap(game_scene_reg_ret* other) {
  if (other != this) {
    std::swap(scene_id_, other->scene_id_);
    std::swap(is_success_, other->is_success_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata game_scene_reg_ret::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = game_scene_reg_ret_descriptor_;
  metadata.reflection = game_scene_reg_ret_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ge_game_scene_reg_request::kSceneInfosFieldNumber;
#endif  // !_MSC_VER

ge_game_scene_reg_request::ge_game_scene_reg_request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ge_game_scene_reg_request::InitAsDefaultInstance() {
}

ge_game_scene_reg_request::ge_game_scene_reg_request(const ge_game_scene_reg_request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ge_game_scene_reg_request::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ge_game_scene_reg_request::~ge_game_scene_reg_request() {
  SharedDtor();
}

void ge_game_scene_reg_request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ge_game_scene_reg_request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ge_game_scene_reg_request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ge_game_scene_reg_request_descriptor_;
}

const ge_game_scene_reg_request& ge_game_scene_reg_request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

ge_game_scene_reg_request* ge_game_scene_reg_request::default_instance_ = NULL;

ge_game_scene_reg_request* ge_game_scene_reg_request::New() const {
  return new ge_game_scene_reg_request;
}

void ge_game_scene_reg_request::Clear() {
  scene_infos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ge_game_scene_reg_request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.server.game_scene_reg_info scene_infos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_scene_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_scene_infos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_scene_infos;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ge_game_scene_reg_request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto.server.game_scene_reg_info scene_infos = 2;
  for (int i = 0; i < this->scene_infos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->scene_infos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ge_game_scene_reg_request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto.server.game_scene_reg_info scene_infos = 2;
  for (int i = 0; i < this->scene_infos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->scene_infos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ge_game_scene_reg_request::ByteSize() const {
  int total_size = 0;

  // repeated .proto.server.game_scene_reg_info scene_infos = 2;
  total_size += 1 * this->scene_infos_size();
  for (int i = 0; i < this->scene_infos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->scene_infos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ge_game_scene_reg_request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ge_game_scene_reg_request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ge_game_scene_reg_request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ge_game_scene_reg_request::MergeFrom(const ge_game_scene_reg_request& from) {
  GOOGLE_CHECK_NE(&from, this);
  scene_infos_.MergeFrom(from.scene_infos_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ge_game_scene_reg_request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ge_game_scene_reg_request::CopyFrom(const ge_game_scene_reg_request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ge_game_scene_reg_request::IsInitialized() const {

  return true;
}

void ge_game_scene_reg_request::Swap(ge_game_scene_reg_request* other) {
  if (other != this) {
    scene_infos_.Swap(&other->scene_infos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ge_game_scene_reg_request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ge_game_scene_reg_request_descriptor_;
  metadata.reflection = ge_game_scene_reg_request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int eg_game_scene_reg_reply::kGameIdFieldNumber;
const int eg_game_scene_reg_reply::kRetsFieldNumber;
#endif  // !_MSC_VER

eg_game_scene_reg_reply::eg_game_scene_reg_reply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void eg_game_scene_reg_reply::InitAsDefaultInstance() {
}

eg_game_scene_reg_reply::eg_game_scene_reg_reply(const eg_game_scene_reg_reply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void eg_game_scene_reg_reply::SharedCtor() {
  _cached_size_ = 0;
  game_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

eg_game_scene_reg_reply::~eg_game_scene_reg_reply() {
  SharedDtor();
}

void eg_game_scene_reg_reply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void eg_game_scene_reg_reply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* eg_game_scene_reg_reply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return eg_game_scene_reg_reply_descriptor_;
}

const eg_game_scene_reg_reply& eg_game_scene_reg_reply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

eg_game_scene_reg_reply* eg_game_scene_reg_reply::default_instance_ = NULL;

eg_game_scene_reg_reply* eg_game_scene_reg_reply::New() const {
  return new eg_game_scene_reg_reply;
}

void eg_game_scene_reg_reply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    game_id_ = 0u;
  }
  rets_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool eg_game_scene_reg_reply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 game_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_id_)));
          set_has_game_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_rets;
        break;
      }

      // repeated .proto.server.game_scene_reg_ret rets = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rets:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rets()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_rets;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void eg_game_scene_reg_reply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 game_id = 1;
  if (has_game_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->game_id(), output);
  }

  // repeated .proto.server.game_scene_reg_ret rets = 2;
  for (int i = 0; i < this->rets_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->rets(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* eg_game_scene_reg_reply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 game_id = 1;
  if (has_game_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->game_id(), target);
  }

  // repeated .proto.server.game_scene_reg_ret rets = 2;
  for (int i = 0; i < this->rets_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->rets(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int eg_game_scene_reg_reply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 game_id = 1;
    if (has_game_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_id());
    }

  }
  // repeated .proto.server.game_scene_reg_ret rets = 2;
  total_size += 1 * this->rets_size();
  for (int i = 0; i < this->rets_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rets(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void eg_game_scene_reg_reply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const eg_game_scene_reg_reply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const eg_game_scene_reg_reply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void eg_game_scene_reg_reply::MergeFrom(const eg_game_scene_reg_reply& from) {
  GOOGLE_CHECK_NE(&from, this);
  rets_.MergeFrom(from.rets_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_game_id()) {
      set_game_id(from.game_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void eg_game_scene_reg_reply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void eg_game_scene_reg_reply::CopyFrom(const eg_game_scene_reg_reply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool eg_game_scene_reg_reply::IsInitialized() const {

  return true;
}

void eg_game_scene_reg_reply::Swap(eg_game_scene_reg_reply* other) {
  if (other != this) {
    std::swap(game_id_, other->game_id_);
    rets_.Swap(&other->rets_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata eg_game_scene_reg_reply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = eg_game_scene_reg_reply_descriptor_;
  metadata.reflection = eg_game_scene_reg_reply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ge_role_scene_info_notify::kSceneIdFieldNumber;
const int ge_role_scene_info_notify::kMapTidFieldNumber;
#endif  // !_MSC_VER

ge_role_scene_info_notify::ge_role_scene_info_notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ge_role_scene_info_notify::InitAsDefaultInstance() {
}

ge_role_scene_info_notify::ge_role_scene_info_notify(const ge_role_scene_info_notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ge_role_scene_info_notify::SharedCtor() {
  _cached_size_ = 0;
  scene_id_ = GOOGLE_ULONGLONG(0);
  map_tid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ge_role_scene_info_notify::~ge_role_scene_info_notify() {
  SharedDtor();
}

void ge_role_scene_info_notify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ge_role_scene_info_notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ge_role_scene_info_notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ge_role_scene_info_notify_descriptor_;
}

const ge_role_scene_info_notify& ge_role_scene_info_notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

ge_role_scene_info_notify* ge_role_scene_info_notify::default_instance_ = NULL;

ge_role_scene_info_notify* ge_role_scene_info_notify::New() const {
  return new ge_role_scene_info_notify;
}

void ge_role_scene_info_notify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    scene_id_ = GOOGLE_ULONGLONG(0);
    map_tid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ge_role_scene_info_notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 scene_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &scene_id_)));
          set_has_scene_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_map_tid;
        break;
      }

      // optional uint32 map_tid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_map_tid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &map_tid_)));
          set_has_map_tid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ge_role_scene_info_notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 scene_id = 1;
  if (has_scene_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->scene_id(), output);
  }

  // optional uint32 map_tid = 2;
  if (has_map_tid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->map_tid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ge_role_scene_info_notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 scene_id = 1;
  if (has_scene_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->scene_id(), target);
  }

  // optional uint32 map_tid = 2;
  if (has_map_tid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->map_tid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ge_role_scene_info_notify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 scene_id = 1;
    if (has_scene_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->scene_id());
    }

    // optional uint32 map_tid = 2;
    if (has_map_tid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->map_tid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ge_role_scene_info_notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ge_role_scene_info_notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ge_role_scene_info_notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ge_role_scene_info_notify::MergeFrom(const ge_role_scene_info_notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_scene_id()) {
      set_scene_id(from.scene_id());
    }
    if (from.has_map_tid()) {
      set_map_tid(from.map_tid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ge_role_scene_info_notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ge_role_scene_info_notify::CopyFrom(const ge_role_scene_info_notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ge_role_scene_info_notify::IsInitialized() const {

  return true;
}

void ge_role_scene_info_notify::Swap(ge_role_scene_info_notify* other) {
  if (other != this) {
    std::swap(scene_id_, other->scene_id_);
    std::swap(map_tid_, other->map_tid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ge_role_scene_info_notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ge_role_scene_info_notify_descriptor_;
  metadata.reflection = ge_role_scene_info_notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ge_game_scene_unload_notify::kSceneIdFieldNumber;
const int ge_game_scene_unload_notify::kMpaTidFieldNumber;
#endif  // !_MSC_VER

ge_game_scene_unload_notify::ge_game_scene_unload_notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ge_game_scene_unload_notify::InitAsDefaultInstance() {
}

ge_game_scene_unload_notify::ge_game_scene_unload_notify(const ge_game_scene_unload_notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ge_game_scene_unload_notify::SharedCtor() {
  _cached_size_ = 0;
  scene_id_ = GOOGLE_ULONGLONG(0);
  mpa_tid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ge_game_scene_unload_notify::~ge_game_scene_unload_notify() {
  SharedDtor();
}

void ge_game_scene_unload_notify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ge_game_scene_unload_notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ge_game_scene_unload_notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ge_game_scene_unload_notify_descriptor_;
}

const ge_game_scene_unload_notify& ge_game_scene_unload_notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

ge_game_scene_unload_notify* ge_game_scene_unload_notify::default_instance_ = NULL;

ge_game_scene_unload_notify* ge_game_scene_unload_notify::New() const {
  return new ge_game_scene_unload_notify;
}

void ge_game_scene_unload_notify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    scene_id_ = GOOGLE_ULONGLONG(0);
    mpa_tid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ge_game_scene_unload_notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 scene_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &scene_id_)));
          set_has_scene_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_mpa_tid;
        break;
      }

      // optional uint32 mpa_tid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mpa_tid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mpa_tid_)));
          set_has_mpa_tid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ge_game_scene_unload_notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 scene_id = 1;
  if (has_scene_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->scene_id(), output);
  }

  // optional uint32 mpa_tid = 2;
  if (has_mpa_tid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->mpa_tid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ge_game_scene_unload_notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 scene_id = 1;
  if (has_scene_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->scene_id(), target);
  }

  // optional uint32 mpa_tid = 2;
  if (has_mpa_tid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->mpa_tid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ge_game_scene_unload_notify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 scene_id = 1;
    if (has_scene_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->scene_id());
    }

    // optional uint32 mpa_tid = 2;
    if (has_mpa_tid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mpa_tid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ge_game_scene_unload_notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ge_game_scene_unload_notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ge_game_scene_unload_notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ge_game_scene_unload_notify::MergeFrom(const ge_game_scene_unload_notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_scene_id()) {
      set_scene_id(from.scene_id());
    }
    if (from.has_mpa_tid()) {
      set_mpa_tid(from.mpa_tid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ge_game_scene_unload_notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ge_game_scene_unload_notify::CopyFrom(const ge_game_scene_unload_notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ge_game_scene_unload_notify::IsInitialized() const {

  return true;
}

void ge_game_scene_unload_notify::Swap(ge_game_scene_unload_notify* other) {
  if (other != this) {
    std::swap(scene_id_, other->scene_id_);
    std::swap(mpa_tid_, other->mpa_tid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ge_game_scene_unload_notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ge_game_scene_unload_notify_descriptor_;
  metadata.reflection = ge_game_scene_unload_notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int dungeon_create_data::kGameIdFieldNumber;
const int dungeon_create_data::kDungeonIdFieldNumber;
const int dungeon_create_data::kTypeFieldNumber;
const int dungeon_create_data::kDungeonCreateIdFieldNumber;
#endif  // !_MSC_VER

dungeon_create_data::dungeon_create_data()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void dungeon_create_data::InitAsDefaultInstance() {
}

dungeon_create_data::dungeon_create_data(const dungeon_create_data& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void dungeon_create_data::SharedCtor() {
  _cached_size_ = 0;
  game_id_ = 0u;
  dungeon_id_ = 0u;
  type_ = 1;
  dungeon_create_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

dungeon_create_data::~dungeon_create_data() {
  SharedDtor();
}

void dungeon_create_data::SharedDtor() {
  if (this != default_instance_) {
  }
}

void dungeon_create_data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* dungeon_create_data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return dungeon_create_data_descriptor_;
}

const dungeon_create_data& dungeon_create_data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

dungeon_create_data* dungeon_create_data::default_instance_ = NULL;

dungeon_create_data* dungeon_create_data::New() const {
  return new dungeon_create_data;
}

void dungeon_create_data::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    game_id_ = 0u;
    dungeon_id_ = 0u;
    type_ = 1;
    dungeon_create_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool dungeon_create_data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 game_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_id_)));
          set_has_game_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_dungeon_id;
        break;
      }

      // optional uint32 dungeon_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dungeon_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dungeon_id_)));
          set_has_dungeon_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // optional .proto.server.dungeon_create_type type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::server::dungeon_create_type_IsValid(value)) {
            set_type(static_cast< ::proto::server::dungeon_create_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_dungeon_create_id;
        break;
      }

      // optional uint64 dungeon_create_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dungeon_create_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dungeon_create_id_)));
          set_has_dungeon_create_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void dungeon_create_data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 game_id = 1;
  if (has_game_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->game_id(), output);
  }

  // optional uint32 dungeon_id = 2;
  if (has_dungeon_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->dungeon_id(), output);
  }

  // optional .proto.server.dungeon_create_type type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  // optional uint64 dungeon_create_id = 4;
  if (has_dungeon_create_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->dungeon_create_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* dungeon_create_data::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 game_id = 1;
  if (has_game_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->game_id(), target);
  }

  // optional uint32 dungeon_id = 2;
  if (has_dungeon_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->dungeon_id(), target);
  }

  // optional .proto.server.dungeon_create_type type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  // optional uint64 dungeon_create_id = 4;
  if (has_dungeon_create_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->dungeon_create_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int dungeon_create_data::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 game_id = 1;
    if (has_game_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_id());
    }

    // optional uint32 dungeon_id = 2;
    if (has_dungeon_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dungeon_id());
    }

    // optional .proto.server.dungeon_create_type type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional uint64 dungeon_create_id = 4;
    if (has_dungeon_create_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->dungeon_create_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void dungeon_create_data::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const dungeon_create_data* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const dungeon_create_data*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void dungeon_create_data::MergeFrom(const dungeon_create_data& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_game_id()) {
      set_game_id(from.game_id());
    }
    if (from.has_dungeon_id()) {
      set_dungeon_id(from.dungeon_id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_dungeon_create_id()) {
      set_dungeon_create_id(from.dungeon_create_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void dungeon_create_data::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void dungeon_create_data::CopyFrom(const dungeon_create_data& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool dungeon_create_data::IsInitialized() const {

  return true;
}

void dungeon_create_data::Swap(dungeon_create_data* other) {
  if (other != this) {
    std::swap(game_id_, other->game_id_);
    std::swap(dungeon_id_, other->dungeon_id_);
    std::swap(type_, other->type_);
    std::swap(dungeon_create_id_, other->dungeon_create_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata dungeon_create_data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = dungeon_create_data_descriptor_;
  metadata.reflection = dungeon_create_data_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ge_open_dungeon_request::kDataFieldNumber;
#endif  // !_MSC_VER

ge_open_dungeon_request::ge_open_dungeon_request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ge_open_dungeon_request::InitAsDefaultInstance() {
  data_ = const_cast< ::proto::server::dungeon_create_data*>(&::proto::server::dungeon_create_data::default_instance());
}

ge_open_dungeon_request::ge_open_dungeon_request(const ge_open_dungeon_request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ge_open_dungeon_request::SharedCtor() {
  _cached_size_ = 0;
  data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ge_open_dungeon_request::~ge_open_dungeon_request() {
  SharedDtor();
}

void ge_open_dungeon_request::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
  }
}

void ge_open_dungeon_request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ge_open_dungeon_request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ge_open_dungeon_request_descriptor_;
}

const ge_open_dungeon_request& ge_open_dungeon_request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

ge_open_dungeon_request* ge_open_dungeon_request::default_instance_ = NULL;

ge_open_dungeon_request* ge_open_dungeon_request::New() const {
  return new ge_open_dungeon_request;
}

void ge_open_dungeon_request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_data()) {
      if (data_ != NULL) data_->::proto::server::dungeon_create_data::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ge_open_dungeon_request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.server.dungeon_create_data data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ge_open_dungeon_request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .proto.server.dungeon_create_data data = 1;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ge_open_dungeon_request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .proto.server.dungeon_create_data data = 1;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ge_open_dungeon_request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .proto.server.dungeon_create_data data = 1;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ge_open_dungeon_request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ge_open_dungeon_request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ge_open_dungeon_request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ge_open_dungeon_request::MergeFrom(const ge_open_dungeon_request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_data()) {
      mutable_data()->::proto::server::dungeon_create_data::MergeFrom(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ge_open_dungeon_request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ge_open_dungeon_request::CopyFrom(const ge_open_dungeon_request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ge_open_dungeon_request::IsInitialized() const {

  return true;
}

void ge_open_dungeon_request::Swap(ge_open_dungeon_request* other) {
  if (other != this) {
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ge_open_dungeon_request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ge_open_dungeon_request_descriptor_;
  metadata.reflection = ge_open_dungeon_request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int eg_create_dugeon_request::kDataFieldNumber;
#endif  // !_MSC_VER

eg_create_dugeon_request::eg_create_dugeon_request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void eg_create_dugeon_request::InitAsDefaultInstance() {
  data_ = const_cast< ::proto::server::dungeon_create_data*>(&::proto::server::dungeon_create_data::default_instance());
}

eg_create_dugeon_request::eg_create_dugeon_request(const eg_create_dugeon_request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void eg_create_dugeon_request::SharedCtor() {
  _cached_size_ = 0;
  data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

eg_create_dugeon_request::~eg_create_dugeon_request() {
  SharedDtor();
}

void eg_create_dugeon_request::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
  }
}

void eg_create_dugeon_request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* eg_create_dugeon_request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return eg_create_dugeon_request_descriptor_;
}

const eg_create_dugeon_request& eg_create_dugeon_request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

eg_create_dugeon_request* eg_create_dugeon_request::default_instance_ = NULL;

eg_create_dugeon_request* eg_create_dugeon_request::New() const {
  return new eg_create_dugeon_request;
}

void eg_create_dugeon_request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_data()) {
      if (data_ != NULL) data_->::proto::server::dungeon_create_data::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool eg_create_dugeon_request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.server.dungeon_create_data data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void eg_create_dugeon_request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .proto.server.dungeon_create_data data = 1;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* eg_create_dugeon_request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .proto.server.dungeon_create_data data = 1;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int eg_create_dugeon_request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .proto.server.dungeon_create_data data = 1;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void eg_create_dugeon_request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const eg_create_dugeon_request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const eg_create_dugeon_request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void eg_create_dugeon_request::MergeFrom(const eg_create_dugeon_request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_data()) {
      mutable_data()->::proto::server::dungeon_create_data::MergeFrom(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void eg_create_dugeon_request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void eg_create_dugeon_request::CopyFrom(const eg_create_dugeon_request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool eg_create_dugeon_request::IsInitialized() const {

  return true;
}

void eg_create_dugeon_request::Swap(eg_create_dugeon_request* other) {
  if (other != this) {
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata eg_create_dugeon_request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = eg_create_dugeon_request_descriptor_;
  metadata.reflection = eg_create_dugeon_request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ge_create_dugeon_reply::kReplyCodeFieldNumber;
const int ge_create_dugeon_reply::kDataFieldNumber;
const int ge_create_dugeon_reply::kInfoFieldNumber;
#endif  // !_MSC_VER

ge_create_dugeon_reply::ge_create_dugeon_reply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ge_create_dugeon_reply::InitAsDefaultInstance() {
  data_ = const_cast< ::proto::server::dungeon_create_data*>(&::proto::server::dungeon_create_data::default_instance());
  info_ = const_cast< ::proto::server::game_scene_reg_info*>(&::proto::server::game_scene_reg_info::default_instance());
}

ge_create_dugeon_reply::ge_create_dugeon_reply(const ge_create_dugeon_reply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ge_create_dugeon_reply::SharedCtor() {
  _cached_size_ = 0;
  reply_code_ = 0u;
  data_ = NULL;
  info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ge_create_dugeon_reply::~ge_create_dugeon_reply() {
  SharedDtor();
}

void ge_create_dugeon_reply::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
    delete info_;
  }
}

void ge_create_dugeon_reply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ge_create_dugeon_reply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ge_create_dugeon_reply_descriptor_;
}

const ge_create_dugeon_reply& ge_create_dugeon_reply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

ge_create_dugeon_reply* ge_create_dugeon_reply::default_instance_ = NULL;

ge_create_dugeon_reply* ge_create_dugeon_reply::New() const {
  return new ge_create_dugeon_reply;
}

void ge_create_dugeon_reply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    reply_code_ = 0u;
    if (has_data()) {
      if (data_ != NULL) data_->::proto::server::dungeon_create_data::Clear();
    }
    if (has_info()) {
      if (info_ != NULL) info_->::proto::server::game_scene_reg_info::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ge_create_dugeon_reply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 reply_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reply_code_)));
          set_has_reply_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // optional .proto.server.dungeon_create_data data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_info;
        break;
      }

      // optional .proto.server.game_scene_reg_info info = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ge_create_dugeon_reply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 reply_code = 1;
  if (has_reply_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->reply_code(), output);
  }

  // optional .proto.server.dungeon_create_data data = 2;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->data(), output);
  }

  // optional .proto.server.game_scene_reg_info info = 3;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ge_create_dugeon_reply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 reply_code = 1;
  if (has_reply_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->reply_code(), target);
  }

  // optional .proto.server.dungeon_create_data data = 2;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->data(), target);
  }

  // optional .proto.server.game_scene_reg_info info = 3;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ge_create_dugeon_reply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 reply_code = 1;
    if (has_reply_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reply_code());
    }

    // optional .proto.server.dungeon_create_data data = 2;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

    // optional .proto.server.game_scene_reg_info info = 3;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ge_create_dugeon_reply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ge_create_dugeon_reply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ge_create_dugeon_reply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ge_create_dugeon_reply::MergeFrom(const ge_create_dugeon_reply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reply_code()) {
      set_reply_code(from.reply_code());
    }
    if (from.has_data()) {
      mutable_data()->::proto::server::dungeon_create_data::MergeFrom(from.data());
    }
    if (from.has_info()) {
      mutable_info()->::proto::server::game_scene_reg_info::MergeFrom(from.info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ge_create_dugeon_reply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ge_create_dugeon_reply::CopyFrom(const ge_create_dugeon_reply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ge_create_dugeon_reply::IsInitialized() const {

  return true;
}

void ge_create_dugeon_reply::Swap(ge_create_dugeon_reply* other) {
  if (other != this) {
    std::swap(reply_code_, other->reply_code_);
    std::swap(data_, other->data_);
    std::swap(info_, other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ge_create_dugeon_reply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ge_create_dugeon_reply_descriptor_;
  metadata.reflection = ge_create_dugeon_reply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int eg_open_dungeon_reply::kReplyCodeFieldNumber;
const int eg_open_dungeon_reply::kDataFieldNumber;
const int eg_open_dungeon_reply::kInfoFieldNumber;
#endif  // !_MSC_VER

eg_open_dungeon_reply::eg_open_dungeon_reply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void eg_open_dungeon_reply::InitAsDefaultInstance() {
  data_ = const_cast< ::proto::server::dungeon_create_data*>(&::proto::server::dungeon_create_data::default_instance());
  info_ = const_cast< ::proto::server::game_scene_reg_info*>(&::proto::server::game_scene_reg_info::default_instance());
}

eg_open_dungeon_reply::eg_open_dungeon_reply(const eg_open_dungeon_reply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void eg_open_dungeon_reply::SharedCtor() {
  _cached_size_ = 0;
  reply_code_ = 0u;
  data_ = NULL;
  info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

eg_open_dungeon_reply::~eg_open_dungeon_reply() {
  SharedDtor();
}

void eg_open_dungeon_reply::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
    delete info_;
  }
}

void eg_open_dungeon_reply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* eg_open_dungeon_reply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return eg_open_dungeon_reply_descriptor_;
}

const eg_open_dungeon_reply& eg_open_dungeon_reply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

eg_open_dungeon_reply* eg_open_dungeon_reply::default_instance_ = NULL;

eg_open_dungeon_reply* eg_open_dungeon_reply::New() const {
  return new eg_open_dungeon_reply;
}

void eg_open_dungeon_reply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    reply_code_ = 0u;
    if (has_data()) {
      if (data_ != NULL) data_->::proto::server::dungeon_create_data::Clear();
    }
    if (has_info()) {
      if (info_ != NULL) info_->::proto::server::game_scene_reg_info::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool eg_open_dungeon_reply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 reply_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reply_code_)));
          set_has_reply_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // optional .proto.server.dungeon_create_data data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_info;
        break;
      }

      // optional .proto.server.game_scene_reg_info info = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void eg_open_dungeon_reply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 reply_code = 1;
  if (has_reply_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->reply_code(), output);
  }

  // optional .proto.server.dungeon_create_data data = 2;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->data(), output);
  }

  // optional .proto.server.game_scene_reg_info info = 3;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* eg_open_dungeon_reply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 reply_code = 1;
  if (has_reply_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->reply_code(), target);
  }

  // optional .proto.server.dungeon_create_data data = 2;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->data(), target);
  }

  // optional .proto.server.game_scene_reg_info info = 3;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int eg_open_dungeon_reply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 reply_code = 1;
    if (has_reply_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reply_code());
    }

    // optional .proto.server.dungeon_create_data data = 2;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

    // optional .proto.server.game_scene_reg_info info = 3;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void eg_open_dungeon_reply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const eg_open_dungeon_reply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const eg_open_dungeon_reply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void eg_open_dungeon_reply::MergeFrom(const eg_open_dungeon_reply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reply_code()) {
      set_reply_code(from.reply_code());
    }
    if (from.has_data()) {
      mutable_data()->::proto::server::dungeon_create_data::MergeFrom(from.data());
    }
    if (from.has_info()) {
      mutable_info()->::proto::server::game_scene_reg_info::MergeFrom(from.info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void eg_open_dungeon_reply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void eg_open_dungeon_reply::CopyFrom(const eg_open_dungeon_reply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool eg_open_dungeon_reply::IsInitialized() const {

  return true;
}

void eg_open_dungeon_reply::Swap(eg_open_dungeon_reply* other) {
  if (other != this) {
    std::swap(reply_code_, other->reply_code_);
    std::swap(data_, other->data_);
    std::swap(info_, other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata eg_open_dungeon_reply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = eg_open_dungeon_reply_descriptor_;
  metadata.reflection = eg_open_dungeon_reply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ge_scene_state_notify::kSceneIdFieldNumber;
const int ge_scene_state_notify::kStateFieldNumber;
#endif  // !_MSC_VER

ge_scene_state_notify::ge_scene_state_notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ge_scene_state_notify::InitAsDefaultInstance() {
}

ge_scene_state_notify::ge_scene_state_notify(const ge_scene_state_notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ge_scene_state_notify::SharedCtor() {
  _cached_size_ = 0;
  scene_id_ = GOOGLE_ULONGLONG(0);
  state_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ge_scene_state_notify::~ge_scene_state_notify() {
  SharedDtor();
}

void ge_scene_state_notify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ge_scene_state_notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ge_scene_state_notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ge_scene_state_notify_descriptor_;
}

const ge_scene_state_notify& ge_scene_state_notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

ge_scene_state_notify* ge_scene_state_notify::default_instance_ = NULL;

ge_scene_state_notify* ge_scene_state_notify::New() const {
  return new ge_scene_state_notify;
}

void ge_scene_state_notify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    scene_id_ = GOOGLE_ULONGLONG(0);
    state_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ge_scene_state_notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 scene_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &scene_id_)));
          set_has_scene_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_state;
        break;
      }

      // optional uint32 state = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ge_scene_state_notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 scene_id = 1;
  if (has_scene_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->scene_id(), output);
  }

  // optional uint32 state = 2;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->state(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ge_scene_state_notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 scene_id = 1;
  if (has_scene_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->scene_id(), target);
  }

  // optional uint32 state = 2;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->state(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ge_scene_state_notify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 scene_id = 1;
    if (has_scene_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->scene_id());
    }

    // optional uint32 state = 2;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->state());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ge_scene_state_notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ge_scene_state_notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ge_scene_state_notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ge_scene_state_notify::MergeFrom(const ge_scene_state_notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_scene_id()) {
      set_scene_id(from.scene_id());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ge_scene_state_notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ge_scene_state_notify::CopyFrom(const ge_scene_state_notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ge_scene_state_notify::IsInitialized() const {

  return true;
}

void ge_scene_state_notify::Swap(ge_scene_state_notify* other) {
  if (other != this) {
    std::swap(scene_id_, other->scene_id_);
    std::swap(state_, other->state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ge_scene_state_notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ge_scene_state_notify_descriptor_;
  metadata.reflection = ge_scene_state_notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ge_goods_buy_request::kGoodsUidFieldNumber;
const int ge_goods_buy_request::kItemTidFieldNumber;
const int ge_goods_buy_request::kBuyCountFieldNumber;
const int ge_goods_buy_request::kPriceFieldNumber;
const int ge_goods_buy_request::kReasonFieldNumber;
#endif  // !_MSC_VER

ge_goods_buy_request::ge_goods_buy_request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ge_goods_buy_request::InitAsDefaultInstance() {
  reason_ = const_cast< ::proto::common::ex_reason*>(&::proto::common::ex_reason::default_instance());
}

ge_goods_buy_request::ge_goods_buy_request(const ge_goods_buy_request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ge_goods_buy_request::SharedCtor() {
  _cached_size_ = 0;
  goods_uid_ = GOOGLE_ULONGLONG(0);
  item_tid_ = 0u;
  buy_count_ = 0u;
  price_ = 0u;
  reason_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ge_goods_buy_request::~ge_goods_buy_request() {
  SharedDtor();
}

void ge_goods_buy_request::SharedDtor() {
  if (this != default_instance_) {
    delete reason_;
  }
}

void ge_goods_buy_request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ge_goods_buy_request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ge_goods_buy_request_descriptor_;
}

const ge_goods_buy_request& ge_goods_buy_request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

ge_goods_buy_request* ge_goods_buy_request::default_instance_ = NULL;

ge_goods_buy_request* ge_goods_buy_request::New() const {
  return new ge_goods_buy_request;
}

void ge_goods_buy_request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    goods_uid_ = GOOGLE_ULONGLONG(0);
    item_tid_ = 0u;
    buy_count_ = 0u;
    price_ = 0u;
    if (has_reason()) {
      if (reason_ != NULL) reason_->::proto::common::ex_reason::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ge_goods_buy_request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 goods_uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &goods_uid_)));
          set_has_goods_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_item_tid;
        break;
      }

      // optional uint32 item_tid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_tid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_tid_)));
          set_has_item_tid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_buy_count;
        break;
      }

      // optional uint32 buy_count = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buy_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &buy_count_)));
          set_has_buy_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_price;
        break;
      }

      // optional uint32 price = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &price_)));
          set_has_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_reason;
        break;
      }

      // optional .proto.common.ex_reason reason = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reason:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reason()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ge_goods_buy_request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 goods_uid = 1;
  if (has_goods_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->goods_uid(), output);
  }

  // optional uint32 item_tid = 2;
  if (has_item_tid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->item_tid(), output);
  }

  // optional uint32 buy_count = 3;
  if (has_buy_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->buy_count(), output);
  }

  // optional uint32 price = 4;
  if (has_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->price(), output);
  }

  // optional .proto.common.ex_reason reason = 5;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->reason(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ge_goods_buy_request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 goods_uid = 1;
  if (has_goods_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->goods_uid(), target);
  }

  // optional uint32 item_tid = 2;
  if (has_item_tid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->item_tid(), target);
  }

  // optional uint32 buy_count = 3;
  if (has_buy_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->buy_count(), target);
  }

  // optional uint32 price = 4;
  if (has_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->price(), target);
  }

  // optional .proto.common.ex_reason reason = 5;
  if (has_reason()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->reason(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ge_goods_buy_request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 goods_uid = 1;
    if (has_goods_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->goods_uid());
    }

    // optional uint32 item_tid = 2;
    if (has_item_tid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_tid());
    }

    // optional uint32 buy_count = 3;
    if (has_buy_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->buy_count());
    }

    // optional uint32 price = 4;
    if (has_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->price());
    }

    // optional .proto.common.ex_reason reason = 5;
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->reason());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ge_goods_buy_request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ge_goods_buy_request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ge_goods_buy_request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ge_goods_buy_request::MergeFrom(const ge_goods_buy_request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_goods_uid()) {
      set_goods_uid(from.goods_uid());
    }
    if (from.has_item_tid()) {
      set_item_tid(from.item_tid());
    }
    if (from.has_buy_count()) {
      set_buy_count(from.buy_count());
    }
    if (from.has_price()) {
      set_price(from.price());
    }
    if (from.has_reason()) {
      mutable_reason()->::proto::common::ex_reason::MergeFrom(from.reason());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ge_goods_buy_request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ge_goods_buy_request::CopyFrom(const ge_goods_buy_request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ge_goods_buy_request::IsInitialized() const {

  return true;
}

void ge_goods_buy_request::Swap(ge_goods_buy_request* other) {
  if (other != this) {
    std::swap(goods_uid_, other->goods_uid_);
    std::swap(item_tid_, other->item_tid_);
    std::swap(buy_count_, other->buy_count_);
    std::swap(price_, other->price_);
    std::swap(reason_, other->reason_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ge_goods_buy_request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ge_goods_buy_request_descriptor_;
  metadata.reflection = ge_goods_buy_request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int eg_goods_buy_reply::kReplyCodeFieldNumber;
const int eg_goods_buy_reply::kBuyCountFieldNumber;
const int eg_goods_buy_reply::kPriceFieldNumber;
const int eg_goods_buy_reply::kItemInfoFieldNumber;
const int eg_goods_buy_reply::kReasonFieldNumber;
#endif  // !_MSC_VER

eg_goods_buy_reply::eg_goods_buy_reply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void eg_goods_buy_reply::InitAsDefaultInstance() {
  item_info_ = const_cast< ::proto::common::goods_item*>(&::proto::common::goods_item::default_instance());
  reason_ = const_cast< ::proto::common::ex_reason*>(&::proto::common::ex_reason::default_instance());
}

eg_goods_buy_reply::eg_goods_buy_reply(const eg_goods_buy_reply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void eg_goods_buy_reply::SharedCtor() {
  _cached_size_ = 0;
  reply_code_ = 0u;
  buy_count_ = 0u;
  price_ = 0u;
  item_info_ = NULL;
  reason_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

eg_goods_buy_reply::~eg_goods_buy_reply() {
  SharedDtor();
}

void eg_goods_buy_reply::SharedDtor() {
  if (this != default_instance_) {
    delete item_info_;
    delete reason_;
  }
}

void eg_goods_buy_reply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* eg_goods_buy_reply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return eg_goods_buy_reply_descriptor_;
}

const eg_goods_buy_reply& eg_goods_buy_reply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

eg_goods_buy_reply* eg_goods_buy_reply::default_instance_ = NULL;

eg_goods_buy_reply* eg_goods_buy_reply::New() const {
  return new eg_goods_buy_reply;
}

void eg_goods_buy_reply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    reply_code_ = 0u;
    buy_count_ = 0u;
    price_ = 0u;
    if (has_item_info()) {
      if (item_info_ != NULL) item_info_->::proto::common::goods_item::Clear();
    }
    if (has_reason()) {
      if (reason_ != NULL) reason_->::proto::common::ex_reason::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool eg_goods_buy_reply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 reply_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reply_code_)));
          set_has_reply_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_buy_count;
        break;
      }

      // optional uint32 buy_count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buy_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &buy_count_)));
          set_has_buy_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_price;
        break;
      }

      // optional uint32 price = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &price_)));
          set_has_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_item_info;
        break;
      }

      // optional .proto.common.goods_item item_info = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_item_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_reason;
        break;
      }

      // optional .proto.common.ex_reason reason = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reason:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reason()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void eg_goods_buy_reply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 reply_code = 1;
  if (has_reply_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->reply_code(), output);
  }

  // optional uint32 buy_count = 2;
  if (has_buy_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->buy_count(), output);
  }

  // optional uint32 price = 3;
  if (has_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->price(), output);
  }

  // optional .proto.common.goods_item item_info = 4;
  if (has_item_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->item_info(), output);
  }

  // optional .proto.common.ex_reason reason = 5;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->reason(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* eg_goods_buy_reply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 reply_code = 1;
  if (has_reply_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->reply_code(), target);
  }

  // optional uint32 buy_count = 2;
  if (has_buy_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->buy_count(), target);
  }

  // optional uint32 price = 3;
  if (has_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->price(), target);
  }

  // optional .proto.common.goods_item item_info = 4;
  if (has_item_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->item_info(), target);
  }

  // optional .proto.common.ex_reason reason = 5;
  if (has_reason()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->reason(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int eg_goods_buy_reply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 reply_code = 1;
    if (has_reply_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reply_code());
    }

    // optional uint32 buy_count = 2;
    if (has_buy_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->buy_count());
    }

    // optional uint32 price = 3;
    if (has_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->price());
    }

    // optional .proto.common.goods_item item_info = 4;
    if (has_item_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->item_info());
    }

    // optional .proto.common.ex_reason reason = 5;
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->reason());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void eg_goods_buy_reply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const eg_goods_buy_reply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const eg_goods_buy_reply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void eg_goods_buy_reply::MergeFrom(const eg_goods_buy_reply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reply_code()) {
      set_reply_code(from.reply_code());
    }
    if (from.has_buy_count()) {
      set_buy_count(from.buy_count());
    }
    if (from.has_price()) {
      set_price(from.price());
    }
    if (from.has_item_info()) {
      mutable_item_info()->::proto::common::goods_item::MergeFrom(from.item_info());
    }
    if (from.has_reason()) {
      mutable_reason()->::proto::common::ex_reason::MergeFrom(from.reason());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void eg_goods_buy_reply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void eg_goods_buy_reply::CopyFrom(const eg_goods_buy_reply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool eg_goods_buy_reply::IsInitialized() const {

  return true;
}

void eg_goods_buy_reply::Swap(eg_goods_buy_reply* other) {
  if (other != this) {
    std::swap(reply_code_, other->reply_code_);
    std::swap(buy_count_, other->buy_count_);
    std::swap(price_, other->price_);
    std::swap(item_info_, other->item_info_);
    std::swap(reason_, other->reason_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata eg_goods_buy_reply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = eg_goods_buy_reply_descriptor_;
  metadata.reflection = eg_goods_buy_reply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ge_goods_sell_request::kItemUidFieldNumber;
const int ge_goods_sell_request::kPriceFieldNumber;
const int ge_goods_sell_request::kItemInfoFieldNumber;
#endif  // !_MSC_VER

ge_goods_sell_request::ge_goods_sell_request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ge_goods_sell_request::InitAsDefaultInstance() {
  item_info_ = const_cast< ::proto::common::goods_item*>(&::proto::common::goods_item::default_instance());
}

ge_goods_sell_request::ge_goods_sell_request(const ge_goods_sell_request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ge_goods_sell_request::SharedCtor() {
  _cached_size_ = 0;
  item_uid_ = GOOGLE_ULONGLONG(0);
  price_ = 0u;
  item_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ge_goods_sell_request::~ge_goods_sell_request() {
  SharedDtor();
}

void ge_goods_sell_request::SharedDtor() {
  if (this != default_instance_) {
    delete item_info_;
  }
}

void ge_goods_sell_request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ge_goods_sell_request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ge_goods_sell_request_descriptor_;
}

const ge_goods_sell_request& ge_goods_sell_request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

ge_goods_sell_request* ge_goods_sell_request::default_instance_ = NULL;

ge_goods_sell_request* ge_goods_sell_request::New() const {
  return new ge_goods_sell_request;
}

void ge_goods_sell_request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    item_uid_ = GOOGLE_ULONGLONG(0);
    price_ = 0u;
    if (has_item_info()) {
      if (item_info_ != NULL) item_info_->::proto::common::goods_item::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ge_goods_sell_request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 item_uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &item_uid_)));
          set_has_item_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_price;
        break;
      }

      // optional uint32 price = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &price_)));
          set_has_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_item_info;
        break;
      }

      // optional .proto.common.goods_item item_info = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_item_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ge_goods_sell_request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 item_uid = 1;
  if (has_item_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->item_uid(), output);
  }

  // optional uint32 price = 2;
  if (has_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->price(), output);
  }

  // optional .proto.common.goods_item item_info = 3;
  if (has_item_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->item_info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ge_goods_sell_request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 item_uid = 1;
  if (has_item_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->item_uid(), target);
  }

  // optional uint32 price = 2;
  if (has_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->price(), target);
  }

  // optional .proto.common.goods_item item_info = 3;
  if (has_item_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->item_info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ge_goods_sell_request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 item_uid = 1;
    if (has_item_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->item_uid());
    }

    // optional uint32 price = 2;
    if (has_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->price());
    }

    // optional .proto.common.goods_item item_info = 3;
    if (has_item_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->item_info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ge_goods_sell_request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ge_goods_sell_request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ge_goods_sell_request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ge_goods_sell_request::MergeFrom(const ge_goods_sell_request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_item_uid()) {
      set_item_uid(from.item_uid());
    }
    if (from.has_price()) {
      set_price(from.price());
    }
    if (from.has_item_info()) {
      mutable_item_info()->::proto::common::goods_item::MergeFrom(from.item_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ge_goods_sell_request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ge_goods_sell_request::CopyFrom(const ge_goods_sell_request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ge_goods_sell_request::IsInitialized() const {

  return true;
}

void ge_goods_sell_request::Swap(ge_goods_sell_request* other) {
  if (other != this) {
    std::swap(item_uid_, other->item_uid_);
    std::swap(price_, other->price_);
    std::swap(item_info_, other->item_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ge_goods_sell_request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ge_goods_sell_request_descriptor_;
  metadata.reflection = ge_goods_sell_request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int eg_goods_sell_reply::kReplyCodeFieldNumber;
const int eg_goods_sell_reply::kItemUidFieldNumber;
const int eg_goods_sell_reply::kPriceFieldNumber;
const int eg_goods_sell_reply::kItemInfoFieldNumber;
#endif  // !_MSC_VER

eg_goods_sell_reply::eg_goods_sell_reply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void eg_goods_sell_reply::InitAsDefaultInstance() {
  item_info_ = const_cast< ::proto::common::goods_item*>(&::proto::common::goods_item::default_instance());
}

eg_goods_sell_reply::eg_goods_sell_reply(const eg_goods_sell_reply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void eg_goods_sell_reply::SharedCtor() {
  _cached_size_ = 0;
  reply_code_ = 0u;
  item_uid_ = GOOGLE_ULONGLONG(0);
  price_ = 0u;
  item_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

eg_goods_sell_reply::~eg_goods_sell_reply() {
  SharedDtor();
}

void eg_goods_sell_reply::SharedDtor() {
  if (this != default_instance_) {
    delete item_info_;
  }
}

void eg_goods_sell_reply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* eg_goods_sell_reply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return eg_goods_sell_reply_descriptor_;
}

const eg_goods_sell_reply& eg_goods_sell_reply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

eg_goods_sell_reply* eg_goods_sell_reply::default_instance_ = NULL;

eg_goods_sell_reply* eg_goods_sell_reply::New() const {
  return new eg_goods_sell_reply;
}

void eg_goods_sell_reply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    reply_code_ = 0u;
    item_uid_ = GOOGLE_ULONGLONG(0);
    price_ = 0u;
    if (has_item_info()) {
      if (item_info_ != NULL) item_info_->::proto::common::goods_item::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool eg_goods_sell_reply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 reply_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reply_code_)));
          set_has_reply_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_item_uid;
        break;
      }

      // optional uint64 item_uid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &item_uid_)));
          set_has_item_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_price;
        break;
      }

      // optional uint32 price = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &price_)));
          set_has_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_item_info;
        break;
      }

      // optional .proto.common.goods_item item_info = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_item_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void eg_goods_sell_reply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 reply_code = 1;
  if (has_reply_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->reply_code(), output);
  }

  // optional uint64 item_uid = 2;
  if (has_item_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->item_uid(), output);
  }

  // optional uint32 price = 3;
  if (has_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->price(), output);
  }

  // optional .proto.common.goods_item item_info = 4;
  if (has_item_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->item_info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* eg_goods_sell_reply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 reply_code = 1;
  if (has_reply_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->reply_code(), target);
  }

  // optional uint64 item_uid = 2;
  if (has_item_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->item_uid(), target);
  }

  // optional uint32 price = 3;
  if (has_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->price(), target);
  }

  // optional .proto.common.goods_item item_info = 4;
  if (has_item_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->item_info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int eg_goods_sell_reply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 reply_code = 1;
    if (has_reply_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reply_code());
    }

    // optional uint64 item_uid = 2;
    if (has_item_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->item_uid());
    }

    // optional uint32 price = 3;
    if (has_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->price());
    }

    // optional .proto.common.goods_item item_info = 4;
    if (has_item_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->item_info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void eg_goods_sell_reply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const eg_goods_sell_reply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const eg_goods_sell_reply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void eg_goods_sell_reply::MergeFrom(const eg_goods_sell_reply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reply_code()) {
      set_reply_code(from.reply_code());
    }
    if (from.has_item_uid()) {
      set_item_uid(from.item_uid());
    }
    if (from.has_price()) {
      set_price(from.price());
    }
    if (from.has_item_info()) {
      mutable_item_info()->::proto::common::goods_item::MergeFrom(from.item_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void eg_goods_sell_reply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void eg_goods_sell_reply::CopyFrom(const eg_goods_sell_reply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool eg_goods_sell_reply::IsInitialized() const {

  return true;
}

void eg_goods_sell_reply::Swap(eg_goods_sell_reply* other) {
  if (other != this) {
    std::swap(reply_code_, other->reply_code_);
    std::swap(item_uid_, other->item_uid_);
    std::swap(price_, other->price_);
    std::swap(item_info_, other->item_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata eg_goods_sell_reply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = eg_goods_sell_reply_descriptor_;
  metadata.reflection = eg_goods_sell_reply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ge_goods_return_request::kGoodsUidFieldNumber;
#endif  // !_MSC_VER

ge_goods_return_request::ge_goods_return_request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ge_goods_return_request::InitAsDefaultInstance() {
}

ge_goods_return_request::ge_goods_return_request(const ge_goods_return_request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ge_goods_return_request::SharedCtor() {
  _cached_size_ = 0;
  goods_uid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ge_goods_return_request::~ge_goods_return_request() {
  SharedDtor();
}

void ge_goods_return_request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ge_goods_return_request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ge_goods_return_request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ge_goods_return_request_descriptor_;
}

const ge_goods_return_request& ge_goods_return_request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

ge_goods_return_request* ge_goods_return_request::default_instance_ = NULL;

ge_goods_return_request* ge_goods_return_request::New() const {
  return new ge_goods_return_request;
}

void ge_goods_return_request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    goods_uid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ge_goods_return_request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 goods_uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &goods_uid_)));
          set_has_goods_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ge_goods_return_request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 goods_uid = 1;
  if (has_goods_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->goods_uid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ge_goods_return_request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 goods_uid = 1;
  if (has_goods_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->goods_uid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ge_goods_return_request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 goods_uid = 1;
    if (has_goods_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->goods_uid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ge_goods_return_request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ge_goods_return_request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ge_goods_return_request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ge_goods_return_request::MergeFrom(const ge_goods_return_request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_goods_uid()) {
      set_goods_uid(from.goods_uid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ge_goods_return_request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ge_goods_return_request::CopyFrom(const ge_goods_return_request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ge_goods_return_request::IsInitialized() const {

  return true;
}

void ge_goods_return_request::Swap(ge_goods_return_request* other) {
  if (other != this) {
    std::swap(goods_uid_, other->goods_uid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ge_goods_return_request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ge_goods_return_request_descriptor_;
  metadata.reflection = ge_goods_return_request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int eg_goods_return_reply::kReplyCodeFieldNumber;
const int eg_goods_return_reply::kItemInfoFieldNumber;
#endif  // !_MSC_VER

eg_goods_return_reply::eg_goods_return_reply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void eg_goods_return_reply::InitAsDefaultInstance() {
  item_info_ = const_cast< ::proto::common::goods_item*>(&::proto::common::goods_item::default_instance());
}

eg_goods_return_reply::eg_goods_return_reply(const eg_goods_return_reply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void eg_goods_return_reply::SharedCtor() {
  _cached_size_ = 0;
  reply_code_ = 0u;
  item_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

eg_goods_return_reply::~eg_goods_return_reply() {
  SharedDtor();
}

void eg_goods_return_reply::SharedDtor() {
  if (this != default_instance_) {
    delete item_info_;
  }
}

void eg_goods_return_reply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* eg_goods_return_reply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return eg_goods_return_reply_descriptor_;
}

const eg_goods_return_reply& eg_goods_return_reply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

eg_goods_return_reply* eg_goods_return_reply::default_instance_ = NULL;

eg_goods_return_reply* eg_goods_return_reply::New() const {
  return new eg_goods_return_reply;
}

void eg_goods_return_reply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    reply_code_ = 0u;
    if (has_item_info()) {
      if (item_info_ != NULL) item_info_->::proto::common::goods_item::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool eg_goods_return_reply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 reply_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reply_code_)));
          set_has_reply_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_item_info;
        break;
      }

      // optional .proto.common.goods_item item_info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_item_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void eg_goods_return_reply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 reply_code = 1;
  if (has_reply_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->reply_code(), output);
  }

  // optional .proto.common.goods_item item_info = 2;
  if (has_item_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->item_info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* eg_goods_return_reply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 reply_code = 1;
  if (has_reply_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->reply_code(), target);
  }

  // optional .proto.common.goods_item item_info = 2;
  if (has_item_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->item_info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int eg_goods_return_reply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 reply_code = 1;
    if (has_reply_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reply_code());
    }

    // optional .proto.common.goods_item item_info = 2;
    if (has_item_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->item_info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void eg_goods_return_reply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const eg_goods_return_reply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const eg_goods_return_reply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void eg_goods_return_reply::MergeFrom(const eg_goods_return_reply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reply_code()) {
      set_reply_code(from.reply_code());
    }
    if (from.has_item_info()) {
      mutable_item_info()->::proto::common::goods_item::MergeFrom(from.item_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void eg_goods_return_reply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void eg_goods_return_reply::CopyFrom(const eg_goods_return_reply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool eg_goods_return_reply::IsInitialized() const {

  return true;
}

void eg_goods_return_reply::Swap(eg_goods_return_reply* other) {
  if (other != this) {
    std::swap(reply_code_, other->reply_code_);
    std::swap(item_info_, other->item_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata eg_goods_return_reply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = eg_goods_return_reply_descriptor_;
  metadata.reflection = eg_goods_return_reply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ge_goods_resell_request::kGoodsUidFieldNumber;
const int ge_goods_resell_request::kSellCountFieldNumber;
const int ge_goods_resell_request::kPriceFieldNumber;
#endif  // !_MSC_VER

ge_goods_resell_request::ge_goods_resell_request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ge_goods_resell_request::InitAsDefaultInstance() {
}

ge_goods_resell_request::ge_goods_resell_request(const ge_goods_resell_request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ge_goods_resell_request::SharedCtor() {
  _cached_size_ = 0;
  goods_uid_ = GOOGLE_ULONGLONG(0);
  sell_count_ = 0u;
  price_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ge_goods_resell_request::~ge_goods_resell_request() {
  SharedDtor();
}

void ge_goods_resell_request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ge_goods_resell_request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ge_goods_resell_request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ge_goods_resell_request_descriptor_;
}

const ge_goods_resell_request& ge_goods_resell_request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

ge_goods_resell_request* ge_goods_resell_request::default_instance_ = NULL;

ge_goods_resell_request* ge_goods_resell_request::New() const {
  return new ge_goods_resell_request;
}

void ge_goods_resell_request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    goods_uid_ = GOOGLE_ULONGLONG(0);
    sell_count_ = 0u;
    price_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ge_goods_resell_request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 goods_uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &goods_uid_)));
          set_has_goods_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_sell_count;
        break;
      }

      // optional uint32 sell_count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sell_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sell_count_)));
          set_has_sell_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_price;
        break;
      }

      // optional uint32 price = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &price_)));
          set_has_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ge_goods_resell_request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 goods_uid = 1;
  if (has_goods_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->goods_uid(), output);
  }

  // optional uint32 sell_count = 2;
  if (has_sell_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->sell_count(), output);
  }

  // optional uint32 price = 3;
  if (has_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->price(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ge_goods_resell_request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 goods_uid = 1;
  if (has_goods_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->goods_uid(), target);
  }

  // optional uint32 sell_count = 2;
  if (has_sell_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->sell_count(), target);
  }

  // optional uint32 price = 3;
  if (has_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->price(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ge_goods_resell_request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 goods_uid = 1;
    if (has_goods_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->goods_uid());
    }

    // optional uint32 sell_count = 2;
    if (has_sell_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sell_count());
    }

    // optional uint32 price = 3;
    if (has_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->price());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ge_goods_resell_request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ge_goods_resell_request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ge_goods_resell_request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ge_goods_resell_request::MergeFrom(const ge_goods_resell_request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_goods_uid()) {
      set_goods_uid(from.goods_uid());
    }
    if (from.has_sell_count()) {
      set_sell_count(from.sell_count());
    }
    if (from.has_price()) {
      set_price(from.price());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ge_goods_resell_request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ge_goods_resell_request::CopyFrom(const ge_goods_resell_request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ge_goods_resell_request::IsInitialized() const {

  return true;
}

void ge_goods_resell_request::Swap(ge_goods_resell_request* other) {
  if (other != this) {
    std::swap(goods_uid_, other->goods_uid_);
    std::swap(sell_count_, other->sell_count_);
    std::swap(price_, other->price_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ge_goods_resell_request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ge_goods_resell_request_descriptor_;
  metadata.reflection = ge_goods_resell_request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int eg_goods_resell_reply::kReplyCodeFieldNumber;
const int eg_goods_resell_reply::kSellCountFieldNumber;
const int eg_goods_resell_reply::kPriceFieldNumber;
#endif  // !_MSC_VER

eg_goods_resell_reply::eg_goods_resell_reply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void eg_goods_resell_reply::InitAsDefaultInstance() {
}

eg_goods_resell_reply::eg_goods_resell_reply(const eg_goods_resell_reply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void eg_goods_resell_reply::SharedCtor() {
  _cached_size_ = 0;
  reply_code_ = 0u;
  sell_count_ = 0u;
  price_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

eg_goods_resell_reply::~eg_goods_resell_reply() {
  SharedDtor();
}

void eg_goods_resell_reply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void eg_goods_resell_reply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* eg_goods_resell_reply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return eg_goods_resell_reply_descriptor_;
}

const eg_goods_resell_reply& eg_goods_resell_reply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

eg_goods_resell_reply* eg_goods_resell_reply::default_instance_ = NULL;

eg_goods_resell_reply* eg_goods_resell_reply::New() const {
  return new eg_goods_resell_reply;
}

void eg_goods_resell_reply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    reply_code_ = 0u;
    sell_count_ = 0u;
    price_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool eg_goods_resell_reply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 reply_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reply_code_)));
          set_has_reply_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_sell_count;
        break;
      }

      // optional uint32 sell_count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sell_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sell_count_)));
          set_has_sell_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_price;
        break;
      }

      // optional uint32 price = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &price_)));
          set_has_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void eg_goods_resell_reply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 reply_code = 1;
  if (has_reply_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->reply_code(), output);
  }

  // optional uint32 sell_count = 2;
  if (has_sell_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->sell_count(), output);
  }

  // optional uint32 price = 3;
  if (has_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->price(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* eg_goods_resell_reply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 reply_code = 1;
  if (has_reply_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->reply_code(), target);
  }

  // optional uint32 sell_count = 2;
  if (has_sell_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->sell_count(), target);
  }

  // optional uint32 price = 3;
  if (has_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->price(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int eg_goods_resell_reply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 reply_code = 1;
    if (has_reply_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reply_code());
    }

    // optional uint32 sell_count = 2;
    if (has_sell_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sell_count());
    }

    // optional uint32 price = 3;
    if (has_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->price());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void eg_goods_resell_reply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const eg_goods_resell_reply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const eg_goods_resell_reply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void eg_goods_resell_reply::MergeFrom(const eg_goods_resell_reply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reply_code()) {
      set_reply_code(from.reply_code());
    }
    if (from.has_sell_count()) {
      set_sell_count(from.sell_count());
    }
    if (from.has_price()) {
      set_price(from.price());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void eg_goods_resell_reply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void eg_goods_resell_reply::CopyFrom(const eg_goods_resell_reply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool eg_goods_resell_reply::IsInitialized() const {

  return true;
}

void eg_goods_resell_reply::Swap(eg_goods_resell_reply* other) {
  if (other != this) {
    std::swap(reply_code_, other->reply_code_);
    std::swap(sell_count_, other->sell_count_);
    std::swap(price_, other->price_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata eg_goods_resell_reply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = eg_goods_resell_reply_descriptor_;
  metadata.reflection = eg_goods_resell_reply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

ge_goods_profit_request::ge_goods_profit_request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ge_goods_profit_request::InitAsDefaultInstance() {
}

ge_goods_profit_request::ge_goods_profit_request(const ge_goods_profit_request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ge_goods_profit_request::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ge_goods_profit_request::~ge_goods_profit_request() {
  SharedDtor();
}

void ge_goods_profit_request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ge_goods_profit_request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ge_goods_profit_request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ge_goods_profit_request_descriptor_;
}

const ge_goods_profit_request& ge_goods_profit_request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

ge_goods_profit_request* ge_goods_profit_request::default_instance_ = NULL;

ge_goods_profit_request* ge_goods_profit_request::New() const {
  return new ge_goods_profit_request;
}

void ge_goods_profit_request::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ge_goods_profit_request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void ge_goods_profit_request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ge_goods_profit_request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ge_goods_profit_request::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ge_goods_profit_request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ge_goods_profit_request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ge_goods_profit_request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ge_goods_profit_request::MergeFrom(const ge_goods_profit_request& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ge_goods_profit_request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ge_goods_profit_request::CopyFrom(const ge_goods_profit_request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ge_goods_profit_request::IsInitialized() const {

  return true;
}

void ge_goods_profit_request::Swap(ge_goods_profit_request* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ge_goods_profit_request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ge_goods_profit_request_descriptor_;
  metadata.reflection = ge_goods_profit_request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int eg_goods_profit_reply::kReplyCodeFieldNumber;
const int eg_goods_profit_reply::kProfitFieldNumber;
#endif  // !_MSC_VER

eg_goods_profit_reply::eg_goods_profit_reply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void eg_goods_profit_reply::InitAsDefaultInstance() {
}

eg_goods_profit_reply::eg_goods_profit_reply(const eg_goods_profit_reply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void eg_goods_profit_reply::SharedCtor() {
  _cached_size_ = 0;
  reply_code_ = 0u;
  profit_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

eg_goods_profit_reply::~eg_goods_profit_reply() {
  SharedDtor();
}

void eg_goods_profit_reply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void eg_goods_profit_reply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* eg_goods_profit_reply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return eg_goods_profit_reply_descriptor_;
}

const eg_goods_profit_reply& eg_goods_profit_reply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

eg_goods_profit_reply* eg_goods_profit_reply::default_instance_ = NULL;

eg_goods_profit_reply* eg_goods_profit_reply::New() const {
  return new eg_goods_profit_reply;
}

void eg_goods_profit_reply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    reply_code_ = 0u;
    profit_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool eg_goods_profit_reply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 reply_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reply_code_)));
          set_has_reply_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_profit;
        break;
      }

      // optional uint32 profit = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_profit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &profit_)));
          set_has_profit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void eg_goods_profit_reply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 reply_code = 1;
  if (has_reply_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->reply_code(), output);
  }

  // optional uint32 profit = 2;
  if (has_profit()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->profit(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* eg_goods_profit_reply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 reply_code = 1;
  if (has_reply_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->reply_code(), target);
  }

  // optional uint32 profit = 2;
  if (has_profit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->profit(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int eg_goods_profit_reply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 reply_code = 1;
    if (has_reply_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reply_code());
    }

    // optional uint32 profit = 2;
    if (has_profit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->profit());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void eg_goods_profit_reply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const eg_goods_profit_reply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const eg_goods_profit_reply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void eg_goods_profit_reply::MergeFrom(const eg_goods_profit_reply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reply_code()) {
      set_reply_code(from.reply_code());
    }
    if (from.has_profit()) {
      set_profit(from.profit());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void eg_goods_profit_reply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void eg_goods_profit_reply::CopyFrom(const eg_goods_profit_reply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool eg_goods_profit_reply::IsInitialized() const {

  return true;
}

void eg_goods_profit_reply::Swap(eg_goods_profit_reply* other) {
  if (other != this) {
    std::swap(reply_code_, other->reply_code_);
    std::swap(profit_, other->profit_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata eg_goods_profit_reply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = eg_goods_profit_reply_descriptor_;
  metadata.reflection = eg_goods_profit_reply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ge_expedition_fight_data_request::kLevelFieldNumber;
#endif  // !_MSC_VER

ge_expedition_fight_data_request::ge_expedition_fight_data_request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ge_expedition_fight_data_request::InitAsDefaultInstance() {
}

ge_expedition_fight_data_request::ge_expedition_fight_data_request(const ge_expedition_fight_data_request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ge_expedition_fight_data_request::SharedCtor() {
  _cached_size_ = 0;
  level_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ge_expedition_fight_data_request::~ge_expedition_fight_data_request() {
  SharedDtor();
}

void ge_expedition_fight_data_request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ge_expedition_fight_data_request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ge_expedition_fight_data_request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ge_expedition_fight_data_request_descriptor_;
}

const ge_expedition_fight_data_request& ge_expedition_fight_data_request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

ge_expedition_fight_data_request* ge_expedition_fight_data_request::default_instance_ = NULL;

ge_expedition_fight_data_request* ge_expedition_fight_data_request::New() const {
  return new ge_expedition_fight_data_request;
}

void ge_expedition_fight_data_request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    level_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ge_expedition_fight_data_request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 level = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ge_expedition_fight_data_request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 level = 1;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->level(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ge_expedition_fight_data_request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 level = 1;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->level(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ge_expedition_fight_data_request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 level = 1;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ge_expedition_fight_data_request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ge_expedition_fight_data_request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ge_expedition_fight_data_request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ge_expedition_fight_data_request::MergeFrom(const ge_expedition_fight_data_request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ge_expedition_fight_data_request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ge_expedition_fight_data_request::CopyFrom(const ge_expedition_fight_data_request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ge_expedition_fight_data_request::IsInitialized() const {

  return true;
}

void ge_expedition_fight_data_request::Swap(ge_expedition_fight_data_request* other) {
  if (other != this) {
    std::swap(level_, other->level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ge_expedition_fight_data_request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ge_expedition_fight_data_request_descriptor_;
  metadata.reflection = ge_expedition_fight_data_request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int eg_expedition_fight_data_reply::kStageListFieldNumber;
#endif  // !_MSC_VER

eg_expedition_fight_data_reply::eg_expedition_fight_data_reply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void eg_expedition_fight_data_reply::InitAsDefaultInstance() {
}

eg_expedition_fight_data_reply::eg_expedition_fight_data_reply(const eg_expedition_fight_data_reply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void eg_expedition_fight_data_reply::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

eg_expedition_fight_data_reply::~eg_expedition_fight_data_reply() {
  SharedDtor();
}

void eg_expedition_fight_data_reply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void eg_expedition_fight_data_reply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* eg_expedition_fight_data_reply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return eg_expedition_fight_data_reply_descriptor_;
}

const eg_expedition_fight_data_reply& eg_expedition_fight_data_reply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

eg_expedition_fight_data_reply* eg_expedition_fight_data_reply::default_instance_ = NULL;

eg_expedition_fight_data_reply* eg_expedition_fight_data_reply::New() const {
  return new eg_expedition_fight_data_reply;
}

void eg_expedition_fight_data_reply::Clear() {
  stage_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool eg_expedition_fight_data_reply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.common.expedition_stage_single stage_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stage_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_stage_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_stage_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void eg_expedition_fight_data_reply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto.common.expedition_stage_single stage_list = 1;
  for (int i = 0; i < this->stage_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->stage_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* eg_expedition_fight_data_reply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto.common.expedition_stage_single stage_list = 1;
  for (int i = 0; i < this->stage_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->stage_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int eg_expedition_fight_data_reply::ByteSize() const {
  int total_size = 0;

  // repeated .proto.common.expedition_stage_single stage_list = 1;
  total_size += 1 * this->stage_list_size();
  for (int i = 0; i < this->stage_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->stage_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void eg_expedition_fight_data_reply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const eg_expedition_fight_data_reply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const eg_expedition_fight_data_reply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void eg_expedition_fight_data_reply::MergeFrom(const eg_expedition_fight_data_reply& from) {
  GOOGLE_CHECK_NE(&from, this);
  stage_list_.MergeFrom(from.stage_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void eg_expedition_fight_data_reply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void eg_expedition_fight_data_reply::CopyFrom(const eg_expedition_fight_data_reply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool eg_expedition_fight_data_reply::IsInitialized() const {

  return true;
}

void eg_expedition_fight_data_reply::Swap(eg_expedition_fight_data_reply* other) {
  if (other != this) {
    stage_list_.Swap(&other->stage_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata eg_expedition_fight_data_reply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = eg_expedition_fight_data_reply_descriptor_;
  metadata.reflection = eg_expedition_fight_data_reply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ge_expedition_refresh_request::kLevelFieldNumber;
#endif  // !_MSC_VER

ge_expedition_refresh_request::ge_expedition_refresh_request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ge_expedition_refresh_request::InitAsDefaultInstance() {
}

ge_expedition_refresh_request::ge_expedition_refresh_request(const ge_expedition_refresh_request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ge_expedition_refresh_request::SharedCtor() {
  _cached_size_ = 0;
  level_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ge_expedition_refresh_request::~ge_expedition_refresh_request() {
  SharedDtor();
}

void ge_expedition_refresh_request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ge_expedition_refresh_request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ge_expedition_refresh_request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ge_expedition_refresh_request_descriptor_;
}

const ge_expedition_refresh_request& ge_expedition_refresh_request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

ge_expedition_refresh_request* ge_expedition_refresh_request::default_instance_ = NULL;

ge_expedition_refresh_request* ge_expedition_refresh_request::New() const {
  return new ge_expedition_refresh_request;
}

void ge_expedition_refresh_request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    level_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ge_expedition_refresh_request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 level = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ge_expedition_refresh_request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 level = 1;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->level(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ge_expedition_refresh_request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 level = 1;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->level(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ge_expedition_refresh_request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 level = 1;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ge_expedition_refresh_request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ge_expedition_refresh_request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ge_expedition_refresh_request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ge_expedition_refresh_request::MergeFrom(const ge_expedition_refresh_request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ge_expedition_refresh_request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ge_expedition_refresh_request::CopyFrom(const ge_expedition_refresh_request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ge_expedition_refresh_request::IsInitialized() const {

  return true;
}

void ge_expedition_refresh_request::Swap(ge_expedition_refresh_request* other) {
  if (other != this) {
    std::swap(level_, other->level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ge_expedition_refresh_request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ge_expedition_refresh_request_descriptor_;
  metadata.reflection = ge_expedition_refresh_request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int eg_expedition_refresh_reply::kStageListFieldNumber;
#endif  // !_MSC_VER

eg_expedition_refresh_reply::eg_expedition_refresh_reply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void eg_expedition_refresh_reply::InitAsDefaultInstance() {
}

eg_expedition_refresh_reply::eg_expedition_refresh_reply(const eg_expedition_refresh_reply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void eg_expedition_refresh_reply::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

eg_expedition_refresh_reply::~eg_expedition_refresh_reply() {
  SharedDtor();
}

void eg_expedition_refresh_reply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void eg_expedition_refresh_reply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* eg_expedition_refresh_reply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return eg_expedition_refresh_reply_descriptor_;
}

const eg_expedition_refresh_reply& eg_expedition_refresh_reply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

eg_expedition_refresh_reply* eg_expedition_refresh_reply::default_instance_ = NULL;

eg_expedition_refresh_reply* eg_expedition_refresh_reply::New() const {
  return new eg_expedition_refresh_reply;
}

void eg_expedition_refresh_reply::Clear() {
  stage_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool eg_expedition_refresh_reply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.common.expedition_stage_single stage_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stage_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_stage_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_stage_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void eg_expedition_refresh_reply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto.common.expedition_stage_single stage_list = 1;
  for (int i = 0; i < this->stage_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->stage_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* eg_expedition_refresh_reply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto.common.expedition_stage_single stage_list = 1;
  for (int i = 0; i < this->stage_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->stage_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int eg_expedition_refresh_reply::ByteSize() const {
  int total_size = 0;

  // repeated .proto.common.expedition_stage_single stage_list = 1;
  total_size += 1 * this->stage_list_size();
  for (int i = 0; i < this->stage_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->stage_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void eg_expedition_refresh_reply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const eg_expedition_refresh_reply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const eg_expedition_refresh_reply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void eg_expedition_refresh_reply::MergeFrom(const eg_expedition_refresh_reply& from) {
  GOOGLE_CHECK_NE(&from, this);
  stage_list_.MergeFrom(from.stage_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void eg_expedition_refresh_reply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void eg_expedition_refresh_reply::CopyFrom(const eg_expedition_refresh_reply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool eg_expedition_refresh_reply::IsInitialized() const {

  return true;
}

void eg_expedition_refresh_reply::Swap(eg_expedition_refresh_reply* other) {
  if (other != this) {
    stage_list_.Swap(&other->stage_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata eg_expedition_refresh_reply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = eg_expedition_refresh_reply_descriptor_;
  metadata.reflection = eg_expedition_refresh_reply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ge_expedition_refresh_stage_request::kLevelFieldNumber;
const int ge_expedition_refresh_stage_request::kStageIdFieldNumber;
#endif  // !_MSC_VER

ge_expedition_refresh_stage_request::ge_expedition_refresh_stage_request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ge_expedition_refresh_stage_request::InitAsDefaultInstance() {
}

ge_expedition_refresh_stage_request::ge_expedition_refresh_stage_request(const ge_expedition_refresh_stage_request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ge_expedition_refresh_stage_request::SharedCtor() {
  _cached_size_ = 0;
  level_ = 0u;
  stage_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ge_expedition_refresh_stage_request::~ge_expedition_refresh_stage_request() {
  SharedDtor();
}

void ge_expedition_refresh_stage_request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ge_expedition_refresh_stage_request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ge_expedition_refresh_stage_request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ge_expedition_refresh_stage_request_descriptor_;
}

const ge_expedition_refresh_stage_request& ge_expedition_refresh_stage_request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

ge_expedition_refresh_stage_request* ge_expedition_refresh_stage_request::default_instance_ = NULL;

ge_expedition_refresh_stage_request* ge_expedition_refresh_stage_request::New() const {
  return new ge_expedition_refresh_stage_request;
}

void ge_expedition_refresh_stage_request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    level_ = 0u;
    stage_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ge_expedition_refresh_stage_request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 level = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_stage_id;
        break;
      }

      // optional uint32 stage_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stage_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stage_id_)));
          set_has_stage_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ge_expedition_refresh_stage_request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 level = 1;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->level(), output);
  }

  // optional uint32 stage_id = 2;
  if (has_stage_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->stage_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ge_expedition_refresh_stage_request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 level = 1;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->level(), target);
  }

  // optional uint32 stage_id = 2;
  if (has_stage_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->stage_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ge_expedition_refresh_stage_request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 level = 1;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional uint32 stage_id = 2;
    if (has_stage_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stage_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ge_expedition_refresh_stage_request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ge_expedition_refresh_stage_request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ge_expedition_refresh_stage_request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ge_expedition_refresh_stage_request::MergeFrom(const ge_expedition_refresh_stage_request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_stage_id()) {
      set_stage_id(from.stage_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ge_expedition_refresh_stage_request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ge_expedition_refresh_stage_request::CopyFrom(const ge_expedition_refresh_stage_request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ge_expedition_refresh_stage_request::IsInitialized() const {

  return true;
}

void ge_expedition_refresh_stage_request::Swap(ge_expedition_refresh_stage_request* other) {
  if (other != this) {
    std::swap(level_, other->level_);
    std::swap(stage_id_, other->stage_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ge_expedition_refresh_stage_request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ge_expedition_refresh_stage_request_descriptor_;
  metadata.reflection = ge_expedition_refresh_stage_request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int eg_expedition_refresh_stage_reply::kStageDataFieldNumber;
#endif  // !_MSC_VER

eg_expedition_refresh_stage_reply::eg_expedition_refresh_stage_reply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void eg_expedition_refresh_stage_reply::InitAsDefaultInstance() {
  stage_data_ = const_cast< ::proto::common::expedition_stage_single*>(&::proto::common::expedition_stage_single::default_instance());
}

eg_expedition_refresh_stage_reply::eg_expedition_refresh_stage_reply(const eg_expedition_refresh_stage_reply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void eg_expedition_refresh_stage_reply::SharedCtor() {
  _cached_size_ = 0;
  stage_data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

eg_expedition_refresh_stage_reply::~eg_expedition_refresh_stage_reply() {
  SharedDtor();
}

void eg_expedition_refresh_stage_reply::SharedDtor() {
  if (this != default_instance_) {
    delete stage_data_;
  }
}

void eg_expedition_refresh_stage_reply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* eg_expedition_refresh_stage_reply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return eg_expedition_refresh_stage_reply_descriptor_;
}

const eg_expedition_refresh_stage_reply& eg_expedition_refresh_stage_reply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

eg_expedition_refresh_stage_reply* eg_expedition_refresh_stage_reply::default_instance_ = NULL;

eg_expedition_refresh_stage_reply* eg_expedition_refresh_stage_reply::New() const {
  return new eg_expedition_refresh_stage_reply;
}

void eg_expedition_refresh_stage_reply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_stage_data()) {
      if (stage_data_ != NULL) stage_data_->::proto::common::expedition_stage_single::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool eg_expedition_refresh_stage_reply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.common.expedition_stage_single stage_data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stage_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void eg_expedition_refresh_stage_reply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .proto.common.expedition_stage_single stage_data = 1;
  if (has_stage_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->stage_data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* eg_expedition_refresh_stage_reply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .proto.common.expedition_stage_single stage_data = 1;
  if (has_stage_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->stage_data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int eg_expedition_refresh_stage_reply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .proto.common.expedition_stage_single stage_data = 1;
    if (has_stage_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stage_data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void eg_expedition_refresh_stage_reply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const eg_expedition_refresh_stage_reply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const eg_expedition_refresh_stage_reply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void eg_expedition_refresh_stage_reply::MergeFrom(const eg_expedition_refresh_stage_reply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stage_data()) {
      mutable_stage_data()->::proto::common::expedition_stage_single::MergeFrom(from.stage_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void eg_expedition_refresh_stage_reply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void eg_expedition_refresh_stage_reply::CopyFrom(const eg_expedition_refresh_stage_reply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool eg_expedition_refresh_stage_reply::IsInitialized() const {

  return true;
}

void eg_expedition_refresh_stage_reply::Swap(eg_expedition_refresh_stage_reply* other) {
  if (other != this) {
    std::swap(stage_data_, other->stage_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata eg_expedition_refresh_stage_reply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = eg_expedition_refresh_stage_reply_descriptor_;
  metadata.reflection = eg_expedition_refresh_stage_reply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ge_expedition_help_request::kHelperListFieldNumber;
#endif  // !_MSC_VER

ge_expedition_help_request::ge_expedition_help_request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ge_expedition_help_request::InitAsDefaultInstance() {
}

ge_expedition_help_request::ge_expedition_help_request(const ge_expedition_help_request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ge_expedition_help_request::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ge_expedition_help_request::~ge_expedition_help_request() {
  SharedDtor();
}

void ge_expedition_help_request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ge_expedition_help_request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ge_expedition_help_request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ge_expedition_help_request_descriptor_;
}

const ge_expedition_help_request& ge_expedition_help_request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

ge_expedition_help_request* ge_expedition_help_request::default_instance_ = NULL;

ge_expedition_help_request* ge_expedition_help_request::New() const {
  return new ge_expedition_help_request;
}

void ge_expedition_help_request::Clear() {
  helper_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ge_expedition_help_request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint64 helper_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_helper_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 8, input, this->mutable_helper_list())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_helper_list())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_helper_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ge_expedition_help_request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint64 helper_list = 1;
  for (int i = 0; i < this->helper_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      1, this->helper_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ge_expedition_help_request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint64 helper_list = 1;
  for (int i = 0; i < this->helper_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(1, this->helper_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ge_expedition_help_request::ByteSize() const {
  int total_size = 0;

  // repeated uint64 helper_list = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->helper_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->helper_list(i));
    }
    total_size += 1 * this->helper_list_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ge_expedition_help_request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ge_expedition_help_request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ge_expedition_help_request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ge_expedition_help_request::MergeFrom(const ge_expedition_help_request& from) {
  GOOGLE_CHECK_NE(&from, this);
  helper_list_.MergeFrom(from.helper_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ge_expedition_help_request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ge_expedition_help_request::CopyFrom(const ge_expedition_help_request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ge_expedition_help_request::IsInitialized() const {

  return true;
}

void ge_expedition_help_request::Swap(ge_expedition_help_request* other) {
  if (other != this) {
    helper_list_.Swap(&other->helper_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ge_expedition_help_request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ge_expedition_help_request_descriptor_;
  metadata.reflection = ge_expedition_help_request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int eg_expedition_help_reply::kReplyCodeFieldNumber;
#endif  // !_MSC_VER

eg_expedition_help_reply::eg_expedition_help_reply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void eg_expedition_help_reply::InitAsDefaultInstance() {
}

eg_expedition_help_reply::eg_expedition_help_reply(const eg_expedition_help_reply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void eg_expedition_help_reply::SharedCtor() {
  _cached_size_ = 0;
  reply_code_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

eg_expedition_help_reply::~eg_expedition_help_reply() {
  SharedDtor();
}

void eg_expedition_help_reply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void eg_expedition_help_reply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* eg_expedition_help_reply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return eg_expedition_help_reply_descriptor_;
}

const eg_expedition_help_reply& eg_expedition_help_reply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

eg_expedition_help_reply* eg_expedition_help_reply::default_instance_ = NULL;

eg_expedition_help_reply* eg_expedition_help_reply::New() const {
  return new eg_expedition_help_reply;
}

void eg_expedition_help_reply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    reply_code_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool eg_expedition_help_reply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 reply_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reply_code_)));
          set_has_reply_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void eg_expedition_help_reply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 reply_code = 1;
  if (has_reply_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->reply_code(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* eg_expedition_help_reply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 reply_code = 1;
  if (has_reply_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->reply_code(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int eg_expedition_help_reply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 reply_code = 1;
    if (has_reply_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reply_code());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void eg_expedition_help_reply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const eg_expedition_help_reply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const eg_expedition_help_reply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void eg_expedition_help_reply::MergeFrom(const eg_expedition_help_reply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reply_code()) {
      set_reply_code(from.reply_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void eg_expedition_help_reply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void eg_expedition_help_reply::CopyFrom(const eg_expedition_help_reply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool eg_expedition_help_reply::IsInitialized() const {

  return true;
}

void eg_expedition_help_reply::Swap(eg_expedition_help_reply* other) {
  if (other != this) {
    std::swap(reply_code_, other->reply_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata eg_expedition_help_reply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = eg_expedition_help_reply_descriptor_;
  metadata.reflection = eg_expedition_help_reply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int global_data_day_update_time::kUpdateTimeFieldNumber;
#endif  // !_MSC_VER

global_data_day_update_time::global_data_day_update_time()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void global_data_day_update_time::InitAsDefaultInstance() {
}

global_data_day_update_time::global_data_day_update_time(const global_data_day_update_time& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void global_data_day_update_time::SharedCtor() {
  _cached_size_ = 0;
  update_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

global_data_day_update_time::~global_data_day_update_time() {
  SharedDtor();
}

void global_data_day_update_time::SharedDtor() {
  if (this != default_instance_) {
  }
}

void global_data_day_update_time::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* global_data_day_update_time::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return global_data_day_update_time_descriptor_;
}

const global_data_day_update_time& global_data_day_update_time::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

global_data_day_update_time* global_data_day_update_time::default_instance_ = NULL;

global_data_day_update_time* global_data_day_update_time::New() const {
  return new global_data_day_update_time;
}

void global_data_day_update_time::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    update_time_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool global_data_day_update_time::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 update_time = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &update_time_)));
          set_has_update_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void global_data_day_update_time::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 update_time = 1;
  if (has_update_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->update_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* global_data_day_update_time::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 update_time = 1;
  if (has_update_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->update_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int global_data_day_update_time::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 update_time = 1;
    if (has_update_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->update_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void global_data_day_update_time::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const global_data_day_update_time* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const global_data_day_update_time*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void global_data_day_update_time::MergeFrom(const global_data_day_update_time& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_update_time()) {
      set_update_time(from.update_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void global_data_day_update_time::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void global_data_day_update_time::CopyFrom(const global_data_day_update_time& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool global_data_day_update_time::IsInitialized() const {

  return true;
}

void global_data_day_update_time::Swap(global_data_day_update_time* other) {
  if (other != this) {
    std::swap(update_time_, other->update_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata global_data_day_update_time::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = global_data_day_update_time_descriptor_;
  metadata.reflection = global_data_day_update_time_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int global_data_family_war::kWeekIdFieldNumber;
const int global_data_family_war::kStateFieldNumber;
#endif  // !_MSC_VER

global_data_family_war::global_data_family_war()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void global_data_family_war::InitAsDefaultInstance() {
}

global_data_family_war::global_data_family_war(const global_data_family_war& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void global_data_family_war::SharedCtor() {
  _cached_size_ = 0;
  week_id_ = 0u;
  state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

global_data_family_war::~global_data_family_war() {
  SharedDtor();
}

void global_data_family_war::SharedDtor() {
  if (this != default_instance_) {
  }
}

void global_data_family_war::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* global_data_family_war::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return global_data_family_war_descriptor_;
}

const global_data_family_war& global_data_family_war::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

global_data_family_war* global_data_family_war::default_instance_ = NULL;

global_data_family_war* global_data_family_war::New() const {
  return new global_data_family_war;
}

void global_data_family_war::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    week_id_ = 0u;
    state_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool global_data_family_war::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 week_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &week_id_)));
          set_has_week_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_state;
        break;
      }

      // optional .proto.common.family_war_state state = 2 [default = family_war_state_end];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::common::family_war_state_IsValid(value)) {
            set_state(static_cast< ::proto::common::family_war_state >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void global_data_family_war::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 week_id = 1;
  if (has_week_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->week_id(), output);
  }

  // optional .proto.common.family_war_state state = 2 [default = family_war_state_end];
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->state(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* global_data_family_war::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 week_id = 1;
  if (has_week_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->week_id(), target);
  }

  // optional .proto.common.family_war_state state = 2 [default = family_war_state_end];
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->state(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int global_data_family_war::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 week_id = 1;
    if (has_week_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->week_id());
    }

    // optional .proto.common.family_war_state state = 2 [default = family_war_state_end];
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void global_data_family_war::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const global_data_family_war* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const global_data_family_war*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void global_data_family_war::MergeFrom(const global_data_family_war& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_week_id()) {
      set_week_id(from.week_id());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void global_data_family_war::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void global_data_family_war::CopyFrom(const global_data_family_war& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool global_data_family_war::IsInitialized() const {

  return true;
}

void global_data_family_war::Swap(global_data_family_war* other) {
  if (other != this) {
    std::swap(week_id_, other->week_id_);
    std::swap(state_, other->state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata global_data_family_war::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = global_data_family_war_descriptor_;
  metadata.reflection = global_data_family_war_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int global_data_country_data::kPeriodTypeFieldNumber;
const int global_data_country_data::kPeriodTimeFieldNumber;
#endif  // !_MSC_VER

global_data_country_data::global_data_country_data()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void global_data_country_data::InitAsDefaultInstance() {
}

global_data_country_data::global_data_country_data(const global_data_country_data& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void global_data_country_data::SharedCtor() {
  _cached_size_ = 0;
  period_type_ = 0u;
  period_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

global_data_country_data::~global_data_country_data() {
  SharedDtor();
}

void global_data_country_data::SharedDtor() {
  if (this != default_instance_) {
  }
}

void global_data_country_data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* global_data_country_data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return global_data_country_data_descriptor_;
}

const global_data_country_data& global_data_country_data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

global_data_country_data* global_data_country_data::default_instance_ = NULL;

global_data_country_data* global_data_country_data::New() const {
  return new global_data_country_data;
}

void global_data_country_data::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    period_type_ = 0u;
    period_time_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool global_data_country_data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 period_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &period_type_)));
          set_has_period_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_period_time;
        break;
      }

      // optional uint32 period_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_period_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &period_time_)));
          set_has_period_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void global_data_country_data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 period_type = 1;
  if (has_period_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->period_type(), output);
  }

  // optional uint32 period_time = 2;
  if (has_period_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->period_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* global_data_country_data::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 period_type = 1;
  if (has_period_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->period_type(), target);
  }

  // optional uint32 period_time = 2;
  if (has_period_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->period_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int global_data_country_data::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 period_type = 1;
    if (has_period_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->period_type());
    }

    // optional uint32 period_time = 2;
    if (has_period_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->period_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void global_data_country_data::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const global_data_country_data* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const global_data_country_data*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void global_data_country_data::MergeFrom(const global_data_country_data& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_period_type()) {
      set_period_type(from.period_type());
    }
    if (from.has_period_time()) {
      set_period_time(from.period_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void global_data_country_data::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void global_data_country_data::CopyFrom(const global_data_country_data& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool global_data_country_data::IsInitialized() const {

  return true;
}

void global_data_country_data::Swap(global_data_country_data* other) {
  if (other != this) {
    std::swap(period_type_, other->period_type_);
    std::swap(period_time_, other->period_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata global_data_country_data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = global_data_country_data_descriptor_;
  metadata.reflection = global_data_country_data_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int global_data_king_war_data::kStateFieldNumber;
const int global_data_king_war_data::kStateEndTimeFieldNumber;
const int global_data_king_war_data::kBattleTimeFieldNumber;
#endif  // !_MSC_VER

global_data_king_war_data::global_data_king_war_data()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void global_data_king_war_data::InitAsDefaultInstance() {
}

global_data_king_war_data::global_data_king_war_data(const global_data_king_war_data& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void global_data_king_war_data::SharedCtor() {
  _cached_size_ = 0;
  state_ = 0u;
  state_end_time_ = 0u;
  battle_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

global_data_king_war_data::~global_data_king_war_data() {
  SharedDtor();
}

void global_data_king_war_data::SharedDtor() {
  if (this != default_instance_) {
  }
}

void global_data_king_war_data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* global_data_king_war_data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return global_data_king_war_data_descriptor_;
}

const global_data_king_war_data& global_data_king_war_data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

global_data_king_war_data* global_data_king_war_data::default_instance_ = NULL;

global_data_king_war_data* global_data_king_war_data::New() const {
  return new global_data_king_war_data;
}

void global_data_king_war_data::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    state_ = 0u;
    state_end_time_ = 0u;
    battle_time_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool global_data_king_war_data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 state = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_state_end_time;
        break;
      }

      // optional uint32 state_end_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state_end_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &state_end_time_)));
          set_has_state_end_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_battle_time;
        break;
      }

      // optional uint32 battle_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_battle_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &battle_time_)));
          set_has_battle_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void global_data_king_war_data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 state = 1;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->state(), output);
  }

  // optional uint32 state_end_time = 2;
  if (has_state_end_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->state_end_time(), output);
  }

  // optional uint32 battle_time = 3;
  if (has_battle_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->battle_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* global_data_king_war_data::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 state = 1;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->state(), target);
  }

  // optional uint32 state_end_time = 2;
  if (has_state_end_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->state_end_time(), target);
  }

  // optional uint32 battle_time = 3;
  if (has_battle_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->battle_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int global_data_king_war_data::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 state = 1;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->state());
    }

    // optional uint32 state_end_time = 2;
    if (has_state_end_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->state_end_time());
    }

    // optional uint32 battle_time = 3;
    if (has_battle_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->battle_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void global_data_king_war_data::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const global_data_king_war_data* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const global_data_king_war_data*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void global_data_king_war_data::MergeFrom(const global_data_king_war_data& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_state_end_time()) {
      set_state_end_time(from.state_end_time());
    }
    if (from.has_battle_time()) {
      set_battle_time(from.battle_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void global_data_king_war_data::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void global_data_king_war_data::CopyFrom(const global_data_king_war_data& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool global_data_king_war_data::IsInitialized() const {

  return true;
}

void global_data_king_war_data::Swap(global_data_king_war_data* other) {
  if (other != this) {
    std::swap(state_, other->state_);
    std::swap(state_end_time_, other->state_end_time_);
    std::swap(battle_time_, other->battle_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata global_data_king_war_data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = global_data_king_war_data_descriptor_;
  metadata.reflection = global_data_king_war_data_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int eg_offline_data_notify::kOrdFieldNumber;
#endif  // !_MSC_VER

eg_offline_data_notify::eg_offline_data_notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void eg_offline_data_notify::InitAsDefaultInstance() {
  ord_ = const_cast< ::proto::common::offline_role_data*>(&::proto::common::offline_role_data::default_instance());
}

eg_offline_data_notify::eg_offline_data_notify(const eg_offline_data_notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void eg_offline_data_notify::SharedCtor() {
  _cached_size_ = 0;
  ord_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

eg_offline_data_notify::~eg_offline_data_notify() {
  SharedDtor();
}

void eg_offline_data_notify::SharedDtor() {
  if (this != default_instance_) {
    delete ord_;
  }
}

void eg_offline_data_notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* eg_offline_data_notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return eg_offline_data_notify_descriptor_;
}

const eg_offline_data_notify& eg_offline_data_notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

eg_offline_data_notify* eg_offline_data_notify::default_instance_ = NULL;

eg_offline_data_notify* eg_offline_data_notify::New() const {
  return new eg_offline_data_notify;
}

void eg_offline_data_notify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_ord()) {
      if (ord_ != NULL) ord_->::proto::common::offline_role_data::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool eg_offline_data_notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.common.offline_role_data ord = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ord()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void eg_offline_data_notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .proto.common.offline_role_data ord = 1;
  if (has_ord()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->ord(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* eg_offline_data_notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .proto.common.offline_role_data ord = 1;
  if (has_ord()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->ord(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int eg_offline_data_notify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .proto.common.offline_role_data ord = 1;
    if (has_ord()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ord());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void eg_offline_data_notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const eg_offline_data_notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const eg_offline_data_notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void eg_offline_data_notify::MergeFrom(const eg_offline_data_notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ord()) {
      mutable_ord()->::proto::common::offline_role_data::MergeFrom(from.ord());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void eg_offline_data_notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void eg_offline_data_notify::CopyFrom(const eg_offline_data_notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool eg_offline_data_notify::IsInitialized() const {

  return true;
}

void eg_offline_data_notify::Swap(eg_offline_data_notify* other) {
  if (other != this) {
    std::swap(ord_, other->ord_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata eg_offline_data_notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = eg_offline_data_notify_descriptor_;
  metadata.reflection = eg_offline_data_notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ge_offline_data_notify::kOrdFieldNumber;
#endif  // !_MSC_VER

ge_offline_data_notify::ge_offline_data_notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ge_offline_data_notify::InitAsDefaultInstance() {
  ord_ = const_cast< ::proto::common::offline_role_data*>(&::proto::common::offline_role_data::default_instance());
}

ge_offline_data_notify::ge_offline_data_notify(const ge_offline_data_notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ge_offline_data_notify::SharedCtor() {
  _cached_size_ = 0;
  ord_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ge_offline_data_notify::~ge_offline_data_notify() {
  SharedDtor();
}

void ge_offline_data_notify::SharedDtor() {
  if (this != default_instance_) {
    delete ord_;
  }
}

void ge_offline_data_notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ge_offline_data_notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ge_offline_data_notify_descriptor_;
}

const ge_offline_data_notify& ge_offline_data_notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

ge_offline_data_notify* ge_offline_data_notify::default_instance_ = NULL;

ge_offline_data_notify* ge_offline_data_notify::New() const {
  return new ge_offline_data_notify;
}

void ge_offline_data_notify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_ord()) {
      if (ord_ != NULL) ord_->::proto::common::offline_role_data::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ge_offline_data_notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.common.offline_role_data ord = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ord()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ge_offline_data_notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .proto.common.offline_role_data ord = 1;
  if (has_ord()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->ord(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ge_offline_data_notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .proto.common.offline_role_data ord = 1;
  if (has_ord()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->ord(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ge_offline_data_notify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .proto.common.offline_role_data ord = 1;
    if (has_ord()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ord());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ge_offline_data_notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ge_offline_data_notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ge_offline_data_notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ge_offline_data_notify::MergeFrom(const ge_offline_data_notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ord()) {
      mutable_ord()->::proto::common::offline_role_data::MergeFrom(from.ord());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ge_offline_data_notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ge_offline_data_notify::CopyFrom(const ge_offline_data_notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ge_offline_data_notify::IsInitialized() const {

  return true;
}

void ge_offline_data_notify::Swap(ge_offline_data_notify* other) {
  if (other != this) {
    std::swap(ord_, other->ord_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ge_offline_data_notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ge_offline_data_notify_descriptor_;
  metadata.reflection = ge_offline_data_notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int eg_notify_progress_state_notify::kTypeFieldNumber;
const int eg_notify_progress_state_notify::kParam1FieldNumber;
const int eg_notify_progress_state_notify::kParam2FieldNumber;
#endif  // !_MSC_VER

eg_notify_progress_state_notify::eg_notify_progress_state_notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void eg_notify_progress_state_notify::InitAsDefaultInstance() {
}

eg_notify_progress_state_notify::eg_notify_progress_state_notify(const eg_notify_progress_state_notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void eg_notify_progress_state_notify::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  param1_ = 0u;
  param2_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

eg_notify_progress_state_notify::~eg_notify_progress_state_notify() {
  SharedDtor();
}

void eg_notify_progress_state_notify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void eg_notify_progress_state_notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* eg_notify_progress_state_notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return eg_notify_progress_state_notify_descriptor_;
}

const eg_notify_progress_state_notify& eg_notify_progress_state_notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

eg_notify_progress_state_notify* eg_notify_progress_state_notify::default_instance_ = NULL;

eg_notify_progress_state_notify* eg_notify_progress_state_notify::New() const {
  return new eg_notify_progress_state_notify;
}

void eg_notify_progress_state_notify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0u;
    param1_ = 0u;
    param2_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool eg_notify_progress_state_notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_param1;
        break;
      }

      // optional uint32 param1 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_param1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &param1_)));
          set_has_param1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_param2;
        break;
      }

      // optional uint32 param2 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_param2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &param2_)));
          set_has_param2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void eg_notify_progress_state_notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  // optional uint32 param1 = 2;
  if (has_param1()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->param1(), output);
  }

  // optional uint32 param2 = 3;
  if (has_param2()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->param2(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* eg_notify_progress_state_notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }

  // optional uint32 param1 = 2;
  if (has_param1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->param1(), target);
  }

  // optional uint32 param2 = 3;
  if (has_param2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->param2(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int eg_notify_progress_state_notify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional uint32 param1 = 2;
    if (has_param1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->param1());
    }

    // optional uint32 param2 = 3;
    if (has_param2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->param2());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void eg_notify_progress_state_notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const eg_notify_progress_state_notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const eg_notify_progress_state_notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void eg_notify_progress_state_notify::MergeFrom(const eg_notify_progress_state_notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_param1()) {
      set_param1(from.param1());
    }
    if (from.has_param2()) {
      set_param2(from.param2());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void eg_notify_progress_state_notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void eg_notify_progress_state_notify::CopyFrom(const eg_notify_progress_state_notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool eg_notify_progress_state_notify::IsInitialized() const {

  return true;
}

void eg_notify_progress_state_notify::Swap(eg_notify_progress_state_notify* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(param1_, other->param1_);
    std::swap(param2_, other->param2_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata eg_notify_progress_state_notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = eg_notify_progress_state_notify_descriptor_;
  metadata.reflection = eg_notify_progress_state_notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int hg_notify_progress_state_notify::kTypeFieldNumber;
const int hg_notify_progress_state_notify::kParam1FieldNumber;
const int hg_notify_progress_state_notify::kParam2FieldNumber;
#endif  // !_MSC_VER

hg_notify_progress_state_notify::hg_notify_progress_state_notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void hg_notify_progress_state_notify::InitAsDefaultInstance() {
}

hg_notify_progress_state_notify::hg_notify_progress_state_notify(const hg_notify_progress_state_notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void hg_notify_progress_state_notify::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  param1_ = 0u;
  param2_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

hg_notify_progress_state_notify::~hg_notify_progress_state_notify() {
  SharedDtor();
}

void hg_notify_progress_state_notify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void hg_notify_progress_state_notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* hg_notify_progress_state_notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return hg_notify_progress_state_notify_descriptor_;
}

const hg_notify_progress_state_notify& hg_notify_progress_state_notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

hg_notify_progress_state_notify* hg_notify_progress_state_notify::default_instance_ = NULL;

hg_notify_progress_state_notify* hg_notify_progress_state_notify::New() const {
  return new hg_notify_progress_state_notify;
}

void hg_notify_progress_state_notify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0u;
    param1_ = 0u;
    param2_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool hg_notify_progress_state_notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_param1;
        break;
      }

      // optional uint32 param1 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_param1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &param1_)));
          set_has_param1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_param2;
        break;
      }

      // optional uint32 param2 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_param2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &param2_)));
          set_has_param2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void hg_notify_progress_state_notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  // optional uint32 param1 = 2;
  if (has_param1()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->param1(), output);
  }

  // optional uint32 param2 = 3;
  if (has_param2()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->param2(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* hg_notify_progress_state_notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }

  // optional uint32 param1 = 2;
  if (has_param1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->param1(), target);
  }

  // optional uint32 param2 = 3;
  if (has_param2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->param2(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int hg_notify_progress_state_notify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional uint32 param1 = 2;
    if (has_param1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->param1());
    }

    // optional uint32 param2 = 3;
    if (has_param2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->param2());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void hg_notify_progress_state_notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const hg_notify_progress_state_notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const hg_notify_progress_state_notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void hg_notify_progress_state_notify::MergeFrom(const hg_notify_progress_state_notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_param1()) {
      set_param1(from.param1());
    }
    if (from.has_param2()) {
      set_param2(from.param2());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void hg_notify_progress_state_notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void hg_notify_progress_state_notify::CopyFrom(const hg_notify_progress_state_notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool hg_notify_progress_state_notify::IsInitialized() const {

  return true;
}

void hg_notify_progress_state_notify::Swap(hg_notify_progress_state_notify* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(param1_, other->param1_);
    std::swap(param2_, other->param2_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata hg_notify_progress_state_notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = hg_notify_progress_state_notify_descriptor_;
  metadata.reflection = hg_notify_progress_state_notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ge_tower_trigger_notify::kTowerTriggerFieldNumber;
const int ge_tower_trigger_notify::kFriendUidFieldNumber;
#endif  // !_MSC_VER

ge_tower_trigger_notify::ge_tower_trigger_notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ge_tower_trigger_notify::InitAsDefaultInstance() {
}

ge_tower_trigger_notify::ge_tower_trigger_notify(const ge_tower_trigger_notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ge_tower_trigger_notify::SharedCtor() {
  _cached_size_ = 0;
  friend_uid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ge_tower_trigger_notify::~ge_tower_trigger_notify() {
  SharedDtor();
}

void ge_tower_trigger_notify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ge_tower_trigger_notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ge_tower_trigger_notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ge_tower_trigger_notify_descriptor_;
}

const ge_tower_trigger_notify& ge_tower_trigger_notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

ge_tower_trigger_notify* ge_tower_trigger_notify::default_instance_ = NULL;

ge_tower_trigger_notify* ge_tower_trigger_notify::New() const {
  return new ge_tower_trigger_notify;
}

void ge_tower_trigger_notify::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    friend_uid_ = GOOGLE_ULONGLONG(0);
  }
  tower_trigger_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ge_tower_trigger_notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.common.tower_trigger tower_trigger = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tower_trigger:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_tower_trigger()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_tower_trigger;
        if (input->ExpectTag(16)) goto parse_friend_uid;
        break;
      }

      // optional uint64 friend_uid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_friend_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &friend_uid_)));
          set_has_friend_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ge_tower_trigger_notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto.common.tower_trigger tower_trigger = 1;
  for (int i = 0; i < this->tower_trigger_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->tower_trigger(i), output);
  }

  // optional uint64 friend_uid = 2;
  if (has_friend_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->friend_uid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ge_tower_trigger_notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto.common.tower_trigger tower_trigger = 1;
  for (int i = 0; i < this->tower_trigger_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->tower_trigger(i), target);
  }

  // optional uint64 friend_uid = 2;
  if (has_friend_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->friend_uid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ge_tower_trigger_notify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint64 friend_uid = 2;
    if (has_friend_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->friend_uid());
    }

  }
  // repeated .proto.common.tower_trigger tower_trigger = 1;
  total_size += 1 * this->tower_trigger_size();
  for (int i = 0; i < this->tower_trigger_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->tower_trigger(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ge_tower_trigger_notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ge_tower_trigger_notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ge_tower_trigger_notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ge_tower_trigger_notify::MergeFrom(const ge_tower_trigger_notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  tower_trigger_.MergeFrom(from.tower_trigger_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_friend_uid()) {
      set_friend_uid(from.friend_uid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ge_tower_trigger_notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ge_tower_trigger_notify::CopyFrom(const ge_tower_trigger_notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ge_tower_trigger_notify::IsInitialized() const {

  return true;
}

void ge_tower_trigger_notify::Swap(ge_tower_trigger_notify* other) {
  if (other != this) {
    tower_trigger_.Swap(&other->tower_trigger_);
    std::swap(friend_uid_, other->friend_uid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ge_tower_trigger_notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ge_tower_trigger_notify_descriptor_;
  metadata.reflection = ge_tower_trigger_notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int eg_tower_trigger_notify::kTowerTriggerFieldNumber;
#endif  // !_MSC_VER

eg_tower_trigger_notify::eg_tower_trigger_notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void eg_tower_trigger_notify::InitAsDefaultInstance() {
}

eg_tower_trigger_notify::eg_tower_trigger_notify(const eg_tower_trigger_notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void eg_tower_trigger_notify::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

eg_tower_trigger_notify::~eg_tower_trigger_notify() {
  SharedDtor();
}

void eg_tower_trigger_notify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void eg_tower_trigger_notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* eg_tower_trigger_notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return eg_tower_trigger_notify_descriptor_;
}

const eg_tower_trigger_notify& eg_tower_trigger_notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

eg_tower_trigger_notify* eg_tower_trigger_notify::default_instance_ = NULL;

eg_tower_trigger_notify* eg_tower_trigger_notify::New() const {
  return new eg_tower_trigger_notify;
}

void eg_tower_trigger_notify::Clear() {
  tower_trigger_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool eg_tower_trigger_notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.common.tower_trigger tower_trigger = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tower_trigger:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_tower_trigger()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_tower_trigger;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void eg_tower_trigger_notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto.common.tower_trigger tower_trigger = 1;
  for (int i = 0; i < this->tower_trigger_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->tower_trigger(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* eg_tower_trigger_notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto.common.tower_trigger tower_trigger = 1;
  for (int i = 0; i < this->tower_trigger_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->tower_trigger(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int eg_tower_trigger_notify::ByteSize() const {
  int total_size = 0;

  // repeated .proto.common.tower_trigger tower_trigger = 1;
  total_size += 1 * this->tower_trigger_size();
  for (int i = 0; i < this->tower_trigger_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->tower_trigger(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void eg_tower_trigger_notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const eg_tower_trigger_notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const eg_tower_trigger_notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void eg_tower_trigger_notify::MergeFrom(const eg_tower_trigger_notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  tower_trigger_.MergeFrom(from.tower_trigger_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void eg_tower_trigger_notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void eg_tower_trigger_notify::CopyFrom(const eg_tower_trigger_notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool eg_tower_trigger_notify::IsInitialized() const {

  return true;
}

void eg_tower_trigger_notify::Swap(eg_tower_trigger_notify* other) {
  if (other != this) {
    tower_trigger_.Swap(&other->tower_trigger_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata eg_tower_trigger_notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = eg_tower_trigger_notify_descriptor_;
  metadata.reflection = eg_tower_trigger_notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int eg_two_side_friend_notify::kFriendUidFieldNumber;
#endif  // !_MSC_VER

eg_two_side_friend_notify::eg_two_side_friend_notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void eg_two_side_friend_notify::InitAsDefaultInstance() {
}

eg_two_side_friend_notify::eg_two_side_friend_notify(const eg_two_side_friend_notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void eg_two_side_friend_notify::SharedCtor() {
  _cached_size_ = 0;
  friend_uid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

eg_two_side_friend_notify::~eg_two_side_friend_notify() {
  SharedDtor();
}

void eg_two_side_friend_notify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void eg_two_side_friend_notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* eg_two_side_friend_notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return eg_two_side_friend_notify_descriptor_;
}

const eg_two_side_friend_notify& eg_two_side_friend_notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

eg_two_side_friend_notify* eg_two_side_friend_notify::default_instance_ = NULL;

eg_two_side_friend_notify* eg_two_side_friend_notify::New() const {
  return new eg_two_side_friend_notify;
}

void eg_two_side_friend_notify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    friend_uid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool eg_two_side_friend_notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 friend_uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &friend_uid_)));
          set_has_friend_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void eg_two_side_friend_notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 friend_uid = 1;
  if (has_friend_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->friend_uid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* eg_two_side_friend_notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 friend_uid = 1;
  if (has_friend_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->friend_uid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int eg_two_side_friend_notify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 friend_uid = 1;
    if (has_friend_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->friend_uid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void eg_two_side_friend_notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const eg_two_side_friend_notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const eg_two_side_friend_notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void eg_two_side_friend_notify::MergeFrom(const eg_two_side_friend_notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_friend_uid()) {
      set_friend_uid(from.friend_uid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void eg_two_side_friend_notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void eg_two_side_friend_notify::CopyFrom(const eg_two_side_friend_notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool eg_two_side_friend_notify::IsInitialized() const {

  return true;
}

void eg_two_side_friend_notify::Swap(eg_two_side_friend_notify* other) {
  if (other != this) {
    std::swap(friend_uid_, other->friend_uid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata eg_two_side_friend_notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = eg_two_side_friend_notify_descriptor_;
  metadata.reflection = eg_two_side_friend_notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ge_check_sys_notice_request::kSysNoticeListFieldNumber;
#endif  // !_MSC_VER

ge_check_sys_notice_request::ge_check_sys_notice_request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ge_check_sys_notice_request::InitAsDefaultInstance() {
  sys_notice_list_ = const_cast< ::proto::common::sys_notity_data*>(&::proto::common::sys_notity_data::default_instance());
}

ge_check_sys_notice_request::ge_check_sys_notice_request(const ge_check_sys_notice_request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ge_check_sys_notice_request::SharedCtor() {
  _cached_size_ = 0;
  sys_notice_list_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ge_check_sys_notice_request::~ge_check_sys_notice_request() {
  SharedDtor();
}

void ge_check_sys_notice_request::SharedDtor() {
  if (this != default_instance_) {
    delete sys_notice_list_;
  }
}

void ge_check_sys_notice_request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ge_check_sys_notice_request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ge_check_sys_notice_request_descriptor_;
}

const ge_check_sys_notice_request& ge_check_sys_notice_request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

ge_check_sys_notice_request* ge_check_sys_notice_request::default_instance_ = NULL;

ge_check_sys_notice_request* ge_check_sys_notice_request::New() const {
  return new ge_check_sys_notice_request;
}

void ge_check_sys_notice_request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_sys_notice_list()) {
      if (sys_notice_list_ != NULL) sys_notice_list_->::proto::common::sys_notity_data::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ge_check_sys_notice_request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.common.sys_notity_data sys_notice_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sys_notice_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ge_check_sys_notice_request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .proto.common.sys_notity_data sys_notice_list = 1;
  if (has_sys_notice_list()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->sys_notice_list(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ge_check_sys_notice_request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .proto.common.sys_notity_data sys_notice_list = 1;
  if (has_sys_notice_list()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->sys_notice_list(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ge_check_sys_notice_request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .proto.common.sys_notity_data sys_notice_list = 1;
    if (has_sys_notice_list()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sys_notice_list());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ge_check_sys_notice_request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ge_check_sys_notice_request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ge_check_sys_notice_request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ge_check_sys_notice_request::MergeFrom(const ge_check_sys_notice_request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sys_notice_list()) {
      mutable_sys_notice_list()->::proto::common::sys_notity_data::MergeFrom(from.sys_notice_list());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ge_check_sys_notice_request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ge_check_sys_notice_request::CopyFrom(const ge_check_sys_notice_request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ge_check_sys_notice_request::IsInitialized() const {

  return true;
}

void ge_check_sys_notice_request::Swap(ge_check_sys_notice_request* other) {
  if (other != this) {
    std::swap(sys_notice_list_, other->sys_notice_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ge_check_sys_notice_request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ge_check_sys_notice_request_descriptor_;
  metadata.reflection = ge_check_sys_notice_request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int eg_check_sys_notice_reply::kSysNoticeListFieldNumber;
#endif  // !_MSC_VER

eg_check_sys_notice_reply::eg_check_sys_notice_reply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void eg_check_sys_notice_reply::InitAsDefaultInstance() {
  sys_notice_list_ = const_cast< ::proto::common::sys_notity_data*>(&::proto::common::sys_notity_data::default_instance());
}

eg_check_sys_notice_reply::eg_check_sys_notice_reply(const eg_check_sys_notice_reply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void eg_check_sys_notice_reply::SharedCtor() {
  _cached_size_ = 0;
  sys_notice_list_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

eg_check_sys_notice_reply::~eg_check_sys_notice_reply() {
  SharedDtor();
}

void eg_check_sys_notice_reply::SharedDtor() {
  if (this != default_instance_) {
    delete sys_notice_list_;
  }
}

void eg_check_sys_notice_reply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* eg_check_sys_notice_reply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return eg_check_sys_notice_reply_descriptor_;
}

const eg_check_sys_notice_reply& eg_check_sys_notice_reply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

eg_check_sys_notice_reply* eg_check_sys_notice_reply::default_instance_ = NULL;

eg_check_sys_notice_reply* eg_check_sys_notice_reply::New() const {
  return new eg_check_sys_notice_reply;
}

void eg_check_sys_notice_reply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_sys_notice_list()) {
      if (sys_notice_list_ != NULL) sys_notice_list_->::proto::common::sys_notity_data::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool eg_check_sys_notice_reply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.common.sys_notity_data sys_notice_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sys_notice_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void eg_check_sys_notice_reply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .proto.common.sys_notity_data sys_notice_list = 1;
  if (has_sys_notice_list()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->sys_notice_list(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* eg_check_sys_notice_reply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .proto.common.sys_notity_data sys_notice_list = 1;
  if (has_sys_notice_list()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->sys_notice_list(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int eg_check_sys_notice_reply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .proto.common.sys_notity_data sys_notice_list = 1;
    if (has_sys_notice_list()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sys_notice_list());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void eg_check_sys_notice_reply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const eg_check_sys_notice_reply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const eg_check_sys_notice_reply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void eg_check_sys_notice_reply::MergeFrom(const eg_check_sys_notice_reply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sys_notice_list()) {
      mutable_sys_notice_list()->::proto::common::sys_notity_data::MergeFrom(from.sys_notice_list());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void eg_check_sys_notice_reply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void eg_check_sys_notice_reply::CopyFrom(const eg_check_sys_notice_reply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool eg_check_sys_notice_reply::IsInitialized() const {

  return true;
}

void eg_check_sys_notice_reply::Swap(eg_check_sys_notice_reply* other) {
  if (other != this) {
    std::swap(sys_notice_list_, other->sys_notice_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata eg_check_sys_notice_reply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = eg_check_sys_notice_reply_descriptor_;
  metadata.reflection = eg_check_sys_notice_reply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int eg_syn_sys_notice_notify::kSysNoticeListFieldNumber;
#endif  // !_MSC_VER

eg_syn_sys_notice_notify::eg_syn_sys_notice_notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void eg_syn_sys_notice_notify::InitAsDefaultInstance() {
  sys_notice_list_ = const_cast< ::proto::common::sys_notity_data*>(&::proto::common::sys_notity_data::default_instance());
}

eg_syn_sys_notice_notify::eg_syn_sys_notice_notify(const eg_syn_sys_notice_notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void eg_syn_sys_notice_notify::SharedCtor() {
  _cached_size_ = 0;
  sys_notice_list_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

eg_syn_sys_notice_notify::~eg_syn_sys_notice_notify() {
  SharedDtor();
}

void eg_syn_sys_notice_notify::SharedDtor() {
  if (this != default_instance_) {
    delete sys_notice_list_;
  }
}

void eg_syn_sys_notice_notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* eg_syn_sys_notice_notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return eg_syn_sys_notice_notify_descriptor_;
}

const eg_syn_sys_notice_notify& eg_syn_sys_notice_notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

eg_syn_sys_notice_notify* eg_syn_sys_notice_notify::default_instance_ = NULL;

eg_syn_sys_notice_notify* eg_syn_sys_notice_notify::New() const {
  return new eg_syn_sys_notice_notify;
}

void eg_syn_sys_notice_notify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_sys_notice_list()) {
      if (sys_notice_list_ != NULL) sys_notice_list_->::proto::common::sys_notity_data::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool eg_syn_sys_notice_notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.common.sys_notity_data sys_notice_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sys_notice_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void eg_syn_sys_notice_notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .proto.common.sys_notity_data sys_notice_list = 1;
  if (has_sys_notice_list()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->sys_notice_list(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* eg_syn_sys_notice_notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .proto.common.sys_notity_data sys_notice_list = 1;
  if (has_sys_notice_list()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->sys_notice_list(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int eg_syn_sys_notice_notify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .proto.common.sys_notity_data sys_notice_list = 1;
    if (has_sys_notice_list()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sys_notice_list());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void eg_syn_sys_notice_notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const eg_syn_sys_notice_notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const eg_syn_sys_notice_notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void eg_syn_sys_notice_notify::MergeFrom(const eg_syn_sys_notice_notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sys_notice_list()) {
      mutable_sys_notice_list()->::proto::common::sys_notity_data::MergeFrom(from.sys_notice_list());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void eg_syn_sys_notice_notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void eg_syn_sys_notice_notify::CopyFrom(const eg_syn_sys_notice_notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool eg_syn_sys_notice_notify::IsInitialized() const {

  return true;
}

void eg_syn_sys_notice_notify::Swap(eg_syn_sys_notice_notify* other) {
  if (other != this) {
    std::swap(sys_notice_list_, other->sys_notice_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata eg_syn_sys_notice_notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = eg_syn_sys_notice_notify_descriptor_;
  metadata.reflection = eg_syn_sys_notice_notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

ge_gm_clear_notice_request::ge_gm_clear_notice_request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ge_gm_clear_notice_request::InitAsDefaultInstance() {
}

ge_gm_clear_notice_request::ge_gm_clear_notice_request(const ge_gm_clear_notice_request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ge_gm_clear_notice_request::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ge_gm_clear_notice_request::~ge_gm_clear_notice_request() {
  SharedDtor();
}

void ge_gm_clear_notice_request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ge_gm_clear_notice_request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ge_gm_clear_notice_request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ge_gm_clear_notice_request_descriptor_;
}

const ge_gm_clear_notice_request& ge_gm_clear_notice_request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

ge_gm_clear_notice_request* ge_gm_clear_notice_request::default_instance_ = NULL;

ge_gm_clear_notice_request* ge_gm_clear_notice_request::New() const {
  return new ge_gm_clear_notice_request;
}

void ge_gm_clear_notice_request::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ge_gm_clear_notice_request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void ge_gm_clear_notice_request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ge_gm_clear_notice_request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ge_gm_clear_notice_request::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ge_gm_clear_notice_request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ge_gm_clear_notice_request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ge_gm_clear_notice_request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ge_gm_clear_notice_request::MergeFrom(const ge_gm_clear_notice_request& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ge_gm_clear_notice_request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ge_gm_clear_notice_request::CopyFrom(const ge_gm_clear_notice_request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ge_gm_clear_notice_request::IsInitialized() const {

  return true;
}

void ge_gm_clear_notice_request::Swap(ge_gm_clear_notice_request* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ge_gm_clear_notice_request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ge_gm_clear_notice_request_descriptor_;
  metadata.reflection = ge_gm_clear_notice_request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

eg_gm_clear_notice_notify::eg_gm_clear_notice_notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void eg_gm_clear_notice_notify::InitAsDefaultInstance() {
}

eg_gm_clear_notice_notify::eg_gm_clear_notice_notify(const eg_gm_clear_notice_notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void eg_gm_clear_notice_notify::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

eg_gm_clear_notice_notify::~eg_gm_clear_notice_notify() {
  SharedDtor();
}

void eg_gm_clear_notice_notify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void eg_gm_clear_notice_notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* eg_gm_clear_notice_notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return eg_gm_clear_notice_notify_descriptor_;
}

const eg_gm_clear_notice_notify& eg_gm_clear_notice_notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

eg_gm_clear_notice_notify* eg_gm_clear_notice_notify::default_instance_ = NULL;

eg_gm_clear_notice_notify* eg_gm_clear_notice_notify::New() const {
  return new eg_gm_clear_notice_notify;
}

void eg_gm_clear_notice_notify::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool eg_gm_clear_notice_notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void eg_gm_clear_notice_notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* eg_gm_clear_notice_notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int eg_gm_clear_notice_notify::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void eg_gm_clear_notice_notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const eg_gm_clear_notice_notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const eg_gm_clear_notice_notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void eg_gm_clear_notice_notify::MergeFrom(const eg_gm_clear_notice_notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void eg_gm_clear_notice_notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void eg_gm_clear_notice_notify::CopyFrom(const eg_gm_clear_notice_notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool eg_gm_clear_notice_notify::IsInitialized() const {

  return true;
}

void eg_gm_clear_notice_notify::Swap(eg_gm_clear_notice_notify* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata eg_gm_clear_notice_notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = eg_gm_clear_notice_notify_descriptor_;
  metadata.reflection = eg_gm_clear_notice_notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ge_role_simple_data_notify::kTypeFieldNumber;
const int ge_role_simple_data_notify::kSimpleDataFieldNumber;
#endif  // !_MSC_VER

ge_role_simple_data_notify::ge_role_simple_data_notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ge_role_simple_data_notify::InitAsDefaultInstance() {
  simple_data_ = const_cast< ::proto::common::role_blob_data*>(&::proto::common::role_blob_data::default_instance());
}

ge_role_simple_data_notify::ge_role_simple_data_notify(const ge_role_simple_data_notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ge_role_simple_data_notify::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  simple_data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ge_role_simple_data_notify::~ge_role_simple_data_notify() {
  SharedDtor();
}

void ge_role_simple_data_notify::SharedDtor() {
  if (this != default_instance_) {
    delete simple_data_;
  }
}

void ge_role_simple_data_notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ge_role_simple_data_notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ge_role_simple_data_notify_descriptor_;
}

const ge_role_simple_data_notify& ge_role_simple_data_notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

ge_role_simple_data_notify* ge_role_simple_data_notify::default_instance_ = NULL;

ge_role_simple_data_notify* ge_role_simple_data_notify::New() const {
  return new ge_role_simple_data_notify;
}

void ge_role_simple_data_notify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 1;
    if (has_simple_data()) {
      if (simple_data_ != NULL) simple_data_->::proto::common::role_blob_data::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ge_role_simple_data_notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.common.role_data_type type = 1 [default = simple_info_type];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::common::role_data_type_IsValid(value)) {
            set_type(static_cast< ::proto::common::role_data_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_simple_data;
        break;
      }

      // optional .proto.common.role_blob_data simple_data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_simple_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_simple_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ge_role_simple_data_notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .proto.common.role_data_type type = 1 [default = simple_info_type];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional .proto.common.role_blob_data simple_data = 2;
  if (has_simple_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->simple_data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ge_role_simple_data_notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .proto.common.role_data_type type = 1 [default = simple_info_type];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional .proto.common.role_blob_data simple_data = 2;
  if (has_simple_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->simple_data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ge_role_simple_data_notify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .proto.common.role_data_type type = 1 [default = simple_info_type];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .proto.common.role_blob_data simple_data = 2;
    if (has_simple_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->simple_data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ge_role_simple_data_notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ge_role_simple_data_notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ge_role_simple_data_notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ge_role_simple_data_notify::MergeFrom(const ge_role_simple_data_notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_simple_data()) {
      mutable_simple_data()->::proto::common::role_blob_data::MergeFrom(from.simple_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ge_role_simple_data_notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ge_role_simple_data_notify::CopyFrom(const ge_role_simple_data_notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ge_role_simple_data_notify::IsInitialized() const {

  return true;
}

void ge_role_simple_data_notify::Swap(ge_role_simple_data_notify* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(simple_data_, other->simple_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ge_role_simple_data_notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ge_role_simple_data_notify_descriptor_;
  metadata.reflection = ge_role_simple_data_notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

eg_offline_arena_join_notify::eg_offline_arena_join_notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void eg_offline_arena_join_notify::InitAsDefaultInstance() {
}

eg_offline_arena_join_notify::eg_offline_arena_join_notify(const eg_offline_arena_join_notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void eg_offline_arena_join_notify::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

eg_offline_arena_join_notify::~eg_offline_arena_join_notify() {
  SharedDtor();
}

void eg_offline_arena_join_notify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void eg_offline_arena_join_notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* eg_offline_arena_join_notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return eg_offline_arena_join_notify_descriptor_;
}

const eg_offline_arena_join_notify& eg_offline_arena_join_notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

eg_offline_arena_join_notify* eg_offline_arena_join_notify::default_instance_ = NULL;

eg_offline_arena_join_notify* eg_offline_arena_join_notify::New() const {
  return new eg_offline_arena_join_notify;
}

void eg_offline_arena_join_notify::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool eg_offline_arena_join_notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void eg_offline_arena_join_notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* eg_offline_arena_join_notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int eg_offline_arena_join_notify::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void eg_offline_arena_join_notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const eg_offline_arena_join_notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const eg_offline_arena_join_notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void eg_offline_arena_join_notify::MergeFrom(const eg_offline_arena_join_notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void eg_offline_arena_join_notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void eg_offline_arena_join_notify::CopyFrom(const eg_offline_arena_join_notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool eg_offline_arena_join_notify::IsInitialized() const {

  return true;
}

void eg_offline_arena_join_notify::Swap(eg_offline_arena_join_notify* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata eg_offline_arena_join_notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = eg_offline_arena_join_notify_descriptor_;
  metadata.reflection = eg_offline_arena_join_notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ge_offline_arena_form_notify::kFormDataFieldNumber;
#endif  // !_MSC_VER

ge_offline_arena_form_notify::ge_offline_arena_form_notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ge_offline_arena_form_notify::InitAsDefaultInstance() {
  form_data_ = const_cast< ::proto::common::mirror_fight_data*>(&::proto::common::mirror_fight_data::default_instance());
}

ge_offline_arena_form_notify::ge_offline_arena_form_notify(const ge_offline_arena_form_notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ge_offline_arena_form_notify::SharedCtor() {
  _cached_size_ = 0;
  form_data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ge_offline_arena_form_notify::~ge_offline_arena_form_notify() {
  SharedDtor();
}

void ge_offline_arena_form_notify::SharedDtor() {
  if (this != default_instance_) {
    delete form_data_;
  }
}

void ge_offline_arena_form_notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ge_offline_arena_form_notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ge_offline_arena_form_notify_descriptor_;
}

const ge_offline_arena_form_notify& ge_offline_arena_form_notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

ge_offline_arena_form_notify* ge_offline_arena_form_notify::default_instance_ = NULL;

ge_offline_arena_form_notify* ge_offline_arena_form_notify::New() const {
  return new ge_offline_arena_form_notify;
}

void ge_offline_arena_form_notify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_form_data()) {
      if (form_data_ != NULL) form_data_->::proto::common::mirror_fight_data::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ge_offline_arena_form_notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.common.mirror_fight_data form_data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_form_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ge_offline_arena_form_notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .proto.common.mirror_fight_data form_data = 1;
  if (has_form_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->form_data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ge_offline_arena_form_notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .proto.common.mirror_fight_data form_data = 1;
  if (has_form_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->form_data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ge_offline_arena_form_notify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .proto.common.mirror_fight_data form_data = 1;
    if (has_form_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->form_data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ge_offline_arena_form_notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ge_offline_arena_form_notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ge_offline_arena_form_notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ge_offline_arena_form_notify::MergeFrom(const ge_offline_arena_form_notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_form_data()) {
      mutable_form_data()->::proto::common::mirror_fight_data::MergeFrom(from.form_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ge_offline_arena_form_notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ge_offline_arena_form_notify::CopyFrom(const ge_offline_arena_form_notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ge_offline_arena_form_notify::IsInitialized() const {

  return true;
}

void ge_offline_arena_form_notify::Swap(ge_offline_arena_form_notify* other) {
  if (other != this) {
    std::swap(form_data_, other->form_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ge_offline_arena_form_notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ge_offline_arena_form_notify_descriptor_;
  metadata.reflection = ge_offline_arena_form_notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int eg_offline_arena_fight_request::kEnemyDataFieldNumber;
const int eg_offline_arena_fight_request::kOfflineArenaClassFieldNumber;
#endif  // !_MSC_VER

eg_offline_arena_fight_request::eg_offline_arena_fight_request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void eg_offline_arena_fight_request::InitAsDefaultInstance() {
  enemy_data_ = const_cast< ::proto::common::mirror_fight_data*>(&::proto::common::mirror_fight_data::default_instance());
}

eg_offline_arena_fight_request::eg_offline_arena_fight_request(const eg_offline_arena_fight_request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void eg_offline_arena_fight_request::SharedCtor() {
  _cached_size_ = 0;
  enemy_data_ = NULL;
  offline_arena_class_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

eg_offline_arena_fight_request::~eg_offline_arena_fight_request() {
  SharedDtor();
}

void eg_offline_arena_fight_request::SharedDtor() {
  if (this != default_instance_) {
    delete enemy_data_;
  }
}

void eg_offline_arena_fight_request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* eg_offline_arena_fight_request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return eg_offline_arena_fight_request_descriptor_;
}

const eg_offline_arena_fight_request& eg_offline_arena_fight_request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

eg_offline_arena_fight_request* eg_offline_arena_fight_request::default_instance_ = NULL;

eg_offline_arena_fight_request* eg_offline_arena_fight_request::New() const {
  return new eg_offline_arena_fight_request;
}

void eg_offline_arena_fight_request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_enemy_data()) {
      if (enemy_data_ != NULL) enemy_data_->::proto::common::mirror_fight_data::Clear();
    }
    offline_arena_class_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool eg_offline_arena_fight_request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.common.mirror_fight_data enemy_data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_enemy_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_offline_arena_class;
        break;
      }

      // optional uint32 offline_arena_class = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_offline_arena_class:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &offline_arena_class_)));
          set_has_offline_arena_class();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void eg_offline_arena_fight_request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .proto.common.mirror_fight_data enemy_data = 1;
  if (has_enemy_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->enemy_data(), output);
  }

  // optional uint32 offline_arena_class = 2;
  if (has_offline_arena_class()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->offline_arena_class(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* eg_offline_arena_fight_request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .proto.common.mirror_fight_data enemy_data = 1;
  if (has_enemy_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->enemy_data(), target);
  }

  // optional uint32 offline_arena_class = 2;
  if (has_offline_arena_class()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->offline_arena_class(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int eg_offline_arena_fight_request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .proto.common.mirror_fight_data enemy_data = 1;
    if (has_enemy_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->enemy_data());
    }

    // optional uint32 offline_arena_class = 2;
    if (has_offline_arena_class()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->offline_arena_class());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void eg_offline_arena_fight_request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const eg_offline_arena_fight_request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const eg_offline_arena_fight_request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void eg_offline_arena_fight_request::MergeFrom(const eg_offline_arena_fight_request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_enemy_data()) {
      mutable_enemy_data()->::proto::common::mirror_fight_data::MergeFrom(from.enemy_data());
    }
    if (from.has_offline_arena_class()) {
      set_offline_arena_class(from.offline_arena_class());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void eg_offline_arena_fight_request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void eg_offline_arena_fight_request::CopyFrom(const eg_offline_arena_fight_request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool eg_offline_arena_fight_request::IsInitialized() const {

  return true;
}

void eg_offline_arena_fight_request::Swap(eg_offline_arena_fight_request* other) {
  if (other != this) {
    std::swap(enemy_data_, other->enemy_data_);
    std::swap(offline_arena_class_, other->offline_arena_class_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata eg_offline_arena_fight_request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = eg_offline_arena_fight_request_descriptor_;
  metadata.reflection = eg_offline_arena_fight_request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ge_offline_arena_fight_reply::kIsWinFieldNumber;
#endif  // !_MSC_VER

ge_offline_arena_fight_reply::ge_offline_arena_fight_reply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ge_offline_arena_fight_reply::InitAsDefaultInstance() {
}

ge_offline_arena_fight_reply::ge_offline_arena_fight_reply(const ge_offline_arena_fight_reply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ge_offline_arena_fight_reply::SharedCtor() {
  _cached_size_ = 0;
  is_win_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ge_offline_arena_fight_reply::~ge_offline_arena_fight_reply() {
  SharedDtor();
}

void ge_offline_arena_fight_reply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ge_offline_arena_fight_reply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ge_offline_arena_fight_reply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ge_offline_arena_fight_reply_descriptor_;
}

const ge_offline_arena_fight_reply& ge_offline_arena_fight_reply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

ge_offline_arena_fight_reply* ge_offline_arena_fight_reply::default_instance_ = NULL;

ge_offline_arena_fight_reply* ge_offline_arena_fight_reply::New() const {
  return new ge_offline_arena_fight_reply;
}

void ge_offline_arena_fight_reply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    is_win_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ge_offline_arena_fight_reply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 is_win = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &is_win_)));
          set_has_is_win();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ge_offline_arena_fight_reply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 is_win = 1;
  if (has_is_win()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->is_win(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ge_offline_arena_fight_reply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 is_win = 1;
  if (has_is_win()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->is_win(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ge_offline_arena_fight_reply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 is_win = 1;
    if (has_is_win()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->is_win());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ge_offline_arena_fight_reply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ge_offline_arena_fight_reply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ge_offline_arena_fight_reply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ge_offline_arena_fight_reply::MergeFrom(const ge_offline_arena_fight_reply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_is_win()) {
      set_is_win(from.is_win());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ge_offline_arena_fight_reply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ge_offline_arena_fight_reply::CopyFrom(const ge_offline_arena_fight_reply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ge_offline_arena_fight_reply::IsInitialized() const {

  return true;
}

void ge_offline_arena_fight_reply::Swap(ge_offline_arena_fight_reply* other) {
  if (other != this) {
    std::swap(is_win_, other->is_win_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ge_offline_arena_fight_reply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ge_offline_arena_fight_reply_descriptor_;
  metadata.reflection = ge_offline_arena_fight_reply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int eg_offline_arena_record_award_notify::kItemListFieldNumber;
#endif  // !_MSC_VER

eg_offline_arena_record_award_notify::eg_offline_arena_record_award_notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void eg_offline_arena_record_award_notify::InitAsDefaultInstance() {
}

eg_offline_arena_record_award_notify::eg_offline_arena_record_award_notify(const eg_offline_arena_record_award_notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void eg_offline_arena_record_award_notify::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

eg_offline_arena_record_award_notify::~eg_offline_arena_record_award_notify() {
  SharedDtor();
}

void eg_offline_arena_record_award_notify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void eg_offline_arena_record_award_notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* eg_offline_arena_record_award_notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return eg_offline_arena_record_award_notify_descriptor_;
}

const eg_offline_arena_record_award_notify& eg_offline_arena_record_award_notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

eg_offline_arena_record_award_notify* eg_offline_arena_record_award_notify::default_instance_ = NULL;

eg_offline_arena_record_award_notify* eg_offline_arena_record_award_notify::New() const {
  return new eg_offline_arena_record_award_notify;
}

void eg_offline_arena_record_award_notify::Clear() {
  item_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool eg_offline_arena_record_award_notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.common.mail_item_obj item_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_item_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void eg_offline_arena_record_award_notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto.common.mail_item_obj item_list = 1;
  for (int i = 0; i < this->item_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->item_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* eg_offline_arena_record_award_notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto.common.mail_item_obj item_list = 1;
  for (int i = 0; i < this->item_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->item_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int eg_offline_arena_record_award_notify::ByteSize() const {
  int total_size = 0;

  // repeated .proto.common.mail_item_obj item_list = 1;
  total_size += 1 * this->item_list_size();
  for (int i = 0; i < this->item_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void eg_offline_arena_record_award_notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const eg_offline_arena_record_award_notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const eg_offline_arena_record_award_notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void eg_offline_arena_record_award_notify::MergeFrom(const eg_offline_arena_record_award_notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_list_.MergeFrom(from.item_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void eg_offline_arena_record_award_notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void eg_offline_arena_record_award_notify::CopyFrom(const eg_offline_arena_record_award_notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool eg_offline_arena_record_award_notify::IsInitialized() const {

  return true;
}

void eg_offline_arena_record_award_notify::Swap(eg_offline_arena_record_award_notify* other) {
  if (other != this) {
    item_list_.Swap(&other->item_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata eg_offline_arena_record_award_notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = eg_offline_arena_record_award_notify_descriptor_;
  metadata.reflection = eg_offline_arena_record_award_notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int eg_offline_arena_score_award_notify::kDropIdFieldNumber;
#endif  // !_MSC_VER

eg_offline_arena_score_award_notify::eg_offline_arena_score_award_notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void eg_offline_arena_score_award_notify::InitAsDefaultInstance() {
}

eg_offline_arena_score_award_notify::eg_offline_arena_score_award_notify(const eg_offline_arena_score_award_notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void eg_offline_arena_score_award_notify::SharedCtor() {
  _cached_size_ = 0;
  drop_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

eg_offline_arena_score_award_notify::~eg_offline_arena_score_award_notify() {
  SharedDtor();
}

void eg_offline_arena_score_award_notify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void eg_offline_arena_score_award_notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* eg_offline_arena_score_award_notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return eg_offline_arena_score_award_notify_descriptor_;
}

const eg_offline_arena_score_award_notify& eg_offline_arena_score_award_notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

eg_offline_arena_score_award_notify* eg_offline_arena_score_award_notify::default_instance_ = NULL;

eg_offline_arena_score_award_notify* eg_offline_arena_score_award_notify::New() const {
  return new eg_offline_arena_score_award_notify;
}

void eg_offline_arena_score_award_notify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    drop_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool eg_offline_arena_score_award_notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 drop_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &drop_id_)));
          set_has_drop_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void eg_offline_arena_score_award_notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 drop_id = 1;
  if (has_drop_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->drop_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* eg_offline_arena_score_award_notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 drop_id = 1;
  if (has_drop_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->drop_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int eg_offline_arena_score_award_notify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 drop_id = 1;
    if (has_drop_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->drop_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void eg_offline_arena_score_award_notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const eg_offline_arena_score_award_notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const eg_offline_arena_score_award_notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void eg_offline_arena_score_award_notify::MergeFrom(const eg_offline_arena_score_award_notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_drop_id()) {
      set_drop_id(from.drop_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void eg_offline_arena_score_award_notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void eg_offline_arena_score_award_notify::CopyFrom(const eg_offline_arena_score_award_notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool eg_offline_arena_score_award_notify::IsInitialized() const {

  return true;
}

void eg_offline_arena_score_award_notify::Swap(eg_offline_arena_score_award_notify* other) {
  if (other != this) {
    std::swap(drop_id_, other->drop_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata eg_offline_arena_score_award_notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = eg_offline_arena_score_award_notify_descriptor_;
  metadata.reflection = eg_offline_arena_score_award_notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int eg_offline_arena_sweep_award_notify::kDropIdFieldNumber;
const int eg_offline_arena_sweep_award_notify::kCountFieldNumber;
#endif  // !_MSC_VER

eg_offline_arena_sweep_award_notify::eg_offline_arena_sweep_award_notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void eg_offline_arena_sweep_award_notify::InitAsDefaultInstance() {
}

eg_offline_arena_sweep_award_notify::eg_offline_arena_sweep_award_notify(const eg_offline_arena_sweep_award_notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void eg_offline_arena_sweep_award_notify::SharedCtor() {
  _cached_size_ = 0;
  drop_id_ = 0u;
  count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

eg_offline_arena_sweep_award_notify::~eg_offline_arena_sweep_award_notify() {
  SharedDtor();
}

void eg_offline_arena_sweep_award_notify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void eg_offline_arena_sweep_award_notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* eg_offline_arena_sweep_award_notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return eg_offline_arena_sweep_award_notify_descriptor_;
}

const eg_offline_arena_sweep_award_notify& eg_offline_arena_sweep_award_notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

eg_offline_arena_sweep_award_notify* eg_offline_arena_sweep_award_notify::default_instance_ = NULL;

eg_offline_arena_sweep_award_notify* eg_offline_arena_sweep_award_notify::New() const {
  return new eg_offline_arena_sweep_award_notify;
}

void eg_offline_arena_sweep_award_notify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    drop_id_ = 0u;
    count_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool eg_offline_arena_sweep_award_notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 drop_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &drop_id_)));
          set_has_drop_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }

      // optional uint32 count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void eg_offline_arena_sweep_award_notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 drop_id = 1;
  if (has_drop_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->drop_id(), output);
  }

  // optional uint32 count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* eg_offline_arena_sweep_award_notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 drop_id = 1;
  if (has_drop_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->drop_id(), target);
  }

  // optional uint32 count = 2;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int eg_offline_arena_sweep_award_notify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 drop_id = 1;
    if (has_drop_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->drop_id());
    }

    // optional uint32 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void eg_offline_arena_sweep_award_notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const eg_offline_arena_sweep_award_notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const eg_offline_arena_sweep_award_notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void eg_offline_arena_sweep_award_notify::MergeFrom(const eg_offline_arena_sweep_award_notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_drop_id()) {
      set_drop_id(from.drop_id());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void eg_offline_arena_sweep_award_notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void eg_offline_arena_sweep_award_notify::CopyFrom(const eg_offline_arena_sweep_award_notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool eg_offline_arena_sweep_award_notify::IsInitialized() const {

  return true;
}

void eg_offline_arena_sweep_award_notify::Swap(eg_offline_arena_sweep_award_notify* other) {
  if (other != this) {
    std::swap(drop_id_, other->drop_id_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata eg_offline_arena_sweep_award_notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = eg_offline_arena_sweep_award_notify_descriptor_;
  metadata.reflection = eg_offline_arena_sweep_award_notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int eg_offline_arena_class_award_notify::kDropIdFieldNumber;
const int eg_offline_arena_class_award_notify::kCurClassFieldNumber;
#endif  // !_MSC_VER

eg_offline_arena_class_award_notify::eg_offline_arena_class_award_notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void eg_offline_arena_class_award_notify::InitAsDefaultInstance() {
}

eg_offline_arena_class_award_notify::eg_offline_arena_class_award_notify(const eg_offline_arena_class_award_notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void eg_offline_arena_class_award_notify::SharedCtor() {
  _cached_size_ = 0;
  cur_class_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

eg_offline_arena_class_award_notify::~eg_offline_arena_class_award_notify() {
  SharedDtor();
}

void eg_offline_arena_class_award_notify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void eg_offline_arena_class_award_notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* eg_offline_arena_class_award_notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return eg_offline_arena_class_award_notify_descriptor_;
}

const eg_offline_arena_class_award_notify& eg_offline_arena_class_award_notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

eg_offline_arena_class_award_notify* eg_offline_arena_class_award_notify::default_instance_ = NULL;

eg_offline_arena_class_award_notify* eg_offline_arena_class_award_notify::New() const {
  return new eg_offline_arena_class_award_notify;
}

void eg_offline_arena_class_award_notify::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    cur_class_ = 0u;
  }
  drop_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool eg_offline_arena_class_award_notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 drop_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_drop_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_drop_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_drop_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_drop_id;
        if (input->ExpectTag(16)) goto parse_cur_class;
        break;
      }

      // optional uint32 cur_class = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_class:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cur_class_)));
          set_has_cur_class();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void eg_offline_arena_class_award_notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint32 drop_id = 1;
  for (int i = 0; i < this->drop_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->drop_id(i), output);
  }

  // optional uint32 cur_class = 2;
  if (has_cur_class()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->cur_class(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* eg_offline_arena_class_award_notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 drop_id = 1;
  for (int i = 0; i < this->drop_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->drop_id(i), target);
  }

  // optional uint32 cur_class = 2;
  if (has_cur_class()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->cur_class(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int eg_offline_arena_class_award_notify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 cur_class = 2;
    if (has_cur_class()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cur_class());
    }

  }
  // repeated uint32 drop_id = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->drop_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->drop_id(i));
    }
    total_size += 1 * this->drop_id_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void eg_offline_arena_class_award_notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const eg_offline_arena_class_award_notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const eg_offline_arena_class_award_notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void eg_offline_arena_class_award_notify::MergeFrom(const eg_offline_arena_class_award_notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  drop_id_.MergeFrom(from.drop_id_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_cur_class()) {
      set_cur_class(from.cur_class());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void eg_offline_arena_class_award_notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void eg_offline_arena_class_award_notify::CopyFrom(const eg_offline_arena_class_award_notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool eg_offline_arena_class_award_notify::IsInitialized() const {

  return true;
}

void eg_offline_arena_class_award_notify::Swap(eg_offline_arena_class_award_notify* other) {
  if (other != this) {
    drop_id_.Swap(&other->drop_id_);
    std::swap(cur_class_, other->cur_class_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata eg_offline_arena_class_award_notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = eg_offline_arena_class_award_notify_descriptor_;
  metadata.reflection = eg_offline_arena_class_award_notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ge_offline_arena_buy_request::kMoneyFieldNumber;
#endif  // !_MSC_VER

ge_offline_arena_buy_request::ge_offline_arena_buy_request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ge_offline_arena_buy_request::InitAsDefaultInstance() {
}

ge_offline_arena_buy_request::ge_offline_arena_buy_request(const ge_offline_arena_buy_request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ge_offline_arena_buy_request::SharedCtor() {
  _cached_size_ = 0;
  money_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ge_offline_arena_buy_request::~ge_offline_arena_buy_request() {
  SharedDtor();
}

void ge_offline_arena_buy_request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ge_offline_arena_buy_request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ge_offline_arena_buy_request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ge_offline_arena_buy_request_descriptor_;
}

const ge_offline_arena_buy_request& ge_offline_arena_buy_request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

ge_offline_arena_buy_request* ge_offline_arena_buy_request::default_instance_ = NULL;

ge_offline_arena_buy_request* ge_offline_arena_buy_request::New() const {
  return new ge_offline_arena_buy_request;
}

void ge_offline_arena_buy_request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    money_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ge_offline_arena_buy_request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 money = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &money_)));
          set_has_money();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ge_offline_arena_buy_request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 money = 1;
  if (has_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->money(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ge_offline_arena_buy_request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 money = 1;
  if (has_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->money(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ge_offline_arena_buy_request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 money = 1;
    if (has_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->money());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ge_offline_arena_buy_request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ge_offline_arena_buy_request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ge_offline_arena_buy_request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ge_offline_arena_buy_request::MergeFrom(const ge_offline_arena_buy_request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_money()) {
      set_money(from.money());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ge_offline_arena_buy_request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ge_offline_arena_buy_request::CopyFrom(const ge_offline_arena_buy_request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ge_offline_arena_buy_request::IsInitialized() const {

  return true;
}

void ge_offline_arena_buy_request::Swap(ge_offline_arena_buy_request* other) {
  if (other != this) {
    std::swap(money_, other->money_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ge_offline_arena_buy_request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ge_offline_arena_buy_request_descriptor_;
  metadata.reflection = ge_offline_arena_buy_request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int eg_offline_arena_buy_reply::kReplyCodeFieldNumber;
const int eg_offline_arena_buy_reply::kMoneyFieldNumber;
#endif  // !_MSC_VER

eg_offline_arena_buy_reply::eg_offline_arena_buy_reply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void eg_offline_arena_buy_reply::InitAsDefaultInstance() {
}

eg_offline_arena_buy_reply::eg_offline_arena_buy_reply(const eg_offline_arena_buy_reply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void eg_offline_arena_buy_reply::SharedCtor() {
  _cached_size_ = 0;
  reply_code_ = 0u;
  money_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

eg_offline_arena_buy_reply::~eg_offline_arena_buy_reply() {
  SharedDtor();
}

void eg_offline_arena_buy_reply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void eg_offline_arena_buy_reply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* eg_offline_arena_buy_reply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return eg_offline_arena_buy_reply_descriptor_;
}

const eg_offline_arena_buy_reply& eg_offline_arena_buy_reply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

eg_offline_arena_buy_reply* eg_offline_arena_buy_reply::default_instance_ = NULL;

eg_offline_arena_buy_reply* eg_offline_arena_buy_reply::New() const {
  return new eg_offline_arena_buy_reply;
}

void eg_offline_arena_buy_reply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    reply_code_ = 0u;
    money_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool eg_offline_arena_buy_reply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 reply_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reply_code_)));
          set_has_reply_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_money;
        break;
      }

      // optional uint32 money = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &money_)));
          set_has_money();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void eg_offline_arena_buy_reply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 reply_code = 1;
  if (has_reply_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->reply_code(), output);
  }

  // optional uint32 money = 2;
  if (has_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->money(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* eg_offline_arena_buy_reply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 reply_code = 1;
  if (has_reply_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->reply_code(), target);
  }

  // optional uint32 money = 2;
  if (has_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->money(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int eg_offline_arena_buy_reply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 reply_code = 1;
    if (has_reply_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reply_code());
    }

    // optional uint32 money = 2;
    if (has_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->money());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void eg_offline_arena_buy_reply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const eg_offline_arena_buy_reply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const eg_offline_arena_buy_reply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void eg_offline_arena_buy_reply::MergeFrom(const eg_offline_arena_buy_reply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reply_code()) {
      set_reply_code(from.reply_code());
    }
    if (from.has_money()) {
      set_money(from.money());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void eg_offline_arena_buy_reply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void eg_offline_arena_buy_reply::CopyFrom(const eg_offline_arena_buy_reply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool eg_offline_arena_buy_reply::IsInitialized() const {

  return true;
}

void eg_offline_arena_buy_reply::Swap(eg_offline_arena_buy_reply* other) {
  if (other != this) {
    std::swap(reply_code_, other->reply_code_);
    std::swap(money_, other->money_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata eg_offline_arena_buy_reply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = eg_offline_arena_buy_reply_descriptor_;
  metadata.reflection = eg_offline_arena_buy_reply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ge_offline_arena_gmrank_notify::kRankFieldNumber;
#endif  // !_MSC_VER

ge_offline_arena_gmrank_notify::ge_offline_arena_gmrank_notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ge_offline_arena_gmrank_notify::InitAsDefaultInstance() {
}

ge_offline_arena_gmrank_notify::ge_offline_arena_gmrank_notify(const ge_offline_arena_gmrank_notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ge_offline_arena_gmrank_notify::SharedCtor() {
  _cached_size_ = 0;
  rank_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ge_offline_arena_gmrank_notify::~ge_offline_arena_gmrank_notify() {
  SharedDtor();
}

void ge_offline_arena_gmrank_notify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ge_offline_arena_gmrank_notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ge_offline_arena_gmrank_notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ge_offline_arena_gmrank_notify_descriptor_;
}

const ge_offline_arena_gmrank_notify& ge_offline_arena_gmrank_notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

ge_offline_arena_gmrank_notify* ge_offline_arena_gmrank_notify::default_instance_ = NULL;

ge_offline_arena_gmrank_notify* ge_offline_arena_gmrank_notify::New() const {
  return new ge_offline_arena_gmrank_notify;
}

void ge_offline_arena_gmrank_notify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rank_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ge_offline_arena_gmrank_notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 rank = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ge_offline_arena_gmrank_notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 rank = 1;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->rank(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ge_offline_arena_gmrank_notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 rank = 1;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->rank(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ge_offline_arena_gmrank_notify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 rank = 1;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rank());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ge_offline_arena_gmrank_notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ge_offline_arena_gmrank_notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ge_offline_arena_gmrank_notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ge_offline_arena_gmrank_notify::MergeFrom(const ge_offline_arena_gmrank_notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rank()) {
      set_rank(from.rank());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ge_offline_arena_gmrank_notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ge_offline_arena_gmrank_notify::CopyFrom(const ge_offline_arena_gmrank_notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ge_offline_arena_gmrank_notify::IsInitialized() const {

  return true;
}

void ge_offline_arena_gmrank_notify::Swap(ge_offline_arena_gmrank_notify* other) {
  if (other != this) {
    std::swap(rank_, other->rank_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ge_offline_arena_gmrank_notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ge_offline_arena_gmrank_notify_descriptor_;
  metadata.reflection = ge_offline_arena_gmrank_notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int hr_get_hero_strategy_info_request::kServerIdFieldNumber;
#endif  // !_MSC_VER

hr_get_hero_strategy_info_request::hr_get_hero_strategy_info_request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void hr_get_hero_strategy_info_request::InitAsDefaultInstance() {
}

hr_get_hero_strategy_info_request::hr_get_hero_strategy_info_request(const hr_get_hero_strategy_info_request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void hr_get_hero_strategy_info_request::SharedCtor() {
  _cached_size_ = 0;
  server_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

hr_get_hero_strategy_info_request::~hr_get_hero_strategy_info_request() {
  SharedDtor();
}

void hr_get_hero_strategy_info_request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void hr_get_hero_strategy_info_request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* hr_get_hero_strategy_info_request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return hr_get_hero_strategy_info_request_descriptor_;
}

const hr_get_hero_strategy_info_request& hr_get_hero_strategy_info_request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

hr_get_hero_strategy_info_request* hr_get_hero_strategy_info_request::default_instance_ = NULL;

hr_get_hero_strategy_info_request* hr_get_hero_strategy_info_request::New() const {
  return new hr_get_hero_strategy_info_request;
}

void hr_get_hero_strategy_info_request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    server_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool hr_get_hero_strategy_info_request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 server_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_id_)));
          set_has_server_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void hr_get_hero_strategy_info_request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 server_id = 1;
  if (has_server_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->server_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* hr_get_hero_strategy_info_request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 server_id = 1;
  if (has_server_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->server_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int hr_get_hero_strategy_info_request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 server_id = 1;
    if (has_server_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void hr_get_hero_strategy_info_request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const hr_get_hero_strategy_info_request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const hr_get_hero_strategy_info_request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void hr_get_hero_strategy_info_request::MergeFrom(const hr_get_hero_strategy_info_request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_server_id()) {
      set_server_id(from.server_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void hr_get_hero_strategy_info_request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void hr_get_hero_strategy_info_request::CopyFrom(const hr_get_hero_strategy_info_request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool hr_get_hero_strategy_info_request::IsInitialized() const {

  return true;
}

void hr_get_hero_strategy_info_request::Swap(hr_get_hero_strategy_info_request* other) {
  if (other != this) {
    std::swap(server_id_, other->server_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata hr_get_hero_strategy_info_request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = hr_get_hero_strategy_info_request_descriptor_;
  metadata.reflection = hr_get_hero_strategy_info_request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int rh_get_hero_strategy_info_reply::kServerIdFieldNumber;
const int rh_get_hero_strategy_info_reply::kHeroInfoFieldNumber;
#endif  // !_MSC_VER

rh_get_hero_strategy_info_reply::rh_get_hero_strategy_info_reply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void rh_get_hero_strategy_info_reply::InitAsDefaultInstance() {
}

rh_get_hero_strategy_info_reply::rh_get_hero_strategy_info_reply(const rh_get_hero_strategy_info_reply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void rh_get_hero_strategy_info_reply::SharedCtor() {
  _cached_size_ = 0;
  server_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

rh_get_hero_strategy_info_reply::~rh_get_hero_strategy_info_reply() {
  SharedDtor();
}

void rh_get_hero_strategy_info_reply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void rh_get_hero_strategy_info_reply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* rh_get_hero_strategy_info_reply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return rh_get_hero_strategy_info_reply_descriptor_;
}

const rh_get_hero_strategy_info_reply& rh_get_hero_strategy_info_reply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

rh_get_hero_strategy_info_reply* rh_get_hero_strategy_info_reply::default_instance_ = NULL;

rh_get_hero_strategy_info_reply* rh_get_hero_strategy_info_reply::New() const {
  return new rh_get_hero_strategy_info_reply;
}

void rh_get_hero_strategy_info_reply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    server_id_ = 0u;
  }
  hero_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool rh_get_hero_strategy_info_reply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 server_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_id_)));
          set_has_server_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_hero_info;
        break;
      }

      // repeated .proto.common.hero_strategy_info hero_info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hero_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_hero_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_hero_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void rh_get_hero_strategy_info_reply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 server_id = 1;
  if (has_server_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->server_id(), output);
  }

  // repeated .proto.common.hero_strategy_info hero_info = 2;
  for (int i = 0; i < this->hero_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->hero_info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* rh_get_hero_strategy_info_reply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 server_id = 1;
  if (has_server_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->server_id(), target);
  }

  // repeated .proto.common.hero_strategy_info hero_info = 2;
  for (int i = 0; i < this->hero_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->hero_info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int rh_get_hero_strategy_info_reply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 server_id = 1;
    if (has_server_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_id());
    }

  }
  // repeated .proto.common.hero_strategy_info hero_info = 2;
  total_size += 1 * this->hero_info_size();
  for (int i = 0; i < this->hero_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->hero_info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void rh_get_hero_strategy_info_reply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const rh_get_hero_strategy_info_reply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const rh_get_hero_strategy_info_reply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void rh_get_hero_strategy_info_reply::MergeFrom(const rh_get_hero_strategy_info_reply& from) {
  GOOGLE_CHECK_NE(&from, this);
  hero_info_.MergeFrom(from.hero_info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_server_id()) {
      set_server_id(from.server_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void rh_get_hero_strategy_info_reply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void rh_get_hero_strategy_info_reply::CopyFrom(const rh_get_hero_strategy_info_reply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool rh_get_hero_strategy_info_reply::IsInitialized() const {

  return true;
}

void rh_get_hero_strategy_info_reply::Swap(rh_get_hero_strategy_info_reply* other) {
  if (other != this) {
    std::swap(server_id_, other->server_id_);
    hero_info_.Swap(&other->hero_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata rh_get_hero_strategy_info_reply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = rh_get_hero_strategy_info_reply_descriptor_;
  metadata.reflection = rh_get_hero_strategy_info_reply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ge_troop_sync_task_request::kTroopIdFieldNumber;
const int ge_troop_sync_task_request::kTaskInfoFieldNumber;
#endif  // !_MSC_VER

ge_troop_sync_task_request::ge_troop_sync_task_request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ge_troop_sync_task_request::InitAsDefaultInstance() {
  task_info_ = const_cast< ::proto::common::task_state*>(&::proto::common::task_state::default_instance());
}

ge_troop_sync_task_request::ge_troop_sync_task_request(const ge_troop_sync_task_request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ge_troop_sync_task_request::SharedCtor() {
  _cached_size_ = 0;
  troop_id_ = GOOGLE_ULONGLONG(0);
  task_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ge_troop_sync_task_request::~ge_troop_sync_task_request() {
  SharedDtor();
}

void ge_troop_sync_task_request::SharedDtor() {
  if (this != default_instance_) {
    delete task_info_;
  }
}

void ge_troop_sync_task_request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ge_troop_sync_task_request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ge_troop_sync_task_request_descriptor_;
}

const ge_troop_sync_task_request& ge_troop_sync_task_request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

ge_troop_sync_task_request* ge_troop_sync_task_request::default_instance_ = NULL;

ge_troop_sync_task_request* ge_troop_sync_task_request::New() const {
  return new ge_troop_sync_task_request;
}

void ge_troop_sync_task_request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    troop_id_ = GOOGLE_ULONGLONG(0);
    if (has_task_info()) {
      if (task_info_ != NULL) task_info_->::proto::common::task_state::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ge_troop_sync_task_request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 troop_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &troop_id_)));
          set_has_troop_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_task_info;
        break;
      }

      // optional .proto.common.task_state task_info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_task_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_task_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ge_troop_sync_task_request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 troop_id = 1;
  if (has_troop_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->troop_id(), output);
  }

  // optional .proto.common.task_state task_info = 2;
  if (has_task_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->task_info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ge_troop_sync_task_request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 troop_id = 1;
  if (has_troop_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->troop_id(), target);
  }

  // optional .proto.common.task_state task_info = 2;
  if (has_task_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->task_info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ge_troop_sync_task_request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 troop_id = 1;
    if (has_troop_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->troop_id());
    }

    // optional .proto.common.task_state task_info = 2;
    if (has_task_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->task_info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ge_troop_sync_task_request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ge_troop_sync_task_request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ge_troop_sync_task_request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ge_troop_sync_task_request::MergeFrom(const ge_troop_sync_task_request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_troop_id()) {
      set_troop_id(from.troop_id());
    }
    if (from.has_task_info()) {
      mutable_task_info()->::proto::common::task_state::MergeFrom(from.task_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ge_troop_sync_task_request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ge_troop_sync_task_request::CopyFrom(const ge_troop_sync_task_request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ge_troop_sync_task_request::IsInitialized() const {

  return true;
}

void ge_troop_sync_task_request::Swap(ge_troop_sync_task_request* other) {
  if (other != this) {
    std::swap(troop_id_, other->troop_id_);
    std::swap(task_info_, other->task_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ge_troop_sync_task_request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ge_troop_sync_task_request_descriptor_;
  metadata.reflection = ge_troop_sync_task_request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int eg_buy_wish_summon_request::kSummonIdFieldNumber;
const int eg_buy_wish_summon_request::kReplyCodeFieldNumber;
#endif  // !_MSC_VER

eg_buy_wish_summon_request::eg_buy_wish_summon_request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void eg_buy_wish_summon_request::InitAsDefaultInstance() {
}

eg_buy_wish_summon_request::eg_buy_wish_summon_request(const eg_buy_wish_summon_request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void eg_buy_wish_summon_request::SharedCtor() {
  _cached_size_ = 0;
  summon_id_ = 0u;
  reply_code_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

eg_buy_wish_summon_request::~eg_buy_wish_summon_request() {
  SharedDtor();
}

void eg_buy_wish_summon_request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void eg_buy_wish_summon_request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* eg_buy_wish_summon_request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return eg_buy_wish_summon_request_descriptor_;
}

const eg_buy_wish_summon_request& eg_buy_wish_summon_request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

eg_buy_wish_summon_request* eg_buy_wish_summon_request::default_instance_ = NULL;

eg_buy_wish_summon_request* eg_buy_wish_summon_request::New() const {
  return new eg_buy_wish_summon_request;
}

void eg_buy_wish_summon_request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    summon_id_ = 0u;
    reply_code_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool eg_buy_wish_summon_request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 summon_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &summon_id_)));
          set_has_summon_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_reply_code;
        break;
      }

      // optional uint32 reply_code = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reply_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reply_code_)));
          set_has_reply_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void eg_buy_wish_summon_request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 summon_id = 1;
  if (has_summon_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->summon_id(), output);
  }

  // optional uint32 reply_code = 2;
  if (has_reply_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->reply_code(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* eg_buy_wish_summon_request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 summon_id = 1;
  if (has_summon_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->summon_id(), target);
  }

  // optional uint32 reply_code = 2;
  if (has_reply_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->reply_code(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int eg_buy_wish_summon_request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 summon_id = 1;
    if (has_summon_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->summon_id());
    }

    // optional uint32 reply_code = 2;
    if (has_reply_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reply_code());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void eg_buy_wish_summon_request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const eg_buy_wish_summon_request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const eg_buy_wish_summon_request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void eg_buy_wish_summon_request::MergeFrom(const eg_buy_wish_summon_request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_summon_id()) {
      set_summon_id(from.summon_id());
    }
    if (from.has_reply_code()) {
      set_reply_code(from.reply_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void eg_buy_wish_summon_request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void eg_buy_wish_summon_request::CopyFrom(const eg_buy_wish_summon_request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool eg_buy_wish_summon_request::IsInitialized() const {

  return true;
}

void eg_buy_wish_summon_request::Swap(eg_buy_wish_summon_request* other) {
  if (other != this) {
    std::swap(summon_id_, other->summon_id_);
    std::swap(reply_code_, other->reply_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata eg_buy_wish_summon_request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = eg_buy_wish_summon_request_descriptor_;
  metadata.reflection = eg_buy_wish_summon_request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ge_buy_wish_summon_reply::kSummonIdFieldNumber;
const int ge_buy_wish_summon_reply::kReplyCodeFieldNumber;
#endif  // !_MSC_VER

ge_buy_wish_summon_reply::ge_buy_wish_summon_reply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ge_buy_wish_summon_reply::InitAsDefaultInstance() {
}

ge_buy_wish_summon_reply::ge_buy_wish_summon_reply(const ge_buy_wish_summon_reply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ge_buy_wish_summon_reply::SharedCtor() {
  _cached_size_ = 0;
  summon_id_ = 0u;
  reply_code_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ge_buy_wish_summon_reply::~ge_buy_wish_summon_reply() {
  SharedDtor();
}

void ge_buy_wish_summon_reply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ge_buy_wish_summon_reply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ge_buy_wish_summon_reply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ge_buy_wish_summon_reply_descriptor_;
}

const ge_buy_wish_summon_reply& ge_buy_wish_summon_reply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

ge_buy_wish_summon_reply* ge_buy_wish_summon_reply::default_instance_ = NULL;

ge_buy_wish_summon_reply* ge_buy_wish_summon_reply::New() const {
  return new ge_buy_wish_summon_reply;
}

void ge_buy_wish_summon_reply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    summon_id_ = 0u;
    reply_code_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ge_buy_wish_summon_reply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 summon_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &summon_id_)));
          set_has_summon_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_reply_code;
        break;
      }

      // optional uint32 reply_code = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reply_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reply_code_)));
          set_has_reply_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ge_buy_wish_summon_reply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 summon_id = 1;
  if (has_summon_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->summon_id(), output);
  }

  // optional uint32 reply_code = 2;
  if (has_reply_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->reply_code(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ge_buy_wish_summon_reply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 summon_id = 1;
  if (has_summon_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->summon_id(), target);
  }

  // optional uint32 reply_code = 2;
  if (has_reply_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->reply_code(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ge_buy_wish_summon_reply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 summon_id = 1;
    if (has_summon_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->summon_id());
    }

    // optional uint32 reply_code = 2;
    if (has_reply_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reply_code());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ge_buy_wish_summon_reply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ge_buy_wish_summon_reply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ge_buy_wish_summon_reply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ge_buy_wish_summon_reply::MergeFrom(const ge_buy_wish_summon_reply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_summon_id()) {
      set_summon_id(from.summon_id());
    }
    if (from.has_reply_code()) {
      set_reply_code(from.reply_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ge_buy_wish_summon_reply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ge_buy_wish_summon_reply::CopyFrom(const ge_buy_wish_summon_reply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ge_buy_wish_summon_reply::IsInitialized() const {

  return true;
}

void ge_buy_wish_summon_reply::Swap(ge_buy_wish_summon_reply* other) {
  if (other != this) {
    std::swap(summon_id_, other->summon_id_);
    std::swap(reply_code_, other->reply_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ge_buy_wish_summon_reply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ge_buy_wish_summon_reply_descriptor_;
  metadata.reflection = ge_buy_wish_summon_reply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int eg_king_open_wish_summon_request::kSummonIdFieldNumber;
const int eg_king_open_wish_summon_request::kReplyCodeFieldNumber;
#endif  // !_MSC_VER

eg_king_open_wish_summon_request::eg_king_open_wish_summon_request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void eg_king_open_wish_summon_request::InitAsDefaultInstance() {
}

eg_king_open_wish_summon_request::eg_king_open_wish_summon_request(const eg_king_open_wish_summon_request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void eg_king_open_wish_summon_request::SharedCtor() {
  _cached_size_ = 0;
  summon_id_ = 0u;
  reply_code_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

eg_king_open_wish_summon_request::~eg_king_open_wish_summon_request() {
  SharedDtor();
}

void eg_king_open_wish_summon_request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void eg_king_open_wish_summon_request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* eg_king_open_wish_summon_request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return eg_king_open_wish_summon_request_descriptor_;
}

const eg_king_open_wish_summon_request& eg_king_open_wish_summon_request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

eg_king_open_wish_summon_request* eg_king_open_wish_summon_request::default_instance_ = NULL;

eg_king_open_wish_summon_request* eg_king_open_wish_summon_request::New() const {
  return new eg_king_open_wish_summon_request;
}

void eg_king_open_wish_summon_request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    summon_id_ = 0u;
    reply_code_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool eg_king_open_wish_summon_request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 summon_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &summon_id_)));
          set_has_summon_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_reply_code;
        break;
      }

      // optional uint32 reply_code = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reply_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reply_code_)));
          set_has_reply_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void eg_king_open_wish_summon_request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 summon_id = 1;
  if (has_summon_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->summon_id(), output);
  }

  // optional uint32 reply_code = 2;
  if (has_reply_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->reply_code(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* eg_king_open_wish_summon_request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 summon_id = 1;
  if (has_summon_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->summon_id(), target);
  }

  // optional uint32 reply_code = 2;
  if (has_reply_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->reply_code(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int eg_king_open_wish_summon_request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 summon_id = 1;
    if (has_summon_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->summon_id());
    }

    // optional uint32 reply_code = 2;
    if (has_reply_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reply_code());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void eg_king_open_wish_summon_request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const eg_king_open_wish_summon_request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const eg_king_open_wish_summon_request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void eg_king_open_wish_summon_request::MergeFrom(const eg_king_open_wish_summon_request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_summon_id()) {
      set_summon_id(from.summon_id());
    }
    if (from.has_reply_code()) {
      set_reply_code(from.reply_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void eg_king_open_wish_summon_request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void eg_king_open_wish_summon_request::CopyFrom(const eg_king_open_wish_summon_request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool eg_king_open_wish_summon_request::IsInitialized() const {

  return true;
}

void eg_king_open_wish_summon_request::Swap(eg_king_open_wish_summon_request* other) {
  if (other != this) {
    std::swap(summon_id_, other->summon_id_);
    std::swap(reply_code_, other->reply_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata eg_king_open_wish_summon_request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = eg_king_open_wish_summon_request_descriptor_;
  metadata.reflection = eg_king_open_wish_summon_request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ge_king_open_wish_summon_reply::kSummonIdFieldNumber;
const int ge_king_open_wish_summon_reply::kReplyCodeFieldNumber;
const int ge_king_open_wish_summon_reply::kRcdFieldNumber;
#endif  // !_MSC_VER

ge_king_open_wish_summon_reply::ge_king_open_wish_summon_reply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ge_king_open_wish_summon_reply::InitAsDefaultInstance() {
  rcd_ = const_cast< ::proto::common::role_change_data*>(&::proto::common::role_change_data::default_instance());
}

ge_king_open_wish_summon_reply::ge_king_open_wish_summon_reply(const ge_king_open_wish_summon_reply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ge_king_open_wish_summon_reply::SharedCtor() {
  _cached_size_ = 0;
  summon_id_ = 0u;
  reply_code_ = 0u;
  rcd_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ge_king_open_wish_summon_reply::~ge_king_open_wish_summon_reply() {
  SharedDtor();
}

void ge_king_open_wish_summon_reply::SharedDtor() {
  if (this != default_instance_) {
    delete rcd_;
  }
}

void ge_king_open_wish_summon_reply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ge_king_open_wish_summon_reply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ge_king_open_wish_summon_reply_descriptor_;
}

const ge_king_open_wish_summon_reply& ge_king_open_wish_summon_reply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

ge_king_open_wish_summon_reply* ge_king_open_wish_summon_reply::default_instance_ = NULL;

ge_king_open_wish_summon_reply* ge_king_open_wish_summon_reply::New() const {
  return new ge_king_open_wish_summon_reply;
}

void ge_king_open_wish_summon_reply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    summon_id_ = 0u;
    reply_code_ = 0u;
    if (has_rcd()) {
      if (rcd_ != NULL) rcd_->::proto::common::role_change_data::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ge_king_open_wish_summon_reply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 summon_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &summon_id_)));
          set_has_summon_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_reply_code;
        break;
      }

      // optional uint32 reply_code = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reply_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reply_code_)));
          set_has_reply_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_rcd;
        break;
      }

      // optional .proto.common.role_change_data rcd = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rcd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rcd()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ge_king_open_wish_summon_reply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 summon_id = 1;
  if (has_summon_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->summon_id(), output);
  }

  // optional uint32 reply_code = 2;
  if (has_reply_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->reply_code(), output);
  }

  // optional .proto.common.role_change_data rcd = 3;
  if (has_rcd()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->rcd(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ge_king_open_wish_summon_reply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 summon_id = 1;
  if (has_summon_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->summon_id(), target);
  }

  // optional uint32 reply_code = 2;
  if (has_reply_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->reply_code(), target);
  }

  // optional .proto.common.role_change_data rcd = 3;
  if (has_rcd()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->rcd(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ge_king_open_wish_summon_reply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 summon_id = 1;
    if (has_summon_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->summon_id());
    }

    // optional uint32 reply_code = 2;
    if (has_reply_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reply_code());
    }

    // optional .proto.common.role_change_data rcd = 3;
    if (has_rcd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rcd());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ge_king_open_wish_summon_reply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ge_king_open_wish_summon_reply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ge_king_open_wish_summon_reply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ge_king_open_wish_summon_reply::MergeFrom(const ge_king_open_wish_summon_reply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_summon_id()) {
      set_summon_id(from.summon_id());
    }
    if (from.has_reply_code()) {
      set_reply_code(from.reply_code());
    }
    if (from.has_rcd()) {
      mutable_rcd()->::proto::common::role_change_data::MergeFrom(from.rcd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ge_king_open_wish_summon_reply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ge_king_open_wish_summon_reply::CopyFrom(const ge_king_open_wish_summon_reply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ge_king_open_wish_summon_reply::IsInitialized() const {

  return true;
}

void ge_king_open_wish_summon_reply::Swap(ge_king_open_wish_summon_reply* other) {
  if (other != this) {
    std::swap(summon_id_, other->summon_id_);
    std::swap(reply_code_, other->reply_code_);
    std::swap(rcd_, other->rcd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ge_king_open_wish_summon_reply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ge_king_open_wish_summon_reply_descriptor_;
  metadata.reflection = ge_king_open_wish_summon_reply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ge_modify_family_money_request::kFamilyIdFieldNumber;
const int ge_modify_family_money_request::kTypeFieldNumber;
const int ge_modify_family_money_request::kNumFieldNumber;
const int ge_modify_family_money_request::kSourceTypeFieldNumber;
const int ge_modify_family_money_request::kSourceParamFieldNumber;
#endif  // !_MSC_VER

ge_modify_family_money_request::ge_modify_family_money_request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ge_modify_family_money_request::InitAsDefaultInstance() {
}

ge_modify_family_money_request::ge_modify_family_money_request(const ge_modify_family_money_request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ge_modify_family_money_request::SharedCtor() {
  _cached_size_ = 0;
  family_id_ = GOOGLE_ULONGLONG(0);
  type_ = 0u;
  num_ = 0u;
  source_type_ = 0u;
  source_param_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ge_modify_family_money_request::~ge_modify_family_money_request() {
  SharedDtor();
}

void ge_modify_family_money_request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ge_modify_family_money_request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ge_modify_family_money_request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ge_modify_family_money_request_descriptor_;
}

const ge_modify_family_money_request& ge_modify_family_money_request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

ge_modify_family_money_request* ge_modify_family_money_request::default_instance_ = NULL;

ge_modify_family_money_request* ge_modify_family_money_request::New() const {
  return new ge_modify_family_money_request;
}

void ge_modify_family_money_request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    family_id_ = GOOGLE_ULONGLONG(0);
    type_ = 0u;
    num_ = 0u;
    source_type_ = 0u;
    source_param_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ge_modify_family_money_request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 family_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &family_id_)));
          set_has_family_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional uint32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_num;
        break;
      }

      // optional uint32 num = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_source_type;
        break;
      }

      // optional uint32 source_type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_source_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &source_type_)));
          set_has_source_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_source_param;
        break;
      }

      // optional uint32 source_param = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_source_param:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &source_param_)));
          set_has_source_param();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ge_modify_family_money_request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 family_id = 1;
  if (has_family_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->family_id(), output);
  }

  // optional uint32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->type(), output);
  }

  // optional uint32 num = 3;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->num(), output);
  }

  // optional uint32 source_type = 4;
  if (has_source_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->source_type(), output);
  }

  // optional uint32 source_param = 5;
  if (has_source_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->source_param(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ge_modify_family_money_request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 family_id = 1;
  if (has_family_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->family_id(), target);
  }

  // optional uint32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->type(), target);
  }

  // optional uint32 num = 3;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->num(), target);
  }

  // optional uint32 source_type = 4;
  if (has_source_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->source_type(), target);
  }

  // optional uint32 source_param = 5;
  if (has_source_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->source_param(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ge_modify_family_money_request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 family_id = 1;
    if (has_family_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->family_id());
    }

    // optional uint32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional uint32 num = 3;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }

    // optional uint32 source_type = 4;
    if (has_source_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->source_type());
    }

    // optional uint32 source_param = 5;
    if (has_source_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->source_param());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ge_modify_family_money_request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ge_modify_family_money_request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ge_modify_family_money_request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ge_modify_family_money_request::MergeFrom(const ge_modify_family_money_request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_family_id()) {
      set_family_id(from.family_id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_source_type()) {
      set_source_type(from.source_type());
    }
    if (from.has_source_param()) {
      set_source_param(from.source_param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ge_modify_family_money_request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ge_modify_family_money_request::CopyFrom(const ge_modify_family_money_request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ge_modify_family_money_request::IsInitialized() const {

  return true;
}

void ge_modify_family_money_request::Swap(ge_modify_family_money_request* other) {
  if (other != this) {
    std::swap(family_id_, other->family_id_);
    std::swap(type_, other->type_);
    std::swap(num_, other->num_);
    std::swap(source_type_, other->source_type_);
    std::swap(source_param_, other->source_param_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ge_modify_family_money_request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ge_modify_family_money_request_descriptor_;
  metadata.reflection = ge_modify_family_money_request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ge_modify_country_money_request::kCountryIdFieldNumber;
const int ge_modify_country_money_request::kTypeFieldNumber;
const int ge_modify_country_money_request::kNumFieldNumber;
const int ge_modify_country_money_request::kSourceTypeFieldNumber;
const int ge_modify_country_money_request::kSourceParamFieldNumber;
#endif  // !_MSC_VER

ge_modify_country_money_request::ge_modify_country_money_request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ge_modify_country_money_request::InitAsDefaultInstance() {
}

ge_modify_country_money_request::ge_modify_country_money_request(const ge_modify_country_money_request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ge_modify_country_money_request::SharedCtor() {
  _cached_size_ = 0;
  country_id_ = 0u;
  type_ = 0u;
  num_ = 0u;
  source_type_ = 0u;
  source_param_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ge_modify_country_money_request::~ge_modify_country_money_request() {
  SharedDtor();
}

void ge_modify_country_money_request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ge_modify_country_money_request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ge_modify_country_money_request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ge_modify_country_money_request_descriptor_;
}

const ge_modify_country_money_request& ge_modify_country_money_request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

ge_modify_country_money_request* ge_modify_country_money_request::default_instance_ = NULL;

ge_modify_country_money_request* ge_modify_country_money_request::New() const {
  return new ge_modify_country_money_request;
}

void ge_modify_country_money_request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    country_id_ = 0u;
    type_ = 0u;
    num_ = 0u;
    source_type_ = 0u;
    source_param_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ge_modify_country_money_request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 country_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &country_id_)));
          set_has_country_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional uint32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_num;
        break;
      }

      // optional uint32 num = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_source_type;
        break;
      }

      // optional uint32 source_type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_source_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &source_type_)));
          set_has_source_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_source_param;
        break;
      }

      // optional uint32 source_param = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_source_param:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &source_param_)));
          set_has_source_param();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ge_modify_country_money_request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 country_id = 1;
  if (has_country_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->country_id(), output);
  }

  // optional uint32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->type(), output);
  }

  // optional uint32 num = 3;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->num(), output);
  }

  // optional uint32 source_type = 4;
  if (has_source_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->source_type(), output);
  }

  // optional uint32 source_param = 5;
  if (has_source_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->source_param(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ge_modify_country_money_request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 country_id = 1;
  if (has_country_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->country_id(), target);
  }

  // optional uint32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->type(), target);
  }

  // optional uint32 num = 3;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->num(), target);
  }

  // optional uint32 source_type = 4;
  if (has_source_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->source_type(), target);
  }

  // optional uint32 source_param = 5;
  if (has_source_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->source_param(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ge_modify_country_money_request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 country_id = 1;
    if (has_country_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->country_id());
    }

    // optional uint32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional uint32 num = 3;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }

    // optional uint32 source_type = 4;
    if (has_source_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->source_type());
    }

    // optional uint32 source_param = 5;
    if (has_source_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->source_param());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ge_modify_country_money_request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ge_modify_country_money_request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ge_modify_country_money_request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ge_modify_country_money_request::MergeFrom(const ge_modify_country_money_request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_country_id()) {
      set_country_id(from.country_id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_source_type()) {
      set_source_type(from.source_type());
    }
    if (from.has_source_param()) {
      set_source_param(from.source_param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ge_modify_country_money_request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ge_modify_country_money_request::CopyFrom(const ge_modify_country_money_request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ge_modify_country_money_request::IsInitialized() const {

  return true;
}

void ge_modify_country_money_request::Swap(ge_modify_country_money_request* other) {
  if (other != this) {
    std::swap(country_id_, other->country_id_);
    std::swap(type_, other->type_);
    std::swap(num_, other->num_);
    std::swap(source_type_, other->source_type_);
    std::swap(source_param_, other->source_param_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ge_modify_country_money_request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ge_modify_country_money_request_descriptor_;
  metadata.reflection = ge_modify_country_money_request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ge_get_wish_summon_info_reply::kBuyInfoFieldNumber;
#endif  // !_MSC_VER

ge_get_wish_summon_info_reply::ge_get_wish_summon_info_reply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ge_get_wish_summon_info_reply::InitAsDefaultInstance() {
}

ge_get_wish_summon_info_reply::ge_get_wish_summon_info_reply(const ge_get_wish_summon_info_reply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ge_get_wish_summon_info_reply::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ge_get_wish_summon_info_reply::~ge_get_wish_summon_info_reply() {
  SharedDtor();
}

void ge_get_wish_summon_info_reply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ge_get_wish_summon_info_reply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ge_get_wish_summon_info_reply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ge_get_wish_summon_info_reply_descriptor_;
}

const ge_get_wish_summon_info_reply& ge_get_wish_summon_info_reply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

ge_get_wish_summon_info_reply* ge_get_wish_summon_info_reply::default_instance_ = NULL;

ge_get_wish_summon_info_reply* ge_get_wish_summon_info_reply::New() const {
  return new ge_get_wish_summon_info_reply;
}

void ge_get_wish_summon_info_reply::Clear() {
  buy_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ge_get_wish_summon_info_reply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.common.buy_summon_info buy_info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_buy_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_buy_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_buy_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ge_get_wish_summon_info_reply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto.common.buy_summon_info buy_info = 1;
  for (int i = 0; i < this->buy_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->buy_info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ge_get_wish_summon_info_reply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto.common.buy_summon_info buy_info = 1;
  for (int i = 0; i < this->buy_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->buy_info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ge_get_wish_summon_info_reply::ByteSize() const {
  int total_size = 0;

  // repeated .proto.common.buy_summon_info buy_info = 1;
  total_size += 1 * this->buy_info_size();
  for (int i = 0; i < this->buy_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->buy_info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ge_get_wish_summon_info_reply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ge_get_wish_summon_info_reply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ge_get_wish_summon_info_reply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ge_get_wish_summon_info_reply::MergeFrom(const ge_get_wish_summon_info_reply& from) {
  GOOGLE_CHECK_NE(&from, this);
  buy_info_.MergeFrom(from.buy_info_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ge_get_wish_summon_info_reply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ge_get_wish_summon_info_reply::CopyFrom(const ge_get_wish_summon_info_reply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ge_get_wish_summon_info_reply::IsInitialized() const {

  return true;
}

void ge_get_wish_summon_info_reply::Swap(ge_get_wish_summon_info_reply* other) {
  if (other != this) {
    buy_info_.Swap(&other->buy_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ge_get_wish_summon_info_reply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ge_get_wish_summon_info_reply_descriptor_;
  metadata.reflection = ge_get_wish_summon_info_reply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ge_destine_item_request::kRoleIdFieldNumber;
const int ge_destine_item_request::kSearchIdFieldNumber;
const int ge_destine_item_request::kNumFieldNumber;
const int ge_destine_item_request::kReasonFieldNumber;
#endif  // !_MSC_VER

ge_destine_item_request::ge_destine_item_request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ge_destine_item_request::InitAsDefaultInstance() {
  reason_ = const_cast< ::proto::common::ex_reason*>(&::proto::common::ex_reason::default_instance());
}

ge_destine_item_request::ge_destine_item_request(const ge_destine_item_request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ge_destine_item_request::SharedCtor() {
  _cached_size_ = 0;
  role_id_ = GOOGLE_ULONGLONG(0);
  search_id_ = 0u;
  num_ = 0u;
  reason_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ge_destine_item_request::~ge_destine_item_request() {
  SharedDtor();
}

void ge_destine_item_request::SharedDtor() {
  if (this != default_instance_) {
    delete reason_;
  }
}

void ge_destine_item_request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ge_destine_item_request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ge_destine_item_request_descriptor_;
}

const ge_destine_item_request& ge_destine_item_request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

ge_destine_item_request* ge_destine_item_request::default_instance_ = NULL;

ge_destine_item_request* ge_destine_item_request::New() const {
  return new ge_destine_item_request;
}

void ge_destine_item_request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_id_ = GOOGLE_ULONGLONG(0);
    search_id_ = 0u;
    num_ = 0u;
    if (has_reason()) {
      if (reason_ != NULL) reason_->::proto::common::ex_reason::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ge_destine_item_request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 role_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_search_id;
        break;
      }

      // optional uint32 search_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_search_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &search_id_)));
          set_has_search_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_num;
        break;
      }

      // optional uint32 num = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_reason;
        break;
      }

      // optional .proto.common.ex_reason reason = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reason:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reason()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ge_destine_item_request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 role_id = 1;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->role_id(), output);
  }

  // optional uint32 search_id = 2;
  if (has_search_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->search_id(), output);
  }

  // optional uint32 num = 3;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->num(), output);
  }

  // optional .proto.common.ex_reason reason = 4;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->reason(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ge_destine_item_request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 role_id = 1;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->role_id(), target);
  }

  // optional uint32 search_id = 2;
  if (has_search_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->search_id(), target);
  }

  // optional uint32 num = 3;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->num(), target);
  }

  // optional .proto.common.ex_reason reason = 4;
  if (has_reason()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->reason(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ge_destine_item_request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 role_id = 1;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_id());
    }

    // optional uint32 search_id = 2;
    if (has_search_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->search_id());
    }

    // optional uint32 num = 3;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }

    // optional .proto.common.ex_reason reason = 4;
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->reason());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ge_destine_item_request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ge_destine_item_request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ge_destine_item_request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ge_destine_item_request::MergeFrom(const ge_destine_item_request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_search_id()) {
      set_search_id(from.search_id());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_reason()) {
      mutable_reason()->::proto::common::ex_reason::MergeFrom(from.reason());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ge_destine_item_request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ge_destine_item_request::CopyFrom(const ge_destine_item_request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ge_destine_item_request::IsInitialized() const {

  return true;
}

void ge_destine_item_request::Swap(ge_destine_item_request* other) {
  if (other != this) {
    std::swap(role_id_, other->role_id_);
    std::swap(search_id_, other->search_id_);
    std::swap(num_, other->num_);
    std::swap(reason_, other->reason_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ge_destine_item_request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ge_destine_item_request_descriptor_;
  metadata.reflection = ge_destine_item_request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int eg_destine_item_reply::kRoleIdFieldNumber;
const int eg_destine_item_reply::kGoodsUidFieldNumber;
const int eg_destine_item_reply::kItemIdFieldNumber;
const int eg_destine_item_reply::kNumFieldNumber;
const int eg_destine_item_reply::kPriceFieldNumber;
const int eg_destine_item_reply::kReasonFieldNumber;
const int eg_destine_item_reply::kReplyCodeFieldNumber;
#endif  // !_MSC_VER

eg_destine_item_reply::eg_destine_item_reply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void eg_destine_item_reply::InitAsDefaultInstance() {
  reason_ = const_cast< ::proto::common::ex_reason*>(&::proto::common::ex_reason::default_instance());
}

eg_destine_item_reply::eg_destine_item_reply(const eg_destine_item_reply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void eg_destine_item_reply::SharedCtor() {
  _cached_size_ = 0;
  role_id_ = GOOGLE_ULONGLONG(0);
  goods_uid_ = GOOGLE_ULONGLONG(0);
  item_id_ = 0u;
  num_ = 0u;
  price_ = 0u;
  reason_ = NULL;
  reply_code_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

eg_destine_item_reply::~eg_destine_item_reply() {
  SharedDtor();
}

void eg_destine_item_reply::SharedDtor() {
  if (this != default_instance_) {
    delete reason_;
  }
}

void eg_destine_item_reply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* eg_destine_item_reply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return eg_destine_item_reply_descriptor_;
}

const eg_destine_item_reply& eg_destine_item_reply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

eg_destine_item_reply* eg_destine_item_reply::default_instance_ = NULL;

eg_destine_item_reply* eg_destine_item_reply::New() const {
  return new eg_destine_item_reply;
}

void eg_destine_item_reply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_id_ = GOOGLE_ULONGLONG(0);
    goods_uid_ = GOOGLE_ULONGLONG(0);
    item_id_ = 0u;
    num_ = 0u;
    price_ = 0u;
    if (has_reason()) {
      if (reason_ != NULL) reason_->::proto::common::ex_reason::Clear();
    }
    reply_code_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool eg_destine_item_reply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 role_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_goods_uid;
        break;
      }

      // optional uint64 goods_uid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_goods_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &goods_uid_)));
          set_has_goods_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_item_id;
        break;
      }

      // optional uint32 item_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_id_)));
          set_has_item_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_num;
        break;
      }

      // optional uint32 num = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_price;
        break;
      }

      // optional uint32 price = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &price_)));
          set_has_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_reason;
        break;
      }

      // optional .proto.common.ex_reason reason = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reason:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reason()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_reply_code;
        break;
      }

      // optional uint32 reply_code = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reply_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reply_code_)));
          set_has_reply_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void eg_destine_item_reply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 role_id = 1;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->role_id(), output);
  }

  // optional uint64 goods_uid = 2;
  if (has_goods_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->goods_uid(), output);
  }

  // optional uint32 item_id = 3;
  if (has_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->item_id(), output);
  }

  // optional uint32 num = 4;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->num(), output);
  }

  // optional uint32 price = 5;
  if (has_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->price(), output);
  }

  // optional .proto.common.ex_reason reason = 6;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->reason(), output);
  }

  // optional uint32 reply_code = 7;
  if (has_reply_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->reply_code(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* eg_destine_item_reply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 role_id = 1;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->role_id(), target);
  }

  // optional uint64 goods_uid = 2;
  if (has_goods_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->goods_uid(), target);
  }

  // optional uint32 item_id = 3;
  if (has_item_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->item_id(), target);
  }

  // optional uint32 num = 4;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->num(), target);
  }

  // optional uint32 price = 5;
  if (has_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->price(), target);
  }

  // optional .proto.common.ex_reason reason = 6;
  if (has_reason()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->reason(), target);
  }

  // optional uint32 reply_code = 7;
  if (has_reply_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->reply_code(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int eg_destine_item_reply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 role_id = 1;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_id());
    }

    // optional uint64 goods_uid = 2;
    if (has_goods_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->goods_uid());
    }

    // optional uint32 item_id = 3;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_id());
    }

    // optional uint32 num = 4;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }

    // optional uint32 price = 5;
    if (has_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->price());
    }

    // optional .proto.common.ex_reason reason = 6;
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->reason());
    }

    // optional uint32 reply_code = 7;
    if (has_reply_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reply_code());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void eg_destine_item_reply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const eg_destine_item_reply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const eg_destine_item_reply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void eg_destine_item_reply::MergeFrom(const eg_destine_item_reply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_goods_uid()) {
      set_goods_uid(from.goods_uid());
    }
    if (from.has_item_id()) {
      set_item_id(from.item_id());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_price()) {
      set_price(from.price());
    }
    if (from.has_reason()) {
      mutable_reason()->::proto::common::ex_reason::MergeFrom(from.reason());
    }
    if (from.has_reply_code()) {
      set_reply_code(from.reply_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void eg_destine_item_reply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void eg_destine_item_reply::CopyFrom(const eg_destine_item_reply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool eg_destine_item_reply::IsInitialized() const {

  return true;
}

void eg_destine_item_reply::Swap(eg_destine_item_reply* other) {
  if (other != this) {
    std::swap(role_id_, other->role_id_);
    std::swap(goods_uid_, other->goods_uid_);
    std::swap(item_id_, other->item_id_);
    std::swap(num_, other->num_);
    std::swap(price_, other->price_);
    std::swap(reason_, other->reason_);
    std::swap(reply_code_, other->reply_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata eg_destine_item_reply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = eg_destine_item_reply_descriptor_;
  metadata.reflection = eg_destine_item_reply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ge_undestine_item_request::kGoodsUidFieldNumber;
#endif  // !_MSC_VER

ge_undestine_item_request::ge_undestine_item_request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ge_undestine_item_request::InitAsDefaultInstance() {
}

ge_undestine_item_request::ge_undestine_item_request(const ge_undestine_item_request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ge_undestine_item_request::SharedCtor() {
  _cached_size_ = 0;
  goods_uid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ge_undestine_item_request::~ge_undestine_item_request() {
  SharedDtor();
}

void ge_undestine_item_request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ge_undestine_item_request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ge_undestine_item_request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ge_undestine_item_request_descriptor_;
}

const ge_undestine_item_request& ge_undestine_item_request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

ge_undestine_item_request* ge_undestine_item_request::default_instance_ = NULL;

ge_undestine_item_request* ge_undestine_item_request::New() const {
  return new ge_undestine_item_request;
}

void ge_undestine_item_request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    goods_uid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ge_undestine_item_request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 goods_uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &goods_uid_)));
          set_has_goods_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ge_undestine_item_request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 goods_uid = 1;
  if (has_goods_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->goods_uid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ge_undestine_item_request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 goods_uid = 1;
  if (has_goods_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->goods_uid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ge_undestine_item_request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 goods_uid = 1;
    if (has_goods_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->goods_uid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ge_undestine_item_request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ge_undestine_item_request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ge_undestine_item_request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ge_undestine_item_request::MergeFrom(const ge_undestine_item_request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_goods_uid()) {
      set_goods_uid(from.goods_uid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ge_undestine_item_request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ge_undestine_item_request::CopyFrom(const ge_undestine_item_request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ge_undestine_item_request::IsInitialized() const {

  return true;
}

void ge_undestine_item_request::Swap(ge_undestine_item_request* other) {
  if (other != this) {
    std::swap(goods_uid_, other->goods_uid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ge_undestine_item_request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ge_undestine_item_request_descriptor_;
  metadata.reflection = ge_undestine_item_request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ge_push_general_event_request::kIndexFieldNumber;
const int ge_push_general_event_request::kRoleUidFieldNumber;
const int ge_push_general_event_request::kNameFieldNumber;
const int ge_push_general_event_request::kValueFieldNumber;
#endif  // !_MSC_VER

ge_push_general_event_request::ge_push_general_event_request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ge_push_general_event_request::InitAsDefaultInstance() {
}

ge_push_general_event_request::ge_push_general_event_request(const ge_push_general_event_request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ge_push_general_event_request::SharedCtor() {
  _cached_size_ = 0;
  index_ = 0u;
  role_uid_ = GOOGLE_ULONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  value_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ge_push_general_event_request::~ge_push_general_event_request() {
  SharedDtor();
}

void ge_push_general_event_request::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void ge_push_general_event_request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ge_push_general_event_request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ge_push_general_event_request_descriptor_;
}

const ge_push_general_event_request& ge_push_general_event_request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

ge_push_general_event_request* ge_push_general_event_request::default_instance_ = NULL;

ge_push_general_event_request* ge_push_general_event_request::New() const {
  return new ge_push_general_event_request;
}

void ge_push_general_event_request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    index_ = 0u;
    role_uid_ = GOOGLE_ULONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    value_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ge_push_general_event_request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_role_uid;
        break;
      }

      // optional uint64 role_uid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_uid_)));
          set_has_role_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // optional string name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_value;
        break;
      }

      // optional uint32 value = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ge_push_general_event_request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 index = 1;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->index(), output);
  }

  // optional uint64 role_uid = 2;
  if (has_role_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->role_uid(), output);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->name(), output);
  }

  // optional uint32 value = 4;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ge_push_general_event_request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 index = 1;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->index(), target);
  }

  // optional uint64 role_uid = 2;
  if (has_role_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->role_uid(), target);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // optional uint32 value = 4;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ge_push_general_event_request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 index = 1;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->index());
    }

    // optional uint64 role_uid = 2;
    if (has_role_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_uid());
    }

    // optional string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 value = 4;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ge_push_general_event_request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ge_push_general_event_request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ge_push_general_event_request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ge_push_general_event_request::MergeFrom(const ge_push_general_event_request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_role_uid()) {
      set_role_uid(from.role_uid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ge_push_general_event_request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ge_push_general_event_request::CopyFrom(const ge_push_general_event_request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ge_push_general_event_request::IsInitialized() const {

  return true;
}

void ge_push_general_event_request::Swap(ge_push_general_event_request* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    std::swap(role_uid_, other->role_uid_);
    std::swap(name_, other->name_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ge_push_general_event_request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ge_push_general_event_request_descriptor_;
  metadata.reflection = ge_push_general_event_request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int eg_sync_general_event_count_info::kGeneralInfoFieldNumber;
#endif  // !_MSC_VER

eg_sync_general_event_count_info::eg_sync_general_event_count_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void eg_sync_general_event_count_info::InitAsDefaultInstance() {
}

eg_sync_general_event_count_info::eg_sync_general_event_count_info(const eg_sync_general_event_count_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void eg_sync_general_event_count_info::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

eg_sync_general_event_count_info::~eg_sync_general_event_count_info() {
  SharedDtor();
}

void eg_sync_general_event_count_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void eg_sync_general_event_count_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* eg_sync_general_event_count_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return eg_sync_general_event_count_info_descriptor_;
}

const eg_sync_general_event_count_info& eg_sync_general_event_count_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

eg_sync_general_event_count_info* eg_sync_general_event_count_info::default_instance_ = NULL;

eg_sync_general_event_count_info* eg_sync_general_event_count_info::New() const {
  return new eg_sync_general_event_count_info;
}

void eg_sync_general_event_count_info::Clear() {
  general_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool eg_sync_general_event_count_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.common.general_info_single general_info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_general_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_general_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_general_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void eg_sync_general_event_count_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto.common.general_info_single general_info = 1;
  for (int i = 0; i < this->general_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->general_info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* eg_sync_general_event_count_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto.common.general_info_single general_info = 1;
  for (int i = 0; i < this->general_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->general_info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int eg_sync_general_event_count_info::ByteSize() const {
  int total_size = 0;

  // repeated .proto.common.general_info_single general_info = 1;
  total_size += 1 * this->general_info_size();
  for (int i = 0; i < this->general_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->general_info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void eg_sync_general_event_count_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const eg_sync_general_event_count_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const eg_sync_general_event_count_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void eg_sync_general_event_count_info::MergeFrom(const eg_sync_general_event_count_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  general_info_.MergeFrom(from.general_info_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void eg_sync_general_event_count_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void eg_sync_general_event_count_info::CopyFrom(const eg_sync_general_event_count_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool eg_sync_general_event_count_info::IsInitialized() const {

  return true;
}

void eg_sync_general_event_count_info::Swap(eg_sync_general_event_count_info* other) {
  if (other != this) {
    general_info_.Swap(&other->general_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata eg_sync_general_event_count_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = eg_sync_general_event_count_info_descriptor_;
  metadata.reflection = eg_sync_general_event_count_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int eg_sync_general_event_data::kInfoFieldNumber;
#endif  // !_MSC_VER

eg_sync_general_event_data::eg_sync_general_event_data()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void eg_sync_general_event_data::InitAsDefaultInstance() {
}

eg_sync_general_event_data::eg_sync_general_event_data(const eg_sync_general_event_data& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void eg_sync_general_event_data::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

eg_sync_general_event_data::~eg_sync_general_event_data() {
  SharedDtor();
}

void eg_sync_general_event_data::SharedDtor() {
  if (this != default_instance_) {
  }
}

void eg_sync_general_event_data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* eg_sync_general_event_data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return eg_sync_general_event_data_descriptor_;
}

const eg_sync_general_event_data& eg_sync_general_event_data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

eg_sync_general_event_data* eg_sync_general_event_data::default_instance_ = NULL;

eg_sync_general_event_data* eg_sync_general_event_data::New() const {
  return new eg_sync_general_event_data;
}

void eg_sync_general_event_data::Clear() {
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool eg_sync_general_event_data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.common.general_event_data info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void eg_sync_general_event_data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto.common.general_event_data info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* eg_sync_general_event_data::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto.common.general_event_data info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int eg_sync_general_event_data::ByteSize() const {
  int total_size = 0;

  // repeated .proto.common.general_event_data info = 1;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void eg_sync_general_event_data::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const eg_sync_general_event_data* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const eg_sync_general_event_data*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void eg_sync_general_event_data::MergeFrom(const eg_sync_general_event_data& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void eg_sync_general_event_data::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void eg_sync_general_event_data::CopyFrom(const eg_sync_general_event_data& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool eg_sync_general_event_data::IsInitialized() const {

  return true;
}

void eg_sync_general_event_data::Swap(eg_sync_general_event_data* other) {
  if (other != this) {
    info_.Swap(&other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata eg_sync_general_event_data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = eg_sync_general_event_data_descriptor_;
  metadata.reflection = eg_sync_general_event_data_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int eg_sync_general_event_open::kIdFieldNumber;
const int eg_sync_general_event_open::kInfoFieldNumber;
#endif  // !_MSC_VER

eg_sync_general_event_open::eg_sync_general_event_open()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void eg_sync_general_event_open::InitAsDefaultInstance() {
  info_ = const_cast< ::proto::common::general_event_data*>(&::proto::common::general_event_data::default_instance());
}

eg_sync_general_event_open::eg_sync_general_event_open(const eg_sync_general_event_open& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void eg_sync_general_event_open::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

eg_sync_general_event_open::~eg_sync_general_event_open() {
  SharedDtor();
}

void eg_sync_general_event_open::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
  }
}

void eg_sync_general_event_open::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* eg_sync_general_event_open::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return eg_sync_general_event_open_descriptor_;
}

const eg_sync_general_event_open& eg_sync_general_event_open::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

eg_sync_general_event_open* eg_sync_general_event_open::default_instance_ = NULL;

eg_sync_general_event_open* eg_sync_general_event_open::New() const {
  return new eg_sync_general_event_open;
}

void eg_sync_general_event_open::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    if (has_info()) {
      if (info_ != NULL) info_->::proto::common::general_event_data::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool eg_sync_general_event_open::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info;
        break;
      }

      // optional .proto.common.general_event_data info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void eg_sync_general_event_open::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional .proto.common.general_event_data info = 2;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* eg_sync_general_event_open::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional .proto.common.general_event_data info = 2;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int eg_sync_general_event_open::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional .proto.common.general_event_data info = 2;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void eg_sync_general_event_open::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const eg_sync_general_event_open* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const eg_sync_general_event_open*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void eg_sync_general_event_open::MergeFrom(const eg_sync_general_event_open& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_info()) {
      mutable_info()->::proto::common::general_event_data::MergeFrom(from.info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void eg_sync_general_event_open::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void eg_sync_general_event_open::CopyFrom(const eg_sync_general_event_open& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool eg_sync_general_event_open::IsInitialized() const {

  return true;
}

void eg_sync_general_event_open::Swap(eg_sync_general_event_open* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(info_, other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata eg_sync_general_event_open::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = eg_sync_general_event_open_descriptor_;
  metadata.reflection = eg_sync_general_event_open_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int eg_sync_general_event_done::kIdFieldNumber;
const int eg_sync_general_event_done::kInfoFieldNumber;
#endif  // !_MSC_VER

eg_sync_general_event_done::eg_sync_general_event_done()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void eg_sync_general_event_done::InitAsDefaultInstance() {
  info_ = const_cast< ::proto::common::general_event_data*>(&::proto::common::general_event_data::default_instance());
}

eg_sync_general_event_done::eg_sync_general_event_done(const eg_sync_general_event_done& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void eg_sync_general_event_done::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

eg_sync_general_event_done::~eg_sync_general_event_done() {
  SharedDtor();
}

void eg_sync_general_event_done::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
  }
}

void eg_sync_general_event_done::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* eg_sync_general_event_done::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return eg_sync_general_event_done_descriptor_;
}

const eg_sync_general_event_done& eg_sync_general_event_done::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

eg_sync_general_event_done* eg_sync_general_event_done::default_instance_ = NULL;

eg_sync_general_event_done* eg_sync_general_event_done::New() const {
  return new eg_sync_general_event_done;
}

void eg_sync_general_event_done::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    if (has_info()) {
      if (info_ != NULL) info_->::proto::common::general_event_data::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool eg_sync_general_event_done::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info;
        break;
      }

      // optional .proto.common.general_event_data info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void eg_sync_general_event_done::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional .proto.common.general_event_data info = 2;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* eg_sync_general_event_done::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional .proto.common.general_event_data info = 2;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int eg_sync_general_event_done::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional .proto.common.general_event_data info = 2;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void eg_sync_general_event_done::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const eg_sync_general_event_done* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const eg_sync_general_event_done*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void eg_sync_general_event_done::MergeFrom(const eg_sync_general_event_done& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_info()) {
      mutable_info()->::proto::common::general_event_data::MergeFrom(from.info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void eg_sync_general_event_done::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void eg_sync_general_event_done::CopyFrom(const eg_sync_general_event_done& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool eg_sync_general_event_done::IsInitialized() const {

  return true;
}

void eg_sync_general_event_done::Swap(eg_sync_general_event_done* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(info_, other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata eg_sync_general_event_done::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = eg_sync_general_event_done_descriptor_;
  metadata.reflection = eg_sync_general_event_done_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int eg_sync_server_level::kLevelFieldNumber;
#endif  // !_MSC_VER

eg_sync_server_level::eg_sync_server_level()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void eg_sync_server_level::InitAsDefaultInstance() {
}

eg_sync_server_level::eg_sync_server_level(const eg_sync_server_level& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void eg_sync_server_level::SharedCtor() {
  _cached_size_ = 0;
  level_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

eg_sync_server_level::~eg_sync_server_level() {
  SharedDtor();
}

void eg_sync_server_level::SharedDtor() {
  if (this != default_instance_) {
  }
}

void eg_sync_server_level::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* eg_sync_server_level::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return eg_sync_server_level_descriptor_;
}

const eg_sync_server_level& eg_sync_server_level::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

eg_sync_server_level* eg_sync_server_level::default_instance_ = NULL;

eg_sync_server_level* eg_sync_server_level::New() const {
  return new eg_sync_server_level;
}

void eg_sync_server_level::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    level_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool eg_sync_server_level::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 level = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void eg_sync_server_level::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 level = 1;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->level(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* eg_sync_server_level::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 level = 1;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->level(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int eg_sync_server_level::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 level = 1;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void eg_sync_server_level::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const eg_sync_server_level* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const eg_sync_server_level*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void eg_sync_server_level::MergeFrom(const eg_sync_server_level& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void eg_sync_server_level::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void eg_sync_server_level::CopyFrom(const eg_sync_server_level& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool eg_sync_server_level::IsInitialized() const {

  return true;
}

void eg_sync_server_level::Swap(eg_sync_server_level* other) {
  if (other != this) {
    std::swap(level_, other->level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata eg_sync_server_level::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = eg_sync_server_level_descriptor_;
  metadata.reflection = eg_sync_server_level_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int me_transport_ntf::kRoleUidFieldNumber;
const int me_transport_ntf::kSceneIdFieldNumber;
#endif  // !_MSC_VER

me_transport_ntf::me_transport_ntf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void me_transport_ntf::InitAsDefaultInstance() {
}

me_transport_ntf::me_transport_ntf(const me_transport_ntf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void me_transport_ntf::SharedCtor() {
  _cached_size_ = 0;
  role_uid_ = GOOGLE_ULONGLONG(0);
  scene_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

me_transport_ntf::~me_transport_ntf() {
  SharedDtor();
}

void me_transport_ntf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void me_transport_ntf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* me_transport_ntf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return me_transport_ntf_descriptor_;
}

const me_transport_ntf& me_transport_ntf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

me_transport_ntf* me_transport_ntf::default_instance_ = NULL;

me_transport_ntf* me_transport_ntf::New() const {
  return new me_transport_ntf;
}

void me_transport_ntf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_uid_ = GOOGLE_ULONGLONG(0);
    scene_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool me_transport_ntf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 role_uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_uid_)));
          set_has_role_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_scene_id;
        break;
      }

      // optional uint32 scene_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scene_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scene_id_)));
          set_has_scene_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void me_transport_ntf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 role_uid = 1;
  if (has_role_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->role_uid(), output);
  }

  // optional uint32 scene_id = 2;
  if (has_scene_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->scene_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* me_transport_ntf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 role_uid = 1;
  if (has_role_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->role_uid(), target);
  }

  // optional uint32 scene_id = 2;
  if (has_scene_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->scene_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int me_transport_ntf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 role_uid = 1;
    if (has_role_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_uid());
    }

    // optional uint32 scene_id = 2;
    if (has_scene_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->scene_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void me_transport_ntf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const me_transport_ntf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const me_transport_ntf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void me_transport_ntf::MergeFrom(const me_transport_ntf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_uid()) {
      set_role_uid(from.role_uid());
    }
    if (from.has_scene_id()) {
      set_scene_id(from.scene_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void me_transport_ntf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void me_transport_ntf::CopyFrom(const me_transport_ntf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool me_transport_ntf::IsInitialized() const {

  return true;
}

void me_transport_ntf::Swap(me_transport_ntf* other) {
  if (other != this) {
    std::swap(role_uid_, other->role_uid_);
    std::swap(scene_id_, other->scene_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata me_transport_ntf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = me_transport_ntf_descriptor_;
  metadata.reflection = me_transport_ntf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int eg_gm_transport_ntf::kRoleUidFieldNumber;
const int eg_gm_transport_ntf::kSceneIdFieldNumber;
#endif  // !_MSC_VER

eg_gm_transport_ntf::eg_gm_transport_ntf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void eg_gm_transport_ntf::InitAsDefaultInstance() {
}

eg_gm_transport_ntf::eg_gm_transport_ntf(const eg_gm_transport_ntf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void eg_gm_transport_ntf::SharedCtor() {
  _cached_size_ = 0;
  role_uid_ = GOOGLE_ULONGLONG(0);
  scene_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

eg_gm_transport_ntf::~eg_gm_transport_ntf() {
  SharedDtor();
}

void eg_gm_transport_ntf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void eg_gm_transport_ntf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* eg_gm_transport_ntf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return eg_gm_transport_ntf_descriptor_;
}

const eg_gm_transport_ntf& eg_gm_transport_ntf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

eg_gm_transport_ntf* eg_gm_transport_ntf::default_instance_ = NULL;

eg_gm_transport_ntf* eg_gm_transport_ntf::New() const {
  return new eg_gm_transport_ntf;
}

void eg_gm_transport_ntf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_uid_ = GOOGLE_ULONGLONG(0);
    scene_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool eg_gm_transport_ntf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 role_uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_uid_)));
          set_has_role_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_scene_id;
        break;
      }

      // optional uint32 scene_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scene_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scene_id_)));
          set_has_scene_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void eg_gm_transport_ntf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 role_uid = 1;
  if (has_role_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->role_uid(), output);
  }

  // optional uint32 scene_id = 2;
  if (has_scene_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->scene_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* eg_gm_transport_ntf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 role_uid = 1;
  if (has_role_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->role_uid(), target);
  }

  // optional uint32 scene_id = 2;
  if (has_scene_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->scene_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int eg_gm_transport_ntf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 role_uid = 1;
    if (has_role_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_uid());
    }

    // optional uint32 scene_id = 2;
    if (has_scene_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->scene_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void eg_gm_transport_ntf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const eg_gm_transport_ntf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const eg_gm_transport_ntf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void eg_gm_transport_ntf::MergeFrom(const eg_gm_transport_ntf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_uid()) {
      set_role_uid(from.role_uid());
    }
    if (from.has_scene_id()) {
      set_scene_id(from.scene_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void eg_gm_transport_ntf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void eg_gm_transport_ntf::CopyFrom(const eg_gm_transport_ntf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool eg_gm_transport_ntf::IsInitialized() const {

  return true;
}

void eg_gm_transport_ntf::Swap(eg_gm_transport_ntf* other) {
  if (other != this) {
    std::swap(role_uid_, other->role_uid_);
    std::swap(scene_id_, other->scene_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata eg_gm_transport_ntf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = eg_gm_transport_ntf_descriptor_;
  metadata.reflection = eg_gm_transport_ntf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ea_send_gm_msg_to_account_request::kCmdTypeFieldNumber;
const int ea_send_gm_msg_to_account_request::kMsgFieldNumber;
#endif  // !_MSC_VER

ea_send_gm_msg_to_account_request::ea_send_gm_msg_to_account_request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ea_send_gm_msg_to_account_request::InitAsDefaultInstance() {
  msg_ = const_cast< ::proto::common::gm_msg_to_account*>(&::proto::common::gm_msg_to_account::default_instance());
}

ea_send_gm_msg_to_account_request::ea_send_gm_msg_to_account_request(const ea_send_gm_msg_to_account_request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ea_send_gm_msg_to_account_request::SharedCtor() {
  _cached_size_ = 0;
  cmd_type_ = 0u;
  msg_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ea_send_gm_msg_to_account_request::~ea_send_gm_msg_to_account_request() {
  SharedDtor();
}

void ea_send_gm_msg_to_account_request::SharedDtor() {
  if (this != default_instance_) {
    delete msg_;
  }
}

void ea_send_gm_msg_to_account_request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ea_send_gm_msg_to_account_request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ea_send_gm_msg_to_account_request_descriptor_;
}

const ea_send_gm_msg_to_account_request& ea_send_gm_msg_to_account_request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

ea_send_gm_msg_to_account_request* ea_send_gm_msg_to_account_request::default_instance_ = NULL;

ea_send_gm_msg_to_account_request* ea_send_gm_msg_to_account_request::New() const {
  return new ea_send_gm_msg_to_account_request;
}

void ea_send_gm_msg_to_account_request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cmd_type_ = 0u;
    if (has_msg()) {
      if (msg_ != NULL) msg_->::proto::common::gm_msg_to_account::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ea_send_gm_msg_to_account_request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 cmd_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cmd_type_)));
          set_has_cmd_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_msg;
        break;
      }

      // optional .proto.common.gm_msg_to_account msg = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ea_send_gm_msg_to_account_request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 cmd_type = 1;
  if (has_cmd_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cmd_type(), output);
  }

  // optional .proto.common.gm_msg_to_account msg = 2;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->msg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ea_send_gm_msg_to_account_request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 cmd_type = 1;
  if (has_cmd_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->cmd_type(), target);
  }

  // optional .proto.common.gm_msg_to_account msg = 2;
  if (has_msg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->msg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ea_send_gm_msg_to_account_request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 cmd_type = 1;
    if (has_cmd_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cmd_type());
    }

    // optional .proto.common.gm_msg_to_account msg = 2;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->msg());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ea_send_gm_msg_to_account_request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ea_send_gm_msg_to_account_request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ea_send_gm_msg_to_account_request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ea_send_gm_msg_to_account_request::MergeFrom(const ea_send_gm_msg_to_account_request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd_type()) {
      set_cmd_type(from.cmd_type());
    }
    if (from.has_msg()) {
      mutable_msg()->::proto::common::gm_msg_to_account::MergeFrom(from.msg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ea_send_gm_msg_to_account_request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ea_send_gm_msg_to_account_request::CopyFrom(const ea_send_gm_msg_to_account_request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ea_send_gm_msg_to_account_request::IsInitialized() const {

  return true;
}

void ea_send_gm_msg_to_account_request::Swap(ea_send_gm_msg_to_account_request* other) {
  if (other != this) {
    std::swap(cmd_type_, other->cmd_type_);
    std::swap(msg_, other->msg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ea_send_gm_msg_to_account_request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ea_send_gm_msg_to_account_request_descriptor_;
  metadata.reflection = ea_send_gm_msg_to_account_request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ae_send_gm_msg_to_account_reply::kReplyCodeFieldNumber;
#endif  // !_MSC_VER

ae_send_gm_msg_to_account_reply::ae_send_gm_msg_to_account_reply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ae_send_gm_msg_to_account_reply::InitAsDefaultInstance() {
}

ae_send_gm_msg_to_account_reply::ae_send_gm_msg_to_account_reply(const ae_send_gm_msg_to_account_reply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ae_send_gm_msg_to_account_reply::SharedCtor() {
  _cached_size_ = 0;
  reply_code_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ae_send_gm_msg_to_account_reply::~ae_send_gm_msg_to_account_reply() {
  SharedDtor();
}

void ae_send_gm_msg_to_account_reply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ae_send_gm_msg_to_account_reply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ae_send_gm_msg_to_account_reply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ae_send_gm_msg_to_account_reply_descriptor_;
}

const ae_send_gm_msg_to_account_reply& ae_send_gm_msg_to_account_reply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

ae_send_gm_msg_to_account_reply* ae_send_gm_msg_to_account_reply::default_instance_ = NULL;

ae_send_gm_msg_to_account_reply* ae_send_gm_msg_to_account_reply::New() const {
  return new ae_send_gm_msg_to_account_reply;
}

void ae_send_gm_msg_to_account_reply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    reply_code_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ae_send_gm_msg_to_account_reply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 reply_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reply_code_)));
          set_has_reply_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ae_send_gm_msg_to_account_reply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 reply_code = 1;
  if (has_reply_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->reply_code(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ae_send_gm_msg_to_account_reply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 reply_code = 1;
  if (has_reply_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->reply_code(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ae_send_gm_msg_to_account_reply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 reply_code = 1;
    if (has_reply_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reply_code());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ae_send_gm_msg_to_account_reply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ae_send_gm_msg_to_account_reply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ae_send_gm_msg_to_account_reply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ae_send_gm_msg_to_account_reply::MergeFrom(const ae_send_gm_msg_to_account_reply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reply_code()) {
      set_reply_code(from.reply_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ae_send_gm_msg_to_account_reply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ae_send_gm_msg_to_account_reply::CopyFrom(const ae_send_gm_msg_to_account_reply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ae_send_gm_msg_to_account_reply::IsInitialized() const {

  return true;
}

void ae_send_gm_msg_to_account_reply::Swap(ae_send_gm_msg_to_account_reply* other) {
  if (other != this) {
    std::swap(reply_code_, other->reply_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ae_send_gm_msg_to_account_reply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ae_send_gm_msg_to_account_reply_descriptor_;
  metadata.reflection = ae_send_gm_msg_to_account_reply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int al_send_gm_msg_to_account_requst::kCmdTypeFieldNumber;
const int al_send_gm_msg_to_account_requst::kMsgFieldNumber;
#endif  // !_MSC_VER

al_send_gm_msg_to_account_requst::al_send_gm_msg_to_account_requst()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void al_send_gm_msg_to_account_requst::InitAsDefaultInstance() {
  msg_ = const_cast< ::proto::common::gm_msg_to_account*>(&::proto::common::gm_msg_to_account::default_instance());
}

al_send_gm_msg_to_account_requst::al_send_gm_msg_to_account_requst(const al_send_gm_msg_to_account_requst& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void al_send_gm_msg_to_account_requst::SharedCtor() {
  _cached_size_ = 0;
  cmd_type_ = 0u;
  msg_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

al_send_gm_msg_to_account_requst::~al_send_gm_msg_to_account_requst() {
  SharedDtor();
}

void al_send_gm_msg_to_account_requst::SharedDtor() {
  if (this != default_instance_) {
    delete msg_;
  }
}

void al_send_gm_msg_to_account_requst::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* al_send_gm_msg_to_account_requst::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return al_send_gm_msg_to_account_requst_descriptor_;
}

const al_send_gm_msg_to_account_requst& al_send_gm_msg_to_account_requst::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

al_send_gm_msg_to_account_requst* al_send_gm_msg_to_account_requst::default_instance_ = NULL;

al_send_gm_msg_to_account_requst* al_send_gm_msg_to_account_requst::New() const {
  return new al_send_gm_msg_to_account_requst;
}

void al_send_gm_msg_to_account_requst::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cmd_type_ = 0u;
    if (has_msg()) {
      if (msg_ != NULL) msg_->::proto::common::gm_msg_to_account::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool al_send_gm_msg_to_account_requst::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 cmd_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cmd_type_)));
          set_has_cmd_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_msg;
        break;
      }

      // optional .proto.common.gm_msg_to_account msg = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void al_send_gm_msg_to_account_requst::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 cmd_type = 1;
  if (has_cmd_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cmd_type(), output);
  }

  // optional .proto.common.gm_msg_to_account msg = 2;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->msg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* al_send_gm_msg_to_account_requst::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 cmd_type = 1;
  if (has_cmd_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->cmd_type(), target);
  }

  // optional .proto.common.gm_msg_to_account msg = 2;
  if (has_msg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->msg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int al_send_gm_msg_to_account_requst::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 cmd_type = 1;
    if (has_cmd_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cmd_type());
    }

    // optional .proto.common.gm_msg_to_account msg = 2;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->msg());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void al_send_gm_msg_to_account_requst::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const al_send_gm_msg_to_account_requst* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const al_send_gm_msg_to_account_requst*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void al_send_gm_msg_to_account_requst::MergeFrom(const al_send_gm_msg_to_account_requst& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd_type()) {
      set_cmd_type(from.cmd_type());
    }
    if (from.has_msg()) {
      mutable_msg()->::proto::common::gm_msg_to_account::MergeFrom(from.msg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void al_send_gm_msg_to_account_requst::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void al_send_gm_msg_to_account_requst::CopyFrom(const al_send_gm_msg_to_account_requst& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool al_send_gm_msg_to_account_requst::IsInitialized() const {

  return true;
}

void al_send_gm_msg_to_account_requst::Swap(al_send_gm_msg_to_account_requst* other) {
  if (other != this) {
    std::swap(cmd_type_, other->cmd_type_);
    std::swap(msg_, other->msg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata al_send_gm_msg_to_account_requst::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = al_send_gm_msg_to_account_requst_descriptor_;
  metadata.reflection = al_send_gm_msg_to_account_requst_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int la_send_gm_msg_to_account_reply::kReplyCodeFieldNumber;
#endif  // !_MSC_VER

la_send_gm_msg_to_account_reply::la_send_gm_msg_to_account_reply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void la_send_gm_msg_to_account_reply::InitAsDefaultInstance() {
}

la_send_gm_msg_to_account_reply::la_send_gm_msg_to_account_reply(const la_send_gm_msg_to_account_reply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void la_send_gm_msg_to_account_reply::SharedCtor() {
  _cached_size_ = 0;
  reply_code_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

la_send_gm_msg_to_account_reply::~la_send_gm_msg_to_account_reply() {
  SharedDtor();
}

void la_send_gm_msg_to_account_reply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void la_send_gm_msg_to_account_reply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* la_send_gm_msg_to_account_reply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return la_send_gm_msg_to_account_reply_descriptor_;
}

const la_send_gm_msg_to_account_reply& la_send_gm_msg_to_account_reply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

la_send_gm_msg_to_account_reply* la_send_gm_msg_to_account_reply::default_instance_ = NULL;

la_send_gm_msg_to_account_reply* la_send_gm_msg_to_account_reply::New() const {
  return new la_send_gm_msg_to_account_reply;
}

void la_send_gm_msg_to_account_reply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    reply_code_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool la_send_gm_msg_to_account_reply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 reply_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reply_code_)));
          set_has_reply_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void la_send_gm_msg_to_account_reply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 reply_code = 1;
  if (has_reply_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->reply_code(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* la_send_gm_msg_to_account_reply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 reply_code = 1;
  if (has_reply_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->reply_code(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int la_send_gm_msg_to_account_reply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 reply_code = 1;
    if (has_reply_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reply_code());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void la_send_gm_msg_to_account_reply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const la_send_gm_msg_to_account_reply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const la_send_gm_msg_to_account_reply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void la_send_gm_msg_to_account_reply::MergeFrom(const la_send_gm_msg_to_account_reply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reply_code()) {
      set_reply_code(from.reply_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void la_send_gm_msg_to_account_reply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void la_send_gm_msg_to_account_reply::CopyFrom(const la_send_gm_msg_to_account_reply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool la_send_gm_msg_to_account_reply::IsInitialized() const {

  return true;
}

void la_send_gm_msg_to_account_reply::Swap(la_send_gm_msg_to_account_reply* other) {
  if (other != this) {
    std::swap(reply_code_, other->reply_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata la_send_gm_msg_to_account_reply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = la_send_gm_msg_to_account_reply_descriptor_;
  metadata.reflection = la_send_gm_msg_to_account_reply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ln_send_gm_msg_to_account_request::kCmdTypeFieldNumber;
const int ln_send_gm_msg_to_account_request::kServerIdFieldNumber;
const int ln_send_gm_msg_to_account_request::kMsgFieldNumber;
#endif  // !_MSC_VER

ln_send_gm_msg_to_account_request::ln_send_gm_msg_to_account_request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ln_send_gm_msg_to_account_request::InitAsDefaultInstance() {
  msg_ = const_cast< ::proto::common::gm_msg_to_account*>(&::proto::common::gm_msg_to_account::default_instance());
}

ln_send_gm_msg_to_account_request::ln_send_gm_msg_to_account_request(const ln_send_gm_msg_to_account_request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ln_send_gm_msg_to_account_request::SharedCtor() {
  _cached_size_ = 0;
  cmd_type_ = 0u;
  server_id_ = 0u;
  msg_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ln_send_gm_msg_to_account_request::~ln_send_gm_msg_to_account_request() {
  SharedDtor();
}

void ln_send_gm_msg_to_account_request::SharedDtor() {
  if (this != default_instance_) {
    delete msg_;
  }
}

void ln_send_gm_msg_to_account_request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ln_send_gm_msg_to_account_request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ln_send_gm_msg_to_account_request_descriptor_;
}

const ln_send_gm_msg_to_account_request& ln_send_gm_msg_to_account_request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

ln_send_gm_msg_to_account_request* ln_send_gm_msg_to_account_request::default_instance_ = NULL;

ln_send_gm_msg_to_account_request* ln_send_gm_msg_to_account_request::New() const {
  return new ln_send_gm_msg_to_account_request;
}

void ln_send_gm_msg_to_account_request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cmd_type_ = 0u;
    server_id_ = 0u;
    if (has_msg()) {
      if (msg_ != NULL) msg_->::proto::common::gm_msg_to_account::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ln_send_gm_msg_to_account_request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 cmd_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cmd_type_)));
          set_has_cmd_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_server_id;
        break;
      }

      // optional uint32 server_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_server_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_id_)));
          set_has_server_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_msg;
        break;
      }

      // optional .proto.common.gm_msg_to_account msg = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ln_send_gm_msg_to_account_request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 cmd_type = 1;
  if (has_cmd_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cmd_type(), output);
  }

  // optional uint32 server_id = 2;
  if (has_server_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->server_id(), output);
  }

  // optional .proto.common.gm_msg_to_account msg = 3;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->msg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ln_send_gm_msg_to_account_request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 cmd_type = 1;
  if (has_cmd_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->cmd_type(), target);
  }

  // optional uint32 server_id = 2;
  if (has_server_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->server_id(), target);
  }

  // optional .proto.common.gm_msg_to_account msg = 3;
  if (has_msg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->msg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ln_send_gm_msg_to_account_request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 cmd_type = 1;
    if (has_cmd_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cmd_type());
    }

    // optional uint32 server_id = 2;
    if (has_server_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_id());
    }

    // optional .proto.common.gm_msg_to_account msg = 3;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->msg());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ln_send_gm_msg_to_account_request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ln_send_gm_msg_to_account_request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ln_send_gm_msg_to_account_request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ln_send_gm_msg_to_account_request::MergeFrom(const ln_send_gm_msg_to_account_request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd_type()) {
      set_cmd_type(from.cmd_type());
    }
    if (from.has_server_id()) {
      set_server_id(from.server_id());
    }
    if (from.has_msg()) {
      mutable_msg()->::proto::common::gm_msg_to_account::MergeFrom(from.msg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ln_send_gm_msg_to_account_request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ln_send_gm_msg_to_account_request::CopyFrom(const ln_send_gm_msg_to_account_request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ln_send_gm_msg_to_account_request::IsInitialized() const {

  return true;
}

void ln_send_gm_msg_to_account_request::Swap(ln_send_gm_msg_to_account_request* other) {
  if (other != this) {
    std::swap(cmd_type_, other->cmd_type_);
    std::swap(server_id_, other->server_id_);
    std::swap(msg_, other->msg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ln_send_gm_msg_to_account_request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ln_send_gm_msg_to_account_request_descriptor_;
  metadata.reflection = ln_send_gm_msg_to_account_request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int nl_send_gm_msg_to_account_reply::kReplyCodeFieldNumber;
#endif  // !_MSC_VER

nl_send_gm_msg_to_account_reply::nl_send_gm_msg_to_account_reply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void nl_send_gm_msg_to_account_reply::InitAsDefaultInstance() {
}

nl_send_gm_msg_to_account_reply::nl_send_gm_msg_to_account_reply(const nl_send_gm_msg_to_account_reply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void nl_send_gm_msg_to_account_reply::SharedCtor() {
  _cached_size_ = 0;
  reply_code_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

nl_send_gm_msg_to_account_reply::~nl_send_gm_msg_to_account_reply() {
  SharedDtor();
}

void nl_send_gm_msg_to_account_reply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void nl_send_gm_msg_to_account_reply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* nl_send_gm_msg_to_account_reply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return nl_send_gm_msg_to_account_reply_descriptor_;
}

const nl_send_gm_msg_to_account_reply& nl_send_gm_msg_to_account_reply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

nl_send_gm_msg_to_account_reply* nl_send_gm_msg_to_account_reply::default_instance_ = NULL;

nl_send_gm_msg_to_account_reply* nl_send_gm_msg_to_account_reply::New() const {
  return new nl_send_gm_msg_to_account_reply;
}

void nl_send_gm_msg_to_account_reply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    reply_code_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool nl_send_gm_msg_to_account_reply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 reply_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reply_code_)));
          set_has_reply_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void nl_send_gm_msg_to_account_reply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 reply_code = 1;
  if (has_reply_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->reply_code(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* nl_send_gm_msg_to_account_reply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 reply_code = 1;
  if (has_reply_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->reply_code(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int nl_send_gm_msg_to_account_reply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 reply_code = 1;
    if (has_reply_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reply_code());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void nl_send_gm_msg_to_account_reply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const nl_send_gm_msg_to_account_reply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const nl_send_gm_msg_to_account_reply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void nl_send_gm_msg_to_account_reply::MergeFrom(const nl_send_gm_msg_to_account_reply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reply_code()) {
      set_reply_code(from.reply_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void nl_send_gm_msg_to_account_reply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void nl_send_gm_msg_to_account_reply::CopyFrom(const nl_send_gm_msg_to_account_reply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool nl_send_gm_msg_to_account_reply::IsInitialized() const {

  return true;
}

void nl_send_gm_msg_to_account_reply::Swap(nl_send_gm_msg_to_account_reply* other) {
  if (other != this) {
    std::swap(reply_code_, other->reply_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata nl_send_gm_msg_to_account_reply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = nl_send_gm_msg_to_account_reply_descriptor_;
  metadata.reflection = nl_send_gm_msg_to_account_reply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int me_manage_role_ntf::kRoleUidFieldNumber;
const int me_manage_role_ntf::kManageTypeFieldNumber;
const int me_manage_role_ntf::kOffsetTimeFieldNumber;
const int me_manage_role_ntf::kAdminIdFieldNumber;
const int me_manage_role_ntf::kReasonFieldNumber;
const int me_manage_role_ntf::kOperNameFieldNumber;
#endif  // !_MSC_VER

me_manage_role_ntf::me_manage_role_ntf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void me_manage_role_ntf::InitAsDefaultInstance() {
}

me_manage_role_ntf::me_manage_role_ntf(const me_manage_role_ntf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void me_manage_role_ntf::SharedCtor() {
  _cached_size_ = 0;
  manage_type_ = 0u;
  offset_time_ = 0u;
  admin_id_ = 0u;
  reason_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  oper_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

me_manage_role_ntf::~me_manage_role_ntf() {
  SharedDtor();
}

void me_manage_role_ntf::SharedDtor() {
  if (reason_ != &::google::protobuf::internal::kEmptyString) {
    delete reason_;
  }
  if (oper_name_ != &::google::protobuf::internal::kEmptyString) {
    delete oper_name_;
  }
  if (this != default_instance_) {
  }
}

void me_manage_role_ntf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* me_manage_role_ntf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return me_manage_role_ntf_descriptor_;
}

const me_manage_role_ntf& me_manage_role_ntf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

me_manage_role_ntf* me_manage_role_ntf::default_instance_ = NULL;

me_manage_role_ntf* me_manage_role_ntf::New() const {
  return new me_manage_role_ntf;
}

void me_manage_role_ntf::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    manage_type_ = 0u;
    offset_time_ = 0u;
    admin_id_ = 0u;
    if (has_reason()) {
      if (reason_ != &::google::protobuf::internal::kEmptyString) {
        reason_->clear();
      }
    }
    if (has_oper_name()) {
      if (oper_name_ != &::google::protobuf::internal::kEmptyString) {
        oper_name_->clear();
      }
    }
  }
  role_uid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool me_manage_role_ntf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint64 role_uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 8, input, this->mutable_role_uid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_role_uid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_role_uid;
        if (input->ExpectTag(16)) goto parse_manage_type;
        break;
      }

      // optional uint32 manage_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_manage_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &manage_type_)));
          set_has_manage_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_offset_time;
        break;
      }

      // optional uint32 offset_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_offset_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &offset_time_)));
          set_has_offset_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_admin_id;
        break;
      }

      // optional uint32 admin_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_admin_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &admin_id_)));
          set_has_admin_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_reason;
        break;
      }

      // optional string reason = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reason:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reason()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->reason().data(), this->reason().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_oper_name;
        break;
      }

      // optional string oper_name = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_oper_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_oper_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->oper_name().data(), this->oper_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void me_manage_role_ntf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint64 role_uid = 1;
  for (int i = 0; i < this->role_uid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      1, this->role_uid(i), output);
  }

  // optional uint32 manage_type = 2;
  if (has_manage_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->manage_type(), output);
  }

  // optional uint32 offset_time = 3;
  if (has_offset_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->offset_time(), output);
  }

  // optional uint32 admin_id = 4;
  if (has_admin_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->admin_id(), output);
  }

  // optional string reason = 5;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->reason().data(), this->reason().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->reason(), output);
  }

  // optional string oper_name = 6;
  if (has_oper_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->oper_name().data(), this->oper_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->oper_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* me_manage_role_ntf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint64 role_uid = 1;
  for (int i = 0; i < this->role_uid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(1, this->role_uid(i), target);
  }

  // optional uint32 manage_type = 2;
  if (has_manage_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->manage_type(), target);
  }

  // optional uint32 offset_time = 3;
  if (has_offset_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->offset_time(), target);
  }

  // optional uint32 admin_id = 4;
  if (has_admin_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->admin_id(), target);
  }

  // optional string reason = 5;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->reason().data(), this->reason().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->reason(), target);
  }

  // optional string oper_name = 6;
  if (has_oper_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->oper_name().data(), this->oper_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->oper_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int me_manage_role_ntf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 manage_type = 2;
    if (has_manage_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->manage_type());
    }

    // optional uint32 offset_time = 3;
    if (has_offset_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->offset_time());
    }

    // optional uint32 admin_id = 4;
    if (has_admin_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->admin_id());
    }

    // optional string reason = 5;
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->reason());
    }

    // optional string oper_name = 6;
    if (has_oper_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->oper_name());
    }

  }
  // repeated uint64 role_uid = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->role_uid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->role_uid(i));
    }
    total_size += 1 * this->role_uid_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void me_manage_role_ntf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const me_manage_role_ntf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const me_manage_role_ntf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void me_manage_role_ntf::MergeFrom(const me_manage_role_ntf& from) {
  GOOGLE_CHECK_NE(&from, this);
  role_uid_.MergeFrom(from.role_uid_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_manage_type()) {
      set_manage_type(from.manage_type());
    }
    if (from.has_offset_time()) {
      set_offset_time(from.offset_time());
    }
    if (from.has_admin_id()) {
      set_admin_id(from.admin_id());
    }
    if (from.has_reason()) {
      set_reason(from.reason());
    }
    if (from.has_oper_name()) {
      set_oper_name(from.oper_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void me_manage_role_ntf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void me_manage_role_ntf::CopyFrom(const me_manage_role_ntf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool me_manage_role_ntf::IsInitialized() const {

  return true;
}

void me_manage_role_ntf::Swap(me_manage_role_ntf* other) {
  if (other != this) {
    role_uid_.Swap(&other->role_uid_);
    std::swap(manage_type_, other->manage_type_);
    std::swap(offset_time_, other->offset_time_);
    std::swap(admin_id_, other->admin_id_);
    std::swap(reason_, other->reason_);
    std::swap(oper_name_, other->oper_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata me_manage_role_ntf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = me_manage_role_ntf_descriptor_;
  metadata.reflection = me_manage_role_ntf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int em_manage_role_ntf::kReplyDataFieldNumber;
const int em_manage_role_ntf::kAdminIdFieldNumber;
const int em_manage_role_ntf::kManageTypeFieldNumber;
const int em_manage_role_ntf::kOffsetTimeFieldNumber;
const int em_manage_role_ntf::kReasonFieldNumber;
const int em_manage_role_ntf::kOperNameFieldNumber;
#endif  // !_MSC_VER

em_manage_role_ntf::em_manage_role_ntf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void em_manage_role_ntf::InitAsDefaultInstance() {
}

em_manage_role_ntf::em_manage_role_ntf(const em_manage_role_ntf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void em_manage_role_ntf::SharedCtor() {
  _cached_size_ = 0;
  admin_id_ = 0u;
  manage_type_ = 0u;
  offset_time_ = 0u;
  reason_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  oper_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

em_manage_role_ntf::~em_manage_role_ntf() {
  SharedDtor();
}

void em_manage_role_ntf::SharedDtor() {
  if (reason_ != &::google::protobuf::internal::kEmptyString) {
    delete reason_;
  }
  if (oper_name_ != &::google::protobuf::internal::kEmptyString) {
    delete oper_name_;
  }
  if (this != default_instance_) {
  }
}

void em_manage_role_ntf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* em_manage_role_ntf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return em_manage_role_ntf_descriptor_;
}

const em_manage_role_ntf& em_manage_role_ntf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

em_manage_role_ntf* em_manage_role_ntf::default_instance_ = NULL;

em_manage_role_ntf* em_manage_role_ntf::New() const {
  return new em_manage_role_ntf;
}

void em_manage_role_ntf::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    admin_id_ = 0u;
    manage_type_ = 0u;
    offset_time_ = 0u;
    if (has_reason()) {
      if (reason_ != &::google::protobuf::internal::kEmptyString) {
        reason_->clear();
      }
    }
    if (has_oper_name()) {
      if (oper_name_ != &::google::protobuf::internal::kEmptyString) {
        oper_name_->clear();
      }
    }
  }
  reply_data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool em_manage_role_ntf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.gm_common.manage_reply_single reply_data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reply_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_reply_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_reply_data;
        if (input->ExpectTag(16)) goto parse_admin_id;
        break;
      }

      // optional uint32 admin_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_admin_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &admin_id_)));
          set_has_admin_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_manage_type;
        break;
      }

      // optional uint32 manage_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_manage_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &manage_type_)));
          set_has_manage_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_offset_time;
        break;
      }

      // optional uint32 offset_time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_offset_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &offset_time_)));
          set_has_offset_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_reason;
        break;
      }

      // optional string reason = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reason:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reason()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->reason().data(), this->reason().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_oper_name;
        break;
      }

      // optional string oper_name = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_oper_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_oper_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->oper_name().data(), this->oper_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void em_manage_role_ntf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto.gm_common.manage_reply_single reply_data = 1;
  for (int i = 0; i < this->reply_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->reply_data(i), output);
  }

  // optional uint32 admin_id = 2;
  if (has_admin_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->admin_id(), output);
  }

  // optional uint32 manage_type = 3;
  if (has_manage_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->manage_type(), output);
  }

  // optional uint32 offset_time = 4;
  if (has_offset_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->offset_time(), output);
  }

  // optional string reason = 5;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->reason().data(), this->reason().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->reason(), output);
  }

  // optional string oper_name = 6;
  if (has_oper_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->oper_name().data(), this->oper_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->oper_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* em_manage_role_ntf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto.gm_common.manage_reply_single reply_data = 1;
  for (int i = 0; i < this->reply_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->reply_data(i), target);
  }

  // optional uint32 admin_id = 2;
  if (has_admin_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->admin_id(), target);
  }

  // optional uint32 manage_type = 3;
  if (has_manage_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->manage_type(), target);
  }

  // optional uint32 offset_time = 4;
  if (has_offset_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->offset_time(), target);
  }

  // optional string reason = 5;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->reason().data(), this->reason().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->reason(), target);
  }

  // optional string oper_name = 6;
  if (has_oper_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->oper_name().data(), this->oper_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->oper_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int em_manage_role_ntf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 admin_id = 2;
    if (has_admin_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->admin_id());
    }

    // optional uint32 manage_type = 3;
    if (has_manage_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->manage_type());
    }

    // optional uint32 offset_time = 4;
    if (has_offset_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->offset_time());
    }

    // optional string reason = 5;
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->reason());
    }

    // optional string oper_name = 6;
    if (has_oper_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->oper_name());
    }

  }
  // repeated .proto.gm_common.manage_reply_single reply_data = 1;
  total_size += 1 * this->reply_data_size();
  for (int i = 0; i < this->reply_data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->reply_data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void em_manage_role_ntf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const em_manage_role_ntf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const em_manage_role_ntf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void em_manage_role_ntf::MergeFrom(const em_manage_role_ntf& from) {
  GOOGLE_CHECK_NE(&from, this);
  reply_data_.MergeFrom(from.reply_data_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_admin_id()) {
      set_admin_id(from.admin_id());
    }
    if (from.has_manage_type()) {
      set_manage_type(from.manage_type());
    }
    if (from.has_offset_time()) {
      set_offset_time(from.offset_time());
    }
    if (from.has_reason()) {
      set_reason(from.reason());
    }
    if (from.has_oper_name()) {
      set_oper_name(from.oper_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void em_manage_role_ntf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void em_manage_role_ntf::CopyFrom(const em_manage_role_ntf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool em_manage_role_ntf::IsInitialized() const {

  return true;
}

void em_manage_role_ntf::Swap(em_manage_role_ntf* other) {
  if (other != this) {
    reply_data_.Swap(&other->reply_data_);
    std::swap(admin_id_, other->admin_id_);
    std::swap(manage_type_, other->manage_type_);
    std::swap(offset_time_, other->offset_time_);
    std::swap(reason_, other->reason_);
    std::swap(oper_name_, other->oper_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata em_manage_role_ntf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = em_manage_role_ntf_descriptor_;
  metadata.reflection = em_manage_role_ntf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int eh_silence_role_notify::kSilenceTimeFieldNumber;
#endif  // !_MSC_VER

eh_silence_role_notify::eh_silence_role_notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void eh_silence_role_notify::InitAsDefaultInstance() {
}

eh_silence_role_notify::eh_silence_role_notify(const eh_silence_role_notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void eh_silence_role_notify::SharedCtor() {
  _cached_size_ = 0;
  silence_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

eh_silence_role_notify::~eh_silence_role_notify() {
  SharedDtor();
}

void eh_silence_role_notify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void eh_silence_role_notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* eh_silence_role_notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return eh_silence_role_notify_descriptor_;
}

const eh_silence_role_notify& eh_silence_role_notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

eh_silence_role_notify* eh_silence_role_notify::default_instance_ = NULL;

eh_silence_role_notify* eh_silence_role_notify::New() const {
  return new eh_silence_role_notify;
}

void eh_silence_role_notify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    silence_time_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool eh_silence_role_notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 silence_time = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &silence_time_)));
          set_has_silence_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void eh_silence_role_notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 silence_time = 1;
  if (has_silence_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->silence_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* eh_silence_role_notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 silence_time = 1;
  if (has_silence_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->silence_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int eh_silence_role_notify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 silence_time = 1;
    if (has_silence_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->silence_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void eh_silence_role_notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const eh_silence_role_notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const eh_silence_role_notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void eh_silence_role_notify::MergeFrom(const eh_silence_role_notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_silence_time()) {
      set_silence_time(from.silence_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void eh_silence_role_notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void eh_silence_role_notify::CopyFrom(const eh_silence_role_notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool eh_silence_role_notify::IsInitialized() const {

  return true;
}

void eh_silence_role_notify::Swap(eh_silence_role_notify* other) {
  if (other != this) {
    std::swap(silence_time_, other->silence_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata eh_silence_role_notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = eh_silence_role_notify_descriptor_;
  metadata.reflection = eh_silence_role_notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int nl_syn_account_info_notify::kAccountIdFieldNumber;
#endif  // !_MSC_VER

nl_syn_account_info_notify::nl_syn_account_info_notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void nl_syn_account_info_notify::InitAsDefaultInstance() {
}

nl_syn_account_info_notify::nl_syn_account_info_notify(const nl_syn_account_info_notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void nl_syn_account_info_notify::SharedCtor() {
  _cached_size_ = 0;
  account_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

nl_syn_account_info_notify::~nl_syn_account_info_notify() {
  SharedDtor();
}

void nl_syn_account_info_notify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void nl_syn_account_info_notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* nl_syn_account_info_notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return nl_syn_account_info_notify_descriptor_;
}

const nl_syn_account_info_notify& nl_syn_account_info_notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

nl_syn_account_info_notify* nl_syn_account_info_notify::default_instance_ = NULL;

nl_syn_account_info_notify* nl_syn_account_info_notify::New() const {
  return new nl_syn_account_info_notify;
}

void nl_syn_account_info_notify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    account_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool nl_syn_account_info_notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
          set_has_account_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void nl_syn_account_info_notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 account_id = 1;
  if (has_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* nl_syn_account_info_notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 account_id = 1;
  if (has_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int nl_syn_account_info_notify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 account_id = 1;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void nl_syn_account_info_notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const nl_syn_account_info_notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const nl_syn_account_info_notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void nl_syn_account_info_notify::MergeFrom(const nl_syn_account_info_notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account_id()) {
      set_account_id(from.account_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void nl_syn_account_info_notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void nl_syn_account_info_notify::CopyFrom(const nl_syn_account_info_notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool nl_syn_account_info_notify::IsInitialized() const {

  return true;
}

void nl_syn_account_info_notify::Swap(nl_syn_account_info_notify* other) {
  if (other != this) {
    std::swap(account_id_, other->account_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata nl_syn_account_info_notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = nl_syn_account_info_notify_descriptor_;
  metadata.reflection = nl_syn_account_info_notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int nd_syn_account_info_notify::kAccountIdFieldNumber;
#endif  // !_MSC_VER

nd_syn_account_info_notify::nd_syn_account_info_notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void nd_syn_account_info_notify::InitAsDefaultInstance() {
}

nd_syn_account_info_notify::nd_syn_account_info_notify(const nd_syn_account_info_notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void nd_syn_account_info_notify::SharedCtor() {
  _cached_size_ = 0;
  account_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

nd_syn_account_info_notify::~nd_syn_account_info_notify() {
  SharedDtor();
}

void nd_syn_account_info_notify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void nd_syn_account_info_notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* nd_syn_account_info_notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return nd_syn_account_info_notify_descriptor_;
}

const nd_syn_account_info_notify& nd_syn_account_info_notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

nd_syn_account_info_notify* nd_syn_account_info_notify::default_instance_ = NULL;

nd_syn_account_info_notify* nd_syn_account_info_notify::New() const {
  return new nd_syn_account_info_notify;
}

void nd_syn_account_info_notify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    account_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool nd_syn_account_info_notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
          set_has_account_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void nd_syn_account_info_notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 account_id = 1;
  if (has_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* nd_syn_account_info_notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 account_id = 1;
  if (has_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int nd_syn_account_info_notify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 account_id = 1;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void nd_syn_account_info_notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const nd_syn_account_info_notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const nd_syn_account_info_notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void nd_syn_account_info_notify::MergeFrom(const nd_syn_account_info_notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account_id()) {
      set_account_id(from.account_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void nd_syn_account_info_notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void nd_syn_account_info_notify::CopyFrom(const nd_syn_account_info_notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool nd_syn_account_info_notify::IsInitialized() const {

  return true;
}

void nd_syn_account_info_notify::Swap(nd_syn_account_info_notify* other) {
  if (other != this) {
    std::swap(account_id_, other->account_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata nd_syn_account_info_notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = nd_syn_account_info_notify_descriptor_;
  metadata.reflection = nd_syn_account_info_notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int gd_change_name_request::kNewNameFieldNumber;
const int gd_change_name_request::kCostFieldNumber;
#endif  // !_MSC_VER

gd_change_name_request::gd_change_name_request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gd_change_name_request::InitAsDefaultInstance() {
}

gd_change_name_request::gd_change_name_request(const gd_change_name_request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gd_change_name_request::SharedCtor() {
  _cached_size_ = 0;
  new_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  cost_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gd_change_name_request::~gd_change_name_request() {
  SharedDtor();
}

void gd_change_name_request::SharedDtor() {
  if (new_name_ != &::google::protobuf::internal::kEmptyString) {
    delete new_name_;
  }
  if (this != default_instance_) {
  }
}

void gd_change_name_request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gd_change_name_request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gd_change_name_request_descriptor_;
}

const gd_change_name_request& gd_change_name_request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

gd_change_name_request* gd_change_name_request::default_instance_ = NULL;

gd_change_name_request* gd_change_name_request::New() const {
  return new gd_change_name_request;
}

void gd_change_name_request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_new_name()) {
      if (new_name_ != &::google::protobuf::internal::kEmptyString) {
        new_name_->clear();
      }
    }
    cost_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gd_change_name_request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string new_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_new_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->new_name().data(), this->new_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cost;
        break;
      }

      // optional uint32 cost = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cost_)));
          set_has_cost();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gd_change_name_request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string new_name = 1;
  if (has_new_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->new_name().data(), this->new_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->new_name(), output);
  }

  // optional uint32 cost = 2;
  if (has_cost()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->cost(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gd_change_name_request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string new_name = 1;
  if (has_new_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->new_name().data(), this->new_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->new_name(), target);
  }

  // optional uint32 cost = 2;
  if (has_cost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->cost(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gd_change_name_request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string new_name = 1;
    if (has_new_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->new_name());
    }

    // optional uint32 cost = 2;
    if (has_cost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cost());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gd_change_name_request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gd_change_name_request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gd_change_name_request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gd_change_name_request::MergeFrom(const gd_change_name_request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_new_name()) {
      set_new_name(from.new_name());
    }
    if (from.has_cost()) {
      set_cost(from.cost());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gd_change_name_request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gd_change_name_request::CopyFrom(const gd_change_name_request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gd_change_name_request::IsInitialized() const {

  return true;
}

void gd_change_name_request::Swap(gd_change_name_request* other) {
  if (other != this) {
    std::swap(new_name_, other->new_name_);
    std::swap(cost_, other->cost_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gd_change_name_request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gd_change_name_request_descriptor_;
  metadata.reflection = gd_change_name_request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int dg_change_name_reply::kReplyCodeFieldNumber;
const int dg_change_name_reply::kNewNameFieldNumber;
const int dg_change_name_reply::kCostFieldNumber;
#endif  // !_MSC_VER

dg_change_name_reply::dg_change_name_reply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void dg_change_name_reply::InitAsDefaultInstance() {
}

dg_change_name_reply::dg_change_name_reply(const dg_change_name_reply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void dg_change_name_reply::SharedCtor() {
  _cached_size_ = 0;
  reply_code_ = 0u;
  new_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  cost_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

dg_change_name_reply::~dg_change_name_reply() {
  SharedDtor();
}

void dg_change_name_reply::SharedDtor() {
  if (new_name_ != &::google::protobuf::internal::kEmptyString) {
    delete new_name_;
  }
  if (this != default_instance_) {
  }
}

void dg_change_name_reply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* dg_change_name_reply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return dg_change_name_reply_descriptor_;
}

const dg_change_name_reply& dg_change_name_reply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

dg_change_name_reply* dg_change_name_reply::default_instance_ = NULL;

dg_change_name_reply* dg_change_name_reply::New() const {
  return new dg_change_name_reply;
}

void dg_change_name_reply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    reply_code_ = 0u;
    if (has_new_name()) {
      if (new_name_ != &::google::protobuf::internal::kEmptyString) {
        new_name_->clear();
      }
    }
    cost_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool dg_change_name_reply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 reply_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reply_code_)));
          set_has_reply_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_new_name;
        break;
      }

      // optional string new_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_new_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_new_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->new_name().data(), this->new_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_cost;
        break;
      }

      // optional uint32 cost = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cost_)));
          set_has_cost();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void dg_change_name_reply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 reply_code = 1;
  if (has_reply_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->reply_code(), output);
  }

  // optional string new_name = 2;
  if (has_new_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->new_name().data(), this->new_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->new_name(), output);
  }

  // optional uint32 cost = 3;
  if (has_cost()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->cost(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* dg_change_name_reply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 reply_code = 1;
  if (has_reply_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->reply_code(), target);
  }

  // optional string new_name = 2;
  if (has_new_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->new_name().data(), this->new_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->new_name(), target);
  }

  // optional uint32 cost = 3;
  if (has_cost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->cost(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int dg_change_name_reply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 reply_code = 1;
    if (has_reply_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reply_code());
    }

    // optional string new_name = 2;
    if (has_new_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->new_name());
    }

    // optional uint32 cost = 3;
    if (has_cost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cost());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void dg_change_name_reply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const dg_change_name_reply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const dg_change_name_reply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void dg_change_name_reply::MergeFrom(const dg_change_name_reply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reply_code()) {
      set_reply_code(from.reply_code());
    }
    if (from.has_new_name()) {
      set_new_name(from.new_name());
    }
    if (from.has_cost()) {
      set_cost(from.cost());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void dg_change_name_reply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void dg_change_name_reply::CopyFrom(const dg_change_name_reply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool dg_change_name_reply::IsInitialized() const {

  return true;
}

void dg_change_name_reply::Swap(dg_change_name_reply* other) {
  if (other != this) {
    std::swap(reply_code_, other->reply_code_);
    std::swap(new_name_, other->new_name_);
    std::swap(cost_, other->cost_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata dg_change_name_reply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = dg_change_name_reply_descriptor_;
  metadata.reflection = dg_change_name_reply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int de_change_name_notify::kNewNameFieldNumber;
#endif  // !_MSC_VER

de_change_name_notify::de_change_name_notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void de_change_name_notify::InitAsDefaultInstance() {
}

de_change_name_notify::de_change_name_notify(const de_change_name_notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void de_change_name_notify::SharedCtor() {
  _cached_size_ = 0;
  new_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

de_change_name_notify::~de_change_name_notify() {
  SharedDtor();
}

void de_change_name_notify::SharedDtor() {
  if (new_name_ != &::google::protobuf::internal::kEmptyString) {
    delete new_name_;
  }
  if (this != default_instance_) {
  }
}

void de_change_name_notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* de_change_name_notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return de_change_name_notify_descriptor_;
}

const de_change_name_notify& de_change_name_notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

de_change_name_notify* de_change_name_notify::default_instance_ = NULL;

de_change_name_notify* de_change_name_notify::New() const {
  return new de_change_name_notify;
}

void de_change_name_notify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_new_name()) {
      if (new_name_ != &::google::protobuf::internal::kEmptyString) {
        new_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool de_change_name_notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string new_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_new_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->new_name().data(), this->new_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void de_change_name_notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string new_name = 1;
  if (has_new_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->new_name().data(), this->new_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->new_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* de_change_name_notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string new_name = 1;
  if (has_new_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->new_name().data(), this->new_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->new_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int de_change_name_notify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string new_name = 1;
    if (has_new_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->new_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void de_change_name_notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const de_change_name_notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const de_change_name_notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void de_change_name_notify::MergeFrom(const de_change_name_notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_new_name()) {
      set_new_name(from.new_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void de_change_name_notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void de_change_name_notify::CopyFrom(const de_change_name_notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool de_change_name_notify::IsInitialized() const {

  return true;
}

void de_change_name_notify::Swap(de_change_name_notify* other) {
  if (other != this) {
    std::swap(new_name_, other->new_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata de_change_name_notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = de_change_name_notify_descriptor_;
  metadata.reflection = de_change_name_notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int eh_change_name_notify::kNewNameFieldNumber;
#endif  // !_MSC_VER

eh_change_name_notify::eh_change_name_notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void eh_change_name_notify::InitAsDefaultInstance() {
}

eh_change_name_notify::eh_change_name_notify(const eh_change_name_notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void eh_change_name_notify::SharedCtor() {
  _cached_size_ = 0;
  new_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

eh_change_name_notify::~eh_change_name_notify() {
  SharedDtor();
}

void eh_change_name_notify::SharedDtor() {
  if (new_name_ != &::google::protobuf::internal::kEmptyString) {
    delete new_name_;
  }
  if (this != default_instance_) {
  }
}

void eh_change_name_notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* eh_change_name_notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return eh_change_name_notify_descriptor_;
}

const eh_change_name_notify& eh_change_name_notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

eh_change_name_notify* eh_change_name_notify::default_instance_ = NULL;

eh_change_name_notify* eh_change_name_notify::New() const {
  return new eh_change_name_notify;
}

void eh_change_name_notify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_new_name()) {
      if (new_name_ != &::google::protobuf::internal::kEmptyString) {
        new_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool eh_change_name_notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string new_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_new_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->new_name().data(), this->new_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void eh_change_name_notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string new_name = 1;
  if (has_new_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->new_name().data(), this->new_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->new_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* eh_change_name_notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string new_name = 1;
  if (has_new_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->new_name().data(), this->new_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->new_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int eh_change_name_notify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string new_name = 1;
    if (has_new_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->new_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void eh_change_name_notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const eh_change_name_notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const eh_change_name_notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void eh_change_name_notify::MergeFrom(const eh_change_name_notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_new_name()) {
      set_new_name(from.new_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void eh_change_name_notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void eh_change_name_notify::CopyFrom(const eh_change_name_notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool eh_change_name_notify::IsInitialized() const {

  return true;
}

void eh_change_name_notify::Swap(eh_change_name_notify* other) {
  if (other != this) {
    std::swap(new_name_, other->new_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata eh_change_name_notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = eh_change_name_notify_descriptor_;
  metadata.reflection = eh_change_name_notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int me_reload_config_notify::kLoadTypeFieldNumber;
const int me_reload_config_notify::kFileNameFieldNumber;
#endif  // !_MSC_VER

me_reload_config_notify::me_reload_config_notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void me_reload_config_notify::InitAsDefaultInstance() {
}

me_reload_config_notify::me_reload_config_notify(const me_reload_config_notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void me_reload_config_notify::SharedCtor() {
  _cached_size_ = 0;
  load_type_ = 0u;
  file_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

me_reload_config_notify::~me_reload_config_notify() {
  SharedDtor();
}

void me_reload_config_notify::SharedDtor() {
  if (file_name_ != &::google::protobuf::internal::kEmptyString) {
    delete file_name_;
  }
  if (this != default_instance_) {
  }
}

void me_reload_config_notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* me_reload_config_notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return me_reload_config_notify_descriptor_;
}

const me_reload_config_notify& me_reload_config_notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

me_reload_config_notify* me_reload_config_notify::default_instance_ = NULL;

me_reload_config_notify* me_reload_config_notify::New() const {
  return new me_reload_config_notify;
}

void me_reload_config_notify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    load_type_ = 0u;
    if (has_file_name()) {
      if (file_name_ != &::google::protobuf::internal::kEmptyString) {
        file_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool me_reload_config_notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 load_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &load_type_)));
          set_has_load_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_file_name;
        break;
      }

      // optional string file_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_file_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->file_name().data(), this->file_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void me_reload_config_notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 load_type = 1;
  if (has_load_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->load_type(), output);
  }

  // optional string file_name = 2;
  if (has_file_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->file_name().data(), this->file_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->file_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* me_reload_config_notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 load_type = 1;
  if (has_load_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->load_type(), target);
  }

  // optional string file_name = 2;
  if (has_file_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->file_name().data(), this->file_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->file_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int me_reload_config_notify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 load_type = 1;
    if (has_load_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->load_type());
    }

    // optional string file_name = 2;
    if (has_file_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->file_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void me_reload_config_notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const me_reload_config_notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const me_reload_config_notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void me_reload_config_notify::MergeFrom(const me_reload_config_notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_load_type()) {
      set_load_type(from.load_type());
    }
    if (from.has_file_name()) {
      set_file_name(from.file_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void me_reload_config_notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void me_reload_config_notify::CopyFrom(const me_reload_config_notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool me_reload_config_notify::IsInitialized() const {

  return true;
}

void me_reload_config_notify::Swap(me_reload_config_notify* other) {
  if (other != this) {
    std::swap(load_type_, other->load_type_);
    std::swap(file_name_, other->file_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata me_reload_config_notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = me_reload_config_notify_descriptor_;
  metadata.reflection = me_reload_config_notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int eg_reload_config_notify::kLoadTypeFieldNumber;
const int eg_reload_config_notify::kFileNameFieldNumber;
#endif  // !_MSC_VER

eg_reload_config_notify::eg_reload_config_notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void eg_reload_config_notify::InitAsDefaultInstance() {
}

eg_reload_config_notify::eg_reload_config_notify(const eg_reload_config_notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void eg_reload_config_notify::SharedCtor() {
  _cached_size_ = 0;
  load_type_ = 0u;
  file_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

eg_reload_config_notify::~eg_reload_config_notify() {
  SharedDtor();
}

void eg_reload_config_notify::SharedDtor() {
  if (file_name_ != &::google::protobuf::internal::kEmptyString) {
    delete file_name_;
  }
  if (this != default_instance_) {
  }
}

void eg_reload_config_notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* eg_reload_config_notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return eg_reload_config_notify_descriptor_;
}

const eg_reload_config_notify& eg_reload_config_notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

eg_reload_config_notify* eg_reload_config_notify::default_instance_ = NULL;

eg_reload_config_notify* eg_reload_config_notify::New() const {
  return new eg_reload_config_notify;
}

void eg_reload_config_notify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    load_type_ = 0u;
    if (has_file_name()) {
      if (file_name_ != &::google::protobuf::internal::kEmptyString) {
        file_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool eg_reload_config_notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 load_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &load_type_)));
          set_has_load_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_file_name;
        break;
      }

      // optional string file_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_file_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->file_name().data(), this->file_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void eg_reload_config_notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 load_type = 1;
  if (has_load_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->load_type(), output);
  }

  // optional string file_name = 2;
  if (has_file_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->file_name().data(), this->file_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->file_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* eg_reload_config_notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 load_type = 1;
  if (has_load_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->load_type(), target);
  }

  // optional string file_name = 2;
  if (has_file_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->file_name().data(), this->file_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->file_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int eg_reload_config_notify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 load_type = 1;
    if (has_load_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->load_type());
    }

    // optional string file_name = 2;
    if (has_file_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->file_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void eg_reload_config_notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const eg_reload_config_notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const eg_reload_config_notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void eg_reload_config_notify::MergeFrom(const eg_reload_config_notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_load_type()) {
      set_load_type(from.load_type());
    }
    if (from.has_file_name()) {
      set_file_name(from.file_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void eg_reload_config_notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void eg_reload_config_notify::CopyFrom(const eg_reload_config_notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool eg_reload_config_notify::IsInitialized() const {

  return true;
}

void eg_reload_config_notify::Swap(eg_reload_config_notify* other) {
  if (other != this) {
    std::swap(load_type_, other->load_type_);
    std::swap(file_name_, other->file_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata eg_reload_config_notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = eg_reload_config_notify_descriptor_;
  metadata.reflection = eg_reload_config_notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ge_change_friendliness_request::kMyRoleIdFieldNumber;
const int ge_change_friendliness_request::kFriendRoleIdFieldNumber;
const int ge_change_friendliness_request::kChangeValueFieldNumber;
const int ge_change_friendliness_request::kReasonFieldNumber;
#endif  // !_MSC_VER

ge_change_friendliness_request::ge_change_friendliness_request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ge_change_friendliness_request::InitAsDefaultInstance() {
}

ge_change_friendliness_request::ge_change_friendliness_request(const ge_change_friendliness_request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ge_change_friendliness_request::SharedCtor() {
  _cached_size_ = 0;
  my_role_id_ = GOOGLE_ULONGLONG(0);
  friend_role_id_ = GOOGLE_ULONGLONG(0);
  change_value_ = 0;
  reason_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ge_change_friendliness_request::~ge_change_friendliness_request() {
  SharedDtor();
}

void ge_change_friendliness_request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ge_change_friendliness_request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ge_change_friendliness_request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ge_change_friendliness_request_descriptor_;
}

const ge_change_friendliness_request& ge_change_friendliness_request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

ge_change_friendliness_request* ge_change_friendliness_request::default_instance_ = NULL;

ge_change_friendliness_request* ge_change_friendliness_request::New() const {
  return new ge_change_friendliness_request;
}

void ge_change_friendliness_request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    my_role_id_ = GOOGLE_ULONGLONG(0);
    friend_role_id_ = GOOGLE_ULONGLONG(0);
    change_value_ = 0;
    reason_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ge_change_friendliness_request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 my_role_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &my_role_id_)));
          set_has_my_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_friend_role_id;
        break;
      }

      // optional uint64 friend_role_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_friend_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &friend_role_id_)));
          set_has_friend_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_change_value;
        break;
      }

      // optional int32 change_value = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_change_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &change_value_)));
          set_has_change_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_reason;
        break;
      }

      // optional .proto.common.change_friendliness_reason reason = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reason:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::common::change_friendliness_reason_IsValid(value)) {
            set_reason(static_cast< ::proto::common::change_friendliness_reason >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ge_change_friendliness_request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 my_role_id = 1;
  if (has_my_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->my_role_id(), output);
  }

  // optional uint64 friend_role_id = 2;
  if (has_friend_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->friend_role_id(), output);
  }

  // optional int32 change_value = 3;
  if (has_change_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->change_value(), output);
  }

  // optional .proto.common.change_friendliness_reason reason = 4;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->reason(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ge_change_friendliness_request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 my_role_id = 1;
  if (has_my_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->my_role_id(), target);
  }

  // optional uint64 friend_role_id = 2;
  if (has_friend_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->friend_role_id(), target);
  }

  // optional int32 change_value = 3;
  if (has_change_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->change_value(), target);
  }

  // optional .proto.common.change_friendliness_reason reason = 4;
  if (has_reason()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->reason(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ge_change_friendliness_request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 my_role_id = 1;
    if (has_my_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->my_role_id());
    }

    // optional uint64 friend_role_id = 2;
    if (has_friend_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->friend_role_id());
    }

    // optional int32 change_value = 3;
    if (has_change_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->change_value());
    }

    // optional .proto.common.change_friendliness_reason reason = 4;
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->reason());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ge_change_friendliness_request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ge_change_friendliness_request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ge_change_friendliness_request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ge_change_friendliness_request::MergeFrom(const ge_change_friendliness_request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_my_role_id()) {
      set_my_role_id(from.my_role_id());
    }
    if (from.has_friend_role_id()) {
      set_friend_role_id(from.friend_role_id());
    }
    if (from.has_change_value()) {
      set_change_value(from.change_value());
    }
    if (from.has_reason()) {
      set_reason(from.reason());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ge_change_friendliness_request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ge_change_friendliness_request::CopyFrom(const ge_change_friendliness_request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ge_change_friendliness_request::IsInitialized() const {

  return true;
}

void ge_change_friendliness_request::Swap(ge_change_friendliness_request* other) {
  if (other != this) {
    std::swap(my_role_id_, other->my_role_id_);
    std::swap(friend_role_id_, other->friend_role_id_);
    std::swap(change_value_, other->change_value_);
    std::swap(reason_, other->reason_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ge_change_friendliness_request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ge_change_friendliness_request_descriptor_;
  metadata.reflection = ge_change_friendliness_request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int eg_change_friendliness_notify::kMyRoleIdFieldNumber;
const int eg_change_friendliness_notify::kFriendRoleIdFieldNumber;
const int eg_change_friendliness_notify::kChangeValueFieldNumber;
const int eg_change_friendliness_notify::kReasonFieldNumber;
#endif  // !_MSC_VER

eg_change_friendliness_notify::eg_change_friendliness_notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void eg_change_friendliness_notify::InitAsDefaultInstance() {
}

eg_change_friendliness_notify::eg_change_friendliness_notify(const eg_change_friendliness_notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void eg_change_friendliness_notify::SharedCtor() {
  _cached_size_ = 0;
  my_role_id_ = GOOGLE_ULONGLONG(0);
  friend_role_id_ = GOOGLE_ULONGLONG(0);
  change_value_ = 0;
  reason_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

eg_change_friendliness_notify::~eg_change_friendliness_notify() {
  SharedDtor();
}

void eg_change_friendliness_notify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void eg_change_friendliness_notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* eg_change_friendliness_notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return eg_change_friendliness_notify_descriptor_;
}

const eg_change_friendliness_notify& eg_change_friendliness_notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

eg_change_friendliness_notify* eg_change_friendliness_notify::default_instance_ = NULL;

eg_change_friendliness_notify* eg_change_friendliness_notify::New() const {
  return new eg_change_friendliness_notify;
}

void eg_change_friendliness_notify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    my_role_id_ = GOOGLE_ULONGLONG(0);
    friend_role_id_ = GOOGLE_ULONGLONG(0);
    change_value_ = 0;
    reason_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool eg_change_friendliness_notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 my_role_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &my_role_id_)));
          set_has_my_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_friend_role_id;
        break;
      }

      // optional uint64 friend_role_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_friend_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &friend_role_id_)));
          set_has_friend_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_change_value;
        break;
      }

      // optional int32 change_value = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_change_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &change_value_)));
          set_has_change_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_reason;
        break;
      }

      // optional .proto.common.change_friendliness_reason reason = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reason:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::common::change_friendliness_reason_IsValid(value)) {
            set_reason(static_cast< ::proto::common::change_friendliness_reason >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void eg_change_friendliness_notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 my_role_id = 1;
  if (has_my_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->my_role_id(), output);
  }

  // optional uint64 friend_role_id = 2;
  if (has_friend_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->friend_role_id(), output);
  }

  // optional int32 change_value = 3;
  if (has_change_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->change_value(), output);
  }

  // optional .proto.common.change_friendliness_reason reason = 4;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->reason(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* eg_change_friendliness_notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 my_role_id = 1;
  if (has_my_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->my_role_id(), target);
  }

  // optional uint64 friend_role_id = 2;
  if (has_friend_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->friend_role_id(), target);
  }

  // optional int32 change_value = 3;
  if (has_change_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->change_value(), target);
  }

  // optional .proto.common.change_friendliness_reason reason = 4;
  if (has_reason()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->reason(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int eg_change_friendliness_notify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 my_role_id = 1;
    if (has_my_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->my_role_id());
    }

    // optional uint64 friend_role_id = 2;
    if (has_friend_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->friend_role_id());
    }

    // optional int32 change_value = 3;
    if (has_change_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->change_value());
    }

    // optional .proto.common.change_friendliness_reason reason = 4;
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->reason());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void eg_change_friendliness_notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const eg_change_friendliness_notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const eg_change_friendliness_notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void eg_change_friendliness_notify::MergeFrom(const eg_change_friendliness_notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_my_role_id()) {
      set_my_role_id(from.my_role_id());
    }
    if (from.has_friend_role_id()) {
      set_friend_role_id(from.friend_role_id());
    }
    if (from.has_change_value()) {
      set_change_value(from.change_value());
    }
    if (from.has_reason()) {
      set_reason(from.reason());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void eg_change_friendliness_notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void eg_change_friendliness_notify::CopyFrom(const eg_change_friendliness_notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool eg_change_friendliness_notify::IsInitialized() const {

  return true;
}

void eg_change_friendliness_notify::Swap(eg_change_friendliness_notify* other) {
  if (other != this) {
    std::swap(my_role_id_, other->my_role_id_);
    std::swap(friend_role_id_, other->friend_role_id_);
    std::swap(change_value_, other->change_value_);
    std::swap(reason_, other->reason_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata eg_change_friendliness_notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = eg_change_friendliness_notify_descriptor_;
  metadata.reflection = eg_change_friendliness_notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ge_get_friendliness_request::kRoleIdFieldNumber;
#endif  // !_MSC_VER

ge_get_friendliness_request::ge_get_friendliness_request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ge_get_friendliness_request::InitAsDefaultInstance() {
}

ge_get_friendliness_request::ge_get_friendliness_request(const ge_get_friendliness_request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ge_get_friendliness_request::SharedCtor() {
  _cached_size_ = 0;
  role_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ge_get_friendliness_request::~ge_get_friendliness_request() {
  SharedDtor();
}

void ge_get_friendliness_request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ge_get_friendliness_request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ge_get_friendliness_request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ge_get_friendliness_request_descriptor_;
}

const ge_get_friendliness_request& ge_get_friendliness_request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

ge_get_friendliness_request* ge_get_friendliness_request::default_instance_ = NULL;

ge_get_friendliness_request* ge_get_friendliness_request::New() const {
  return new ge_get_friendliness_request;
}

void ge_get_friendliness_request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ge_get_friendliness_request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 role_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ge_get_friendliness_request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 role_id = 1;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->role_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ge_get_friendliness_request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 role_id = 1;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->role_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ge_get_friendliness_request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 role_id = 1;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ge_get_friendliness_request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ge_get_friendliness_request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ge_get_friendliness_request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ge_get_friendliness_request::MergeFrom(const ge_get_friendliness_request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ge_get_friendliness_request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ge_get_friendliness_request::CopyFrom(const ge_get_friendliness_request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ge_get_friendliness_request::IsInitialized() const {

  return true;
}

void ge_get_friendliness_request::Swap(ge_get_friendliness_request* other) {
  if (other != this) {
    std::swap(role_id_, other->role_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ge_get_friendliness_request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ge_get_friendliness_request_descriptor_;
  metadata.reflection = ge_get_friendliness_request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int player_friendliness::kFriendRoleIdFieldNumber;
const int player_friendliness::kFriendlinessFieldNumber;
#endif  // !_MSC_VER

player_friendliness::player_friendliness()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void player_friendliness::InitAsDefaultInstance() {
}

player_friendliness::player_friendliness(const player_friendliness& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void player_friendliness::SharedCtor() {
  _cached_size_ = 0;
  friend_role_id_ = GOOGLE_ULONGLONG(0);
  friendliness_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

player_friendliness::~player_friendliness() {
  SharedDtor();
}

void player_friendliness::SharedDtor() {
  if (this != default_instance_) {
  }
}

void player_friendliness::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* player_friendliness::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return player_friendliness_descriptor_;
}

const player_friendliness& player_friendliness::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

player_friendliness* player_friendliness::default_instance_ = NULL;

player_friendliness* player_friendliness::New() const {
  return new player_friendliness;
}

void player_friendliness::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    friend_role_id_ = GOOGLE_ULONGLONG(0);
    friendliness_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool player_friendliness::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 friend_role_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &friend_role_id_)));
          set_has_friend_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_friendliness;
        break;
      }

      // optional uint32 friendliness = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_friendliness:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &friendliness_)));
          set_has_friendliness();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void player_friendliness::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 friend_role_id = 1;
  if (has_friend_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->friend_role_id(), output);
  }

  // optional uint32 friendliness = 2;
  if (has_friendliness()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->friendliness(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* player_friendliness::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 friend_role_id = 1;
  if (has_friend_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->friend_role_id(), target);
  }

  // optional uint32 friendliness = 2;
  if (has_friendliness()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->friendliness(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int player_friendliness::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 friend_role_id = 1;
    if (has_friend_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->friend_role_id());
    }

    // optional uint32 friendliness = 2;
    if (has_friendliness()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->friendliness());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void player_friendliness::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const player_friendliness* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const player_friendliness*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void player_friendliness::MergeFrom(const player_friendliness& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_friend_role_id()) {
      set_friend_role_id(from.friend_role_id());
    }
    if (from.has_friendliness()) {
      set_friendliness(from.friendliness());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void player_friendliness::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void player_friendliness::CopyFrom(const player_friendliness& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool player_friendliness::IsInitialized() const {

  return true;
}

void player_friendliness::Swap(player_friendliness* other) {
  if (other != this) {
    std::swap(friend_role_id_, other->friend_role_id_);
    std::swap(friendliness_, other->friendliness_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata player_friendliness::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = player_friendliness_descriptor_;
  metadata.reflection = player_friendliness_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int eg_get_friendliness_reply::kRoleIdFieldNumber;
const int eg_get_friendliness_reply::kFriendlinessFieldNumber;
#endif  // !_MSC_VER

eg_get_friendliness_reply::eg_get_friendliness_reply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void eg_get_friendliness_reply::InitAsDefaultInstance() {
}

eg_get_friendliness_reply::eg_get_friendliness_reply(const eg_get_friendliness_reply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void eg_get_friendliness_reply::SharedCtor() {
  _cached_size_ = 0;
  role_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

eg_get_friendliness_reply::~eg_get_friendliness_reply() {
  SharedDtor();
}

void eg_get_friendliness_reply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void eg_get_friendliness_reply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* eg_get_friendliness_reply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return eg_get_friendliness_reply_descriptor_;
}

const eg_get_friendliness_reply& eg_get_friendliness_reply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

eg_get_friendliness_reply* eg_get_friendliness_reply::default_instance_ = NULL;

eg_get_friendliness_reply* eg_get_friendliness_reply::New() const {
  return new eg_get_friendliness_reply;
}

void eg_get_friendliness_reply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_id_ = GOOGLE_ULONGLONG(0);
  }
  friendliness_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool eg_get_friendliness_reply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 role_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_friendliness;
        break;
      }

      // repeated .proto.server.player_friendliness friendliness = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_friendliness:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_friendliness()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_friendliness;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void eg_get_friendliness_reply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 role_id = 1;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->role_id(), output);
  }

  // repeated .proto.server.player_friendliness friendliness = 2;
  for (int i = 0; i < this->friendliness_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->friendliness(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* eg_get_friendliness_reply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 role_id = 1;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->role_id(), target);
  }

  // repeated .proto.server.player_friendliness friendliness = 2;
  for (int i = 0; i < this->friendliness_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->friendliness(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int eg_get_friendliness_reply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 role_id = 1;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_id());
    }

  }
  // repeated .proto.server.player_friendliness friendliness = 2;
  total_size += 1 * this->friendliness_size();
  for (int i = 0; i < this->friendliness_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->friendliness(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void eg_get_friendliness_reply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const eg_get_friendliness_reply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const eg_get_friendliness_reply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void eg_get_friendliness_reply::MergeFrom(const eg_get_friendliness_reply& from) {
  GOOGLE_CHECK_NE(&from, this);
  friendliness_.MergeFrom(from.friendliness_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void eg_get_friendliness_reply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void eg_get_friendliness_reply::CopyFrom(const eg_get_friendliness_reply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool eg_get_friendliness_reply::IsInitialized() const {

  return true;
}

void eg_get_friendliness_reply::Swap(eg_get_friendliness_reply* other) {
  if (other != this) {
    std::swap(role_id_, other->role_id_);
    friendliness_.Swap(&other->friendliness_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata eg_get_friendliness_reply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = eg_get_friendliness_reply_descriptor_;
  metadata.reflection = eg_get_friendliness_reply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int eg_friend_point_operation_request::kRoleIdFieldNumber;
const int eg_friend_point_operation_request::kFriendRoleIdFieldNumber;
const int eg_friend_point_operation_request::kOperationFieldNumber;
const int eg_friend_point_operation_request::kParameter1FieldNumber;
const int eg_friend_point_operation_request::kParameter2FieldNumber;
#endif  // !_MSC_VER

eg_friend_point_operation_request::eg_friend_point_operation_request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void eg_friend_point_operation_request::InitAsDefaultInstance() {
}

eg_friend_point_operation_request::eg_friend_point_operation_request(const eg_friend_point_operation_request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void eg_friend_point_operation_request::SharedCtor() {
  _cached_size_ = 0;
  role_id_ = GOOGLE_ULONGLONG(0);
  friend_role_id_ = GOOGLE_ULONGLONG(0);
  operation_ = 1;
  parameter1_ = 0;
  parameter2_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

eg_friend_point_operation_request::~eg_friend_point_operation_request() {
  SharedDtor();
}

void eg_friend_point_operation_request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void eg_friend_point_operation_request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* eg_friend_point_operation_request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return eg_friend_point_operation_request_descriptor_;
}

const eg_friend_point_operation_request& eg_friend_point_operation_request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

eg_friend_point_operation_request* eg_friend_point_operation_request::default_instance_ = NULL;

eg_friend_point_operation_request* eg_friend_point_operation_request::New() const {
  return new eg_friend_point_operation_request;
}

void eg_friend_point_operation_request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_id_ = GOOGLE_ULONGLONG(0);
    friend_role_id_ = GOOGLE_ULONGLONG(0);
    operation_ = 1;
    parameter1_ = 0;
    parameter2_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool eg_friend_point_operation_request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 role_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_friend_role_id;
        break;
      }

      // optional uint64 friend_role_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_friend_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &friend_role_id_)));
          set_has_friend_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_operation;
        break;
      }

      // optional .proto.server.friend_point_operation operation = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_operation:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::server::friend_point_operation_IsValid(value)) {
            set_operation(static_cast< ::proto::server::friend_point_operation >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_parameter1;
        break;
      }

      // optional int32 parameter1 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_parameter1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &parameter1_)));
          set_has_parameter1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_parameter2;
        break;
      }

      // optional int32 parameter2 = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_parameter2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &parameter2_)));
          set_has_parameter2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void eg_friend_point_operation_request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 role_id = 1;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->role_id(), output);
  }

  // optional uint64 friend_role_id = 2;
  if (has_friend_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->friend_role_id(), output);
  }

  // optional .proto.server.friend_point_operation operation = 3;
  if (has_operation()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->operation(), output);
  }

  // optional int32 parameter1 = 4;
  if (has_parameter1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->parameter1(), output);
  }

  // optional int32 parameter2 = 5;
  if (has_parameter2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->parameter2(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* eg_friend_point_operation_request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 role_id = 1;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->role_id(), target);
  }

  // optional uint64 friend_role_id = 2;
  if (has_friend_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->friend_role_id(), target);
  }

  // optional .proto.server.friend_point_operation operation = 3;
  if (has_operation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->operation(), target);
  }

  // optional int32 parameter1 = 4;
  if (has_parameter1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->parameter1(), target);
  }

  // optional int32 parameter2 = 5;
  if (has_parameter2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->parameter2(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int eg_friend_point_operation_request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 role_id = 1;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_id());
    }

    // optional uint64 friend_role_id = 2;
    if (has_friend_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->friend_role_id());
    }

    // optional .proto.server.friend_point_operation operation = 3;
    if (has_operation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->operation());
    }

    // optional int32 parameter1 = 4;
    if (has_parameter1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->parameter1());
    }

    // optional int32 parameter2 = 5;
    if (has_parameter2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->parameter2());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void eg_friend_point_operation_request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const eg_friend_point_operation_request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const eg_friend_point_operation_request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void eg_friend_point_operation_request::MergeFrom(const eg_friend_point_operation_request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_friend_role_id()) {
      set_friend_role_id(from.friend_role_id());
    }
    if (from.has_operation()) {
      set_operation(from.operation());
    }
    if (from.has_parameter1()) {
      set_parameter1(from.parameter1());
    }
    if (from.has_parameter2()) {
      set_parameter2(from.parameter2());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void eg_friend_point_operation_request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void eg_friend_point_operation_request::CopyFrom(const eg_friend_point_operation_request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool eg_friend_point_operation_request::IsInitialized() const {

  return true;
}

void eg_friend_point_operation_request::Swap(eg_friend_point_operation_request* other) {
  if (other != this) {
    std::swap(role_id_, other->role_id_);
    std::swap(friend_role_id_, other->friend_role_id_);
    std::swap(operation_, other->operation_);
    std::swap(parameter1_, other->parameter1_);
    std::swap(parameter2_, other->parameter2_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata eg_friend_point_operation_request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = eg_friend_point_operation_request_descriptor_;
  metadata.reflection = eg_friend_point_operation_request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ge_friend_point_operation_reply::kRoleIdFieldNumber;
const int ge_friend_point_operation_reply::kFriendRoleIdFieldNumber;
const int ge_friend_point_operation_reply::kOperationFieldNumber;
const int ge_friend_point_operation_reply::kParameter1FieldNumber;
const int ge_friend_point_operation_reply::kParameter2FieldNumber;
const int ge_friend_point_operation_reply::kInfo1FieldNumber;
const int ge_friend_point_operation_reply::kInfo2FieldNumber;
const int ge_friend_point_operation_reply::kInfo3FieldNumber;
const int ge_friend_point_operation_reply::kChangeDataFieldNumber;
const int ge_friend_point_operation_reply::kReplyCodeFieldNumber;
const int ge_friend_point_operation_reply::kInfo4FieldNumber;
#endif  // !_MSC_VER

ge_friend_point_operation_reply::ge_friend_point_operation_reply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ge_friend_point_operation_reply::InitAsDefaultInstance() {
  change_data_ = const_cast< ::proto::common::role_change_data*>(&::proto::common::role_change_data::default_instance());
}

ge_friend_point_operation_reply::ge_friend_point_operation_reply(const ge_friend_point_operation_reply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ge_friend_point_operation_reply::SharedCtor() {
  _cached_size_ = 0;
  role_id_ = GOOGLE_ULONGLONG(0);
  friend_role_id_ = GOOGLE_ULONGLONG(0);
  operation_ = 1;
  parameter1_ = 0;
  parameter2_ = 0;
  info1_ = 0;
  info2_ = 0;
  info3_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  change_data_ = NULL;
  reply_code_ = 0;
  info4_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ge_friend_point_operation_reply::~ge_friend_point_operation_reply() {
  SharedDtor();
}

void ge_friend_point_operation_reply::SharedDtor() {
  if (info3_ != &::google::protobuf::internal::kEmptyString) {
    delete info3_;
  }
  if (this != default_instance_) {
    delete change_data_;
  }
}

void ge_friend_point_operation_reply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ge_friend_point_operation_reply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ge_friend_point_operation_reply_descriptor_;
}

const ge_friend_point_operation_reply& ge_friend_point_operation_reply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

ge_friend_point_operation_reply* ge_friend_point_operation_reply::default_instance_ = NULL;

ge_friend_point_operation_reply* ge_friend_point_operation_reply::New() const {
  return new ge_friend_point_operation_reply;
}

void ge_friend_point_operation_reply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_id_ = GOOGLE_ULONGLONG(0);
    friend_role_id_ = GOOGLE_ULONGLONG(0);
    operation_ = 1;
    parameter1_ = 0;
    parameter2_ = 0;
    info1_ = 0;
    info2_ = 0;
    if (has_info3()) {
      if (info3_ != &::google::protobuf::internal::kEmptyString) {
        info3_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_change_data()) {
      if (change_data_ != NULL) change_data_->::proto::common::role_change_data::Clear();
    }
    reply_code_ = 0;
    info4_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ge_friend_point_operation_reply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 role_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_friend_role_id;
        break;
      }

      // optional uint64 friend_role_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_friend_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &friend_role_id_)));
          set_has_friend_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_operation;
        break;
      }

      // optional .proto.server.friend_point_operation operation = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_operation:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::server::friend_point_operation_IsValid(value)) {
            set_operation(static_cast< ::proto::server::friend_point_operation >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_parameter1;
        break;
      }

      // optional int32 parameter1 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_parameter1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &parameter1_)));
          set_has_parameter1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_parameter2;
        break;
      }

      // optional int32 parameter2 = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_parameter2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &parameter2_)));
          set_has_parameter2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_info1;
        break;
      }

      // optional int32 info1 = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_info1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &info1_)));
          set_has_info1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_info2;
        break;
      }

      // optional int32 info2 = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_info2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &info2_)));
          set_has_info2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_change_data;
        break;
      }

      // optional .proto.common.role_change_data change_data = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_change_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_change_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_reply_code;
        break;
      }

      // optional int32 reply_code = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reply_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reply_code_)));
          set_has_reply_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_info3;
        break;
      }

      // optional string info3 = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info3:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_info3()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->info3().data(), this->info3().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_info4;
        break;
      }

      // optional int32 info4 = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_info4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &info4_)));
          set_has_info4();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ge_friend_point_operation_reply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 role_id = 1;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->role_id(), output);
  }

  // optional uint64 friend_role_id = 2;
  if (has_friend_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->friend_role_id(), output);
  }

  // optional .proto.server.friend_point_operation operation = 3;
  if (has_operation()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->operation(), output);
  }

  // optional int32 parameter1 = 4;
  if (has_parameter1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->parameter1(), output);
  }

  // optional int32 parameter2 = 5;
  if (has_parameter2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->parameter2(), output);
  }

  // optional int32 info1 = 6;
  if (has_info1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->info1(), output);
  }

  // optional int32 info2 = 7;
  if (has_info2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->info2(), output);
  }

  // optional .proto.common.role_change_data change_data = 8;
  if (has_change_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->change_data(), output);
  }

  // optional int32 reply_code = 9;
  if (has_reply_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->reply_code(), output);
  }

  // optional string info3 = 10;
  if (has_info3()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->info3().data(), this->info3().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->info3(), output);
  }

  // optional int32 info4 = 11;
  if (has_info4()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->info4(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ge_friend_point_operation_reply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 role_id = 1;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->role_id(), target);
  }

  // optional uint64 friend_role_id = 2;
  if (has_friend_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->friend_role_id(), target);
  }

  // optional .proto.server.friend_point_operation operation = 3;
  if (has_operation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->operation(), target);
  }

  // optional int32 parameter1 = 4;
  if (has_parameter1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->parameter1(), target);
  }

  // optional int32 parameter2 = 5;
  if (has_parameter2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->parameter2(), target);
  }

  // optional int32 info1 = 6;
  if (has_info1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->info1(), target);
  }

  // optional int32 info2 = 7;
  if (has_info2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->info2(), target);
  }

  // optional .proto.common.role_change_data change_data = 8;
  if (has_change_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->change_data(), target);
  }

  // optional int32 reply_code = 9;
  if (has_reply_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->reply_code(), target);
  }

  // optional string info3 = 10;
  if (has_info3()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->info3().data(), this->info3().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->info3(), target);
  }

  // optional int32 info4 = 11;
  if (has_info4()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->info4(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ge_friend_point_operation_reply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 role_id = 1;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_id());
    }

    // optional uint64 friend_role_id = 2;
    if (has_friend_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->friend_role_id());
    }

    // optional .proto.server.friend_point_operation operation = 3;
    if (has_operation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->operation());
    }

    // optional int32 parameter1 = 4;
    if (has_parameter1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->parameter1());
    }

    // optional int32 parameter2 = 5;
    if (has_parameter2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->parameter2());
    }

    // optional int32 info1 = 6;
    if (has_info1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->info1());
    }

    // optional int32 info2 = 7;
    if (has_info2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->info2());
    }

    // optional string info3 = 10;
    if (has_info3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->info3());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .proto.common.role_change_data change_data = 8;
    if (has_change_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->change_data());
    }

    // optional int32 reply_code = 9;
    if (has_reply_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reply_code());
    }

    // optional int32 info4 = 11;
    if (has_info4()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->info4());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ge_friend_point_operation_reply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ge_friend_point_operation_reply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ge_friend_point_operation_reply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ge_friend_point_operation_reply::MergeFrom(const ge_friend_point_operation_reply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_friend_role_id()) {
      set_friend_role_id(from.friend_role_id());
    }
    if (from.has_operation()) {
      set_operation(from.operation());
    }
    if (from.has_parameter1()) {
      set_parameter1(from.parameter1());
    }
    if (from.has_parameter2()) {
      set_parameter2(from.parameter2());
    }
    if (from.has_info1()) {
      set_info1(from.info1());
    }
    if (from.has_info2()) {
      set_info2(from.info2());
    }
    if (from.has_info3()) {
      set_info3(from.info3());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_change_data()) {
      mutable_change_data()->::proto::common::role_change_data::MergeFrom(from.change_data());
    }
    if (from.has_reply_code()) {
      set_reply_code(from.reply_code());
    }
    if (from.has_info4()) {
      set_info4(from.info4());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ge_friend_point_operation_reply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ge_friend_point_operation_reply::CopyFrom(const ge_friend_point_operation_reply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ge_friend_point_operation_reply::IsInitialized() const {

  return true;
}

void ge_friend_point_operation_reply::Swap(ge_friend_point_operation_reply* other) {
  if (other != this) {
    std::swap(role_id_, other->role_id_);
    std::swap(friend_role_id_, other->friend_role_id_);
    std::swap(operation_, other->operation_);
    std::swap(parameter1_, other->parameter1_);
    std::swap(parameter2_, other->parameter2_);
    std::swap(info1_, other->info1_);
    std::swap(info2_, other->info2_);
    std::swap(info3_, other->info3_);
    std::swap(change_data_, other->change_data_);
    std::swap(reply_code_, other->reply_code_);
    std::swap(info4_, other->info4_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ge_friend_point_operation_reply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ge_friend_point_operation_reply_descriptor_;
  metadata.reflection = ge_friend_point_operation_reply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int sv_cross_area_video_notify::kBaseFieldNumber;
const int sv_cross_area_video_notify::kFightDataFieldNumber;
#endif  // !_MSC_VER

sv_cross_area_video_notify::sv_cross_area_video_notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void sv_cross_area_video_notify::InitAsDefaultInstance() {
  base_ = const_cast< ::proto::common::video_single_base*>(&::proto::common::video_single_base::default_instance());
}

sv_cross_area_video_notify::sv_cross_area_video_notify(const sv_cross_area_video_notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void sv_cross_area_video_notify::SharedCtor() {
  _cached_size_ = 0;
  base_ = NULL;
  fight_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

sv_cross_area_video_notify::~sv_cross_area_video_notify() {
  SharedDtor();
}

void sv_cross_area_video_notify::SharedDtor() {
  if (fight_data_ != &::google::protobuf::internal::kEmptyString) {
    delete fight_data_;
  }
  if (this != default_instance_) {
    delete base_;
  }
}

void sv_cross_area_video_notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* sv_cross_area_video_notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return sv_cross_area_video_notify_descriptor_;
}

const sv_cross_area_video_notify& sv_cross_area_video_notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

sv_cross_area_video_notify* sv_cross_area_video_notify::default_instance_ = NULL;

sv_cross_area_video_notify* sv_cross_area_video_notify::New() const {
  return new sv_cross_area_video_notify;
}

void sv_cross_area_video_notify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_base()) {
      if (base_ != NULL) base_->::proto::common::video_single_base::Clear();
    }
    if (has_fight_data()) {
      if (fight_data_ != &::google::protobuf::internal::kEmptyString) {
        fight_data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool sv_cross_area_video_notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.common.video_single_base base = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_fight_data;
        break;
      }

      // optional bytes fight_data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fight_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_fight_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void sv_cross_area_video_notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .proto.common.video_single_base base = 1;
  if (has_base()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->base(), output);
  }

  // optional bytes fight_data = 2;
  if (has_fight_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->fight_data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* sv_cross_area_video_notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .proto.common.video_single_base base = 1;
  if (has_base()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->base(), target);
  }

  // optional bytes fight_data = 2;
  if (has_fight_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->fight_data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int sv_cross_area_video_notify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .proto.common.video_single_base base = 1;
    if (has_base()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->base());
    }

    // optional bytes fight_data = 2;
    if (has_fight_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->fight_data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sv_cross_area_video_notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const sv_cross_area_video_notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const sv_cross_area_video_notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void sv_cross_area_video_notify::MergeFrom(const sv_cross_area_video_notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_base()) {
      mutable_base()->::proto::common::video_single_base::MergeFrom(from.base());
    }
    if (from.has_fight_data()) {
      set_fight_data(from.fight_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void sv_cross_area_video_notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void sv_cross_area_video_notify::CopyFrom(const sv_cross_area_video_notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sv_cross_area_video_notify::IsInitialized() const {

  return true;
}

void sv_cross_area_video_notify::Swap(sv_cross_area_video_notify* other) {
  if (other != this) {
    std::swap(base_, other->base_);
    std::swap(fight_data_, other->fight_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata sv_cross_area_video_notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = sv_cross_area_video_notify_descriptor_;
  metadata.reflection = sv_cross_area_video_notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int gv_tower_video_notify::kBaseFieldNumber;
const int gv_tower_video_notify::kFightDataFieldNumber;
#endif  // !_MSC_VER

gv_tower_video_notify::gv_tower_video_notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gv_tower_video_notify::InitAsDefaultInstance() {
  base_ = const_cast< ::proto::common::video_single_base*>(&::proto::common::video_single_base::default_instance());
}

gv_tower_video_notify::gv_tower_video_notify(const gv_tower_video_notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gv_tower_video_notify::SharedCtor() {
  _cached_size_ = 0;
  base_ = NULL;
  fight_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gv_tower_video_notify::~gv_tower_video_notify() {
  SharedDtor();
}

void gv_tower_video_notify::SharedDtor() {
  if (fight_data_ != &::google::protobuf::internal::kEmptyString) {
    delete fight_data_;
  }
  if (this != default_instance_) {
    delete base_;
  }
}

void gv_tower_video_notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gv_tower_video_notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gv_tower_video_notify_descriptor_;
}

const gv_tower_video_notify& gv_tower_video_notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

gv_tower_video_notify* gv_tower_video_notify::default_instance_ = NULL;

gv_tower_video_notify* gv_tower_video_notify::New() const {
  return new gv_tower_video_notify;
}

void gv_tower_video_notify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_base()) {
      if (base_ != NULL) base_->::proto::common::video_single_base::Clear();
    }
    if (has_fight_data()) {
      if (fight_data_ != &::google::protobuf::internal::kEmptyString) {
        fight_data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gv_tower_video_notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.common.video_single_base base = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_fight_data;
        break;
      }

      // optional bytes fight_data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fight_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_fight_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gv_tower_video_notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .proto.common.video_single_base base = 1;
  if (has_base()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->base(), output);
  }

  // optional bytes fight_data = 2;
  if (has_fight_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->fight_data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gv_tower_video_notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .proto.common.video_single_base base = 1;
  if (has_base()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->base(), target);
  }

  // optional bytes fight_data = 2;
  if (has_fight_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->fight_data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gv_tower_video_notify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .proto.common.video_single_base base = 1;
    if (has_base()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->base());
    }

    // optional bytes fight_data = 2;
    if (has_fight_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->fight_data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gv_tower_video_notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gv_tower_video_notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gv_tower_video_notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gv_tower_video_notify::MergeFrom(const gv_tower_video_notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_base()) {
      mutable_base()->::proto::common::video_single_base::MergeFrom(from.base());
    }
    if (from.has_fight_data()) {
      set_fight_data(from.fight_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gv_tower_video_notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gv_tower_video_notify::CopyFrom(const gv_tower_video_notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gv_tower_video_notify::IsInitialized() const {

  return true;
}

void gv_tower_video_notify::Swap(gv_tower_video_notify* other) {
  if (other != this) {
    std::swap(base_, other->base_);
    std::swap(fight_data_, other->fight_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gv_tower_video_notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gv_tower_video_notify_descriptor_;
  metadata.reflection = gv_tower_video_notify_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace server
}  // namespace proto

// @@protoc_insertion_point(global_scope)
