// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gm.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "gm.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto {
namespace gm {

namespace {

const ::google::protobuf::Descriptor* tm_monitor_get_user_info_request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  tm_monitor_get_user_info_request_reflection_ = NULL;
const ::google::protobuf::Descriptor* mt_monitor_get_user_info_reply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mt_monitor_get_user_info_reply_reflection_ = NULL;
const ::google::protobuf::Descriptor* tm_monitor_get_recharge_count_request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  tm_monitor_get_recharge_count_request_reflection_ = NULL;
const ::google::protobuf::Descriptor* mt_monitor_get_recharge_count_reply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mt_monitor_get_recharge_count_reply_reflection_ = NULL;
const ::google::protobuf::Descriptor* tm_set_user_data_request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  tm_set_user_data_request_reflection_ = NULL;
const ::google::protobuf::Descriptor* mt_set_user_data_reply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mt_set_user_data_reply_reflection_ = NULL;
const ::google::protobuf::Descriptor* tm_monitor_get_item_info_request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  tm_monitor_get_item_info_request_reflection_ = NULL;
const ::google::protobuf::Descriptor* mt_monitor_get_item_info_reply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mt_monitor_get_item_info_reply_reflection_ = NULL;
const ::google::protobuf::Descriptor* tm_monitor_get_hero_info_request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  tm_monitor_get_hero_info_request_reflection_ = NULL;
const ::google::protobuf::Descriptor* mt_monitor_get_hero_info_reply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mt_monitor_get_hero_info_reply_reflection_ = NULL;
const ::google::protobuf::Descriptor* tm_monitor_get_consume_record_request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  tm_monitor_get_consume_record_request_reflection_ = NULL;
const ::google::protobuf::Descriptor* mt_monitor_get_consume_record_reply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mt_monitor_get_consume_record_reply_reflection_ = NULL;
const ::google::protobuf::Descriptor* tm_monitor_get_pve_info_request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  tm_monitor_get_pve_info_request_reflection_ = NULL;
const ::google::protobuf::Descriptor* mt_monitor_get_pve_info_reply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mt_monitor_get_pve_info_reply_reflection_ = NULL;
const ::google::protobuf::Descriptor* tm_send_mail_request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  tm_send_mail_request_reflection_ = NULL;
const ::google::protobuf::Descriptor* mt_send_mail_reply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mt_send_mail_reply_reflection_ = NULL;
const ::google::protobuf::Descriptor* tm_monitor_get_equip_info_request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  tm_monitor_get_equip_info_request_reflection_ = NULL;
const ::google::protobuf::Descriptor* mt_monitor_get_equip_info_reply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mt_monitor_get_equip_info_reply_reflection_ = NULL;
const ::google::protobuf::Descriptor* tm_monitor_get_pvp_info_request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  tm_monitor_get_pvp_info_request_reflection_ = NULL;
const ::google::protobuf::Descriptor* mt_monitor_get_pvp_info_reply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mt_monitor_get_pvp_info_reply_reflection_ = NULL;
const ::google::protobuf::Descriptor* tm_manage_role_byid_request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  tm_manage_role_byid_request_reflection_ = NULL;
const ::google::protobuf::Descriptor* mt_manage_role_byid_reply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mt_manage_role_byid_reply_reflection_ = NULL;
const ::google::protobuf::Descriptor* tm_manage_role_byname_request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  tm_manage_role_byname_request_reflection_ = NULL;
const ::google::protobuf::Descriptor* mt_manage_role_byname_reply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mt_manage_role_byname_reply_reflection_ = NULL;
const ::google::protobuf::Descriptor* tm_manage_ban_state_query_request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  tm_manage_ban_state_query_request_reflection_ = NULL;
const ::google::protobuf::Descriptor* mt_manage_ban_state_query_reply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mt_manage_ban_state_query_reply_reflection_ = NULL;
const ::google::protobuf::Descriptor* tm_monitor_get_behavior_records_request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  tm_monitor_get_behavior_records_request_reflection_ = NULL;
const ::google::protobuf::Descriptor* mt_monitor_get_behavior_records_reply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mt_monitor_get_behavior_records_reply_reflection_ = NULL;
const ::google::protobuf::Descriptor* ma_masked_msg_notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ma_masked_msg_notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* tm_reload_config_notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  tm_reload_config_notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* me_ban_account_notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  me_ban_account_notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* me_access_ip_notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  me_access_ip_notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* tm_test_request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  tm_test_request_reflection_ = NULL;
const ::google::protobuf::Descriptor* mt_test_reply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mt_test_reply_reflection_ = NULL;
const ::google::protobuf::Descriptor* gm_data_threshold_notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gm_data_threshold_notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* em_do_change_cdkey_request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  em_do_change_cdkey_request_reflection_ = NULL;
const ::google::protobuf::Descriptor* me_do_change_cdkey_reply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  me_do_change_cdkey_reply_reflection_ = NULL;
const ::google::protobuf::Descriptor* me_send_mail_request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  me_send_mail_request_reflection_ = NULL;
const ::google::protobuf::Descriptor* tm_get_user_ol_num_request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  tm_get_user_ol_num_request_reflection_ = NULL;
const ::google::protobuf::Descriptor* mt_get_user_ol_num_reply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mt_get_user_ol_num_reply_reflection_ = NULL;
const ::google::protobuf::Descriptor* me_get_user_ol_num_request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  me_get_user_ol_num_request_reflection_ = NULL;
const ::google::protobuf::Descriptor* em_get_user_ol_num_reply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  em_get_user_ol_num_reply_reflection_ = NULL;
const ::google::protobuf::Descriptor* tm_send_notice_request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  tm_send_notice_request_reflection_ = NULL;
const ::google::protobuf::Descriptor* mt_send_notice_reply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mt_send_notice_reply_reflection_ = NULL;
const ::google::protobuf::Descriptor* me_send_notice_request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  me_send_notice_request_reflection_ = NULL;
const ::google::protobuf::Descriptor* em_send_notice_reply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  em_send_notice_reply_reflection_ = NULL;
const ::google::protobuf::Descriptor* me_transport_ntf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  me_transport_ntf_reflection_ = NULL;
const ::google::protobuf::Descriptor* tm_set_user_create_limit_request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  tm_set_user_create_limit_request_reflection_ = NULL;
const ::google::protobuf::Descriptor* mt_set_user_create_limit_reply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mt_set_user_create_limit_reply_reflection_ = NULL;
const ::google::protobuf::Descriptor* me_send_gm_msg_to_account_request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  me_send_gm_msg_to_account_request_reflection_ = NULL;
const ::google::protobuf::Descriptor* tm_refresh_login_list_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  tm_refresh_login_list_reflection_ = NULL;
const ::google::protobuf::Descriptor* tm_search_role_byid_request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  tm_search_role_byid_request_reflection_ = NULL;
const ::google::protobuf::Descriptor* tm_search_role_byname_request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  tm_search_role_byname_request_reflection_ = NULL;
const ::google::protobuf::Descriptor* mt_search_role_byname_reply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mt_search_role_byname_reply_reflection_ = NULL;
const ::google::protobuf::Descriptor* mall_reload_xml_notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mall_reload_xml_notify_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_gm_2eproto() {
  protobuf_AddDesc_gm_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "gm.proto");
  GOOGLE_CHECK(file != NULL);
  tm_monitor_get_user_info_request_descriptor_ = file->message_type(0);
  static const int tm_monitor_get_user_info_request_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tm_monitor_get_user_info_request, user_did_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tm_monitor_get_user_info_request, nick_name_),
  };
  tm_monitor_get_user_info_request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      tm_monitor_get_user_info_request_descriptor_,
      tm_monitor_get_user_info_request::default_instance_,
      tm_monitor_get_user_info_request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tm_monitor_get_user_info_request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tm_monitor_get_user_info_request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(tm_monitor_get_user_info_request));
  mt_monitor_get_user_info_reply_descriptor_ = file->message_type(1);
  static const int mt_monitor_get_user_info_reply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mt_monitor_get_user_info_reply, reply_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mt_monitor_get_user_info_reply, base_info_),
  };
  mt_monitor_get_user_info_reply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mt_monitor_get_user_info_reply_descriptor_,
      mt_monitor_get_user_info_reply::default_instance_,
      mt_monitor_get_user_info_reply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mt_monitor_get_user_info_reply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mt_monitor_get_user_info_reply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mt_monitor_get_user_info_reply));
  tm_monitor_get_recharge_count_request_descriptor_ = file->message_type(2);
  static const int tm_monitor_get_recharge_count_request_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tm_monitor_get_recharge_count_request, user_uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tm_monitor_get_recharge_count_request, page_num_),
  };
  tm_monitor_get_recharge_count_request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      tm_monitor_get_recharge_count_request_descriptor_,
      tm_monitor_get_recharge_count_request::default_instance_,
      tm_monitor_get_recharge_count_request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tm_monitor_get_recharge_count_request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tm_monitor_get_recharge_count_request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(tm_monitor_get_recharge_count_request));
  mt_monitor_get_recharge_count_reply_descriptor_ = file->message_type(3);
  static const int mt_monitor_get_recharge_count_reply_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mt_monitor_get_recharge_count_reply, reply_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mt_monitor_get_recharge_count_reply, statistics_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mt_monitor_get_recharge_count_reply, user_uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mt_monitor_get_recharge_count_reply, total_pages_),
  };
  mt_monitor_get_recharge_count_reply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mt_monitor_get_recharge_count_reply_descriptor_,
      mt_monitor_get_recharge_count_reply::default_instance_,
      mt_monitor_get_recharge_count_reply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mt_monitor_get_recharge_count_reply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mt_monitor_get_recharge_count_reply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mt_monitor_get_recharge_count_reply));
  tm_set_user_data_request_descriptor_ = file->message_type(4);
  static const int tm_set_user_data_request_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tm_set_user_data_request, user_uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tm_set_user_data_request, op_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tm_set_user_data_request, gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tm_set_user_data_request, diamond_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tm_set_user_data_request, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tm_set_user_data_request, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tm_set_user_data_request, ap_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tm_set_user_data_request, skill_point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tm_set_user_data_request, pve_badge_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tm_set_user_data_request, pvp_badge_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tm_set_user_data_request, fate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tm_set_user_data_request, vip_exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tm_set_user_data_request, vip_level_),
  };
  tm_set_user_data_request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      tm_set_user_data_request_descriptor_,
      tm_set_user_data_request::default_instance_,
      tm_set_user_data_request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tm_set_user_data_request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tm_set_user_data_request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(tm_set_user_data_request));
  mt_set_user_data_reply_descriptor_ = file->message_type(5);
  static const int mt_set_user_data_reply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mt_set_user_data_reply, reply_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mt_set_user_data_reply, user_uid_),
  };
  mt_set_user_data_reply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mt_set_user_data_reply_descriptor_,
      mt_set_user_data_reply::default_instance_,
      mt_set_user_data_reply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mt_set_user_data_reply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mt_set_user_data_reply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mt_set_user_data_reply));
  tm_monitor_get_item_info_request_descriptor_ = file->message_type(6);
  static const int tm_monitor_get_item_info_request_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tm_monitor_get_item_info_request, user_uid_),
  };
  tm_monitor_get_item_info_request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      tm_monitor_get_item_info_request_descriptor_,
      tm_monitor_get_item_info_request::default_instance_,
      tm_monitor_get_item_info_request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tm_monitor_get_item_info_request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tm_monitor_get_item_info_request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(tm_monitor_get_item_info_request));
  mt_monitor_get_item_info_reply_descriptor_ = file->message_type(7);
  static const int mt_monitor_get_item_info_reply_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mt_monitor_get_item_info_reply, reply_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mt_monitor_get_item_info_reply, item_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mt_monitor_get_item_info_reply, user_uid_),
  };
  mt_monitor_get_item_info_reply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mt_monitor_get_item_info_reply_descriptor_,
      mt_monitor_get_item_info_reply::default_instance_,
      mt_monitor_get_item_info_reply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mt_monitor_get_item_info_reply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mt_monitor_get_item_info_reply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mt_monitor_get_item_info_reply));
  tm_monitor_get_hero_info_request_descriptor_ = file->message_type(8);
  static const int tm_monitor_get_hero_info_request_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tm_monitor_get_hero_info_request, user_uid_),
  };
  tm_monitor_get_hero_info_request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      tm_monitor_get_hero_info_request_descriptor_,
      tm_monitor_get_hero_info_request::default_instance_,
      tm_monitor_get_hero_info_request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tm_monitor_get_hero_info_request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tm_monitor_get_hero_info_request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(tm_monitor_get_hero_info_request));
  mt_monitor_get_hero_info_reply_descriptor_ = file->message_type(9);
  static const int mt_monitor_get_hero_info_reply_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mt_monitor_get_hero_info_reply, reply_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mt_monitor_get_hero_info_reply, hero_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mt_monitor_get_hero_info_reply, user_uid_),
  };
  mt_monitor_get_hero_info_reply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mt_monitor_get_hero_info_reply_descriptor_,
      mt_monitor_get_hero_info_reply::default_instance_,
      mt_monitor_get_hero_info_reply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mt_monitor_get_hero_info_reply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mt_monitor_get_hero_info_reply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mt_monitor_get_hero_info_reply));
  tm_monitor_get_consume_record_request_descriptor_ = file->message_type(10);
  static const int tm_monitor_get_consume_record_request_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tm_monitor_get_consume_record_request, user_uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tm_monitor_get_consume_record_request, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tm_monitor_get_consume_record_request, begin_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tm_monitor_get_consume_record_request, end_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tm_monitor_get_consume_record_request, page_num_),
  };
  tm_monitor_get_consume_record_request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      tm_monitor_get_consume_record_request_descriptor_,
      tm_monitor_get_consume_record_request::default_instance_,
      tm_monitor_get_consume_record_request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tm_monitor_get_consume_record_request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tm_monitor_get_consume_record_request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(tm_monitor_get_consume_record_request));
  mt_monitor_get_consume_record_reply_descriptor_ = file->message_type(11);
  static const int mt_monitor_get_consume_record_reply_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mt_monitor_get_consume_record_reply, reply_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mt_monitor_get_consume_record_reply, consume_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mt_monitor_get_consume_record_reply, user_uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mt_monitor_get_consume_record_reply, total_pages_),
  };
  mt_monitor_get_consume_record_reply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mt_monitor_get_consume_record_reply_descriptor_,
      mt_monitor_get_consume_record_reply::default_instance_,
      mt_monitor_get_consume_record_reply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mt_monitor_get_consume_record_reply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mt_monitor_get_consume_record_reply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mt_monitor_get_consume_record_reply));
  tm_monitor_get_pve_info_request_descriptor_ = file->message_type(12);
  static const int tm_monitor_get_pve_info_request_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tm_monitor_get_pve_info_request, user_uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tm_monitor_get_pve_info_request, pve_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tm_monitor_get_pve_info_request, page_num_),
  };
  tm_monitor_get_pve_info_request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      tm_monitor_get_pve_info_request_descriptor_,
      tm_monitor_get_pve_info_request::default_instance_,
      tm_monitor_get_pve_info_request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tm_monitor_get_pve_info_request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tm_monitor_get_pve_info_request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(tm_monitor_get_pve_info_request));
  mt_monitor_get_pve_info_reply_descriptor_ = file->message_type(13);
  static const int mt_monitor_get_pve_info_reply_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mt_monitor_get_pve_info_reply, reply_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mt_monitor_get_pve_info_reply, campaign_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mt_monitor_get_pve_info_reply, matrix_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mt_monitor_get_pve_info_reply, produce_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mt_monitor_get_pve_info_reply, user_uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mt_monitor_get_pve_info_reply, total_pages_),
  };
  mt_monitor_get_pve_info_reply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mt_monitor_get_pve_info_reply_descriptor_,
      mt_monitor_get_pve_info_reply::default_instance_,
      mt_monitor_get_pve_info_reply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mt_monitor_get_pve_info_reply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mt_monitor_get_pve_info_reply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mt_monitor_get_pve_info_reply));
  tm_send_mail_request_descriptor_ = file->message_type(14);
  static const int tm_send_mail_request_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tm_send_mail_request, reply_code_),
  };
  tm_send_mail_request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      tm_send_mail_request_descriptor_,
      tm_send_mail_request::default_instance_,
      tm_send_mail_request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tm_send_mail_request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tm_send_mail_request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(tm_send_mail_request));
  mt_send_mail_reply_descriptor_ = file->message_type(15);
  static const int mt_send_mail_reply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mt_send_mail_reply, reply_code_),
  };
  mt_send_mail_reply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mt_send_mail_reply_descriptor_,
      mt_send_mail_reply::default_instance_,
      mt_send_mail_reply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mt_send_mail_reply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mt_send_mail_reply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mt_send_mail_reply));
  tm_monitor_get_equip_info_request_descriptor_ = file->message_type(16);
  static const int tm_monitor_get_equip_info_request_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tm_monitor_get_equip_info_request, user_uid_),
  };
  tm_monitor_get_equip_info_request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      tm_monitor_get_equip_info_request_descriptor_,
      tm_monitor_get_equip_info_request::default_instance_,
      tm_monitor_get_equip_info_request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tm_monitor_get_equip_info_request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tm_monitor_get_equip_info_request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(tm_monitor_get_equip_info_request));
  mt_monitor_get_equip_info_reply_descriptor_ = file->message_type(17);
  static const int mt_monitor_get_equip_info_reply_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mt_monitor_get_equip_info_reply, reply_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mt_monitor_get_equip_info_reply, equip_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mt_monitor_get_equip_info_reply, user_uid_),
  };
  mt_monitor_get_equip_info_reply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mt_monitor_get_equip_info_reply_descriptor_,
      mt_monitor_get_equip_info_reply::default_instance_,
      mt_monitor_get_equip_info_reply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mt_monitor_get_equip_info_reply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mt_monitor_get_equip_info_reply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mt_monitor_get_equip_info_reply));
  tm_monitor_get_pvp_info_request_descriptor_ = file->message_type(18);
  static const int tm_monitor_get_pvp_info_request_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tm_monitor_get_pvp_info_request, user_uid_),
  };
  tm_monitor_get_pvp_info_request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      tm_monitor_get_pvp_info_request_descriptor_,
      tm_monitor_get_pvp_info_request::default_instance_,
      tm_monitor_get_pvp_info_request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tm_monitor_get_pvp_info_request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tm_monitor_get_pvp_info_request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(tm_monitor_get_pvp_info_request));
  mt_monitor_get_pvp_info_reply_descriptor_ = file->message_type(19);
  static const int mt_monitor_get_pvp_info_reply_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mt_monitor_get_pvp_info_reply, reply_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mt_monitor_get_pvp_info_reply, history_top_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mt_monitor_get_pvp_info_reply, buy_challenge_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mt_monitor_get_pvp_info_reply, challenge_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mt_monitor_get_pvp_info_reply, last_challenge_time_),
  };
  mt_monitor_get_pvp_info_reply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mt_monitor_get_pvp_info_reply_descriptor_,
      mt_monitor_get_pvp_info_reply::default_instance_,
      mt_monitor_get_pvp_info_reply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mt_monitor_get_pvp_info_reply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mt_monitor_get_pvp_info_reply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mt_monitor_get_pvp_info_reply));
  tm_manage_role_byid_request_descriptor_ = file->message_type(20);
  static const int tm_manage_role_byid_request_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tm_manage_role_byid_request, role_did_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tm_manage_role_byid_request, manage_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tm_manage_role_byid_request, offset_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tm_manage_role_byid_request, reason_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tm_manage_role_byid_request, oper_name_),
  };
  tm_manage_role_byid_request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      tm_manage_role_byid_request_descriptor_,
      tm_manage_role_byid_request::default_instance_,
      tm_manage_role_byid_request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tm_manage_role_byid_request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tm_manage_role_byid_request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(tm_manage_role_byid_request));
  mt_manage_role_byid_reply_descriptor_ = file->message_type(21);
  static const int mt_manage_role_byid_reply_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mt_manage_role_byid_reply, reply_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mt_manage_role_byid_reply, oper_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mt_manage_role_byid_reply, manage_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mt_manage_role_byid_reply, offset_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mt_manage_role_byid_reply, reason_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mt_manage_role_byid_reply, oper_name_),
  };
  mt_manage_role_byid_reply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mt_manage_role_byid_reply_descriptor_,
      mt_manage_role_byid_reply::default_instance_,
      mt_manage_role_byid_reply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mt_manage_role_byid_reply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mt_manage_role_byid_reply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mt_manage_role_byid_reply));
  tm_manage_role_byname_request_descriptor_ = file->message_type(22);
  static const int tm_manage_role_byname_request_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tm_manage_role_byname_request, role_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tm_manage_role_byname_request, manage_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tm_manage_role_byname_request, offset_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tm_manage_role_byname_request, reason_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tm_manage_role_byname_request, oper_name_),
  };
  tm_manage_role_byname_request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      tm_manage_role_byname_request_descriptor_,
      tm_manage_role_byname_request::default_instance_,
      tm_manage_role_byname_request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tm_manage_role_byname_request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tm_manage_role_byname_request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(tm_manage_role_byname_request));
  mt_manage_role_byname_reply_descriptor_ = file->message_type(23);
  static const int mt_manage_role_byname_reply_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mt_manage_role_byname_reply, reply_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mt_manage_role_byname_reply, oper_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mt_manage_role_byname_reply, manage_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mt_manage_role_byname_reply, offset_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mt_manage_role_byname_reply, reason_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mt_manage_role_byname_reply, oper_name_),
  };
  mt_manage_role_byname_reply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mt_manage_role_byname_reply_descriptor_,
      mt_manage_role_byname_reply::default_instance_,
      mt_manage_role_byname_reply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mt_manage_role_byname_reply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mt_manage_role_byname_reply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mt_manage_role_byname_reply));
  tm_manage_ban_state_query_request_descriptor_ = file->message_type(24);
  static const int tm_manage_ban_state_query_request_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tm_manage_ban_state_query_request, page_num_),
  };
  tm_manage_ban_state_query_request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      tm_manage_ban_state_query_request_descriptor_,
      tm_manage_ban_state_query_request::default_instance_,
      tm_manage_ban_state_query_request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tm_manage_ban_state_query_request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tm_manage_ban_state_query_request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(tm_manage_ban_state_query_request));
  mt_manage_ban_state_query_reply_descriptor_ = file->message_type(25);
  static const int mt_manage_ban_state_query_reply_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mt_manage_ban_state_query_reply, reply_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mt_manage_ban_state_query_reply, ban_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mt_manage_ban_state_query_reply, total_pages_),
  };
  mt_manage_ban_state_query_reply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mt_manage_ban_state_query_reply_descriptor_,
      mt_manage_ban_state_query_reply::default_instance_,
      mt_manage_ban_state_query_reply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mt_manage_ban_state_query_reply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mt_manage_ban_state_query_reply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mt_manage_ban_state_query_reply));
  tm_monitor_get_behavior_records_request_descriptor_ = file->message_type(26);
  static const int tm_monitor_get_behavior_records_request_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tm_monitor_get_behavior_records_request, user_uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tm_monitor_get_behavior_records_request, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tm_monitor_get_behavior_records_request, page_num_),
  };
  tm_monitor_get_behavior_records_request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      tm_monitor_get_behavior_records_request_descriptor_,
      tm_monitor_get_behavior_records_request::default_instance_,
      tm_monitor_get_behavior_records_request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tm_monitor_get_behavior_records_request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tm_monitor_get_behavior_records_request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(tm_monitor_get_behavior_records_request));
  mt_monitor_get_behavior_records_reply_descriptor_ = file->message_type(27);
  static const int mt_monitor_get_behavior_records_reply_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mt_monitor_get_behavior_records_reply, reply_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mt_monitor_get_behavior_records_reply, user_uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mt_monitor_get_behavior_records_reply, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mt_monitor_get_behavior_records_reply, sign_records_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mt_monitor_get_behavior_records_reply, draw_records_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mt_monitor_get_behavior_records_reply, buy_records_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mt_monitor_get_behavior_records_reply, shop_records_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mt_monitor_get_behavior_records_reply, total_pages_),
  };
  mt_monitor_get_behavior_records_reply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mt_monitor_get_behavior_records_reply_descriptor_,
      mt_monitor_get_behavior_records_reply::default_instance_,
      mt_monitor_get_behavior_records_reply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mt_monitor_get_behavior_records_reply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mt_monitor_get_behavior_records_reply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mt_monitor_get_behavior_records_reply));
  ma_masked_msg_notify_descriptor_ = file->message_type(28);
  static const int ma_masked_msg_notify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ma_masked_msg_notify, masked_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ma_masked_msg_notify, masked_flag_),
  };
  ma_masked_msg_notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ma_masked_msg_notify_descriptor_,
      ma_masked_msg_notify::default_instance_,
      ma_masked_msg_notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ma_masked_msg_notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ma_masked_msg_notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ma_masked_msg_notify));
  tm_reload_config_notify_descriptor_ = file->message_type(29);
  static const int tm_reload_config_notify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tm_reload_config_notify, load_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tm_reload_config_notify, file_name_),
  };
  tm_reload_config_notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      tm_reload_config_notify_descriptor_,
      tm_reload_config_notify::default_instance_,
      tm_reload_config_notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tm_reload_config_notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tm_reload_config_notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(tm_reload_config_notify));
  me_ban_account_notify_descriptor_ = file->message_type(30);
  static const int me_ban_account_notify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(me_ban_account_notify, flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(me_ban_account_notify, account_),
  };
  me_ban_account_notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      me_ban_account_notify_descriptor_,
      me_ban_account_notify::default_instance_,
      me_ban_account_notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(me_ban_account_notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(me_ban_account_notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(me_ban_account_notify));
  me_access_ip_notify_descriptor_ = file->message_type(31);
  static const int me_access_ip_notify_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(me_access_ip_notify, flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(me_access_ip_notify, ip_address_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(me_access_ip_notify, ip_end_),
  };
  me_access_ip_notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      me_access_ip_notify_descriptor_,
      me_access_ip_notify::default_instance_,
      me_access_ip_notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(me_access_ip_notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(me_access_ip_notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(me_access_ip_notify));
  tm_test_request_descriptor_ = file->message_type(32);
  static const int tm_test_request_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tm_test_request, test1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tm_test_request, test2_),
  };
  tm_test_request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      tm_test_request_descriptor_,
      tm_test_request::default_instance_,
      tm_test_request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tm_test_request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tm_test_request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(tm_test_request));
  mt_test_reply_descriptor_ = file->message_type(33);
  static const int mt_test_reply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mt_test_reply, test1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mt_test_reply, test2_),
  };
  mt_test_reply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mt_test_reply_descriptor_,
      mt_test_reply::default_instance_,
      mt_test_reply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mt_test_reply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mt_test_reply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mt_test_reply));
  gm_data_threshold_notify_descriptor_ = file->message_type(34);
  static const int gm_data_threshold_notify_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gm_data_threshold_notify, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gm_data_threshold_notify, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gm_data_threshold_notify, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gm_data_threshold_notify, param_),
  };
  gm_data_threshold_notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gm_data_threshold_notify_descriptor_,
      gm_data_threshold_notify::default_instance_,
      gm_data_threshold_notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gm_data_threshold_notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gm_data_threshold_notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gm_data_threshold_notify));
  em_do_change_cdkey_request_descriptor_ = file->message_type(35);
  static const int em_do_change_cdkey_request_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(em_do_change_cdkey_request, role_uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(em_do_change_cdkey_request, channel_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(em_do_change_cdkey_request, key_code_),
  };
  em_do_change_cdkey_request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      em_do_change_cdkey_request_descriptor_,
      em_do_change_cdkey_request::default_instance_,
      em_do_change_cdkey_request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(em_do_change_cdkey_request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(em_do_change_cdkey_request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(em_do_change_cdkey_request));
  me_do_change_cdkey_reply_descriptor_ = file->message_type(36);
  static const int me_do_change_cdkey_reply_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(me_do_change_cdkey_reply, reply_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(me_do_change_cdkey_reply, role_uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(me_do_change_cdkey_reply, key_type_),
  };
  me_do_change_cdkey_reply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      me_do_change_cdkey_reply_descriptor_,
      me_do_change_cdkey_reply::default_instance_,
      me_do_change_cdkey_reply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(me_do_change_cdkey_reply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(me_do_change_cdkey_reply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(me_do_change_cdkey_reply));
  me_send_mail_request_descriptor_ = file->message_type(37);
  static const int me_send_mail_request_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(me_send_mail_request, mail_data_),
  };
  me_send_mail_request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      me_send_mail_request_descriptor_,
      me_send_mail_request::default_instance_,
      me_send_mail_request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(me_send_mail_request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(me_send_mail_request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(me_send_mail_request));
  tm_get_user_ol_num_request_descriptor_ = file->message_type(38);
  static const int tm_get_user_ol_num_request_offsets_[1] = {
  };
  tm_get_user_ol_num_request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      tm_get_user_ol_num_request_descriptor_,
      tm_get_user_ol_num_request::default_instance_,
      tm_get_user_ol_num_request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tm_get_user_ol_num_request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tm_get_user_ol_num_request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(tm_get_user_ol_num_request));
  mt_get_user_ol_num_reply_descriptor_ = file->message_type(39);
  static const int mt_get_user_ol_num_reply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mt_get_user_ol_num_reply, ol_num_),
  };
  mt_get_user_ol_num_reply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mt_get_user_ol_num_reply_descriptor_,
      mt_get_user_ol_num_reply::default_instance_,
      mt_get_user_ol_num_reply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mt_get_user_ol_num_reply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mt_get_user_ol_num_reply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mt_get_user_ol_num_reply));
  me_get_user_ol_num_request_descriptor_ = file->message_type(40);
  static const int me_get_user_ol_num_request_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(me_get_user_ol_num_request, admin_id_),
  };
  me_get_user_ol_num_request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      me_get_user_ol_num_request_descriptor_,
      me_get_user_ol_num_request::default_instance_,
      me_get_user_ol_num_request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(me_get_user_ol_num_request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(me_get_user_ol_num_request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(me_get_user_ol_num_request));
  em_get_user_ol_num_reply_descriptor_ = file->message_type(41);
  static const int em_get_user_ol_num_reply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(em_get_user_ol_num_reply, ol_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(em_get_user_ol_num_reply, admin_id_),
  };
  em_get_user_ol_num_reply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      em_get_user_ol_num_reply_descriptor_,
      em_get_user_ol_num_reply::default_instance_,
      em_get_user_ol_num_reply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(em_get_user_ol_num_reply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(em_get_user_ol_num_reply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(em_get_user_ol_num_reply));
  tm_send_notice_request_descriptor_ = file->message_type(42);
  static const int tm_send_notice_request_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tm_send_notice_request, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tm_send_notice_request, tick_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tm_send_notice_request, start_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tm_send_notice_request, end_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tm_send_notice_request, notice_),
  };
  tm_send_notice_request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      tm_send_notice_request_descriptor_,
      tm_send_notice_request::default_instance_,
      tm_send_notice_request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tm_send_notice_request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tm_send_notice_request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(tm_send_notice_request));
  mt_send_notice_reply_descriptor_ = file->message_type(43);
  static const int mt_send_notice_reply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mt_send_notice_reply, reply_code_),
  };
  mt_send_notice_reply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mt_send_notice_reply_descriptor_,
      mt_send_notice_reply::default_instance_,
      mt_send_notice_reply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mt_send_notice_reply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mt_send_notice_reply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mt_send_notice_reply));
  me_send_notice_request_descriptor_ = file->message_type(44);
  static const int me_send_notice_request_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(me_send_notice_request, notice_data_),
  };
  me_send_notice_request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      me_send_notice_request_descriptor_,
      me_send_notice_request::default_instance_,
      me_send_notice_request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(me_send_notice_request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(me_send_notice_request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(me_send_notice_request));
  em_send_notice_reply_descriptor_ = file->message_type(45);
  static const int em_send_notice_reply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(em_send_notice_reply, reply_code_),
  };
  em_send_notice_reply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      em_send_notice_reply_descriptor_,
      em_send_notice_reply::default_instance_,
      em_send_notice_reply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(em_send_notice_reply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(em_send_notice_reply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(em_send_notice_reply));
  me_transport_ntf_descriptor_ = file->message_type(46);
  static const int me_transport_ntf_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(me_transport_ntf, role_uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(me_transport_ntf, scene_id_),
  };
  me_transport_ntf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      me_transport_ntf_descriptor_,
      me_transport_ntf::default_instance_,
      me_transport_ntf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(me_transport_ntf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(me_transport_ntf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(me_transport_ntf));
  tm_set_user_create_limit_request_descriptor_ = file->message_type(47);
  static const int tm_set_user_create_limit_request_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tm_set_user_create_limit_request, flag_),
  };
  tm_set_user_create_limit_request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      tm_set_user_create_limit_request_descriptor_,
      tm_set_user_create_limit_request::default_instance_,
      tm_set_user_create_limit_request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tm_set_user_create_limit_request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tm_set_user_create_limit_request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(tm_set_user_create_limit_request));
  mt_set_user_create_limit_reply_descriptor_ = file->message_type(48);
  static const int mt_set_user_create_limit_reply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mt_set_user_create_limit_reply, reply_code_),
  };
  mt_set_user_create_limit_reply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mt_set_user_create_limit_reply_descriptor_,
      mt_set_user_create_limit_reply::default_instance_,
      mt_set_user_create_limit_reply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mt_set_user_create_limit_reply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mt_set_user_create_limit_reply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mt_set_user_create_limit_reply));
  me_send_gm_msg_to_account_request_descriptor_ = file->message_type(49);
  static const int me_send_gm_msg_to_account_request_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(me_send_gm_msg_to_account_request, cmd_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(me_send_gm_msg_to_account_request, msg_),
  };
  me_send_gm_msg_to_account_request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      me_send_gm_msg_to_account_request_descriptor_,
      me_send_gm_msg_to_account_request::default_instance_,
      me_send_gm_msg_to_account_request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(me_send_gm_msg_to_account_request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(me_send_gm_msg_to_account_request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(me_send_gm_msg_to_account_request));
  tm_refresh_login_list_descriptor_ = file->message_type(50);
  static const int tm_refresh_login_list_offsets_[1] = {
  };
  tm_refresh_login_list_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      tm_refresh_login_list_descriptor_,
      tm_refresh_login_list::default_instance_,
      tm_refresh_login_list_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tm_refresh_login_list, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tm_refresh_login_list, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(tm_refresh_login_list));
  tm_search_role_byid_request_descriptor_ = file->message_type(51);
  static const int tm_search_role_byid_request_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tm_search_role_byid_request, role_did_),
  };
  tm_search_role_byid_request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      tm_search_role_byid_request_descriptor_,
      tm_search_role_byid_request::default_instance_,
      tm_search_role_byid_request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tm_search_role_byid_request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tm_search_role_byid_request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(tm_search_role_byid_request));
  tm_search_role_byname_request_descriptor_ = file->message_type(52);
  static const int tm_search_role_byname_request_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tm_search_role_byname_request, role_name_),
  };
  tm_search_role_byname_request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      tm_search_role_byname_request_descriptor_,
      tm_search_role_byname_request::default_instance_,
      tm_search_role_byname_request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tm_search_role_byname_request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tm_search_role_byname_request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(tm_search_role_byname_request));
  mt_search_role_byname_reply_descriptor_ = file->message_type(53);
  static const int mt_search_role_byname_reply_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mt_search_role_byname_reply, role_did_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mt_search_role_byname_reply, role_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mt_search_role_byname_reply, create_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mt_search_role_byname_reply, last_login_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mt_search_role_byname_reply, last_logout_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mt_search_role_byname_reply, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mt_search_role_byname_reply, total_recharge_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mt_search_role_byname_reply, gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mt_search_role_byname_reply, silver_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mt_search_role_byname_reply, copper_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mt_search_role_byname_reply, life_stone_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mt_search_role_byname_reply, fighting_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mt_search_role_byname_reply, scene_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mt_search_role_byname_reply, vip_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mt_search_role_byname_reply, role_uid_),
  };
  mt_search_role_byname_reply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mt_search_role_byname_reply_descriptor_,
      mt_search_role_byname_reply::default_instance_,
      mt_search_role_byname_reply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mt_search_role_byname_reply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mt_search_role_byname_reply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mt_search_role_byname_reply));
  mall_reload_xml_notify_descriptor_ = file->message_type(54);
  static const int mall_reload_xml_notify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mall_reload_xml_notify, field_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mall_reload_xml_notify, dest_),
  };
  mall_reload_xml_notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mall_reload_xml_notify_descriptor_,
      mall_reload_xml_notify::default_instance_,
      mall_reload_xml_notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mall_reload_xml_notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mall_reload_xml_notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mall_reload_xml_notify));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_gm_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    tm_monitor_get_user_info_request_descriptor_, &tm_monitor_get_user_info_request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mt_monitor_get_user_info_reply_descriptor_, &mt_monitor_get_user_info_reply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    tm_monitor_get_recharge_count_request_descriptor_, &tm_monitor_get_recharge_count_request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mt_monitor_get_recharge_count_reply_descriptor_, &mt_monitor_get_recharge_count_reply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    tm_set_user_data_request_descriptor_, &tm_set_user_data_request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mt_set_user_data_reply_descriptor_, &mt_set_user_data_reply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    tm_monitor_get_item_info_request_descriptor_, &tm_monitor_get_item_info_request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mt_monitor_get_item_info_reply_descriptor_, &mt_monitor_get_item_info_reply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    tm_monitor_get_hero_info_request_descriptor_, &tm_monitor_get_hero_info_request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mt_monitor_get_hero_info_reply_descriptor_, &mt_monitor_get_hero_info_reply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    tm_monitor_get_consume_record_request_descriptor_, &tm_monitor_get_consume_record_request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mt_monitor_get_consume_record_reply_descriptor_, &mt_monitor_get_consume_record_reply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    tm_monitor_get_pve_info_request_descriptor_, &tm_monitor_get_pve_info_request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mt_monitor_get_pve_info_reply_descriptor_, &mt_monitor_get_pve_info_reply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    tm_send_mail_request_descriptor_, &tm_send_mail_request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mt_send_mail_reply_descriptor_, &mt_send_mail_reply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    tm_monitor_get_equip_info_request_descriptor_, &tm_monitor_get_equip_info_request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mt_monitor_get_equip_info_reply_descriptor_, &mt_monitor_get_equip_info_reply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    tm_monitor_get_pvp_info_request_descriptor_, &tm_monitor_get_pvp_info_request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mt_monitor_get_pvp_info_reply_descriptor_, &mt_monitor_get_pvp_info_reply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    tm_manage_role_byid_request_descriptor_, &tm_manage_role_byid_request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mt_manage_role_byid_reply_descriptor_, &mt_manage_role_byid_reply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    tm_manage_role_byname_request_descriptor_, &tm_manage_role_byname_request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mt_manage_role_byname_reply_descriptor_, &mt_manage_role_byname_reply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    tm_manage_ban_state_query_request_descriptor_, &tm_manage_ban_state_query_request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mt_manage_ban_state_query_reply_descriptor_, &mt_manage_ban_state_query_reply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    tm_monitor_get_behavior_records_request_descriptor_, &tm_monitor_get_behavior_records_request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mt_monitor_get_behavior_records_reply_descriptor_, &mt_monitor_get_behavior_records_reply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ma_masked_msg_notify_descriptor_, &ma_masked_msg_notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    tm_reload_config_notify_descriptor_, &tm_reload_config_notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    me_ban_account_notify_descriptor_, &me_ban_account_notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    me_access_ip_notify_descriptor_, &me_access_ip_notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    tm_test_request_descriptor_, &tm_test_request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mt_test_reply_descriptor_, &mt_test_reply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gm_data_threshold_notify_descriptor_, &gm_data_threshold_notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    em_do_change_cdkey_request_descriptor_, &em_do_change_cdkey_request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    me_do_change_cdkey_reply_descriptor_, &me_do_change_cdkey_reply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    me_send_mail_request_descriptor_, &me_send_mail_request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    tm_get_user_ol_num_request_descriptor_, &tm_get_user_ol_num_request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mt_get_user_ol_num_reply_descriptor_, &mt_get_user_ol_num_reply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    me_get_user_ol_num_request_descriptor_, &me_get_user_ol_num_request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    em_get_user_ol_num_reply_descriptor_, &em_get_user_ol_num_reply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    tm_send_notice_request_descriptor_, &tm_send_notice_request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mt_send_notice_reply_descriptor_, &mt_send_notice_reply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    me_send_notice_request_descriptor_, &me_send_notice_request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    em_send_notice_reply_descriptor_, &em_send_notice_reply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    me_transport_ntf_descriptor_, &me_transport_ntf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    tm_set_user_create_limit_request_descriptor_, &tm_set_user_create_limit_request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mt_set_user_create_limit_reply_descriptor_, &mt_set_user_create_limit_reply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    me_send_gm_msg_to_account_request_descriptor_, &me_send_gm_msg_to_account_request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    tm_refresh_login_list_descriptor_, &tm_refresh_login_list::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    tm_search_role_byid_request_descriptor_, &tm_search_role_byid_request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    tm_search_role_byname_request_descriptor_, &tm_search_role_byname_request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mt_search_role_byname_reply_descriptor_, &mt_search_role_byname_reply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mall_reload_xml_notify_descriptor_, &mall_reload_xml_notify::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_gm_2eproto() {
  delete tm_monitor_get_user_info_request::default_instance_;
  delete tm_monitor_get_user_info_request_reflection_;
  delete mt_monitor_get_user_info_reply::default_instance_;
  delete mt_monitor_get_user_info_reply_reflection_;
  delete tm_monitor_get_recharge_count_request::default_instance_;
  delete tm_monitor_get_recharge_count_request_reflection_;
  delete mt_monitor_get_recharge_count_reply::default_instance_;
  delete mt_monitor_get_recharge_count_reply_reflection_;
  delete tm_set_user_data_request::default_instance_;
  delete tm_set_user_data_request_reflection_;
  delete mt_set_user_data_reply::default_instance_;
  delete mt_set_user_data_reply_reflection_;
  delete tm_monitor_get_item_info_request::default_instance_;
  delete tm_monitor_get_item_info_request_reflection_;
  delete mt_monitor_get_item_info_reply::default_instance_;
  delete mt_monitor_get_item_info_reply_reflection_;
  delete tm_monitor_get_hero_info_request::default_instance_;
  delete tm_monitor_get_hero_info_request_reflection_;
  delete mt_monitor_get_hero_info_reply::default_instance_;
  delete mt_monitor_get_hero_info_reply_reflection_;
  delete tm_monitor_get_consume_record_request::default_instance_;
  delete tm_monitor_get_consume_record_request_reflection_;
  delete mt_monitor_get_consume_record_reply::default_instance_;
  delete mt_monitor_get_consume_record_reply_reflection_;
  delete tm_monitor_get_pve_info_request::default_instance_;
  delete tm_monitor_get_pve_info_request_reflection_;
  delete mt_monitor_get_pve_info_reply::default_instance_;
  delete mt_monitor_get_pve_info_reply_reflection_;
  delete tm_send_mail_request::default_instance_;
  delete tm_send_mail_request_reflection_;
  delete mt_send_mail_reply::default_instance_;
  delete mt_send_mail_reply_reflection_;
  delete tm_monitor_get_equip_info_request::default_instance_;
  delete tm_monitor_get_equip_info_request_reflection_;
  delete mt_monitor_get_equip_info_reply::default_instance_;
  delete mt_monitor_get_equip_info_reply_reflection_;
  delete tm_monitor_get_pvp_info_request::default_instance_;
  delete tm_monitor_get_pvp_info_request_reflection_;
  delete mt_monitor_get_pvp_info_reply::default_instance_;
  delete mt_monitor_get_pvp_info_reply_reflection_;
  delete tm_manage_role_byid_request::default_instance_;
  delete tm_manage_role_byid_request_reflection_;
  delete mt_manage_role_byid_reply::default_instance_;
  delete mt_manage_role_byid_reply_reflection_;
  delete tm_manage_role_byname_request::default_instance_;
  delete tm_manage_role_byname_request_reflection_;
  delete mt_manage_role_byname_reply::default_instance_;
  delete mt_manage_role_byname_reply_reflection_;
  delete tm_manage_ban_state_query_request::default_instance_;
  delete tm_manage_ban_state_query_request_reflection_;
  delete mt_manage_ban_state_query_reply::default_instance_;
  delete mt_manage_ban_state_query_reply_reflection_;
  delete tm_monitor_get_behavior_records_request::default_instance_;
  delete tm_monitor_get_behavior_records_request_reflection_;
  delete mt_monitor_get_behavior_records_reply::default_instance_;
  delete mt_monitor_get_behavior_records_reply_reflection_;
  delete ma_masked_msg_notify::default_instance_;
  delete ma_masked_msg_notify_reflection_;
  delete tm_reload_config_notify::default_instance_;
  delete tm_reload_config_notify_reflection_;
  delete me_ban_account_notify::default_instance_;
  delete me_ban_account_notify_reflection_;
  delete me_access_ip_notify::default_instance_;
  delete me_access_ip_notify_reflection_;
  delete tm_test_request::default_instance_;
  delete tm_test_request_reflection_;
  delete mt_test_reply::default_instance_;
  delete mt_test_reply_reflection_;
  delete gm_data_threshold_notify::default_instance_;
  delete gm_data_threshold_notify_reflection_;
  delete em_do_change_cdkey_request::default_instance_;
  delete em_do_change_cdkey_request_reflection_;
  delete me_do_change_cdkey_reply::default_instance_;
  delete me_do_change_cdkey_reply_reflection_;
  delete me_send_mail_request::default_instance_;
  delete me_send_mail_request_reflection_;
  delete tm_get_user_ol_num_request::default_instance_;
  delete tm_get_user_ol_num_request_reflection_;
  delete mt_get_user_ol_num_reply::default_instance_;
  delete mt_get_user_ol_num_reply_reflection_;
  delete me_get_user_ol_num_request::default_instance_;
  delete me_get_user_ol_num_request_reflection_;
  delete em_get_user_ol_num_reply::default_instance_;
  delete em_get_user_ol_num_reply_reflection_;
  delete tm_send_notice_request::default_instance_;
  delete tm_send_notice_request_reflection_;
  delete mt_send_notice_reply::default_instance_;
  delete mt_send_notice_reply_reflection_;
  delete me_send_notice_request::default_instance_;
  delete me_send_notice_request_reflection_;
  delete em_send_notice_reply::default_instance_;
  delete em_send_notice_reply_reflection_;
  delete me_transport_ntf::default_instance_;
  delete me_transport_ntf_reflection_;
  delete tm_set_user_create_limit_request::default_instance_;
  delete tm_set_user_create_limit_request_reflection_;
  delete mt_set_user_create_limit_reply::default_instance_;
  delete mt_set_user_create_limit_reply_reflection_;
  delete me_send_gm_msg_to_account_request::default_instance_;
  delete me_send_gm_msg_to_account_request_reflection_;
  delete tm_refresh_login_list::default_instance_;
  delete tm_refresh_login_list_reflection_;
  delete tm_search_role_byid_request::default_instance_;
  delete tm_search_role_byid_request_reflection_;
  delete tm_search_role_byname_request::default_instance_;
  delete tm_search_role_byname_request_reflection_;
  delete mt_search_role_byname_reply::default_instance_;
  delete mt_search_role_byname_reply_reflection_;
  delete mall_reload_xml_notify::default_instance_;
  delete mall_reload_xml_notify_reflection_;
}

void protobuf_AddDesc_gm_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::proto::gm_common::protobuf_AddDesc_gm_5fcommon_2eproto();
  ::proto::common::protobuf_AddDesc_common_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\010gm.proto\022\010proto.gm\032\017gm_common.proto\032\014c"
    "ommon.proto\"G\n tm_monitor_get_user_info_"
    "request\022\020\n\010user_did\030\001 \001(\t\022\021\n\tnick_name\030\002"
    " \001(\t\"h\n\036mt_monitor_get_user_info_reply\022\022"
    "\n\nreply_code\030\001 \002(\r\0222\n\tbase_info\030\002 \001(\0132\037."
    "proto.gm_common.user_base_info\"K\n%tm_mon"
    "itor_get_recharge_count_request\022\020\n\010user_"
    "uid\030\001 \002(\004\022\020\n\010page_num\030\002 \002(\r\"\232\001\n#mt_monit"
    "or_get_recharge_count_reply\022\022\n\nreply_cod"
    "e\030\001 \002(\r\0228\n\nstatistics\030\002 \001(\0132$.proto.gm_c"
    "ommon.recharge_count_info\022\020\n\010user_uid\030\003 "
    "\001(\004\022\023\n\013total_pages\030\004 \001(\r\"\361\001\n\030tm_set_user"
    "_data_request\022\020\n\010user_uid\030\001 \002(\004\022\017\n\007op_ty"
    "pe\030\002 \002(\005\022\014\n\004gold\030\003 \001(\005\022\017\n\007diamond\030\004 \001(\005\022"
    "\013\n\003exp\030\005 \001(\005\022\r\n\005level\030\006 \001(\005\022\n\n\002ap\030\007 \001(\005\022"
    "\023\n\013skill_point\030\010 \001(\005\022\021\n\tpve_badge\030\t \001(\005\022"
    "\021\n\tpvp_badge\030\n \001(\005\022\014\n\004fate\030\013 \001(\005\022\017\n\007vip_"
    "exp\030\014 \001(\005\022\021\n\tvip_level\030\r \001(\005\">\n\026mt_set_u"
    "ser_data_reply\022\022\n\nreply_code\030\001 \002(\r\022\020\n\010us"
    "er_uid\030\002 \001(\004\"4\n tm_monitor_get_item_info"
    "_request\022\020\n\010user_uid\030\001 \002(\004\"u\n\036mt_monitor"
    "_get_item_info_reply\022\022\n\nreply_code\030\001 \002(\r"
    "\022-\n\titem_info\030\002 \001(\0132\032.proto.gm_common.it"
    "em_data\022\020\n\010user_uid\030\003 \001(\004\"4\n tm_monitor_"
    "get_hero_info_request\022\020\n\010user_uid\030\001 \002(\004\""
    "u\n\036mt_monitor_get_hero_info_reply\022\022\n\nrep"
    "ly_code\030\001 \002(\r\022-\n\thero_info\030\002 \001(\0132\032.proto"
    ".gm_common.hero_data\022\020\n\010user_uid\030\003 \001(\004\"\177"
    "\n%tm_monitor_get_consume_record_request\022"
    "\020\n\010user_uid\030\001 \002(\004\022\014\n\004type\030\002 \002(\r\022\022\n\nbegin"
    "_time\030\003 \002(\r\022\020\n\010end_time\030\004 \002(\r\022\020\n\010page_nu"
    "m\030\005 \002(\r\"\234\001\n#mt_monitor_get_consume_recor"
    "d_reply\022\022\n\nreply_code\030\001 \002(\r\022:\n\014consume_i"
    "nfo\030\002 \001(\0132$.proto.gm_common.consume_reco"
    "rd_data\022\020\n\010user_uid\030\003 \001(\004\022\023\n\013total_pages"
    "\030\004 \001(\r\"W\n\037tm_monitor_get_pve_info_reques"
    "t\022\020\n\010user_uid\030\001 \002(\004\022\020\n\010pve_type\030\002 \002(\005\022\020\n"
    "\010page_num\030\003 \002(\r\"\371\001\n\035mt_monitor_get_pve_i"
    "nfo_reply\022\022\n\nreply_code\030\001 \002(\r\0225\n\rcampaig"
    "n_info\030\002 \001(\0132\036.proto.gm_common.campaign_"
    "data\0221\n\013matrix_info\030\003 \001(\0132\034.proto.gm_com"
    "mon.matrix_data\0223\n\014produce_info\030\004 \001(\0132\035."
    "proto.gm_common.produce_data\022\020\n\010user_uid"
    "\030\005 \001(\004\022\023\n\013total_pages\030\006 \001(\r\"*\n\024tm_send_m"
    "ail_request\022\022\n\nreply_code\030\001 \001(\005\"(\n\022mt_se"
    "nd_mail_reply\022\022\n\nreply_code\030\001 \002(\005\"5\n!tm_"
    "monitor_get_equip_info_request\022\020\n\010user_u"
    "id\030\001 \002(\004\"x\n\037mt_monitor_get_equip_info_re"
    "ply\022\022\n\nreply_code\030\001 \002(\r\022/\n\nequip_info\030\002 "
    "\001(\0132\033.proto.gm_common.equip_data\022\020\n\010user"
    "_uid\030\003 \001(\004\"3\n\037tm_monitor_get_pvp_info_re"
    "quest\022\020\n\010user_uid\030\001 \002(\004\"\233\001\n\035mt_monitor_g"
    "et_pvp_info_reply\022\022\n\nreply_code\030\001 \002(\r\022\023\n"
    "\013history_top\030\002 \001(\r\022\033\n\023buy_challenge_time"
    "s\030\003 \001(\r\022\027\n\017challenge_times\030\004 \001(\r\022\033\n\023last"
    "_challenge_time\030\005 \001(\r\"|\n\033tm_manage_role_"
    "byid_request\022\020\n\010role_did\030\001 \003(\r\022\023\n\013manage"
    "_type\030\002 \001(\r\022\023\n\013offset_time\030\003 \001(\r\022\016\n\006reas"
    "on\030\004 \001(\t\022\021\n\toper_name\030\005 \001(\t\"\265\001\n\031mt_manag"
    "e_role_byid_reply\0228\n\nreply_data\030\001 \003(\0132$."
    "proto.gm_common.manage_reply_single\022\021\n\to"
    "per_time\030\002 \001(\r\022\023\n\013manage_type\030\003 \001(\r\022\023\n\013o"
    "ffset_time\030\004 \001(\r\022\016\n\006reason\030\005 \001(\t\022\021\n\toper"
    "_name\030\006 \001(\t\"\177\n\035tm_manage_role_byname_req"
    "uest\022\021\n\trole_name\030\001 \003(\t\022\023\n\013manage_type\030\002"
    " \001(\r\022\023\n\013offset_time\030\003 \001(\r\022\016\n\006reason\030\004 \001("
    "\t\022\021\n\toper_name\030\005 \001(\t\"\267\001\n\033mt_manage_role_"
    "byname_reply\0228\n\nreply_data\030\001 \003(\0132$.proto"
    ".gm_common.manage_reply_single\022\021\n\toper_t"
    "ime\030\002 \001(\r\022\023\n\013manage_type\030\003 \001(\r\022\023\n\013offset"
    "_time\030\004 \001(\r\022\016\n\006reason\030\005 \001(\t\022\021\n\toper_name"
    "\030\006 \001(\t\"5\n!tm_manage_ban_state_query_requ"
    "est\022\020\n\010page_num\030\001 \002(\r\"}\n\037mt_manage_ban_s"
    "tate_query_reply\022\022\n\nreply_code\030\001 \002(\r\0221\n\010"
    "ban_list\030\002 \003(\0132\037.proto.gm_common.ban_sta"
    "te_info\022\023\n\013total_pages\030\003 \001(\r\"[\n\'tm_monit"
    "or_get_behavior_records_request\022\020\n\010user_"
    "uid\030\001 \002(\004\022\014\n\004type\030\002 \002(\r\022\020\n\010page_num\030\003 \001("
    "\r\"\332\002\n%mt_monitor_get_behavior_records_re"
    "ply\022\022\n\nreply_code\030\001 \002(\r\022\020\n\010user_uid\030\002 \001("
    "\004\022\014\n\004type\030\003 \001(\r\0229\n\014sign_records\030\004 \003(\0132#."
    "proto.gm_common.sign_record_single\0229\n\014dr"
    "aw_records\030\005 \003(\0132#.proto.gm_common.draw_"
    "record_single\0227\n\013buy_records\030\006 \003(\0132\".pro"
    "to.gm_common.buy_record_single\0229\n\014shop_r"
    "ecords\030\007 \003(\0132#.proto.gm_common.shop_reco"
    "rd_single\022\023\n\013total_pages\030\010 \001(\r\"@\n\024ma_mas"
    "ked_msg_notify\022\023\n\013masked_list\030\001 \003(\r\022\023\n\013m"
    "asked_flag\030\002 \002(\r\"\?\n\027tm_reload_config_not"
    "ify\022\021\n\tload_type\030\001 \001(\r\022\021\n\tfile_name\030\002 \001("
    "\t\"6\n\025me_ban_account_notify\022\014\n\004flag\030\001 \002(\r"
    "\022\017\n\007account\030\002 \002(\t\"G\n\023me_access_ip_notify"
    "\022\014\n\004flag\030\001 \002(\r\022\022\n\nip_address\030\002 \002(\t\022\016\n\006ip"
    "_end\030\003 \001(\r\"/\n\017tm_test_request\022\r\n\005test1\030\001"
    " \002(\r\022\r\n\005test2\030\002 \002(\r\"-\n\rmt_test_reply\022\r\n\005"
    "test1\030\001 \002(\r\022\r\n\005test2\030\002 \002(\r\"V\n\030gm_data_th"
    "reshold_notify\022\013\n\003uid\030\001 \001(\004\022\014\n\004type\030\002 \001("
    "\r\022\r\n\005value\030\003 \001(\r\022\020\n\005param\030\004 \001(\r:\0010\"T\n\032em"
    "_do_change_cdkey_request\022\020\n\010role_uid\030\001 \001"
    "(\004\022\022\n\nchannel_id\030\002 \001(\r\022\020\n\010key_code\030\003 \001(\t"
    "\"R\n\030me_do_change_cdkey_reply\022\022\n\nreply_co"
    "de\030\001 \001(\r\022\020\n\010role_uid\030\002 \001(\004\022\020\n\010key_type\030\003"
    " \001(\r\"N\n\024me_send_mail_request\0226\n\tmail_dat"
    "a\030\001 \001(\0132#.proto.gm_common.global_mail_si"
    "ngle\"\034\n\032tm_get_user_ol_num_request\"*\n\030mt"
    "_get_user_ol_num_reply\022\016\n\006ol_num\030\001 \001(\r\"."
    "\n\032me_get_user_ol_num_request\022\020\n\010admin_id"
    "\030\001 \001(\r\"<\n\030em_get_user_ol_num_reply\022\016\n\006ol"
    "_num\030\001 \001(\r\022\020\n\010admin_id\030\002 \001(\r\"j\n\026tm_send_"
    "notice_request\022\014\n\004type\030\001 \001(\r\022\014\n\004tick\030\002 \001"
    "(\r\022\022\n\nstart_time\030\003 \001(\r\022\020\n\010end_time\030\004 \001(\r"
    "\022\016\n\006notice\030\005 \001(\t\"*\n\024mt_send_notice_reply"
    "\022\022\n\nreply_code\030\001 \001(\r\"P\n\026me_send_notice_r"
    "equest\0226\n\013notice_data\030\001 \001(\0132!.proto.gm_c"
    "ommon.gm_notice_single\"*\n\024em_send_notice"
    "_reply\022\022\n\nreply_code\030\001 \001(\r\"6\n\020me_transpo"
    "rt_ntf\022\020\n\010role_uid\030\001 \001(\004\022\020\n\010scene_id\030\002 \001"
    "(\r\"0\n tm_set_user_create_limit_request\022\014"
    "\n\004flag\030\001 \001(\r\"4\n\036mt_set_user_create_limit"
    "_reply\022\022\n\nreply_code\030\001 \001(\r\"c\n!me_send_gm"
    "_msg_to_account_request\022\020\n\010cmd_type\030\001 \001("
    "\r\022,\n\003msg\030\002 \001(\0132\037.proto.common.gm_msg_to_"
    "account\"\027\n\025tm_refresh_login_list\"/\n\033tm_s"
    "earch_role_byid_request\022\020\n\010role_did\030\001 \001("
    "\r\"2\n\035tm_search_role_byname_request\022\021\n\tro"
    "le_name\030\001 \001(\t\"\274\002\n\033mt_search_role_byname_"
    "reply\022\020\n\010role_did\030\001 \001(\r\022\021\n\trole_name\030\002 \001"
    "(\t\022\023\n\013create_time\030\003 \001(\r\022\027\n\017last_login_ti"
    "me\030\004 \001(\r\022\030\n\020last_logout_time\030\005 \001(\r\022\r\n\005le"
    "vel\030\006 \001(\r\022\026\n\016total_recharge\030\007 \001(\r\022\014\n\004gol"
    "d\030\010 \001(\r\022\016\n\006silver\030\t \001(\r\022\016\n\006copper\030\n \001(\r\022"
    "\022\n\nlife_stone\030\013 \001(\r\022\020\n\010fighting\030\014 \001(\r\022\020\n"
    "\010scene_id\030\r \001(\r\022\021\n\tvip_level\030\016 \001(\r\022\020\n\010ro"
    "le_uid\030\017 \001(\004\"5\n\026mall_reload_xml_notify\022\r"
    "\n\005field\030\001 \001(\t\022\014\n\004dest\030\002 \001(\t", 5387);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "gm.proto", &protobuf_RegisterTypes);
  tm_monitor_get_user_info_request::default_instance_ = new tm_monitor_get_user_info_request();
  mt_monitor_get_user_info_reply::default_instance_ = new mt_monitor_get_user_info_reply();
  tm_monitor_get_recharge_count_request::default_instance_ = new tm_monitor_get_recharge_count_request();
  mt_monitor_get_recharge_count_reply::default_instance_ = new mt_monitor_get_recharge_count_reply();
  tm_set_user_data_request::default_instance_ = new tm_set_user_data_request();
  mt_set_user_data_reply::default_instance_ = new mt_set_user_data_reply();
  tm_monitor_get_item_info_request::default_instance_ = new tm_monitor_get_item_info_request();
  mt_monitor_get_item_info_reply::default_instance_ = new mt_monitor_get_item_info_reply();
  tm_monitor_get_hero_info_request::default_instance_ = new tm_monitor_get_hero_info_request();
  mt_monitor_get_hero_info_reply::default_instance_ = new mt_monitor_get_hero_info_reply();
  tm_monitor_get_consume_record_request::default_instance_ = new tm_monitor_get_consume_record_request();
  mt_monitor_get_consume_record_reply::default_instance_ = new mt_monitor_get_consume_record_reply();
  tm_monitor_get_pve_info_request::default_instance_ = new tm_monitor_get_pve_info_request();
  mt_monitor_get_pve_info_reply::default_instance_ = new mt_monitor_get_pve_info_reply();
  tm_send_mail_request::default_instance_ = new tm_send_mail_request();
  mt_send_mail_reply::default_instance_ = new mt_send_mail_reply();
  tm_monitor_get_equip_info_request::default_instance_ = new tm_monitor_get_equip_info_request();
  mt_monitor_get_equip_info_reply::default_instance_ = new mt_monitor_get_equip_info_reply();
  tm_monitor_get_pvp_info_request::default_instance_ = new tm_monitor_get_pvp_info_request();
  mt_monitor_get_pvp_info_reply::default_instance_ = new mt_monitor_get_pvp_info_reply();
  tm_manage_role_byid_request::default_instance_ = new tm_manage_role_byid_request();
  mt_manage_role_byid_reply::default_instance_ = new mt_manage_role_byid_reply();
  tm_manage_role_byname_request::default_instance_ = new tm_manage_role_byname_request();
  mt_manage_role_byname_reply::default_instance_ = new mt_manage_role_byname_reply();
  tm_manage_ban_state_query_request::default_instance_ = new tm_manage_ban_state_query_request();
  mt_manage_ban_state_query_reply::default_instance_ = new mt_manage_ban_state_query_reply();
  tm_monitor_get_behavior_records_request::default_instance_ = new tm_monitor_get_behavior_records_request();
  mt_monitor_get_behavior_records_reply::default_instance_ = new mt_monitor_get_behavior_records_reply();
  ma_masked_msg_notify::default_instance_ = new ma_masked_msg_notify();
  tm_reload_config_notify::default_instance_ = new tm_reload_config_notify();
  me_ban_account_notify::default_instance_ = new me_ban_account_notify();
  me_access_ip_notify::default_instance_ = new me_access_ip_notify();
  tm_test_request::default_instance_ = new tm_test_request();
  mt_test_reply::default_instance_ = new mt_test_reply();
  gm_data_threshold_notify::default_instance_ = new gm_data_threshold_notify();
  em_do_change_cdkey_request::default_instance_ = new em_do_change_cdkey_request();
  me_do_change_cdkey_reply::default_instance_ = new me_do_change_cdkey_reply();
  me_send_mail_request::default_instance_ = new me_send_mail_request();
  tm_get_user_ol_num_request::default_instance_ = new tm_get_user_ol_num_request();
  mt_get_user_ol_num_reply::default_instance_ = new mt_get_user_ol_num_reply();
  me_get_user_ol_num_request::default_instance_ = new me_get_user_ol_num_request();
  em_get_user_ol_num_reply::default_instance_ = new em_get_user_ol_num_reply();
  tm_send_notice_request::default_instance_ = new tm_send_notice_request();
  mt_send_notice_reply::default_instance_ = new mt_send_notice_reply();
  me_send_notice_request::default_instance_ = new me_send_notice_request();
  em_send_notice_reply::default_instance_ = new em_send_notice_reply();
  me_transport_ntf::default_instance_ = new me_transport_ntf();
  tm_set_user_create_limit_request::default_instance_ = new tm_set_user_create_limit_request();
  mt_set_user_create_limit_reply::default_instance_ = new mt_set_user_create_limit_reply();
  me_send_gm_msg_to_account_request::default_instance_ = new me_send_gm_msg_to_account_request();
  tm_refresh_login_list::default_instance_ = new tm_refresh_login_list();
  tm_search_role_byid_request::default_instance_ = new tm_search_role_byid_request();
  tm_search_role_byname_request::default_instance_ = new tm_search_role_byname_request();
  mt_search_role_byname_reply::default_instance_ = new mt_search_role_byname_reply();
  mall_reload_xml_notify::default_instance_ = new mall_reload_xml_notify();
  tm_monitor_get_user_info_request::default_instance_->InitAsDefaultInstance();
  mt_monitor_get_user_info_reply::default_instance_->InitAsDefaultInstance();
  tm_monitor_get_recharge_count_request::default_instance_->InitAsDefaultInstance();
  mt_monitor_get_recharge_count_reply::default_instance_->InitAsDefaultInstance();
  tm_set_user_data_request::default_instance_->InitAsDefaultInstance();
  mt_set_user_data_reply::default_instance_->InitAsDefaultInstance();
  tm_monitor_get_item_info_request::default_instance_->InitAsDefaultInstance();
  mt_monitor_get_item_info_reply::default_instance_->InitAsDefaultInstance();
  tm_monitor_get_hero_info_request::default_instance_->InitAsDefaultInstance();
  mt_monitor_get_hero_info_reply::default_instance_->InitAsDefaultInstance();
  tm_monitor_get_consume_record_request::default_instance_->InitAsDefaultInstance();
  mt_monitor_get_consume_record_reply::default_instance_->InitAsDefaultInstance();
  tm_monitor_get_pve_info_request::default_instance_->InitAsDefaultInstance();
  mt_monitor_get_pve_info_reply::default_instance_->InitAsDefaultInstance();
  tm_send_mail_request::default_instance_->InitAsDefaultInstance();
  mt_send_mail_reply::default_instance_->InitAsDefaultInstance();
  tm_monitor_get_equip_info_request::default_instance_->InitAsDefaultInstance();
  mt_monitor_get_equip_info_reply::default_instance_->InitAsDefaultInstance();
  tm_monitor_get_pvp_info_request::default_instance_->InitAsDefaultInstance();
  mt_monitor_get_pvp_info_reply::default_instance_->InitAsDefaultInstance();
  tm_manage_role_byid_request::default_instance_->InitAsDefaultInstance();
  mt_manage_role_byid_reply::default_instance_->InitAsDefaultInstance();
  tm_manage_role_byname_request::default_instance_->InitAsDefaultInstance();
  mt_manage_role_byname_reply::default_instance_->InitAsDefaultInstance();
  tm_manage_ban_state_query_request::default_instance_->InitAsDefaultInstance();
  mt_manage_ban_state_query_reply::default_instance_->InitAsDefaultInstance();
  tm_monitor_get_behavior_records_request::default_instance_->InitAsDefaultInstance();
  mt_monitor_get_behavior_records_reply::default_instance_->InitAsDefaultInstance();
  ma_masked_msg_notify::default_instance_->InitAsDefaultInstance();
  tm_reload_config_notify::default_instance_->InitAsDefaultInstance();
  me_ban_account_notify::default_instance_->InitAsDefaultInstance();
  me_access_ip_notify::default_instance_->InitAsDefaultInstance();
  tm_test_request::default_instance_->InitAsDefaultInstance();
  mt_test_reply::default_instance_->InitAsDefaultInstance();
  gm_data_threshold_notify::default_instance_->InitAsDefaultInstance();
  em_do_change_cdkey_request::default_instance_->InitAsDefaultInstance();
  me_do_change_cdkey_reply::default_instance_->InitAsDefaultInstance();
  me_send_mail_request::default_instance_->InitAsDefaultInstance();
  tm_get_user_ol_num_request::default_instance_->InitAsDefaultInstance();
  mt_get_user_ol_num_reply::default_instance_->InitAsDefaultInstance();
  me_get_user_ol_num_request::default_instance_->InitAsDefaultInstance();
  em_get_user_ol_num_reply::default_instance_->InitAsDefaultInstance();
  tm_send_notice_request::default_instance_->InitAsDefaultInstance();
  mt_send_notice_reply::default_instance_->InitAsDefaultInstance();
  me_send_notice_request::default_instance_->InitAsDefaultInstance();
  em_send_notice_reply::default_instance_->InitAsDefaultInstance();
  me_transport_ntf::default_instance_->InitAsDefaultInstance();
  tm_set_user_create_limit_request::default_instance_->InitAsDefaultInstance();
  mt_set_user_create_limit_reply::default_instance_->InitAsDefaultInstance();
  me_send_gm_msg_to_account_request::default_instance_->InitAsDefaultInstance();
  tm_refresh_login_list::default_instance_->InitAsDefaultInstance();
  tm_search_role_byid_request::default_instance_->InitAsDefaultInstance();
  tm_search_role_byname_request::default_instance_->InitAsDefaultInstance();
  mt_search_role_byname_reply::default_instance_->InitAsDefaultInstance();
  mall_reload_xml_notify::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_gm_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_gm_2eproto {
  StaticDescriptorInitializer_gm_2eproto() {
    protobuf_AddDesc_gm_2eproto();
  }
} static_descriptor_initializer_gm_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int tm_monitor_get_user_info_request::kUserDidFieldNumber;
const int tm_monitor_get_user_info_request::kNickNameFieldNumber;
#endif  // !_MSC_VER

tm_monitor_get_user_info_request::tm_monitor_get_user_info_request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void tm_monitor_get_user_info_request::InitAsDefaultInstance() {
}

tm_monitor_get_user_info_request::tm_monitor_get_user_info_request(const tm_monitor_get_user_info_request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void tm_monitor_get_user_info_request::SharedCtor() {
  _cached_size_ = 0;
  user_did_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  nick_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

tm_monitor_get_user_info_request::~tm_monitor_get_user_info_request() {
  SharedDtor();
}

void tm_monitor_get_user_info_request::SharedDtor() {
  if (user_did_ != &::google::protobuf::internal::kEmptyString) {
    delete user_did_;
  }
  if (nick_name_ != &::google::protobuf::internal::kEmptyString) {
    delete nick_name_;
  }
  if (this != default_instance_) {
  }
}

void tm_monitor_get_user_info_request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tm_monitor_get_user_info_request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tm_monitor_get_user_info_request_descriptor_;
}

const tm_monitor_get_user_info_request& tm_monitor_get_user_info_request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gm_2eproto();
  return *default_instance_;
}

tm_monitor_get_user_info_request* tm_monitor_get_user_info_request::default_instance_ = NULL;

tm_monitor_get_user_info_request* tm_monitor_get_user_info_request::New() const {
  return new tm_monitor_get_user_info_request;
}

void tm_monitor_get_user_info_request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_user_did()) {
      if (user_did_ != &::google::protobuf::internal::kEmptyString) {
        user_did_->clear();
      }
    }
    if (has_nick_name()) {
      if (nick_name_ != &::google::protobuf::internal::kEmptyString) {
        nick_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool tm_monitor_get_user_info_request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string user_did = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_did()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user_did().data(), this->user_did().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_nick_name;
        break;
      }

      // optional string nick_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nick_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nick_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->nick_name().data(), this->nick_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void tm_monitor_get_user_info_request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string user_did = 1;
  if (has_user_did()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_did().data(), this->user_did().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->user_did(), output);
  }

  // optional string nick_name = 2;
  if (has_nick_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nick_name().data(), this->nick_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->nick_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* tm_monitor_get_user_info_request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string user_did = 1;
  if (has_user_did()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_did().data(), this->user_did().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->user_did(), target);
  }

  // optional string nick_name = 2;
  if (has_nick_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nick_name().data(), this->nick_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->nick_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int tm_monitor_get_user_info_request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string user_did = 1;
    if (has_user_did()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_did());
    }

    // optional string nick_name = 2;
    if (has_nick_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nick_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tm_monitor_get_user_info_request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const tm_monitor_get_user_info_request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const tm_monitor_get_user_info_request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void tm_monitor_get_user_info_request::MergeFrom(const tm_monitor_get_user_info_request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_did()) {
      set_user_did(from.user_did());
    }
    if (from.has_nick_name()) {
      set_nick_name(from.nick_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void tm_monitor_get_user_info_request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tm_monitor_get_user_info_request::CopyFrom(const tm_monitor_get_user_info_request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tm_monitor_get_user_info_request::IsInitialized() const {

  return true;
}

void tm_monitor_get_user_info_request::Swap(tm_monitor_get_user_info_request* other) {
  if (other != this) {
    std::swap(user_did_, other->user_did_);
    std::swap(nick_name_, other->nick_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata tm_monitor_get_user_info_request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = tm_monitor_get_user_info_request_descriptor_;
  metadata.reflection = tm_monitor_get_user_info_request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mt_monitor_get_user_info_reply::kReplyCodeFieldNumber;
const int mt_monitor_get_user_info_reply::kBaseInfoFieldNumber;
#endif  // !_MSC_VER

mt_monitor_get_user_info_reply::mt_monitor_get_user_info_reply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void mt_monitor_get_user_info_reply::InitAsDefaultInstance() {
  base_info_ = const_cast< ::proto::gm_common::user_base_info*>(&::proto::gm_common::user_base_info::default_instance());
}

mt_monitor_get_user_info_reply::mt_monitor_get_user_info_reply(const mt_monitor_get_user_info_reply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void mt_monitor_get_user_info_reply::SharedCtor() {
  _cached_size_ = 0;
  reply_code_ = 0u;
  base_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mt_monitor_get_user_info_reply::~mt_monitor_get_user_info_reply() {
  SharedDtor();
}

void mt_monitor_get_user_info_reply::SharedDtor() {
  if (this != default_instance_) {
    delete base_info_;
  }
}

void mt_monitor_get_user_info_reply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mt_monitor_get_user_info_reply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mt_monitor_get_user_info_reply_descriptor_;
}

const mt_monitor_get_user_info_reply& mt_monitor_get_user_info_reply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gm_2eproto();
  return *default_instance_;
}

mt_monitor_get_user_info_reply* mt_monitor_get_user_info_reply::default_instance_ = NULL;

mt_monitor_get_user_info_reply* mt_monitor_get_user_info_reply::New() const {
  return new mt_monitor_get_user_info_reply;
}

void mt_monitor_get_user_info_reply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    reply_code_ = 0u;
    if (has_base_info()) {
      if (base_info_ != NULL) base_info_->::proto::gm_common::user_base_info::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mt_monitor_get_user_info_reply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 reply_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reply_code_)));
          set_has_reply_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_base_info;
        break;
      }

      // optional .proto.gm_common.user_base_info base_info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_base_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void mt_monitor_get_user_info_reply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 reply_code = 1;
  if (has_reply_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->reply_code(), output);
  }

  // optional .proto.gm_common.user_base_info base_info = 2;
  if (has_base_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->base_info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* mt_monitor_get_user_info_reply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 reply_code = 1;
  if (has_reply_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->reply_code(), target);
  }

  // optional .proto.gm_common.user_base_info base_info = 2;
  if (has_base_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->base_info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int mt_monitor_get_user_info_reply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 reply_code = 1;
    if (has_reply_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reply_code());
    }

    // optional .proto.gm_common.user_base_info base_info = 2;
    if (has_base_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->base_info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mt_monitor_get_user_info_reply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mt_monitor_get_user_info_reply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mt_monitor_get_user_info_reply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mt_monitor_get_user_info_reply::MergeFrom(const mt_monitor_get_user_info_reply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reply_code()) {
      set_reply_code(from.reply_code());
    }
    if (from.has_base_info()) {
      mutable_base_info()->::proto::gm_common::user_base_info::MergeFrom(from.base_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mt_monitor_get_user_info_reply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mt_monitor_get_user_info_reply::CopyFrom(const mt_monitor_get_user_info_reply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mt_monitor_get_user_info_reply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void mt_monitor_get_user_info_reply::Swap(mt_monitor_get_user_info_reply* other) {
  if (other != this) {
    std::swap(reply_code_, other->reply_code_);
    std::swap(base_info_, other->base_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mt_monitor_get_user_info_reply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mt_monitor_get_user_info_reply_descriptor_;
  metadata.reflection = mt_monitor_get_user_info_reply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int tm_monitor_get_recharge_count_request::kUserUidFieldNumber;
const int tm_monitor_get_recharge_count_request::kPageNumFieldNumber;
#endif  // !_MSC_VER

tm_monitor_get_recharge_count_request::tm_monitor_get_recharge_count_request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void tm_monitor_get_recharge_count_request::InitAsDefaultInstance() {
}

tm_monitor_get_recharge_count_request::tm_monitor_get_recharge_count_request(const tm_monitor_get_recharge_count_request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void tm_monitor_get_recharge_count_request::SharedCtor() {
  _cached_size_ = 0;
  user_uid_ = GOOGLE_ULONGLONG(0);
  page_num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

tm_monitor_get_recharge_count_request::~tm_monitor_get_recharge_count_request() {
  SharedDtor();
}

void tm_monitor_get_recharge_count_request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void tm_monitor_get_recharge_count_request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tm_monitor_get_recharge_count_request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tm_monitor_get_recharge_count_request_descriptor_;
}

const tm_monitor_get_recharge_count_request& tm_monitor_get_recharge_count_request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gm_2eproto();
  return *default_instance_;
}

tm_monitor_get_recharge_count_request* tm_monitor_get_recharge_count_request::default_instance_ = NULL;

tm_monitor_get_recharge_count_request* tm_monitor_get_recharge_count_request::New() const {
  return new tm_monitor_get_recharge_count_request;
}

void tm_monitor_get_recharge_count_request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    user_uid_ = GOOGLE_ULONGLONG(0);
    page_num_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool tm_monitor_get_recharge_count_request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 user_uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_uid_)));
          set_has_user_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_page_num;
        break;
      }

      // required uint32 page_num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_page_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &page_num_)));
          set_has_page_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void tm_monitor_get_recharge_count_request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 user_uid = 1;
  if (has_user_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->user_uid(), output);
  }

  // required uint32 page_num = 2;
  if (has_page_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->page_num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* tm_monitor_get_recharge_count_request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 user_uid = 1;
  if (has_user_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->user_uid(), target);
  }

  // required uint32 page_num = 2;
  if (has_page_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->page_num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int tm_monitor_get_recharge_count_request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 user_uid = 1;
    if (has_user_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_uid());
    }

    // required uint32 page_num = 2;
    if (has_page_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->page_num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tm_monitor_get_recharge_count_request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const tm_monitor_get_recharge_count_request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const tm_monitor_get_recharge_count_request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void tm_monitor_get_recharge_count_request::MergeFrom(const tm_monitor_get_recharge_count_request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_uid()) {
      set_user_uid(from.user_uid());
    }
    if (from.has_page_num()) {
      set_page_num(from.page_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void tm_monitor_get_recharge_count_request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tm_monitor_get_recharge_count_request::CopyFrom(const tm_monitor_get_recharge_count_request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tm_monitor_get_recharge_count_request::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void tm_monitor_get_recharge_count_request::Swap(tm_monitor_get_recharge_count_request* other) {
  if (other != this) {
    std::swap(user_uid_, other->user_uid_);
    std::swap(page_num_, other->page_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata tm_monitor_get_recharge_count_request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = tm_monitor_get_recharge_count_request_descriptor_;
  metadata.reflection = tm_monitor_get_recharge_count_request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mt_monitor_get_recharge_count_reply::kReplyCodeFieldNumber;
const int mt_monitor_get_recharge_count_reply::kStatisticsFieldNumber;
const int mt_monitor_get_recharge_count_reply::kUserUidFieldNumber;
const int mt_monitor_get_recharge_count_reply::kTotalPagesFieldNumber;
#endif  // !_MSC_VER

mt_monitor_get_recharge_count_reply::mt_monitor_get_recharge_count_reply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void mt_monitor_get_recharge_count_reply::InitAsDefaultInstance() {
  statistics_ = const_cast< ::proto::gm_common::recharge_count_info*>(&::proto::gm_common::recharge_count_info::default_instance());
}

mt_monitor_get_recharge_count_reply::mt_monitor_get_recharge_count_reply(const mt_monitor_get_recharge_count_reply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void mt_monitor_get_recharge_count_reply::SharedCtor() {
  _cached_size_ = 0;
  reply_code_ = 0u;
  statistics_ = NULL;
  user_uid_ = GOOGLE_ULONGLONG(0);
  total_pages_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mt_monitor_get_recharge_count_reply::~mt_monitor_get_recharge_count_reply() {
  SharedDtor();
}

void mt_monitor_get_recharge_count_reply::SharedDtor() {
  if (this != default_instance_) {
    delete statistics_;
  }
}

void mt_monitor_get_recharge_count_reply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mt_monitor_get_recharge_count_reply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mt_monitor_get_recharge_count_reply_descriptor_;
}

const mt_monitor_get_recharge_count_reply& mt_monitor_get_recharge_count_reply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gm_2eproto();
  return *default_instance_;
}

mt_monitor_get_recharge_count_reply* mt_monitor_get_recharge_count_reply::default_instance_ = NULL;

mt_monitor_get_recharge_count_reply* mt_monitor_get_recharge_count_reply::New() const {
  return new mt_monitor_get_recharge_count_reply;
}

void mt_monitor_get_recharge_count_reply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    reply_code_ = 0u;
    if (has_statistics()) {
      if (statistics_ != NULL) statistics_->::proto::gm_common::recharge_count_info::Clear();
    }
    user_uid_ = GOOGLE_ULONGLONG(0);
    total_pages_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mt_monitor_get_recharge_count_reply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 reply_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reply_code_)));
          set_has_reply_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_statistics;
        break;
      }

      // optional .proto.gm_common.recharge_count_info statistics = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_statistics:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_statistics()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_user_uid;
        break;
      }

      // optional uint64 user_uid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_user_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_uid_)));
          set_has_user_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_total_pages;
        break;
      }

      // optional uint32 total_pages = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_pages:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_pages_)));
          set_has_total_pages();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void mt_monitor_get_recharge_count_reply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 reply_code = 1;
  if (has_reply_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->reply_code(), output);
  }

  // optional .proto.gm_common.recharge_count_info statistics = 2;
  if (has_statistics()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->statistics(), output);
  }

  // optional uint64 user_uid = 3;
  if (has_user_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->user_uid(), output);
  }

  // optional uint32 total_pages = 4;
  if (has_total_pages()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->total_pages(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* mt_monitor_get_recharge_count_reply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 reply_code = 1;
  if (has_reply_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->reply_code(), target);
  }

  // optional .proto.gm_common.recharge_count_info statistics = 2;
  if (has_statistics()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->statistics(), target);
  }

  // optional uint64 user_uid = 3;
  if (has_user_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->user_uid(), target);
  }

  // optional uint32 total_pages = 4;
  if (has_total_pages()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->total_pages(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int mt_monitor_get_recharge_count_reply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 reply_code = 1;
    if (has_reply_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reply_code());
    }

    // optional .proto.gm_common.recharge_count_info statistics = 2;
    if (has_statistics()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->statistics());
    }

    // optional uint64 user_uid = 3;
    if (has_user_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_uid());
    }

    // optional uint32 total_pages = 4;
    if (has_total_pages()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->total_pages());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mt_monitor_get_recharge_count_reply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mt_monitor_get_recharge_count_reply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mt_monitor_get_recharge_count_reply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mt_monitor_get_recharge_count_reply::MergeFrom(const mt_monitor_get_recharge_count_reply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reply_code()) {
      set_reply_code(from.reply_code());
    }
    if (from.has_statistics()) {
      mutable_statistics()->::proto::gm_common::recharge_count_info::MergeFrom(from.statistics());
    }
    if (from.has_user_uid()) {
      set_user_uid(from.user_uid());
    }
    if (from.has_total_pages()) {
      set_total_pages(from.total_pages());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mt_monitor_get_recharge_count_reply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mt_monitor_get_recharge_count_reply::CopyFrom(const mt_monitor_get_recharge_count_reply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mt_monitor_get_recharge_count_reply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void mt_monitor_get_recharge_count_reply::Swap(mt_monitor_get_recharge_count_reply* other) {
  if (other != this) {
    std::swap(reply_code_, other->reply_code_);
    std::swap(statistics_, other->statistics_);
    std::swap(user_uid_, other->user_uid_);
    std::swap(total_pages_, other->total_pages_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mt_monitor_get_recharge_count_reply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mt_monitor_get_recharge_count_reply_descriptor_;
  metadata.reflection = mt_monitor_get_recharge_count_reply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int tm_set_user_data_request::kUserUidFieldNumber;
const int tm_set_user_data_request::kOpTypeFieldNumber;
const int tm_set_user_data_request::kGoldFieldNumber;
const int tm_set_user_data_request::kDiamondFieldNumber;
const int tm_set_user_data_request::kExpFieldNumber;
const int tm_set_user_data_request::kLevelFieldNumber;
const int tm_set_user_data_request::kApFieldNumber;
const int tm_set_user_data_request::kSkillPointFieldNumber;
const int tm_set_user_data_request::kPveBadgeFieldNumber;
const int tm_set_user_data_request::kPvpBadgeFieldNumber;
const int tm_set_user_data_request::kFateFieldNumber;
const int tm_set_user_data_request::kVipExpFieldNumber;
const int tm_set_user_data_request::kVipLevelFieldNumber;
#endif  // !_MSC_VER

tm_set_user_data_request::tm_set_user_data_request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void tm_set_user_data_request::InitAsDefaultInstance() {
}

tm_set_user_data_request::tm_set_user_data_request(const tm_set_user_data_request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void tm_set_user_data_request::SharedCtor() {
  _cached_size_ = 0;
  user_uid_ = GOOGLE_ULONGLONG(0);
  op_type_ = 0;
  gold_ = 0;
  diamond_ = 0;
  exp_ = 0;
  level_ = 0;
  ap_ = 0;
  skill_point_ = 0;
  pve_badge_ = 0;
  pvp_badge_ = 0;
  fate_ = 0;
  vip_exp_ = 0;
  vip_level_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

tm_set_user_data_request::~tm_set_user_data_request() {
  SharedDtor();
}

void tm_set_user_data_request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void tm_set_user_data_request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tm_set_user_data_request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tm_set_user_data_request_descriptor_;
}

const tm_set_user_data_request& tm_set_user_data_request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gm_2eproto();
  return *default_instance_;
}

tm_set_user_data_request* tm_set_user_data_request::default_instance_ = NULL;

tm_set_user_data_request* tm_set_user_data_request::New() const {
  return new tm_set_user_data_request;
}

void tm_set_user_data_request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    user_uid_ = GOOGLE_ULONGLONG(0);
    op_type_ = 0;
    gold_ = 0;
    diamond_ = 0;
    exp_ = 0;
    level_ = 0;
    ap_ = 0;
    skill_point_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    pve_badge_ = 0;
    pvp_badge_ = 0;
    fate_ = 0;
    vip_exp_ = 0;
    vip_level_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool tm_set_user_data_request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 user_uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_uid_)));
          set_has_user_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_op_type;
        break;
      }

      // required int32 op_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_op_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &op_type_)));
          set_has_op_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_gold;
        break;
      }

      // optional int32 gold = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gold_)));
          set_has_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_diamond;
        break;
      }

      // optional int32 diamond = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_diamond:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &diamond_)));
          set_has_diamond();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_exp;
        break;
      }

      // optional int32 exp = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_level;
        break;
      }

      // optional int32 level = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_ap;
        break;
      }

      // optional int32 ap = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ap:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ap_)));
          set_has_ap();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_skill_point;
        break;
      }

      // optional int32 skill_point = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skill_point:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skill_point_)));
          set_has_skill_point();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_pve_badge;
        break;
      }

      // optional int32 pve_badge = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pve_badge:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pve_badge_)));
          set_has_pve_badge();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_pvp_badge;
        break;
      }

      // optional int32 pvp_badge = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pvp_badge:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pvp_badge_)));
          set_has_pvp_badge();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_fate;
        break;
      }

      // optional int32 fate = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fate_)));
          set_has_fate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_vip_exp;
        break;
      }

      // optional int32 vip_exp = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vip_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vip_exp_)));
          set_has_vip_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_vip_level;
        break;
      }

      // optional int32 vip_level = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vip_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vip_level_)));
          set_has_vip_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void tm_set_user_data_request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 user_uid = 1;
  if (has_user_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->user_uid(), output);
  }

  // required int32 op_type = 2;
  if (has_op_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->op_type(), output);
  }

  // optional int32 gold = 3;
  if (has_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->gold(), output);
  }

  // optional int32 diamond = 4;
  if (has_diamond()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->diamond(), output);
  }

  // optional int32 exp = 5;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->exp(), output);
  }

  // optional int32 level = 6;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->level(), output);
  }

  // optional int32 ap = 7;
  if (has_ap()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->ap(), output);
  }

  // optional int32 skill_point = 8;
  if (has_skill_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->skill_point(), output);
  }

  // optional int32 pve_badge = 9;
  if (has_pve_badge()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->pve_badge(), output);
  }

  // optional int32 pvp_badge = 10;
  if (has_pvp_badge()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->pvp_badge(), output);
  }

  // optional int32 fate = 11;
  if (has_fate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->fate(), output);
  }

  // optional int32 vip_exp = 12;
  if (has_vip_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->vip_exp(), output);
  }

  // optional int32 vip_level = 13;
  if (has_vip_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->vip_level(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* tm_set_user_data_request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 user_uid = 1;
  if (has_user_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->user_uid(), target);
  }

  // required int32 op_type = 2;
  if (has_op_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->op_type(), target);
  }

  // optional int32 gold = 3;
  if (has_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->gold(), target);
  }

  // optional int32 diamond = 4;
  if (has_diamond()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->diamond(), target);
  }

  // optional int32 exp = 5;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->exp(), target);
  }

  // optional int32 level = 6;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->level(), target);
  }

  // optional int32 ap = 7;
  if (has_ap()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->ap(), target);
  }

  // optional int32 skill_point = 8;
  if (has_skill_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->skill_point(), target);
  }

  // optional int32 pve_badge = 9;
  if (has_pve_badge()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->pve_badge(), target);
  }

  // optional int32 pvp_badge = 10;
  if (has_pvp_badge()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->pvp_badge(), target);
  }

  // optional int32 fate = 11;
  if (has_fate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->fate(), target);
  }

  // optional int32 vip_exp = 12;
  if (has_vip_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->vip_exp(), target);
  }

  // optional int32 vip_level = 13;
  if (has_vip_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->vip_level(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int tm_set_user_data_request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 user_uid = 1;
    if (has_user_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_uid());
    }

    // required int32 op_type = 2;
    if (has_op_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->op_type());
    }

    // optional int32 gold = 3;
    if (has_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gold());
    }

    // optional int32 diamond = 4;
    if (has_diamond()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->diamond());
    }

    // optional int32 exp = 5;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exp());
    }

    // optional int32 level = 6;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional int32 ap = 7;
    if (has_ap()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ap());
    }

    // optional int32 skill_point = 8;
    if (has_skill_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skill_point());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 pve_badge = 9;
    if (has_pve_badge()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pve_badge());
    }

    // optional int32 pvp_badge = 10;
    if (has_pvp_badge()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pvp_badge());
    }

    // optional int32 fate = 11;
    if (has_fate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fate());
    }

    // optional int32 vip_exp = 12;
    if (has_vip_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vip_exp());
    }

    // optional int32 vip_level = 13;
    if (has_vip_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vip_level());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tm_set_user_data_request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const tm_set_user_data_request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const tm_set_user_data_request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void tm_set_user_data_request::MergeFrom(const tm_set_user_data_request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_uid()) {
      set_user_uid(from.user_uid());
    }
    if (from.has_op_type()) {
      set_op_type(from.op_type());
    }
    if (from.has_gold()) {
      set_gold(from.gold());
    }
    if (from.has_diamond()) {
      set_diamond(from.diamond());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_ap()) {
      set_ap(from.ap());
    }
    if (from.has_skill_point()) {
      set_skill_point(from.skill_point());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_pve_badge()) {
      set_pve_badge(from.pve_badge());
    }
    if (from.has_pvp_badge()) {
      set_pvp_badge(from.pvp_badge());
    }
    if (from.has_fate()) {
      set_fate(from.fate());
    }
    if (from.has_vip_exp()) {
      set_vip_exp(from.vip_exp());
    }
    if (from.has_vip_level()) {
      set_vip_level(from.vip_level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void tm_set_user_data_request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tm_set_user_data_request::CopyFrom(const tm_set_user_data_request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tm_set_user_data_request::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void tm_set_user_data_request::Swap(tm_set_user_data_request* other) {
  if (other != this) {
    std::swap(user_uid_, other->user_uid_);
    std::swap(op_type_, other->op_type_);
    std::swap(gold_, other->gold_);
    std::swap(diamond_, other->diamond_);
    std::swap(exp_, other->exp_);
    std::swap(level_, other->level_);
    std::swap(ap_, other->ap_);
    std::swap(skill_point_, other->skill_point_);
    std::swap(pve_badge_, other->pve_badge_);
    std::swap(pvp_badge_, other->pvp_badge_);
    std::swap(fate_, other->fate_);
    std::swap(vip_exp_, other->vip_exp_);
    std::swap(vip_level_, other->vip_level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata tm_set_user_data_request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = tm_set_user_data_request_descriptor_;
  metadata.reflection = tm_set_user_data_request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mt_set_user_data_reply::kReplyCodeFieldNumber;
const int mt_set_user_data_reply::kUserUidFieldNumber;
#endif  // !_MSC_VER

mt_set_user_data_reply::mt_set_user_data_reply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void mt_set_user_data_reply::InitAsDefaultInstance() {
}

mt_set_user_data_reply::mt_set_user_data_reply(const mt_set_user_data_reply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void mt_set_user_data_reply::SharedCtor() {
  _cached_size_ = 0;
  reply_code_ = 0u;
  user_uid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mt_set_user_data_reply::~mt_set_user_data_reply() {
  SharedDtor();
}

void mt_set_user_data_reply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void mt_set_user_data_reply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mt_set_user_data_reply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mt_set_user_data_reply_descriptor_;
}

const mt_set_user_data_reply& mt_set_user_data_reply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gm_2eproto();
  return *default_instance_;
}

mt_set_user_data_reply* mt_set_user_data_reply::default_instance_ = NULL;

mt_set_user_data_reply* mt_set_user_data_reply::New() const {
  return new mt_set_user_data_reply;
}

void mt_set_user_data_reply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    reply_code_ = 0u;
    user_uid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mt_set_user_data_reply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 reply_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reply_code_)));
          set_has_reply_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_user_uid;
        break;
      }

      // optional uint64 user_uid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_user_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_uid_)));
          set_has_user_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void mt_set_user_data_reply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 reply_code = 1;
  if (has_reply_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->reply_code(), output);
  }

  // optional uint64 user_uid = 2;
  if (has_user_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->user_uid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* mt_set_user_data_reply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 reply_code = 1;
  if (has_reply_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->reply_code(), target);
  }

  // optional uint64 user_uid = 2;
  if (has_user_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->user_uid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int mt_set_user_data_reply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 reply_code = 1;
    if (has_reply_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reply_code());
    }

    // optional uint64 user_uid = 2;
    if (has_user_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_uid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mt_set_user_data_reply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mt_set_user_data_reply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mt_set_user_data_reply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mt_set_user_data_reply::MergeFrom(const mt_set_user_data_reply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reply_code()) {
      set_reply_code(from.reply_code());
    }
    if (from.has_user_uid()) {
      set_user_uid(from.user_uid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mt_set_user_data_reply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mt_set_user_data_reply::CopyFrom(const mt_set_user_data_reply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mt_set_user_data_reply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void mt_set_user_data_reply::Swap(mt_set_user_data_reply* other) {
  if (other != this) {
    std::swap(reply_code_, other->reply_code_);
    std::swap(user_uid_, other->user_uid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mt_set_user_data_reply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mt_set_user_data_reply_descriptor_;
  metadata.reflection = mt_set_user_data_reply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int tm_monitor_get_item_info_request::kUserUidFieldNumber;
#endif  // !_MSC_VER

tm_monitor_get_item_info_request::tm_monitor_get_item_info_request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void tm_monitor_get_item_info_request::InitAsDefaultInstance() {
}

tm_monitor_get_item_info_request::tm_monitor_get_item_info_request(const tm_monitor_get_item_info_request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void tm_monitor_get_item_info_request::SharedCtor() {
  _cached_size_ = 0;
  user_uid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

tm_monitor_get_item_info_request::~tm_monitor_get_item_info_request() {
  SharedDtor();
}

void tm_monitor_get_item_info_request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void tm_monitor_get_item_info_request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tm_monitor_get_item_info_request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tm_monitor_get_item_info_request_descriptor_;
}

const tm_monitor_get_item_info_request& tm_monitor_get_item_info_request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gm_2eproto();
  return *default_instance_;
}

tm_monitor_get_item_info_request* tm_monitor_get_item_info_request::default_instance_ = NULL;

tm_monitor_get_item_info_request* tm_monitor_get_item_info_request::New() const {
  return new tm_monitor_get_item_info_request;
}

void tm_monitor_get_item_info_request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    user_uid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool tm_monitor_get_item_info_request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 user_uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_uid_)));
          set_has_user_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void tm_monitor_get_item_info_request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 user_uid = 1;
  if (has_user_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->user_uid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* tm_monitor_get_item_info_request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 user_uid = 1;
  if (has_user_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->user_uid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int tm_monitor_get_item_info_request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 user_uid = 1;
    if (has_user_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_uid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tm_monitor_get_item_info_request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const tm_monitor_get_item_info_request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const tm_monitor_get_item_info_request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void tm_monitor_get_item_info_request::MergeFrom(const tm_monitor_get_item_info_request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_uid()) {
      set_user_uid(from.user_uid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void tm_monitor_get_item_info_request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tm_monitor_get_item_info_request::CopyFrom(const tm_monitor_get_item_info_request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tm_monitor_get_item_info_request::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void tm_monitor_get_item_info_request::Swap(tm_monitor_get_item_info_request* other) {
  if (other != this) {
    std::swap(user_uid_, other->user_uid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata tm_monitor_get_item_info_request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = tm_monitor_get_item_info_request_descriptor_;
  metadata.reflection = tm_monitor_get_item_info_request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mt_monitor_get_item_info_reply::kReplyCodeFieldNumber;
const int mt_monitor_get_item_info_reply::kItemInfoFieldNumber;
const int mt_monitor_get_item_info_reply::kUserUidFieldNumber;
#endif  // !_MSC_VER

mt_monitor_get_item_info_reply::mt_monitor_get_item_info_reply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void mt_monitor_get_item_info_reply::InitAsDefaultInstance() {
  item_info_ = const_cast< ::proto::gm_common::item_data*>(&::proto::gm_common::item_data::default_instance());
}

mt_monitor_get_item_info_reply::mt_monitor_get_item_info_reply(const mt_monitor_get_item_info_reply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void mt_monitor_get_item_info_reply::SharedCtor() {
  _cached_size_ = 0;
  reply_code_ = 0u;
  item_info_ = NULL;
  user_uid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mt_monitor_get_item_info_reply::~mt_monitor_get_item_info_reply() {
  SharedDtor();
}

void mt_monitor_get_item_info_reply::SharedDtor() {
  if (this != default_instance_) {
    delete item_info_;
  }
}

void mt_monitor_get_item_info_reply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mt_monitor_get_item_info_reply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mt_monitor_get_item_info_reply_descriptor_;
}

const mt_monitor_get_item_info_reply& mt_monitor_get_item_info_reply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gm_2eproto();
  return *default_instance_;
}

mt_monitor_get_item_info_reply* mt_monitor_get_item_info_reply::default_instance_ = NULL;

mt_monitor_get_item_info_reply* mt_monitor_get_item_info_reply::New() const {
  return new mt_monitor_get_item_info_reply;
}

void mt_monitor_get_item_info_reply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    reply_code_ = 0u;
    if (has_item_info()) {
      if (item_info_ != NULL) item_info_->::proto::gm_common::item_data::Clear();
    }
    user_uid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mt_monitor_get_item_info_reply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 reply_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reply_code_)));
          set_has_reply_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_item_info;
        break;
      }

      // optional .proto.gm_common.item_data item_info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_item_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_user_uid;
        break;
      }

      // optional uint64 user_uid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_user_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_uid_)));
          set_has_user_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void mt_monitor_get_item_info_reply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 reply_code = 1;
  if (has_reply_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->reply_code(), output);
  }

  // optional .proto.gm_common.item_data item_info = 2;
  if (has_item_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->item_info(), output);
  }

  // optional uint64 user_uid = 3;
  if (has_user_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->user_uid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* mt_monitor_get_item_info_reply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 reply_code = 1;
  if (has_reply_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->reply_code(), target);
  }

  // optional .proto.gm_common.item_data item_info = 2;
  if (has_item_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->item_info(), target);
  }

  // optional uint64 user_uid = 3;
  if (has_user_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->user_uid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int mt_monitor_get_item_info_reply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 reply_code = 1;
    if (has_reply_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reply_code());
    }

    // optional .proto.gm_common.item_data item_info = 2;
    if (has_item_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->item_info());
    }

    // optional uint64 user_uid = 3;
    if (has_user_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_uid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mt_monitor_get_item_info_reply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mt_monitor_get_item_info_reply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mt_monitor_get_item_info_reply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mt_monitor_get_item_info_reply::MergeFrom(const mt_monitor_get_item_info_reply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reply_code()) {
      set_reply_code(from.reply_code());
    }
    if (from.has_item_info()) {
      mutable_item_info()->::proto::gm_common::item_data::MergeFrom(from.item_info());
    }
    if (from.has_user_uid()) {
      set_user_uid(from.user_uid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mt_monitor_get_item_info_reply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mt_monitor_get_item_info_reply::CopyFrom(const mt_monitor_get_item_info_reply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mt_monitor_get_item_info_reply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void mt_monitor_get_item_info_reply::Swap(mt_monitor_get_item_info_reply* other) {
  if (other != this) {
    std::swap(reply_code_, other->reply_code_);
    std::swap(item_info_, other->item_info_);
    std::swap(user_uid_, other->user_uid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mt_monitor_get_item_info_reply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mt_monitor_get_item_info_reply_descriptor_;
  metadata.reflection = mt_monitor_get_item_info_reply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int tm_monitor_get_hero_info_request::kUserUidFieldNumber;
#endif  // !_MSC_VER

tm_monitor_get_hero_info_request::tm_monitor_get_hero_info_request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void tm_monitor_get_hero_info_request::InitAsDefaultInstance() {
}

tm_monitor_get_hero_info_request::tm_monitor_get_hero_info_request(const tm_monitor_get_hero_info_request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void tm_monitor_get_hero_info_request::SharedCtor() {
  _cached_size_ = 0;
  user_uid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

tm_monitor_get_hero_info_request::~tm_monitor_get_hero_info_request() {
  SharedDtor();
}

void tm_monitor_get_hero_info_request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void tm_monitor_get_hero_info_request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tm_monitor_get_hero_info_request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tm_monitor_get_hero_info_request_descriptor_;
}

const tm_monitor_get_hero_info_request& tm_monitor_get_hero_info_request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gm_2eproto();
  return *default_instance_;
}

tm_monitor_get_hero_info_request* tm_monitor_get_hero_info_request::default_instance_ = NULL;

tm_monitor_get_hero_info_request* tm_monitor_get_hero_info_request::New() const {
  return new tm_monitor_get_hero_info_request;
}

void tm_monitor_get_hero_info_request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    user_uid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool tm_monitor_get_hero_info_request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 user_uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_uid_)));
          set_has_user_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void tm_monitor_get_hero_info_request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 user_uid = 1;
  if (has_user_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->user_uid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* tm_monitor_get_hero_info_request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 user_uid = 1;
  if (has_user_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->user_uid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int tm_monitor_get_hero_info_request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 user_uid = 1;
    if (has_user_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_uid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tm_monitor_get_hero_info_request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const tm_monitor_get_hero_info_request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const tm_monitor_get_hero_info_request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void tm_monitor_get_hero_info_request::MergeFrom(const tm_monitor_get_hero_info_request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_uid()) {
      set_user_uid(from.user_uid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void tm_monitor_get_hero_info_request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tm_monitor_get_hero_info_request::CopyFrom(const tm_monitor_get_hero_info_request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tm_monitor_get_hero_info_request::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void tm_monitor_get_hero_info_request::Swap(tm_monitor_get_hero_info_request* other) {
  if (other != this) {
    std::swap(user_uid_, other->user_uid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata tm_monitor_get_hero_info_request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = tm_monitor_get_hero_info_request_descriptor_;
  metadata.reflection = tm_monitor_get_hero_info_request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mt_monitor_get_hero_info_reply::kReplyCodeFieldNumber;
const int mt_monitor_get_hero_info_reply::kHeroInfoFieldNumber;
const int mt_monitor_get_hero_info_reply::kUserUidFieldNumber;
#endif  // !_MSC_VER

mt_monitor_get_hero_info_reply::mt_monitor_get_hero_info_reply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void mt_monitor_get_hero_info_reply::InitAsDefaultInstance() {
  hero_info_ = const_cast< ::proto::gm_common::hero_data*>(&::proto::gm_common::hero_data::default_instance());
}

mt_monitor_get_hero_info_reply::mt_monitor_get_hero_info_reply(const mt_monitor_get_hero_info_reply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void mt_monitor_get_hero_info_reply::SharedCtor() {
  _cached_size_ = 0;
  reply_code_ = 0u;
  hero_info_ = NULL;
  user_uid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mt_monitor_get_hero_info_reply::~mt_monitor_get_hero_info_reply() {
  SharedDtor();
}

void mt_monitor_get_hero_info_reply::SharedDtor() {
  if (this != default_instance_) {
    delete hero_info_;
  }
}

void mt_monitor_get_hero_info_reply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mt_monitor_get_hero_info_reply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mt_monitor_get_hero_info_reply_descriptor_;
}

const mt_monitor_get_hero_info_reply& mt_monitor_get_hero_info_reply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gm_2eproto();
  return *default_instance_;
}

mt_monitor_get_hero_info_reply* mt_monitor_get_hero_info_reply::default_instance_ = NULL;

mt_monitor_get_hero_info_reply* mt_monitor_get_hero_info_reply::New() const {
  return new mt_monitor_get_hero_info_reply;
}

void mt_monitor_get_hero_info_reply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    reply_code_ = 0u;
    if (has_hero_info()) {
      if (hero_info_ != NULL) hero_info_->::proto::gm_common::hero_data::Clear();
    }
    user_uid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mt_monitor_get_hero_info_reply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 reply_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reply_code_)));
          set_has_reply_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_hero_info;
        break;
      }

      // optional .proto.gm_common.hero_data hero_info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hero_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hero_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_user_uid;
        break;
      }

      // optional uint64 user_uid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_user_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_uid_)));
          set_has_user_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void mt_monitor_get_hero_info_reply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 reply_code = 1;
  if (has_reply_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->reply_code(), output);
  }

  // optional .proto.gm_common.hero_data hero_info = 2;
  if (has_hero_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->hero_info(), output);
  }

  // optional uint64 user_uid = 3;
  if (has_user_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->user_uid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* mt_monitor_get_hero_info_reply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 reply_code = 1;
  if (has_reply_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->reply_code(), target);
  }

  // optional .proto.gm_common.hero_data hero_info = 2;
  if (has_hero_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->hero_info(), target);
  }

  // optional uint64 user_uid = 3;
  if (has_user_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->user_uid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int mt_monitor_get_hero_info_reply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 reply_code = 1;
    if (has_reply_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reply_code());
    }

    // optional .proto.gm_common.hero_data hero_info = 2;
    if (has_hero_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->hero_info());
    }

    // optional uint64 user_uid = 3;
    if (has_user_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_uid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mt_monitor_get_hero_info_reply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mt_monitor_get_hero_info_reply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mt_monitor_get_hero_info_reply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mt_monitor_get_hero_info_reply::MergeFrom(const mt_monitor_get_hero_info_reply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reply_code()) {
      set_reply_code(from.reply_code());
    }
    if (from.has_hero_info()) {
      mutable_hero_info()->::proto::gm_common::hero_data::MergeFrom(from.hero_info());
    }
    if (from.has_user_uid()) {
      set_user_uid(from.user_uid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mt_monitor_get_hero_info_reply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mt_monitor_get_hero_info_reply::CopyFrom(const mt_monitor_get_hero_info_reply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mt_monitor_get_hero_info_reply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void mt_monitor_get_hero_info_reply::Swap(mt_monitor_get_hero_info_reply* other) {
  if (other != this) {
    std::swap(reply_code_, other->reply_code_);
    std::swap(hero_info_, other->hero_info_);
    std::swap(user_uid_, other->user_uid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mt_monitor_get_hero_info_reply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mt_monitor_get_hero_info_reply_descriptor_;
  metadata.reflection = mt_monitor_get_hero_info_reply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int tm_monitor_get_consume_record_request::kUserUidFieldNumber;
const int tm_monitor_get_consume_record_request::kTypeFieldNumber;
const int tm_monitor_get_consume_record_request::kBeginTimeFieldNumber;
const int tm_monitor_get_consume_record_request::kEndTimeFieldNumber;
const int tm_monitor_get_consume_record_request::kPageNumFieldNumber;
#endif  // !_MSC_VER

tm_monitor_get_consume_record_request::tm_monitor_get_consume_record_request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void tm_monitor_get_consume_record_request::InitAsDefaultInstance() {
}

tm_monitor_get_consume_record_request::tm_monitor_get_consume_record_request(const tm_monitor_get_consume_record_request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void tm_monitor_get_consume_record_request::SharedCtor() {
  _cached_size_ = 0;
  user_uid_ = GOOGLE_ULONGLONG(0);
  type_ = 0u;
  begin_time_ = 0u;
  end_time_ = 0u;
  page_num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

tm_monitor_get_consume_record_request::~tm_monitor_get_consume_record_request() {
  SharedDtor();
}

void tm_monitor_get_consume_record_request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void tm_monitor_get_consume_record_request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tm_monitor_get_consume_record_request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tm_monitor_get_consume_record_request_descriptor_;
}

const tm_monitor_get_consume_record_request& tm_monitor_get_consume_record_request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gm_2eproto();
  return *default_instance_;
}

tm_monitor_get_consume_record_request* tm_monitor_get_consume_record_request::default_instance_ = NULL;

tm_monitor_get_consume_record_request* tm_monitor_get_consume_record_request::New() const {
  return new tm_monitor_get_consume_record_request;
}

void tm_monitor_get_consume_record_request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    user_uid_ = GOOGLE_ULONGLONG(0);
    type_ = 0u;
    begin_time_ = 0u;
    end_time_ = 0u;
    page_num_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool tm_monitor_get_consume_record_request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 user_uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_uid_)));
          set_has_user_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // required uint32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_begin_time;
        break;
      }

      // required uint32 begin_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_begin_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &begin_time_)));
          set_has_begin_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_end_time;
        break;
      }

      // required uint32 end_time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_end_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &end_time_)));
          set_has_end_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_page_num;
        break;
      }

      // required uint32 page_num = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_page_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &page_num_)));
          set_has_page_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void tm_monitor_get_consume_record_request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 user_uid = 1;
  if (has_user_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->user_uid(), output);
  }

  // required uint32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->type(), output);
  }

  // required uint32 begin_time = 3;
  if (has_begin_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->begin_time(), output);
  }

  // required uint32 end_time = 4;
  if (has_end_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->end_time(), output);
  }

  // required uint32 page_num = 5;
  if (has_page_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->page_num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* tm_monitor_get_consume_record_request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 user_uid = 1;
  if (has_user_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->user_uid(), target);
  }

  // required uint32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->type(), target);
  }

  // required uint32 begin_time = 3;
  if (has_begin_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->begin_time(), target);
  }

  // required uint32 end_time = 4;
  if (has_end_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->end_time(), target);
  }

  // required uint32 page_num = 5;
  if (has_page_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->page_num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int tm_monitor_get_consume_record_request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 user_uid = 1;
    if (has_user_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_uid());
    }

    // required uint32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // required uint32 begin_time = 3;
    if (has_begin_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->begin_time());
    }

    // required uint32 end_time = 4;
    if (has_end_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->end_time());
    }

    // required uint32 page_num = 5;
    if (has_page_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->page_num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tm_monitor_get_consume_record_request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const tm_monitor_get_consume_record_request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const tm_monitor_get_consume_record_request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void tm_monitor_get_consume_record_request::MergeFrom(const tm_monitor_get_consume_record_request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_uid()) {
      set_user_uid(from.user_uid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_begin_time()) {
      set_begin_time(from.begin_time());
    }
    if (from.has_end_time()) {
      set_end_time(from.end_time());
    }
    if (from.has_page_num()) {
      set_page_num(from.page_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void tm_monitor_get_consume_record_request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tm_monitor_get_consume_record_request::CopyFrom(const tm_monitor_get_consume_record_request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tm_monitor_get_consume_record_request::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void tm_monitor_get_consume_record_request::Swap(tm_monitor_get_consume_record_request* other) {
  if (other != this) {
    std::swap(user_uid_, other->user_uid_);
    std::swap(type_, other->type_);
    std::swap(begin_time_, other->begin_time_);
    std::swap(end_time_, other->end_time_);
    std::swap(page_num_, other->page_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata tm_monitor_get_consume_record_request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = tm_monitor_get_consume_record_request_descriptor_;
  metadata.reflection = tm_monitor_get_consume_record_request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mt_monitor_get_consume_record_reply::kReplyCodeFieldNumber;
const int mt_monitor_get_consume_record_reply::kConsumeInfoFieldNumber;
const int mt_monitor_get_consume_record_reply::kUserUidFieldNumber;
const int mt_monitor_get_consume_record_reply::kTotalPagesFieldNumber;
#endif  // !_MSC_VER

mt_monitor_get_consume_record_reply::mt_monitor_get_consume_record_reply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void mt_monitor_get_consume_record_reply::InitAsDefaultInstance() {
  consume_info_ = const_cast< ::proto::gm_common::consume_record_data*>(&::proto::gm_common::consume_record_data::default_instance());
}

mt_monitor_get_consume_record_reply::mt_monitor_get_consume_record_reply(const mt_monitor_get_consume_record_reply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void mt_monitor_get_consume_record_reply::SharedCtor() {
  _cached_size_ = 0;
  reply_code_ = 0u;
  consume_info_ = NULL;
  user_uid_ = GOOGLE_ULONGLONG(0);
  total_pages_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mt_monitor_get_consume_record_reply::~mt_monitor_get_consume_record_reply() {
  SharedDtor();
}

void mt_monitor_get_consume_record_reply::SharedDtor() {
  if (this != default_instance_) {
    delete consume_info_;
  }
}

void mt_monitor_get_consume_record_reply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mt_monitor_get_consume_record_reply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mt_monitor_get_consume_record_reply_descriptor_;
}

const mt_monitor_get_consume_record_reply& mt_monitor_get_consume_record_reply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gm_2eproto();
  return *default_instance_;
}

mt_monitor_get_consume_record_reply* mt_monitor_get_consume_record_reply::default_instance_ = NULL;

mt_monitor_get_consume_record_reply* mt_monitor_get_consume_record_reply::New() const {
  return new mt_monitor_get_consume_record_reply;
}

void mt_monitor_get_consume_record_reply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    reply_code_ = 0u;
    if (has_consume_info()) {
      if (consume_info_ != NULL) consume_info_->::proto::gm_common::consume_record_data::Clear();
    }
    user_uid_ = GOOGLE_ULONGLONG(0);
    total_pages_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mt_monitor_get_consume_record_reply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 reply_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reply_code_)));
          set_has_reply_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_consume_info;
        break;
      }

      // optional .proto.gm_common.consume_record_data consume_info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_consume_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_consume_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_user_uid;
        break;
      }

      // optional uint64 user_uid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_user_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_uid_)));
          set_has_user_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_total_pages;
        break;
      }

      // optional uint32 total_pages = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_pages:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_pages_)));
          set_has_total_pages();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void mt_monitor_get_consume_record_reply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 reply_code = 1;
  if (has_reply_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->reply_code(), output);
  }

  // optional .proto.gm_common.consume_record_data consume_info = 2;
  if (has_consume_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->consume_info(), output);
  }

  // optional uint64 user_uid = 3;
  if (has_user_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->user_uid(), output);
  }

  // optional uint32 total_pages = 4;
  if (has_total_pages()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->total_pages(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* mt_monitor_get_consume_record_reply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 reply_code = 1;
  if (has_reply_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->reply_code(), target);
  }

  // optional .proto.gm_common.consume_record_data consume_info = 2;
  if (has_consume_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->consume_info(), target);
  }

  // optional uint64 user_uid = 3;
  if (has_user_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->user_uid(), target);
  }

  // optional uint32 total_pages = 4;
  if (has_total_pages()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->total_pages(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int mt_monitor_get_consume_record_reply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 reply_code = 1;
    if (has_reply_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reply_code());
    }

    // optional .proto.gm_common.consume_record_data consume_info = 2;
    if (has_consume_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->consume_info());
    }

    // optional uint64 user_uid = 3;
    if (has_user_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_uid());
    }

    // optional uint32 total_pages = 4;
    if (has_total_pages()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->total_pages());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mt_monitor_get_consume_record_reply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mt_monitor_get_consume_record_reply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mt_monitor_get_consume_record_reply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mt_monitor_get_consume_record_reply::MergeFrom(const mt_monitor_get_consume_record_reply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reply_code()) {
      set_reply_code(from.reply_code());
    }
    if (from.has_consume_info()) {
      mutable_consume_info()->::proto::gm_common::consume_record_data::MergeFrom(from.consume_info());
    }
    if (from.has_user_uid()) {
      set_user_uid(from.user_uid());
    }
    if (from.has_total_pages()) {
      set_total_pages(from.total_pages());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mt_monitor_get_consume_record_reply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mt_monitor_get_consume_record_reply::CopyFrom(const mt_monitor_get_consume_record_reply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mt_monitor_get_consume_record_reply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void mt_monitor_get_consume_record_reply::Swap(mt_monitor_get_consume_record_reply* other) {
  if (other != this) {
    std::swap(reply_code_, other->reply_code_);
    std::swap(consume_info_, other->consume_info_);
    std::swap(user_uid_, other->user_uid_);
    std::swap(total_pages_, other->total_pages_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mt_monitor_get_consume_record_reply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mt_monitor_get_consume_record_reply_descriptor_;
  metadata.reflection = mt_monitor_get_consume_record_reply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int tm_monitor_get_pve_info_request::kUserUidFieldNumber;
const int tm_monitor_get_pve_info_request::kPveTypeFieldNumber;
const int tm_monitor_get_pve_info_request::kPageNumFieldNumber;
#endif  // !_MSC_VER

tm_monitor_get_pve_info_request::tm_monitor_get_pve_info_request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void tm_monitor_get_pve_info_request::InitAsDefaultInstance() {
}

tm_monitor_get_pve_info_request::tm_monitor_get_pve_info_request(const tm_monitor_get_pve_info_request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void tm_monitor_get_pve_info_request::SharedCtor() {
  _cached_size_ = 0;
  user_uid_ = GOOGLE_ULONGLONG(0);
  pve_type_ = 0;
  page_num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

tm_monitor_get_pve_info_request::~tm_monitor_get_pve_info_request() {
  SharedDtor();
}

void tm_monitor_get_pve_info_request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void tm_monitor_get_pve_info_request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tm_monitor_get_pve_info_request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tm_monitor_get_pve_info_request_descriptor_;
}

const tm_monitor_get_pve_info_request& tm_monitor_get_pve_info_request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gm_2eproto();
  return *default_instance_;
}

tm_monitor_get_pve_info_request* tm_monitor_get_pve_info_request::default_instance_ = NULL;

tm_monitor_get_pve_info_request* tm_monitor_get_pve_info_request::New() const {
  return new tm_monitor_get_pve_info_request;
}

void tm_monitor_get_pve_info_request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    user_uid_ = GOOGLE_ULONGLONG(0);
    pve_type_ = 0;
    page_num_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool tm_monitor_get_pve_info_request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 user_uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_uid_)));
          set_has_user_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_pve_type;
        break;
      }

      // required int32 pve_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pve_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pve_type_)));
          set_has_pve_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_page_num;
        break;
      }

      // required uint32 page_num = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_page_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &page_num_)));
          set_has_page_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void tm_monitor_get_pve_info_request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 user_uid = 1;
  if (has_user_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->user_uid(), output);
  }

  // required int32 pve_type = 2;
  if (has_pve_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->pve_type(), output);
  }

  // required uint32 page_num = 3;
  if (has_page_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->page_num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* tm_monitor_get_pve_info_request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 user_uid = 1;
  if (has_user_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->user_uid(), target);
  }

  // required int32 pve_type = 2;
  if (has_pve_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->pve_type(), target);
  }

  // required uint32 page_num = 3;
  if (has_page_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->page_num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int tm_monitor_get_pve_info_request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 user_uid = 1;
    if (has_user_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_uid());
    }

    // required int32 pve_type = 2;
    if (has_pve_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pve_type());
    }

    // required uint32 page_num = 3;
    if (has_page_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->page_num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tm_monitor_get_pve_info_request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const tm_monitor_get_pve_info_request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const tm_monitor_get_pve_info_request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void tm_monitor_get_pve_info_request::MergeFrom(const tm_monitor_get_pve_info_request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_uid()) {
      set_user_uid(from.user_uid());
    }
    if (from.has_pve_type()) {
      set_pve_type(from.pve_type());
    }
    if (from.has_page_num()) {
      set_page_num(from.page_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void tm_monitor_get_pve_info_request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tm_monitor_get_pve_info_request::CopyFrom(const tm_monitor_get_pve_info_request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tm_monitor_get_pve_info_request::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void tm_monitor_get_pve_info_request::Swap(tm_monitor_get_pve_info_request* other) {
  if (other != this) {
    std::swap(user_uid_, other->user_uid_);
    std::swap(pve_type_, other->pve_type_);
    std::swap(page_num_, other->page_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata tm_monitor_get_pve_info_request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = tm_monitor_get_pve_info_request_descriptor_;
  metadata.reflection = tm_monitor_get_pve_info_request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mt_monitor_get_pve_info_reply::kReplyCodeFieldNumber;
const int mt_monitor_get_pve_info_reply::kCampaignInfoFieldNumber;
const int mt_monitor_get_pve_info_reply::kMatrixInfoFieldNumber;
const int mt_monitor_get_pve_info_reply::kProduceInfoFieldNumber;
const int mt_monitor_get_pve_info_reply::kUserUidFieldNumber;
const int mt_monitor_get_pve_info_reply::kTotalPagesFieldNumber;
#endif  // !_MSC_VER

mt_monitor_get_pve_info_reply::mt_monitor_get_pve_info_reply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void mt_monitor_get_pve_info_reply::InitAsDefaultInstance() {
  campaign_info_ = const_cast< ::proto::gm_common::campaign_data*>(&::proto::gm_common::campaign_data::default_instance());
  matrix_info_ = const_cast< ::proto::gm_common::matrix_data*>(&::proto::gm_common::matrix_data::default_instance());
  produce_info_ = const_cast< ::proto::gm_common::produce_data*>(&::proto::gm_common::produce_data::default_instance());
}

mt_monitor_get_pve_info_reply::mt_monitor_get_pve_info_reply(const mt_monitor_get_pve_info_reply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void mt_monitor_get_pve_info_reply::SharedCtor() {
  _cached_size_ = 0;
  reply_code_ = 0u;
  campaign_info_ = NULL;
  matrix_info_ = NULL;
  produce_info_ = NULL;
  user_uid_ = GOOGLE_ULONGLONG(0);
  total_pages_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mt_monitor_get_pve_info_reply::~mt_monitor_get_pve_info_reply() {
  SharedDtor();
}

void mt_monitor_get_pve_info_reply::SharedDtor() {
  if (this != default_instance_) {
    delete campaign_info_;
    delete matrix_info_;
    delete produce_info_;
  }
}

void mt_monitor_get_pve_info_reply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mt_monitor_get_pve_info_reply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mt_monitor_get_pve_info_reply_descriptor_;
}

const mt_monitor_get_pve_info_reply& mt_monitor_get_pve_info_reply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gm_2eproto();
  return *default_instance_;
}

mt_monitor_get_pve_info_reply* mt_monitor_get_pve_info_reply::default_instance_ = NULL;

mt_monitor_get_pve_info_reply* mt_monitor_get_pve_info_reply::New() const {
  return new mt_monitor_get_pve_info_reply;
}

void mt_monitor_get_pve_info_reply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    reply_code_ = 0u;
    if (has_campaign_info()) {
      if (campaign_info_ != NULL) campaign_info_->::proto::gm_common::campaign_data::Clear();
    }
    if (has_matrix_info()) {
      if (matrix_info_ != NULL) matrix_info_->::proto::gm_common::matrix_data::Clear();
    }
    if (has_produce_info()) {
      if (produce_info_ != NULL) produce_info_->::proto::gm_common::produce_data::Clear();
    }
    user_uid_ = GOOGLE_ULONGLONG(0);
    total_pages_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mt_monitor_get_pve_info_reply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 reply_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reply_code_)));
          set_has_reply_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_campaign_info;
        break;
      }

      // optional .proto.gm_common.campaign_data campaign_info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_campaign_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_campaign_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_matrix_info;
        break;
      }

      // optional .proto.gm_common.matrix_data matrix_info = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_matrix_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_matrix_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_produce_info;
        break;
      }

      // optional .proto.gm_common.produce_data produce_info = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_produce_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_produce_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_user_uid;
        break;
      }

      // optional uint64 user_uid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_user_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_uid_)));
          set_has_user_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_total_pages;
        break;
      }

      // optional uint32 total_pages = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_pages:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_pages_)));
          set_has_total_pages();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void mt_monitor_get_pve_info_reply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 reply_code = 1;
  if (has_reply_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->reply_code(), output);
  }

  // optional .proto.gm_common.campaign_data campaign_info = 2;
  if (has_campaign_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->campaign_info(), output);
  }

  // optional .proto.gm_common.matrix_data matrix_info = 3;
  if (has_matrix_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->matrix_info(), output);
  }

  // optional .proto.gm_common.produce_data produce_info = 4;
  if (has_produce_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->produce_info(), output);
  }

  // optional uint64 user_uid = 5;
  if (has_user_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->user_uid(), output);
  }

  // optional uint32 total_pages = 6;
  if (has_total_pages()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->total_pages(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* mt_monitor_get_pve_info_reply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 reply_code = 1;
  if (has_reply_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->reply_code(), target);
  }

  // optional .proto.gm_common.campaign_data campaign_info = 2;
  if (has_campaign_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->campaign_info(), target);
  }

  // optional .proto.gm_common.matrix_data matrix_info = 3;
  if (has_matrix_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->matrix_info(), target);
  }

  // optional .proto.gm_common.produce_data produce_info = 4;
  if (has_produce_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->produce_info(), target);
  }

  // optional uint64 user_uid = 5;
  if (has_user_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->user_uid(), target);
  }

  // optional uint32 total_pages = 6;
  if (has_total_pages()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->total_pages(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int mt_monitor_get_pve_info_reply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 reply_code = 1;
    if (has_reply_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reply_code());
    }

    // optional .proto.gm_common.campaign_data campaign_info = 2;
    if (has_campaign_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->campaign_info());
    }

    // optional .proto.gm_common.matrix_data matrix_info = 3;
    if (has_matrix_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->matrix_info());
    }

    // optional .proto.gm_common.produce_data produce_info = 4;
    if (has_produce_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->produce_info());
    }

    // optional uint64 user_uid = 5;
    if (has_user_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_uid());
    }

    // optional uint32 total_pages = 6;
    if (has_total_pages()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->total_pages());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mt_monitor_get_pve_info_reply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mt_monitor_get_pve_info_reply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mt_monitor_get_pve_info_reply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mt_monitor_get_pve_info_reply::MergeFrom(const mt_monitor_get_pve_info_reply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reply_code()) {
      set_reply_code(from.reply_code());
    }
    if (from.has_campaign_info()) {
      mutable_campaign_info()->::proto::gm_common::campaign_data::MergeFrom(from.campaign_info());
    }
    if (from.has_matrix_info()) {
      mutable_matrix_info()->::proto::gm_common::matrix_data::MergeFrom(from.matrix_info());
    }
    if (from.has_produce_info()) {
      mutable_produce_info()->::proto::gm_common::produce_data::MergeFrom(from.produce_info());
    }
    if (from.has_user_uid()) {
      set_user_uid(from.user_uid());
    }
    if (from.has_total_pages()) {
      set_total_pages(from.total_pages());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mt_monitor_get_pve_info_reply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mt_monitor_get_pve_info_reply::CopyFrom(const mt_monitor_get_pve_info_reply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mt_monitor_get_pve_info_reply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void mt_monitor_get_pve_info_reply::Swap(mt_monitor_get_pve_info_reply* other) {
  if (other != this) {
    std::swap(reply_code_, other->reply_code_);
    std::swap(campaign_info_, other->campaign_info_);
    std::swap(matrix_info_, other->matrix_info_);
    std::swap(produce_info_, other->produce_info_);
    std::swap(user_uid_, other->user_uid_);
    std::swap(total_pages_, other->total_pages_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mt_monitor_get_pve_info_reply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mt_monitor_get_pve_info_reply_descriptor_;
  metadata.reflection = mt_monitor_get_pve_info_reply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int tm_send_mail_request::kReplyCodeFieldNumber;
#endif  // !_MSC_VER

tm_send_mail_request::tm_send_mail_request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void tm_send_mail_request::InitAsDefaultInstance() {
}

tm_send_mail_request::tm_send_mail_request(const tm_send_mail_request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void tm_send_mail_request::SharedCtor() {
  _cached_size_ = 0;
  reply_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

tm_send_mail_request::~tm_send_mail_request() {
  SharedDtor();
}

void tm_send_mail_request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void tm_send_mail_request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tm_send_mail_request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tm_send_mail_request_descriptor_;
}

const tm_send_mail_request& tm_send_mail_request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gm_2eproto();
  return *default_instance_;
}

tm_send_mail_request* tm_send_mail_request::default_instance_ = NULL;

tm_send_mail_request* tm_send_mail_request::New() const {
  return new tm_send_mail_request;
}

void tm_send_mail_request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    reply_code_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool tm_send_mail_request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 reply_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reply_code_)));
          set_has_reply_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void tm_send_mail_request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 reply_code = 1;
  if (has_reply_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->reply_code(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* tm_send_mail_request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 reply_code = 1;
  if (has_reply_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->reply_code(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int tm_send_mail_request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 reply_code = 1;
    if (has_reply_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reply_code());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tm_send_mail_request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const tm_send_mail_request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const tm_send_mail_request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void tm_send_mail_request::MergeFrom(const tm_send_mail_request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reply_code()) {
      set_reply_code(from.reply_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void tm_send_mail_request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tm_send_mail_request::CopyFrom(const tm_send_mail_request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tm_send_mail_request::IsInitialized() const {

  return true;
}

void tm_send_mail_request::Swap(tm_send_mail_request* other) {
  if (other != this) {
    std::swap(reply_code_, other->reply_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata tm_send_mail_request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = tm_send_mail_request_descriptor_;
  metadata.reflection = tm_send_mail_request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mt_send_mail_reply::kReplyCodeFieldNumber;
#endif  // !_MSC_VER

mt_send_mail_reply::mt_send_mail_reply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void mt_send_mail_reply::InitAsDefaultInstance() {
}

mt_send_mail_reply::mt_send_mail_reply(const mt_send_mail_reply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void mt_send_mail_reply::SharedCtor() {
  _cached_size_ = 0;
  reply_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mt_send_mail_reply::~mt_send_mail_reply() {
  SharedDtor();
}

void mt_send_mail_reply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void mt_send_mail_reply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mt_send_mail_reply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mt_send_mail_reply_descriptor_;
}

const mt_send_mail_reply& mt_send_mail_reply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gm_2eproto();
  return *default_instance_;
}

mt_send_mail_reply* mt_send_mail_reply::default_instance_ = NULL;

mt_send_mail_reply* mt_send_mail_reply::New() const {
  return new mt_send_mail_reply;
}

void mt_send_mail_reply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    reply_code_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mt_send_mail_reply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 reply_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reply_code_)));
          set_has_reply_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void mt_send_mail_reply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 reply_code = 1;
  if (has_reply_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->reply_code(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* mt_send_mail_reply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 reply_code = 1;
  if (has_reply_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->reply_code(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int mt_send_mail_reply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 reply_code = 1;
    if (has_reply_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reply_code());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mt_send_mail_reply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mt_send_mail_reply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mt_send_mail_reply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mt_send_mail_reply::MergeFrom(const mt_send_mail_reply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reply_code()) {
      set_reply_code(from.reply_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mt_send_mail_reply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mt_send_mail_reply::CopyFrom(const mt_send_mail_reply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mt_send_mail_reply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void mt_send_mail_reply::Swap(mt_send_mail_reply* other) {
  if (other != this) {
    std::swap(reply_code_, other->reply_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mt_send_mail_reply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mt_send_mail_reply_descriptor_;
  metadata.reflection = mt_send_mail_reply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int tm_monitor_get_equip_info_request::kUserUidFieldNumber;
#endif  // !_MSC_VER

tm_monitor_get_equip_info_request::tm_monitor_get_equip_info_request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void tm_monitor_get_equip_info_request::InitAsDefaultInstance() {
}

tm_monitor_get_equip_info_request::tm_monitor_get_equip_info_request(const tm_monitor_get_equip_info_request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void tm_monitor_get_equip_info_request::SharedCtor() {
  _cached_size_ = 0;
  user_uid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

tm_monitor_get_equip_info_request::~tm_monitor_get_equip_info_request() {
  SharedDtor();
}

void tm_monitor_get_equip_info_request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void tm_monitor_get_equip_info_request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tm_monitor_get_equip_info_request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tm_monitor_get_equip_info_request_descriptor_;
}

const tm_monitor_get_equip_info_request& tm_monitor_get_equip_info_request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gm_2eproto();
  return *default_instance_;
}

tm_monitor_get_equip_info_request* tm_monitor_get_equip_info_request::default_instance_ = NULL;

tm_monitor_get_equip_info_request* tm_monitor_get_equip_info_request::New() const {
  return new tm_monitor_get_equip_info_request;
}

void tm_monitor_get_equip_info_request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    user_uid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool tm_monitor_get_equip_info_request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 user_uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_uid_)));
          set_has_user_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void tm_monitor_get_equip_info_request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 user_uid = 1;
  if (has_user_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->user_uid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* tm_monitor_get_equip_info_request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 user_uid = 1;
  if (has_user_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->user_uid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int tm_monitor_get_equip_info_request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 user_uid = 1;
    if (has_user_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_uid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tm_monitor_get_equip_info_request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const tm_monitor_get_equip_info_request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const tm_monitor_get_equip_info_request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void tm_monitor_get_equip_info_request::MergeFrom(const tm_monitor_get_equip_info_request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_uid()) {
      set_user_uid(from.user_uid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void tm_monitor_get_equip_info_request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tm_monitor_get_equip_info_request::CopyFrom(const tm_monitor_get_equip_info_request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tm_monitor_get_equip_info_request::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void tm_monitor_get_equip_info_request::Swap(tm_monitor_get_equip_info_request* other) {
  if (other != this) {
    std::swap(user_uid_, other->user_uid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata tm_monitor_get_equip_info_request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = tm_monitor_get_equip_info_request_descriptor_;
  metadata.reflection = tm_monitor_get_equip_info_request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mt_monitor_get_equip_info_reply::kReplyCodeFieldNumber;
const int mt_monitor_get_equip_info_reply::kEquipInfoFieldNumber;
const int mt_monitor_get_equip_info_reply::kUserUidFieldNumber;
#endif  // !_MSC_VER

mt_monitor_get_equip_info_reply::mt_monitor_get_equip_info_reply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void mt_monitor_get_equip_info_reply::InitAsDefaultInstance() {
  equip_info_ = const_cast< ::proto::gm_common::equip_data*>(&::proto::gm_common::equip_data::default_instance());
}

mt_monitor_get_equip_info_reply::mt_monitor_get_equip_info_reply(const mt_monitor_get_equip_info_reply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void mt_monitor_get_equip_info_reply::SharedCtor() {
  _cached_size_ = 0;
  reply_code_ = 0u;
  equip_info_ = NULL;
  user_uid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mt_monitor_get_equip_info_reply::~mt_monitor_get_equip_info_reply() {
  SharedDtor();
}

void mt_monitor_get_equip_info_reply::SharedDtor() {
  if (this != default_instance_) {
    delete equip_info_;
  }
}

void mt_monitor_get_equip_info_reply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mt_monitor_get_equip_info_reply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mt_monitor_get_equip_info_reply_descriptor_;
}

const mt_monitor_get_equip_info_reply& mt_monitor_get_equip_info_reply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gm_2eproto();
  return *default_instance_;
}

mt_monitor_get_equip_info_reply* mt_monitor_get_equip_info_reply::default_instance_ = NULL;

mt_monitor_get_equip_info_reply* mt_monitor_get_equip_info_reply::New() const {
  return new mt_monitor_get_equip_info_reply;
}

void mt_monitor_get_equip_info_reply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    reply_code_ = 0u;
    if (has_equip_info()) {
      if (equip_info_ != NULL) equip_info_->::proto::gm_common::equip_data::Clear();
    }
    user_uid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mt_monitor_get_equip_info_reply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 reply_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reply_code_)));
          set_has_reply_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_equip_info;
        break;
      }

      // optional .proto.gm_common.equip_data equip_info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equip_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_equip_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_user_uid;
        break;
      }

      // optional uint64 user_uid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_user_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_uid_)));
          set_has_user_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void mt_monitor_get_equip_info_reply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 reply_code = 1;
  if (has_reply_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->reply_code(), output);
  }

  // optional .proto.gm_common.equip_data equip_info = 2;
  if (has_equip_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->equip_info(), output);
  }

  // optional uint64 user_uid = 3;
  if (has_user_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->user_uid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* mt_monitor_get_equip_info_reply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 reply_code = 1;
  if (has_reply_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->reply_code(), target);
  }

  // optional .proto.gm_common.equip_data equip_info = 2;
  if (has_equip_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->equip_info(), target);
  }

  // optional uint64 user_uid = 3;
  if (has_user_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->user_uid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int mt_monitor_get_equip_info_reply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 reply_code = 1;
    if (has_reply_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reply_code());
    }

    // optional .proto.gm_common.equip_data equip_info = 2;
    if (has_equip_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->equip_info());
    }

    // optional uint64 user_uid = 3;
    if (has_user_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_uid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mt_monitor_get_equip_info_reply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mt_monitor_get_equip_info_reply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mt_monitor_get_equip_info_reply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mt_monitor_get_equip_info_reply::MergeFrom(const mt_monitor_get_equip_info_reply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reply_code()) {
      set_reply_code(from.reply_code());
    }
    if (from.has_equip_info()) {
      mutable_equip_info()->::proto::gm_common::equip_data::MergeFrom(from.equip_info());
    }
    if (from.has_user_uid()) {
      set_user_uid(from.user_uid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mt_monitor_get_equip_info_reply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mt_monitor_get_equip_info_reply::CopyFrom(const mt_monitor_get_equip_info_reply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mt_monitor_get_equip_info_reply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void mt_monitor_get_equip_info_reply::Swap(mt_monitor_get_equip_info_reply* other) {
  if (other != this) {
    std::swap(reply_code_, other->reply_code_);
    std::swap(equip_info_, other->equip_info_);
    std::swap(user_uid_, other->user_uid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mt_monitor_get_equip_info_reply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mt_monitor_get_equip_info_reply_descriptor_;
  metadata.reflection = mt_monitor_get_equip_info_reply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int tm_monitor_get_pvp_info_request::kUserUidFieldNumber;
#endif  // !_MSC_VER

tm_monitor_get_pvp_info_request::tm_monitor_get_pvp_info_request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void tm_monitor_get_pvp_info_request::InitAsDefaultInstance() {
}

tm_monitor_get_pvp_info_request::tm_monitor_get_pvp_info_request(const tm_monitor_get_pvp_info_request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void tm_monitor_get_pvp_info_request::SharedCtor() {
  _cached_size_ = 0;
  user_uid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

tm_monitor_get_pvp_info_request::~tm_monitor_get_pvp_info_request() {
  SharedDtor();
}

void tm_monitor_get_pvp_info_request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void tm_monitor_get_pvp_info_request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tm_monitor_get_pvp_info_request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tm_monitor_get_pvp_info_request_descriptor_;
}

const tm_monitor_get_pvp_info_request& tm_monitor_get_pvp_info_request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gm_2eproto();
  return *default_instance_;
}

tm_monitor_get_pvp_info_request* tm_monitor_get_pvp_info_request::default_instance_ = NULL;

tm_monitor_get_pvp_info_request* tm_monitor_get_pvp_info_request::New() const {
  return new tm_monitor_get_pvp_info_request;
}

void tm_monitor_get_pvp_info_request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    user_uid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool tm_monitor_get_pvp_info_request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 user_uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_uid_)));
          set_has_user_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void tm_monitor_get_pvp_info_request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 user_uid = 1;
  if (has_user_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->user_uid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* tm_monitor_get_pvp_info_request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 user_uid = 1;
  if (has_user_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->user_uid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int tm_monitor_get_pvp_info_request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 user_uid = 1;
    if (has_user_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_uid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tm_monitor_get_pvp_info_request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const tm_monitor_get_pvp_info_request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const tm_monitor_get_pvp_info_request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void tm_monitor_get_pvp_info_request::MergeFrom(const tm_monitor_get_pvp_info_request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_uid()) {
      set_user_uid(from.user_uid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void tm_monitor_get_pvp_info_request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tm_monitor_get_pvp_info_request::CopyFrom(const tm_monitor_get_pvp_info_request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tm_monitor_get_pvp_info_request::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void tm_monitor_get_pvp_info_request::Swap(tm_monitor_get_pvp_info_request* other) {
  if (other != this) {
    std::swap(user_uid_, other->user_uid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata tm_monitor_get_pvp_info_request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = tm_monitor_get_pvp_info_request_descriptor_;
  metadata.reflection = tm_monitor_get_pvp_info_request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mt_monitor_get_pvp_info_reply::kReplyCodeFieldNumber;
const int mt_monitor_get_pvp_info_reply::kHistoryTopFieldNumber;
const int mt_monitor_get_pvp_info_reply::kBuyChallengeTimesFieldNumber;
const int mt_monitor_get_pvp_info_reply::kChallengeTimesFieldNumber;
const int mt_monitor_get_pvp_info_reply::kLastChallengeTimeFieldNumber;
#endif  // !_MSC_VER

mt_monitor_get_pvp_info_reply::mt_monitor_get_pvp_info_reply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void mt_monitor_get_pvp_info_reply::InitAsDefaultInstance() {
}

mt_monitor_get_pvp_info_reply::mt_monitor_get_pvp_info_reply(const mt_monitor_get_pvp_info_reply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void mt_monitor_get_pvp_info_reply::SharedCtor() {
  _cached_size_ = 0;
  reply_code_ = 0u;
  history_top_ = 0u;
  buy_challenge_times_ = 0u;
  challenge_times_ = 0u;
  last_challenge_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mt_monitor_get_pvp_info_reply::~mt_monitor_get_pvp_info_reply() {
  SharedDtor();
}

void mt_monitor_get_pvp_info_reply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void mt_monitor_get_pvp_info_reply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mt_monitor_get_pvp_info_reply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mt_monitor_get_pvp_info_reply_descriptor_;
}

const mt_monitor_get_pvp_info_reply& mt_monitor_get_pvp_info_reply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gm_2eproto();
  return *default_instance_;
}

mt_monitor_get_pvp_info_reply* mt_monitor_get_pvp_info_reply::default_instance_ = NULL;

mt_monitor_get_pvp_info_reply* mt_monitor_get_pvp_info_reply::New() const {
  return new mt_monitor_get_pvp_info_reply;
}

void mt_monitor_get_pvp_info_reply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    reply_code_ = 0u;
    history_top_ = 0u;
    buy_challenge_times_ = 0u;
    challenge_times_ = 0u;
    last_challenge_time_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mt_monitor_get_pvp_info_reply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 reply_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reply_code_)));
          set_has_reply_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_history_top;
        break;
      }

      // optional uint32 history_top = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_history_top:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &history_top_)));
          set_has_history_top();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_buy_challenge_times;
        break;
      }

      // optional uint32 buy_challenge_times = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buy_challenge_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &buy_challenge_times_)));
          set_has_buy_challenge_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_challenge_times;
        break;
      }

      // optional uint32 challenge_times = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_challenge_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &challenge_times_)));
          set_has_challenge_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_last_challenge_time;
        break;
      }

      // optional uint32 last_challenge_time = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_challenge_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_challenge_time_)));
          set_has_last_challenge_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void mt_monitor_get_pvp_info_reply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 reply_code = 1;
  if (has_reply_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->reply_code(), output);
  }

  // optional uint32 history_top = 2;
  if (has_history_top()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->history_top(), output);
  }

  // optional uint32 buy_challenge_times = 3;
  if (has_buy_challenge_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->buy_challenge_times(), output);
  }

  // optional uint32 challenge_times = 4;
  if (has_challenge_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->challenge_times(), output);
  }

  // optional uint32 last_challenge_time = 5;
  if (has_last_challenge_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->last_challenge_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* mt_monitor_get_pvp_info_reply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 reply_code = 1;
  if (has_reply_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->reply_code(), target);
  }

  // optional uint32 history_top = 2;
  if (has_history_top()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->history_top(), target);
  }

  // optional uint32 buy_challenge_times = 3;
  if (has_buy_challenge_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->buy_challenge_times(), target);
  }

  // optional uint32 challenge_times = 4;
  if (has_challenge_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->challenge_times(), target);
  }

  // optional uint32 last_challenge_time = 5;
  if (has_last_challenge_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->last_challenge_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int mt_monitor_get_pvp_info_reply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 reply_code = 1;
    if (has_reply_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reply_code());
    }

    // optional uint32 history_top = 2;
    if (has_history_top()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->history_top());
    }

    // optional uint32 buy_challenge_times = 3;
    if (has_buy_challenge_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->buy_challenge_times());
    }

    // optional uint32 challenge_times = 4;
    if (has_challenge_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->challenge_times());
    }

    // optional uint32 last_challenge_time = 5;
    if (has_last_challenge_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_challenge_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mt_monitor_get_pvp_info_reply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mt_monitor_get_pvp_info_reply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mt_monitor_get_pvp_info_reply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mt_monitor_get_pvp_info_reply::MergeFrom(const mt_monitor_get_pvp_info_reply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reply_code()) {
      set_reply_code(from.reply_code());
    }
    if (from.has_history_top()) {
      set_history_top(from.history_top());
    }
    if (from.has_buy_challenge_times()) {
      set_buy_challenge_times(from.buy_challenge_times());
    }
    if (from.has_challenge_times()) {
      set_challenge_times(from.challenge_times());
    }
    if (from.has_last_challenge_time()) {
      set_last_challenge_time(from.last_challenge_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mt_monitor_get_pvp_info_reply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mt_monitor_get_pvp_info_reply::CopyFrom(const mt_monitor_get_pvp_info_reply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mt_monitor_get_pvp_info_reply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void mt_monitor_get_pvp_info_reply::Swap(mt_monitor_get_pvp_info_reply* other) {
  if (other != this) {
    std::swap(reply_code_, other->reply_code_);
    std::swap(history_top_, other->history_top_);
    std::swap(buy_challenge_times_, other->buy_challenge_times_);
    std::swap(challenge_times_, other->challenge_times_);
    std::swap(last_challenge_time_, other->last_challenge_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mt_monitor_get_pvp_info_reply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mt_monitor_get_pvp_info_reply_descriptor_;
  metadata.reflection = mt_monitor_get_pvp_info_reply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int tm_manage_role_byid_request::kRoleDidFieldNumber;
const int tm_manage_role_byid_request::kManageTypeFieldNumber;
const int tm_manage_role_byid_request::kOffsetTimeFieldNumber;
const int tm_manage_role_byid_request::kReasonFieldNumber;
const int tm_manage_role_byid_request::kOperNameFieldNumber;
#endif  // !_MSC_VER

tm_manage_role_byid_request::tm_manage_role_byid_request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void tm_manage_role_byid_request::InitAsDefaultInstance() {
}

tm_manage_role_byid_request::tm_manage_role_byid_request(const tm_manage_role_byid_request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void tm_manage_role_byid_request::SharedCtor() {
  _cached_size_ = 0;
  manage_type_ = 0u;
  offset_time_ = 0u;
  reason_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  oper_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

tm_manage_role_byid_request::~tm_manage_role_byid_request() {
  SharedDtor();
}

void tm_manage_role_byid_request::SharedDtor() {
  if (reason_ != &::google::protobuf::internal::kEmptyString) {
    delete reason_;
  }
  if (oper_name_ != &::google::protobuf::internal::kEmptyString) {
    delete oper_name_;
  }
  if (this != default_instance_) {
  }
}

void tm_manage_role_byid_request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tm_manage_role_byid_request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tm_manage_role_byid_request_descriptor_;
}

const tm_manage_role_byid_request& tm_manage_role_byid_request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gm_2eproto();
  return *default_instance_;
}

tm_manage_role_byid_request* tm_manage_role_byid_request::default_instance_ = NULL;

tm_manage_role_byid_request* tm_manage_role_byid_request::New() const {
  return new tm_manage_role_byid_request;
}

void tm_manage_role_byid_request::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    manage_type_ = 0u;
    offset_time_ = 0u;
    if (has_reason()) {
      if (reason_ != &::google::protobuf::internal::kEmptyString) {
        reason_->clear();
      }
    }
    if (has_oper_name()) {
      if (oper_name_ != &::google::protobuf::internal::kEmptyString) {
        oper_name_->clear();
      }
    }
  }
  role_did_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool tm_manage_role_byid_request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 role_did = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_did:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_role_did())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_role_did())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_role_did;
        if (input->ExpectTag(16)) goto parse_manage_type;
        break;
      }

      // optional uint32 manage_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_manage_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &manage_type_)));
          set_has_manage_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_offset_time;
        break;
      }

      // optional uint32 offset_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_offset_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &offset_time_)));
          set_has_offset_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_reason;
        break;
      }

      // optional string reason = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reason:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reason()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->reason().data(), this->reason().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_oper_name;
        break;
      }

      // optional string oper_name = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_oper_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_oper_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->oper_name().data(), this->oper_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void tm_manage_role_byid_request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint32 role_did = 1;
  for (int i = 0; i < this->role_did_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->role_did(i), output);
  }

  // optional uint32 manage_type = 2;
  if (has_manage_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->manage_type(), output);
  }

  // optional uint32 offset_time = 3;
  if (has_offset_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->offset_time(), output);
  }

  // optional string reason = 4;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->reason().data(), this->reason().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->reason(), output);
  }

  // optional string oper_name = 5;
  if (has_oper_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->oper_name().data(), this->oper_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->oper_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* tm_manage_role_byid_request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 role_did = 1;
  for (int i = 0; i < this->role_did_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->role_did(i), target);
  }

  // optional uint32 manage_type = 2;
  if (has_manage_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->manage_type(), target);
  }

  // optional uint32 offset_time = 3;
  if (has_offset_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->offset_time(), target);
  }

  // optional string reason = 4;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->reason().data(), this->reason().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->reason(), target);
  }

  // optional string oper_name = 5;
  if (has_oper_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->oper_name().data(), this->oper_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->oper_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int tm_manage_role_byid_request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 manage_type = 2;
    if (has_manage_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->manage_type());
    }

    // optional uint32 offset_time = 3;
    if (has_offset_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->offset_time());
    }

    // optional string reason = 4;
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->reason());
    }

    // optional string oper_name = 5;
    if (has_oper_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->oper_name());
    }

  }
  // repeated uint32 role_did = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->role_did_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->role_did(i));
    }
    total_size += 1 * this->role_did_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tm_manage_role_byid_request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const tm_manage_role_byid_request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const tm_manage_role_byid_request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void tm_manage_role_byid_request::MergeFrom(const tm_manage_role_byid_request& from) {
  GOOGLE_CHECK_NE(&from, this);
  role_did_.MergeFrom(from.role_did_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_manage_type()) {
      set_manage_type(from.manage_type());
    }
    if (from.has_offset_time()) {
      set_offset_time(from.offset_time());
    }
    if (from.has_reason()) {
      set_reason(from.reason());
    }
    if (from.has_oper_name()) {
      set_oper_name(from.oper_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void tm_manage_role_byid_request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tm_manage_role_byid_request::CopyFrom(const tm_manage_role_byid_request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tm_manage_role_byid_request::IsInitialized() const {

  return true;
}

void tm_manage_role_byid_request::Swap(tm_manage_role_byid_request* other) {
  if (other != this) {
    role_did_.Swap(&other->role_did_);
    std::swap(manage_type_, other->manage_type_);
    std::swap(offset_time_, other->offset_time_);
    std::swap(reason_, other->reason_);
    std::swap(oper_name_, other->oper_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata tm_manage_role_byid_request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = tm_manage_role_byid_request_descriptor_;
  metadata.reflection = tm_manage_role_byid_request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mt_manage_role_byid_reply::kReplyDataFieldNumber;
const int mt_manage_role_byid_reply::kOperTimeFieldNumber;
const int mt_manage_role_byid_reply::kManageTypeFieldNumber;
const int mt_manage_role_byid_reply::kOffsetTimeFieldNumber;
const int mt_manage_role_byid_reply::kReasonFieldNumber;
const int mt_manage_role_byid_reply::kOperNameFieldNumber;
#endif  // !_MSC_VER

mt_manage_role_byid_reply::mt_manage_role_byid_reply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void mt_manage_role_byid_reply::InitAsDefaultInstance() {
}

mt_manage_role_byid_reply::mt_manage_role_byid_reply(const mt_manage_role_byid_reply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void mt_manage_role_byid_reply::SharedCtor() {
  _cached_size_ = 0;
  oper_time_ = 0u;
  manage_type_ = 0u;
  offset_time_ = 0u;
  reason_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  oper_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mt_manage_role_byid_reply::~mt_manage_role_byid_reply() {
  SharedDtor();
}

void mt_manage_role_byid_reply::SharedDtor() {
  if (reason_ != &::google::protobuf::internal::kEmptyString) {
    delete reason_;
  }
  if (oper_name_ != &::google::protobuf::internal::kEmptyString) {
    delete oper_name_;
  }
  if (this != default_instance_) {
  }
}

void mt_manage_role_byid_reply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mt_manage_role_byid_reply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mt_manage_role_byid_reply_descriptor_;
}

const mt_manage_role_byid_reply& mt_manage_role_byid_reply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gm_2eproto();
  return *default_instance_;
}

mt_manage_role_byid_reply* mt_manage_role_byid_reply::default_instance_ = NULL;

mt_manage_role_byid_reply* mt_manage_role_byid_reply::New() const {
  return new mt_manage_role_byid_reply;
}

void mt_manage_role_byid_reply::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    oper_time_ = 0u;
    manage_type_ = 0u;
    offset_time_ = 0u;
    if (has_reason()) {
      if (reason_ != &::google::protobuf::internal::kEmptyString) {
        reason_->clear();
      }
    }
    if (has_oper_name()) {
      if (oper_name_ != &::google::protobuf::internal::kEmptyString) {
        oper_name_->clear();
      }
    }
  }
  reply_data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mt_manage_role_byid_reply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.gm_common.manage_reply_single reply_data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reply_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_reply_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_reply_data;
        if (input->ExpectTag(16)) goto parse_oper_time;
        break;
      }

      // optional uint32 oper_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_oper_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &oper_time_)));
          set_has_oper_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_manage_type;
        break;
      }

      // optional uint32 manage_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_manage_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &manage_type_)));
          set_has_manage_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_offset_time;
        break;
      }

      // optional uint32 offset_time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_offset_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &offset_time_)));
          set_has_offset_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_reason;
        break;
      }

      // optional string reason = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reason:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reason()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->reason().data(), this->reason().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_oper_name;
        break;
      }

      // optional string oper_name = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_oper_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_oper_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->oper_name().data(), this->oper_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void mt_manage_role_byid_reply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto.gm_common.manage_reply_single reply_data = 1;
  for (int i = 0; i < this->reply_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->reply_data(i), output);
  }

  // optional uint32 oper_time = 2;
  if (has_oper_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->oper_time(), output);
  }

  // optional uint32 manage_type = 3;
  if (has_manage_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->manage_type(), output);
  }

  // optional uint32 offset_time = 4;
  if (has_offset_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->offset_time(), output);
  }

  // optional string reason = 5;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->reason().data(), this->reason().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->reason(), output);
  }

  // optional string oper_name = 6;
  if (has_oper_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->oper_name().data(), this->oper_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->oper_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* mt_manage_role_byid_reply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto.gm_common.manage_reply_single reply_data = 1;
  for (int i = 0; i < this->reply_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->reply_data(i), target);
  }

  // optional uint32 oper_time = 2;
  if (has_oper_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->oper_time(), target);
  }

  // optional uint32 manage_type = 3;
  if (has_manage_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->manage_type(), target);
  }

  // optional uint32 offset_time = 4;
  if (has_offset_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->offset_time(), target);
  }

  // optional string reason = 5;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->reason().data(), this->reason().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->reason(), target);
  }

  // optional string oper_name = 6;
  if (has_oper_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->oper_name().data(), this->oper_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->oper_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int mt_manage_role_byid_reply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 oper_time = 2;
    if (has_oper_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->oper_time());
    }

    // optional uint32 manage_type = 3;
    if (has_manage_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->manage_type());
    }

    // optional uint32 offset_time = 4;
    if (has_offset_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->offset_time());
    }

    // optional string reason = 5;
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->reason());
    }

    // optional string oper_name = 6;
    if (has_oper_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->oper_name());
    }

  }
  // repeated .proto.gm_common.manage_reply_single reply_data = 1;
  total_size += 1 * this->reply_data_size();
  for (int i = 0; i < this->reply_data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->reply_data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mt_manage_role_byid_reply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mt_manage_role_byid_reply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mt_manage_role_byid_reply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mt_manage_role_byid_reply::MergeFrom(const mt_manage_role_byid_reply& from) {
  GOOGLE_CHECK_NE(&from, this);
  reply_data_.MergeFrom(from.reply_data_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_oper_time()) {
      set_oper_time(from.oper_time());
    }
    if (from.has_manage_type()) {
      set_manage_type(from.manage_type());
    }
    if (from.has_offset_time()) {
      set_offset_time(from.offset_time());
    }
    if (from.has_reason()) {
      set_reason(from.reason());
    }
    if (from.has_oper_name()) {
      set_oper_name(from.oper_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mt_manage_role_byid_reply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mt_manage_role_byid_reply::CopyFrom(const mt_manage_role_byid_reply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mt_manage_role_byid_reply::IsInitialized() const {

  return true;
}

void mt_manage_role_byid_reply::Swap(mt_manage_role_byid_reply* other) {
  if (other != this) {
    reply_data_.Swap(&other->reply_data_);
    std::swap(oper_time_, other->oper_time_);
    std::swap(manage_type_, other->manage_type_);
    std::swap(offset_time_, other->offset_time_);
    std::swap(reason_, other->reason_);
    std::swap(oper_name_, other->oper_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mt_manage_role_byid_reply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mt_manage_role_byid_reply_descriptor_;
  metadata.reflection = mt_manage_role_byid_reply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int tm_manage_role_byname_request::kRoleNameFieldNumber;
const int tm_manage_role_byname_request::kManageTypeFieldNumber;
const int tm_manage_role_byname_request::kOffsetTimeFieldNumber;
const int tm_manage_role_byname_request::kReasonFieldNumber;
const int tm_manage_role_byname_request::kOperNameFieldNumber;
#endif  // !_MSC_VER

tm_manage_role_byname_request::tm_manage_role_byname_request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void tm_manage_role_byname_request::InitAsDefaultInstance() {
}

tm_manage_role_byname_request::tm_manage_role_byname_request(const tm_manage_role_byname_request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void tm_manage_role_byname_request::SharedCtor() {
  _cached_size_ = 0;
  manage_type_ = 0u;
  offset_time_ = 0u;
  reason_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  oper_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

tm_manage_role_byname_request::~tm_manage_role_byname_request() {
  SharedDtor();
}

void tm_manage_role_byname_request::SharedDtor() {
  if (reason_ != &::google::protobuf::internal::kEmptyString) {
    delete reason_;
  }
  if (oper_name_ != &::google::protobuf::internal::kEmptyString) {
    delete oper_name_;
  }
  if (this != default_instance_) {
  }
}

void tm_manage_role_byname_request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tm_manage_role_byname_request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tm_manage_role_byname_request_descriptor_;
}

const tm_manage_role_byname_request& tm_manage_role_byname_request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gm_2eproto();
  return *default_instance_;
}

tm_manage_role_byname_request* tm_manage_role_byname_request::default_instance_ = NULL;

tm_manage_role_byname_request* tm_manage_role_byname_request::New() const {
  return new tm_manage_role_byname_request;
}

void tm_manage_role_byname_request::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    manage_type_ = 0u;
    offset_time_ = 0u;
    if (has_reason()) {
      if (reason_ != &::google::protobuf::internal::kEmptyString) {
        reason_->clear();
      }
    }
    if (has_oper_name()) {
      if (oper_name_ != &::google::protobuf::internal::kEmptyString) {
        oper_name_->clear();
      }
    }
  }
  role_name_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool tm_manage_role_byname_request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string role_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_role_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_role_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->role_name(this->role_name_size() - 1).data(),
            this->role_name(this->role_name_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_role_name;
        if (input->ExpectTag(16)) goto parse_manage_type;
        break;
      }

      // optional uint32 manage_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_manage_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &manage_type_)));
          set_has_manage_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_offset_time;
        break;
      }

      // optional uint32 offset_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_offset_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &offset_time_)));
          set_has_offset_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_reason;
        break;
      }

      // optional string reason = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reason:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reason()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->reason().data(), this->reason().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_oper_name;
        break;
      }

      // optional string oper_name = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_oper_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_oper_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->oper_name().data(), this->oper_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void tm_manage_role_byname_request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated string role_name = 1;
  for (int i = 0; i < this->role_name_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->role_name(i).data(), this->role_name(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->role_name(i), output);
  }

  // optional uint32 manage_type = 2;
  if (has_manage_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->manage_type(), output);
  }

  // optional uint32 offset_time = 3;
  if (has_offset_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->offset_time(), output);
  }

  // optional string reason = 4;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->reason().data(), this->reason().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->reason(), output);
  }

  // optional string oper_name = 5;
  if (has_oper_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->oper_name().data(), this->oper_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->oper_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* tm_manage_role_byname_request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated string role_name = 1;
  for (int i = 0; i < this->role_name_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_name(i).data(), this->role_name(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->role_name(i), target);
  }

  // optional uint32 manage_type = 2;
  if (has_manage_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->manage_type(), target);
  }

  // optional uint32 offset_time = 3;
  if (has_offset_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->offset_time(), target);
  }

  // optional string reason = 4;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->reason().data(), this->reason().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->reason(), target);
  }

  // optional string oper_name = 5;
  if (has_oper_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->oper_name().data(), this->oper_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->oper_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int tm_manage_role_byname_request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 manage_type = 2;
    if (has_manage_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->manage_type());
    }

    // optional uint32 offset_time = 3;
    if (has_offset_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->offset_time());
    }

    // optional string reason = 4;
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->reason());
    }

    // optional string oper_name = 5;
    if (has_oper_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->oper_name());
    }

  }
  // repeated string role_name = 1;
  total_size += 1 * this->role_name_size();
  for (int i = 0; i < this->role_name_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->role_name(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tm_manage_role_byname_request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const tm_manage_role_byname_request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const tm_manage_role_byname_request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void tm_manage_role_byname_request::MergeFrom(const tm_manage_role_byname_request& from) {
  GOOGLE_CHECK_NE(&from, this);
  role_name_.MergeFrom(from.role_name_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_manage_type()) {
      set_manage_type(from.manage_type());
    }
    if (from.has_offset_time()) {
      set_offset_time(from.offset_time());
    }
    if (from.has_reason()) {
      set_reason(from.reason());
    }
    if (from.has_oper_name()) {
      set_oper_name(from.oper_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void tm_manage_role_byname_request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tm_manage_role_byname_request::CopyFrom(const tm_manage_role_byname_request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tm_manage_role_byname_request::IsInitialized() const {

  return true;
}

void tm_manage_role_byname_request::Swap(tm_manage_role_byname_request* other) {
  if (other != this) {
    role_name_.Swap(&other->role_name_);
    std::swap(manage_type_, other->manage_type_);
    std::swap(offset_time_, other->offset_time_);
    std::swap(reason_, other->reason_);
    std::swap(oper_name_, other->oper_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata tm_manage_role_byname_request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = tm_manage_role_byname_request_descriptor_;
  metadata.reflection = tm_manage_role_byname_request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mt_manage_role_byname_reply::kReplyDataFieldNumber;
const int mt_manage_role_byname_reply::kOperTimeFieldNumber;
const int mt_manage_role_byname_reply::kManageTypeFieldNumber;
const int mt_manage_role_byname_reply::kOffsetTimeFieldNumber;
const int mt_manage_role_byname_reply::kReasonFieldNumber;
const int mt_manage_role_byname_reply::kOperNameFieldNumber;
#endif  // !_MSC_VER

mt_manage_role_byname_reply::mt_manage_role_byname_reply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void mt_manage_role_byname_reply::InitAsDefaultInstance() {
}

mt_manage_role_byname_reply::mt_manage_role_byname_reply(const mt_manage_role_byname_reply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void mt_manage_role_byname_reply::SharedCtor() {
  _cached_size_ = 0;
  oper_time_ = 0u;
  manage_type_ = 0u;
  offset_time_ = 0u;
  reason_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  oper_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mt_manage_role_byname_reply::~mt_manage_role_byname_reply() {
  SharedDtor();
}

void mt_manage_role_byname_reply::SharedDtor() {
  if (reason_ != &::google::protobuf::internal::kEmptyString) {
    delete reason_;
  }
  if (oper_name_ != &::google::protobuf::internal::kEmptyString) {
    delete oper_name_;
  }
  if (this != default_instance_) {
  }
}

void mt_manage_role_byname_reply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mt_manage_role_byname_reply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mt_manage_role_byname_reply_descriptor_;
}

const mt_manage_role_byname_reply& mt_manage_role_byname_reply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gm_2eproto();
  return *default_instance_;
}

mt_manage_role_byname_reply* mt_manage_role_byname_reply::default_instance_ = NULL;

mt_manage_role_byname_reply* mt_manage_role_byname_reply::New() const {
  return new mt_manage_role_byname_reply;
}

void mt_manage_role_byname_reply::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    oper_time_ = 0u;
    manage_type_ = 0u;
    offset_time_ = 0u;
    if (has_reason()) {
      if (reason_ != &::google::protobuf::internal::kEmptyString) {
        reason_->clear();
      }
    }
    if (has_oper_name()) {
      if (oper_name_ != &::google::protobuf::internal::kEmptyString) {
        oper_name_->clear();
      }
    }
  }
  reply_data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mt_manage_role_byname_reply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.gm_common.manage_reply_single reply_data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reply_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_reply_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_reply_data;
        if (input->ExpectTag(16)) goto parse_oper_time;
        break;
      }

      // optional uint32 oper_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_oper_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &oper_time_)));
          set_has_oper_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_manage_type;
        break;
      }

      // optional uint32 manage_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_manage_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &manage_type_)));
          set_has_manage_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_offset_time;
        break;
      }

      // optional uint32 offset_time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_offset_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &offset_time_)));
          set_has_offset_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_reason;
        break;
      }

      // optional string reason = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reason:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reason()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->reason().data(), this->reason().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_oper_name;
        break;
      }

      // optional string oper_name = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_oper_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_oper_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->oper_name().data(), this->oper_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void mt_manage_role_byname_reply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto.gm_common.manage_reply_single reply_data = 1;
  for (int i = 0; i < this->reply_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->reply_data(i), output);
  }

  // optional uint32 oper_time = 2;
  if (has_oper_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->oper_time(), output);
  }

  // optional uint32 manage_type = 3;
  if (has_manage_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->manage_type(), output);
  }

  // optional uint32 offset_time = 4;
  if (has_offset_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->offset_time(), output);
  }

  // optional string reason = 5;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->reason().data(), this->reason().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->reason(), output);
  }

  // optional string oper_name = 6;
  if (has_oper_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->oper_name().data(), this->oper_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->oper_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* mt_manage_role_byname_reply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto.gm_common.manage_reply_single reply_data = 1;
  for (int i = 0; i < this->reply_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->reply_data(i), target);
  }

  // optional uint32 oper_time = 2;
  if (has_oper_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->oper_time(), target);
  }

  // optional uint32 manage_type = 3;
  if (has_manage_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->manage_type(), target);
  }

  // optional uint32 offset_time = 4;
  if (has_offset_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->offset_time(), target);
  }

  // optional string reason = 5;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->reason().data(), this->reason().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->reason(), target);
  }

  // optional string oper_name = 6;
  if (has_oper_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->oper_name().data(), this->oper_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->oper_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int mt_manage_role_byname_reply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 oper_time = 2;
    if (has_oper_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->oper_time());
    }

    // optional uint32 manage_type = 3;
    if (has_manage_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->manage_type());
    }

    // optional uint32 offset_time = 4;
    if (has_offset_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->offset_time());
    }

    // optional string reason = 5;
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->reason());
    }

    // optional string oper_name = 6;
    if (has_oper_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->oper_name());
    }

  }
  // repeated .proto.gm_common.manage_reply_single reply_data = 1;
  total_size += 1 * this->reply_data_size();
  for (int i = 0; i < this->reply_data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->reply_data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mt_manage_role_byname_reply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mt_manage_role_byname_reply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mt_manage_role_byname_reply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mt_manage_role_byname_reply::MergeFrom(const mt_manage_role_byname_reply& from) {
  GOOGLE_CHECK_NE(&from, this);
  reply_data_.MergeFrom(from.reply_data_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_oper_time()) {
      set_oper_time(from.oper_time());
    }
    if (from.has_manage_type()) {
      set_manage_type(from.manage_type());
    }
    if (from.has_offset_time()) {
      set_offset_time(from.offset_time());
    }
    if (from.has_reason()) {
      set_reason(from.reason());
    }
    if (from.has_oper_name()) {
      set_oper_name(from.oper_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mt_manage_role_byname_reply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mt_manage_role_byname_reply::CopyFrom(const mt_manage_role_byname_reply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mt_manage_role_byname_reply::IsInitialized() const {

  return true;
}

void mt_manage_role_byname_reply::Swap(mt_manage_role_byname_reply* other) {
  if (other != this) {
    reply_data_.Swap(&other->reply_data_);
    std::swap(oper_time_, other->oper_time_);
    std::swap(manage_type_, other->manage_type_);
    std::swap(offset_time_, other->offset_time_);
    std::swap(reason_, other->reason_);
    std::swap(oper_name_, other->oper_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mt_manage_role_byname_reply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mt_manage_role_byname_reply_descriptor_;
  metadata.reflection = mt_manage_role_byname_reply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int tm_manage_ban_state_query_request::kPageNumFieldNumber;
#endif  // !_MSC_VER

tm_manage_ban_state_query_request::tm_manage_ban_state_query_request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void tm_manage_ban_state_query_request::InitAsDefaultInstance() {
}

tm_manage_ban_state_query_request::tm_manage_ban_state_query_request(const tm_manage_ban_state_query_request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void tm_manage_ban_state_query_request::SharedCtor() {
  _cached_size_ = 0;
  page_num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

tm_manage_ban_state_query_request::~tm_manage_ban_state_query_request() {
  SharedDtor();
}

void tm_manage_ban_state_query_request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void tm_manage_ban_state_query_request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tm_manage_ban_state_query_request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tm_manage_ban_state_query_request_descriptor_;
}

const tm_manage_ban_state_query_request& tm_manage_ban_state_query_request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gm_2eproto();
  return *default_instance_;
}

tm_manage_ban_state_query_request* tm_manage_ban_state_query_request::default_instance_ = NULL;

tm_manage_ban_state_query_request* tm_manage_ban_state_query_request::New() const {
  return new tm_manage_ban_state_query_request;
}

void tm_manage_ban_state_query_request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    page_num_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool tm_manage_ban_state_query_request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 page_num = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &page_num_)));
          set_has_page_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void tm_manage_ban_state_query_request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 page_num = 1;
  if (has_page_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->page_num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* tm_manage_ban_state_query_request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 page_num = 1;
  if (has_page_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->page_num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int tm_manage_ban_state_query_request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 page_num = 1;
    if (has_page_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->page_num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tm_manage_ban_state_query_request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const tm_manage_ban_state_query_request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const tm_manage_ban_state_query_request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void tm_manage_ban_state_query_request::MergeFrom(const tm_manage_ban_state_query_request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_page_num()) {
      set_page_num(from.page_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void tm_manage_ban_state_query_request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tm_manage_ban_state_query_request::CopyFrom(const tm_manage_ban_state_query_request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tm_manage_ban_state_query_request::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void tm_manage_ban_state_query_request::Swap(tm_manage_ban_state_query_request* other) {
  if (other != this) {
    std::swap(page_num_, other->page_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata tm_manage_ban_state_query_request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = tm_manage_ban_state_query_request_descriptor_;
  metadata.reflection = tm_manage_ban_state_query_request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mt_manage_ban_state_query_reply::kReplyCodeFieldNumber;
const int mt_manage_ban_state_query_reply::kBanListFieldNumber;
const int mt_manage_ban_state_query_reply::kTotalPagesFieldNumber;
#endif  // !_MSC_VER

mt_manage_ban_state_query_reply::mt_manage_ban_state_query_reply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void mt_manage_ban_state_query_reply::InitAsDefaultInstance() {
}

mt_manage_ban_state_query_reply::mt_manage_ban_state_query_reply(const mt_manage_ban_state_query_reply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void mt_manage_ban_state_query_reply::SharedCtor() {
  _cached_size_ = 0;
  reply_code_ = 0u;
  total_pages_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mt_manage_ban_state_query_reply::~mt_manage_ban_state_query_reply() {
  SharedDtor();
}

void mt_manage_ban_state_query_reply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void mt_manage_ban_state_query_reply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mt_manage_ban_state_query_reply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mt_manage_ban_state_query_reply_descriptor_;
}

const mt_manage_ban_state_query_reply& mt_manage_ban_state_query_reply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gm_2eproto();
  return *default_instance_;
}

mt_manage_ban_state_query_reply* mt_manage_ban_state_query_reply::default_instance_ = NULL;

mt_manage_ban_state_query_reply* mt_manage_ban_state_query_reply::New() const {
  return new mt_manage_ban_state_query_reply;
}

void mt_manage_ban_state_query_reply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    reply_code_ = 0u;
    total_pages_ = 0u;
  }
  ban_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mt_manage_ban_state_query_reply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 reply_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reply_code_)));
          set_has_reply_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ban_list;
        break;
      }

      // repeated .proto.gm_common.ban_state_info ban_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ban_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ban_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ban_list;
        if (input->ExpectTag(24)) goto parse_total_pages;
        break;
      }

      // optional uint32 total_pages = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_pages:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_pages_)));
          set_has_total_pages();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void mt_manage_ban_state_query_reply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 reply_code = 1;
  if (has_reply_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->reply_code(), output);
  }

  // repeated .proto.gm_common.ban_state_info ban_list = 2;
  for (int i = 0; i < this->ban_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->ban_list(i), output);
  }

  // optional uint32 total_pages = 3;
  if (has_total_pages()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->total_pages(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* mt_manage_ban_state_query_reply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 reply_code = 1;
  if (has_reply_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->reply_code(), target);
  }

  // repeated .proto.gm_common.ban_state_info ban_list = 2;
  for (int i = 0; i < this->ban_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->ban_list(i), target);
  }

  // optional uint32 total_pages = 3;
  if (has_total_pages()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->total_pages(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int mt_manage_ban_state_query_reply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 reply_code = 1;
    if (has_reply_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reply_code());
    }

    // optional uint32 total_pages = 3;
    if (has_total_pages()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->total_pages());
    }

  }
  // repeated .proto.gm_common.ban_state_info ban_list = 2;
  total_size += 1 * this->ban_list_size();
  for (int i = 0; i < this->ban_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ban_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mt_manage_ban_state_query_reply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mt_manage_ban_state_query_reply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mt_manage_ban_state_query_reply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mt_manage_ban_state_query_reply::MergeFrom(const mt_manage_ban_state_query_reply& from) {
  GOOGLE_CHECK_NE(&from, this);
  ban_list_.MergeFrom(from.ban_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reply_code()) {
      set_reply_code(from.reply_code());
    }
    if (from.has_total_pages()) {
      set_total_pages(from.total_pages());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mt_manage_ban_state_query_reply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mt_manage_ban_state_query_reply::CopyFrom(const mt_manage_ban_state_query_reply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mt_manage_ban_state_query_reply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void mt_manage_ban_state_query_reply::Swap(mt_manage_ban_state_query_reply* other) {
  if (other != this) {
    std::swap(reply_code_, other->reply_code_);
    ban_list_.Swap(&other->ban_list_);
    std::swap(total_pages_, other->total_pages_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mt_manage_ban_state_query_reply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mt_manage_ban_state_query_reply_descriptor_;
  metadata.reflection = mt_manage_ban_state_query_reply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int tm_monitor_get_behavior_records_request::kUserUidFieldNumber;
const int tm_monitor_get_behavior_records_request::kTypeFieldNumber;
const int tm_monitor_get_behavior_records_request::kPageNumFieldNumber;
#endif  // !_MSC_VER

tm_monitor_get_behavior_records_request::tm_monitor_get_behavior_records_request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void tm_monitor_get_behavior_records_request::InitAsDefaultInstance() {
}

tm_monitor_get_behavior_records_request::tm_monitor_get_behavior_records_request(const tm_monitor_get_behavior_records_request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void tm_monitor_get_behavior_records_request::SharedCtor() {
  _cached_size_ = 0;
  user_uid_ = GOOGLE_ULONGLONG(0);
  type_ = 0u;
  page_num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

tm_monitor_get_behavior_records_request::~tm_monitor_get_behavior_records_request() {
  SharedDtor();
}

void tm_monitor_get_behavior_records_request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void tm_monitor_get_behavior_records_request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tm_monitor_get_behavior_records_request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tm_monitor_get_behavior_records_request_descriptor_;
}

const tm_monitor_get_behavior_records_request& tm_monitor_get_behavior_records_request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gm_2eproto();
  return *default_instance_;
}

tm_monitor_get_behavior_records_request* tm_monitor_get_behavior_records_request::default_instance_ = NULL;

tm_monitor_get_behavior_records_request* tm_monitor_get_behavior_records_request::New() const {
  return new tm_monitor_get_behavior_records_request;
}

void tm_monitor_get_behavior_records_request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    user_uid_ = GOOGLE_ULONGLONG(0);
    type_ = 0u;
    page_num_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool tm_monitor_get_behavior_records_request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 user_uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_uid_)));
          set_has_user_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // required uint32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_page_num;
        break;
      }

      // optional uint32 page_num = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_page_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &page_num_)));
          set_has_page_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void tm_monitor_get_behavior_records_request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 user_uid = 1;
  if (has_user_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->user_uid(), output);
  }

  // required uint32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->type(), output);
  }

  // optional uint32 page_num = 3;
  if (has_page_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->page_num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* tm_monitor_get_behavior_records_request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 user_uid = 1;
  if (has_user_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->user_uid(), target);
  }

  // required uint32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->type(), target);
  }

  // optional uint32 page_num = 3;
  if (has_page_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->page_num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int tm_monitor_get_behavior_records_request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 user_uid = 1;
    if (has_user_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_uid());
    }

    // required uint32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional uint32 page_num = 3;
    if (has_page_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->page_num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tm_monitor_get_behavior_records_request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const tm_monitor_get_behavior_records_request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const tm_monitor_get_behavior_records_request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void tm_monitor_get_behavior_records_request::MergeFrom(const tm_monitor_get_behavior_records_request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_uid()) {
      set_user_uid(from.user_uid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_page_num()) {
      set_page_num(from.page_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void tm_monitor_get_behavior_records_request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tm_monitor_get_behavior_records_request::CopyFrom(const tm_monitor_get_behavior_records_request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tm_monitor_get_behavior_records_request::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void tm_monitor_get_behavior_records_request::Swap(tm_monitor_get_behavior_records_request* other) {
  if (other != this) {
    std::swap(user_uid_, other->user_uid_);
    std::swap(type_, other->type_);
    std::swap(page_num_, other->page_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata tm_monitor_get_behavior_records_request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = tm_monitor_get_behavior_records_request_descriptor_;
  metadata.reflection = tm_monitor_get_behavior_records_request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mt_monitor_get_behavior_records_reply::kReplyCodeFieldNumber;
const int mt_monitor_get_behavior_records_reply::kUserUidFieldNumber;
const int mt_monitor_get_behavior_records_reply::kTypeFieldNumber;
const int mt_monitor_get_behavior_records_reply::kSignRecordsFieldNumber;
const int mt_monitor_get_behavior_records_reply::kDrawRecordsFieldNumber;
const int mt_monitor_get_behavior_records_reply::kBuyRecordsFieldNumber;
const int mt_monitor_get_behavior_records_reply::kShopRecordsFieldNumber;
const int mt_monitor_get_behavior_records_reply::kTotalPagesFieldNumber;
#endif  // !_MSC_VER

mt_monitor_get_behavior_records_reply::mt_monitor_get_behavior_records_reply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void mt_monitor_get_behavior_records_reply::InitAsDefaultInstance() {
}

mt_monitor_get_behavior_records_reply::mt_monitor_get_behavior_records_reply(const mt_monitor_get_behavior_records_reply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void mt_monitor_get_behavior_records_reply::SharedCtor() {
  _cached_size_ = 0;
  reply_code_ = 0u;
  user_uid_ = GOOGLE_ULONGLONG(0);
  type_ = 0u;
  total_pages_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mt_monitor_get_behavior_records_reply::~mt_monitor_get_behavior_records_reply() {
  SharedDtor();
}

void mt_monitor_get_behavior_records_reply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void mt_monitor_get_behavior_records_reply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mt_monitor_get_behavior_records_reply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mt_monitor_get_behavior_records_reply_descriptor_;
}

const mt_monitor_get_behavior_records_reply& mt_monitor_get_behavior_records_reply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gm_2eproto();
  return *default_instance_;
}

mt_monitor_get_behavior_records_reply* mt_monitor_get_behavior_records_reply::default_instance_ = NULL;

mt_monitor_get_behavior_records_reply* mt_monitor_get_behavior_records_reply::New() const {
  return new mt_monitor_get_behavior_records_reply;
}

void mt_monitor_get_behavior_records_reply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    reply_code_ = 0u;
    user_uid_ = GOOGLE_ULONGLONG(0);
    type_ = 0u;
    total_pages_ = 0u;
  }
  sign_records_.Clear();
  draw_records_.Clear();
  buy_records_.Clear();
  shop_records_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mt_monitor_get_behavior_records_reply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 reply_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reply_code_)));
          set_has_reply_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_user_uid;
        break;
      }

      // optional uint64 user_uid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_user_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_uid_)));
          set_has_user_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // optional uint32 type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_sign_records;
        break;
      }

      // repeated .proto.gm_common.sign_record_single sign_records = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sign_records:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sign_records()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_sign_records;
        if (input->ExpectTag(42)) goto parse_draw_records;
        break;
      }

      // repeated .proto.gm_common.draw_record_single draw_records = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_draw_records:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_draw_records()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_draw_records;
        if (input->ExpectTag(50)) goto parse_buy_records;
        break;
      }

      // repeated .proto.gm_common.buy_record_single buy_records = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_buy_records:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_buy_records()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_buy_records;
        if (input->ExpectTag(58)) goto parse_shop_records;
        break;
      }

      // repeated .proto.gm_common.shop_record_single shop_records = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_shop_records:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_shop_records()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_shop_records;
        if (input->ExpectTag(64)) goto parse_total_pages;
        break;
      }

      // optional uint32 total_pages = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_pages:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_pages_)));
          set_has_total_pages();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void mt_monitor_get_behavior_records_reply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 reply_code = 1;
  if (has_reply_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->reply_code(), output);
  }

  // optional uint64 user_uid = 2;
  if (has_user_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->user_uid(), output);
  }

  // optional uint32 type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->type(), output);
  }

  // repeated .proto.gm_common.sign_record_single sign_records = 4;
  for (int i = 0; i < this->sign_records_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->sign_records(i), output);
  }

  // repeated .proto.gm_common.draw_record_single draw_records = 5;
  for (int i = 0; i < this->draw_records_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->draw_records(i), output);
  }

  // repeated .proto.gm_common.buy_record_single buy_records = 6;
  for (int i = 0; i < this->buy_records_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->buy_records(i), output);
  }

  // repeated .proto.gm_common.shop_record_single shop_records = 7;
  for (int i = 0; i < this->shop_records_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->shop_records(i), output);
  }

  // optional uint32 total_pages = 8;
  if (has_total_pages()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->total_pages(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* mt_monitor_get_behavior_records_reply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 reply_code = 1;
  if (has_reply_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->reply_code(), target);
  }

  // optional uint64 user_uid = 2;
  if (has_user_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->user_uid(), target);
  }

  // optional uint32 type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->type(), target);
  }

  // repeated .proto.gm_common.sign_record_single sign_records = 4;
  for (int i = 0; i < this->sign_records_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->sign_records(i), target);
  }

  // repeated .proto.gm_common.draw_record_single draw_records = 5;
  for (int i = 0; i < this->draw_records_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->draw_records(i), target);
  }

  // repeated .proto.gm_common.buy_record_single buy_records = 6;
  for (int i = 0; i < this->buy_records_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->buy_records(i), target);
  }

  // repeated .proto.gm_common.shop_record_single shop_records = 7;
  for (int i = 0; i < this->shop_records_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->shop_records(i), target);
  }

  // optional uint32 total_pages = 8;
  if (has_total_pages()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->total_pages(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int mt_monitor_get_behavior_records_reply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 reply_code = 1;
    if (has_reply_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reply_code());
    }

    // optional uint64 user_uid = 2;
    if (has_user_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_uid());
    }

    // optional uint32 type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional uint32 total_pages = 8;
    if (has_total_pages()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->total_pages());
    }

  }
  // repeated .proto.gm_common.sign_record_single sign_records = 4;
  total_size += 1 * this->sign_records_size();
  for (int i = 0; i < this->sign_records_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->sign_records(i));
  }

  // repeated .proto.gm_common.draw_record_single draw_records = 5;
  total_size += 1 * this->draw_records_size();
  for (int i = 0; i < this->draw_records_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->draw_records(i));
  }

  // repeated .proto.gm_common.buy_record_single buy_records = 6;
  total_size += 1 * this->buy_records_size();
  for (int i = 0; i < this->buy_records_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->buy_records(i));
  }

  // repeated .proto.gm_common.shop_record_single shop_records = 7;
  total_size += 1 * this->shop_records_size();
  for (int i = 0; i < this->shop_records_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->shop_records(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mt_monitor_get_behavior_records_reply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mt_monitor_get_behavior_records_reply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mt_monitor_get_behavior_records_reply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mt_monitor_get_behavior_records_reply::MergeFrom(const mt_monitor_get_behavior_records_reply& from) {
  GOOGLE_CHECK_NE(&from, this);
  sign_records_.MergeFrom(from.sign_records_);
  draw_records_.MergeFrom(from.draw_records_);
  buy_records_.MergeFrom(from.buy_records_);
  shop_records_.MergeFrom(from.shop_records_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reply_code()) {
      set_reply_code(from.reply_code());
    }
    if (from.has_user_uid()) {
      set_user_uid(from.user_uid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_total_pages()) {
      set_total_pages(from.total_pages());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mt_monitor_get_behavior_records_reply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mt_monitor_get_behavior_records_reply::CopyFrom(const mt_monitor_get_behavior_records_reply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mt_monitor_get_behavior_records_reply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void mt_monitor_get_behavior_records_reply::Swap(mt_monitor_get_behavior_records_reply* other) {
  if (other != this) {
    std::swap(reply_code_, other->reply_code_);
    std::swap(user_uid_, other->user_uid_);
    std::swap(type_, other->type_);
    sign_records_.Swap(&other->sign_records_);
    draw_records_.Swap(&other->draw_records_);
    buy_records_.Swap(&other->buy_records_);
    shop_records_.Swap(&other->shop_records_);
    std::swap(total_pages_, other->total_pages_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mt_monitor_get_behavior_records_reply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mt_monitor_get_behavior_records_reply_descriptor_;
  metadata.reflection = mt_monitor_get_behavior_records_reply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ma_masked_msg_notify::kMaskedListFieldNumber;
const int ma_masked_msg_notify::kMaskedFlagFieldNumber;
#endif  // !_MSC_VER

ma_masked_msg_notify::ma_masked_msg_notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ma_masked_msg_notify::InitAsDefaultInstance() {
}

ma_masked_msg_notify::ma_masked_msg_notify(const ma_masked_msg_notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ma_masked_msg_notify::SharedCtor() {
  _cached_size_ = 0;
  masked_flag_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ma_masked_msg_notify::~ma_masked_msg_notify() {
  SharedDtor();
}

void ma_masked_msg_notify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ma_masked_msg_notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ma_masked_msg_notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ma_masked_msg_notify_descriptor_;
}

const ma_masked_msg_notify& ma_masked_msg_notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gm_2eproto();
  return *default_instance_;
}

ma_masked_msg_notify* ma_masked_msg_notify::default_instance_ = NULL;

ma_masked_msg_notify* ma_masked_msg_notify::New() const {
  return new ma_masked_msg_notify;
}

void ma_masked_msg_notify::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    masked_flag_ = 0u;
  }
  masked_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ma_masked_msg_notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 masked_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_masked_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_masked_list())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_masked_list())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_masked_list;
        if (input->ExpectTag(16)) goto parse_masked_flag;
        break;
      }

      // required uint32 masked_flag = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_masked_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &masked_flag_)));
          set_has_masked_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ma_masked_msg_notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint32 masked_list = 1;
  for (int i = 0; i < this->masked_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->masked_list(i), output);
  }

  // required uint32 masked_flag = 2;
  if (has_masked_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->masked_flag(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ma_masked_msg_notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 masked_list = 1;
  for (int i = 0; i < this->masked_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->masked_list(i), target);
  }

  // required uint32 masked_flag = 2;
  if (has_masked_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->masked_flag(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ma_masked_msg_notify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required uint32 masked_flag = 2;
    if (has_masked_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->masked_flag());
    }

  }
  // repeated uint32 masked_list = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->masked_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->masked_list(i));
    }
    total_size += 1 * this->masked_list_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ma_masked_msg_notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ma_masked_msg_notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ma_masked_msg_notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ma_masked_msg_notify::MergeFrom(const ma_masked_msg_notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  masked_list_.MergeFrom(from.masked_list_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_masked_flag()) {
      set_masked_flag(from.masked_flag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ma_masked_msg_notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ma_masked_msg_notify::CopyFrom(const ma_masked_msg_notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ma_masked_msg_notify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  return true;
}

void ma_masked_msg_notify::Swap(ma_masked_msg_notify* other) {
  if (other != this) {
    masked_list_.Swap(&other->masked_list_);
    std::swap(masked_flag_, other->masked_flag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ma_masked_msg_notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ma_masked_msg_notify_descriptor_;
  metadata.reflection = ma_masked_msg_notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int tm_reload_config_notify::kLoadTypeFieldNumber;
const int tm_reload_config_notify::kFileNameFieldNumber;
#endif  // !_MSC_VER

tm_reload_config_notify::tm_reload_config_notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void tm_reload_config_notify::InitAsDefaultInstance() {
}

tm_reload_config_notify::tm_reload_config_notify(const tm_reload_config_notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void tm_reload_config_notify::SharedCtor() {
  _cached_size_ = 0;
  load_type_ = 0u;
  file_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

tm_reload_config_notify::~tm_reload_config_notify() {
  SharedDtor();
}

void tm_reload_config_notify::SharedDtor() {
  if (file_name_ != &::google::protobuf::internal::kEmptyString) {
    delete file_name_;
  }
  if (this != default_instance_) {
  }
}

void tm_reload_config_notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tm_reload_config_notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tm_reload_config_notify_descriptor_;
}

const tm_reload_config_notify& tm_reload_config_notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gm_2eproto();
  return *default_instance_;
}

tm_reload_config_notify* tm_reload_config_notify::default_instance_ = NULL;

tm_reload_config_notify* tm_reload_config_notify::New() const {
  return new tm_reload_config_notify;
}

void tm_reload_config_notify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    load_type_ = 0u;
    if (has_file_name()) {
      if (file_name_ != &::google::protobuf::internal::kEmptyString) {
        file_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool tm_reload_config_notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 load_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &load_type_)));
          set_has_load_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_file_name;
        break;
      }

      // optional string file_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_file_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->file_name().data(), this->file_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void tm_reload_config_notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 load_type = 1;
  if (has_load_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->load_type(), output);
  }

  // optional string file_name = 2;
  if (has_file_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->file_name().data(), this->file_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->file_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* tm_reload_config_notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 load_type = 1;
  if (has_load_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->load_type(), target);
  }

  // optional string file_name = 2;
  if (has_file_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->file_name().data(), this->file_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->file_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int tm_reload_config_notify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 load_type = 1;
    if (has_load_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->load_type());
    }

    // optional string file_name = 2;
    if (has_file_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->file_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tm_reload_config_notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const tm_reload_config_notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const tm_reload_config_notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void tm_reload_config_notify::MergeFrom(const tm_reload_config_notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_load_type()) {
      set_load_type(from.load_type());
    }
    if (from.has_file_name()) {
      set_file_name(from.file_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void tm_reload_config_notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tm_reload_config_notify::CopyFrom(const tm_reload_config_notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tm_reload_config_notify::IsInitialized() const {

  return true;
}

void tm_reload_config_notify::Swap(tm_reload_config_notify* other) {
  if (other != this) {
    std::swap(load_type_, other->load_type_);
    std::swap(file_name_, other->file_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata tm_reload_config_notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = tm_reload_config_notify_descriptor_;
  metadata.reflection = tm_reload_config_notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int me_ban_account_notify::kFlagFieldNumber;
const int me_ban_account_notify::kAccountFieldNumber;
#endif  // !_MSC_VER

me_ban_account_notify::me_ban_account_notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void me_ban_account_notify::InitAsDefaultInstance() {
}

me_ban_account_notify::me_ban_account_notify(const me_ban_account_notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void me_ban_account_notify::SharedCtor() {
  _cached_size_ = 0;
  flag_ = 0u;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

me_ban_account_notify::~me_ban_account_notify() {
  SharedDtor();
}

void me_ban_account_notify::SharedDtor() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (this != default_instance_) {
  }
}

void me_ban_account_notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* me_ban_account_notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return me_ban_account_notify_descriptor_;
}

const me_ban_account_notify& me_ban_account_notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gm_2eproto();
  return *default_instance_;
}

me_ban_account_notify* me_ban_account_notify::default_instance_ = NULL;

me_ban_account_notify* me_ban_account_notify::New() const {
  return new me_ban_account_notify;
}

void me_ban_account_notify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    flag_ = 0u;
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool me_ban_account_notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 flag = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flag_)));
          set_has_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_account;
        break;
      }

      // required string account = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void me_ban_account_notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 flag = 1;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->flag(), output);
  }

  // required string account = 2;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->account(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* me_ban_account_notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 flag = 1;
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->flag(), target);
  }

  // required string account = 2;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->account(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int me_ban_account_notify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 flag = 1;
    if (has_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flag());
    }

    // required string account = 2;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void me_ban_account_notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const me_ban_account_notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const me_ban_account_notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void me_ban_account_notify::MergeFrom(const me_ban_account_notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_flag()) {
      set_flag(from.flag());
    }
    if (from.has_account()) {
      set_account(from.account());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void me_ban_account_notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void me_ban_account_notify::CopyFrom(const me_ban_account_notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool me_ban_account_notify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void me_ban_account_notify::Swap(me_ban_account_notify* other) {
  if (other != this) {
    std::swap(flag_, other->flag_);
    std::swap(account_, other->account_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata me_ban_account_notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = me_ban_account_notify_descriptor_;
  metadata.reflection = me_ban_account_notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int me_access_ip_notify::kFlagFieldNumber;
const int me_access_ip_notify::kIpAddressFieldNumber;
const int me_access_ip_notify::kIpEndFieldNumber;
#endif  // !_MSC_VER

me_access_ip_notify::me_access_ip_notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void me_access_ip_notify::InitAsDefaultInstance() {
}

me_access_ip_notify::me_access_ip_notify(const me_access_ip_notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void me_access_ip_notify::SharedCtor() {
  _cached_size_ = 0;
  flag_ = 0u;
  ip_address_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ip_end_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

me_access_ip_notify::~me_access_ip_notify() {
  SharedDtor();
}

void me_access_ip_notify::SharedDtor() {
  if (ip_address_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_address_;
  }
  if (this != default_instance_) {
  }
}

void me_access_ip_notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* me_access_ip_notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return me_access_ip_notify_descriptor_;
}

const me_access_ip_notify& me_access_ip_notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gm_2eproto();
  return *default_instance_;
}

me_access_ip_notify* me_access_ip_notify::default_instance_ = NULL;

me_access_ip_notify* me_access_ip_notify::New() const {
  return new me_access_ip_notify;
}

void me_access_ip_notify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    flag_ = 0u;
    if (has_ip_address()) {
      if (ip_address_ != &::google::protobuf::internal::kEmptyString) {
        ip_address_->clear();
      }
    }
    ip_end_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool me_access_ip_notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 flag = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flag_)));
          set_has_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ip_address;
        break;
      }

      // required string ip_address = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ip_address:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip_address()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ip_address().data(), this->ip_address().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ip_end;
        break;
      }

      // optional uint32 ip_end = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ip_end:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ip_end_)));
          set_has_ip_end();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void me_access_ip_notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 flag = 1;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->flag(), output);
  }

  // required string ip_address = 2;
  if (has_ip_address()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip_address().data(), this->ip_address().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->ip_address(), output);
  }

  // optional uint32 ip_end = 3;
  if (has_ip_end()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->ip_end(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* me_access_ip_notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 flag = 1;
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->flag(), target);
  }

  // required string ip_address = 2;
  if (has_ip_address()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip_address().data(), this->ip_address().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->ip_address(), target);
  }

  // optional uint32 ip_end = 3;
  if (has_ip_end()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->ip_end(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int me_access_ip_notify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 flag = 1;
    if (has_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flag());
    }

    // required string ip_address = 2;
    if (has_ip_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip_address());
    }

    // optional uint32 ip_end = 3;
    if (has_ip_end()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ip_end());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void me_access_ip_notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const me_access_ip_notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const me_access_ip_notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void me_access_ip_notify::MergeFrom(const me_access_ip_notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_flag()) {
      set_flag(from.flag());
    }
    if (from.has_ip_address()) {
      set_ip_address(from.ip_address());
    }
    if (from.has_ip_end()) {
      set_ip_end(from.ip_end());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void me_access_ip_notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void me_access_ip_notify::CopyFrom(const me_access_ip_notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool me_access_ip_notify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void me_access_ip_notify::Swap(me_access_ip_notify* other) {
  if (other != this) {
    std::swap(flag_, other->flag_);
    std::swap(ip_address_, other->ip_address_);
    std::swap(ip_end_, other->ip_end_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata me_access_ip_notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = me_access_ip_notify_descriptor_;
  metadata.reflection = me_access_ip_notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int tm_test_request::kTest1FieldNumber;
const int tm_test_request::kTest2FieldNumber;
#endif  // !_MSC_VER

tm_test_request::tm_test_request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void tm_test_request::InitAsDefaultInstance() {
}

tm_test_request::tm_test_request(const tm_test_request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void tm_test_request::SharedCtor() {
  _cached_size_ = 0;
  test1_ = 0u;
  test2_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

tm_test_request::~tm_test_request() {
  SharedDtor();
}

void tm_test_request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void tm_test_request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tm_test_request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tm_test_request_descriptor_;
}

const tm_test_request& tm_test_request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gm_2eproto();
  return *default_instance_;
}

tm_test_request* tm_test_request::default_instance_ = NULL;

tm_test_request* tm_test_request::New() const {
  return new tm_test_request;
}

void tm_test_request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    test1_ = 0u;
    test2_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool tm_test_request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 test1 = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &test1_)));
          set_has_test1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_test2;
        break;
      }

      // required uint32 test2 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_test2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &test2_)));
          set_has_test2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void tm_test_request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 test1 = 1;
  if (has_test1()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->test1(), output);
  }

  // required uint32 test2 = 2;
  if (has_test2()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->test2(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* tm_test_request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 test1 = 1;
  if (has_test1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->test1(), target);
  }

  // required uint32 test2 = 2;
  if (has_test2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->test2(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int tm_test_request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 test1 = 1;
    if (has_test1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->test1());
    }

    // required uint32 test2 = 2;
    if (has_test2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->test2());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tm_test_request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const tm_test_request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const tm_test_request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void tm_test_request::MergeFrom(const tm_test_request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_test1()) {
      set_test1(from.test1());
    }
    if (from.has_test2()) {
      set_test2(from.test2());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void tm_test_request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tm_test_request::CopyFrom(const tm_test_request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tm_test_request::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void tm_test_request::Swap(tm_test_request* other) {
  if (other != this) {
    std::swap(test1_, other->test1_);
    std::swap(test2_, other->test2_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata tm_test_request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = tm_test_request_descriptor_;
  metadata.reflection = tm_test_request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mt_test_reply::kTest1FieldNumber;
const int mt_test_reply::kTest2FieldNumber;
#endif  // !_MSC_VER

mt_test_reply::mt_test_reply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void mt_test_reply::InitAsDefaultInstance() {
}

mt_test_reply::mt_test_reply(const mt_test_reply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void mt_test_reply::SharedCtor() {
  _cached_size_ = 0;
  test1_ = 0u;
  test2_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mt_test_reply::~mt_test_reply() {
  SharedDtor();
}

void mt_test_reply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void mt_test_reply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mt_test_reply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mt_test_reply_descriptor_;
}

const mt_test_reply& mt_test_reply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gm_2eproto();
  return *default_instance_;
}

mt_test_reply* mt_test_reply::default_instance_ = NULL;

mt_test_reply* mt_test_reply::New() const {
  return new mt_test_reply;
}

void mt_test_reply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    test1_ = 0u;
    test2_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mt_test_reply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 test1 = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &test1_)));
          set_has_test1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_test2;
        break;
      }

      // required uint32 test2 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_test2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &test2_)));
          set_has_test2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void mt_test_reply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 test1 = 1;
  if (has_test1()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->test1(), output);
  }

  // required uint32 test2 = 2;
  if (has_test2()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->test2(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* mt_test_reply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 test1 = 1;
  if (has_test1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->test1(), target);
  }

  // required uint32 test2 = 2;
  if (has_test2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->test2(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int mt_test_reply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 test1 = 1;
    if (has_test1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->test1());
    }

    // required uint32 test2 = 2;
    if (has_test2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->test2());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mt_test_reply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mt_test_reply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mt_test_reply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mt_test_reply::MergeFrom(const mt_test_reply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_test1()) {
      set_test1(from.test1());
    }
    if (from.has_test2()) {
      set_test2(from.test2());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mt_test_reply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mt_test_reply::CopyFrom(const mt_test_reply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mt_test_reply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void mt_test_reply::Swap(mt_test_reply* other) {
  if (other != this) {
    std::swap(test1_, other->test1_);
    std::swap(test2_, other->test2_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mt_test_reply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mt_test_reply_descriptor_;
  metadata.reflection = mt_test_reply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int gm_data_threshold_notify::kUidFieldNumber;
const int gm_data_threshold_notify::kTypeFieldNumber;
const int gm_data_threshold_notify::kValueFieldNumber;
const int gm_data_threshold_notify::kParamFieldNumber;
#endif  // !_MSC_VER

gm_data_threshold_notify::gm_data_threshold_notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gm_data_threshold_notify::InitAsDefaultInstance() {
}

gm_data_threshold_notify::gm_data_threshold_notify(const gm_data_threshold_notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gm_data_threshold_notify::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_ULONGLONG(0);
  type_ = 0u;
  value_ = 0u;
  param_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gm_data_threshold_notify::~gm_data_threshold_notify() {
  SharedDtor();
}

void gm_data_threshold_notify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void gm_data_threshold_notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gm_data_threshold_notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gm_data_threshold_notify_descriptor_;
}

const gm_data_threshold_notify& gm_data_threshold_notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gm_2eproto();
  return *default_instance_;
}

gm_data_threshold_notify* gm_data_threshold_notify::default_instance_ = NULL;

gm_data_threshold_notify* gm_data_threshold_notify::New() const {
  return new gm_data_threshold_notify;
}

void gm_data_threshold_notify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = GOOGLE_ULONGLONG(0);
    type_ = 0u;
    value_ = 0u;
    param_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gm_data_threshold_notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional uint32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_value;
        break;
      }

      // optional uint32 value = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_param;
        break;
      }

      // optional uint32 param = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_param:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &param_)));
          set_has_param();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gm_data_threshold_notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uid(), output);
  }

  // optional uint32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->type(), output);
  }

  // optional uint32 value = 3;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->value(), output);
  }

  // optional uint32 param = 4 [default = 0];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->param(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gm_data_threshold_notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->uid(), target);
  }

  // optional uint32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->type(), target);
  }

  // optional uint32 value = 3;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->value(), target);
  }

  // optional uint32 param = 4 [default = 0];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->param(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gm_data_threshold_notify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uid());
    }

    // optional uint32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional uint32 value = 3;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->value());
    }

    // optional uint32 param = 4 [default = 0];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->param());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gm_data_threshold_notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gm_data_threshold_notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gm_data_threshold_notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gm_data_threshold_notify::MergeFrom(const gm_data_threshold_notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gm_data_threshold_notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gm_data_threshold_notify::CopyFrom(const gm_data_threshold_notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gm_data_threshold_notify::IsInitialized() const {

  return true;
}

void gm_data_threshold_notify::Swap(gm_data_threshold_notify* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(type_, other->type_);
    std::swap(value_, other->value_);
    std::swap(param_, other->param_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gm_data_threshold_notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gm_data_threshold_notify_descriptor_;
  metadata.reflection = gm_data_threshold_notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int em_do_change_cdkey_request::kRoleUidFieldNumber;
const int em_do_change_cdkey_request::kChannelIdFieldNumber;
const int em_do_change_cdkey_request::kKeyCodeFieldNumber;
#endif  // !_MSC_VER

em_do_change_cdkey_request::em_do_change_cdkey_request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void em_do_change_cdkey_request::InitAsDefaultInstance() {
}

em_do_change_cdkey_request::em_do_change_cdkey_request(const em_do_change_cdkey_request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void em_do_change_cdkey_request::SharedCtor() {
  _cached_size_ = 0;
  role_uid_ = GOOGLE_ULONGLONG(0);
  channel_id_ = 0u;
  key_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

em_do_change_cdkey_request::~em_do_change_cdkey_request() {
  SharedDtor();
}

void em_do_change_cdkey_request::SharedDtor() {
  if (key_code_ != &::google::protobuf::internal::kEmptyString) {
    delete key_code_;
  }
  if (this != default_instance_) {
  }
}

void em_do_change_cdkey_request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* em_do_change_cdkey_request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return em_do_change_cdkey_request_descriptor_;
}

const em_do_change_cdkey_request& em_do_change_cdkey_request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gm_2eproto();
  return *default_instance_;
}

em_do_change_cdkey_request* em_do_change_cdkey_request::default_instance_ = NULL;

em_do_change_cdkey_request* em_do_change_cdkey_request::New() const {
  return new em_do_change_cdkey_request;
}

void em_do_change_cdkey_request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_uid_ = GOOGLE_ULONGLONG(0);
    channel_id_ = 0u;
    if (has_key_code()) {
      if (key_code_ != &::google::protobuf::internal::kEmptyString) {
        key_code_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool em_do_change_cdkey_request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 role_uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_uid_)));
          set_has_role_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_channel_id;
        break;
      }

      // optional uint32 channel_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_channel_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channel_id_)));
          set_has_channel_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_key_code;
        break;
      }

      // optional string key_code = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_key_code:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->key_code().data(), this->key_code().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void em_do_change_cdkey_request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 role_uid = 1;
  if (has_role_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->role_uid(), output);
  }

  // optional uint32 channel_id = 2;
  if (has_channel_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->channel_id(), output);
  }

  // optional string key_code = 3;
  if (has_key_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key_code().data(), this->key_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->key_code(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* em_do_change_cdkey_request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 role_uid = 1;
  if (has_role_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->role_uid(), target);
  }

  // optional uint32 channel_id = 2;
  if (has_channel_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->channel_id(), target);
  }

  // optional string key_code = 3;
  if (has_key_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key_code().data(), this->key_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->key_code(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int em_do_change_cdkey_request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 role_uid = 1;
    if (has_role_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_uid());
    }

    // optional uint32 channel_id = 2;
    if (has_channel_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channel_id());
    }

    // optional string key_code = 3;
    if (has_key_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key_code());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void em_do_change_cdkey_request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const em_do_change_cdkey_request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const em_do_change_cdkey_request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void em_do_change_cdkey_request::MergeFrom(const em_do_change_cdkey_request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_uid()) {
      set_role_uid(from.role_uid());
    }
    if (from.has_channel_id()) {
      set_channel_id(from.channel_id());
    }
    if (from.has_key_code()) {
      set_key_code(from.key_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void em_do_change_cdkey_request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void em_do_change_cdkey_request::CopyFrom(const em_do_change_cdkey_request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool em_do_change_cdkey_request::IsInitialized() const {

  return true;
}

void em_do_change_cdkey_request::Swap(em_do_change_cdkey_request* other) {
  if (other != this) {
    std::swap(role_uid_, other->role_uid_);
    std::swap(channel_id_, other->channel_id_);
    std::swap(key_code_, other->key_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata em_do_change_cdkey_request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = em_do_change_cdkey_request_descriptor_;
  metadata.reflection = em_do_change_cdkey_request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int me_do_change_cdkey_reply::kReplyCodeFieldNumber;
const int me_do_change_cdkey_reply::kRoleUidFieldNumber;
const int me_do_change_cdkey_reply::kKeyTypeFieldNumber;
#endif  // !_MSC_VER

me_do_change_cdkey_reply::me_do_change_cdkey_reply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void me_do_change_cdkey_reply::InitAsDefaultInstance() {
}

me_do_change_cdkey_reply::me_do_change_cdkey_reply(const me_do_change_cdkey_reply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void me_do_change_cdkey_reply::SharedCtor() {
  _cached_size_ = 0;
  reply_code_ = 0u;
  role_uid_ = GOOGLE_ULONGLONG(0);
  key_type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

me_do_change_cdkey_reply::~me_do_change_cdkey_reply() {
  SharedDtor();
}

void me_do_change_cdkey_reply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void me_do_change_cdkey_reply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* me_do_change_cdkey_reply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return me_do_change_cdkey_reply_descriptor_;
}

const me_do_change_cdkey_reply& me_do_change_cdkey_reply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gm_2eproto();
  return *default_instance_;
}

me_do_change_cdkey_reply* me_do_change_cdkey_reply::default_instance_ = NULL;

me_do_change_cdkey_reply* me_do_change_cdkey_reply::New() const {
  return new me_do_change_cdkey_reply;
}

void me_do_change_cdkey_reply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    reply_code_ = 0u;
    role_uid_ = GOOGLE_ULONGLONG(0);
    key_type_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool me_do_change_cdkey_reply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 reply_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reply_code_)));
          set_has_reply_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_role_uid;
        break;
      }

      // optional uint64 role_uid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_uid_)));
          set_has_role_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_key_type;
        break;
      }

      // optional uint32 key_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_key_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &key_type_)));
          set_has_key_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void me_do_change_cdkey_reply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 reply_code = 1;
  if (has_reply_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->reply_code(), output);
  }

  // optional uint64 role_uid = 2;
  if (has_role_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->role_uid(), output);
  }

  // optional uint32 key_type = 3;
  if (has_key_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->key_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* me_do_change_cdkey_reply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 reply_code = 1;
  if (has_reply_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->reply_code(), target);
  }

  // optional uint64 role_uid = 2;
  if (has_role_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->role_uid(), target);
  }

  // optional uint32 key_type = 3;
  if (has_key_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->key_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int me_do_change_cdkey_reply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 reply_code = 1;
    if (has_reply_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reply_code());
    }

    // optional uint64 role_uid = 2;
    if (has_role_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_uid());
    }

    // optional uint32 key_type = 3;
    if (has_key_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->key_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void me_do_change_cdkey_reply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const me_do_change_cdkey_reply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const me_do_change_cdkey_reply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void me_do_change_cdkey_reply::MergeFrom(const me_do_change_cdkey_reply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reply_code()) {
      set_reply_code(from.reply_code());
    }
    if (from.has_role_uid()) {
      set_role_uid(from.role_uid());
    }
    if (from.has_key_type()) {
      set_key_type(from.key_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void me_do_change_cdkey_reply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void me_do_change_cdkey_reply::CopyFrom(const me_do_change_cdkey_reply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool me_do_change_cdkey_reply::IsInitialized() const {

  return true;
}

void me_do_change_cdkey_reply::Swap(me_do_change_cdkey_reply* other) {
  if (other != this) {
    std::swap(reply_code_, other->reply_code_);
    std::swap(role_uid_, other->role_uid_);
    std::swap(key_type_, other->key_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata me_do_change_cdkey_reply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = me_do_change_cdkey_reply_descriptor_;
  metadata.reflection = me_do_change_cdkey_reply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int me_send_mail_request::kMailDataFieldNumber;
#endif  // !_MSC_VER

me_send_mail_request::me_send_mail_request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void me_send_mail_request::InitAsDefaultInstance() {
  mail_data_ = const_cast< ::proto::gm_common::global_mail_single*>(&::proto::gm_common::global_mail_single::default_instance());
}

me_send_mail_request::me_send_mail_request(const me_send_mail_request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void me_send_mail_request::SharedCtor() {
  _cached_size_ = 0;
  mail_data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

me_send_mail_request::~me_send_mail_request() {
  SharedDtor();
}

void me_send_mail_request::SharedDtor() {
  if (this != default_instance_) {
    delete mail_data_;
  }
}

void me_send_mail_request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* me_send_mail_request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return me_send_mail_request_descriptor_;
}

const me_send_mail_request& me_send_mail_request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gm_2eproto();
  return *default_instance_;
}

me_send_mail_request* me_send_mail_request::default_instance_ = NULL;

me_send_mail_request* me_send_mail_request::New() const {
  return new me_send_mail_request;
}

void me_send_mail_request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_mail_data()) {
      if (mail_data_ != NULL) mail_data_->::proto::gm_common::global_mail_single::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool me_send_mail_request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.gm_common.global_mail_single mail_data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mail_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void me_send_mail_request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .proto.gm_common.global_mail_single mail_data = 1;
  if (has_mail_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->mail_data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* me_send_mail_request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .proto.gm_common.global_mail_single mail_data = 1;
  if (has_mail_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->mail_data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int me_send_mail_request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .proto.gm_common.global_mail_single mail_data = 1;
    if (has_mail_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mail_data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void me_send_mail_request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const me_send_mail_request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const me_send_mail_request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void me_send_mail_request::MergeFrom(const me_send_mail_request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mail_data()) {
      mutable_mail_data()->::proto::gm_common::global_mail_single::MergeFrom(from.mail_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void me_send_mail_request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void me_send_mail_request::CopyFrom(const me_send_mail_request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool me_send_mail_request::IsInitialized() const {

  return true;
}

void me_send_mail_request::Swap(me_send_mail_request* other) {
  if (other != this) {
    std::swap(mail_data_, other->mail_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata me_send_mail_request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = me_send_mail_request_descriptor_;
  metadata.reflection = me_send_mail_request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

tm_get_user_ol_num_request::tm_get_user_ol_num_request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void tm_get_user_ol_num_request::InitAsDefaultInstance() {
}

tm_get_user_ol_num_request::tm_get_user_ol_num_request(const tm_get_user_ol_num_request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void tm_get_user_ol_num_request::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

tm_get_user_ol_num_request::~tm_get_user_ol_num_request() {
  SharedDtor();
}

void tm_get_user_ol_num_request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void tm_get_user_ol_num_request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tm_get_user_ol_num_request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tm_get_user_ol_num_request_descriptor_;
}

const tm_get_user_ol_num_request& tm_get_user_ol_num_request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gm_2eproto();
  return *default_instance_;
}

tm_get_user_ol_num_request* tm_get_user_ol_num_request::default_instance_ = NULL;

tm_get_user_ol_num_request* tm_get_user_ol_num_request::New() const {
  return new tm_get_user_ol_num_request;
}

void tm_get_user_ol_num_request::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool tm_get_user_ol_num_request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void tm_get_user_ol_num_request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* tm_get_user_ol_num_request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int tm_get_user_ol_num_request::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tm_get_user_ol_num_request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const tm_get_user_ol_num_request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const tm_get_user_ol_num_request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void tm_get_user_ol_num_request::MergeFrom(const tm_get_user_ol_num_request& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void tm_get_user_ol_num_request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tm_get_user_ol_num_request::CopyFrom(const tm_get_user_ol_num_request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tm_get_user_ol_num_request::IsInitialized() const {

  return true;
}

void tm_get_user_ol_num_request::Swap(tm_get_user_ol_num_request* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata tm_get_user_ol_num_request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = tm_get_user_ol_num_request_descriptor_;
  metadata.reflection = tm_get_user_ol_num_request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mt_get_user_ol_num_reply::kOlNumFieldNumber;
#endif  // !_MSC_VER

mt_get_user_ol_num_reply::mt_get_user_ol_num_reply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void mt_get_user_ol_num_reply::InitAsDefaultInstance() {
}

mt_get_user_ol_num_reply::mt_get_user_ol_num_reply(const mt_get_user_ol_num_reply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void mt_get_user_ol_num_reply::SharedCtor() {
  _cached_size_ = 0;
  ol_num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mt_get_user_ol_num_reply::~mt_get_user_ol_num_reply() {
  SharedDtor();
}

void mt_get_user_ol_num_reply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void mt_get_user_ol_num_reply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mt_get_user_ol_num_reply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mt_get_user_ol_num_reply_descriptor_;
}

const mt_get_user_ol_num_reply& mt_get_user_ol_num_reply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gm_2eproto();
  return *default_instance_;
}

mt_get_user_ol_num_reply* mt_get_user_ol_num_reply::default_instance_ = NULL;

mt_get_user_ol_num_reply* mt_get_user_ol_num_reply::New() const {
  return new mt_get_user_ol_num_reply;
}

void mt_get_user_ol_num_reply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ol_num_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mt_get_user_ol_num_reply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 ol_num = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ol_num_)));
          set_has_ol_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void mt_get_user_ol_num_reply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 ol_num = 1;
  if (has_ol_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ol_num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* mt_get_user_ol_num_reply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 ol_num = 1;
  if (has_ol_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ol_num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int mt_get_user_ol_num_reply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 ol_num = 1;
    if (has_ol_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ol_num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mt_get_user_ol_num_reply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mt_get_user_ol_num_reply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mt_get_user_ol_num_reply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mt_get_user_ol_num_reply::MergeFrom(const mt_get_user_ol_num_reply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ol_num()) {
      set_ol_num(from.ol_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mt_get_user_ol_num_reply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mt_get_user_ol_num_reply::CopyFrom(const mt_get_user_ol_num_reply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mt_get_user_ol_num_reply::IsInitialized() const {

  return true;
}

void mt_get_user_ol_num_reply::Swap(mt_get_user_ol_num_reply* other) {
  if (other != this) {
    std::swap(ol_num_, other->ol_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mt_get_user_ol_num_reply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mt_get_user_ol_num_reply_descriptor_;
  metadata.reflection = mt_get_user_ol_num_reply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int me_get_user_ol_num_request::kAdminIdFieldNumber;
#endif  // !_MSC_VER

me_get_user_ol_num_request::me_get_user_ol_num_request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void me_get_user_ol_num_request::InitAsDefaultInstance() {
}

me_get_user_ol_num_request::me_get_user_ol_num_request(const me_get_user_ol_num_request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void me_get_user_ol_num_request::SharedCtor() {
  _cached_size_ = 0;
  admin_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

me_get_user_ol_num_request::~me_get_user_ol_num_request() {
  SharedDtor();
}

void me_get_user_ol_num_request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void me_get_user_ol_num_request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* me_get_user_ol_num_request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return me_get_user_ol_num_request_descriptor_;
}

const me_get_user_ol_num_request& me_get_user_ol_num_request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gm_2eproto();
  return *default_instance_;
}

me_get_user_ol_num_request* me_get_user_ol_num_request::default_instance_ = NULL;

me_get_user_ol_num_request* me_get_user_ol_num_request::New() const {
  return new me_get_user_ol_num_request;
}

void me_get_user_ol_num_request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    admin_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool me_get_user_ol_num_request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 admin_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &admin_id_)));
          set_has_admin_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void me_get_user_ol_num_request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 admin_id = 1;
  if (has_admin_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->admin_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* me_get_user_ol_num_request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 admin_id = 1;
  if (has_admin_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->admin_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int me_get_user_ol_num_request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 admin_id = 1;
    if (has_admin_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->admin_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void me_get_user_ol_num_request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const me_get_user_ol_num_request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const me_get_user_ol_num_request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void me_get_user_ol_num_request::MergeFrom(const me_get_user_ol_num_request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_admin_id()) {
      set_admin_id(from.admin_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void me_get_user_ol_num_request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void me_get_user_ol_num_request::CopyFrom(const me_get_user_ol_num_request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool me_get_user_ol_num_request::IsInitialized() const {

  return true;
}

void me_get_user_ol_num_request::Swap(me_get_user_ol_num_request* other) {
  if (other != this) {
    std::swap(admin_id_, other->admin_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata me_get_user_ol_num_request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = me_get_user_ol_num_request_descriptor_;
  metadata.reflection = me_get_user_ol_num_request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int em_get_user_ol_num_reply::kOlNumFieldNumber;
const int em_get_user_ol_num_reply::kAdminIdFieldNumber;
#endif  // !_MSC_VER

em_get_user_ol_num_reply::em_get_user_ol_num_reply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void em_get_user_ol_num_reply::InitAsDefaultInstance() {
}

em_get_user_ol_num_reply::em_get_user_ol_num_reply(const em_get_user_ol_num_reply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void em_get_user_ol_num_reply::SharedCtor() {
  _cached_size_ = 0;
  ol_num_ = 0u;
  admin_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

em_get_user_ol_num_reply::~em_get_user_ol_num_reply() {
  SharedDtor();
}

void em_get_user_ol_num_reply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void em_get_user_ol_num_reply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* em_get_user_ol_num_reply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return em_get_user_ol_num_reply_descriptor_;
}

const em_get_user_ol_num_reply& em_get_user_ol_num_reply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gm_2eproto();
  return *default_instance_;
}

em_get_user_ol_num_reply* em_get_user_ol_num_reply::default_instance_ = NULL;

em_get_user_ol_num_reply* em_get_user_ol_num_reply::New() const {
  return new em_get_user_ol_num_reply;
}

void em_get_user_ol_num_reply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ol_num_ = 0u;
    admin_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool em_get_user_ol_num_reply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 ol_num = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ol_num_)));
          set_has_ol_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_admin_id;
        break;
      }

      // optional uint32 admin_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_admin_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &admin_id_)));
          set_has_admin_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void em_get_user_ol_num_reply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 ol_num = 1;
  if (has_ol_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ol_num(), output);
  }

  // optional uint32 admin_id = 2;
  if (has_admin_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->admin_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* em_get_user_ol_num_reply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 ol_num = 1;
  if (has_ol_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ol_num(), target);
  }

  // optional uint32 admin_id = 2;
  if (has_admin_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->admin_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int em_get_user_ol_num_reply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 ol_num = 1;
    if (has_ol_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ol_num());
    }

    // optional uint32 admin_id = 2;
    if (has_admin_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->admin_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void em_get_user_ol_num_reply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const em_get_user_ol_num_reply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const em_get_user_ol_num_reply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void em_get_user_ol_num_reply::MergeFrom(const em_get_user_ol_num_reply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ol_num()) {
      set_ol_num(from.ol_num());
    }
    if (from.has_admin_id()) {
      set_admin_id(from.admin_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void em_get_user_ol_num_reply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void em_get_user_ol_num_reply::CopyFrom(const em_get_user_ol_num_reply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool em_get_user_ol_num_reply::IsInitialized() const {

  return true;
}

void em_get_user_ol_num_reply::Swap(em_get_user_ol_num_reply* other) {
  if (other != this) {
    std::swap(ol_num_, other->ol_num_);
    std::swap(admin_id_, other->admin_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata em_get_user_ol_num_reply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = em_get_user_ol_num_reply_descriptor_;
  metadata.reflection = em_get_user_ol_num_reply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int tm_send_notice_request::kTypeFieldNumber;
const int tm_send_notice_request::kTickFieldNumber;
const int tm_send_notice_request::kStartTimeFieldNumber;
const int tm_send_notice_request::kEndTimeFieldNumber;
const int tm_send_notice_request::kNoticeFieldNumber;
#endif  // !_MSC_VER

tm_send_notice_request::tm_send_notice_request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void tm_send_notice_request::InitAsDefaultInstance() {
}

tm_send_notice_request::tm_send_notice_request(const tm_send_notice_request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void tm_send_notice_request::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  tick_ = 0u;
  start_time_ = 0u;
  end_time_ = 0u;
  notice_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

tm_send_notice_request::~tm_send_notice_request() {
  SharedDtor();
}

void tm_send_notice_request::SharedDtor() {
  if (notice_ != &::google::protobuf::internal::kEmptyString) {
    delete notice_;
  }
  if (this != default_instance_) {
  }
}

void tm_send_notice_request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tm_send_notice_request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tm_send_notice_request_descriptor_;
}

const tm_send_notice_request& tm_send_notice_request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gm_2eproto();
  return *default_instance_;
}

tm_send_notice_request* tm_send_notice_request::default_instance_ = NULL;

tm_send_notice_request* tm_send_notice_request::New() const {
  return new tm_send_notice_request;
}

void tm_send_notice_request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0u;
    tick_ = 0u;
    start_time_ = 0u;
    end_time_ = 0u;
    if (has_notice()) {
      if (notice_ != &::google::protobuf::internal::kEmptyString) {
        notice_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool tm_send_notice_request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_tick;
        break;
      }

      // optional uint32 tick = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tick:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tick_)));
          set_has_tick();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_start_time;
        break;
      }

      // optional uint32 start_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_start_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &start_time_)));
          set_has_start_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_end_time;
        break;
      }

      // optional uint32 end_time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_end_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &end_time_)));
          set_has_end_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_notice;
        break;
      }

      // optional string notice = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_notice:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_notice()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->notice().data(), this->notice().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void tm_send_notice_request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  // optional uint32 tick = 2;
  if (has_tick()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->tick(), output);
  }

  // optional uint32 start_time = 3;
  if (has_start_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->start_time(), output);
  }

  // optional uint32 end_time = 4;
  if (has_end_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->end_time(), output);
  }

  // optional string notice = 5;
  if (has_notice()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->notice().data(), this->notice().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->notice(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* tm_send_notice_request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }

  // optional uint32 tick = 2;
  if (has_tick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->tick(), target);
  }

  // optional uint32 start_time = 3;
  if (has_start_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->start_time(), target);
  }

  // optional uint32 end_time = 4;
  if (has_end_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->end_time(), target);
  }

  // optional string notice = 5;
  if (has_notice()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->notice().data(), this->notice().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->notice(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int tm_send_notice_request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional uint32 tick = 2;
    if (has_tick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tick());
    }

    // optional uint32 start_time = 3;
    if (has_start_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->start_time());
    }

    // optional uint32 end_time = 4;
    if (has_end_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->end_time());
    }

    // optional string notice = 5;
    if (has_notice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->notice());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tm_send_notice_request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const tm_send_notice_request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const tm_send_notice_request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void tm_send_notice_request::MergeFrom(const tm_send_notice_request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_tick()) {
      set_tick(from.tick());
    }
    if (from.has_start_time()) {
      set_start_time(from.start_time());
    }
    if (from.has_end_time()) {
      set_end_time(from.end_time());
    }
    if (from.has_notice()) {
      set_notice(from.notice());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void tm_send_notice_request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tm_send_notice_request::CopyFrom(const tm_send_notice_request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tm_send_notice_request::IsInitialized() const {

  return true;
}

void tm_send_notice_request::Swap(tm_send_notice_request* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(tick_, other->tick_);
    std::swap(start_time_, other->start_time_);
    std::swap(end_time_, other->end_time_);
    std::swap(notice_, other->notice_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata tm_send_notice_request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = tm_send_notice_request_descriptor_;
  metadata.reflection = tm_send_notice_request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mt_send_notice_reply::kReplyCodeFieldNumber;
#endif  // !_MSC_VER

mt_send_notice_reply::mt_send_notice_reply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void mt_send_notice_reply::InitAsDefaultInstance() {
}

mt_send_notice_reply::mt_send_notice_reply(const mt_send_notice_reply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void mt_send_notice_reply::SharedCtor() {
  _cached_size_ = 0;
  reply_code_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mt_send_notice_reply::~mt_send_notice_reply() {
  SharedDtor();
}

void mt_send_notice_reply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void mt_send_notice_reply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mt_send_notice_reply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mt_send_notice_reply_descriptor_;
}

const mt_send_notice_reply& mt_send_notice_reply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gm_2eproto();
  return *default_instance_;
}

mt_send_notice_reply* mt_send_notice_reply::default_instance_ = NULL;

mt_send_notice_reply* mt_send_notice_reply::New() const {
  return new mt_send_notice_reply;
}

void mt_send_notice_reply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    reply_code_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mt_send_notice_reply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 reply_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reply_code_)));
          set_has_reply_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void mt_send_notice_reply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 reply_code = 1;
  if (has_reply_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->reply_code(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* mt_send_notice_reply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 reply_code = 1;
  if (has_reply_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->reply_code(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int mt_send_notice_reply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 reply_code = 1;
    if (has_reply_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reply_code());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mt_send_notice_reply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mt_send_notice_reply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mt_send_notice_reply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mt_send_notice_reply::MergeFrom(const mt_send_notice_reply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reply_code()) {
      set_reply_code(from.reply_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mt_send_notice_reply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mt_send_notice_reply::CopyFrom(const mt_send_notice_reply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mt_send_notice_reply::IsInitialized() const {

  return true;
}

void mt_send_notice_reply::Swap(mt_send_notice_reply* other) {
  if (other != this) {
    std::swap(reply_code_, other->reply_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mt_send_notice_reply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mt_send_notice_reply_descriptor_;
  metadata.reflection = mt_send_notice_reply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int me_send_notice_request::kNoticeDataFieldNumber;
#endif  // !_MSC_VER

me_send_notice_request::me_send_notice_request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void me_send_notice_request::InitAsDefaultInstance() {
  notice_data_ = const_cast< ::proto::gm_common::gm_notice_single*>(&::proto::gm_common::gm_notice_single::default_instance());
}

me_send_notice_request::me_send_notice_request(const me_send_notice_request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void me_send_notice_request::SharedCtor() {
  _cached_size_ = 0;
  notice_data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

me_send_notice_request::~me_send_notice_request() {
  SharedDtor();
}

void me_send_notice_request::SharedDtor() {
  if (this != default_instance_) {
    delete notice_data_;
  }
}

void me_send_notice_request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* me_send_notice_request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return me_send_notice_request_descriptor_;
}

const me_send_notice_request& me_send_notice_request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gm_2eproto();
  return *default_instance_;
}

me_send_notice_request* me_send_notice_request::default_instance_ = NULL;

me_send_notice_request* me_send_notice_request::New() const {
  return new me_send_notice_request;
}

void me_send_notice_request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_notice_data()) {
      if (notice_data_ != NULL) notice_data_->::proto::gm_common::gm_notice_single::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool me_send_notice_request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.gm_common.gm_notice_single notice_data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_notice_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void me_send_notice_request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .proto.gm_common.gm_notice_single notice_data = 1;
  if (has_notice_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->notice_data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* me_send_notice_request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .proto.gm_common.gm_notice_single notice_data = 1;
  if (has_notice_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->notice_data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int me_send_notice_request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .proto.gm_common.gm_notice_single notice_data = 1;
    if (has_notice_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->notice_data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void me_send_notice_request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const me_send_notice_request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const me_send_notice_request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void me_send_notice_request::MergeFrom(const me_send_notice_request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_notice_data()) {
      mutable_notice_data()->::proto::gm_common::gm_notice_single::MergeFrom(from.notice_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void me_send_notice_request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void me_send_notice_request::CopyFrom(const me_send_notice_request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool me_send_notice_request::IsInitialized() const {

  return true;
}

void me_send_notice_request::Swap(me_send_notice_request* other) {
  if (other != this) {
    std::swap(notice_data_, other->notice_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata me_send_notice_request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = me_send_notice_request_descriptor_;
  metadata.reflection = me_send_notice_request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int em_send_notice_reply::kReplyCodeFieldNumber;
#endif  // !_MSC_VER

em_send_notice_reply::em_send_notice_reply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void em_send_notice_reply::InitAsDefaultInstance() {
}

em_send_notice_reply::em_send_notice_reply(const em_send_notice_reply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void em_send_notice_reply::SharedCtor() {
  _cached_size_ = 0;
  reply_code_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

em_send_notice_reply::~em_send_notice_reply() {
  SharedDtor();
}

void em_send_notice_reply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void em_send_notice_reply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* em_send_notice_reply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return em_send_notice_reply_descriptor_;
}

const em_send_notice_reply& em_send_notice_reply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gm_2eproto();
  return *default_instance_;
}

em_send_notice_reply* em_send_notice_reply::default_instance_ = NULL;

em_send_notice_reply* em_send_notice_reply::New() const {
  return new em_send_notice_reply;
}

void em_send_notice_reply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    reply_code_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool em_send_notice_reply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 reply_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reply_code_)));
          set_has_reply_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void em_send_notice_reply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 reply_code = 1;
  if (has_reply_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->reply_code(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* em_send_notice_reply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 reply_code = 1;
  if (has_reply_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->reply_code(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int em_send_notice_reply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 reply_code = 1;
    if (has_reply_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reply_code());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void em_send_notice_reply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const em_send_notice_reply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const em_send_notice_reply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void em_send_notice_reply::MergeFrom(const em_send_notice_reply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reply_code()) {
      set_reply_code(from.reply_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void em_send_notice_reply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void em_send_notice_reply::CopyFrom(const em_send_notice_reply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool em_send_notice_reply::IsInitialized() const {

  return true;
}

void em_send_notice_reply::Swap(em_send_notice_reply* other) {
  if (other != this) {
    std::swap(reply_code_, other->reply_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata em_send_notice_reply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = em_send_notice_reply_descriptor_;
  metadata.reflection = em_send_notice_reply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int me_transport_ntf::kRoleUidFieldNumber;
const int me_transport_ntf::kSceneIdFieldNumber;
#endif  // !_MSC_VER

me_transport_ntf::me_transport_ntf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void me_transport_ntf::InitAsDefaultInstance() {
}

me_transport_ntf::me_transport_ntf(const me_transport_ntf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void me_transport_ntf::SharedCtor() {
  _cached_size_ = 0;
  role_uid_ = GOOGLE_ULONGLONG(0);
  scene_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

me_transport_ntf::~me_transport_ntf() {
  SharedDtor();
}

void me_transport_ntf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void me_transport_ntf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* me_transport_ntf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return me_transport_ntf_descriptor_;
}

const me_transport_ntf& me_transport_ntf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gm_2eproto();
  return *default_instance_;
}

me_transport_ntf* me_transport_ntf::default_instance_ = NULL;

me_transport_ntf* me_transport_ntf::New() const {
  return new me_transport_ntf;
}

void me_transport_ntf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_uid_ = GOOGLE_ULONGLONG(0);
    scene_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool me_transport_ntf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 role_uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_uid_)));
          set_has_role_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_scene_id;
        break;
      }

      // optional uint32 scene_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scene_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scene_id_)));
          set_has_scene_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void me_transport_ntf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 role_uid = 1;
  if (has_role_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->role_uid(), output);
  }

  // optional uint32 scene_id = 2;
  if (has_scene_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->scene_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* me_transport_ntf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 role_uid = 1;
  if (has_role_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->role_uid(), target);
  }

  // optional uint32 scene_id = 2;
  if (has_scene_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->scene_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int me_transport_ntf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 role_uid = 1;
    if (has_role_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_uid());
    }

    // optional uint32 scene_id = 2;
    if (has_scene_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->scene_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void me_transport_ntf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const me_transport_ntf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const me_transport_ntf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void me_transport_ntf::MergeFrom(const me_transport_ntf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_uid()) {
      set_role_uid(from.role_uid());
    }
    if (from.has_scene_id()) {
      set_scene_id(from.scene_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void me_transport_ntf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void me_transport_ntf::CopyFrom(const me_transport_ntf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool me_transport_ntf::IsInitialized() const {

  return true;
}

void me_transport_ntf::Swap(me_transport_ntf* other) {
  if (other != this) {
    std::swap(role_uid_, other->role_uid_);
    std::swap(scene_id_, other->scene_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata me_transport_ntf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = me_transport_ntf_descriptor_;
  metadata.reflection = me_transport_ntf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int tm_set_user_create_limit_request::kFlagFieldNumber;
#endif  // !_MSC_VER

tm_set_user_create_limit_request::tm_set_user_create_limit_request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void tm_set_user_create_limit_request::InitAsDefaultInstance() {
}

tm_set_user_create_limit_request::tm_set_user_create_limit_request(const tm_set_user_create_limit_request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void tm_set_user_create_limit_request::SharedCtor() {
  _cached_size_ = 0;
  flag_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

tm_set_user_create_limit_request::~tm_set_user_create_limit_request() {
  SharedDtor();
}

void tm_set_user_create_limit_request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void tm_set_user_create_limit_request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tm_set_user_create_limit_request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tm_set_user_create_limit_request_descriptor_;
}

const tm_set_user_create_limit_request& tm_set_user_create_limit_request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gm_2eproto();
  return *default_instance_;
}

tm_set_user_create_limit_request* tm_set_user_create_limit_request::default_instance_ = NULL;

tm_set_user_create_limit_request* tm_set_user_create_limit_request::New() const {
  return new tm_set_user_create_limit_request;
}

void tm_set_user_create_limit_request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    flag_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool tm_set_user_create_limit_request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 flag = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flag_)));
          set_has_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void tm_set_user_create_limit_request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 flag = 1;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->flag(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* tm_set_user_create_limit_request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 flag = 1;
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->flag(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int tm_set_user_create_limit_request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 flag = 1;
    if (has_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flag());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tm_set_user_create_limit_request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const tm_set_user_create_limit_request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const tm_set_user_create_limit_request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void tm_set_user_create_limit_request::MergeFrom(const tm_set_user_create_limit_request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_flag()) {
      set_flag(from.flag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void tm_set_user_create_limit_request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tm_set_user_create_limit_request::CopyFrom(const tm_set_user_create_limit_request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tm_set_user_create_limit_request::IsInitialized() const {

  return true;
}

void tm_set_user_create_limit_request::Swap(tm_set_user_create_limit_request* other) {
  if (other != this) {
    std::swap(flag_, other->flag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata tm_set_user_create_limit_request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = tm_set_user_create_limit_request_descriptor_;
  metadata.reflection = tm_set_user_create_limit_request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mt_set_user_create_limit_reply::kReplyCodeFieldNumber;
#endif  // !_MSC_VER

mt_set_user_create_limit_reply::mt_set_user_create_limit_reply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void mt_set_user_create_limit_reply::InitAsDefaultInstance() {
}

mt_set_user_create_limit_reply::mt_set_user_create_limit_reply(const mt_set_user_create_limit_reply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void mt_set_user_create_limit_reply::SharedCtor() {
  _cached_size_ = 0;
  reply_code_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mt_set_user_create_limit_reply::~mt_set_user_create_limit_reply() {
  SharedDtor();
}

void mt_set_user_create_limit_reply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void mt_set_user_create_limit_reply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mt_set_user_create_limit_reply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mt_set_user_create_limit_reply_descriptor_;
}

const mt_set_user_create_limit_reply& mt_set_user_create_limit_reply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gm_2eproto();
  return *default_instance_;
}

mt_set_user_create_limit_reply* mt_set_user_create_limit_reply::default_instance_ = NULL;

mt_set_user_create_limit_reply* mt_set_user_create_limit_reply::New() const {
  return new mt_set_user_create_limit_reply;
}

void mt_set_user_create_limit_reply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    reply_code_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mt_set_user_create_limit_reply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 reply_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reply_code_)));
          set_has_reply_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void mt_set_user_create_limit_reply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 reply_code = 1;
  if (has_reply_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->reply_code(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* mt_set_user_create_limit_reply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 reply_code = 1;
  if (has_reply_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->reply_code(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int mt_set_user_create_limit_reply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 reply_code = 1;
    if (has_reply_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reply_code());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mt_set_user_create_limit_reply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mt_set_user_create_limit_reply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mt_set_user_create_limit_reply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mt_set_user_create_limit_reply::MergeFrom(const mt_set_user_create_limit_reply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reply_code()) {
      set_reply_code(from.reply_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mt_set_user_create_limit_reply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mt_set_user_create_limit_reply::CopyFrom(const mt_set_user_create_limit_reply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mt_set_user_create_limit_reply::IsInitialized() const {

  return true;
}

void mt_set_user_create_limit_reply::Swap(mt_set_user_create_limit_reply* other) {
  if (other != this) {
    std::swap(reply_code_, other->reply_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mt_set_user_create_limit_reply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mt_set_user_create_limit_reply_descriptor_;
  metadata.reflection = mt_set_user_create_limit_reply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int me_send_gm_msg_to_account_request::kCmdTypeFieldNumber;
const int me_send_gm_msg_to_account_request::kMsgFieldNumber;
#endif  // !_MSC_VER

me_send_gm_msg_to_account_request::me_send_gm_msg_to_account_request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void me_send_gm_msg_to_account_request::InitAsDefaultInstance() {
  msg_ = const_cast< ::proto::common::gm_msg_to_account*>(&::proto::common::gm_msg_to_account::default_instance());
}

me_send_gm_msg_to_account_request::me_send_gm_msg_to_account_request(const me_send_gm_msg_to_account_request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void me_send_gm_msg_to_account_request::SharedCtor() {
  _cached_size_ = 0;
  cmd_type_ = 0u;
  msg_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

me_send_gm_msg_to_account_request::~me_send_gm_msg_to_account_request() {
  SharedDtor();
}

void me_send_gm_msg_to_account_request::SharedDtor() {
  if (this != default_instance_) {
    delete msg_;
  }
}

void me_send_gm_msg_to_account_request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* me_send_gm_msg_to_account_request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return me_send_gm_msg_to_account_request_descriptor_;
}

const me_send_gm_msg_to_account_request& me_send_gm_msg_to_account_request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gm_2eproto();
  return *default_instance_;
}

me_send_gm_msg_to_account_request* me_send_gm_msg_to_account_request::default_instance_ = NULL;

me_send_gm_msg_to_account_request* me_send_gm_msg_to_account_request::New() const {
  return new me_send_gm_msg_to_account_request;
}

void me_send_gm_msg_to_account_request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cmd_type_ = 0u;
    if (has_msg()) {
      if (msg_ != NULL) msg_->::proto::common::gm_msg_to_account::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool me_send_gm_msg_to_account_request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 cmd_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cmd_type_)));
          set_has_cmd_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_msg;
        break;
      }

      // optional .proto.common.gm_msg_to_account msg = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void me_send_gm_msg_to_account_request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 cmd_type = 1;
  if (has_cmd_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cmd_type(), output);
  }

  // optional .proto.common.gm_msg_to_account msg = 2;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->msg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* me_send_gm_msg_to_account_request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 cmd_type = 1;
  if (has_cmd_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->cmd_type(), target);
  }

  // optional .proto.common.gm_msg_to_account msg = 2;
  if (has_msg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->msg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int me_send_gm_msg_to_account_request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 cmd_type = 1;
    if (has_cmd_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cmd_type());
    }

    // optional .proto.common.gm_msg_to_account msg = 2;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->msg());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void me_send_gm_msg_to_account_request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const me_send_gm_msg_to_account_request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const me_send_gm_msg_to_account_request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void me_send_gm_msg_to_account_request::MergeFrom(const me_send_gm_msg_to_account_request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd_type()) {
      set_cmd_type(from.cmd_type());
    }
    if (from.has_msg()) {
      mutable_msg()->::proto::common::gm_msg_to_account::MergeFrom(from.msg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void me_send_gm_msg_to_account_request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void me_send_gm_msg_to_account_request::CopyFrom(const me_send_gm_msg_to_account_request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool me_send_gm_msg_to_account_request::IsInitialized() const {

  return true;
}

void me_send_gm_msg_to_account_request::Swap(me_send_gm_msg_to_account_request* other) {
  if (other != this) {
    std::swap(cmd_type_, other->cmd_type_);
    std::swap(msg_, other->msg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata me_send_gm_msg_to_account_request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = me_send_gm_msg_to_account_request_descriptor_;
  metadata.reflection = me_send_gm_msg_to_account_request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

tm_refresh_login_list::tm_refresh_login_list()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void tm_refresh_login_list::InitAsDefaultInstance() {
}

tm_refresh_login_list::tm_refresh_login_list(const tm_refresh_login_list& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void tm_refresh_login_list::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

tm_refresh_login_list::~tm_refresh_login_list() {
  SharedDtor();
}

void tm_refresh_login_list::SharedDtor() {
  if (this != default_instance_) {
  }
}

void tm_refresh_login_list::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tm_refresh_login_list::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tm_refresh_login_list_descriptor_;
}

const tm_refresh_login_list& tm_refresh_login_list::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gm_2eproto();
  return *default_instance_;
}

tm_refresh_login_list* tm_refresh_login_list::default_instance_ = NULL;

tm_refresh_login_list* tm_refresh_login_list::New() const {
  return new tm_refresh_login_list;
}

void tm_refresh_login_list::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool tm_refresh_login_list::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void tm_refresh_login_list::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* tm_refresh_login_list::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int tm_refresh_login_list::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tm_refresh_login_list::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const tm_refresh_login_list* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const tm_refresh_login_list*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void tm_refresh_login_list::MergeFrom(const tm_refresh_login_list& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void tm_refresh_login_list::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tm_refresh_login_list::CopyFrom(const tm_refresh_login_list& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tm_refresh_login_list::IsInitialized() const {

  return true;
}

void tm_refresh_login_list::Swap(tm_refresh_login_list* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata tm_refresh_login_list::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = tm_refresh_login_list_descriptor_;
  metadata.reflection = tm_refresh_login_list_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int tm_search_role_byid_request::kRoleDidFieldNumber;
#endif  // !_MSC_VER

tm_search_role_byid_request::tm_search_role_byid_request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void tm_search_role_byid_request::InitAsDefaultInstance() {
}

tm_search_role_byid_request::tm_search_role_byid_request(const tm_search_role_byid_request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void tm_search_role_byid_request::SharedCtor() {
  _cached_size_ = 0;
  role_did_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

tm_search_role_byid_request::~tm_search_role_byid_request() {
  SharedDtor();
}

void tm_search_role_byid_request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void tm_search_role_byid_request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tm_search_role_byid_request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tm_search_role_byid_request_descriptor_;
}

const tm_search_role_byid_request& tm_search_role_byid_request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gm_2eproto();
  return *default_instance_;
}

tm_search_role_byid_request* tm_search_role_byid_request::default_instance_ = NULL;

tm_search_role_byid_request* tm_search_role_byid_request::New() const {
  return new tm_search_role_byid_request;
}

void tm_search_role_byid_request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_did_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool tm_search_role_byid_request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 role_did = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_did_)));
          set_has_role_did();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void tm_search_role_byid_request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 role_did = 1;
  if (has_role_did()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->role_did(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* tm_search_role_byid_request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 role_did = 1;
  if (has_role_did()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->role_did(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int tm_search_role_byid_request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 role_did = 1;
    if (has_role_did()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->role_did());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tm_search_role_byid_request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const tm_search_role_byid_request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const tm_search_role_byid_request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void tm_search_role_byid_request::MergeFrom(const tm_search_role_byid_request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_did()) {
      set_role_did(from.role_did());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void tm_search_role_byid_request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tm_search_role_byid_request::CopyFrom(const tm_search_role_byid_request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tm_search_role_byid_request::IsInitialized() const {

  return true;
}

void tm_search_role_byid_request::Swap(tm_search_role_byid_request* other) {
  if (other != this) {
    std::swap(role_did_, other->role_did_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata tm_search_role_byid_request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = tm_search_role_byid_request_descriptor_;
  metadata.reflection = tm_search_role_byid_request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int tm_search_role_byname_request::kRoleNameFieldNumber;
#endif  // !_MSC_VER

tm_search_role_byname_request::tm_search_role_byname_request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void tm_search_role_byname_request::InitAsDefaultInstance() {
}

tm_search_role_byname_request::tm_search_role_byname_request(const tm_search_role_byname_request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void tm_search_role_byname_request::SharedCtor() {
  _cached_size_ = 0;
  role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

tm_search_role_byname_request::~tm_search_role_byname_request() {
  SharedDtor();
}

void tm_search_role_byname_request::SharedDtor() {
  if (role_name_ != &::google::protobuf::internal::kEmptyString) {
    delete role_name_;
  }
  if (this != default_instance_) {
  }
}

void tm_search_role_byname_request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tm_search_role_byname_request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tm_search_role_byname_request_descriptor_;
}

const tm_search_role_byname_request& tm_search_role_byname_request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gm_2eproto();
  return *default_instance_;
}

tm_search_role_byname_request* tm_search_role_byname_request::default_instance_ = NULL;

tm_search_role_byname_request* tm_search_role_byname_request::New() const {
  return new tm_search_role_byname_request;
}

void tm_search_role_byname_request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_role_name()) {
      if (role_name_ != &::google::protobuf::internal::kEmptyString) {
        role_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool tm_search_role_byname_request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string role_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_role_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->role_name().data(), this->role_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void tm_search_role_byname_request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string role_name = 1;
  if (has_role_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_name().data(), this->role_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->role_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* tm_search_role_byname_request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string role_name = 1;
  if (has_role_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_name().data(), this->role_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->role_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int tm_search_role_byname_request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string role_name = 1;
    if (has_role_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->role_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tm_search_role_byname_request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const tm_search_role_byname_request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const tm_search_role_byname_request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void tm_search_role_byname_request::MergeFrom(const tm_search_role_byname_request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_name()) {
      set_role_name(from.role_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void tm_search_role_byname_request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tm_search_role_byname_request::CopyFrom(const tm_search_role_byname_request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tm_search_role_byname_request::IsInitialized() const {

  return true;
}

void tm_search_role_byname_request::Swap(tm_search_role_byname_request* other) {
  if (other != this) {
    std::swap(role_name_, other->role_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata tm_search_role_byname_request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = tm_search_role_byname_request_descriptor_;
  metadata.reflection = tm_search_role_byname_request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mt_search_role_byname_reply::kRoleDidFieldNumber;
const int mt_search_role_byname_reply::kRoleNameFieldNumber;
const int mt_search_role_byname_reply::kCreateTimeFieldNumber;
const int mt_search_role_byname_reply::kLastLoginTimeFieldNumber;
const int mt_search_role_byname_reply::kLastLogoutTimeFieldNumber;
const int mt_search_role_byname_reply::kLevelFieldNumber;
const int mt_search_role_byname_reply::kTotalRechargeFieldNumber;
const int mt_search_role_byname_reply::kGoldFieldNumber;
const int mt_search_role_byname_reply::kSilverFieldNumber;
const int mt_search_role_byname_reply::kCopperFieldNumber;
const int mt_search_role_byname_reply::kLifeStoneFieldNumber;
const int mt_search_role_byname_reply::kFightingFieldNumber;
const int mt_search_role_byname_reply::kSceneIdFieldNumber;
const int mt_search_role_byname_reply::kVipLevelFieldNumber;
const int mt_search_role_byname_reply::kRoleUidFieldNumber;
#endif  // !_MSC_VER

mt_search_role_byname_reply::mt_search_role_byname_reply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void mt_search_role_byname_reply::InitAsDefaultInstance() {
}

mt_search_role_byname_reply::mt_search_role_byname_reply(const mt_search_role_byname_reply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void mt_search_role_byname_reply::SharedCtor() {
  _cached_size_ = 0;
  role_did_ = 0u;
  role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  create_time_ = 0u;
  last_login_time_ = 0u;
  last_logout_time_ = 0u;
  level_ = 0u;
  total_recharge_ = 0u;
  gold_ = 0u;
  silver_ = 0u;
  copper_ = 0u;
  life_stone_ = 0u;
  fighting_ = 0u;
  scene_id_ = 0u;
  vip_level_ = 0u;
  role_uid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mt_search_role_byname_reply::~mt_search_role_byname_reply() {
  SharedDtor();
}

void mt_search_role_byname_reply::SharedDtor() {
  if (role_name_ != &::google::protobuf::internal::kEmptyString) {
    delete role_name_;
  }
  if (this != default_instance_) {
  }
}

void mt_search_role_byname_reply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mt_search_role_byname_reply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mt_search_role_byname_reply_descriptor_;
}

const mt_search_role_byname_reply& mt_search_role_byname_reply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gm_2eproto();
  return *default_instance_;
}

mt_search_role_byname_reply* mt_search_role_byname_reply::default_instance_ = NULL;

mt_search_role_byname_reply* mt_search_role_byname_reply::New() const {
  return new mt_search_role_byname_reply;
}

void mt_search_role_byname_reply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_did_ = 0u;
    if (has_role_name()) {
      if (role_name_ != &::google::protobuf::internal::kEmptyString) {
        role_name_->clear();
      }
    }
    create_time_ = 0u;
    last_login_time_ = 0u;
    last_logout_time_ = 0u;
    level_ = 0u;
    total_recharge_ = 0u;
    gold_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    silver_ = 0u;
    copper_ = 0u;
    life_stone_ = 0u;
    fighting_ = 0u;
    scene_id_ = 0u;
    vip_level_ = 0u;
    role_uid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mt_search_role_byname_reply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 role_did = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_did_)));
          set_has_role_did();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_role_name;
        break;
      }

      // optional string role_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_role_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_role_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->role_name().data(), this->role_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_create_time;
        break;
      }

      // optional uint32 create_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_create_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &create_time_)));
          set_has_create_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_last_login_time;
        break;
      }

      // optional uint32 last_login_time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_login_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_login_time_)));
          set_has_last_login_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_last_logout_time;
        break;
      }

      // optional uint32 last_logout_time = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_logout_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_logout_time_)));
          set_has_last_logout_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_level;
        break;
      }

      // optional uint32 level = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_total_recharge;
        break;
      }

      // optional uint32 total_recharge = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_recharge:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_recharge_)));
          set_has_total_recharge();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_gold;
        break;
      }

      // optional uint32 gold = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gold_)));
          set_has_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_silver;
        break;
      }

      // optional uint32 silver = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_silver:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &silver_)));
          set_has_silver();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_copper;
        break;
      }

      // optional uint32 copper = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_copper:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &copper_)));
          set_has_copper();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_life_stone;
        break;
      }

      // optional uint32 life_stone = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_life_stone:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &life_stone_)));
          set_has_life_stone();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_fighting;
        break;
      }

      // optional uint32 fighting = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fighting:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fighting_)));
          set_has_fighting();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_scene_id;
        break;
      }

      // optional uint32 scene_id = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scene_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scene_id_)));
          set_has_scene_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_vip_level;
        break;
      }

      // optional uint32 vip_level = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vip_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vip_level_)));
          set_has_vip_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_role_uid;
        break;
      }

      // optional uint64 role_uid = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_uid_)));
          set_has_role_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void mt_search_role_byname_reply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 role_did = 1;
  if (has_role_did()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->role_did(), output);
  }

  // optional string role_name = 2;
  if (has_role_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_name().data(), this->role_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->role_name(), output);
  }

  // optional uint32 create_time = 3;
  if (has_create_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->create_time(), output);
  }

  // optional uint32 last_login_time = 4;
  if (has_last_login_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->last_login_time(), output);
  }

  // optional uint32 last_logout_time = 5;
  if (has_last_logout_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->last_logout_time(), output);
  }

  // optional uint32 level = 6;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->level(), output);
  }

  // optional uint32 total_recharge = 7;
  if (has_total_recharge()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->total_recharge(), output);
  }

  // optional uint32 gold = 8;
  if (has_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->gold(), output);
  }

  // optional uint32 silver = 9;
  if (has_silver()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->silver(), output);
  }

  // optional uint32 copper = 10;
  if (has_copper()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->copper(), output);
  }

  // optional uint32 life_stone = 11;
  if (has_life_stone()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->life_stone(), output);
  }

  // optional uint32 fighting = 12;
  if (has_fighting()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->fighting(), output);
  }

  // optional uint32 scene_id = 13;
  if (has_scene_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->scene_id(), output);
  }

  // optional uint32 vip_level = 14;
  if (has_vip_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->vip_level(), output);
  }

  // optional uint64 role_uid = 15;
  if (has_role_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(15, this->role_uid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* mt_search_role_byname_reply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 role_did = 1;
  if (has_role_did()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->role_did(), target);
  }

  // optional string role_name = 2;
  if (has_role_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_name().data(), this->role_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->role_name(), target);
  }

  // optional uint32 create_time = 3;
  if (has_create_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->create_time(), target);
  }

  // optional uint32 last_login_time = 4;
  if (has_last_login_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->last_login_time(), target);
  }

  // optional uint32 last_logout_time = 5;
  if (has_last_logout_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->last_logout_time(), target);
  }

  // optional uint32 level = 6;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->level(), target);
  }

  // optional uint32 total_recharge = 7;
  if (has_total_recharge()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->total_recharge(), target);
  }

  // optional uint32 gold = 8;
  if (has_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->gold(), target);
  }

  // optional uint32 silver = 9;
  if (has_silver()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->silver(), target);
  }

  // optional uint32 copper = 10;
  if (has_copper()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->copper(), target);
  }

  // optional uint32 life_stone = 11;
  if (has_life_stone()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->life_stone(), target);
  }

  // optional uint32 fighting = 12;
  if (has_fighting()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->fighting(), target);
  }

  // optional uint32 scene_id = 13;
  if (has_scene_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->scene_id(), target);
  }

  // optional uint32 vip_level = 14;
  if (has_vip_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->vip_level(), target);
  }

  // optional uint64 role_uid = 15;
  if (has_role_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(15, this->role_uid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int mt_search_role_byname_reply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 role_did = 1;
    if (has_role_did()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->role_did());
    }

    // optional string role_name = 2;
    if (has_role_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->role_name());
    }

    // optional uint32 create_time = 3;
    if (has_create_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->create_time());
    }

    // optional uint32 last_login_time = 4;
    if (has_last_login_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_login_time());
    }

    // optional uint32 last_logout_time = 5;
    if (has_last_logout_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_logout_time());
    }

    // optional uint32 level = 6;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional uint32 total_recharge = 7;
    if (has_total_recharge()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->total_recharge());
    }

    // optional uint32 gold = 8;
    if (has_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gold());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 silver = 9;
    if (has_silver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->silver());
    }

    // optional uint32 copper = 10;
    if (has_copper()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->copper());
    }

    // optional uint32 life_stone = 11;
    if (has_life_stone()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->life_stone());
    }

    // optional uint32 fighting = 12;
    if (has_fighting()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fighting());
    }

    // optional uint32 scene_id = 13;
    if (has_scene_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->scene_id());
    }

    // optional uint32 vip_level = 14;
    if (has_vip_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->vip_level());
    }

    // optional uint64 role_uid = 15;
    if (has_role_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_uid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mt_search_role_byname_reply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mt_search_role_byname_reply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mt_search_role_byname_reply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mt_search_role_byname_reply::MergeFrom(const mt_search_role_byname_reply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_did()) {
      set_role_did(from.role_did());
    }
    if (from.has_role_name()) {
      set_role_name(from.role_name());
    }
    if (from.has_create_time()) {
      set_create_time(from.create_time());
    }
    if (from.has_last_login_time()) {
      set_last_login_time(from.last_login_time());
    }
    if (from.has_last_logout_time()) {
      set_last_logout_time(from.last_logout_time());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_total_recharge()) {
      set_total_recharge(from.total_recharge());
    }
    if (from.has_gold()) {
      set_gold(from.gold());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_silver()) {
      set_silver(from.silver());
    }
    if (from.has_copper()) {
      set_copper(from.copper());
    }
    if (from.has_life_stone()) {
      set_life_stone(from.life_stone());
    }
    if (from.has_fighting()) {
      set_fighting(from.fighting());
    }
    if (from.has_scene_id()) {
      set_scene_id(from.scene_id());
    }
    if (from.has_vip_level()) {
      set_vip_level(from.vip_level());
    }
    if (from.has_role_uid()) {
      set_role_uid(from.role_uid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mt_search_role_byname_reply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mt_search_role_byname_reply::CopyFrom(const mt_search_role_byname_reply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mt_search_role_byname_reply::IsInitialized() const {

  return true;
}

void mt_search_role_byname_reply::Swap(mt_search_role_byname_reply* other) {
  if (other != this) {
    std::swap(role_did_, other->role_did_);
    std::swap(role_name_, other->role_name_);
    std::swap(create_time_, other->create_time_);
    std::swap(last_login_time_, other->last_login_time_);
    std::swap(last_logout_time_, other->last_logout_time_);
    std::swap(level_, other->level_);
    std::swap(total_recharge_, other->total_recharge_);
    std::swap(gold_, other->gold_);
    std::swap(silver_, other->silver_);
    std::swap(copper_, other->copper_);
    std::swap(life_stone_, other->life_stone_);
    std::swap(fighting_, other->fighting_);
    std::swap(scene_id_, other->scene_id_);
    std::swap(vip_level_, other->vip_level_);
    std::swap(role_uid_, other->role_uid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mt_search_role_byname_reply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mt_search_role_byname_reply_descriptor_;
  metadata.reflection = mt_search_role_byname_reply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mall_reload_xml_notify::kFieldFieldNumber;
const int mall_reload_xml_notify::kDestFieldNumber;
#endif  // !_MSC_VER

mall_reload_xml_notify::mall_reload_xml_notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void mall_reload_xml_notify::InitAsDefaultInstance() {
}

mall_reload_xml_notify::mall_reload_xml_notify(const mall_reload_xml_notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void mall_reload_xml_notify::SharedCtor() {
  _cached_size_ = 0;
  field_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  dest_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mall_reload_xml_notify::~mall_reload_xml_notify() {
  SharedDtor();
}

void mall_reload_xml_notify::SharedDtor() {
  if (field_ != &::google::protobuf::internal::kEmptyString) {
    delete field_;
  }
  if (dest_ != &::google::protobuf::internal::kEmptyString) {
    delete dest_;
  }
  if (this != default_instance_) {
  }
}

void mall_reload_xml_notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mall_reload_xml_notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mall_reload_xml_notify_descriptor_;
}

const mall_reload_xml_notify& mall_reload_xml_notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gm_2eproto();
  return *default_instance_;
}

mall_reload_xml_notify* mall_reload_xml_notify::default_instance_ = NULL;

mall_reload_xml_notify* mall_reload_xml_notify::New() const {
  return new mall_reload_xml_notify;
}

void mall_reload_xml_notify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_field()) {
      if (field_ != &::google::protobuf::internal::kEmptyString) {
        field_->clear();
      }
    }
    if (has_dest()) {
      if (dest_ != &::google::protobuf::internal::kEmptyString) {
        dest_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mall_reload_xml_notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string field = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_field()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->field().data(), this->field().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_dest;
        break;
      }

      // optional string dest = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dest:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dest()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->dest().data(), this->dest().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void mall_reload_xml_notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string field = 1;
  if (has_field()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->field().data(), this->field().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->field(), output);
  }

  // optional string dest = 2;
  if (has_dest()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dest().data(), this->dest().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->dest(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* mall_reload_xml_notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string field = 1;
  if (has_field()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->field().data(), this->field().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->field(), target);
  }

  // optional string dest = 2;
  if (has_dest()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dest().data(), this->dest().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->dest(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int mall_reload_xml_notify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string field = 1;
    if (has_field()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->field());
    }

    // optional string dest = 2;
    if (has_dest()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dest());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mall_reload_xml_notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mall_reload_xml_notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mall_reload_xml_notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mall_reload_xml_notify::MergeFrom(const mall_reload_xml_notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_field()) {
      set_field(from.field());
    }
    if (from.has_dest()) {
      set_dest(from.dest());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mall_reload_xml_notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mall_reload_xml_notify::CopyFrom(const mall_reload_xml_notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mall_reload_xml_notify::IsInitialized() const {

  return true;
}

void mall_reload_xml_notify::Swap(mall_reload_xml_notify* other) {
  if (other != this) {
    std::swap(field_, other->field_);
    std::swap(dest_, other->dest_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mall_reload_xml_notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mall_reload_xml_notify_descriptor_;
  metadata.reflection = mall_reload_xml_notify_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace gm
}  // namespace proto

// @@protoc_insertion_point(global_scope)
