// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gm_common.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "gm_common.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto {
namespace gm_common {

namespace {

const ::google::protobuf::Descriptor* user_base_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  user_base_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* recharge_count_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  recharge_count_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* recharge_single_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  recharge_single_reflection_ = NULL;
const ::google::protobuf::Descriptor* consume_record_data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  consume_record_data_reflection_ = NULL;
const ::google::protobuf::Descriptor* consume_record_single_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  consume_record_single_reflection_ = NULL;
const ::google::protobuf::Descriptor* item_data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  item_data_reflection_ = NULL;
const ::google::protobuf::Descriptor* item_single_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  item_single_reflection_ = NULL;
const ::google::protobuf::Descriptor* hero_data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  hero_data_reflection_ = NULL;
const ::google::protobuf::Descriptor* hero_single_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  hero_single_reflection_ = NULL;
const ::google::protobuf::Descriptor* skill_data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  skill_data_reflection_ = NULL;
const ::google::protobuf::Descriptor* skill_single_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  skill_single_reflection_ = NULL;
const ::google::protobuf::Descriptor* wear_equip_data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  wear_equip_data_reflection_ = NULL;
const ::google::protobuf::Descriptor* wear_equip_single_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  wear_equip_single_reflection_ = NULL;
const ::google::protobuf::Descriptor* equip_data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  equip_data_reflection_ = NULL;
const ::google::protobuf::Descriptor* equip_single_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  equip_single_reflection_ = NULL;
const ::google::protobuf::Descriptor* campaign_data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  campaign_data_reflection_ = NULL;
const ::google::protobuf::Descriptor* campaign_single_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  campaign_single_reflection_ = NULL;
const ::google::protobuf::Descriptor* matrix_data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  matrix_data_reflection_ = NULL;
const ::google::protobuf::Descriptor* matrix_single_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  matrix_single_reflection_ = NULL;
const ::google::protobuf::Descriptor* produce_data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  produce_data_reflection_ = NULL;
const ::google::protobuf::Descriptor* produce_single_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  produce_single_reflection_ = NULL;
const ::google::protobuf::Descriptor* manage_reply_single_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  manage_reply_single_reflection_ = NULL;
const ::google::protobuf::Descriptor* global_mail_single_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  global_mail_single_reflection_ = NULL;
const ::google::protobuf::Descriptor* mail_recv_limit_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mail_recv_limit_reflection_ = NULL;
const ::google::protobuf::Descriptor* ban_state_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ban_state_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* sign_record_single_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  sign_record_single_reflection_ = NULL;
const ::google::protobuf::Descriptor* draw_record_single_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  draw_record_single_reflection_ = NULL;
const ::google::protobuf::Descriptor* buy_record_single_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  buy_record_single_reflection_ = NULL;
const ::google::protobuf::Descriptor* shop_record_single_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  shop_record_single_reflection_ = NULL;
const ::google::protobuf::Descriptor* gm_notice_single_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gm_notice_single_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_gm_5fcommon_2eproto() {
  protobuf_AddDesc_gm_5fcommon_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "gm_common.proto");
  GOOGLE_CHECK(file != NULL);
  user_base_info_descriptor_ = file->message_type(0);
  static const int user_base_info_offsets_[17] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_base_info, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_base_info, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_base_info, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_base_info, gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_base_info, free_diamond_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_base_info, paid_diamond_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_base_info, ap_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_base_info, vip_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_base_info, vip_exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_base_info, create_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_base_info, last_login_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_base_info, user_uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_base_info, skill_point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_base_info, pve_badge_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_base_info, pvp_badge_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_base_info, fate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_base_info, account_idx_),
  };
  user_base_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      user_base_info_descriptor_,
      user_base_info::default_instance_,
      user_base_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_base_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_base_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(user_base_info));
  recharge_count_info_descriptor_ = file->message_type(1);
  static const int recharge_count_info_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(recharge_count_info, recharge_list_),
  };
  recharge_count_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      recharge_count_info_descriptor_,
      recharge_count_info::default_instance_,
      recharge_count_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(recharge_count_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(recharge_count_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(recharge_count_info));
  recharge_single_descriptor_ = file->message_type(2);
  static const int recharge_single_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(recharge_single, rmb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(recharge_single, paid_diamond_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(recharge_single, free_diamond_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(recharge_single, recharge_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(recharge_single, order_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(recharge_single, channel_),
  };
  recharge_single_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      recharge_single_descriptor_,
      recharge_single::default_instance_,
      recharge_single_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(recharge_single, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(recharge_single, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(recharge_single));
  consume_record_data_descriptor_ = file->message_type(3);
  static const int consume_record_data_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(consume_record_data, record_list_),
  };
  consume_record_data_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      consume_record_data_descriptor_,
      consume_record_data::default_instance_,
      consume_record_data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(consume_record_data, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(consume_record_data, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(consume_record_data));
  consume_record_single_descriptor_ = file->message_type(4);
  static const int consume_record_single_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(consume_record_single, diamond_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(consume_record_single, consume_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(consume_record_single, consume_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(consume_record_single, type_),
  };
  consume_record_single_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      consume_record_single_descriptor_,
      consume_record_single::default_instance_,
      consume_record_single_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(consume_record_single, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(consume_record_single, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(consume_record_single));
  item_data_descriptor_ = file->message_type(5);
  static const int item_data_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(item_data, item_list_),
  };
  item_data_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      item_data_descriptor_,
      item_data::default_instance_,
      item_data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(item_data, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(item_data, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(item_data));
  item_single_descriptor_ = file->message_type(6);
  static const int item_single_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(item_single, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(item_single, tid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(item_single, cur_num_),
  };
  item_single_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      item_single_descriptor_,
      item_single::default_instance_,
      item_single_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(item_single, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(item_single, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(item_single));
  hero_data_descriptor_ = file->message_type(7);
  static const int hero_data_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_data, hero_list_),
  };
  hero_data_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      hero_data_descriptor_,
      hero_data::default_instance_,
      hero_data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_data, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_data, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(hero_data));
  hero_single_descriptor_ = file->message_type(8);
  static const int hero_single_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_single, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_single, tid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_single, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_single, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_single, wear_equip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_single, hero_fragment_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_single, star_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_single, quality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_single, skill_),
  };
  hero_single_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      hero_single_descriptor_,
      hero_single::default_instance_,
      hero_single_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_single, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_single, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(hero_single));
  skill_data_descriptor_ = file->message_type(9);
  static const int skill_data_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(skill_data, skill_list_),
  };
  skill_data_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      skill_data_descriptor_,
      skill_data::default_instance_,
      skill_data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(skill_data, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(skill_data, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(skill_data));
  skill_single_descriptor_ = file->message_type(10);
  static const int skill_single_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(skill_single, tid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(skill_single, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(skill_single, type_),
  };
  skill_single_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      skill_single_descriptor_,
      skill_single::default_instance_,
      skill_single_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(skill_single, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(skill_single, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(skill_single));
  wear_equip_data_descriptor_ = file->message_type(11);
  static const int wear_equip_data_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wear_equip_data, wear_equip_list_),
  };
  wear_equip_data_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      wear_equip_data_descriptor_,
      wear_equip_data::default_instance_,
      wear_equip_data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wear_equip_data, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wear_equip_data, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(wear_equip_data));
  wear_equip_single_descriptor_ = file->message_type(12);
  static const int wear_equip_single_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wear_equip_single, tid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wear_equip_single, pos_),
  };
  wear_equip_single_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      wear_equip_single_descriptor_,
      wear_equip_single::default_instance_,
      wear_equip_single_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wear_equip_single, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wear_equip_single, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(wear_equip_single));
  equip_data_descriptor_ = file->message_type(13);
  static const int equip_data_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equip_data, equip_list_),
  };
  equip_data_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      equip_data_descriptor_,
      equip_data::default_instance_,
      equip_data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equip_data, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equip_data, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(equip_data));
  equip_single_descriptor_ = file->message_type(14);
  static const int equip_single_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equip_single, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equip_single, tid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equip_single, cur_num_),
  };
  equip_single_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      equip_single_descriptor_,
      equip_single::default_instance_,
      equip_single_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equip_single, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equip_single, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(equip_single));
  campaign_data_descriptor_ = file->message_type(15);
  static const int campaign_data_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(campaign_data, campaign_list_),
  };
  campaign_data_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      campaign_data_descriptor_,
      campaign_data::default_instance_,
      campaign_data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(campaign_data, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(campaign_data, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(campaign_data));
  campaign_single_descriptor_ = file->message_type(16);
  static const int campaign_single_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(campaign_single, campaign_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(campaign_single, pass_times_),
  };
  campaign_single_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      campaign_single_descriptor_,
      campaign_single::default_instance_,
      campaign_single_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(campaign_single, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(campaign_single, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(campaign_single));
  matrix_data_descriptor_ = file->message_type(17);
  static const int matrix_data_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(matrix_data, matrix_list_),
  };
  matrix_data_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      matrix_data_descriptor_,
      matrix_data::default_instance_,
      matrix_data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(matrix_data, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(matrix_data, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(matrix_data));
  matrix_single_descriptor_ = file->message_type(18);
  static const int matrix_single_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(matrix_single, matrix_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(matrix_single, pass_times_),
  };
  matrix_single_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      matrix_single_descriptor_,
      matrix_single::default_instance_,
      matrix_single_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(matrix_single, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(matrix_single, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(matrix_single));
  produce_data_descriptor_ = file->message_type(19);
  static const int produce_data_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(produce_data, produce_list_),
  };
  produce_data_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      produce_data_descriptor_,
      produce_data::default_instance_,
      produce_data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(produce_data, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(produce_data, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(produce_data));
  produce_single_descriptor_ = file->message_type(20);
  static const int produce_single_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(produce_single, produce_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(produce_single, pass_times_),
  };
  produce_single_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      produce_single_descriptor_,
      produce_single::default_instance_,
      produce_single_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(produce_single, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(produce_single, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(produce_single));
  manage_reply_single_descriptor_ = file->message_type(21);
  static const int manage_reply_single_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(manage_reply_single, role_uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(manage_reply_single, expired_time_),
  };
  manage_reply_single_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      manage_reply_single_descriptor_,
      manage_reply_single::default_instance_,
      manage_reply_single_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(manage_reply_single, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(manage_reply_single, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(manage_reply_single));
  global_mail_single_descriptor_ = file->message_type(22);
  static const int global_mail_single_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(global_mail_single, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(global_mail_single, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(global_mail_single, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(global_mail_single, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(global_mail_single, send_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(global_mail_single, send_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(global_mail_single, over_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(global_mail_single, send_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(global_mail_single, send_hour_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(global_mail_single, recv_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(global_mail_single, recv_did_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(global_mail_single, client_valid_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(global_mail_single, items_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(global_mail_single, limit_),
  };
  global_mail_single_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      global_mail_single_descriptor_,
      global_mail_single::default_instance_,
      global_mail_single_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(global_mail_single, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(global_mail_single, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(global_mail_single));
  mail_recv_limit_descriptor_ = file->message_type(23);
  static const int mail_recv_limit_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_recv_limit, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_recv_limit, regist_type_),
  };
  mail_recv_limit_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mail_recv_limit_descriptor_,
      mail_recv_limit::default_instance_,
      mail_recv_limit_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_recv_limit, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_recv_limit, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mail_recv_limit));
  ban_state_info_descriptor_ = file->message_type(24);
  static const int ban_state_info_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ban_state_info, user_uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ban_state_info, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ban_state_info, offset_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ban_state_info, end_time_),
  };
  ban_state_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ban_state_info_descriptor_,
      ban_state_info::default_instance_,
      ban_state_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ban_state_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ban_state_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ban_state_info));
  sign_record_single_descriptor_ = file->message_type(25);
  static const int sign_record_single_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sign_record_single, cur_sign_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sign_record_single, sign_time_),
  };
  sign_record_single_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      sign_record_single_descriptor_,
      sign_record_single::default_instance_,
      sign_record_single_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sign_record_single, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sign_record_single, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(sign_record_single));
  draw_record_single_descriptor_ = file->message_type(26);
  static const int draw_record_single_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(draw_record_single, draw_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(draw_record_single, draw_time_),
  };
  draw_record_single_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      draw_record_single_descriptor_,
      draw_record_single::default_instance_,
      draw_record_single_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(draw_record_single, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(draw_record_single, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(draw_record_single));
  buy_record_single_descriptor_ = file->message_type(27);
  static const int buy_record_single_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(buy_record_single, original_diamond_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(buy_record_single, cost_diamond_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(buy_record_single, cur_diamond_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(buy_record_single, buy_time_),
  };
  buy_record_single_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      buy_record_single_descriptor_,
      buy_record_single::default_instance_,
      buy_record_single_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(buy_record_single, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(buy_record_single, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(buy_record_single));
  shop_record_single_descriptor_ = file->message_type(28);
  static const int shop_record_single_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(shop_record_single, shop_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(shop_record_single, refresh_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(shop_record_single, buy_times_),
  };
  shop_record_single_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      shop_record_single_descriptor_,
      shop_record_single::default_instance_,
      shop_record_single_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(shop_record_single, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(shop_record_single, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(shop_record_single));
  gm_notice_single_descriptor_ = file->message_type(29);
  static const int gm_notice_single_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gm_notice_single, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gm_notice_single, tick_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gm_notice_single, start_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gm_notice_single, end_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gm_notice_single, last_send_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gm_notice_single, notice_),
  };
  gm_notice_single_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gm_notice_single_descriptor_,
      gm_notice_single::default_instance_,
      gm_notice_single_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gm_notice_single, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gm_notice_single, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gm_notice_single));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_gm_5fcommon_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    user_base_info_descriptor_, &user_base_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    recharge_count_info_descriptor_, &recharge_count_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    recharge_single_descriptor_, &recharge_single::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    consume_record_data_descriptor_, &consume_record_data::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    consume_record_single_descriptor_, &consume_record_single::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    item_data_descriptor_, &item_data::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    item_single_descriptor_, &item_single::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    hero_data_descriptor_, &hero_data::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    hero_single_descriptor_, &hero_single::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    skill_data_descriptor_, &skill_data::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    skill_single_descriptor_, &skill_single::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    wear_equip_data_descriptor_, &wear_equip_data::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    wear_equip_single_descriptor_, &wear_equip_single::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    equip_data_descriptor_, &equip_data::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    equip_single_descriptor_, &equip_single::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    campaign_data_descriptor_, &campaign_data::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    campaign_single_descriptor_, &campaign_single::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    matrix_data_descriptor_, &matrix_data::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    matrix_single_descriptor_, &matrix_single::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    produce_data_descriptor_, &produce_data::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    produce_single_descriptor_, &produce_single::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    manage_reply_single_descriptor_, &manage_reply_single::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    global_mail_single_descriptor_, &global_mail_single::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mail_recv_limit_descriptor_, &mail_recv_limit::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ban_state_info_descriptor_, &ban_state_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    sign_record_single_descriptor_, &sign_record_single::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    draw_record_single_descriptor_, &draw_record_single::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    buy_record_single_descriptor_, &buy_record_single::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    shop_record_single_descriptor_, &shop_record_single::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gm_notice_single_descriptor_, &gm_notice_single::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_gm_5fcommon_2eproto() {
  delete user_base_info::default_instance_;
  delete user_base_info_reflection_;
  delete recharge_count_info::default_instance_;
  delete recharge_count_info_reflection_;
  delete recharge_single::default_instance_;
  delete recharge_single_reflection_;
  delete consume_record_data::default_instance_;
  delete consume_record_data_reflection_;
  delete consume_record_single::default_instance_;
  delete consume_record_single_reflection_;
  delete item_data::default_instance_;
  delete item_data_reflection_;
  delete item_single::default_instance_;
  delete item_single_reflection_;
  delete hero_data::default_instance_;
  delete hero_data_reflection_;
  delete hero_single::default_instance_;
  delete hero_single_reflection_;
  delete skill_data::default_instance_;
  delete skill_data_reflection_;
  delete skill_single::default_instance_;
  delete skill_single_reflection_;
  delete wear_equip_data::default_instance_;
  delete wear_equip_data_reflection_;
  delete wear_equip_single::default_instance_;
  delete wear_equip_single_reflection_;
  delete equip_data::default_instance_;
  delete equip_data_reflection_;
  delete equip_single::default_instance_;
  delete equip_single_reflection_;
  delete campaign_data::default_instance_;
  delete campaign_data_reflection_;
  delete campaign_single::default_instance_;
  delete campaign_single_reflection_;
  delete matrix_data::default_instance_;
  delete matrix_data_reflection_;
  delete matrix_single::default_instance_;
  delete matrix_single_reflection_;
  delete produce_data::default_instance_;
  delete produce_data_reflection_;
  delete produce_single::default_instance_;
  delete produce_single_reflection_;
  delete manage_reply_single::default_instance_;
  delete manage_reply_single_reflection_;
  delete global_mail_single::default_instance_;
  delete global_mail_single_reflection_;
  delete mail_recv_limit::default_instance_;
  delete mail_recv_limit_reflection_;
  delete ban_state_info::default_instance_;
  delete ban_state_info_reflection_;
  delete sign_record_single::default_instance_;
  delete sign_record_single_reflection_;
  delete draw_record_single::default_instance_;
  delete draw_record_single_reflection_;
  delete buy_record_single::default_instance_;
  delete buy_record_single_reflection_;
  delete shop_record_single::default_instance_;
  delete shop_record_single_reflection_;
  delete gm_notice_single::default_instance_;
  delete gm_notice_single_reflection_;
}

void protobuf_AddDesc_gm_5fcommon_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017gm_common.proto\022\017proto.gm_common\"\302\002\n\016u"
    "ser_base_info\022\014\n\004name\030\001 \001(\t\022\r\n\005level\030\002 \001"
    "(\r\022\013\n\003exp\030\003 \001(\r\022\014\n\004gold\030\004 \001(\r\022\024\n\014free_di"
    "amond\030\005 \001(\r\022\024\n\014paid_diamond\030\006 \001(\r\022\n\n\002ap\030"
    "\007 \001(\r\022\021\n\tvip_level\030\010 \001(\r\022\017\n\007vip_exp\030\t \001("
    "\r\022\023\n\013create_time\030\n \001(\r\022\027\n\017last_login_tim"
    "e\030\013 \001(\r\022\020\n\010user_uid\030\014 \001(\004\022\023\n\013skill_point"
    "\030\r \001(\r\022\021\n\tpve_badge\030\016 \001(\r\022\021\n\tpvp_badge\030\017"
    " \001(\r\022\014\n\004fate\030\020 \001(\r\022\023\n\013account_idx\030\021 \001(\r\""
    "N\n\023recharge_count_info\0227\n\rrecharge_list\030"
    "\001 \003(\0132 .proto.gm_common.recharge_single\""
    "\204\001\n\017recharge_single\022\013\n\003rmb\030\001 \001(\r\022\024\n\014paid"
    "_diamond\030\002 \001(\r\022\024\n\014free_diamond\030\003 \001(\r\022\025\n\r"
    "recharge_time\030\004 \001(\r\022\020\n\010order_id\030\005 \001(\t\022\017\n"
    "\007channel\030\006 \001(\t\"R\n\023consume_record_data\022;\n"
    "\013record_list\030\001 \003(\0132&.proto.gm_common.con"
    "sume_record_single\"f\n\025consume_record_sin"
    "gle\022\024\n\014diamond_type\030\001 \001(\r\022\023\n\013consume_num"
    "\030\002 \001(\r\022\024\n\014consume_time\030\003 \001(\r\022\014\n\004type\030\004 \001"
    "(\r\"<\n\titem_data\022/\n\titem_list\030\001 \003(\0132\034.pro"
    "to.gm_common.item_single\"8\n\013item_single\022"
    "\013\n\003uid\030\001 \001(\t\022\013\n\003tid\030\002 \001(\r\022\017\n\007cur_num\030\003 \001"
    "(\r\"<\n\thero_data\022/\n\thero_list\030\001 \003(\0132\034.pro"
    "to.gm_common.hero_single\"\345\001\n\013hero_single"
    "\022\013\n\003uid\030\001 \001(\t\022\013\n\003tid\030\002 \001(\r\022\r\n\005level\030\003 \001("
    "\r\022\013\n\003exp\030\004 \001(\r\0224\n\nwear_equip\030\005 \001(\0132 .pro"
    "to.gm_common.wear_equip_data\022\031\n\021hero_fra"
    "gment_num\030\006 \001(\r\022\022\n\nstar_level\030\007 \001(\r\022\017\n\007q"
    "uality\030\010 \001(\r\022*\n\005skill\030\t \001(\0132\033.proto.gm_c"
    "ommon.skill_data\"\?\n\nskill_data\0221\n\nskill_"
    "list\030\001 \003(\0132\035.proto.gm_common.skill_singl"
    "e\"8\n\014skill_single\022\013\n\003tid\030\001 \001(\r\022\r\n\005level\030"
    "\002 \001(\r\022\014\n\004type\030\003 \001(\r\"N\n\017wear_equip_data\022;"
    "\n\017wear_equip_list\030\001 \003(\0132\".proto.gm_commo"
    "n.wear_equip_single\"-\n\021wear_equip_single"
    "\022\013\n\003tid\030\001 \001(\r\022\013\n\003pos\030\002 \001(\005\"\?\n\nequip_data"
    "\0221\n\nequip_list\030\001 \003(\0132\035.proto.gm_common.e"
    "quip_single\"9\n\014equip_single\022\013\n\003uid\030\001 \001(\t"
    "\022\013\n\003tid\030\002 \001(\005\022\017\n\007cur_num\030\003 \001(\005\"H\n\rcampai"
    "gn_data\0227\n\rcampaign_list\030\001 \003(\0132 .proto.g"
    "m_common.campaign_single\":\n\017campaign_sin"
    "gle\022\023\n\013campaign_id\030\001 \001(\r\022\022\n\npass_times\030\002"
    " \001(\r\"B\n\013matrix_data\0223\n\013matrix_list\030\001 \003(\013"
    "2\036.proto.gm_common.matrix_single\"6\n\rmatr"
    "ix_single\022\021\n\tmatrix_id\030\001 \001(\r\022\022\n\npass_tim"
    "es\030\002 \001(\r\"E\n\014produce_data\0225\n\014produce_list"
    "\030\001 \003(\0132\037.proto.gm_common.produce_single\""
    "8\n\016produce_single\022\022\n\nproduce_id\030\001 \001(\r\022\022\n"
    "\npass_times\030\002 \001(\r\"=\n\023manage_reply_single"
    "\022\020\n\010role_uid\030\001 \001(\t\022\024\n\014expired_time\030\003 \001(\r"
    "\"\263\002\n\022global_mail_single\022\013\n\003uid\030\001 \001(\004\022\014\n\004"
    "type\030\002 \001(\r\022\r\n\005title\030\003 \001(\t\022\017\n\007content\030\004 \001"
    "(\t\022\021\n\tsend_name\030\005 \001(\t\022\021\n\tsend_time\030\006 \001(\r"
    "\022\021\n\tover_time\030\007 \001(\r\022\021\n\tsend_type\030\010 \001(\r\022\021"
    "\n\tsend_hour\030\t \001(\r\022\021\n\trecv_type\030\n \001(\r\022\025\n\r"
    "recv_did_list\030\013 \003(\t\022\031\n\021client_valid_time"
    "\030\014 \001(\r\022\r\n\005items\030\r \001(\t\022/\n\005limit\030\016 \001(\0132 .p"
    "roto.gm_common.mail_recv_limit\"5\n\017mail_r"
    "ecv_limit\022\r\n\005level\030\001 \001(\005\022\023\n\013regist_type\030"
    "\002 \001(\005\"Z\n\016ban_state_info\022\020\n\010user_uid\030\001 \001("
    "\004\022\017\n\007account\030\002 \001(\t\022\023\n\013offset_time\030\003 \001(\005\022"
    "\020\n\010end_time\030\004 \001(\r\"\?\n\022sign_record_single\022"
    "\026\n\016cur_sign_times\030\001 \001(\r\022\021\n\tsign_time\030\002 \001"
    "(\r\":\n\022draw_record_single\022\021\n\tdraw_type\030\001 "
    "\001(\r\022\021\n\tdraw_time\030\002 \001(\r\"v\n\021buy_record_sin"
    "gle\022\034\n\024original_diamond_num\030\001 \001(\r\022\030\n\020cos"
    "t_diamond_num\030\002 \001(\r\022\027\n\017cur_diamond_num\030\003"
    " \001(\r\022\020\n\010buy_time\030\004 \001(\r\"Q\n\022shop_record_si"
    "ngle\022\021\n\tshop_type\030\001 \001(\r\022\025\n\rrefresh_times"
    "\030\002 \001(\r\022\021\n\tbuy_times\030\003 \001(\r\"|\n\020gm_notice_s"
    "ingle\022\014\n\004type\030\001 \001(\r\022\014\n\004tick\030\002 \001(\r\022\022\n\nsta"
    "rt_time\030\003 \001(\r\022\020\n\010end_time\030\004 \001(\r\022\026\n\016last_"
    "send_time\030\005 \001(\r\022\016\n\006notice\030\006 \001(\t", 2911);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "gm_common.proto", &protobuf_RegisterTypes);
  user_base_info::default_instance_ = new user_base_info();
  recharge_count_info::default_instance_ = new recharge_count_info();
  recharge_single::default_instance_ = new recharge_single();
  consume_record_data::default_instance_ = new consume_record_data();
  consume_record_single::default_instance_ = new consume_record_single();
  item_data::default_instance_ = new item_data();
  item_single::default_instance_ = new item_single();
  hero_data::default_instance_ = new hero_data();
  hero_single::default_instance_ = new hero_single();
  skill_data::default_instance_ = new skill_data();
  skill_single::default_instance_ = new skill_single();
  wear_equip_data::default_instance_ = new wear_equip_data();
  wear_equip_single::default_instance_ = new wear_equip_single();
  equip_data::default_instance_ = new equip_data();
  equip_single::default_instance_ = new equip_single();
  campaign_data::default_instance_ = new campaign_data();
  campaign_single::default_instance_ = new campaign_single();
  matrix_data::default_instance_ = new matrix_data();
  matrix_single::default_instance_ = new matrix_single();
  produce_data::default_instance_ = new produce_data();
  produce_single::default_instance_ = new produce_single();
  manage_reply_single::default_instance_ = new manage_reply_single();
  global_mail_single::default_instance_ = new global_mail_single();
  mail_recv_limit::default_instance_ = new mail_recv_limit();
  ban_state_info::default_instance_ = new ban_state_info();
  sign_record_single::default_instance_ = new sign_record_single();
  draw_record_single::default_instance_ = new draw_record_single();
  buy_record_single::default_instance_ = new buy_record_single();
  shop_record_single::default_instance_ = new shop_record_single();
  gm_notice_single::default_instance_ = new gm_notice_single();
  user_base_info::default_instance_->InitAsDefaultInstance();
  recharge_count_info::default_instance_->InitAsDefaultInstance();
  recharge_single::default_instance_->InitAsDefaultInstance();
  consume_record_data::default_instance_->InitAsDefaultInstance();
  consume_record_single::default_instance_->InitAsDefaultInstance();
  item_data::default_instance_->InitAsDefaultInstance();
  item_single::default_instance_->InitAsDefaultInstance();
  hero_data::default_instance_->InitAsDefaultInstance();
  hero_single::default_instance_->InitAsDefaultInstance();
  skill_data::default_instance_->InitAsDefaultInstance();
  skill_single::default_instance_->InitAsDefaultInstance();
  wear_equip_data::default_instance_->InitAsDefaultInstance();
  wear_equip_single::default_instance_->InitAsDefaultInstance();
  equip_data::default_instance_->InitAsDefaultInstance();
  equip_single::default_instance_->InitAsDefaultInstance();
  campaign_data::default_instance_->InitAsDefaultInstance();
  campaign_single::default_instance_->InitAsDefaultInstance();
  matrix_data::default_instance_->InitAsDefaultInstance();
  matrix_single::default_instance_->InitAsDefaultInstance();
  produce_data::default_instance_->InitAsDefaultInstance();
  produce_single::default_instance_->InitAsDefaultInstance();
  manage_reply_single::default_instance_->InitAsDefaultInstance();
  global_mail_single::default_instance_->InitAsDefaultInstance();
  mail_recv_limit::default_instance_->InitAsDefaultInstance();
  ban_state_info::default_instance_->InitAsDefaultInstance();
  sign_record_single::default_instance_->InitAsDefaultInstance();
  draw_record_single::default_instance_->InitAsDefaultInstance();
  buy_record_single::default_instance_->InitAsDefaultInstance();
  shop_record_single::default_instance_->InitAsDefaultInstance();
  gm_notice_single::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_gm_5fcommon_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_gm_5fcommon_2eproto {
  StaticDescriptorInitializer_gm_5fcommon_2eproto() {
    protobuf_AddDesc_gm_5fcommon_2eproto();
  }
} static_descriptor_initializer_gm_5fcommon_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int user_base_info::kNameFieldNumber;
const int user_base_info::kLevelFieldNumber;
const int user_base_info::kExpFieldNumber;
const int user_base_info::kGoldFieldNumber;
const int user_base_info::kFreeDiamondFieldNumber;
const int user_base_info::kPaidDiamondFieldNumber;
const int user_base_info::kApFieldNumber;
const int user_base_info::kVipLevelFieldNumber;
const int user_base_info::kVipExpFieldNumber;
const int user_base_info::kCreateTimeFieldNumber;
const int user_base_info::kLastLoginTimeFieldNumber;
const int user_base_info::kUserUidFieldNumber;
const int user_base_info::kSkillPointFieldNumber;
const int user_base_info::kPveBadgeFieldNumber;
const int user_base_info::kPvpBadgeFieldNumber;
const int user_base_info::kFateFieldNumber;
const int user_base_info::kAccountIdxFieldNumber;
#endif  // !_MSC_VER

user_base_info::user_base_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void user_base_info::InitAsDefaultInstance() {
}

user_base_info::user_base_info(const user_base_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void user_base_info::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  level_ = 0u;
  exp_ = 0u;
  gold_ = 0u;
  free_diamond_ = 0u;
  paid_diamond_ = 0u;
  ap_ = 0u;
  vip_level_ = 0u;
  vip_exp_ = 0u;
  create_time_ = 0u;
  last_login_time_ = 0u;
  user_uid_ = GOOGLE_ULONGLONG(0);
  skill_point_ = 0u;
  pve_badge_ = 0u;
  pvp_badge_ = 0u;
  fate_ = 0u;
  account_idx_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

user_base_info::~user_base_info() {
  SharedDtor();
}

void user_base_info::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void user_base_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* user_base_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return user_base_info_descriptor_;
}

const user_base_info& user_base_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gm_5fcommon_2eproto();
  return *default_instance_;
}

user_base_info* user_base_info::default_instance_ = NULL;

user_base_info* user_base_info::New() const {
  return new user_base_info;
}

void user_base_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    level_ = 0u;
    exp_ = 0u;
    gold_ = 0u;
    free_diamond_ = 0u;
    paid_diamond_ = 0u;
    ap_ = 0u;
    vip_level_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    vip_exp_ = 0u;
    create_time_ = 0u;
    last_login_time_ = 0u;
    user_uid_ = GOOGLE_ULONGLONG(0);
    skill_point_ = 0u;
    pve_badge_ = 0u;
    pvp_badge_ = 0u;
    fate_ = 0u;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    account_idx_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool user_base_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }

      // optional uint32 level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_exp;
        break;
      }

      // optional uint32 exp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_gold;
        break;
      }

      // optional uint32 gold = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gold_)));
          set_has_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_free_diamond;
        break;
      }

      // optional uint32 free_diamond = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_free_diamond:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &free_diamond_)));
          set_has_free_diamond();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_paid_diamond;
        break;
      }

      // optional uint32 paid_diamond = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_paid_diamond:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &paid_diamond_)));
          set_has_paid_diamond();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_ap;
        break;
      }

      // optional uint32 ap = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ap:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ap_)));
          set_has_ap();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_vip_level;
        break;
      }

      // optional uint32 vip_level = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vip_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vip_level_)));
          set_has_vip_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_vip_exp;
        break;
      }

      // optional uint32 vip_exp = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vip_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vip_exp_)));
          set_has_vip_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_create_time;
        break;
      }

      // optional uint32 create_time = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_create_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &create_time_)));
          set_has_create_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_last_login_time;
        break;
      }

      // optional uint32 last_login_time = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_login_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_login_time_)));
          set_has_last_login_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_user_uid;
        break;
      }

      // optional uint64 user_uid = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_user_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_uid_)));
          set_has_user_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_skill_point;
        break;
      }

      // optional uint32 skill_point = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skill_point:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skill_point_)));
          set_has_skill_point();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_pve_badge;
        break;
      }

      // optional uint32 pve_badge = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pve_badge:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pve_badge_)));
          set_has_pve_badge();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_pvp_badge;
        break;
      }

      // optional uint32 pvp_badge = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pvp_badge:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pvp_badge_)));
          set_has_pvp_badge();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_fate;
        break;
      }

      // optional uint32 fate = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fate_)));
          set_has_fate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_account_idx;
        break;
      }

      // optional uint32 account_idx = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_account_idx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_idx_)));
          set_has_account_idx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void user_base_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // optional uint32 level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->level(), output);
  }

  // optional uint32 exp = 3;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->exp(), output);
  }

  // optional uint32 gold = 4;
  if (has_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->gold(), output);
  }

  // optional uint32 free_diamond = 5;
  if (has_free_diamond()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->free_diamond(), output);
  }

  // optional uint32 paid_diamond = 6;
  if (has_paid_diamond()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->paid_diamond(), output);
  }

  // optional uint32 ap = 7;
  if (has_ap()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->ap(), output);
  }

  // optional uint32 vip_level = 8;
  if (has_vip_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->vip_level(), output);
  }

  // optional uint32 vip_exp = 9;
  if (has_vip_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->vip_exp(), output);
  }

  // optional uint32 create_time = 10;
  if (has_create_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->create_time(), output);
  }

  // optional uint32 last_login_time = 11;
  if (has_last_login_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->last_login_time(), output);
  }

  // optional uint64 user_uid = 12;
  if (has_user_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(12, this->user_uid(), output);
  }

  // optional uint32 skill_point = 13;
  if (has_skill_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->skill_point(), output);
  }

  // optional uint32 pve_badge = 14;
  if (has_pve_badge()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->pve_badge(), output);
  }

  // optional uint32 pvp_badge = 15;
  if (has_pvp_badge()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->pvp_badge(), output);
  }

  // optional uint32 fate = 16;
  if (has_fate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->fate(), output);
  }

  // optional uint32 account_idx = 17;
  if (has_account_idx()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->account_idx(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* user_base_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional uint32 level = 2;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->level(), target);
  }

  // optional uint32 exp = 3;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->exp(), target);
  }

  // optional uint32 gold = 4;
  if (has_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->gold(), target);
  }

  // optional uint32 free_diamond = 5;
  if (has_free_diamond()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->free_diamond(), target);
  }

  // optional uint32 paid_diamond = 6;
  if (has_paid_diamond()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->paid_diamond(), target);
  }

  // optional uint32 ap = 7;
  if (has_ap()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->ap(), target);
  }

  // optional uint32 vip_level = 8;
  if (has_vip_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->vip_level(), target);
  }

  // optional uint32 vip_exp = 9;
  if (has_vip_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->vip_exp(), target);
  }

  // optional uint32 create_time = 10;
  if (has_create_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->create_time(), target);
  }

  // optional uint32 last_login_time = 11;
  if (has_last_login_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->last_login_time(), target);
  }

  // optional uint64 user_uid = 12;
  if (has_user_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(12, this->user_uid(), target);
  }

  // optional uint32 skill_point = 13;
  if (has_skill_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->skill_point(), target);
  }

  // optional uint32 pve_badge = 14;
  if (has_pve_badge()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->pve_badge(), target);
  }

  // optional uint32 pvp_badge = 15;
  if (has_pvp_badge()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->pvp_badge(), target);
  }

  // optional uint32 fate = 16;
  if (has_fate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->fate(), target);
  }

  // optional uint32 account_idx = 17;
  if (has_account_idx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->account_idx(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int user_base_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional uint32 exp = 3;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->exp());
    }

    // optional uint32 gold = 4;
    if (has_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gold());
    }

    // optional uint32 free_diamond = 5;
    if (has_free_diamond()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->free_diamond());
    }

    // optional uint32 paid_diamond = 6;
    if (has_paid_diamond()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->paid_diamond());
    }

    // optional uint32 ap = 7;
    if (has_ap()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ap());
    }

    // optional uint32 vip_level = 8;
    if (has_vip_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->vip_level());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 vip_exp = 9;
    if (has_vip_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->vip_exp());
    }

    // optional uint32 create_time = 10;
    if (has_create_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->create_time());
    }

    // optional uint32 last_login_time = 11;
    if (has_last_login_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_login_time());
    }

    // optional uint64 user_uid = 12;
    if (has_user_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_uid());
    }

    // optional uint32 skill_point = 13;
    if (has_skill_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skill_point());
    }

    // optional uint32 pve_badge = 14;
    if (has_pve_badge()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pve_badge());
    }

    // optional uint32 pvp_badge = 15;
    if (has_pvp_badge()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pvp_badge());
    }

    // optional uint32 fate = 16;
    if (has_fate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fate());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint32 account_idx = 17;
    if (has_account_idx()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_idx());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void user_base_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const user_base_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const user_base_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void user_base_info::MergeFrom(const user_base_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_gold()) {
      set_gold(from.gold());
    }
    if (from.has_free_diamond()) {
      set_free_diamond(from.free_diamond());
    }
    if (from.has_paid_diamond()) {
      set_paid_diamond(from.paid_diamond());
    }
    if (from.has_ap()) {
      set_ap(from.ap());
    }
    if (from.has_vip_level()) {
      set_vip_level(from.vip_level());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_vip_exp()) {
      set_vip_exp(from.vip_exp());
    }
    if (from.has_create_time()) {
      set_create_time(from.create_time());
    }
    if (from.has_last_login_time()) {
      set_last_login_time(from.last_login_time());
    }
    if (from.has_user_uid()) {
      set_user_uid(from.user_uid());
    }
    if (from.has_skill_point()) {
      set_skill_point(from.skill_point());
    }
    if (from.has_pve_badge()) {
      set_pve_badge(from.pve_badge());
    }
    if (from.has_pvp_badge()) {
      set_pvp_badge(from.pvp_badge());
    }
    if (from.has_fate()) {
      set_fate(from.fate());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_account_idx()) {
      set_account_idx(from.account_idx());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void user_base_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void user_base_info::CopyFrom(const user_base_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool user_base_info::IsInitialized() const {

  return true;
}

void user_base_info::Swap(user_base_info* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(level_, other->level_);
    std::swap(exp_, other->exp_);
    std::swap(gold_, other->gold_);
    std::swap(free_diamond_, other->free_diamond_);
    std::swap(paid_diamond_, other->paid_diamond_);
    std::swap(ap_, other->ap_);
    std::swap(vip_level_, other->vip_level_);
    std::swap(vip_exp_, other->vip_exp_);
    std::swap(create_time_, other->create_time_);
    std::swap(last_login_time_, other->last_login_time_);
    std::swap(user_uid_, other->user_uid_);
    std::swap(skill_point_, other->skill_point_);
    std::swap(pve_badge_, other->pve_badge_);
    std::swap(pvp_badge_, other->pvp_badge_);
    std::swap(fate_, other->fate_);
    std::swap(account_idx_, other->account_idx_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata user_base_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = user_base_info_descriptor_;
  metadata.reflection = user_base_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int recharge_count_info::kRechargeListFieldNumber;
#endif  // !_MSC_VER

recharge_count_info::recharge_count_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void recharge_count_info::InitAsDefaultInstance() {
}

recharge_count_info::recharge_count_info(const recharge_count_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void recharge_count_info::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

recharge_count_info::~recharge_count_info() {
  SharedDtor();
}

void recharge_count_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void recharge_count_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* recharge_count_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return recharge_count_info_descriptor_;
}

const recharge_count_info& recharge_count_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gm_5fcommon_2eproto();
  return *default_instance_;
}

recharge_count_info* recharge_count_info::default_instance_ = NULL;

recharge_count_info* recharge_count_info::New() const {
  return new recharge_count_info;
}

void recharge_count_info::Clear() {
  recharge_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool recharge_count_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.gm_common.recharge_single recharge_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_recharge_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_recharge_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_recharge_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void recharge_count_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto.gm_common.recharge_single recharge_list = 1;
  for (int i = 0; i < this->recharge_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->recharge_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* recharge_count_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto.gm_common.recharge_single recharge_list = 1;
  for (int i = 0; i < this->recharge_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->recharge_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int recharge_count_info::ByteSize() const {
  int total_size = 0;

  // repeated .proto.gm_common.recharge_single recharge_list = 1;
  total_size += 1 * this->recharge_list_size();
  for (int i = 0; i < this->recharge_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->recharge_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void recharge_count_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const recharge_count_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const recharge_count_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void recharge_count_info::MergeFrom(const recharge_count_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  recharge_list_.MergeFrom(from.recharge_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void recharge_count_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void recharge_count_info::CopyFrom(const recharge_count_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool recharge_count_info::IsInitialized() const {

  return true;
}

void recharge_count_info::Swap(recharge_count_info* other) {
  if (other != this) {
    recharge_list_.Swap(&other->recharge_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata recharge_count_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = recharge_count_info_descriptor_;
  metadata.reflection = recharge_count_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int recharge_single::kRmbFieldNumber;
const int recharge_single::kPaidDiamondFieldNumber;
const int recharge_single::kFreeDiamondFieldNumber;
const int recharge_single::kRechargeTimeFieldNumber;
const int recharge_single::kOrderIdFieldNumber;
const int recharge_single::kChannelFieldNumber;
#endif  // !_MSC_VER

recharge_single::recharge_single()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void recharge_single::InitAsDefaultInstance() {
}

recharge_single::recharge_single(const recharge_single& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void recharge_single::SharedCtor() {
  _cached_size_ = 0;
  rmb_ = 0u;
  paid_diamond_ = 0u;
  free_diamond_ = 0u;
  recharge_time_ = 0u;
  order_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  channel_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

recharge_single::~recharge_single() {
  SharedDtor();
}

void recharge_single::SharedDtor() {
  if (order_id_ != &::google::protobuf::internal::kEmptyString) {
    delete order_id_;
  }
  if (channel_ != &::google::protobuf::internal::kEmptyString) {
    delete channel_;
  }
  if (this != default_instance_) {
  }
}

void recharge_single::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* recharge_single::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return recharge_single_descriptor_;
}

const recharge_single& recharge_single::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gm_5fcommon_2eproto();
  return *default_instance_;
}

recharge_single* recharge_single::default_instance_ = NULL;

recharge_single* recharge_single::New() const {
  return new recharge_single;
}

void recharge_single::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rmb_ = 0u;
    paid_diamond_ = 0u;
    free_diamond_ = 0u;
    recharge_time_ = 0u;
    if (has_order_id()) {
      if (order_id_ != &::google::protobuf::internal::kEmptyString) {
        order_id_->clear();
      }
    }
    if (has_channel()) {
      if (channel_ != &::google::protobuf::internal::kEmptyString) {
        channel_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool recharge_single::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 rmb = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rmb_)));
          set_has_rmb();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_paid_diamond;
        break;
      }

      // optional uint32 paid_diamond = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_paid_diamond:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &paid_diamond_)));
          set_has_paid_diamond();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_free_diamond;
        break;
      }

      // optional uint32 free_diamond = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_free_diamond:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &free_diamond_)));
          set_has_free_diamond();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_recharge_time;
        break;
      }

      // optional uint32 recharge_time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_recharge_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &recharge_time_)));
          set_has_recharge_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_order_id;
        break;
      }

      // optional string order_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_order_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_order_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->order_id().data(), this->order_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_channel;
        break;
      }

      // optional string channel = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_channel:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_channel()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->channel().data(), this->channel().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void recharge_single::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 rmb = 1;
  if (has_rmb()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->rmb(), output);
  }

  // optional uint32 paid_diamond = 2;
  if (has_paid_diamond()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->paid_diamond(), output);
  }

  // optional uint32 free_diamond = 3;
  if (has_free_diamond()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->free_diamond(), output);
  }

  // optional uint32 recharge_time = 4;
  if (has_recharge_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->recharge_time(), output);
  }

  // optional string order_id = 5;
  if (has_order_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->order_id().data(), this->order_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->order_id(), output);
  }

  // optional string channel = 6;
  if (has_channel()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->channel().data(), this->channel().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->channel(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* recharge_single::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 rmb = 1;
  if (has_rmb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->rmb(), target);
  }

  // optional uint32 paid_diamond = 2;
  if (has_paid_diamond()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->paid_diamond(), target);
  }

  // optional uint32 free_diamond = 3;
  if (has_free_diamond()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->free_diamond(), target);
  }

  // optional uint32 recharge_time = 4;
  if (has_recharge_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->recharge_time(), target);
  }

  // optional string order_id = 5;
  if (has_order_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->order_id().data(), this->order_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->order_id(), target);
  }

  // optional string channel = 6;
  if (has_channel()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->channel().data(), this->channel().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->channel(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int recharge_single::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 rmb = 1;
    if (has_rmb()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rmb());
    }

    // optional uint32 paid_diamond = 2;
    if (has_paid_diamond()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->paid_diamond());
    }

    // optional uint32 free_diamond = 3;
    if (has_free_diamond()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->free_diamond());
    }

    // optional uint32 recharge_time = 4;
    if (has_recharge_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->recharge_time());
    }

    // optional string order_id = 5;
    if (has_order_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->order_id());
    }

    // optional string channel = 6;
    if (has_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->channel());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void recharge_single::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const recharge_single* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const recharge_single*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void recharge_single::MergeFrom(const recharge_single& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rmb()) {
      set_rmb(from.rmb());
    }
    if (from.has_paid_diamond()) {
      set_paid_diamond(from.paid_diamond());
    }
    if (from.has_free_diamond()) {
      set_free_diamond(from.free_diamond());
    }
    if (from.has_recharge_time()) {
      set_recharge_time(from.recharge_time());
    }
    if (from.has_order_id()) {
      set_order_id(from.order_id());
    }
    if (from.has_channel()) {
      set_channel(from.channel());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void recharge_single::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void recharge_single::CopyFrom(const recharge_single& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool recharge_single::IsInitialized() const {

  return true;
}

void recharge_single::Swap(recharge_single* other) {
  if (other != this) {
    std::swap(rmb_, other->rmb_);
    std::swap(paid_diamond_, other->paid_diamond_);
    std::swap(free_diamond_, other->free_diamond_);
    std::swap(recharge_time_, other->recharge_time_);
    std::swap(order_id_, other->order_id_);
    std::swap(channel_, other->channel_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata recharge_single::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = recharge_single_descriptor_;
  metadata.reflection = recharge_single_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int consume_record_data::kRecordListFieldNumber;
#endif  // !_MSC_VER

consume_record_data::consume_record_data()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void consume_record_data::InitAsDefaultInstance() {
}

consume_record_data::consume_record_data(const consume_record_data& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void consume_record_data::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

consume_record_data::~consume_record_data() {
  SharedDtor();
}

void consume_record_data::SharedDtor() {
  if (this != default_instance_) {
  }
}

void consume_record_data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* consume_record_data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return consume_record_data_descriptor_;
}

const consume_record_data& consume_record_data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gm_5fcommon_2eproto();
  return *default_instance_;
}

consume_record_data* consume_record_data::default_instance_ = NULL;

consume_record_data* consume_record_data::New() const {
  return new consume_record_data;
}

void consume_record_data::Clear() {
  record_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool consume_record_data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.gm_common.consume_record_single record_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_record_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_record_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_record_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void consume_record_data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto.gm_common.consume_record_single record_list = 1;
  for (int i = 0; i < this->record_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->record_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* consume_record_data::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto.gm_common.consume_record_single record_list = 1;
  for (int i = 0; i < this->record_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->record_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int consume_record_data::ByteSize() const {
  int total_size = 0;

  // repeated .proto.gm_common.consume_record_single record_list = 1;
  total_size += 1 * this->record_list_size();
  for (int i = 0; i < this->record_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->record_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void consume_record_data::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const consume_record_data* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const consume_record_data*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void consume_record_data::MergeFrom(const consume_record_data& from) {
  GOOGLE_CHECK_NE(&from, this);
  record_list_.MergeFrom(from.record_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void consume_record_data::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void consume_record_data::CopyFrom(const consume_record_data& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool consume_record_data::IsInitialized() const {

  return true;
}

void consume_record_data::Swap(consume_record_data* other) {
  if (other != this) {
    record_list_.Swap(&other->record_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata consume_record_data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = consume_record_data_descriptor_;
  metadata.reflection = consume_record_data_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int consume_record_single::kDiamondTypeFieldNumber;
const int consume_record_single::kConsumeNumFieldNumber;
const int consume_record_single::kConsumeTimeFieldNumber;
const int consume_record_single::kTypeFieldNumber;
#endif  // !_MSC_VER

consume_record_single::consume_record_single()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void consume_record_single::InitAsDefaultInstance() {
}

consume_record_single::consume_record_single(const consume_record_single& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void consume_record_single::SharedCtor() {
  _cached_size_ = 0;
  diamond_type_ = 0u;
  consume_num_ = 0u;
  consume_time_ = 0u;
  type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

consume_record_single::~consume_record_single() {
  SharedDtor();
}

void consume_record_single::SharedDtor() {
  if (this != default_instance_) {
  }
}

void consume_record_single::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* consume_record_single::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return consume_record_single_descriptor_;
}

const consume_record_single& consume_record_single::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gm_5fcommon_2eproto();
  return *default_instance_;
}

consume_record_single* consume_record_single::default_instance_ = NULL;

consume_record_single* consume_record_single::New() const {
  return new consume_record_single;
}

void consume_record_single::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    diamond_type_ = 0u;
    consume_num_ = 0u;
    consume_time_ = 0u;
    type_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool consume_record_single::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 diamond_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &diamond_type_)));
          set_has_diamond_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_consume_num;
        break;
      }

      // optional uint32 consume_num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_consume_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &consume_num_)));
          set_has_consume_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_consume_time;
        break;
      }

      // optional uint32 consume_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_consume_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &consume_time_)));
          set_has_consume_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_type;
        break;
      }

      // optional uint32 type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void consume_record_single::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 diamond_type = 1;
  if (has_diamond_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->diamond_type(), output);
  }

  // optional uint32 consume_num = 2;
  if (has_consume_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->consume_num(), output);
  }

  // optional uint32 consume_time = 3;
  if (has_consume_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->consume_time(), output);
  }

  // optional uint32 type = 4;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* consume_record_single::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 diamond_type = 1;
  if (has_diamond_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->diamond_type(), target);
  }

  // optional uint32 consume_num = 2;
  if (has_consume_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->consume_num(), target);
  }

  // optional uint32 consume_time = 3;
  if (has_consume_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->consume_time(), target);
  }

  // optional uint32 type = 4;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int consume_record_single::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 diamond_type = 1;
    if (has_diamond_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->diamond_type());
    }

    // optional uint32 consume_num = 2;
    if (has_consume_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->consume_num());
    }

    // optional uint32 consume_time = 3;
    if (has_consume_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->consume_time());
    }

    // optional uint32 type = 4;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void consume_record_single::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const consume_record_single* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const consume_record_single*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void consume_record_single::MergeFrom(const consume_record_single& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_diamond_type()) {
      set_diamond_type(from.diamond_type());
    }
    if (from.has_consume_num()) {
      set_consume_num(from.consume_num());
    }
    if (from.has_consume_time()) {
      set_consume_time(from.consume_time());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void consume_record_single::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void consume_record_single::CopyFrom(const consume_record_single& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool consume_record_single::IsInitialized() const {

  return true;
}

void consume_record_single::Swap(consume_record_single* other) {
  if (other != this) {
    std::swap(diamond_type_, other->diamond_type_);
    std::swap(consume_num_, other->consume_num_);
    std::swap(consume_time_, other->consume_time_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata consume_record_single::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = consume_record_single_descriptor_;
  metadata.reflection = consume_record_single_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int item_data::kItemListFieldNumber;
#endif  // !_MSC_VER

item_data::item_data()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void item_data::InitAsDefaultInstance() {
}

item_data::item_data(const item_data& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void item_data::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

item_data::~item_data() {
  SharedDtor();
}

void item_data::SharedDtor() {
  if (this != default_instance_) {
  }
}

void item_data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* item_data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return item_data_descriptor_;
}

const item_data& item_data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gm_5fcommon_2eproto();
  return *default_instance_;
}

item_data* item_data::default_instance_ = NULL;

item_data* item_data::New() const {
  return new item_data;
}

void item_data::Clear() {
  item_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool item_data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.gm_common.item_single item_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_item_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void item_data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto.gm_common.item_single item_list = 1;
  for (int i = 0; i < this->item_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->item_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* item_data::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto.gm_common.item_single item_list = 1;
  for (int i = 0; i < this->item_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->item_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int item_data::ByteSize() const {
  int total_size = 0;

  // repeated .proto.gm_common.item_single item_list = 1;
  total_size += 1 * this->item_list_size();
  for (int i = 0; i < this->item_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void item_data::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const item_data* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const item_data*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void item_data::MergeFrom(const item_data& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_list_.MergeFrom(from.item_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void item_data::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void item_data::CopyFrom(const item_data& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool item_data::IsInitialized() const {

  return true;
}

void item_data::Swap(item_data* other) {
  if (other != this) {
    item_list_.Swap(&other->item_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata item_data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = item_data_descriptor_;
  metadata.reflection = item_data_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int item_single::kUidFieldNumber;
const int item_single::kTidFieldNumber;
const int item_single::kCurNumFieldNumber;
#endif  // !_MSC_VER

item_single::item_single()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void item_single::InitAsDefaultInstance() {
}

item_single::item_single(const item_single& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void item_single::SharedCtor() {
  _cached_size_ = 0;
  uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  tid_ = 0u;
  cur_num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

item_single::~item_single() {
  SharedDtor();
}

void item_single::SharedDtor() {
  if (uid_ != &::google::protobuf::internal::kEmptyString) {
    delete uid_;
  }
  if (this != default_instance_) {
  }
}

void item_single::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* item_single::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return item_single_descriptor_;
}

const item_single& item_single::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gm_5fcommon_2eproto();
  return *default_instance_;
}

item_single* item_single::default_instance_ = NULL;

item_single* item_single::New() const {
  return new item_single;
}

void item_single::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_uid()) {
      if (uid_ != &::google::protobuf::internal::kEmptyString) {
        uid_->clear();
      }
    }
    tid_ = 0u;
    cur_num_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool item_single::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->uid().data(), this->uid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_tid;
        break;
      }

      // optional uint32 tid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tid_)));
          set_has_tid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_cur_num;
        break;
      }

      // optional uint32 cur_num = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cur_num_)));
          set_has_cur_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void item_single::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uid().data(), this->uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->uid(), output);
  }

  // optional uint32 tid = 2;
  if (has_tid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->tid(), output);
  }

  // optional uint32 cur_num = 3;
  if (has_cur_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->cur_num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* item_single::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uid().data(), this->uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->uid(), target);
  }

  // optional uint32 tid = 2;
  if (has_tid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->tid(), target);
  }

  // optional uint32 cur_num = 3;
  if (has_cur_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->cur_num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int item_single::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uid());
    }

    // optional uint32 tid = 2;
    if (has_tid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tid());
    }

    // optional uint32 cur_num = 3;
    if (has_cur_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cur_num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void item_single::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const item_single* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const item_single*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void item_single::MergeFrom(const item_single& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_tid()) {
      set_tid(from.tid());
    }
    if (from.has_cur_num()) {
      set_cur_num(from.cur_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void item_single::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void item_single::CopyFrom(const item_single& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool item_single::IsInitialized() const {

  return true;
}

void item_single::Swap(item_single* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(tid_, other->tid_);
    std::swap(cur_num_, other->cur_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata item_single::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = item_single_descriptor_;
  metadata.reflection = item_single_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int hero_data::kHeroListFieldNumber;
#endif  // !_MSC_VER

hero_data::hero_data()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void hero_data::InitAsDefaultInstance() {
}

hero_data::hero_data(const hero_data& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void hero_data::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

hero_data::~hero_data() {
  SharedDtor();
}

void hero_data::SharedDtor() {
  if (this != default_instance_) {
  }
}

void hero_data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* hero_data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return hero_data_descriptor_;
}

const hero_data& hero_data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gm_5fcommon_2eproto();
  return *default_instance_;
}

hero_data* hero_data::default_instance_ = NULL;

hero_data* hero_data::New() const {
  return new hero_data;
}

void hero_data::Clear() {
  hero_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool hero_data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.gm_common.hero_single hero_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hero_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_hero_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_hero_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void hero_data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto.gm_common.hero_single hero_list = 1;
  for (int i = 0; i < this->hero_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->hero_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* hero_data::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto.gm_common.hero_single hero_list = 1;
  for (int i = 0; i < this->hero_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->hero_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int hero_data::ByteSize() const {
  int total_size = 0;

  // repeated .proto.gm_common.hero_single hero_list = 1;
  total_size += 1 * this->hero_list_size();
  for (int i = 0; i < this->hero_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->hero_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void hero_data::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const hero_data* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const hero_data*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void hero_data::MergeFrom(const hero_data& from) {
  GOOGLE_CHECK_NE(&from, this);
  hero_list_.MergeFrom(from.hero_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void hero_data::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void hero_data::CopyFrom(const hero_data& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool hero_data::IsInitialized() const {

  return true;
}

void hero_data::Swap(hero_data* other) {
  if (other != this) {
    hero_list_.Swap(&other->hero_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata hero_data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = hero_data_descriptor_;
  metadata.reflection = hero_data_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int hero_single::kUidFieldNumber;
const int hero_single::kTidFieldNumber;
const int hero_single::kLevelFieldNumber;
const int hero_single::kExpFieldNumber;
const int hero_single::kWearEquipFieldNumber;
const int hero_single::kHeroFragmentNumFieldNumber;
const int hero_single::kStarLevelFieldNumber;
const int hero_single::kQualityFieldNumber;
const int hero_single::kSkillFieldNumber;
#endif  // !_MSC_VER

hero_single::hero_single()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void hero_single::InitAsDefaultInstance() {
  wear_equip_ = const_cast< ::proto::gm_common::wear_equip_data*>(&::proto::gm_common::wear_equip_data::default_instance());
  skill_ = const_cast< ::proto::gm_common::skill_data*>(&::proto::gm_common::skill_data::default_instance());
}

hero_single::hero_single(const hero_single& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void hero_single::SharedCtor() {
  _cached_size_ = 0;
  uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  tid_ = 0u;
  level_ = 0u;
  exp_ = 0u;
  wear_equip_ = NULL;
  hero_fragment_num_ = 0u;
  star_level_ = 0u;
  quality_ = 0u;
  skill_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

hero_single::~hero_single() {
  SharedDtor();
}

void hero_single::SharedDtor() {
  if (uid_ != &::google::protobuf::internal::kEmptyString) {
    delete uid_;
  }
  if (this != default_instance_) {
    delete wear_equip_;
    delete skill_;
  }
}

void hero_single::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* hero_single::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return hero_single_descriptor_;
}

const hero_single& hero_single::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gm_5fcommon_2eproto();
  return *default_instance_;
}

hero_single* hero_single::default_instance_ = NULL;

hero_single* hero_single::New() const {
  return new hero_single;
}

void hero_single::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_uid()) {
      if (uid_ != &::google::protobuf::internal::kEmptyString) {
        uid_->clear();
      }
    }
    tid_ = 0u;
    level_ = 0u;
    exp_ = 0u;
    if (has_wear_equip()) {
      if (wear_equip_ != NULL) wear_equip_->::proto::gm_common::wear_equip_data::Clear();
    }
    hero_fragment_num_ = 0u;
    star_level_ = 0u;
    quality_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_skill()) {
      if (skill_ != NULL) skill_->::proto::gm_common::skill_data::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool hero_single::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->uid().data(), this->uid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_tid;
        break;
      }

      // optional uint32 tid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tid_)));
          set_has_tid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_level;
        break;
      }

      // optional uint32 level = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_exp;
        break;
      }

      // optional uint32 exp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_wear_equip;
        break;
      }

      // optional .proto.gm_common.wear_equip_data wear_equip = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_wear_equip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_wear_equip()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_hero_fragment_num;
        break;
      }

      // optional uint32 hero_fragment_num = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hero_fragment_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hero_fragment_num_)));
          set_has_hero_fragment_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_star_level;
        break;
      }

      // optional uint32 star_level = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_star_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &star_level_)));
          set_has_star_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_quality;
        break;
      }

      // optional uint32 quality = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_quality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &quality_)));
          set_has_quality();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_skill;
        break;
      }

      // optional .proto.gm_common.skill_data skill = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_skill:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_skill()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void hero_single::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uid().data(), this->uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->uid(), output);
  }

  // optional uint32 tid = 2;
  if (has_tid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->tid(), output);
  }

  // optional uint32 level = 3;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->level(), output);
  }

  // optional uint32 exp = 4;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->exp(), output);
  }

  // optional .proto.gm_common.wear_equip_data wear_equip = 5;
  if (has_wear_equip()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->wear_equip(), output);
  }

  // optional uint32 hero_fragment_num = 6;
  if (has_hero_fragment_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->hero_fragment_num(), output);
  }

  // optional uint32 star_level = 7;
  if (has_star_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->star_level(), output);
  }

  // optional uint32 quality = 8;
  if (has_quality()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->quality(), output);
  }

  // optional .proto.gm_common.skill_data skill = 9;
  if (has_skill()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->skill(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* hero_single::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uid().data(), this->uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->uid(), target);
  }

  // optional uint32 tid = 2;
  if (has_tid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->tid(), target);
  }

  // optional uint32 level = 3;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->level(), target);
  }

  // optional uint32 exp = 4;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->exp(), target);
  }

  // optional .proto.gm_common.wear_equip_data wear_equip = 5;
  if (has_wear_equip()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->wear_equip(), target);
  }

  // optional uint32 hero_fragment_num = 6;
  if (has_hero_fragment_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->hero_fragment_num(), target);
  }

  // optional uint32 star_level = 7;
  if (has_star_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->star_level(), target);
  }

  // optional uint32 quality = 8;
  if (has_quality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->quality(), target);
  }

  // optional .proto.gm_common.skill_data skill = 9;
  if (has_skill()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->skill(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int hero_single::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uid());
    }

    // optional uint32 tid = 2;
    if (has_tid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tid());
    }

    // optional uint32 level = 3;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional uint32 exp = 4;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->exp());
    }

    // optional .proto.gm_common.wear_equip_data wear_equip = 5;
    if (has_wear_equip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->wear_equip());
    }

    // optional uint32 hero_fragment_num = 6;
    if (has_hero_fragment_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hero_fragment_num());
    }

    // optional uint32 star_level = 7;
    if (has_star_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->star_level());
    }

    // optional uint32 quality = 8;
    if (has_quality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->quality());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .proto.gm_common.skill_data skill = 9;
    if (has_skill()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->skill());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void hero_single::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const hero_single* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const hero_single*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void hero_single::MergeFrom(const hero_single& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_tid()) {
      set_tid(from.tid());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_wear_equip()) {
      mutable_wear_equip()->::proto::gm_common::wear_equip_data::MergeFrom(from.wear_equip());
    }
    if (from.has_hero_fragment_num()) {
      set_hero_fragment_num(from.hero_fragment_num());
    }
    if (from.has_star_level()) {
      set_star_level(from.star_level());
    }
    if (from.has_quality()) {
      set_quality(from.quality());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_skill()) {
      mutable_skill()->::proto::gm_common::skill_data::MergeFrom(from.skill());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void hero_single::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void hero_single::CopyFrom(const hero_single& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool hero_single::IsInitialized() const {

  return true;
}

void hero_single::Swap(hero_single* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(tid_, other->tid_);
    std::swap(level_, other->level_);
    std::swap(exp_, other->exp_);
    std::swap(wear_equip_, other->wear_equip_);
    std::swap(hero_fragment_num_, other->hero_fragment_num_);
    std::swap(star_level_, other->star_level_);
    std::swap(quality_, other->quality_);
    std::swap(skill_, other->skill_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata hero_single::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = hero_single_descriptor_;
  metadata.reflection = hero_single_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int skill_data::kSkillListFieldNumber;
#endif  // !_MSC_VER

skill_data::skill_data()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void skill_data::InitAsDefaultInstance() {
}

skill_data::skill_data(const skill_data& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void skill_data::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

skill_data::~skill_data() {
  SharedDtor();
}

void skill_data::SharedDtor() {
  if (this != default_instance_) {
  }
}

void skill_data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* skill_data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return skill_data_descriptor_;
}

const skill_data& skill_data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gm_5fcommon_2eproto();
  return *default_instance_;
}

skill_data* skill_data::default_instance_ = NULL;

skill_data* skill_data::New() const {
  return new skill_data;
}

void skill_data::Clear() {
  skill_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool skill_data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.gm_common.skill_single skill_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_skill_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_skill_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_skill_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void skill_data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto.gm_common.skill_single skill_list = 1;
  for (int i = 0; i < this->skill_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->skill_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* skill_data::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto.gm_common.skill_single skill_list = 1;
  for (int i = 0; i < this->skill_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->skill_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int skill_data::ByteSize() const {
  int total_size = 0;

  // repeated .proto.gm_common.skill_single skill_list = 1;
  total_size += 1 * this->skill_list_size();
  for (int i = 0; i < this->skill_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->skill_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void skill_data::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const skill_data* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const skill_data*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void skill_data::MergeFrom(const skill_data& from) {
  GOOGLE_CHECK_NE(&from, this);
  skill_list_.MergeFrom(from.skill_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void skill_data::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void skill_data::CopyFrom(const skill_data& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool skill_data::IsInitialized() const {

  return true;
}

void skill_data::Swap(skill_data* other) {
  if (other != this) {
    skill_list_.Swap(&other->skill_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata skill_data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = skill_data_descriptor_;
  metadata.reflection = skill_data_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int skill_single::kTidFieldNumber;
const int skill_single::kLevelFieldNumber;
const int skill_single::kTypeFieldNumber;
#endif  // !_MSC_VER

skill_single::skill_single()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void skill_single::InitAsDefaultInstance() {
}

skill_single::skill_single(const skill_single& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void skill_single::SharedCtor() {
  _cached_size_ = 0;
  tid_ = 0u;
  level_ = 0u;
  type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

skill_single::~skill_single() {
  SharedDtor();
}

void skill_single::SharedDtor() {
  if (this != default_instance_) {
  }
}

void skill_single::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* skill_single::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return skill_single_descriptor_;
}

const skill_single& skill_single::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gm_5fcommon_2eproto();
  return *default_instance_;
}

skill_single* skill_single::default_instance_ = NULL;

skill_single* skill_single::New() const {
  return new skill_single;
}

void skill_single::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tid_ = 0u;
    level_ = 0u;
    type_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool skill_single::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 tid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tid_)));
          set_has_tid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }

      // optional uint32 level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // optional uint32 type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void skill_single::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 tid = 1;
  if (has_tid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->tid(), output);
  }

  // optional uint32 level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->level(), output);
  }

  // optional uint32 type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* skill_single::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 tid = 1;
  if (has_tid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->tid(), target);
  }

  // optional uint32 level = 2;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->level(), target);
  }

  // optional uint32 type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int skill_single::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 tid = 1;
    if (has_tid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tid());
    }

    // optional uint32 level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional uint32 type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void skill_single::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const skill_single* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const skill_single*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void skill_single::MergeFrom(const skill_single& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tid()) {
      set_tid(from.tid());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void skill_single::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void skill_single::CopyFrom(const skill_single& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool skill_single::IsInitialized() const {

  return true;
}

void skill_single::Swap(skill_single* other) {
  if (other != this) {
    std::swap(tid_, other->tid_);
    std::swap(level_, other->level_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata skill_single::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = skill_single_descriptor_;
  metadata.reflection = skill_single_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int wear_equip_data::kWearEquipListFieldNumber;
#endif  // !_MSC_VER

wear_equip_data::wear_equip_data()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void wear_equip_data::InitAsDefaultInstance() {
}

wear_equip_data::wear_equip_data(const wear_equip_data& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void wear_equip_data::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

wear_equip_data::~wear_equip_data() {
  SharedDtor();
}

void wear_equip_data::SharedDtor() {
  if (this != default_instance_) {
  }
}

void wear_equip_data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* wear_equip_data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return wear_equip_data_descriptor_;
}

const wear_equip_data& wear_equip_data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gm_5fcommon_2eproto();
  return *default_instance_;
}

wear_equip_data* wear_equip_data::default_instance_ = NULL;

wear_equip_data* wear_equip_data::New() const {
  return new wear_equip_data;
}

void wear_equip_data::Clear() {
  wear_equip_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool wear_equip_data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.gm_common.wear_equip_single wear_equip_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_wear_equip_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_wear_equip_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_wear_equip_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void wear_equip_data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto.gm_common.wear_equip_single wear_equip_list = 1;
  for (int i = 0; i < this->wear_equip_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->wear_equip_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* wear_equip_data::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto.gm_common.wear_equip_single wear_equip_list = 1;
  for (int i = 0; i < this->wear_equip_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->wear_equip_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int wear_equip_data::ByteSize() const {
  int total_size = 0;

  // repeated .proto.gm_common.wear_equip_single wear_equip_list = 1;
  total_size += 1 * this->wear_equip_list_size();
  for (int i = 0; i < this->wear_equip_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->wear_equip_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void wear_equip_data::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const wear_equip_data* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const wear_equip_data*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void wear_equip_data::MergeFrom(const wear_equip_data& from) {
  GOOGLE_CHECK_NE(&from, this);
  wear_equip_list_.MergeFrom(from.wear_equip_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void wear_equip_data::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void wear_equip_data::CopyFrom(const wear_equip_data& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool wear_equip_data::IsInitialized() const {

  return true;
}

void wear_equip_data::Swap(wear_equip_data* other) {
  if (other != this) {
    wear_equip_list_.Swap(&other->wear_equip_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata wear_equip_data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = wear_equip_data_descriptor_;
  metadata.reflection = wear_equip_data_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int wear_equip_single::kTidFieldNumber;
const int wear_equip_single::kPosFieldNumber;
#endif  // !_MSC_VER

wear_equip_single::wear_equip_single()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void wear_equip_single::InitAsDefaultInstance() {
}

wear_equip_single::wear_equip_single(const wear_equip_single& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void wear_equip_single::SharedCtor() {
  _cached_size_ = 0;
  tid_ = 0u;
  pos_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

wear_equip_single::~wear_equip_single() {
  SharedDtor();
}

void wear_equip_single::SharedDtor() {
  if (this != default_instance_) {
  }
}

void wear_equip_single::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* wear_equip_single::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return wear_equip_single_descriptor_;
}

const wear_equip_single& wear_equip_single::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gm_5fcommon_2eproto();
  return *default_instance_;
}

wear_equip_single* wear_equip_single::default_instance_ = NULL;

wear_equip_single* wear_equip_single::New() const {
  return new wear_equip_single;
}

void wear_equip_single::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tid_ = 0u;
    pos_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool wear_equip_single::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 tid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tid_)));
          set_has_tid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_pos;
        break;
      }

      // optional int32 pos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void wear_equip_single::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 tid = 1;
  if (has_tid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->tid(), output);
  }

  // optional int32 pos = 2;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->pos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* wear_equip_single::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 tid = 1;
  if (has_tid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->tid(), target);
  }

  // optional int32 pos = 2;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->pos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int wear_equip_single::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 tid = 1;
    if (has_tid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tid());
    }

    // optional int32 pos = 2;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void wear_equip_single::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const wear_equip_single* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const wear_equip_single*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void wear_equip_single::MergeFrom(const wear_equip_single& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tid()) {
      set_tid(from.tid());
    }
    if (from.has_pos()) {
      set_pos(from.pos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void wear_equip_single::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void wear_equip_single::CopyFrom(const wear_equip_single& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool wear_equip_single::IsInitialized() const {

  return true;
}

void wear_equip_single::Swap(wear_equip_single* other) {
  if (other != this) {
    std::swap(tid_, other->tid_);
    std::swap(pos_, other->pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata wear_equip_single::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = wear_equip_single_descriptor_;
  metadata.reflection = wear_equip_single_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int equip_data::kEquipListFieldNumber;
#endif  // !_MSC_VER

equip_data::equip_data()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void equip_data::InitAsDefaultInstance() {
}

equip_data::equip_data(const equip_data& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void equip_data::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

equip_data::~equip_data() {
  SharedDtor();
}

void equip_data::SharedDtor() {
  if (this != default_instance_) {
  }
}

void equip_data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* equip_data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return equip_data_descriptor_;
}

const equip_data& equip_data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gm_5fcommon_2eproto();
  return *default_instance_;
}

equip_data* equip_data::default_instance_ = NULL;

equip_data* equip_data::New() const {
  return new equip_data;
}

void equip_data::Clear() {
  equip_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool equip_data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.gm_common.equip_single equip_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equip_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_equip_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_equip_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void equip_data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto.gm_common.equip_single equip_list = 1;
  for (int i = 0; i < this->equip_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->equip_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* equip_data::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto.gm_common.equip_single equip_list = 1;
  for (int i = 0; i < this->equip_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->equip_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int equip_data::ByteSize() const {
  int total_size = 0;

  // repeated .proto.gm_common.equip_single equip_list = 1;
  total_size += 1 * this->equip_list_size();
  for (int i = 0; i < this->equip_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->equip_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void equip_data::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const equip_data* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const equip_data*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void equip_data::MergeFrom(const equip_data& from) {
  GOOGLE_CHECK_NE(&from, this);
  equip_list_.MergeFrom(from.equip_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void equip_data::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void equip_data::CopyFrom(const equip_data& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool equip_data::IsInitialized() const {

  return true;
}

void equip_data::Swap(equip_data* other) {
  if (other != this) {
    equip_list_.Swap(&other->equip_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata equip_data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = equip_data_descriptor_;
  metadata.reflection = equip_data_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int equip_single::kUidFieldNumber;
const int equip_single::kTidFieldNumber;
const int equip_single::kCurNumFieldNumber;
#endif  // !_MSC_VER

equip_single::equip_single()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void equip_single::InitAsDefaultInstance() {
}

equip_single::equip_single(const equip_single& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void equip_single::SharedCtor() {
  _cached_size_ = 0;
  uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  tid_ = 0;
  cur_num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

equip_single::~equip_single() {
  SharedDtor();
}

void equip_single::SharedDtor() {
  if (uid_ != &::google::protobuf::internal::kEmptyString) {
    delete uid_;
  }
  if (this != default_instance_) {
  }
}

void equip_single::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* equip_single::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return equip_single_descriptor_;
}

const equip_single& equip_single::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gm_5fcommon_2eproto();
  return *default_instance_;
}

equip_single* equip_single::default_instance_ = NULL;

equip_single* equip_single::New() const {
  return new equip_single;
}

void equip_single::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_uid()) {
      if (uid_ != &::google::protobuf::internal::kEmptyString) {
        uid_->clear();
      }
    }
    tid_ = 0;
    cur_num_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool equip_single::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->uid().data(), this->uid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_tid;
        break;
      }

      // optional int32 tid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tid_)));
          set_has_tid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_cur_num;
        break;
      }

      // optional int32 cur_num = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cur_num_)));
          set_has_cur_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void equip_single::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uid().data(), this->uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->uid(), output);
  }

  // optional int32 tid = 2;
  if (has_tid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->tid(), output);
  }

  // optional int32 cur_num = 3;
  if (has_cur_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->cur_num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* equip_single::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uid().data(), this->uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->uid(), target);
  }

  // optional int32 tid = 2;
  if (has_tid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->tid(), target);
  }

  // optional int32 cur_num = 3;
  if (has_cur_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->cur_num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int equip_single::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uid());
    }

    // optional int32 tid = 2;
    if (has_tid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tid());
    }

    // optional int32 cur_num = 3;
    if (has_cur_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cur_num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void equip_single::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const equip_single* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const equip_single*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void equip_single::MergeFrom(const equip_single& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_tid()) {
      set_tid(from.tid());
    }
    if (from.has_cur_num()) {
      set_cur_num(from.cur_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void equip_single::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void equip_single::CopyFrom(const equip_single& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool equip_single::IsInitialized() const {

  return true;
}

void equip_single::Swap(equip_single* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(tid_, other->tid_);
    std::swap(cur_num_, other->cur_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata equip_single::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = equip_single_descriptor_;
  metadata.reflection = equip_single_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int campaign_data::kCampaignListFieldNumber;
#endif  // !_MSC_VER

campaign_data::campaign_data()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void campaign_data::InitAsDefaultInstance() {
}

campaign_data::campaign_data(const campaign_data& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void campaign_data::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

campaign_data::~campaign_data() {
  SharedDtor();
}

void campaign_data::SharedDtor() {
  if (this != default_instance_) {
  }
}

void campaign_data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* campaign_data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return campaign_data_descriptor_;
}

const campaign_data& campaign_data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gm_5fcommon_2eproto();
  return *default_instance_;
}

campaign_data* campaign_data::default_instance_ = NULL;

campaign_data* campaign_data::New() const {
  return new campaign_data;
}

void campaign_data::Clear() {
  campaign_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool campaign_data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.gm_common.campaign_single campaign_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_campaign_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_campaign_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_campaign_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void campaign_data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto.gm_common.campaign_single campaign_list = 1;
  for (int i = 0; i < this->campaign_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->campaign_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* campaign_data::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto.gm_common.campaign_single campaign_list = 1;
  for (int i = 0; i < this->campaign_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->campaign_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int campaign_data::ByteSize() const {
  int total_size = 0;

  // repeated .proto.gm_common.campaign_single campaign_list = 1;
  total_size += 1 * this->campaign_list_size();
  for (int i = 0; i < this->campaign_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->campaign_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void campaign_data::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const campaign_data* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const campaign_data*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void campaign_data::MergeFrom(const campaign_data& from) {
  GOOGLE_CHECK_NE(&from, this);
  campaign_list_.MergeFrom(from.campaign_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void campaign_data::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void campaign_data::CopyFrom(const campaign_data& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool campaign_data::IsInitialized() const {

  return true;
}

void campaign_data::Swap(campaign_data* other) {
  if (other != this) {
    campaign_list_.Swap(&other->campaign_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata campaign_data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = campaign_data_descriptor_;
  metadata.reflection = campaign_data_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int campaign_single::kCampaignIdFieldNumber;
const int campaign_single::kPassTimesFieldNumber;
#endif  // !_MSC_VER

campaign_single::campaign_single()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void campaign_single::InitAsDefaultInstance() {
}

campaign_single::campaign_single(const campaign_single& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void campaign_single::SharedCtor() {
  _cached_size_ = 0;
  campaign_id_ = 0u;
  pass_times_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

campaign_single::~campaign_single() {
  SharedDtor();
}

void campaign_single::SharedDtor() {
  if (this != default_instance_) {
  }
}

void campaign_single::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* campaign_single::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return campaign_single_descriptor_;
}

const campaign_single& campaign_single::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gm_5fcommon_2eproto();
  return *default_instance_;
}

campaign_single* campaign_single::default_instance_ = NULL;

campaign_single* campaign_single::New() const {
  return new campaign_single;
}

void campaign_single::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    campaign_id_ = 0u;
    pass_times_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool campaign_single::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 campaign_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &campaign_id_)));
          set_has_campaign_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_pass_times;
        break;
      }

      // optional uint32 pass_times = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pass_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pass_times_)));
          set_has_pass_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void campaign_single::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 campaign_id = 1;
  if (has_campaign_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->campaign_id(), output);
  }

  // optional uint32 pass_times = 2;
  if (has_pass_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->pass_times(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* campaign_single::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 campaign_id = 1;
  if (has_campaign_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->campaign_id(), target);
  }

  // optional uint32 pass_times = 2;
  if (has_pass_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->pass_times(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int campaign_single::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 campaign_id = 1;
    if (has_campaign_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->campaign_id());
    }

    // optional uint32 pass_times = 2;
    if (has_pass_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pass_times());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void campaign_single::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const campaign_single* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const campaign_single*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void campaign_single::MergeFrom(const campaign_single& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_campaign_id()) {
      set_campaign_id(from.campaign_id());
    }
    if (from.has_pass_times()) {
      set_pass_times(from.pass_times());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void campaign_single::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void campaign_single::CopyFrom(const campaign_single& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool campaign_single::IsInitialized() const {

  return true;
}

void campaign_single::Swap(campaign_single* other) {
  if (other != this) {
    std::swap(campaign_id_, other->campaign_id_);
    std::swap(pass_times_, other->pass_times_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata campaign_single::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = campaign_single_descriptor_;
  metadata.reflection = campaign_single_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int matrix_data::kMatrixListFieldNumber;
#endif  // !_MSC_VER

matrix_data::matrix_data()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void matrix_data::InitAsDefaultInstance() {
}

matrix_data::matrix_data(const matrix_data& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void matrix_data::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

matrix_data::~matrix_data() {
  SharedDtor();
}

void matrix_data::SharedDtor() {
  if (this != default_instance_) {
  }
}

void matrix_data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* matrix_data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return matrix_data_descriptor_;
}

const matrix_data& matrix_data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gm_5fcommon_2eproto();
  return *default_instance_;
}

matrix_data* matrix_data::default_instance_ = NULL;

matrix_data* matrix_data::New() const {
  return new matrix_data;
}

void matrix_data::Clear() {
  matrix_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool matrix_data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.gm_common.matrix_single matrix_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_matrix_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_matrix_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_matrix_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void matrix_data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto.gm_common.matrix_single matrix_list = 1;
  for (int i = 0; i < this->matrix_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->matrix_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* matrix_data::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto.gm_common.matrix_single matrix_list = 1;
  for (int i = 0; i < this->matrix_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->matrix_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int matrix_data::ByteSize() const {
  int total_size = 0;

  // repeated .proto.gm_common.matrix_single matrix_list = 1;
  total_size += 1 * this->matrix_list_size();
  for (int i = 0; i < this->matrix_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->matrix_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void matrix_data::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const matrix_data* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const matrix_data*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void matrix_data::MergeFrom(const matrix_data& from) {
  GOOGLE_CHECK_NE(&from, this);
  matrix_list_.MergeFrom(from.matrix_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void matrix_data::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void matrix_data::CopyFrom(const matrix_data& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool matrix_data::IsInitialized() const {

  return true;
}

void matrix_data::Swap(matrix_data* other) {
  if (other != this) {
    matrix_list_.Swap(&other->matrix_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata matrix_data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = matrix_data_descriptor_;
  metadata.reflection = matrix_data_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int matrix_single::kMatrixIdFieldNumber;
const int matrix_single::kPassTimesFieldNumber;
#endif  // !_MSC_VER

matrix_single::matrix_single()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void matrix_single::InitAsDefaultInstance() {
}

matrix_single::matrix_single(const matrix_single& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void matrix_single::SharedCtor() {
  _cached_size_ = 0;
  matrix_id_ = 0u;
  pass_times_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

matrix_single::~matrix_single() {
  SharedDtor();
}

void matrix_single::SharedDtor() {
  if (this != default_instance_) {
  }
}

void matrix_single::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* matrix_single::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return matrix_single_descriptor_;
}

const matrix_single& matrix_single::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gm_5fcommon_2eproto();
  return *default_instance_;
}

matrix_single* matrix_single::default_instance_ = NULL;

matrix_single* matrix_single::New() const {
  return new matrix_single;
}

void matrix_single::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    matrix_id_ = 0u;
    pass_times_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool matrix_single::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 matrix_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &matrix_id_)));
          set_has_matrix_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_pass_times;
        break;
      }

      // optional uint32 pass_times = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pass_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pass_times_)));
          set_has_pass_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void matrix_single::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 matrix_id = 1;
  if (has_matrix_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->matrix_id(), output);
  }

  // optional uint32 pass_times = 2;
  if (has_pass_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->pass_times(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* matrix_single::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 matrix_id = 1;
  if (has_matrix_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->matrix_id(), target);
  }

  // optional uint32 pass_times = 2;
  if (has_pass_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->pass_times(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int matrix_single::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 matrix_id = 1;
    if (has_matrix_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->matrix_id());
    }

    // optional uint32 pass_times = 2;
    if (has_pass_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pass_times());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void matrix_single::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const matrix_single* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const matrix_single*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void matrix_single::MergeFrom(const matrix_single& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_matrix_id()) {
      set_matrix_id(from.matrix_id());
    }
    if (from.has_pass_times()) {
      set_pass_times(from.pass_times());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void matrix_single::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void matrix_single::CopyFrom(const matrix_single& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool matrix_single::IsInitialized() const {

  return true;
}

void matrix_single::Swap(matrix_single* other) {
  if (other != this) {
    std::swap(matrix_id_, other->matrix_id_);
    std::swap(pass_times_, other->pass_times_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata matrix_single::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = matrix_single_descriptor_;
  metadata.reflection = matrix_single_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int produce_data::kProduceListFieldNumber;
#endif  // !_MSC_VER

produce_data::produce_data()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void produce_data::InitAsDefaultInstance() {
}

produce_data::produce_data(const produce_data& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void produce_data::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

produce_data::~produce_data() {
  SharedDtor();
}

void produce_data::SharedDtor() {
  if (this != default_instance_) {
  }
}

void produce_data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* produce_data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return produce_data_descriptor_;
}

const produce_data& produce_data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gm_5fcommon_2eproto();
  return *default_instance_;
}

produce_data* produce_data::default_instance_ = NULL;

produce_data* produce_data::New() const {
  return new produce_data;
}

void produce_data::Clear() {
  produce_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool produce_data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.gm_common.produce_single produce_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_produce_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_produce_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_produce_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void produce_data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto.gm_common.produce_single produce_list = 1;
  for (int i = 0; i < this->produce_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->produce_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* produce_data::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto.gm_common.produce_single produce_list = 1;
  for (int i = 0; i < this->produce_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->produce_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int produce_data::ByteSize() const {
  int total_size = 0;

  // repeated .proto.gm_common.produce_single produce_list = 1;
  total_size += 1 * this->produce_list_size();
  for (int i = 0; i < this->produce_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->produce_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void produce_data::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const produce_data* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const produce_data*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void produce_data::MergeFrom(const produce_data& from) {
  GOOGLE_CHECK_NE(&from, this);
  produce_list_.MergeFrom(from.produce_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void produce_data::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void produce_data::CopyFrom(const produce_data& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool produce_data::IsInitialized() const {

  return true;
}

void produce_data::Swap(produce_data* other) {
  if (other != this) {
    produce_list_.Swap(&other->produce_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata produce_data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = produce_data_descriptor_;
  metadata.reflection = produce_data_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int produce_single::kProduceIdFieldNumber;
const int produce_single::kPassTimesFieldNumber;
#endif  // !_MSC_VER

produce_single::produce_single()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void produce_single::InitAsDefaultInstance() {
}

produce_single::produce_single(const produce_single& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void produce_single::SharedCtor() {
  _cached_size_ = 0;
  produce_id_ = 0u;
  pass_times_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

produce_single::~produce_single() {
  SharedDtor();
}

void produce_single::SharedDtor() {
  if (this != default_instance_) {
  }
}

void produce_single::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* produce_single::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return produce_single_descriptor_;
}

const produce_single& produce_single::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gm_5fcommon_2eproto();
  return *default_instance_;
}

produce_single* produce_single::default_instance_ = NULL;

produce_single* produce_single::New() const {
  return new produce_single;
}

void produce_single::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    produce_id_ = 0u;
    pass_times_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool produce_single::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 produce_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &produce_id_)));
          set_has_produce_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_pass_times;
        break;
      }

      // optional uint32 pass_times = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pass_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pass_times_)));
          set_has_pass_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void produce_single::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 produce_id = 1;
  if (has_produce_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->produce_id(), output);
  }

  // optional uint32 pass_times = 2;
  if (has_pass_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->pass_times(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* produce_single::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 produce_id = 1;
  if (has_produce_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->produce_id(), target);
  }

  // optional uint32 pass_times = 2;
  if (has_pass_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->pass_times(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int produce_single::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 produce_id = 1;
    if (has_produce_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->produce_id());
    }

    // optional uint32 pass_times = 2;
    if (has_pass_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pass_times());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void produce_single::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const produce_single* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const produce_single*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void produce_single::MergeFrom(const produce_single& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_produce_id()) {
      set_produce_id(from.produce_id());
    }
    if (from.has_pass_times()) {
      set_pass_times(from.pass_times());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void produce_single::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void produce_single::CopyFrom(const produce_single& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool produce_single::IsInitialized() const {

  return true;
}

void produce_single::Swap(produce_single* other) {
  if (other != this) {
    std::swap(produce_id_, other->produce_id_);
    std::swap(pass_times_, other->pass_times_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata produce_single::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = produce_single_descriptor_;
  metadata.reflection = produce_single_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int manage_reply_single::kRoleUidFieldNumber;
const int manage_reply_single::kExpiredTimeFieldNumber;
#endif  // !_MSC_VER

manage_reply_single::manage_reply_single()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void manage_reply_single::InitAsDefaultInstance() {
}

manage_reply_single::manage_reply_single(const manage_reply_single& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void manage_reply_single::SharedCtor() {
  _cached_size_ = 0;
  role_uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  expired_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

manage_reply_single::~manage_reply_single() {
  SharedDtor();
}

void manage_reply_single::SharedDtor() {
  if (role_uid_ != &::google::protobuf::internal::kEmptyString) {
    delete role_uid_;
  }
  if (this != default_instance_) {
  }
}

void manage_reply_single::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* manage_reply_single::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return manage_reply_single_descriptor_;
}

const manage_reply_single& manage_reply_single::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gm_5fcommon_2eproto();
  return *default_instance_;
}

manage_reply_single* manage_reply_single::default_instance_ = NULL;

manage_reply_single* manage_reply_single::New() const {
  return new manage_reply_single;
}

void manage_reply_single::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_role_uid()) {
      if (role_uid_ != &::google::protobuf::internal::kEmptyString) {
        role_uid_->clear();
      }
    }
    expired_time_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool manage_reply_single::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string role_uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_role_uid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->role_uid().data(), this->role_uid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_expired_time;
        break;
      }

      // optional uint32 expired_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_expired_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &expired_time_)));
          set_has_expired_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void manage_reply_single::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string role_uid = 1;
  if (has_role_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_uid().data(), this->role_uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->role_uid(), output);
  }

  // optional uint32 expired_time = 3;
  if (has_expired_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->expired_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* manage_reply_single::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string role_uid = 1;
  if (has_role_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_uid().data(), this->role_uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->role_uid(), target);
  }

  // optional uint32 expired_time = 3;
  if (has_expired_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->expired_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int manage_reply_single::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string role_uid = 1;
    if (has_role_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->role_uid());
    }

    // optional uint32 expired_time = 3;
    if (has_expired_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->expired_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void manage_reply_single::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const manage_reply_single* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const manage_reply_single*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void manage_reply_single::MergeFrom(const manage_reply_single& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_uid()) {
      set_role_uid(from.role_uid());
    }
    if (from.has_expired_time()) {
      set_expired_time(from.expired_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void manage_reply_single::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void manage_reply_single::CopyFrom(const manage_reply_single& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool manage_reply_single::IsInitialized() const {

  return true;
}

void manage_reply_single::Swap(manage_reply_single* other) {
  if (other != this) {
    std::swap(role_uid_, other->role_uid_);
    std::swap(expired_time_, other->expired_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata manage_reply_single::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = manage_reply_single_descriptor_;
  metadata.reflection = manage_reply_single_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int global_mail_single::kUidFieldNumber;
const int global_mail_single::kTypeFieldNumber;
const int global_mail_single::kTitleFieldNumber;
const int global_mail_single::kContentFieldNumber;
const int global_mail_single::kSendNameFieldNumber;
const int global_mail_single::kSendTimeFieldNumber;
const int global_mail_single::kOverTimeFieldNumber;
const int global_mail_single::kSendTypeFieldNumber;
const int global_mail_single::kSendHourFieldNumber;
const int global_mail_single::kRecvTypeFieldNumber;
const int global_mail_single::kRecvDidListFieldNumber;
const int global_mail_single::kClientValidTimeFieldNumber;
const int global_mail_single::kItemsFieldNumber;
const int global_mail_single::kLimitFieldNumber;
#endif  // !_MSC_VER

global_mail_single::global_mail_single()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void global_mail_single::InitAsDefaultInstance() {
  limit_ = const_cast< ::proto::gm_common::mail_recv_limit*>(&::proto::gm_common::mail_recv_limit::default_instance());
}

global_mail_single::global_mail_single(const global_mail_single& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void global_mail_single::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_ULONGLONG(0);
  type_ = 0u;
  title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  send_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  send_time_ = 0u;
  over_time_ = 0u;
  send_type_ = 0u;
  send_hour_ = 0u;
  recv_type_ = 0u;
  client_valid_time_ = 0u;
  items_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  limit_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

global_mail_single::~global_mail_single() {
  SharedDtor();
}

void global_mail_single::SharedDtor() {
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    delete title_;
  }
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (send_name_ != &::google::protobuf::internal::kEmptyString) {
    delete send_name_;
  }
  if (items_ != &::google::protobuf::internal::kEmptyString) {
    delete items_;
  }
  if (this != default_instance_) {
    delete limit_;
  }
}

void global_mail_single::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* global_mail_single::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return global_mail_single_descriptor_;
}

const global_mail_single& global_mail_single::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gm_5fcommon_2eproto();
  return *default_instance_;
}

global_mail_single* global_mail_single::default_instance_ = NULL;

global_mail_single* global_mail_single::New() const {
  return new global_mail_single;
}

void global_mail_single::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = GOOGLE_ULONGLONG(0);
    type_ = 0u;
    if (has_title()) {
      if (title_ != &::google::protobuf::internal::kEmptyString) {
        title_->clear();
      }
    }
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::kEmptyString) {
        content_->clear();
      }
    }
    if (has_send_name()) {
      if (send_name_ != &::google::protobuf::internal::kEmptyString) {
        send_name_->clear();
      }
    }
    send_time_ = 0u;
    over_time_ = 0u;
    send_type_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    send_hour_ = 0u;
    recv_type_ = 0u;
    client_valid_time_ = 0u;
    if (has_items()) {
      if (items_ != &::google::protobuf::internal::kEmptyString) {
        items_->clear();
      }
    }
    if (has_limit()) {
      if (limit_ != NULL) limit_->::proto::gm_common::mail_recv_limit::Clear();
    }
  }
  recv_did_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool global_mail_single::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional uint32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_title;
        break;
      }

      // optional string title = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->title().data(), this->title().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_content;
        break;
      }

      // optional string content = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_send_name;
        break;
      }

      // optional string send_name = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_send_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_send_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->send_name().data(), this->send_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_send_time;
        break;
      }

      // optional uint32 send_time = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_send_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &send_time_)));
          set_has_send_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_over_time;
        break;
      }

      // optional uint32 over_time = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_over_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &over_time_)));
          set_has_over_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_send_type;
        break;
      }

      // optional uint32 send_type = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_send_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &send_type_)));
          set_has_send_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_send_hour;
        break;
      }

      // optional uint32 send_hour = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_send_hour:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &send_hour_)));
          set_has_send_hour();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_recv_type;
        break;
      }

      // optional uint32 recv_type = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_recv_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &recv_type_)));
          set_has_recv_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_recv_did_list;
        break;
      }

      // repeated string recv_did_list = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_recv_did_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_recv_did_list()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->recv_did_list(this->recv_did_list_size() - 1).data(),
            this->recv_did_list(this->recv_did_list_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_recv_did_list;
        if (input->ExpectTag(96)) goto parse_client_valid_time;
        break;
      }

      // optional uint32 client_valid_time = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_client_valid_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &client_valid_time_)));
          set_has_client_valid_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_items;
        break;
      }

      // optional string items = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_items()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->items().data(), this->items().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_limit;
        break;
      }

      // optional .proto.gm_common.mail_recv_limit limit = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_limit:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_limit()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void global_mail_single::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uid(), output);
  }

  // optional uint32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->type(), output);
  }

  // optional string title = 3;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->title(), output);
  }

  // optional string content = 4;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->content(), output);
  }

  // optional string send_name = 5;
  if (has_send_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->send_name().data(), this->send_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->send_name(), output);
  }

  // optional uint32 send_time = 6;
  if (has_send_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->send_time(), output);
  }

  // optional uint32 over_time = 7;
  if (has_over_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->over_time(), output);
  }

  // optional uint32 send_type = 8;
  if (has_send_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->send_type(), output);
  }

  // optional uint32 send_hour = 9;
  if (has_send_hour()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->send_hour(), output);
  }

  // optional uint32 recv_type = 10;
  if (has_recv_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->recv_type(), output);
  }

  // repeated string recv_did_list = 11;
  for (int i = 0; i < this->recv_did_list_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->recv_did_list(i).data(), this->recv_did_list(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->recv_did_list(i), output);
  }

  // optional uint32 client_valid_time = 12;
  if (has_client_valid_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->client_valid_time(), output);
  }

  // optional string items = 13;
  if (has_items()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->items().data(), this->items().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->items(), output);
  }

  // optional .proto.gm_common.mail_recv_limit limit = 14;
  if (has_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->limit(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* global_mail_single::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->uid(), target);
  }

  // optional uint32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->type(), target);
  }

  // optional string title = 3;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->title(), target);
  }

  // optional string content = 4;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->content(), target);
  }

  // optional string send_name = 5;
  if (has_send_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->send_name().data(), this->send_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->send_name(), target);
  }

  // optional uint32 send_time = 6;
  if (has_send_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->send_time(), target);
  }

  // optional uint32 over_time = 7;
  if (has_over_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->over_time(), target);
  }

  // optional uint32 send_type = 8;
  if (has_send_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->send_type(), target);
  }

  // optional uint32 send_hour = 9;
  if (has_send_hour()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->send_hour(), target);
  }

  // optional uint32 recv_type = 10;
  if (has_recv_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->recv_type(), target);
  }

  // repeated string recv_did_list = 11;
  for (int i = 0; i < this->recv_did_list_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->recv_did_list(i).data(), this->recv_did_list(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(11, this->recv_did_list(i), target);
  }

  // optional uint32 client_valid_time = 12;
  if (has_client_valid_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->client_valid_time(), target);
  }

  // optional string items = 13;
  if (has_items()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->items().data(), this->items().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->items(), target);
  }

  // optional .proto.gm_common.mail_recv_limit limit = 14;
  if (has_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->limit(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int global_mail_single::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uid());
    }

    // optional uint32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional string title = 3;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }

    // optional string content = 4;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

    // optional string send_name = 5;
    if (has_send_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->send_name());
    }

    // optional uint32 send_time = 6;
    if (has_send_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->send_time());
    }

    // optional uint32 over_time = 7;
    if (has_over_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->over_time());
    }

    // optional uint32 send_type = 8;
    if (has_send_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->send_type());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 send_hour = 9;
    if (has_send_hour()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->send_hour());
    }

    // optional uint32 recv_type = 10;
    if (has_recv_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->recv_type());
    }

    // optional uint32 client_valid_time = 12;
    if (has_client_valid_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->client_valid_time());
    }

    // optional string items = 13;
    if (has_items()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->items());
    }

    // optional .proto.gm_common.mail_recv_limit limit = 14;
    if (has_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->limit());
    }

  }
  // repeated string recv_did_list = 11;
  total_size += 1 * this->recv_did_list_size();
  for (int i = 0; i < this->recv_did_list_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->recv_did_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void global_mail_single::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const global_mail_single* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const global_mail_single*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void global_mail_single::MergeFrom(const global_mail_single& from) {
  GOOGLE_CHECK_NE(&from, this);
  recv_did_list_.MergeFrom(from.recv_did_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_title()) {
      set_title(from.title());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
    if (from.has_send_name()) {
      set_send_name(from.send_name());
    }
    if (from.has_send_time()) {
      set_send_time(from.send_time());
    }
    if (from.has_over_time()) {
      set_over_time(from.over_time());
    }
    if (from.has_send_type()) {
      set_send_type(from.send_type());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_send_hour()) {
      set_send_hour(from.send_hour());
    }
    if (from.has_recv_type()) {
      set_recv_type(from.recv_type());
    }
    if (from.has_client_valid_time()) {
      set_client_valid_time(from.client_valid_time());
    }
    if (from.has_items()) {
      set_items(from.items());
    }
    if (from.has_limit()) {
      mutable_limit()->::proto::gm_common::mail_recv_limit::MergeFrom(from.limit());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void global_mail_single::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void global_mail_single::CopyFrom(const global_mail_single& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool global_mail_single::IsInitialized() const {

  return true;
}

void global_mail_single::Swap(global_mail_single* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(type_, other->type_);
    std::swap(title_, other->title_);
    std::swap(content_, other->content_);
    std::swap(send_name_, other->send_name_);
    std::swap(send_time_, other->send_time_);
    std::swap(over_time_, other->over_time_);
    std::swap(send_type_, other->send_type_);
    std::swap(send_hour_, other->send_hour_);
    std::swap(recv_type_, other->recv_type_);
    recv_did_list_.Swap(&other->recv_did_list_);
    std::swap(client_valid_time_, other->client_valid_time_);
    std::swap(items_, other->items_);
    std::swap(limit_, other->limit_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata global_mail_single::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = global_mail_single_descriptor_;
  metadata.reflection = global_mail_single_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mail_recv_limit::kLevelFieldNumber;
const int mail_recv_limit::kRegistTypeFieldNumber;
#endif  // !_MSC_VER

mail_recv_limit::mail_recv_limit()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void mail_recv_limit::InitAsDefaultInstance() {
}

mail_recv_limit::mail_recv_limit(const mail_recv_limit& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void mail_recv_limit::SharedCtor() {
  _cached_size_ = 0;
  level_ = 0;
  regist_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mail_recv_limit::~mail_recv_limit() {
  SharedDtor();
}

void mail_recv_limit::SharedDtor() {
  if (this != default_instance_) {
  }
}

void mail_recv_limit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mail_recv_limit::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mail_recv_limit_descriptor_;
}

const mail_recv_limit& mail_recv_limit::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gm_5fcommon_2eproto();
  return *default_instance_;
}

mail_recv_limit* mail_recv_limit::default_instance_ = NULL;

mail_recv_limit* mail_recv_limit::New() const {
  return new mail_recv_limit;
}

void mail_recv_limit::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    level_ = 0;
    regist_type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mail_recv_limit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 level = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_regist_type;
        break;
      }

      // optional int32 regist_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_regist_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &regist_type_)));
          set_has_regist_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void mail_recv_limit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 level = 1;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->level(), output);
  }

  // optional int32 regist_type = 2;
  if (has_regist_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->regist_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* mail_recv_limit::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 level = 1;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->level(), target);
  }

  // optional int32 regist_type = 2;
  if (has_regist_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->regist_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int mail_recv_limit::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 level = 1;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional int32 regist_type = 2;
    if (has_regist_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->regist_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mail_recv_limit::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mail_recv_limit* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mail_recv_limit*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mail_recv_limit::MergeFrom(const mail_recv_limit& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_regist_type()) {
      set_regist_type(from.regist_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mail_recv_limit::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mail_recv_limit::CopyFrom(const mail_recv_limit& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mail_recv_limit::IsInitialized() const {

  return true;
}

void mail_recv_limit::Swap(mail_recv_limit* other) {
  if (other != this) {
    std::swap(level_, other->level_);
    std::swap(regist_type_, other->regist_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mail_recv_limit::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mail_recv_limit_descriptor_;
  metadata.reflection = mail_recv_limit_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ban_state_info::kUserUidFieldNumber;
const int ban_state_info::kAccountFieldNumber;
const int ban_state_info::kOffsetTimeFieldNumber;
const int ban_state_info::kEndTimeFieldNumber;
#endif  // !_MSC_VER

ban_state_info::ban_state_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ban_state_info::InitAsDefaultInstance() {
}

ban_state_info::ban_state_info(const ban_state_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ban_state_info::SharedCtor() {
  _cached_size_ = 0;
  user_uid_ = GOOGLE_ULONGLONG(0);
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  offset_time_ = 0;
  end_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ban_state_info::~ban_state_info() {
  SharedDtor();
}

void ban_state_info::SharedDtor() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (this != default_instance_) {
  }
}

void ban_state_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ban_state_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ban_state_info_descriptor_;
}

const ban_state_info& ban_state_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gm_5fcommon_2eproto();
  return *default_instance_;
}

ban_state_info* ban_state_info::default_instance_ = NULL;

ban_state_info* ban_state_info::New() const {
  return new ban_state_info;
}

void ban_state_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    user_uid_ = GOOGLE_ULONGLONG(0);
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
    offset_time_ = 0;
    end_time_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ban_state_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 user_uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_uid_)));
          set_has_user_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_account;
        break;
      }

      // optional string account = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_offset_time;
        break;
      }

      // optional int32 offset_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_offset_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &offset_time_)));
          set_has_offset_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_end_time;
        break;
      }

      // optional uint32 end_time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_end_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &end_time_)));
          set_has_end_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ban_state_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 user_uid = 1;
  if (has_user_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->user_uid(), output);
  }

  // optional string account = 2;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->account(), output);
  }

  // optional int32 offset_time = 3;
  if (has_offset_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->offset_time(), output);
  }

  // optional uint32 end_time = 4;
  if (has_end_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->end_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ban_state_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 user_uid = 1;
  if (has_user_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->user_uid(), target);
  }

  // optional string account = 2;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->account(), target);
  }

  // optional int32 offset_time = 3;
  if (has_offset_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->offset_time(), target);
  }

  // optional uint32 end_time = 4;
  if (has_end_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->end_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ban_state_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 user_uid = 1;
    if (has_user_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_uid());
    }

    // optional string account = 2;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }

    // optional int32 offset_time = 3;
    if (has_offset_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->offset_time());
    }

    // optional uint32 end_time = 4;
    if (has_end_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->end_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ban_state_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ban_state_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ban_state_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ban_state_info::MergeFrom(const ban_state_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_uid()) {
      set_user_uid(from.user_uid());
    }
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_offset_time()) {
      set_offset_time(from.offset_time());
    }
    if (from.has_end_time()) {
      set_end_time(from.end_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ban_state_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ban_state_info::CopyFrom(const ban_state_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ban_state_info::IsInitialized() const {

  return true;
}

void ban_state_info::Swap(ban_state_info* other) {
  if (other != this) {
    std::swap(user_uid_, other->user_uid_);
    std::swap(account_, other->account_);
    std::swap(offset_time_, other->offset_time_);
    std::swap(end_time_, other->end_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ban_state_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ban_state_info_descriptor_;
  metadata.reflection = ban_state_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int sign_record_single::kCurSignTimesFieldNumber;
const int sign_record_single::kSignTimeFieldNumber;
#endif  // !_MSC_VER

sign_record_single::sign_record_single()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void sign_record_single::InitAsDefaultInstance() {
}

sign_record_single::sign_record_single(const sign_record_single& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void sign_record_single::SharedCtor() {
  _cached_size_ = 0;
  cur_sign_times_ = 0u;
  sign_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

sign_record_single::~sign_record_single() {
  SharedDtor();
}

void sign_record_single::SharedDtor() {
  if (this != default_instance_) {
  }
}

void sign_record_single::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* sign_record_single::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return sign_record_single_descriptor_;
}

const sign_record_single& sign_record_single::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gm_5fcommon_2eproto();
  return *default_instance_;
}

sign_record_single* sign_record_single::default_instance_ = NULL;

sign_record_single* sign_record_single::New() const {
  return new sign_record_single;
}

void sign_record_single::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cur_sign_times_ = 0u;
    sign_time_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool sign_record_single::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 cur_sign_times = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cur_sign_times_)));
          set_has_cur_sign_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_sign_time;
        break;
      }

      // optional uint32 sign_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sign_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sign_time_)));
          set_has_sign_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void sign_record_single::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 cur_sign_times = 1;
  if (has_cur_sign_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cur_sign_times(), output);
  }

  // optional uint32 sign_time = 2;
  if (has_sign_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->sign_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* sign_record_single::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 cur_sign_times = 1;
  if (has_cur_sign_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->cur_sign_times(), target);
  }

  // optional uint32 sign_time = 2;
  if (has_sign_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->sign_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int sign_record_single::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 cur_sign_times = 1;
    if (has_cur_sign_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cur_sign_times());
    }

    // optional uint32 sign_time = 2;
    if (has_sign_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sign_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sign_record_single::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const sign_record_single* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const sign_record_single*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void sign_record_single::MergeFrom(const sign_record_single& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cur_sign_times()) {
      set_cur_sign_times(from.cur_sign_times());
    }
    if (from.has_sign_time()) {
      set_sign_time(from.sign_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void sign_record_single::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void sign_record_single::CopyFrom(const sign_record_single& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sign_record_single::IsInitialized() const {

  return true;
}

void sign_record_single::Swap(sign_record_single* other) {
  if (other != this) {
    std::swap(cur_sign_times_, other->cur_sign_times_);
    std::swap(sign_time_, other->sign_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata sign_record_single::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = sign_record_single_descriptor_;
  metadata.reflection = sign_record_single_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int draw_record_single::kDrawTypeFieldNumber;
const int draw_record_single::kDrawTimeFieldNumber;
#endif  // !_MSC_VER

draw_record_single::draw_record_single()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void draw_record_single::InitAsDefaultInstance() {
}

draw_record_single::draw_record_single(const draw_record_single& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void draw_record_single::SharedCtor() {
  _cached_size_ = 0;
  draw_type_ = 0u;
  draw_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

draw_record_single::~draw_record_single() {
  SharedDtor();
}

void draw_record_single::SharedDtor() {
  if (this != default_instance_) {
  }
}

void draw_record_single::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* draw_record_single::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return draw_record_single_descriptor_;
}

const draw_record_single& draw_record_single::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gm_5fcommon_2eproto();
  return *default_instance_;
}

draw_record_single* draw_record_single::default_instance_ = NULL;

draw_record_single* draw_record_single::New() const {
  return new draw_record_single;
}

void draw_record_single::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    draw_type_ = 0u;
    draw_time_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool draw_record_single::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 draw_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &draw_type_)));
          set_has_draw_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_draw_time;
        break;
      }

      // optional uint32 draw_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_draw_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &draw_time_)));
          set_has_draw_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void draw_record_single::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 draw_type = 1;
  if (has_draw_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->draw_type(), output);
  }

  // optional uint32 draw_time = 2;
  if (has_draw_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->draw_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* draw_record_single::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 draw_type = 1;
  if (has_draw_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->draw_type(), target);
  }

  // optional uint32 draw_time = 2;
  if (has_draw_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->draw_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int draw_record_single::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 draw_type = 1;
    if (has_draw_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->draw_type());
    }

    // optional uint32 draw_time = 2;
    if (has_draw_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->draw_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void draw_record_single::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const draw_record_single* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const draw_record_single*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void draw_record_single::MergeFrom(const draw_record_single& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_draw_type()) {
      set_draw_type(from.draw_type());
    }
    if (from.has_draw_time()) {
      set_draw_time(from.draw_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void draw_record_single::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void draw_record_single::CopyFrom(const draw_record_single& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool draw_record_single::IsInitialized() const {

  return true;
}

void draw_record_single::Swap(draw_record_single* other) {
  if (other != this) {
    std::swap(draw_type_, other->draw_type_);
    std::swap(draw_time_, other->draw_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata draw_record_single::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = draw_record_single_descriptor_;
  metadata.reflection = draw_record_single_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int buy_record_single::kOriginalDiamondNumFieldNumber;
const int buy_record_single::kCostDiamondNumFieldNumber;
const int buy_record_single::kCurDiamondNumFieldNumber;
const int buy_record_single::kBuyTimeFieldNumber;
#endif  // !_MSC_VER

buy_record_single::buy_record_single()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void buy_record_single::InitAsDefaultInstance() {
}

buy_record_single::buy_record_single(const buy_record_single& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void buy_record_single::SharedCtor() {
  _cached_size_ = 0;
  original_diamond_num_ = 0u;
  cost_diamond_num_ = 0u;
  cur_diamond_num_ = 0u;
  buy_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

buy_record_single::~buy_record_single() {
  SharedDtor();
}

void buy_record_single::SharedDtor() {
  if (this != default_instance_) {
  }
}

void buy_record_single::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* buy_record_single::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return buy_record_single_descriptor_;
}

const buy_record_single& buy_record_single::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gm_5fcommon_2eproto();
  return *default_instance_;
}

buy_record_single* buy_record_single::default_instance_ = NULL;

buy_record_single* buy_record_single::New() const {
  return new buy_record_single;
}

void buy_record_single::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    original_diamond_num_ = 0u;
    cost_diamond_num_ = 0u;
    cur_diamond_num_ = 0u;
    buy_time_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool buy_record_single::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 original_diamond_num = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &original_diamond_num_)));
          set_has_original_diamond_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cost_diamond_num;
        break;
      }

      // optional uint32 cost_diamond_num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cost_diamond_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cost_diamond_num_)));
          set_has_cost_diamond_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_cur_diamond_num;
        break;
      }

      // optional uint32 cur_diamond_num = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_diamond_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cur_diamond_num_)));
          set_has_cur_diamond_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_buy_time;
        break;
      }

      // optional uint32 buy_time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buy_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &buy_time_)));
          set_has_buy_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void buy_record_single::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 original_diamond_num = 1;
  if (has_original_diamond_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->original_diamond_num(), output);
  }

  // optional uint32 cost_diamond_num = 2;
  if (has_cost_diamond_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->cost_diamond_num(), output);
  }

  // optional uint32 cur_diamond_num = 3;
  if (has_cur_diamond_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->cur_diamond_num(), output);
  }

  // optional uint32 buy_time = 4;
  if (has_buy_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->buy_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* buy_record_single::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 original_diamond_num = 1;
  if (has_original_diamond_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->original_diamond_num(), target);
  }

  // optional uint32 cost_diamond_num = 2;
  if (has_cost_diamond_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->cost_diamond_num(), target);
  }

  // optional uint32 cur_diamond_num = 3;
  if (has_cur_diamond_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->cur_diamond_num(), target);
  }

  // optional uint32 buy_time = 4;
  if (has_buy_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->buy_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int buy_record_single::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 original_diamond_num = 1;
    if (has_original_diamond_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->original_diamond_num());
    }

    // optional uint32 cost_diamond_num = 2;
    if (has_cost_diamond_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cost_diamond_num());
    }

    // optional uint32 cur_diamond_num = 3;
    if (has_cur_diamond_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cur_diamond_num());
    }

    // optional uint32 buy_time = 4;
    if (has_buy_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->buy_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void buy_record_single::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const buy_record_single* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const buy_record_single*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void buy_record_single::MergeFrom(const buy_record_single& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_original_diamond_num()) {
      set_original_diamond_num(from.original_diamond_num());
    }
    if (from.has_cost_diamond_num()) {
      set_cost_diamond_num(from.cost_diamond_num());
    }
    if (from.has_cur_diamond_num()) {
      set_cur_diamond_num(from.cur_diamond_num());
    }
    if (from.has_buy_time()) {
      set_buy_time(from.buy_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void buy_record_single::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void buy_record_single::CopyFrom(const buy_record_single& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool buy_record_single::IsInitialized() const {

  return true;
}

void buy_record_single::Swap(buy_record_single* other) {
  if (other != this) {
    std::swap(original_diamond_num_, other->original_diamond_num_);
    std::swap(cost_diamond_num_, other->cost_diamond_num_);
    std::swap(cur_diamond_num_, other->cur_diamond_num_);
    std::swap(buy_time_, other->buy_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata buy_record_single::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = buy_record_single_descriptor_;
  metadata.reflection = buy_record_single_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int shop_record_single::kShopTypeFieldNumber;
const int shop_record_single::kRefreshTimesFieldNumber;
const int shop_record_single::kBuyTimesFieldNumber;
#endif  // !_MSC_VER

shop_record_single::shop_record_single()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void shop_record_single::InitAsDefaultInstance() {
}

shop_record_single::shop_record_single(const shop_record_single& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void shop_record_single::SharedCtor() {
  _cached_size_ = 0;
  shop_type_ = 0u;
  refresh_times_ = 0u;
  buy_times_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

shop_record_single::~shop_record_single() {
  SharedDtor();
}

void shop_record_single::SharedDtor() {
  if (this != default_instance_) {
  }
}

void shop_record_single::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* shop_record_single::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return shop_record_single_descriptor_;
}

const shop_record_single& shop_record_single::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gm_5fcommon_2eproto();
  return *default_instance_;
}

shop_record_single* shop_record_single::default_instance_ = NULL;

shop_record_single* shop_record_single::New() const {
  return new shop_record_single;
}

void shop_record_single::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    shop_type_ = 0u;
    refresh_times_ = 0u;
    buy_times_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool shop_record_single::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 shop_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &shop_type_)));
          set_has_shop_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_refresh_times;
        break;
      }

      // optional uint32 refresh_times = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_refresh_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &refresh_times_)));
          set_has_refresh_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_buy_times;
        break;
      }

      // optional uint32 buy_times = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buy_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &buy_times_)));
          set_has_buy_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void shop_record_single::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 shop_type = 1;
  if (has_shop_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->shop_type(), output);
  }

  // optional uint32 refresh_times = 2;
  if (has_refresh_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->refresh_times(), output);
  }

  // optional uint32 buy_times = 3;
  if (has_buy_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->buy_times(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* shop_record_single::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 shop_type = 1;
  if (has_shop_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->shop_type(), target);
  }

  // optional uint32 refresh_times = 2;
  if (has_refresh_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->refresh_times(), target);
  }

  // optional uint32 buy_times = 3;
  if (has_buy_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->buy_times(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int shop_record_single::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 shop_type = 1;
    if (has_shop_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->shop_type());
    }

    // optional uint32 refresh_times = 2;
    if (has_refresh_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->refresh_times());
    }

    // optional uint32 buy_times = 3;
    if (has_buy_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->buy_times());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void shop_record_single::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const shop_record_single* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const shop_record_single*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void shop_record_single::MergeFrom(const shop_record_single& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_shop_type()) {
      set_shop_type(from.shop_type());
    }
    if (from.has_refresh_times()) {
      set_refresh_times(from.refresh_times());
    }
    if (from.has_buy_times()) {
      set_buy_times(from.buy_times());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void shop_record_single::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void shop_record_single::CopyFrom(const shop_record_single& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool shop_record_single::IsInitialized() const {

  return true;
}

void shop_record_single::Swap(shop_record_single* other) {
  if (other != this) {
    std::swap(shop_type_, other->shop_type_);
    std::swap(refresh_times_, other->refresh_times_);
    std::swap(buy_times_, other->buy_times_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata shop_record_single::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = shop_record_single_descriptor_;
  metadata.reflection = shop_record_single_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int gm_notice_single::kTypeFieldNumber;
const int gm_notice_single::kTickFieldNumber;
const int gm_notice_single::kStartTimeFieldNumber;
const int gm_notice_single::kEndTimeFieldNumber;
const int gm_notice_single::kLastSendTimeFieldNumber;
const int gm_notice_single::kNoticeFieldNumber;
#endif  // !_MSC_VER

gm_notice_single::gm_notice_single()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gm_notice_single::InitAsDefaultInstance() {
}

gm_notice_single::gm_notice_single(const gm_notice_single& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gm_notice_single::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  tick_ = 0u;
  start_time_ = 0u;
  end_time_ = 0u;
  last_send_time_ = 0u;
  notice_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gm_notice_single::~gm_notice_single() {
  SharedDtor();
}

void gm_notice_single::SharedDtor() {
  if (notice_ != &::google::protobuf::internal::kEmptyString) {
    delete notice_;
  }
  if (this != default_instance_) {
  }
}

void gm_notice_single::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gm_notice_single::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gm_notice_single_descriptor_;
}

const gm_notice_single& gm_notice_single::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gm_5fcommon_2eproto();
  return *default_instance_;
}

gm_notice_single* gm_notice_single::default_instance_ = NULL;

gm_notice_single* gm_notice_single::New() const {
  return new gm_notice_single;
}

void gm_notice_single::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0u;
    tick_ = 0u;
    start_time_ = 0u;
    end_time_ = 0u;
    last_send_time_ = 0u;
    if (has_notice()) {
      if (notice_ != &::google::protobuf::internal::kEmptyString) {
        notice_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gm_notice_single::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_tick;
        break;
      }

      // optional uint32 tick = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tick:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tick_)));
          set_has_tick();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_start_time;
        break;
      }

      // optional uint32 start_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_start_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &start_time_)));
          set_has_start_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_end_time;
        break;
      }

      // optional uint32 end_time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_end_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &end_time_)));
          set_has_end_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_last_send_time;
        break;
      }

      // optional uint32 last_send_time = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_send_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_send_time_)));
          set_has_last_send_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_notice;
        break;
      }

      // optional string notice = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_notice:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_notice()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->notice().data(), this->notice().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gm_notice_single::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  // optional uint32 tick = 2;
  if (has_tick()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->tick(), output);
  }

  // optional uint32 start_time = 3;
  if (has_start_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->start_time(), output);
  }

  // optional uint32 end_time = 4;
  if (has_end_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->end_time(), output);
  }

  // optional uint32 last_send_time = 5;
  if (has_last_send_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->last_send_time(), output);
  }

  // optional string notice = 6;
  if (has_notice()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->notice().data(), this->notice().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->notice(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gm_notice_single::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }

  // optional uint32 tick = 2;
  if (has_tick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->tick(), target);
  }

  // optional uint32 start_time = 3;
  if (has_start_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->start_time(), target);
  }

  // optional uint32 end_time = 4;
  if (has_end_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->end_time(), target);
  }

  // optional uint32 last_send_time = 5;
  if (has_last_send_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->last_send_time(), target);
  }

  // optional string notice = 6;
  if (has_notice()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->notice().data(), this->notice().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->notice(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gm_notice_single::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional uint32 tick = 2;
    if (has_tick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tick());
    }

    // optional uint32 start_time = 3;
    if (has_start_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->start_time());
    }

    // optional uint32 end_time = 4;
    if (has_end_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->end_time());
    }

    // optional uint32 last_send_time = 5;
    if (has_last_send_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_send_time());
    }

    // optional string notice = 6;
    if (has_notice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->notice());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gm_notice_single::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gm_notice_single* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gm_notice_single*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gm_notice_single::MergeFrom(const gm_notice_single& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_tick()) {
      set_tick(from.tick());
    }
    if (from.has_start_time()) {
      set_start_time(from.start_time());
    }
    if (from.has_end_time()) {
      set_end_time(from.end_time());
    }
    if (from.has_last_send_time()) {
      set_last_send_time(from.last_send_time());
    }
    if (from.has_notice()) {
      set_notice(from.notice());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gm_notice_single::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gm_notice_single::CopyFrom(const gm_notice_single& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gm_notice_single::IsInitialized() const {

  return true;
}

void gm_notice_single::Swap(gm_notice_single* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(tick_, other->tick_);
    std::swap(start_time_, other->start_time_);
    std::swap(end_time_, other->end_time_);
    std::swap(last_send_time_, other->last_send_time_);
    std::swap(notice_, other->notice_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gm_notice_single::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gm_notice_single_descriptor_;
  metadata.reflection = gm_notice_single_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace gm_common
}  // namespace proto

// @@protoc_insertion_point(global_scope)
