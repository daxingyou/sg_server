// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gm.proto

#ifndef PROTOBUF_gm_2eproto__INCLUDED
#define PROTOBUF_gm_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "gm_common.pb.h"
#include "common.pb.h"
// @@protoc_insertion_point(includes)

namespace proto {
namespace gm {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_gm_2eproto();
void protobuf_AssignDesc_gm_2eproto();
void protobuf_ShutdownFile_gm_2eproto();

class tm_monitor_get_user_info_request;
class mt_monitor_get_user_info_reply;
class tm_monitor_get_recharge_count_request;
class mt_monitor_get_recharge_count_reply;
class tm_set_user_data_request;
class mt_set_user_data_reply;
class tm_monitor_get_item_info_request;
class mt_monitor_get_item_info_reply;
class tm_monitor_get_hero_info_request;
class mt_monitor_get_hero_info_reply;
class tm_monitor_get_consume_record_request;
class mt_monitor_get_consume_record_reply;
class tm_monitor_get_pve_info_request;
class mt_monitor_get_pve_info_reply;
class tm_send_mail_request;
class mt_send_mail_reply;
class tm_monitor_get_equip_info_request;
class mt_monitor_get_equip_info_reply;
class tm_monitor_get_pvp_info_request;
class mt_monitor_get_pvp_info_reply;
class tm_manage_role_byid_request;
class mt_manage_role_byid_reply;
class tm_manage_role_byname_request;
class mt_manage_role_byname_reply;
class tm_manage_ban_state_query_request;
class mt_manage_ban_state_query_reply;
class tm_monitor_get_behavior_records_request;
class mt_monitor_get_behavior_records_reply;
class ma_masked_msg_notify;
class tm_reload_config_notify;
class me_ban_account_notify;
class me_access_ip_notify;
class tm_test_request;
class mt_test_reply;
class gm_data_threshold_notify;
class em_do_change_cdkey_request;
class me_do_change_cdkey_reply;
class me_send_mail_request;
class tm_get_user_ol_num_request;
class mt_get_user_ol_num_reply;
class me_get_user_ol_num_request;
class em_get_user_ol_num_reply;
class tm_send_notice_request;
class mt_send_notice_reply;
class me_send_notice_request;
class em_send_notice_reply;
class me_transport_ntf;
class tm_set_user_create_limit_request;
class mt_set_user_create_limit_reply;
class me_send_gm_msg_to_account_request;
class tm_refresh_login_list;
class tm_search_role_byid_request;
class tm_search_role_byname_request;
class mt_search_role_byname_reply;
class mall_reload_xml_notify;

// ===================================================================

class tm_monitor_get_user_info_request : public ::google::protobuf::Message {
 public:
  tm_monitor_get_user_info_request();
  virtual ~tm_monitor_get_user_info_request();

  tm_monitor_get_user_info_request(const tm_monitor_get_user_info_request& from);

  inline tm_monitor_get_user_info_request& operator=(const tm_monitor_get_user_info_request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const tm_monitor_get_user_info_request& default_instance();

  void Swap(tm_monitor_get_user_info_request* other);

  // implements Message ----------------------------------------------

  tm_monitor_get_user_info_request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const tm_monitor_get_user_info_request& from);
  void MergeFrom(const tm_monitor_get_user_info_request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string user_did = 1;
  inline bool has_user_did() const;
  inline void clear_user_did();
  static const int kUserDidFieldNumber = 1;
  inline const ::std::string& user_did() const;
  inline void set_user_did(const ::std::string& value);
  inline void set_user_did(const char* value);
  inline void set_user_did(const char* value, size_t size);
  inline ::std::string* mutable_user_did();
  inline ::std::string* release_user_did();
  inline void set_allocated_user_did(::std::string* user_did);

  // optional string nick_name = 2;
  inline bool has_nick_name() const;
  inline void clear_nick_name();
  static const int kNickNameFieldNumber = 2;
  inline const ::std::string& nick_name() const;
  inline void set_nick_name(const ::std::string& value);
  inline void set_nick_name(const char* value);
  inline void set_nick_name(const char* value, size_t size);
  inline ::std::string* mutable_nick_name();
  inline ::std::string* release_nick_name();
  inline void set_allocated_nick_name(::std::string* nick_name);

  // @@protoc_insertion_point(class_scope:proto.gm.tm_monitor_get_user_info_request)
 private:
  inline void set_has_user_did();
  inline void clear_has_user_did();
  inline void set_has_nick_name();
  inline void clear_has_nick_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* user_did_;
  ::std::string* nick_name_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_gm_2eproto();
  friend void protobuf_AssignDesc_gm_2eproto();
  friend void protobuf_ShutdownFile_gm_2eproto();

  void InitAsDefaultInstance();
  static tm_monitor_get_user_info_request* default_instance_;
};
// -------------------------------------------------------------------

class mt_monitor_get_user_info_reply : public ::google::protobuf::Message {
 public:
  mt_monitor_get_user_info_reply();
  virtual ~mt_monitor_get_user_info_reply();

  mt_monitor_get_user_info_reply(const mt_monitor_get_user_info_reply& from);

  inline mt_monitor_get_user_info_reply& operator=(const mt_monitor_get_user_info_reply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const mt_monitor_get_user_info_reply& default_instance();

  void Swap(mt_monitor_get_user_info_reply* other);

  // implements Message ----------------------------------------------

  mt_monitor_get_user_info_reply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const mt_monitor_get_user_info_reply& from);
  void MergeFrom(const mt_monitor_get_user_info_reply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 reply_code = 1;
  inline bool has_reply_code() const;
  inline void clear_reply_code();
  static const int kReplyCodeFieldNumber = 1;
  inline ::google::protobuf::uint32 reply_code() const;
  inline void set_reply_code(::google::protobuf::uint32 value);

  // optional .proto.gm_common.user_base_info base_info = 2;
  inline bool has_base_info() const;
  inline void clear_base_info();
  static const int kBaseInfoFieldNumber = 2;
  inline const ::proto::gm_common::user_base_info& base_info() const;
  inline ::proto::gm_common::user_base_info* mutable_base_info();
  inline ::proto::gm_common::user_base_info* release_base_info();
  inline void set_allocated_base_info(::proto::gm_common::user_base_info* base_info);

  // @@protoc_insertion_point(class_scope:proto.gm.mt_monitor_get_user_info_reply)
 private:
  inline void set_has_reply_code();
  inline void clear_has_reply_code();
  inline void set_has_base_info();
  inline void clear_has_base_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::proto::gm_common::user_base_info* base_info_;
  ::google::protobuf::uint32 reply_code_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_gm_2eproto();
  friend void protobuf_AssignDesc_gm_2eproto();
  friend void protobuf_ShutdownFile_gm_2eproto();

  void InitAsDefaultInstance();
  static mt_monitor_get_user_info_reply* default_instance_;
};
// -------------------------------------------------------------------

class tm_monitor_get_recharge_count_request : public ::google::protobuf::Message {
 public:
  tm_monitor_get_recharge_count_request();
  virtual ~tm_monitor_get_recharge_count_request();

  tm_monitor_get_recharge_count_request(const tm_monitor_get_recharge_count_request& from);

  inline tm_monitor_get_recharge_count_request& operator=(const tm_monitor_get_recharge_count_request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const tm_monitor_get_recharge_count_request& default_instance();

  void Swap(tm_monitor_get_recharge_count_request* other);

  // implements Message ----------------------------------------------

  tm_monitor_get_recharge_count_request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const tm_monitor_get_recharge_count_request& from);
  void MergeFrom(const tm_monitor_get_recharge_count_request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 user_uid = 1;
  inline bool has_user_uid() const;
  inline void clear_user_uid();
  static const int kUserUidFieldNumber = 1;
  inline ::google::protobuf::uint64 user_uid() const;
  inline void set_user_uid(::google::protobuf::uint64 value);

  // required uint32 page_num = 2;
  inline bool has_page_num() const;
  inline void clear_page_num();
  static const int kPageNumFieldNumber = 2;
  inline ::google::protobuf::uint32 page_num() const;
  inline void set_page_num(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.gm.tm_monitor_get_recharge_count_request)
 private:
  inline void set_has_user_uid();
  inline void clear_has_user_uid();
  inline void set_has_page_num();
  inline void clear_has_page_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 user_uid_;
  ::google::protobuf::uint32 page_num_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_gm_2eproto();
  friend void protobuf_AssignDesc_gm_2eproto();
  friend void protobuf_ShutdownFile_gm_2eproto();

  void InitAsDefaultInstance();
  static tm_monitor_get_recharge_count_request* default_instance_;
};
// -------------------------------------------------------------------

class mt_monitor_get_recharge_count_reply : public ::google::protobuf::Message {
 public:
  mt_monitor_get_recharge_count_reply();
  virtual ~mt_monitor_get_recharge_count_reply();

  mt_monitor_get_recharge_count_reply(const mt_monitor_get_recharge_count_reply& from);

  inline mt_monitor_get_recharge_count_reply& operator=(const mt_monitor_get_recharge_count_reply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const mt_monitor_get_recharge_count_reply& default_instance();

  void Swap(mt_monitor_get_recharge_count_reply* other);

  // implements Message ----------------------------------------------

  mt_monitor_get_recharge_count_reply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const mt_monitor_get_recharge_count_reply& from);
  void MergeFrom(const mt_monitor_get_recharge_count_reply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 reply_code = 1;
  inline bool has_reply_code() const;
  inline void clear_reply_code();
  static const int kReplyCodeFieldNumber = 1;
  inline ::google::protobuf::uint32 reply_code() const;
  inline void set_reply_code(::google::protobuf::uint32 value);

  // optional .proto.gm_common.recharge_count_info statistics = 2;
  inline bool has_statistics() const;
  inline void clear_statistics();
  static const int kStatisticsFieldNumber = 2;
  inline const ::proto::gm_common::recharge_count_info& statistics() const;
  inline ::proto::gm_common::recharge_count_info* mutable_statistics();
  inline ::proto::gm_common::recharge_count_info* release_statistics();
  inline void set_allocated_statistics(::proto::gm_common::recharge_count_info* statistics);

  // optional uint64 user_uid = 3;
  inline bool has_user_uid() const;
  inline void clear_user_uid();
  static const int kUserUidFieldNumber = 3;
  inline ::google::protobuf::uint64 user_uid() const;
  inline void set_user_uid(::google::protobuf::uint64 value);

  // optional uint32 total_pages = 4;
  inline bool has_total_pages() const;
  inline void clear_total_pages();
  static const int kTotalPagesFieldNumber = 4;
  inline ::google::protobuf::uint32 total_pages() const;
  inline void set_total_pages(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.gm.mt_monitor_get_recharge_count_reply)
 private:
  inline void set_has_reply_code();
  inline void clear_has_reply_code();
  inline void set_has_statistics();
  inline void clear_has_statistics();
  inline void set_has_user_uid();
  inline void clear_has_user_uid();
  inline void set_has_total_pages();
  inline void clear_has_total_pages();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::proto::gm_common::recharge_count_info* statistics_;
  ::google::protobuf::uint32 reply_code_;
  ::google::protobuf::uint32 total_pages_;
  ::google::protobuf::uint64 user_uid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_gm_2eproto();
  friend void protobuf_AssignDesc_gm_2eproto();
  friend void protobuf_ShutdownFile_gm_2eproto();

  void InitAsDefaultInstance();
  static mt_monitor_get_recharge_count_reply* default_instance_;
};
// -------------------------------------------------------------------

class tm_set_user_data_request : public ::google::protobuf::Message {
 public:
  tm_set_user_data_request();
  virtual ~tm_set_user_data_request();

  tm_set_user_data_request(const tm_set_user_data_request& from);

  inline tm_set_user_data_request& operator=(const tm_set_user_data_request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const tm_set_user_data_request& default_instance();

  void Swap(tm_set_user_data_request* other);

  // implements Message ----------------------------------------------

  tm_set_user_data_request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const tm_set_user_data_request& from);
  void MergeFrom(const tm_set_user_data_request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 user_uid = 1;
  inline bool has_user_uid() const;
  inline void clear_user_uid();
  static const int kUserUidFieldNumber = 1;
  inline ::google::protobuf::uint64 user_uid() const;
  inline void set_user_uid(::google::protobuf::uint64 value);

  // required int32 op_type = 2;
  inline bool has_op_type() const;
  inline void clear_op_type();
  static const int kOpTypeFieldNumber = 2;
  inline ::google::protobuf::int32 op_type() const;
  inline void set_op_type(::google::protobuf::int32 value);

  // optional int32 gold = 3;
  inline bool has_gold() const;
  inline void clear_gold();
  static const int kGoldFieldNumber = 3;
  inline ::google::protobuf::int32 gold() const;
  inline void set_gold(::google::protobuf::int32 value);

  // optional int32 diamond = 4;
  inline bool has_diamond() const;
  inline void clear_diamond();
  static const int kDiamondFieldNumber = 4;
  inline ::google::protobuf::int32 diamond() const;
  inline void set_diamond(::google::protobuf::int32 value);

  // optional int32 exp = 5;
  inline bool has_exp() const;
  inline void clear_exp();
  static const int kExpFieldNumber = 5;
  inline ::google::protobuf::int32 exp() const;
  inline void set_exp(::google::protobuf::int32 value);

  // optional int32 level = 6;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 6;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // optional int32 ap = 7;
  inline bool has_ap() const;
  inline void clear_ap();
  static const int kApFieldNumber = 7;
  inline ::google::protobuf::int32 ap() const;
  inline void set_ap(::google::protobuf::int32 value);

  // optional int32 skill_point = 8;
  inline bool has_skill_point() const;
  inline void clear_skill_point();
  static const int kSkillPointFieldNumber = 8;
  inline ::google::protobuf::int32 skill_point() const;
  inline void set_skill_point(::google::protobuf::int32 value);

  // optional int32 pve_badge = 9;
  inline bool has_pve_badge() const;
  inline void clear_pve_badge();
  static const int kPveBadgeFieldNumber = 9;
  inline ::google::protobuf::int32 pve_badge() const;
  inline void set_pve_badge(::google::protobuf::int32 value);

  // optional int32 pvp_badge = 10;
  inline bool has_pvp_badge() const;
  inline void clear_pvp_badge();
  static const int kPvpBadgeFieldNumber = 10;
  inline ::google::protobuf::int32 pvp_badge() const;
  inline void set_pvp_badge(::google::protobuf::int32 value);

  // optional int32 fate = 11;
  inline bool has_fate() const;
  inline void clear_fate();
  static const int kFateFieldNumber = 11;
  inline ::google::protobuf::int32 fate() const;
  inline void set_fate(::google::protobuf::int32 value);

  // optional int32 vip_exp = 12;
  inline bool has_vip_exp() const;
  inline void clear_vip_exp();
  static const int kVipExpFieldNumber = 12;
  inline ::google::protobuf::int32 vip_exp() const;
  inline void set_vip_exp(::google::protobuf::int32 value);

  // optional int32 vip_level = 13;
  inline bool has_vip_level() const;
  inline void clear_vip_level();
  static const int kVipLevelFieldNumber = 13;
  inline ::google::protobuf::int32 vip_level() const;
  inline void set_vip_level(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.gm.tm_set_user_data_request)
 private:
  inline void set_has_user_uid();
  inline void clear_has_user_uid();
  inline void set_has_op_type();
  inline void clear_has_op_type();
  inline void set_has_gold();
  inline void clear_has_gold();
  inline void set_has_diamond();
  inline void clear_has_diamond();
  inline void set_has_exp();
  inline void clear_has_exp();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_ap();
  inline void clear_has_ap();
  inline void set_has_skill_point();
  inline void clear_has_skill_point();
  inline void set_has_pve_badge();
  inline void clear_has_pve_badge();
  inline void set_has_pvp_badge();
  inline void clear_has_pvp_badge();
  inline void set_has_fate();
  inline void clear_has_fate();
  inline void set_has_vip_exp();
  inline void clear_has_vip_exp();
  inline void set_has_vip_level();
  inline void clear_has_vip_level();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 user_uid_;
  ::google::protobuf::int32 op_type_;
  ::google::protobuf::int32 gold_;
  ::google::protobuf::int32 diamond_;
  ::google::protobuf::int32 exp_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 ap_;
  ::google::protobuf::int32 skill_point_;
  ::google::protobuf::int32 pve_badge_;
  ::google::protobuf::int32 pvp_badge_;
  ::google::protobuf::int32 fate_;
  ::google::protobuf::int32 vip_exp_;
  ::google::protobuf::int32 vip_level_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(13 + 31) / 32];

  friend void  protobuf_AddDesc_gm_2eproto();
  friend void protobuf_AssignDesc_gm_2eproto();
  friend void protobuf_ShutdownFile_gm_2eproto();

  void InitAsDefaultInstance();
  static tm_set_user_data_request* default_instance_;
};
// -------------------------------------------------------------------

class mt_set_user_data_reply : public ::google::protobuf::Message {
 public:
  mt_set_user_data_reply();
  virtual ~mt_set_user_data_reply();

  mt_set_user_data_reply(const mt_set_user_data_reply& from);

  inline mt_set_user_data_reply& operator=(const mt_set_user_data_reply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const mt_set_user_data_reply& default_instance();

  void Swap(mt_set_user_data_reply* other);

  // implements Message ----------------------------------------------

  mt_set_user_data_reply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const mt_set_user_data_reply& from);
  void MergeFrom(const mt_set_user_data_reply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 reply_code = 1;
  inline bool has_reply_code() const;
  inline void clear_reply_code();
  static const int kReplyCodeFieldNumber = 1;
  inline ::google::protobuf::uint32 reply_code() const;
  inline void set_reply_code(::google::protobuf::uint32 value);

  // optional uint64 user_uid = 2;
  inline bool has_user_uid() const;
  inline void clear_user_uid();
  static const int kUserUidFieldNumber = 2;
  inline ::google::protobuf::uint64 user_uid() const;
  inline void set_user_uid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:proto.gm.mt_set_user_data_reply)
 private:
  inline void set_has_reply_code();
  inline void clear_has_reply_code();
  inline void set_has_user_uid();
  inline void clear_has_user_uid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 user_uid_;
  ::google::protobuf::uint32 reply_code_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_gm_2eproto();
  friend void protobuf_AssignDesc_gm_2eproto();
  friend void protobuf_ShutdownFile_gm_2eproto();

  void InitAsDefaultInstance();
  static mt_set_user_data_reply* default_instance_;
};
// -------------------------------------------------------------------

class tm_monitor_get_item_info_request : public ::google::protobuf::Message {
 public:
  tm_monitor_get_item_info_request();
  virtual ~tm_monitor_get_item_info_request();

  tm_monitor_get_item_info_request(const tm_monitor_get_item_info_request& from);

  inline tm_monitor_get_item_info_request& operator=(const tm_monitor_get_item_info_request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const tm_monitor_get_item_info_request& default_instance();

  void Swap(tm_monitor_get_item_info_request* other);

  // implements Message ----------------------------------------------

  tm_monitor_get_item_info_request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const tm_monitor_get_item_info_request& from);
  void MergeFrom(const tm_monitor_get_item_info_request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 user_uid = 1;
  inline bool has_user_uid() const;
  inline void clear_user_uid();
  static const int kUserUidFieldNumber = 1;
  inline ::google::protobuf::uint64 user_uid() const;
  inline void set_user_uid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:proto.gm.tm_monitor_get_item_info_request)
 private:
  inline void set_has_user_uid();
  inline void clear_has_user_uid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 user_uid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_gm_2eproto();
  friend void protobuf_AssignDesc_gm_2eproto();
  friend void protobuf_ShutdownFile_gm_2eproto();

  void InitAsDefaultInstance();
  static tm_monitor_get_item_info_request* default_instance_;
};
// -------------------------------------------------------------------

class mt_monitor_get_item_info_reply : public ::google::protobuf::Message {
 public:
  mt_monitor_get_item_info_reply();
  virtual ~mt_monitor_get_item_info_reply();

  mt_monitor_get_item_info_reply(const mt_monitor_get_item_info_reply& from);

  inline mt_monitor_get_item_info_reply& operator=(const mt_monitor_get_item_info_reply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const mt_monitor_get_item_info_reply& default_instance();

  void Swap(mt_monitor_get_item_info_reply* other);

  // implements Message ----------------------------------------------

  mt_monitor_get_item_info_reply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const mt_monitor_get_item_info_reply& from);
  void MergeFrom(const mt_monitor_get_item_info_reply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 reply_code = 1;
  inline bool has_reply_code() const;
  inline void clear_reply_code();
  static const int kReplyCodeFieldNumber = 1;
  inline ::google::protobuf::uint32 reply_code() const;
  inline void set_reply_code(::google::protobuf::uint32 value);

  // optional .proto.gm_common.item_data item_info = 2;
  inline bool has_item_info() const;
  inline void clear_item_info();
  static const int kItemInfoFieldNumber = 2;
  inline const ::proto::gm_common::item_data& item_info() const;
  inline ::proto::gm_common::item_data* mutable_item_info();
  inline ::proto::gm_common::item_data* release_item_info();
  inline void set_allocated_item_info(::proto::gm_common::item_data* item_info);

  // optional uint64 user_uid = 3;
  inline bool has_user_uid() const;
  inline void clear_user_uid();
  static const int kUserUidFieldNumber = 3;
  inline ::google::protobuf::uint64 user_uid() const;
  inline void set_user_uid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:proto.gm.mt_monitor_get_item_info_reply)
 private:
  inline void set_has_reply_code();
  inline void clear_has_reply_code();
  inline void set_has_item_info();
  inline void clear_has_item_info();
  inline void set_has_user_uid();
  inline void clear_has_user_uid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::proto::gm_common::item_data* item_info_;
  ::google::protobuf::uint64 user_uid_;
  ::google::protobuf::uint32 reply_code_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_gm_2eproto();
  friend void protobuf_AssignDesc_gm_2eproto();
  friend void protobuf_ShutdownFile_gm_2eproto();

  void InitAsDefaultInstance();
  static mt_monitor_get_item_info_reply* default_instance_;
};
// -------------------------------------------------------------------

class tm_monitor_get_hero_info_request : public ::google::protobuf::Message {
 public:
  tm_monitor_get_hero_info_request();
  virtual ~tm_monitor_get_hero_info_request();

  tm_monitor_get_hero_info_request(const tm_monitor_get_hero_info_request& from);

  inline tm_monitor_get_hero_info_request& operator=(const tm_monitor_get_hero_info_request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const tm_monitor_get_hero_info_request& default_instance();

  void Swap(tm_monitor_get_hero_info_request* other);

  // implements Message ----------------------------------------------

  tm_monitor_get_hero_info_request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const tm_monitor_get_hero_info_request& from);
  void MergeFrom(const tm_monitor_get_hero_info_request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 user_uid = 1;
  inline bool has_user_uid() const;
  inline void clear_user_uid();
  static const int kUserUidFieldNumber = 1;
  inline ::google::protobuf::uint64 user_uid() const;
  inline void set_user_uid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:proto.gm.tm_monitor_get_hero_info_request)
 private:
  inline void set_has_user_uid();
  inline void clear_has_user_uid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 user_uid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_gm_2eproto();
  friend void protobuf_AssignDesc_gm_2eproto();
  friend void protobuf_ShutdownFile_gm_2eproto();

  void InitAsDefaultInstance();
  static tm_monitor_get_hero_info_request* default_instance_;
};
// -------------------------------------------------------------------

class mt_monitor_get_hero_info_reply : public ::google::protobuf::Message {
 public:
  mt_monitor_get_hero_info_reply();
  virtual ~mt_monitor_get_hero_info_reply();

  mt_monitor_get_hero_info_reply(const mt_monitor_get_hero_info_reply& from);

  inline mt_monitor_get_hero_info_reply& operator=(const mt_monitor_get_hero_info_reply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const mt_monitor_get_hero_info_reply& default_instance();

  void Swap(mt_monitor_get_hero_info_reply* other);

  // implements Message ----------------------------------------------

  mt_monitor_get_hero_info_reply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const mt_monitor_get_hero_info_reply& from);
  void MergeFrom(const mt_monitor_get_hero_info_reply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 reply_code = 1;
  inline bool has_reply_code() const;
  inline void clear_reply_code();
  static const int kReplyCodeFieldNumber = 1;
  inline ::google::protobuf::uint32 reply_code() const;
  inline void set_reply_code(::google::protobuf::uint32 value);

  // optional .proto.gm_common.hero_data hero_info = 2;
  inline bool has_hero_info() const;
  inline void clear_hero_info();
  static const int kHeroInfoFieldNumber = 2;
  inline const ::proto::gm_common::hero_data& hero_info() const;
  inline ::proto::gm_common::hero_data* mutable_hero_info();
  inline ::proto::gm_common::hero_data* release_hero_info();
  inline void set_allocated_hero_info(::proto::gm_common::hero_data* hero_info);

  // optional uint64 user_uid = 3;
  inline bool has_user_uid() const;
  inline void clear_user_uid();
  static const int kUserUidFieldNumber = 3;
  inline ::google::protobuf::uint64 user_uid() const;
  inline void set_user_uid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:proto.gm.mt_monitor_get_hero_info_reply)
 private:
  inline void set_has_reply_code();
  inline void clear_has_reply_code();
  inline void set_has_hero_info();
  inline void clear_has_hero_info();
  inline void set_has_user_uid();
  inline void clear_has_user_uid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::proto::gm_common::hero_data* hero_info_;
  ::google::protobuf::uint64 user_uid_;
  ::google::protobuf::uint32 reply_code_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_gm_2eproto();
  friend void protobuf_AssignDesc_gm_2eproto();
  friend void protobuf_ShutdownFile_gm_2eproto();

  void InitAsDefaultInstance();
  static mt_monitor_get_hero_info_reply* default_instance_;
};
// -------------------------------------------------------------------

class tm_monitor_get_consume_record_request : public ::google::protobuf::Message {
 public:
  tm_monitor_get_consume_record_request();
  virtual ~tm_monitor_get_consume_record_request();

  tm_monitor_get_consume_record_request(const tm_monitor_get_consume_record_request& from);

  inline tm_monitor_get_consume_record_request& operator=(const tm_monitor_get_consume_record_request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const tm_monitor_get_consume_record_request& default_instance();

  void Swap(tm_monitor_get_consume_record_request* other);

  // implements Message ----------------------------------------------

  tm_monitor_get_consume_record_request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const tm_monitor_get_consume_record_request& from);
  void MergeFrom(const tm_monitor_get_consume_record_request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 user_uid = 1;
  inline bool has_user_uid() const;
  inline void clear_user_uid();
  static const int kUserUidFieldNumber = 1;
  inline ::google::protobuf::uint64 user_uid() const;
  inline void set_user_uid(::google::protobuf::uint64 value);

  // required uint32 type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);

  // required uint32 begin_time = 3;
  inline bool has_begin_time() const;
  inline void clear_begin_time();
  static const int kBeginTimeFieldNumber = 3;
  inline ::google::protobuf::uint32 begin_time() const;
  inline void set_begin_time(::google::protobuf::uint32 value);

  // required uint32 end_time = 4;
  inline bool has_end_time() const;
  inline void clear_end_time();
  static const int kEndTimeFieldNumber = 4;
  inline ::google::protobuf::uint32 end_time() const;
  inline void set_end_time(::google::protobuf::uint32 value);

  // required uint32 page_num = 5;
  inline bool has_page_num() const;
  inline void clear_page_num();
  static const int kPageNumFieldNumber = 5;
  inline ::google::protobuf::uint32 page_num() const;
  inline void set_page_num(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.gm.tm_monitor_get_consume_record_request)
 private:
  inline void set_has_user_uid();
  inline void clear_has_user_uid();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_begin_time();
  inline void clear_has_begin_time();
  inline void set_has_end_time();
  inline void clear_has_end_time();
  inline void set_has_page_num();
  inline void clear_has_page_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 user_uid_;
  ::google::protobuf::uint32 type_;
  ::google::protobuf::uint32 begin_time_;
  ::google::protobuf::uint32 end_time_;
  ::google::protobuf::uint32 page_num_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_gm_2eproto();
  friend void protobuf_AssignDesc_gm_2eproto();
  friend void protobuf_ShutdownFile_gm_2eproto();

  void InitAsDefaultInstance();
  static tm_monitor_get_consume_record_request* default_instance_;
};
// -------------------------------------------------------------------

class mt_monitor_get_consume_record_reply : public ::google::protobuf::Message {
 public:
  mt_monitor_get_consume_record_reply();
  virtual ~mt_monitor_get_consume_record_reply();

  mt_monitor_get_consume_record_reply(const mt_monitor_get_consume_record_reply& from);

  inline mt_monitor_get_consume_record_reply& operator=(const mt_monitor_get_consume_record_reply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const mt_monitor_get_consume_record_reply& default_instance();

  void Swap(mt_monitor_get_consume_record_reply* other);

  // implements Message ----------------------------------------------

  mt_monitor_get_consume_record_reply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const mt_monitor_get_consume_record_reply& from);
  void MergeFrom(const mt_monitor_get_consume_record_reply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 reply_code = 1;
  inline bool has_reply_code() const;
  inline void clear_reply_code();
  static const int kReplyCodeFieldNumber = 1;
  inline ::google::protobuf::uint32 reply_code() const;
  inline void set_reply_code(::google::protobuf::uint32 value);

  // optional .proto.gm_common.consume_record_data consume_info = 2;
  inline bool has_consume_info() const;
  inline void clear_consume_info();
  static const int kConsumeInfoFieldNumber = 2;
  inline const ::proto::gm_common::consume_record_data& consume_info() const;
  inline ::proto::gm_common::consume_record_data* mutable_consume_info();
  inline ::proto::gm_common::consume_record_data* release_consume_info();
  inline void set_allocated_consume_info(::proto::gm_common::consume_record_data* consume_info);

  // optional uint64 user_uid = 3;
  inline bool has_user_uid() const;
  inline void clear_user_uid();
  static const int kUserUidFieldNumber = 3;
  inline ::google::protobuf::uint64 user_uid() const;
  inline void set_user_uid(::google::protobuf::uint64 value);

  // optional uint32 total_pages = 4;
  inline bool has_total_pages() const;
  inline void clear_total_pages();
  static const int kTotalPagesFieldNumber = 4;
  inline ::google::protobuf::uint32 total_pages() const;
  inline void set_total_pages(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.gm.mt_monitor_get_consume_record_reply)
 private:
  inline void set_has_reply_code();
  inline void clear_has_reply_code();
  inline void set_has_consume_info();
  inline void clear_has_consume_info();
  inline void set_has_user_uid();
  inline void clear_has_user_uid();
  inline void set_has_total_pages();
  inline void clear_has_total_pages();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::proto::gm_common::consume_record_data* consume_info_;
  ::google::protobuf::uint32 reply_code_;
  ::google::protobuf::uint32 total_pages_;
  ::google::protobuf::uint64 user_uid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_gm_2eproto();
  friend void protobuf_AssignDesc_gm_2eproto();
  friend void protobuf_ShutdownFile_gm_2eproto();

  void InitAsDefaultInstance();
  static mt_monitor_get_consume_record_reply* default_instance_;
};
// -------------------------------------------------------------------

class tm_monitor_get_pve_info_request : public ::google::protobuf::Message {
 public:
  tm_monitor_get_pve_info_request();
  virtual ~tm_monitor_get_pve_info_request();

  tm_monitor_get_pve_info_request(const tm_monitor_get_pve_info_request& from);

  inline tm_monitor_get_pve_info_request& operator=(const tm_monitor_get_pve_info_request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const tm_monitor_get_pve_info_request& default_instance();

  void Swap(tm_monitor_get_pve_info_request* other);

  // implements Message ----------------------------------------------

  tm_monitor_get_pve_info_request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const tm_monitor_get_pve_info_request& from);
  void MergeFrom(const tm_monitor_get_pve_info_request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 user_uid = 1;
  inline bool has_user_uid() const;
  inline void clear_user_uid();
  static const int kUserUidFieldNumber = 1;
  inline ::google::protobuf::uint64 user_uid() const;
  inline void set_user_uid(::google::protobuf::uint64 value);

  // required int32 pve_type = 2;
  inline bool has_pve_type() const;
  inline void clear_pve_type();
  static const int kPveTypeFieldNumber = 2;
  inline ::google::protobuf::int32 pve_type() const;
  inline void set_pve_type(::google::protobuf::int32 value);

  // required uint32 page_num = 3;
  inline bool has_page_num() const;
  inline void clear_page_num();
  static const int kPageNumFieldNumber = 3;
  inline ::google::protobuf::uint32 page_num() const;
  inline void set_page_num(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.gm.tm_monitor_get_pve_info_request)
 private:
  inline void set_has_user_uid();
  inline void clear_has_user_uid();
  inline void set_has_pve_type();
  inline void clear_has_pve_type();
  inline void set_has_page_num();
  inline void clear_has_page_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 user_uid_;
  ::google::protobuf::int32 pve_type_;
  ::google::protobuf::uint32 page_num_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_gm_2eproto();
  friend void protobuf_AssignDesc_gm_2eproto();
  friend void protobuf_ShutdownFile_gm_2eproto();

  void InitAsDefaultInstance();
  static tm_monitor_get_pve_info_request* default_instance_;
};
// -------------------------------------------------------------------

class mt_monitor_get_pve_info_reply : public ::google::protobuf::Message {
 public:
  mt_monitor_get_pve_info_reply();
  virtual ~mt_monitor_get_pve_info_reply();

  mt_monitor_get_pve_info_reply(const mt_monitor_get_pve_info_reply& from);

  inline mt_monitor_get_pve_info_reply& operator=(const mt_monitor_get_pve_info_reply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const mt_monitor_get_pve_info_reply& default_instance();

  void Swap(mt_monitor_get_pve_info_reply* other);

  // implements Message ----------------------------------------------

  mt_monitor_get_pve_info_reply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const mt_monitor_get_pve_info_reply& from);
  void MergeFrom(const mt_monitor_get_pve_info_reply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 reply_code = 1;
  inline bool has_reply_code() const;
  inline void clear_reply_code();
  static const int kReplyCodeFieldNumber = 1;
  inline ::google::protobuf::uint32 reply_code() const;
  inline void set_reply_code(::google::protobuf::uint32 value);

  // optional .proto.gm_common.campaign_data campaign_info = 2;
  inline bool has_campaign_info() const;
  inline void clear_campaign_info();
  static const int kCampaignInfoFieldNumber = 2;
  inline const ::proto::gm_common::campaign_data& campaign_info() const;
  inline ::proto::gm_common::campaign_data* mutable_campaign_info();
  inline ::proto::gm_common::campaign_data* release_campaign_info();
  inline void set_allocated_campaign_info(::proto::gm_common::campaign_data* campaign_info);

  // optional .proto.gm_common.matrix_data matrix_info = 3;
  inline bool has_matrix_info() const;
  inline void clear_matrix_info();
  static const int kMatrixInfoFieldNumber = 3;
  inline const ::proto::gm_common::matrix_data& matrix_info() const;
  inline ::proto::gm_common::matrix_data* mutable_matrix_info();
  inline ::proto::gm_common::matrix_data* release_matrix_info();
  inline void set_allocated_matrix_info(::proto::gm_common::matrix_data* matrix_info);

  // optional .proto.gm_common.produce_data produce_info = 4;
  inline bool has_produce_info() const;
  inline void clear_produce_info();
  static const int kProduceInfoFieldNumber = 4;
  inline const ::proto::gm_common::produce_data& produce_info() const;
  inline ::proto::gm_common::produce_data* mutable_produce_info();
  inline ::proto::gm_common::produce_data* release_produce_info();
  inline void set_allocated_produce_info(::proto::gm_common::produce_data* produce_info);

  // optional uint64 user_uid = 5;
  inline bool has_user_uid() const;
  inline void clear_user_uid();
  static const int kUserUidFieldNumber = 5;
  inline ::google::protobuf::uint64 user_uid() const;
  inline void set_user_uid(::google::protobuf::uint64 value);

  // optional uint32 total_pages = 6;
  inline bool has_total_pages() const;
  inline void clear_total_pages();
  static const int kTotalPagesFieldNumber = 6;
  inline ::google::protobuf::uint32 total_pages() const;
  inline void set_total_pages(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.gm.mt_monitor_get_pve_info_reply)
 private:
  inline void set_has_reply_code();
  inline void clear_has_reply_code();
  inline void set_has_campaign_info();
  inline void clear_has_campaign_info();
  inline void set_has_matrix_info();
  inline void clear_has_matrix_info();
  inline void set_has_produce_info();
  inline void clear_has_produce_info();
  inline void set_has_user_uid();
  inline void clear_has_user_uid();
  inline void set_has_total_pages();
  inline void clear_has_total_pages();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::proto::gm_common::campaign_data* campaign_info_;
  ::proto::gm_common::matrix_data* matrix_info_;
  ::google::protobuf::uint32 reply_code_;
  ::google::protobuf::uint32 total_pages_;
  ::proto::gm_common::produce_data* produce_info_;
  ::google::protobuf::uint64 user_uid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_gm_2eproto();
  friend void protobuf_AssignDesc_gm_2eproto();
  friend void protobuf_ShutdownFile_gm_2eproto();

  void InitAsDefaultInstance();
  static mt_monitor_get_pve_info_reply* default_instance_;
};
// -------------------------------------------------------------------

class tm_send_mail_request : public ::google::protobuf::Message {
 public:
  tm_send_mail_request();
  virtual ~tm_send_mail_request();

  tm_send_mail_request(const tm_send_mail_request& from);

  inline tm_send_mail_request& operator=(const tm_send_mail_request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const tm_send_mail_request& default_instance();

  void Swap(tm_send_mail_request* other);

  // implements Message ----------------------------------------------

  tm_send_mail_request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const tm_send_mail_request& from);
  void MergeFrom(const tm_send_mail_request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 reply_code = 1;
  inline bool has_reply_code() const;
  inline void clear_reply_code();
  static const int kReplyCodeFieldNumber = 1;
  inline ::google::protobuf::int32 reply_code() const;
  inline void set_reply_code(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.gm.tm_send_mail_request)
 private:
  inline void set_has_reply_code();
  inline void clear_has_reply_code();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 reply_code_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_gm_2eproto();
  friend void protobuf_AssignDesc_gm_2eproto();
  friend void protobuf_ShutdownFile_gm_2eproto();

  void InitAsDefaultInstance();
  static tm_send_mail_request* default_instance_;
};
// -------------------------------------------------------------------

class mt_send_mail_reply : public ::google::protobuf::Message {
 public:
  mt_send_mail_reply();
  virtual ~mt_send_mail_reply();

  mt_send_mail_reply(const mt_send_mail_reply& from);

  inline mt_send_mail_reply& operator=(const mt_send_mail_reply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const mt_send_mail_reply& default_instance();

  void Swap(mt_send_mail_reply* other);

  // implements Message ----------------------------------------------

  mt_send_mail_reply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const mt_send_mail_reply& from);
  void MergeFrom(const mt_send_mail_reply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 reply_code = 1;
  inline bool has_reply_code() const;
  inline void clear_reply_code();
  static const int kReplyCodeFieldNumber = 1;
  inline ::google::protobuf::int32 reply_code() const;
  inline void set_reply_code(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.gm.mt_send_mail_reply)
 private:
  inline void set_has_reply_code();
  inline void clear_has_reply_code();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 reply_code_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_gm_2eproto();
  friend void protobuf_AssignDesc_gm_2eproto();
  friend void protobuf_ShutdownFile_gm_2eproto();

  void InitAsDefaultInstance();
  static mt_send_mail_reply* default_instance_;
};
// -------------------------------------------------------------------

class tm_monitor_get_equip_info_request : public ::google::protobuf::Message {
 public:
  tm_monitor_get_equip_info_request();
  virtual ~tm_monitor_get_equip_info_request();

  tm_monitor_get_equip_info_request(const tm_monitor_get_equip_info_request& from);

  inline tm_monitor_get_equip_info_request& operator=(const tm_monitor_get_equip_info_request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const tm_monitor_get_equip_info_request& default_instance();

  void Swap(tm_monitor_get_equip_info_request* other);

  // implements Message ----------------------------------------------

  tm_monitor_get_equip_info_request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const tm_monitor_get_equip_info_request& from);
  void MergeFrom(const tm_monitor_get_equip_info_request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 user_uid = 1;
  inline bool has_user_uid() const;
  inline void clear_user_uid();
  static const int kUserUidFieldNumber = 1;
  inline ::google::protobuf::uint64 user_uid() const;
  inline void set_user_uid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:proto.gm.tm_monitor_get_equip_info_request)
 private:
  inline void set_has_user_uid();
  inline void clear_has_user_uid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 user_uid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_gm_2eproto();
  friend void protobuf_AssignDesc_gm_2eproto();
  friend void protobuf_ShutdownFile_gm_2eproto();

  void InitAsDefaultInstance();
  static tm_monitor_get_equip_info_request* default_instance_;
};
// -------------------------------------------------------------------

class mt_monitor_get_equip_info_reply : public ::google::protobuf::Message {
 public:
  mt_monitor_get_equip_info_reply();
  virtual ~mt_monitor_get_equip_info_reply();

  mt_monitor_get_equip_info_reply(const mt_monitor_get_equip_info_reply& from);

  inline mt_monitor_get_equip_info_reply& operator=(const mt_monitor_get_equip_info_reply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const mt_monitor_get_equip_info_reply& default_instance();

  void Swap(mt_monitor_get_equip_info_reply* other);

  // implements Message ----------------------------------------------

  mt_monitor_get_equip_info_reply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const mt_monitor_get_equip_info_reply& from);
  void MergeFrom(const mt_monitor_get_equip_info_reply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 reply_code = 1;
  inline bool has_reply_code() const;
  inline void clear_reply_code();
  static const int kReplyCodeFieldNumber = 1;
  inline ::google::protobuf::uint32 reply_code() const;
  inline void set_reply_code(::google::protobuf::uint32 value);

  // optional .proto.gm_common.equip_data equip_info = 2;
  inline bool has_equip_info() const;
  inline void clear_equip_info();
  static const int kEquipInfoFieldNumber = 2;
  inline const ::proto::gm_common::equip_data& equip_info() const;
  inline ::proto::gm_common::equip_data* mutable_equip_info();
  inline ::proto::gm_common::equip_data* release_equip_info();
  inline void set_allocated_equip_info(::proto::gm_common::equip_data* equip_info);

  // optional uint64 user_uid = 3;
  inline bool has_user_uid() const;
  inline void clear_user_uid();
  static const int kUserUidFieldNumber = 3;
  inline ::google::protobuf::uint64 user_uid() const;
  inline void set_user_uid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:proto.gm.mt_monitor_get_equip_info_reply)
 private:
  inline void set_has_reply_code();
  inline void clear_has_reply_code();
  inline void set_has_equip_info();
  inline void clear_has_equip_info();
  inline void set_has_user_uid();
  inline void clear_has_user_uid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::proto::gm_common::equip_data* equip_info_;
  ::google::protobuf::uint64 user_uid_;
  ::google::protobuf::uint32 reply_code_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_gm_2eproto();
  friend void protobuf_AssignDesc_gm_2eproto();
  friend void protobuf_ShutdownFile_gm_2eproto();

  void InitAsDefaultInstance();
  static mt_monitor_get_equip_info_reply* default_instance_;
};
// -------------------------------------------------------------------

class tm_monitor_get_pvp_info_request : public ::google::protobuf::Message {
 public:
  tm_monitor_get_pvp_info_request();
  virtual ~tm_monitor_get_pvp_info_request();

  tm_monitor_get_pvp_info_request(const tm_monitor_get_pvp_info_request& from);

  inline tm_monitor_get_pvp_info_request& operator=(const tm_monitor_get_pvp_info_request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const tm_monitor_get_pvp_info_request& default_instance();

  void Swap(tm_monitor_get_pvp_info_request* other);

  // implements Message ----------------------------------------------

  tm_monitor_get_pvp_info_request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const tm_monitor_get_pvp_info_request& from);
  void MergeFrom(const tm_monitor_get_pvp_info_request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 user_uid = 1;
  inline bool has_user_uid() const;
  inline void clear_user_uid();
  static const int kUserUidFieldNumber = 1;
  inline ::google::protobuf::uint64 user_uid() const;
  inline void set_user_uid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:proto.gm.tm_monitor_get_pvp_info_request)
 private:
  inline void set_has_user_uid();
  inline void clear_has_user_uid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 user_uid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_gm_2eproto();
  friend void protobuf_AssignDesc_gm_2eproto();
  friend void protobuf_ShutdownFile_gm_2eproto();

  void InitAsDefaultInstance();
  static tm_monitor_get_pvp_info_request* default_instance_;
};
// -------------------------------------------------------------------

class mt_monitor_get_pvp_info_reply : public ::google::protobuf::Message {
 public:
  mt_monitor_get_pvp_info_reply();
  virtual ~mt_monitor_get_pvp_info_reply();

  mt_monitor_get_pvp_info_reply(const mt_monitor_get_pvp_info_reply& from);

  inline mt_monitor_get_pvp_info_reply& operator=(const mt_monitor_get_pvp_info_reply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const mt_monitor_get_pvp_info_reply& default_instance();

  void Swap(mt_monitor_get_pvp_info_reply* other);

  // implements Message ----------------------------------------------

  mt_monitor_get_pvp_info_reply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const mt_monitor_get_pvp_info_reply& from);
  void MergeFrom(const mt_monitor_get_pvp_info_reply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 reply_code = 1;
  inline bool has_reply_code() const;
  inline void clear_reply_code();
  static const int kReplyCodeFieldNumber = 1;
  inline ::google::protobuf::uint32 reply_code() const;
  inline void set_reply_code(::google::protobuf::uint32 value);

  // optional uint32 history_top = 2;
  inline bool has_history_top() const;
  inline void clear_history_top();
  static const int kHistoryTopFieldNumber = 2;
  inline ::google::protobuf::uint32 history_top() const;
  inline void set_history_top(::google::protobuf::uint32 value);

  // optional uint32 buy_challenge_times = 3;
  inline bool has_buy_challenge_times() const;
  inline void clear_buy_challenge_times();
  static const int kBuyChallengeTimesFieldNumber = 3;
  inline ::google::protobuf::uint32 buy_challenge_times() const;
  inline void set_buy_challenge_times(::google::protobuf::uint32 value);

  // optional uint32 challenge_times = 4;
  inline bool has_challenge_times() const;
  inline void clear_challenge_times();
  static const int kChallengeTimesFieldNumber = 4;
  inline ::google::protobuf::uint32 challenge_times() const;
  inline void set_challenge_times(::google::protobuf::uint32 value);

  // optional uint32 last_challenge_time = 5;
  inline bool has_last_challenge_time() const;
  inline void clear_last_challenge_time();
  static const int kLastChallengeTimeFieldNumber = 5;
  inline ::google::protobuf::uint32 last_challenge_time() const;
  inline void set_last_challenge_time(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.gm.mt_monitor_get_pvp_info_reply)
 private:
  inline void set_has_reply_code();
  inline void clear_has_reply_code();
  inline void set_has_history_top();
  inline void clear_has_history_top();
  inline void set_has_buy_challenge_times();
  inline void clear_has_buy_challenge_times();
  inline void set_has_challenge_times();
  inline void clear_has_challenge_times();
  inline void set_has_last_challenge_time();
  inline void clear_has_last_challenge_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 reply_code_;
  ::google::protobuf::uint32 history_top_;
  ::google::protobuf::uint32 buy_challenge_times_;
  ::google::protobuf::uint32 challenge_times_;
  ::google::protobuf::uint32 last_challenge_time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_gm_2eproto();
  friend void protobuf_AssignDesc_gm_2eproto();
  friend void protobuf_ShutdownFile_gm_2eproto();

  void InitAsDefaultInstance();
  static mt_monitor_get_pvp_info_reply* default_instance_;
};
// -------------------------------------------------------------------

class tm_manage_role_byid_request : public ::google::protobuf::Message {
 public:
  tm_manage_role_byid_request();
  virtual ~tm_manage_role_byid_request();

  tm_manage_role_byid_request(const tm_manage_role_byid_request& from);

  inline tm_manage_role_byid_request& operator=(const tm_manage_role_byid_request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const tm_manage_role_byid_request& default_instance();

  void Swap(tm_manage_role_byid_request* other);

  // implements Message ----------------------------------------------

  tm_manage_role_byid_request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const tm_manage_role_byid_request& from);
  void MergeFrom(const tm_manage_role_byid_request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 role_did = 1;
  inline int role_did_size() const;
  inline void clear_role_did();
  static const int kRoleDidFieldNumber = 1;
  inline ::google::protobuf::uint32 role_did(int index) const;
  inline void set_role_did(int index, ::google::protobuf::uint32 value);
  inline void add_role_did(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      role_did() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_role_did();

  // optional uint32 manage_type = 2;
  inline bool has_manage_type() const;
  inline void clear_manage_type();
  static const int kManageTypeFieldNumber = 2;
  inline ::google::protobuf::uint32 manage_type() const;
  inline void set_manage_type(::google::protobuf::uint32 value);

  // optional uint32 offset_time = 3;
  inline bool has_offset_time() const;
  inline void clear_offset_time();
  static const int kOffsetTimeFieldNumber = 3;
  inline ::google::protobuf::uint32 offset_time() const;
  inline void set_offset_time(::google::protobuf::uint32 value);

  // optional string reason = 4;
  inline bool has_reason() const;
  inline void clear_reason();
  static const int kReasonFieldNumber = 4;
  inline const ::std::string& reason() const;
  inline void set_reason(const ::std::string& value);
  inline void set_reason(const char* value);
  inline void set_reason(const char* value, size_t size);
  inline ::std::string* mutable_reason();
  inline ::std::string* release_reason();
  inline void set_allocated_reason(::std::string* reason);

  // optional string oper_name = 5;
  inline bool has_oper_name() const;
  inline void clear_oper_name();
  static const int kOperNameFieldNumber = 5;
  inline const ::std::string& oper_name() const;
  inline void set_oper_name(const ::std::string& value);
  inline void set_oper_name(const char* value);
  inline void set_oper_name(const char* value, size_t size);
  inline ::std::string* mutable_oper_name();
  inline ::std::string* release_oper_name();
  inline void set_allocated_oper_name(::std::string* oper_name);

  // @@protoc_insertion_point(class_scope:proto.gm.tm_manage_role_byid_request)
 private:
  inline void set_has_manage_type();
  inline void clear_has_manage_type();
  inline void set_has_offset_time();
  inline void clear_has_offset_time();
  inline void set_has_reason();
  inline void clear_has_reason();
  inline void set_has_oper_name();
  inline void clear_has_oper_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > role_did_;
  ::google::protobuf::uint32 manage_type_;
  ::google::protobuf::uint32 offset_time_;
  ::std::string* reason_;
  ::std::string* oper_name_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_gm_2eproto();
  friend void protobuf_AssignDesc_gm_2eproto();
  friend void protobuf_ShutdownFile_gm_2eproto();

  void InitAsDefaultInstance();
  static tm_manage_role_byid_request* default_instance_;
};
// -------------------------------------------------------------------

class mt_manage_role_byid_reply : public ::google::protobuf::Message {
 public:
  mt_manage_role_byid_reply();
  virtual ~mt_manage_role_byid_reply();

  mt_manage_role_byid_reply(const mt_manage_role_byid_reply& from);

  inline mt_manage_role_byid_reply& operator=(const mt_manage_role_byid_reply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const mt_manage_role_byid_reply& default_instance();

  void Swap(mt_manage_role_byid_reply* other);

  // implements Message ----------------------------------------------

  mt_manage_role_byid_reply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const mt_manage_role_byid_reply& from);
  void MergeFrom(const mt_manage_role_byid_reply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto.gm_common.manage_reply_single reply_data = 1;
  inline int reply_data_size() const;
  inline void clear_reply_data();
  static const int kReplyDataFieldNumber = 1;
  inline const ::proto::gm_common::manage_reply_single& reply_data(int index) const;
  inline ::proto::gm_common::manage_reply_single* mutable_reply_data(int index);
  inline ::proto::gm_common::manage_reply_single* add_reply_data();
  inline const ::google::protobuf::RepeatedPtrField< ::proto::gm_common::manage_reply_single >&
      reply_data() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto::gm_common::manage_reply_single >*
      mutable_reply_data();

  // optional uint32 oper_time = 2;
  inline bool has_oper_time() const;
  inline void clear_oper_time();
  static const int kOperTimeFieldNumber = 2;
  inline ::google::protobuf::uint32 oper_time() const;
  inline void set_oper_time(::google::protobuf::uint32 value);

  // optional uint32 manage_type = 3;
  inline bool has_manage_type() const;
  inline void clear_manage_type();
  static const int kManageTypeFieldNumber = 3;
  inline ::google::protobuf::uint32 manage_type() const;
  inline void set_manage_type(::google::protobuf::uint32 value);

  // optional uint32 offset_time = 4;
  inline bool has_offset_time() const;
  inline void clear_offset_time();
  static const int kOffsetTimeFieldNumber = 4;
  inline ::google::protobuf::uint32 offset_time() const;
  inline void set_offset_time(::google::protobuf::uint32 value);

  // optional string reason = 5;
  inline bool has_reason() const;
  inline void clear_reason();
  static const int kReasonFieldNumber = 5;
  inline const ::std::string& reason() const;
  inline void set_reason(const ::std::string& value);
  inline void set_reason(const char* value);
  inline void set_reason(const char* value, size_t size);
  inline ::std::string* mutable_reason();
  inline ::std::string* release_reason();
  inline void set_allocated_reason(::std::string* reason);

  // optional string oper_name = 6;
  inline bool has_oper_name() const;
  inline void clear_oper_name();
  static const int kOperNameFieldNumber = 6;
  inline const ::std::string& oper_name() const;
  inline void set_oper_name(const ::std::string& value);
  inline void set_oper_name(const char* value);
  inline void set_oper_name(const char* value, size_t size);
  inline ::std::string* mutable_oper_name();
  inline ::std::string* release_oper_name();
  inline void set_allocated_oper_name(::std::string* oper_name);

  // @@protoc_insertion_point(class_scope:proto.gm.mt_manage_role_byid_reply)
 private:
  inline void set_has_oper_time();
  inline void clear_has_oper_time();
  inline void set_has_manage_type();
  inline void clear_has_manage_type();
  inline void set_has_offset_time();
  inline void clear_has_offset_time();
  inline void set_has_reason();
  inline void clear_has_reason();
  inline void set_has_oper_name();
  inline void clear_has_oper_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto::gm_common::manage_reply_single > reply_data_;
  ::google::protobuf::uint32 oper_time_;
  ::google::protobuf::uint32 manage_type_;
  ::std::string* reason_;
  ::std::string* oper_name_;
  ::google::protobuf::uint32 offset_time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_gm_2eproto();
  friend void protobuf_AssignDesc_gm_2eproto();
  friend void protobuf_ShutdownFile_gm_2eproto();

  void InitAsDefaultInstance();
  static mt_manage_role_byid_reply* default_instance_;
};
// -------------------------------------------------------------------

class tm_manage_role_byname_request : public ::google::protobuf::Message {
 public:
  tm_manage_role_byname_request();
  virtual ~tm_manage_role_byname_request();

  tm_manage_role_byname_request(const tm_manage_role_byname_request& from);

  inline tm_manage_role_byname_request& operator=(const tm_manage_role_byname_request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const tm_manage_role_byname_request& default_instance();

  void Swap(tm_manage_role_byname_request* other);

  // implements Message ----------------------------------------------

  tm_manage_role_byname_request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const tm_manage_role_byname_request& from);
  void MergeFrom(const tm_manage_role_byname_request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string role_name = 1;
  inline int role_name_size() const;
  inline void clear_role_name();
  static const int kRoleNameFieldNumber = 1;
  inline const ::std::string& role_name(int index) const;
  inline ::std::string* mutable_role_name(int index);
  inline void set_role_name(int index, const ::std::string& value);
  inline void set_role_name(int index, const char* value);
  inline void set_role_name(int index, const char* value, size_t size);
  inline ::std::string* add_role_name();
  inline void add_role_name(const ::std::string& value);
  inline void add_role_name(const char* value);
  inline void add_role_name(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& role_name() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_role_name();

  // optional uint32 manage_type = 2;
  inline bool has_manage_type() const;
  inline void clear_manage_type();
  static const int kManageTypeFieldNumber = 2;
  inline ::google::protobuf::uint32 manage_type() const;
  inline void set_manage_type(::google::protobuf::uint32 value);

  // optional uint32 offset_time = 3;
  inline bool has_offset_time() const;
  inline void clear_offset_time();
  static const int kOffsetTimeFieldNumber = 3;
  inline ::google::protobuf::uint32 offset_time() const;
  inline void set_offset_time(::google::protobuf::uint32 value);

  // optional string reason = 4;
  inline bool has_reason() const;
  inline void clear_reason();
  static const int kReasonFieldNumber = 4;
  inline const ::std::string& reason() const;
  inline void set_reason(const ::std::string& value);
  inline void set_reason(const char* value);
  inline void set_reason(const char* value, size_t size);
  inline ::std::string* mutable_reason();
  inline ::std::string* release_reason();
  inline void set_allocated_reason(::std::string* reason);

  // optional string oper_name = 5;
  inline bool has_oper_name() const;
  inline void clear_oper_name();
  static const int kOperNameFieldNumber = 5;
  inline const ::std::string& oper_name() const;
  inline void set_oper_name(const ::std::string& value);
  inline void set_oper_name(const char* value);
  inline void set_oper_name(const char* value, size_t size);
  inline ::std::string* mutable_oper_name();
  inline ::std::string* release_oper_name();
  inline void set_allocated_oper_name(::std::string* oper_name);

  // @@protoc_insertion_point(class_scope:proto.gm.tm_manage_role_byname_request)
 private:
  inline void set_has_manage_type();
  inline void clear_has_manage_type();
  inline void set_has_offset_time();
  inline void clear_has_offset_time();
  inline void set_has_reason();
  inline void clear_has_reason();
  inline void set_has_oper_name();
  inline void clear_has_oper_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::std::string> role_name_;
  ::google::protobuf::uint32 manage_type_;
  ::google::protobuf::uint32 offset_time_;
  ::std::string* reason_;
  ::std::string* oper_name_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_gm_2eproto();
  friend void protobuf_AssignDesc_gm_2eproto();
  friend void protobuf_ShutdownFile_gm_2eproto();

  void InitAsDefaultInstance();
  static tm_manage_role_byname_request* default_instance_;
};
// -------------------------------------------------------------------

class mt_manage_role_byname_reply : public ::google::protobuf::Message {
 public:
  mt_manage_role_byname_reply();
  virtual ~mt_manage_role_byname_reply();

  mt_manage_role_byname_reply(const mt_manage_role_byname_reply& from);

  inline mt_manage_role_byname_reply& operator=(const mt_manage_role_byname_reply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const mt_manage_role_byname_reply& default_instance();

  void Swap(mt_manage_role_byname_reply* other);

  // implements Message ----------------------------------------------

  mt_manage_role_byname_reply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const mt_manage_role_byname_reply& from);
  void MergeFrom(const mt_manage_role_byname_reply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto.gm_common.manage_reply_single reply_data = 1;
  inline int reply_data_size() const;
  inline void clear_reply_data();
  static const int kReplyDataFieldNumber = 1;
  inline const ::proto::gm_common::manage_reply_single& reply_data(int index) const;
  inline ::proto::gm_common::manage_reply_single* mutable_reply_data(int index);
  inline ::proto::gm_common::manage_reply_single* add_reply_data();
  inline const ::google::protobuf::RepeatedPtrField< ::proto::gm_common::manage_reply_single >&
      reply_data() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto::gm_common::manage_reply_single >*
      mutable_reply_data();

  // optional uint32 oper_time = 2;
  inline bool has_oper_time() const;
  inline void clear_oper_time();
  static const int kOperTimeFieldNumber = 2;
  inline ::google::protobuf::uint32 oper_time() const;
  inline void set_oper_time(::google::protobuf::uint32 value);

  // optional uint32 manage_type = 3;
  inline bool has_manage_type() const;
  inline void clear_manage_type();
  static const int kManageTypeFieldNumber = 3;
  inline ::google::protobuf::uint32 manage_type() const;
  inline void set_manage_type(::google::protobuf::uint32 value);

  // optional uint32 offset_time = 4;
  inline bool has_offset_time() const;
  inline void clear_offset_time();
  static const int kOffsetTimeFieldNumber = 4;
  inline ::google::protobuf::uint32 offset_time() const;
  inline void set_offset_time(::google::protobuf::uint32 value);

  // optional string reason = 5;
  inline bool has_reason() const;
  inline void clear_reason();
  static const int kReasonFieldNumber = 5;
  inline const ::std::string& reason() const;
  inline void set_reason(const ::std::string& value);
  inline void set_reason(const char* value);
  inline void set_reason(const char* value, size_t size);
  inline ::std::string* mutable_reason();
  inline ::std::string* release_reason();
  inline void set_allocated_reason(::std::string* reason);

  // optional string oper_name = 6;
  inline bool has_oper_name() const;
  inline void clear_oper_name();
  static const int kOperNameFieldNumber = 6;
  inline const ::std::string& oper_name() const;
  inline void set_oper_name(const ::std::string& value);
  inline void set_oper_name(const char* value);
  inline void set_oper_name(const char* value, size_t size);
  inline ::std::string* mutable_oper_name();
  inline ::std::string* release_oper_name();
  inline void set_allocated_oper_name(::std::string* oper_name);

  // @@protoc_insertion_point(class_scope:proto.gm.mt_manage_role_byname_reply)
 private:
  inline void set_has_oper_time();
  inline void clear_has_oper_time();
  inline void set_has_manage_type();
  inline void clear_has_manage_type();
  inline void set_has_offset_time();
  inline void clear_has_offset_time();
  inline void set_has_reason();
  inline void clear_has_reason();
  inline void set_has_oper_name();
  inline void clear_has_oper_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto::gm_common::manage_reply_single > reply_data_;
  ::google::protobuf::uint32 oper_time_;
  ::google::protobuf::uint32 manage_type_;
  ::std::string* reason_;
  ::std::string* oper_name_;
  ::google::protobuf::uint32 offset_time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_gm_2eproto();
  friend void protobuf_AssignDesc_gm_2eproto();
  friend void protobuf_ShutdownFile_gm_2eproto();

  void InitAsDefaultInstance();
  static mt_manage_role_byname_reply* default_instance_;
};
// -------------------------------------------------------------------

class tm_manage_ban_state_query_request : public ::google::protobuf::Message {
 public:
  tm_manage_ban_state_query_request();
  virtual ~tm_manage_ban_state_query_request();

  tm_manage_ban_state_query_request(const tm_manage_ban_state_query_request& from);

  inline tm_manage_ban_state_query_request& operator=(const tm_manage_ban_state_query_request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const tm_manage_ban_state_query_request& default_instance();

  void Swap(tm_manage_ban_state_query_request* other);

  // implements Message ----------------------------------------------

  tm_manage_ban_state_query_request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const tm_manage_ban_state_query_request& from);
  void MergeFrom(const tm_manage_ban_state_query_request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 page_num = 1;
  inline bool has_page_num() const;
  inline void clear_page_num();
  static const int kPageNumFieldNumber = 1;
  inline ::google::protobuf::uint32 page_num() const;
  inline void set_page_num(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.gm.tm_manage_ban_state_query_request)
 private:
  inline void set_has_page_num();
  inline void clear_has_page_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 page_num_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_gm_2eproto();
  friend void protobuf_AssignDesc_gm_2eproto();
  friend void protobuf_ShutdownFile_gm_2eproto();

  void InitAsDefaultInstance();
  static tm_manage_ban_state_query_request* default_instance_;
};
// -------------------------------------------------------------------

class mt_manage_ban_state_query_reply : public ::google::protobuf::Message {
 public:
  mt_manage_ban_state_query_reply();
  virtual ~mt_manage_ban_state_query_reply();

  mt_manage_ban_state_query_reply(const mt_manage_ban_state_query_reply& from);

  inline mt_manage_ban_state_query_reply& operator=(const mt_manage_ban_state_query_reply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const mt_manage_ban_state_query_reply& default_instance();

  void Swap(mt_manage_ban_state_query_reply* other);

  // implements Message ----------------------------------------------

  mt_manage_ban_state_query_reply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const mt_manage_ban_state_query_reply& from);
  void MergeFrom(const mt_manage_ban_state_query_reply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 reply_code = 1;
  inline bool has_reply_code() const;
  inline void clear_reply_code();
  static const int kReplyCodeFieldNumber = 1;
  inline ::google::protobuf::uint32 reply_code() const;
  inline void set_reply_code(::google::protobuf::uint32 value);

  // repeated .proto.gm_common.ban_state_info ban_list = 2;
  inline int ban_list_size() const;
  inline void clear_ban_list();
  static const int kBanListFieldNumber = 2;
  inline const ::proto::gm_common::ban_state_info& ban_list(int index) const;
  inline ::proto::gm_common::ban_state_info* mutable_ban_list(int index);
  inline ::proto::gm_common::ban_state_info* add_ban_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto::gm_common::ban_state_info >&
      ban_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto::gm_common::ban_state_info >*
      mutable_ban_list();

  // optional uint32 total_pages = 3;
  inline bool has_total_pages() const;
  inline void clear_total_pages();
  static const int kTotalPagesFieldNumber = 3;
  inline ::google::protobuf::uint32 total_pages() const;
  inline void set_total_pages(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.gm.mt_manage_ban_state_query_reply)
 private:
  inline void set_has_reply_code();
  inline void clear_has_reply_code();
  inline void set_has_total_pages();
  inline void clear_has_total_pages();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto::gm_common::ban_state_info > ban_list_;
  ::google::protobuf::uint32 reply_code_;
  ::google::protobuf::uint32 total_pages_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_gm_2eproto();
  friend void protobuf_AssignDesc_gm_2eproto();
  friend void protobuf_ShutdownFile_gm_2eproto();

  void InitAsDefaultInstance();
  static mt_manage_ban_state_query_reply* default_instance_;
};
// -------------------------------------------------------------------

class tm_monitor_get_behavior_records_request : public ::google::protobuf::Message {
 public:
  tm_monitor_get_behavior_records_request();
  virtual ~tm_monitor_get_behavior_records_request();

  tm_monitor_get_behavior_records_request(const tm_monitor_get_behavior_records_request& from);

  inline tm_monitor_get_behavior_records_request& operator=(const tm_monitor_get_behavior_records_request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const tm_monitor_get_behavior_records_request& default_instance();

  void Swap(tm_monitor_get_behavior_records_request* other);

  // implements Message ----------------------------------------------

  tm_monitor_get_behavior_records_request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const tm_monitor_get_behavior_records_request& from);
  void MergeFrom(const tm_monitor_get_behavior_records_request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 user_uid = 1;
  inline bool has_user_uid() const;
  inline void clear_user_uid();
  static const int kUserUidFieldNumber = 1;
  inline ::google::protobuf::uint64 user_uid() const;
  inline void set_user_uid(::google::protobuf::uint64 value);

  // required uint32 type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);

  // optional uint32 page_num = 3;
  inline bool has_page_num() const;
  inline void clear_page_num();
  static const int kPageNumFieldNumber = 3;
  inline ::google::protobuf::uint32 page_num() const;
  inline void set_page_num(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.gm.tm_monitor_get_behavior_records_request)
 private:
  inline void set_has_user_uid();
  inline void clear_has_user_uid();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_page_num();
  inline void clear_has_page_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 user_uid_;
  ::google::protobuf::uint32 type_;
  ::google::protobuf::uint32 page_num_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_gm_2eproto();
  friend void protobuf_AssignDesc_gm_2eproto();
  friend void protobuf_ShutdownFile_gm_2eproto();

  void InitAsDefaultInstance();
  static tm_monitor_get_behavior_records_request* default_instance_;
};
// -------------------------------------------------------------------

class mt_monitor_get_behavior_records_reply : public ::google::protobuf::Message {
 public:
  mt_monitor_get_behavior_records_reply();
  virtual ~mt_monitor_get_behavior_records_reply();

  mt_monitor_get_behavior_records_reply(const mt_monitor_get_behavior_records_reply& from);

  inline mt_monitor_get_behavior_records_reply& operator=(const mt_monitor_get_behavior_records_reply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const mt_monitor_get_behavior_records_reply& default_instance();

  void Swap(mt_monitor_get_behavior_records_reply* other);

  // implements Message ----------------------------------------------

  mt_monitor_get_behavior_records_reply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const mt_monitor_get_behavior_records_reply& from);
  void MergeFrom(const mt_monitor_get_behavior_records_reply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 reply_code = 1;
  inline bool has_reply_code() const;
  inline void clear_reply_code();
  static const int kReplyCodeFieldNumber = 1;
  inline ::google::protobuf::uint32 reply_code() const;
  inline void set_reply_code(::google::protobuf::uint32 value);

  // optional uint64 user_uid = 2;
  inline bool has_user_uid() const;
  inline void clear_user_uid();
  static const int kUserUidFieldNumber = 2;
  inline ::google::protobuf::uint64 user_uid() const;
  inline void set_user_uid(::google::protobuf::uint64 value);

  // optional uint32 type = 3;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 3;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);

  // repeated .proto.gm_common.sign_record_single sign_records = 4;
  inline int sign_records_size() const;
  inline void clear_sign_records();
  static const int kSignRecordsFieldNumber = 4;
  inline const ::proto::gm_common::sign_record_single& sign_records(int index) const;
  inline ::proto::gm_common::sign_record_single* mutable_sign_records(int index);
  inline ::proto::gm_common::sign_record_single* add_sign_records();
  inline const ::google::protobuf::RepeatedPtrField< ::proto::gm_common::sign_record_single >&
      sign_records() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto::gm_common::sign_record_single >*
      mutable_sign_records();

  // repeated .proto.gm_common.draw_record_single draw_records = 5;
  inline int draw_records_size() const;
  inline void clear_draw_records();
  static const int kDrawRecordsFieldNumber = 5;
  inline const ::proto::gm_common::draw_record_single& draw_records(int index) const;
  inline ::proto::gm_common::draw_record_single* mutable_draw_records(int index);
  inline ::proto::gm_common::draw_record_single* add_draw_records();
  inline const ::google::protobuf::RepeatedPtrField< ::proto::gm_common::draw_record_single >&
      draw_records() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto::gm_common::draw_record_single >*
      mutable_draw_records();

  // repeated .proto.gm_common.buy_record_single buy_records = 6;
  inline int buy_records_size() const;
  inline void clear_buy_records();
  static const int kBuyRecordsFieldNumber = 6;
  inline const ::proto::gm_common::buy_record_single& buy_records(int index) const;
  inline ::proto::gm_common::buy_record_single* mutable_buy_records(int index);
  inline ::proto::gm_common::buy_record_single* add_buy_records();
  inline const ::google::protobuf::RepeatedPtrField< ::proto::gm_common::buy_record_single >&
      buy_records() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto::gm_common::buy_record_single >*
      mutable_buy_records();

  // repeated .proto.gm_common.shop_record_single shop_records = 7;
  inline int shop_records_size() const;
  inline void clear_shop_records();
  static const int kShopRecordsFieldNumber = 7;
  inline const ::proto::gm_common::shop_record_single& shop_records(int index) const;
  inline ::proto::gm_common::shop_record_single* mutable_shop_records(int index);
  inline ::proto::gm_common::shop_record_single* add_shop_records();
  inline const ::google::protobuf::RepeatedPtrField< ::proto::gm_common::shop_record_single >&
      shop_records() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto::gm_common::shop_record_single >*
      mutable_shop_records();

  // optional uint32 total_pages = 8;
  inline bool has_total_pages() const;
  inline void clear_total_pages();
  static const int kTotalPagesFieldNumber = 8;
  inline ::google::protobuf::uint32 total_pages() const;
  inline void set_total_pages(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.gm.mt_monitor_get_behavior_records_reply)
 private:
  inline void set_has_reply_code();
  inline void clear_has_reply_code();
  inline void set_has_user_uid();
  inline void clear_has_user_uid();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_total_pages();
  inline void clear_has_total_pages();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 user_uid_;
  ::google::protobuf::uint32 reply_code_;
  ::google::protobuf::uint32 type_;
  ::google::protobuf::RepeatedPtrField< ::proto::gm_common::sign_record_single > sign_records_;
  ::google::protobuf::RepeatedPtrField< ::proto::gm_common::draw_record_single > draw_records_;
  ::google::protobuf::RepeatedPtrField< ::proto::gm_common::buy_record_single > buy_records_;
  ::google::protobuf::RepeatedPtrField< ::proto::gm_common::shop_record_single > shop_records_;
  ::google::protobuf::uint32 total_pages_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_gm_2eproto();
  friend void protobuf_AssignDesc_gm_2eproto();
  friend void protobuf_ShutdownFile_gm_2eproto();

  void InitAsDefaultInstance();
  static mt_monitor_get_behavior_records_reply* default_instance_;
};
// -------------------------------------------------------------------

class ma_masked_msg_notify : public ::google::protobuf::Message {
 public:
  ma_masked_msg_notify();
  virtual ~ma_masked_msg_notify();

  ma_masked_msg_notify(const ma_masked_msg_notify& from);

  inline ma_masked_msg_notify& operator=(const ma_masked_msg_notify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ma_masked_msg_notify& default_instance();

  void Swap(ma_masked_msg_notify* other);

  // implements Message ----------------------------------------------

  ma_masked_msg_notify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ma_masked_msg_notify& from);
  void MergeFrom(const ma_masked_msg_notify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 masked_list = 1;
  inline int masked_list_size() const;
  inline void clear_masked_list();
  static const int kMaskedListFieldNumber = 1;
  inline ::google::protobuf::uint32 masked_list(int index) const;
  inline void set_masked_list(int index, ::google::protobuf::uint32 value);
  inline void add_masked_list(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      masked_list() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_masked_list();

  // required uint32 masked_flag = 2;
  inline bool has_masked_flag() const;
  inline void clear_masked_flag();
  static const int kMaskedFlagFieldNumber = 2;
  inline ::google::protobuf::uint32 masked_flag() const;
  inline void set_masked_flag(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.gm.ma_masked_msg_notify)
 private:
  inline void set_has_masked_flag();
  inline void clear_has_masked_flag();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > masked_list_;
  ::google::protobuf::uint32 masked_flag_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_gm_2eproto();
  friend void protobuf_AssignDesc_gm_2eproto();
  friend void protobuf_ShutdownFile_gm_2eproto();

  void InitAsDefaultInstance();
  static ma_masked_msg_notify* default_instance_;
};
// -------------------------------------------------------------------

class tm_reload_config_notify : public ::google::protobuf::Message {
 public:
  tm_reload_config_notify();
  virtual ~tm_reload_config_notify();

  tm_reload_config_notify(const tm_reload_config_notify& from);

  inline tm_reload_config_notify& operator=(const tm_reload_config_notify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const tm_reload_config_notify& default_instance();

  void Swap(tm_reload_config_notify* other);

  // implements Message ----------------------------------------------

  tm_reload_config_notify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const tm_reload_config_notify& from);
  void MergeFrom(const tm_reload_config_notify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 load_type = 1;
  inline bool has_load_type() const;
  inline void clear_load_type();
  static const int kLoadTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 load_type() const;
  inline void set_load_type(::google::protobuf::uint32 value);

  // optional string file_name = 2;
  inline bool has_file_name() const;
  inline void clear_file_name();
  static const int kFileNameFieldNumber = 2;
  inline const ::std::string& file_name() const;
  inline void set_file_name(const ::std::string& value);
  inline void set_file_name(const char* value);
  inline void set_file_name(const char* value, size_t size);
  inline ::std::string* mutable_file_name();
  inline ::std::string* release_file_name();
  inline void set_allocated_file_name(::std::string* file_name);

  // @@protoc_insertion_point(class_scope:proto.gm.tm_reload_config_notify)
 private:
  inline void set_has_load_type();
  inline void clear_has_load_type();
  inline void set_has_file_name();
  inline void clear_has_file_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* file_name_;
  ::google::protobuf::uint32 load_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_gm_2eproto();
  friend void protobuf_AssignDesc_gm_2eproto();
  friend void protobuf_ShutdownFile_gm_2eproto();

  void InitAsDefaultInstance();
  static tm_reload_config_notify* default_instance_;
};
// -------------------------------------------------------------------

class me_ban_account_notify : public ::google::protobuf::Message {
 public:
  me_ban_account_notify();
  virtual ~me_ban_account_notify();

  me_ban_account_notify(const me_ban_account_notify& from);

  inline me_ban_account_notify& operator=(const me_ban_account_notify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const me_ban_account_notify& default_instance();

  void Swap(me_ban_account_notify* other);

  // implements Message ----------------------------------------------

  me_ban_account_notify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const me_ban_account_notify& from);
  void MergeFrom(const me_ban_account_notify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 flag = 1;
  inline bool has_flag() const;
  inline void clear_flag();
  static const int kFlagFieldNumber = 1;
  inline ::google::protobuf::uint32 flag() const;
  inline void set_flag(::google::protobuf::uint32 value);

  // required string account = 2;
  inline bool has_account() const;
  inline void clear_account();
  static const int kAccountFieldNumber = 2;
  inline const ::std::string& account() const;
  inline void set_account(const ::std::string& value);
  inline void set_account(const char* value);
  inline void set_account(const char* value, size_t size);
  inline ::std::string* mutable_account();
  inline ::std::string* release_account();
  inline void set_allocated_account(::std::string* account);

  // @@protoc_insertion_point(class_scope:proto.gm.me_ban_account_notify)
 private:
  inline void set_has_flag();
  inline void clear_has_flag();
  inline void set_has_account();
  inline void clear_has_account();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* account_;
  ::google::protobuf::uint32 flag_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_gm_2eproto();
  friend void protobuf_AssignDesc_gm_2eproto();
  friend void protobuf_ShutdownFile_gm_2eproto();

  void InitAsDefaultInstance();
  static me_ban_account_notify* default_instance_;
};
// -------------------------------------------------------------------

class me_access_ip_notify : public ::google::protobuf::Message {
 public:
  me_access_ip_notify();
  virtual ~me_access_ip_notify();

  me_access_ip_notify(const me_access_ip_notify& from);

  inline me_access_ip_notify& operator=(const me_access_ip_notify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const me_access_ip_notify& default_instance();

  void Swap(me_access_ip_notify* other);

  // implements Message ----------------------------------------------

  me_access_ip_notify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const me_access_ip_notify& from);
  void MergeFrom(const me_access_ip_notify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 flag = 1;
  inline bool has_flag() const;
  inline void clear_flag();
  static const int kFlagFieldNumber = 1;
  inline ::google::protobuf::uint32 flag() const;
  inline void set_flag(::google::protobuf::uint32 value);

  // required string ip_address = 2;
  inline bool has_ip_address() const;
  inline void clear_ip_address();
  static const int kIpAddressFieldNumber = 2;
  inline const ::std::string& ip_address() const;
  inline void set_ip_address(const ::std::string& value);
  inline void set_ip_address(const char* value);
  inline void set_ip_address(const char* value, size_t size);
  inline ::std::string* mutable_ip_address();
  inline ::std::string* release_ip_address();
  inline void set_allocated_ip_address(::std::string* ip_address);

  // optional uint32 ip_end = 3;
  inline bool has_ip_end() const;
  inline void clear_ip_end();
  static const int kIpEndFieldNumber = 3;
  inline ::google::protobuf::uint32 ip_end() const;
  inline void set_ip_end(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.gm.me_access_ip_notify)
 private:
  inline void set_has_flag();
  inline void clear_has_flag();
  inline void set_has_ip_address();
  inline void clear_has_ip_address();
  inline void set_has_ip_end();
  inline void clear_has_ip_end();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* ip_address_;
  ::google::protobuf::uint32 flag_;
  ::google::protobuf::uint32 ip_end_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_gm_2eproto();
  friend void protobuf_AssignDesc_gm_2eproto();
  friend void protobuf_ShutdownFile_gm_2eproto();

  void InitAsDefaultInstance();
  static me_access_ip_notify* default_instance_;
};
// -------------------------------------------------------------------

class tm_test_request : public ::google::protobuf::Message {
 public:
  tm_test_request();
  virtual ~tm_test_request();

  tm_test_request(const tm_test_request& from);

  inline tm_test_request& operator=(const tm_test_request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const tm_test_request& default_instance();

  void Swap(tm_test_request* other);

  // implements Message ----------------------------------------------

  tm_test_request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const tm_test_request& from);
  void MergeFrom(const tm_test_request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 test1 = 1;
  inline bool has_test1() const;
  inline void clear_test1();
  static const int kTest1FieldNumber = 1;
  inline ::google::protobuf::uint32 test1() const;
  inline void set_test1(::google::protobuf::uint32 value);

  // required uint32 test2 = 2;
  inline bool has_test2() const;
  inline void clear_test2();
  static const int kTest2FieldNumber = 2;
  inline ::google::protobuf::uint32 test2() const;
  inline void set_test2(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.gm.tm_test_request)
 private:
  inline void set_has_test1();
  inline void clear_has_test1();
  inline void set_has_test2();
  inline void clear_has_test2();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 test1_;
  ::google::protobuf::uint32 test2_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_gm_2eproto();
  friend void protobuf_AssignDesc_gm_2eproto();
  friend void protobuf_ShutdownFile_gm_2eproto();

  void InitAsDefaultInstance();
  static tm_test_request* default_instance_;
};
// -------------------------------------------------------------------

class mt_test_reply : public ::google::protobuf::Message {
 public:
  mt_test_reply();
  virtual ~mt_test_reply();

  mt_test_reply(const mt_test_reply& from);

  inline mt_test_reply& operator=(const mt_test_reply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const mt_test_reply& default_instance();

  void Swap(mt_test_reply* other);

  // implements Message ----------------------------------------------

  mt_test_reply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const mt_test_reply& from);
  void MergeFrom(const mt_test_reply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 test1 = 1;
  inline bool has_test1() const;
  inline void clear_test1();
  static const int kTest1FieldNumber = 1;
  inline ::google::protobuf::uint32 test1() const;
  inline void set_test1(::google::protobuf::uint32 value);

  // required uint32 test2 = 2;
  inline bool has_test2() const;
  inline void clear_test2();
  static const int kTest2FieldNumber = 2;
  inline ::google::protobuf::uint32 test2() const;
  inline void set_test2(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.gm.mt_test_reply)
 private:
  inline void set_has_test1();
  inline void clear_has_test1();
  inline void set_has_test2();
  inline void clear_has_test2();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 test1_;
  ::google::protobuf::uint32 test2_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_gm_2eproto();
  friend void protobuf_AssignDesc_gm_2eproto();
  friend void protobuf_ShutdownFile_gm_2eproto();

  void InitAsDefaultInstance();
  static mt_test_reply* default_instance_;
};
// -------------------------------------------------------------------

class gm_data_threshold_notify : public ::google::protobuf::Message {
 public:
  gm_data_threshold_notify();
  virtual ~gm_data_threshold_notify();

  gm_data_threshold_notify(const gm_data_threshold_notify& from);

  inline gm_data_threshold_notify& operator=(const gm_data_threshold_notify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gm_data_threshold_notify& default_instance();

  void Swap(gm_data_threshold_notify* other);

  // implements Message ----------------------------------------------

  gm_data_threshold_notify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gm_data_threshold_notify& from);
  void MergeFrom(const gm_data_threshold_notify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::uint64 uid() const;
  inline void set_uid(::google::protobuf::uint64 value);

  // optional uint32 type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);

  // optional uint32 value = 3;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 3;
  inline ::google::protobuf::uint32 value() const;
  inline void set_value(::google::protobuf::uint32 value);

  // optional uint32 param = 4 [default = 0];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 4;
  inline ::google::protobuf::uint32 param() const;
  inline void set_param(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.gm.gm_data_threshold_notify)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_value();
  inline void clear_has_value();
  inline void set_has_param();
  inline void clear_has_param();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 uid_;
  ::google::protobuf::uint32 type_;
  ::google::protobuf::uint32 value_;
  ::google::protobuf::uint32 param_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_gm_2eproto();
  friend void protobuf_AssignDesc_gm_2eproto();
  friend void protobuf_ShutdownFile_gm_2eproto();

  void InitAsDefaultInstance();
  static gm_data_threshold_notify* default_instance_;
};
// -------------------------------------------------------------------

class em_do_change_cdkey_request : public ::google::protobuf::Message {
 public:
  em_do_change_cdkey_request();
  virtual ~em_do_change_cdkey_request();

  em_do_change_cdkey_request(const em_do_change_cdkey_request& from);

  inline em_do_change_cdkey_request& operator=(const em_do_change_cdkey_request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const em_do_change_cdkey_request& default_instance();

  void Swap(em_do_change_cdkey_request* other);

  // implements Message ----------------------------------------------

  em_do_change_cdkey_request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const em_do_change_cdkey_request& from);
  void MergeFrom(const em_do_change_cdkey_request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 role_uid = 1;
  inline bool has_role_uid() const;
  inline void clear_role_uid();
  static const int kRoleUidFieldNumber = 1;
  inline ::google::protobuf::uint64 role_uid() const;
  inline void set_role_uid(::google::protobuf::uint64 value);

  // optional uint32 channel_id = 2;
  inline bool has_channel_id() const;
  inline void clear_channel_id();
  static const int kChannelIdFieldNumber = 2;
  inline ::google::protobuf::uint32 channel_id() const;
  inline void set_channel_id(::google::protobuf::uint32 value);

  // optional string key_code = 3;
  inline bool has_key_code() const;
  inline void clear_key_code();
  static const int kKeyCodeFieldNumber = 3;
  inline const ::std::string& key_code() const;
  inline void set_key_code(const ::std::string& value);
  inline void set_key_code(const char* value);
  inline void set_key_code(const char* value, size_t size);
  inline ::std::string* mutable_key_code();
  inline ::std::string* release_key_code();
  inline void set_allocated_key_code(::std::string* key_code);

  // @@protoc_insertion_point(class_scope:proto.gm.em_do_change_cdkey_request)
 private:
  inline void set_has_role_uid();
  inline void clear_has_role_uid();
  inline void set_has_channel_id();
  inline void clear_has_channel_id();
  inline void set_has_key_code();
  inline void clear_has_key_code();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 role_uid_;
  ::std::string* key_code_;
  ::google::protobuf::uint32 channel_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_gm_2eproto();
  friend void protobuf_AssignDesc_gm_2eproto();
  friend void protobuf_ShutdownFile_gm_2eproto();

  void InitAsDefaultInstance();
  static em_do_change_cdkey_request* default_instance_;
};
// -------------------------------------------------------------------

class me_do_change_cdkey_reply : public ::google::protobuf::Message {
 public:
  me_do_change_cdkey_reply();
  virtual ~me_do_change_cdkey_reply();

  me_do_change_cdkey_reply(const me_do_change_cdkey_reply& from);

  inline me_do_change_cdkey_reply& operator=(const me_do_change_cdkey_reply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const me_do_change_cdkey_reply& default_instance();

  void Swap(me_do_change_cdkey_reply* other);

  // implements Message ----------------------------------------------

  me_do_change_cdkey_reply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const me_do_change_cdkey_reply& from);
  void MergeFrom(const me_do_change_cdkey_reply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 reply_code = 1;
  inline bool has_reply_code() const;
  inline void clear_reply_code();
  static const int kReplyCodeFieldNumber = 1;
  inline ::google::protobuf::uint32 reply_code() const;
  inline void set_reply_code(::google::protobuf::uint32 value);

  // optional uint64 role_uid = 2;
  inline bool has_role_uid() const;
  inline void clear_role_uid();
  static const int kRoleUidFieldNumber = 2;
  inline ::google::protobuf::uint64 role_uid() const;
  inline void set_role_uid(::google::protobuf::uint64 value);

  // optional uint32 key_type = 3;
  inline bool has_key_type() const;
  inline void clear_key_type();
  static const int kKeyTypeFieldNumber = 3;
  inline ::google::protobuf::uint32 key_type() const;
  inline void set_key_type(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.gm.me_do_change_cdkey_reply)
 private:
  inline void set_has_reply_code();
  inline void clear_has_reply_code();
  inline void set_has_role_uid();
  inline void clear_has_role_uid();
  inline void set_has_key_type();
  inline void clear_has_key_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 role_uid_;
  ::google::protobuf::uint32 reply_code_;
  ::google::protobuf::uint32 key_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_gm_2eproto();
  friend void protobuf_AssignDesc_gm_2eproto();
  friend void protobuf_ShutdownFile_gm_2eproto();

  void InitAsDefaultInstance();
  static me_do_change_cdkey_reply* default_instance_;
};
// -------------------------------------------------------------------

class me_send_mail_request : public ::google::protobuf::Message {
 public:
  me_send_mail_request();
  virtual ~me_send_mail_request();

  me_send_mail_request(const me_send_mail_request& from);

  inline me_send_mail_request& operator=(const me_send_mail_request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const me_send_mail_request& default_instance();

  void Swap(me_send_mail_request* other);

  // implements Message ----------------------------------------------

  me_send_mail_request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const me_send_mail_request& from);
  void MergeFrom(const me_send_mail_request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .proto.gm_common.global_mail_single mail_data = 1;
  inline bool has_mail_data() const;
  inline void clear_mail_data();
  static const int kMailDataFieldNumber = 1;
  inline const ::proto::gm_common::global_mail_single& mail_data() const;
  inline ::proto::gm_common::global_mail_single* mutable_mail_data();
  inline ::proto::gm_common::global_mail_single* release_mail_data();
  inline void set_allocated_mail_data(::proto::gm_common::global_mail_single* mail_data);

  // @@protoc_insertion_point(class_scope:proto.gm.me_send_mail_request)
 private:
  inline void set_has_mail_data();
  inline void clear_has_mail_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::proto::gm_common::global_mail_single* mail_data_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_gm_2eproto();
  friend void protobuf_AssignDesc_gm_2eproto();
  friend void protobuf_ShutdownFile_gm_2eproto();

  void InitAsDefaultInstance();
  static me_send_mail_request* default_instance_;
};
// -------------------------------------------------------------------

class tm_get_user_ol_num_request : public ::google::protobuf::Message {
 public:
  tm_get_user_ol_num_request();
  virtual ~tm_get_user_ol_num_request();

  tm_get_user_ol_num_request(const tm_get_user_ol_num_request& from);

  inline tm_get_user_ol_num_request& operator=(const tm_get_user_ol_num_request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const tm_get_user_ol_num_request& default_instance();

  void Swap(tm_get_user_ol_num_request* other);

  // implements Message ----------------------------------------------

  tm_get_user_ol_num_request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const tm_get_user_ol_num_request& from);
  void MergeFrom(const tm_get_user_ol_num_request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:proto.gm.tm_get_user_ol_num_request)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_gm_2eproto();
  friend void protobuf_AssignDesc_gm_2eproto();
  friend void protobuf_ShutdownFile_gm_2eproto();

  void InitAsDefaultInstance();
  static tm_get_user_ol_num_request* default_instance_;
};
// -------------------------------------------------------------------

class mt_get_user_ol_num_reply : public ::google::protobuf::Message {
 public:
  mt_get_user_ol_num_reply();
  virtual ~mt_get_user_ol_num_reply();

  mt_get_user_ol_num_reply(const mt_get_user_ol_num_reply& from);

  inline mt_get_user_ol_num_reply& operator=(const mt_get_user_ol_num_reply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const mt_get_user_ol_num_reply& default_instance();

  void Swap(mt_get_user_ol_num_reply* other);

  // implements Message ----------------------------------------------

  mt_get_user_ol_num_reply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const mt_get_user_ol_num_reply& from);
  void MergeFrom(const mt_get_user_ol_num_reply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 ol_num = 1;
  inline bool has_ol_num() const;
  inline void clear_ol_num();
  static const int kOlNumFieldNumber = 1;
  inline ::google::protobuf::uint32 ol_num() const;
  inline void set_ol_num(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.gm.mt_get_user_ol_num_reply)
 private:
  inline void set_has_ol_num();
  inline void clear_has_ol_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 ol_num_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_gm_2eproto();
  friend void protobuf_AssignDesc_gm_2eproto();
  friend void protobuf_ShutdownFile_gm_2eproto();

  void InitAsDefaultInstance();
  static mt_get_user_ol_num_reply* default_instance_;
};
// -------------------------------------------------------------------

class me_get_user_ol_num_request : public ::google::protobuf::Message {
 public:
  me_get_user_ol_num_request();
  virtual ~me_get_user_ol_num_request();

  me_get_user_ol_num_request(const me_get_user_ol_num_request& from);

  inline me_get_user_ol_num_request& operator=(const me_get_user_ol_num_request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const me_get_user_ol_num_request& default_instance();

  void Swap(me_get_user_ol_num_request* other);

  // implements Message ----------------------------------------------

  me_get_user_ol_num_request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const me_get_user_ol_num_request& from);
  void MergeFrom(const me_get_user_ol_num_request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 admin_id = 1;
  inline bool has_admin_id() const;
  inline void clear_admin_id();
  static const int kAdminIdFieldNumber = 1;
  inline ::google::protobuf::uint32 admin_id() const;
  inline void set_admin_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.gm.me_get_user_ol_num_request)
 private:
  inline void set_has_admin_id();
  inline void clear_has_admin_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 admin_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_gm_2eproto();
  friend void protobuf_AssignDesc_gm_2eproto();
  friend void protobuf_ShutdownFile_gm_2eproto();

  void InitAsDefaultInstance();
  static me_get_user_ol_num_request* default_instance_;
};
// -------------------------------------------------------------------

class em_get_user_ol_num_reply : public ::google::protobuf::Message {
 public:
  em_get_user_ol_num_reply();
  virtual ~em_get_user_ol_num_reply();

  em_get_user_ol_num_reply(const em_get_user_ol_num_reply& from);

  inline em_get_user_ol_num_reply& operator=(const em_get_user_ol_num_reply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const em_get_user_ol_num_reply& default_instance();

  void Swap(em_get_user_ol_num_reply* other);

  // implements Message ----------------------------------------------

  em_get_user_ol_num_reply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const em_get_user_ol_num_reply& from);
  void MergeFrom(const em_get_user_ol_num_reply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 ol_num = 1;
  inline bool has_ol_num() const;
  inline void clear_ol_num();
  static const int kOlNumFieldNumber = 1;
  inline ::google::protobuf::uint32 ol_num() const;
  inline void set_ol_num(::google::protobuf::uint32 value);

  // optional uint32 admin_id = 2;
  inline bool has_admin_id() const;
  inline void clear_admin_id();
  static const int kAdminIdFieldNumber = 2;
  inline ::google::protobuf::uint32 admin_id() const;
  inline void set_admin_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.gm.em_get_user_ol_num_reply)
 private:
  inline void set_has_ol_num();
  inline void clear_has_ol_num();
  inline void set_has_admin_id();
  inline void clear_has_admin_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 ol_num_;
  ::google::protobuf::uint32 admin_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_gm_2eproto();
  friend void protobuf_AssignDesc_gm_2eproto();
  friend void protobuf_ShutdownFile_gm_2eproto();

  void InitAsDefaultInstance();
  static em_get_user_ol_num_reply* default_instance_;
};
// -------------------------------------------------------------------

class tm_send_notice_request : public ::google::protobuf::Message {
 public:
  tm_send_notice_request();
  virtual ~tm_send_notice_request();

  tm_send_notice_request(const tm_send_notice_request& from);

  inline tm_send_notice_request& operator=(const tm_send_notice_request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const tm_send_notice_request& default_instance();

  void Swap(tm_send_notice_request* other);

  // implements Message ----------------------------------------------

  tm_send_notice_request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const tm_send_notice_request& from);
  void MergeFrom(const tm_send_notice_request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);

  // optional uint32 tick = 2;
  inline bool has_tick() const;
  inline void clear_tick();
  static const int kTickFieldNumber = 2;
  inline ::google::protobuf::uint32 tick() const;
  inline void set_tick(::google::protobuf::uint32 value);

  // optional uint32 start_time = 3;
  inline bool has_start_time() const;
  inline void clear_start_time();
  static const int kStartTimeFieldNumber = 3;
  inline ::google::protobuf::uint32 start_time() const;
  inline void set_start_time(::google::protobuf::uint32 value);

  // optional uint32 end_time = 4;
  inline bool has_end_time() const;
  inline void clear_end_time();
  static const int kEndTimeFieldNumber = 4;
  inline ::google::protobuf::uint32 end_time() const;
  inline void set_end_time(::google::protobuf::uint32 value);

  // optional string notice = 5;
  inline bool has_notice() const;
  inline void clear_notice();
  static const int kNoticeFieldNumber = 5;
  inline const ::std::string& notice() const;
  inline void set_notice(const ::std::string& value);
  inline void set_notice(const char* value);
  inline void set_notice(const char* value, size_t size);
  inline ::std::string* mutable_notice();
  inline ::std::string* release_notice();
  inline void set_allocated_notice(::std::string* notice);

  // @@protoc_insertion_point(class_scope:proto.gm.tm_send_notice_request)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_tick();
  inline void clear_has_tick();
  inline void set_has_start_time();
  inline void clear_has_start_time();
  inline void set_has_end_time();
  inline void clear_has_end_time();
  inline void set_has_notice();
  inline void clear_has_notice();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 type_;
  ::google::protobuf::uint32 tick_;
  ::google::protobuf::uint32 start_time_;
  ::google::protobuf::uint32 end_time_;
  ::std::string* notice_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_gm_2eproto();
  friend void protobuf_AssignDesc_gm_2eproto();
  friend void protobuf_ShutdownFile_gm_2eproto();

  void InitAsDefaultInstance();
  static tm_send_notice_request* default_instance_;
};
// -------------------------------------------------------------------

class mt_send_notice_reply : public ::google::protobuf::Message {
 public:
  mt_send_notice_reply();
  virtual ~mt_send_notice_reply();

  mt_send_notice_reply(const mt_send_notice_reply& from);

  inline mt_send_notice_reply& operator=(const mt_send_notice_reply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const mt_send_notice_reply& default_instance();

  void Swap(mt_send_notice_reply* other);

  // implements Message ----------------------------------------------

  mt_send_notice_reply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const mt_send_notice_reply& from);
  void MergeFrom(const mt_send_notice_reply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 reply_code = 1;
  inline bool has_reply_code() const;
  inline void clear_reply_code();
  static const int kReplyCodeFieldNumber = 1;
  inline ::google::protobuf::uint32 reply_code() const;
  inline void set_reply_code(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.gm.mt_send_notice_reply)
 private:
  inline void set_has_reply_code();
  inline void clear_has_reply_code();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 reply_code_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_gm_2eproto();
  friend void protobuf_AssignDesc_gm_2eproto();
  friend void protobuf_ShutdownFile_gm_2eproto();

  void InitAsDefaultInstance();
  static mt_send_notice_reply* default_instance_;
};
// -------------------------------------------------------------------

class me_send_notice_request : public ::google::protobuf::Message {
 public:
  me_send_notice_request();
  virtual ~me_send_notice_request();

  me_send_notice_request(const me_send_notice_request& from);

  inline me_send_notice_request& operator=(const me_send_notice_request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const me_send_notice_request& default_instance();

  void Swap(me_send_notice_request* other);

  // implements Message ----------------------------------------------

  me_send_notice_request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const me_send_notice_request& from);
  void MergeFrom(const me_send_notice_request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .proto.gm_common.gm_notice_single notice_data = 1;
  inline bool has_notice_data() const;
  inline void clear_notice_data();
  static const int kNoticeDataFieldNumber = 1;
  inline const ::proto::gm_common::gm_notice_single& notice_data() const;
  inline ::proto::gm_common::gm_notice_single* mutable_notice_data();
  inline ::proto::gm_common::gm_notice_single* release_notice_data();
  inline void set_allocated_notice_data(::proto::gm_common::gm_notice_single* notice_data);

  // @@protoc_insertion_point(class_scope:proto.gm.me_send_notice_request)
 private:
  inline void set_has_notice_data();
  inline void clear_has_notice_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::proto::gm_common::gm_notice_single* notice_data_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_gm_2eproto();
  friend void protobuf_AssignDesc_gm_2eproto();
  friend void protobuf_ShutdownFile_gm_2eproto();

  void InitAsDefaultInstance();
  static me_send_notice_request* default_instance_;
};
// -------------------------------------------------------------------

class em_send_notice_reply : public ::google::protobuf::Message {
 public:
  em_send_notice_reply();
  virtual ~em_send_notice_reply();

  em_send_notice_reply(const em_send_notice_reply& from);

  inline em_send_notice_reply& operator=(const em_send_notice_reply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const em_send_notice_reply& default_instance();

  void Swap(em_send_notice_reply* other);

  // implements Message ----------------------------------------------

  em_send_notice_reply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const em_send_notice_reply& from);
  void MergeFrom(const em_send_notice_reply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 reply_code = 1;
  inline bool has_reply_code() const;
  inline void clear_reply_code();
  static const int kReplyCodeFieldNumber = 1;
  inline ::google::protobuf::uint32 reply_code() const;
  inline void set_reply_code(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.gm.em_send_notice_reply)
 private:
  inline void set_has_reply_code();
  inline void clear_has_reply_code();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 reply_code_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_gm_2eproto();
  friend void protobuf_AssignDesc_gm_2eproto();
  friend void protobuf_ShutdownFile_gm_2eproto();

  void InitAsDefaultInstance();
  static em_send_notice_reply* default_instance_;
};
// -------------------------------------------------------------------

class me_transport_ntf : public ::google::protobuf::Message {
 public:
  me_transport_ntf();
  virtual ~me_transport_ntf();

  me_transport_ntf(const me_transport_ntf& from);

  inline me_transport_ntf& operator=(const me_transport_ntf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const me_transport_ntf& default_instance();

  void Swap(me_transport_ntf* other);

  // implements Message ----------------------------------------------

  me_transport_ntf* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const me_transport_ntf& from);
  void MergeFrom(const me_transport_ntf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 role_uid = 1;
  inline bool has_role_uid() const;
  inline void clear_role_uid();
  static const int kRoleUidFieldNumber = 1;
  inline ::google::protobuf::uint64 role_uid() const;
  inline void set_role_uid(::google::protobuf::uint64 value);

  // optional uint32 scene_id = 2;
  inline bool has_scene_id() const;
  inline void clear_scene_id();
  static const int kSceneIdFieldNumber = 2;
  inline ::google::protobuf::uint32 scene_id() const;
  inline void set_scene_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.gm.me_transport_ntf)
 private:
  inline void set_has_role_uid();
  inline void clear_has_role_uid();
  inline void set_has_scene_id();
  inline void clear_has_scene_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 role_uid_;
  ::google::protobuf::uint32 scene_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_gm_2eproto();
  friend void protobuf_AssignDesc_gm_2eproto();
  friend void protobuf_ShutdownFile_gm_2eproto();

  void InitAsDefaultInstance();
  static me_transport_ntf* default_instance_;
};
// -------------------------------------------------------------------

class tm_set_user_create_limit_request : public ::google::protobuf::Message {
 public:
  tm_set_user_create_limit_request();
  virtual ~tm_set_user_create_limit_request();

  tm_set_user_create_limit_request(const tm_set_user_create_limit_request& from);

  inline tm_set_user_create_limit_request& operator=(const tm_set_user_create_limit_request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const tm_set_user_create_limit_request& default_instance();

  void Swap(tm_set_user_create_limit_request* other);

  // implements Message ----------------------------------------------

  tm_set_user_create_limit_request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const tm_set_user_create_limit_request& from);
  void MergeFrom(const tm_set_user_create_limit_request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 flag = 1;
  inline bool has_flag() const;
  inline void clear_flag();
  static const int kFlagFieldNumber = 1;
  inline ::google::protobuf::uint32 flag() const;
  inline void set_flag(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.gm.tm_set_user_create_limit_request)
 private:
  inline void set_has_flag();
  inline void clear_has_flag();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 flag_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_gm_2eproto();
  friend void protobuf_AssignDesc_gm_2eproto();
  friend void protobuf_ShutdownFile_gm_2eproto();

  void InitAsDefaultInstance();
  static tm_set_user_create_limit_request* default_instance_;
};
// -------------------------------------------------------------------

class mt_set_user_create_limit_reply : public ::google::protobuf::Message {
 public:
  mt_set_user_create_limit_reply();
  virtual ~mt_set_user_create_limit_reply();

  mt_set_user_create_limit_reply(const mt_set_user_create_limit_reply& from);

  inline mt_set_user_create_limit_reply& operator=(const mt_set_user_create_limit_reply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const mt_set_user_create_limit_reply& default_instance();

  void Swap(mt_set_user_create_limit_reply* other);

  // implements Message ----------------------------------------------

  mt_set_user_create_limit_reply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const mt_set_user_create_limit_reply& from);
  void MergeFrom(const mt_set_user_create_limit_reply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 reply_code = 1;
  inline bool has_reply_code() const;
  inline void clear_reply_code();
  static const int kReplyCodeFieldNumber = 1;
  inline ::google::protobuf::uint32 reply_code() const;
  inline void set_reply_code(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.gm.mt_set_user_create_limit_reply)
 private:
  inline void set_has_reply_code();
  inline void clear_has_reply_code();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 reply_code_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_gm_2eproto();
  friend void protobuf_AssignDesc_gm_2eproto();
  friend void protobuf_ShutdownFile_gm_2eproto();

  void InitAsDefaultInstance();
  static mt_set_user_create_limit_reply* default_instance_;
};
// -------------------------------------------------------------------

class me_send_gm_msg_to_account_request : public ::google::protobuf::Message {
 public:
  me_send_gm_msg_to_account_request();
  virtual ~me_send_gm_msg_to_account_request();

  me_send_gm_msg_to_account_request(const me_send_gm_msg_to_account_request& from);

  inline me_send_gm_msg_to_account_request& operator=(const me_send_gm_msg_to_account_request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const me_send_gm_msg_to_account_request& default_instance();

  void Swap(me_send_gm_msg_to_account_request* other);

  // implements Message ----------------------------------------------

  me_send_gm_msg_to_account_request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const me_send_gm_msg_to_account_request& from);
  void MergeFrom(const me_send_gm_msg_to_account_request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 cmd_type = 1;
  inline bool has_cmd_type() const;
  inline void clear_cmd_type();
  static const int kCmdTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 cmd_type() const;
  inline void set_cmd_type(::google::protobuf::uint32 value);

  // optional .proto.common.gm_msg_to_account msg = 2;
  inline bool has_msg() const;
  inline void clear_msg();
  static const int kMsgFieldNumber = 2;
  inline const ::proto::common::gm_msg_to_account& msg() const;
  inline ::proto::common::gm_msg_to_account* mutable_msg();
  inline ::proto::common::gm_msg_to_account* release_msg();
  inline void set_allocated_msg(::proto::common::gm_msg_to_account* msg);

  // @@protoc_insertion_point(class_scope:proto.gm.me_send_gm_msg_to_account_request)
 private:
  inline void set_has_cmd_type();
  inline void clear_has_cmd_type();
  inline void set_has_msg();
  inline void clear_has_msg();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::proto::common::gm_msg_to_account* msg_;
  ::google::protobuf::uint32 cmd_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_gm_2eproto();
  friend void protobuf_AssignDesc_gm_2eproto();
  friend void protobuf_ShutdownFile_gm_2eproto();

  void InitAsDefaultInstance();
  static me_send_gm_msg_to_account_request* default_instance_;
};
// -------------------------------------------------------------------

class tm_refresh_login_list : public ::google::protobuf::Message {
 public:
  tm_refresh_login_list();
  virtual ~tm_refresh_login_list();

  tm_refresh_login_list(const tm_refresh_login_list& from);

  inline tm_refresh_login_list& operator=(const tm_refresh_login_list& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const tm_refresh_login_list& default_instance();

  void Swap(tm_refresh_login_list* other);

  // implements Message ----------------------------------------------

  tm_refresh_login_list* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const tm_refresh_login_list& from);
  void MergeFrom(const tm_refresh_login_list& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:proto.gm.tm_refresh_login_list)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_gm_2eproto();
  friend void protobuf_AssignDesc_gm_2eproto();
  friend void protobuf_ShutdownFile_gm_2eproto();

  void InitAsDefaultInstance();
  static tm_refresh_login_list* default_instance_;
};
// -------------------------------------------------------------------

class tm_search_role_byid_request : public ::google::protobuf::Message {
 public:
  tm_search_role_byid_request();
  virtual ~tm_search_role_byid_request();

  tm_search_role_byid_request(const tm_search_role_byid_request& from);

  inline tm_search_role_byid_request& operator=(const tm_search_role_byid_request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const tm_search_role_byid_request& default_instance();

  void Swap(tm_search_role_byid_request* other);

  // implements Message ----------------------------------------------

  tm_search_role_byid_request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const tm_search_role_byid_request& from);
  void MergeFrom(const tm_search_role_byid_request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 role_did = 1;
  inline bool has_role_did() const;
  inline void clear_role_did();
  static const int kRoleDidFieldNumber = 1;
  inline ::google::protobuf::uint32 role_did() const;
  inline void set_role_did(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.gm.tm_search_role_byid_request)
 private:
  inline void set_has_role_did();
  inline void clear_has_role_did();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 role_did_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_gm_2eproto();
  friend void protobuf_AssignDesc_gm_2eproto();
  friend void protobuf_ShutdownFile_gm_2eproto();

  void InitAsDefaultInstance();
  static tm_search_role_byid_request* default_instance_;
};
// -------------------------------------------------------------------

class tm_search_role_byname_request : public ::google::protobuf::Message {
 public:
  tm_search_role_byname_request();
  virtual ~tm_search_role_byname_request();

  tm_search_role_byname_request(const tm_search_role_byname_request& from);

  inline tm_search_role_byname_request& operator=(const tm_search_role_byname_request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const tm_search_role_byname_request& default_instance();

  void Swap(tm_search_role_byname_request* other);

  // implements Message ----------------------------------------------

  tm_search_role_byname_request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const tm_search_role_byname_request& from);
  void MergeFrom(const tm_search_role_byname_request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string role_name = 1;
  inline bool has_role_name() const;
  inline void clear_role_name();
  static const int kRoleNameFieldNumber = 1;
  inline const ::std::string& role_name() const;
  inline void set_role_name(const ::std::string& value);
  inline void set_role_name(const char* value);
  inline void set_role_name(const char* value, size_t size);
  inline ::std::string* mutable_role_name();
  inline ::std::string* release_role_name();
  inline void set_allocated_role_name(::std::string* role_name);

  // @@protoc_insertion_point(class_scope:proto.gm.tm_search_role_byname_request)
 private:
  inline void set_has_role_name();
  inline void clear_has_role_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* role_name_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_gm_2eproto();
  friend void protobuf_AssignDesc_gm_2eproto();
  friend void protobuf_ShutdownFile_gm_2eproto();

  void InitAsDefaultInstance();
  static tm_search_role_byname_request* default_instance_;
};
// -------------------------------------------------------------------

class mt_search_role_byname_reply : public ::google::protobuf::Message {
 public:
  mt_search_role_byname_reply();
  virtual ~mt_search_role_byname_reply();

  mt_search_role_byname_reply(const mt_search_role_byname_reply& from);

  inline mt_search_role_byname_reply& operator=(const mt_search_role_byname_reply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const mt_search_role_byname_reply& default_instance();

  void Swap(mt_search_role_byname_reply* other);

  // implements Message ----------------------------------------------

  mt_search_role_byname_reply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const mt_search_role_byname_reply& from);
  void MergeFrom(const mt_search_role_byname_reply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 role_did = 1;
  inline bool has_role_did() const;
  inline void clear_role_did();
  static const int kRoleDidFieldNumber = 1;
  inline ::google::protobuf::uint32 role_did() const;
  inline void set_role_did(::google::protobuf::uint32 value);

  // optional string role_name = 2;
  inline bool has_role_name() const;
  inline void clear_role_name();
  static const int kRoleNameFieldNumber = 2;
  inline const ::std::string& role_name() const;
  inline void set_role_name(const ::std::string& value);
  inline void set_role_name(const char* value);
  inline void set_role_name(const char* value, size_t size);
  inline ::std::string* mutable_role_name();
  inline ::std::string* release_role_name();
  inline void set_allocated_role_name(::std::string* role_name);

  // optional uint32 create_time = 3;
  inline bool has_create_time() const;
  inline void clear_create_time();
  static const int kCreateTimeFieldNumber = 3;
  inline ::google::protobuf::uint32 create_time() const;
  inline void set_create_time(::google::protobuf::uint32 value);

  // optional uint32 last_login_time = 4;
  inline bool has_last_login_time() const;
  inline void clear_last_login_time();
  static const int kLastLoginTimeFieldNumber = 4;
  inline ::google::protobuf::uint32 last_login_time() const;
  inline void set_last_login_time(::google::protobuf::uint32 value);

  // optional uint32 last_logout_time = 5;
  inline bool has_last_logout_time() const;
  inline void clear_last_logout_time();
  static const int kLastLogoutTimeFieldNumber = 5;
  inline ::google::protobuf::uint32 last_logout_time() const;
  inline void set_last_logout_time(::google::protobuf::uint32 value);

  // optional uint32 level = 6;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 6;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // optional uint32 total_recharge = 7;
  inline bool has_total_recharge() const;
  inline void clear_total_recharge();
  static const int kTotalRechargeFieldNumber = 7;
  inline ::google::protobuf::uint32 total_recharge() const;
  inline void set_total_recharge(::google::protobuf::uint32 value);

  // optional uint32 gold = 8;
  inline bool has_gold() const;
  inline void clear_gold();
  static const int kGoldFieldNumber = 8;
  inline ::google::protobuf::uint32 gold() const;
  inline void set_gold(::google::protobuf::uint32 value);

  // optional uint32 silver = 9;
  inline bool has_silver() const;
  inline void clear_silver();
  static const int kSilverFieldNumber = 9;
  inline ::google::protobuf::uint32 silver() const;
  inline void set_silver(::google::protobuf::uint32 value);

  // optional uint32 copper = 10;
  inline bool has_copper() const;
  inline void clear_copper();
  static const int kCopperFieldNumber = 10;
  inline ::google::protobuf::uint32 copper() const;
  inline void set_copper(::google::protobuf::uint32 value);

  // optional uint32 life_stone = 11;
  inline bool has_life_stone() const;
  inline void clear_life_stone();
  static const int kLifeStoneFieldNumber = 11;
  inline ::google::protobuf::uint32 life_stone() const;
  inline void set_life_stone(::google::protobuf::uint32 value);

  // optional uint32 fighting = 12;
  inline bool has_fighting() const;
  inline void clear_fighting();
  static const int kFightingFieldNumber = 12;
  inline ::google::protobuf::uint32 fighting() const;
  inline void set_fighting(::google::protobuf::uint32 value);

  // optional uint32 scene_id = 13;
  inline bool has_scene_id() const;
  inline void clear_scene_id();
  static const int kSceneIdFieldNumber = 13;
  inline ::google::protobuf::uint32 scene_id() const;
  inline void set_scene_id(::google::protobuf::uint32 value);

  // optional uint32 vip_level = 14;
  inline bool has_vip_level() const;
  inline void clear_vip_level();
  static const int kVipLevelFieldNumber = 14;
  inline ::google::protobuf::uint32 vip_level() const;
  inline void set_vip_level(::google::protobuf::uint32 value);

  // optional uint64 role_uid = 15;
  inline bool has_role_uid() const;
  inline void clear_role_uid();
  static const int kRoleUidFieldNumber = 15;
  inline ::google::protobuf::uint64 role_uid() const;
  inline void set_role_uid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:proto.gm.mt_search_role_byname_reply)
 private:
  inline void set_has_role_did();
  inline void clear_has_role_did();
  inline void set_has_role_name();
  inline void clear_has_role_name();
  inline void set_has_create_time();
  inline void clear_has_create_time();
  inline void set_has_last_login_time();
  inline void clear_has_last_login_time();
  inline void set_has_last_logout_time();
  inline void clear_has_last_logout_time();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_total_recharge();
  inline void clear_has_total_recharge();
  inline void set_has_gold();
  inline void clear_has_gold();
  inline void set_has_silver();
  inline void clear_has_silver();
  inline void set_has_copper();
  inline void clear_has_copper();
  inline void set_has_life_stone();
  inline void clear_has_life_stone();
  inline void set_has_fighting();
  inline void clear_has_fighting();
  inline void set_has_scene_id();
  inline void clear_has_scene_id();
  inline void set_has_vip_level();
  inline void clear_has_vip_level();
  inline void set_has_role_uid();
  inline void clear_has_role_uid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* role_name_;
  ::google::protobuf::uint32 role_did_;
  ::google::protobuf::uint32 create_time_;
  ::google::protobuf::uint32 last_login_time_;
  ::google::protobuf::uint32 last_logout_time_;
  ::google::protobuf::uint32 level_;
  ::google::protobuf::uint32 total_recharge_;
  ::google::protobuf::uint32 gold_;
  ::google::protobuf::uint32 silver_;
  ::google::protobuf::uint32 copper_;
  ::google::protobuf::uint32 life_stone_;
  ::google::protobuf::uint32 fighting_;
  ::google::protobuf::uint32 scene_id_;
  ::google::protobuf::uint64 role_uid_;
  ::google::protobuf::uint32 vip_level_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(15 + 31) / 32];

  friend void  protobuf_AddDesc_gm_2eproto();
  friend void protobuf_AssignDesc_gm_2eproto();
  friend void protobuf_ShutdownFile_gm_2eproto();

  void InitAsDefaultInstance();
  static mt_search_role_byname_reply* default_instance_;
};
// -------------------------------------------------------------------

class mall_reload_xml_notify : public ::google::protobuf::Message {
 public:
  mall_reload_xml_notify();
  virtual ~mall_reload_xml_notify();

  mall_reload_xml_notify(const mall_reload_xml_notify& from);

  inline mall_reload_xml_notify& operator=(const mall_reload_xml_notify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const mall_reload_xml_notify& default_instance();

  void Swap(mall_reload_xml_notify* other);

  // implements Message ----------------------------------------------

  mall_reload_xml_notify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const mall_reload_xml_notify& from);
  void MergeFrom(const mall_reload_xml_notify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string field = 1;
  inline bool has_field() const;
  inline void clear_field();
  static const int kFieldFieldNumber = 1;
  inline const ::std::string& field() const;
  inline void set_field(const ::std::string& value);
  inline void set_field(const char* value);
  inline void set_field(const char* value, size_t size);
  inline ::std::string* mutable_field();
  inline ::std::string* release_field();
  inline void set_allocated_field(::std::string* field);

  // optional string dest = 2;
  inline bool has_dest() const;
  inline void clear_dest();
  static const int kDestFieldNumber = 2;
  inline const ::std::string& dest() const;
  inline void set_dest(const ::std::string& value);
  inline void set_dest(const char* value);
  inline void set_dest(const char* value, size_t size);
  inline ::std::string* mutable_dest();
  inline ::std::string* release_dest();
  inline void set_allocated_dest(::std::string* dest);

  // @@protoc_insertion_point(class_scope:proto.gm.mall_reload_xml_notify)
 private:
  inline void set_has_field();
  inline void clear_has_field();
  inline void set_has_dest();
  inline void clear_has_dest();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* field_;
  ::std::string* dest_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_gm_2eproto();
  friend void protobuf_AssignDesc_gm_2eproto();
  friend void protobuf_ShutdownFile_gm_2eproto();

  void InitAsDefaultInstance();
  static mall_reload_xml_notify* default_instance_;
};
// ===================================================================


// ===================================================================

// tm_monitor_get_user_info_request

// optional string user_did = 1;
inline bool tm_monitor_get_user_info_request::has_user_did() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void tm_monitor_get_user_info_request::set_has_user_did() {
  _has_bits_[0] |= 0x00000001u;
}
inline void tm_monitor_get_user_info_request::clear_has_user_did() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void tm_monitor_get_user_info_request::clear_user_did() {
  if (user_did_ != &::google::protobuf::internal::kEmptyString) {
    user_did_->clear();
  }
  clear_has_user_did();
}
inline const ::std::string& tm_monitor_get_user_info_request::user_did() const {
  return *user_did_;
}
inline void tm_monitor_get_user_info_request::set_user_did(const ::std::string& value) {
  set_has_user_did();
  if (user_did_ == &::google::protobuf::internal::kEmptyString) {
    user_did_ = new ::std::string;
  }
  user_did_->assign(value);
}
inline void tm_monitor_get_user_info_request::set_user_did(const char* value) {
  set_has_user_did();
  if (user_did_ == &::google::protobuf::internal::kEmptyString) {
    user_did_ = new ::std::string;
  }
  user_did_->assign(value);
}
inline void tm_monitor_get_user_info_request::set_user_did(const char* value, size_t size) {
  set_has_user_did();
  if (user_did_ == &::google::protobuf::internal::kEmptyString) {
    user_did_ = new ::std::string;
  }
  user_did_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* tm_monitor_get_user_info_request::mutable_user_did() {
  set_has_user_did();
  if (user_did_ == &::google::protobuf::internal::kEmptyString) {
    user_did_ = new ::std::string;
  }
  return user_did_;
}
inline ::std::string* tm_monitor_get_user_info_request::release_user_did() {
  clear_has_user_did();
  if (user_did_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = user_did_;
    user_did_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void tm_monitor_get_user_info_request::set_allocated_user_did(::std::string* user_did) {
  if (user_did_ != &::google::protobuf::internal::kEmptyString) {
    delete user_did_;
  }
  if (user_did) {
    set_has_user_did();
    user_did_ = user_did;
  } else {
    clear_has_user_did();
    user_did_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string nick_name = 2;
inline bool tm_monitor_get_user_info_request::has_nick_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void tm_monitor_get_user_info_request::set_has_nick_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void tm_monitor_get_user_info_request::clear_has_nick_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void tm_monitor_get_user_info_request::clear_nick_name() {
  if (nick_name_ != &::google::protobuf::internal::kEmptyString) {
    nick_name_->clear();
  }
  clear_has_nick_name();
}
inline const ::std::string& tm_monitor_get_user_info_request::nick_name() const {
  return *nick_name_;
}
inline void tm_monitor_get_user_info_request::set_nick_name(const ::std::string& value) {
  set_has_nick_name();
  if (nick_name_ == &::google::protobuf::internal::kEmptyString) {
    nick_name_ = new ::std::string;
  }
  nick_name_->assign(value);
}
inline void tm_monitor_get_user_info_request::set_nick_name(const char* value) {
  set_has_nick_name();
  if (nick_name_ == &::google::protobuf::internal::kEmptyString) {
    nick_name_ = new ::std::string;
  }
  nick_name_->assign(value);
}
inline void tm_monitor_get_user_info_request::set_nick_name(const char* value, size_t size) {
  set_has_nick_name();
  if (nick_name_ == &::google::protobuf::internal::kEmptyString) {
    nick_name_ = new ::std::string;
  }
  nick_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* tm_monitor_get_user_info_request::mutable_nick_name() {
  set_has_nick_name();
  if (nick_name_ == &::google::protobuf::internal::kEmptyString) {
    nick_name_ = new ::std::string;
  }
  return nick_name_;
}
inline ::std::string* tm_monitor_get_user_info_request::release_nick_name() {
  clear_has_nick_name();
  if (nick_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = nick_name_;
    nick_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void tm_monitor_get_user_info_request::set_allocated_nick_name(::std::string* nick_name) {
  if (nick_name_ != &::google::protobuf::internal::kEmptyString) {
    delete nick_name_;
  }
  if (nick_name) {
    set_has_nick_name();
    nick_name_ = nick_name;
  } else {
    clear_has_nick_name();
    nick_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// mt_monitor_get_user_info_reply

// required uint32 reply_code = 1;
inline bool mt_monitor_get_user_info_reply::has_reply_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void mt_monitor_get_user_info_reply::set_has_reply_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void mt_monitor_get_user_info_reply::clear_has_reply_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void mt_monitor_get_user_info_reply::clear_reply_code() {
  reply_code_ = 0u;
  clear_has_reply_code();
}
inline ::google::protobuf::uint32 mt_monitor_get_user_info_reply::reply_code() const {
  return reply_code_;
}
inline void mt_monitor_get_user_info_reply::set_reply_code(::google::protobuf::uint32 value) {
  set_has_reply_code();
  reply_code_ = value;
}

// optional .proto.gm_common.user_base_info base_info = 2;
inline bool mt_monitor_get_user_info_reply::has_base_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void mt_monitor_get_user_info_reply::set_has_base_info() {
  _has_bits_[0] |= 0x00000002u;
}
inline void mt_monitor_get_user_info_reply::clear_has_base_info() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void mt_monitor_get_user_info_reply::clear_base_info() {
  if (base_info_ != NULL) base_info_->::proto::gm_common::user_base_info::Clear();
  clear_has_base_info();
}
inline const ::proto::gm_common::user_base_info& mt_monitor_get_user_info_reply::base_info() const {
  return base_info_ != NULL ? *base_info_ : *default_instance_->base_info_;
}
inline ::proto::gm_common::user_base_info* mt_monitor_get_user_info_reply::mutable_base_info() {
  set_has_base_info();
  if (base_info_ == NULL) base_info_ = new ::proto::gm_common::user_base_info;
  return base_info_;
}
inline ::proto::gm_common::user_base_info* mt_monitor_get_user_info_reply::release_base_info() {
  clear_has_base_info();
  ::proto::gm_common::user_base_info* temp = base_info_;
  base_info_ = NULL;
  return temp;
}
inline void mt_monitor_get_user_info_reply::set_allocated_base_info(::proto::gm_common::user_base_info* base_info) {
  delete base_info_;
  base_info_ = base_info;
  if (base_info) {
    set_has_base_info();
  } else {
    clear_has_base_info();
  }
}

// -------------------------------------------------------------------

// tm_monitor_get_recharge_count_request

// required uint64 user_uid = 1;
inline bool tm_monitor_get_recharge_count_request::has_user_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void tm_monitor_get_recharge_count_request::set_has_user_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void tm_monitor_get_recharge_count_request::clear_has_user_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void tm_monitor_get_recharge_count_request::clear_user_uid() {
  user_uid_ = GOOGLE_ULONGLONG(0);
  clear_has_user_uid();
}
inline ::google::protobuf::uint64 tm_monitor_get_recharge_count_request::user_uid() const {
  return user_uid_;
}
inline void tm_monitor_get_recharge_count_request::set_user_uid(::google::protobuf::uint64 value) {
  set_has_user_uid();
  user_uid_ = value;
}

// required uint32 page_num = 2;
inline bool tm_monitor_get_recharge_count_request::has_page_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void tm_monitor_get_recharge_count_request::set_has_page_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void tm_monitor_get_recharge_count_request::clear_has_page_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void tm_monitor_get_recharge_count_request::clear_page_num() {
  page_num_ = 0u;
  clear_has_page_num();
}
inline ::google::protobuf::uint32 tm_monitor_get_recharge_count_request::page_num() const {
  return page_num_;
}
inline void tm_monitor_get_recharge_count_request::set_page_num(::google::protobuf::uint32 value) {
  set_has_page_num();
  page_num_ = value;
}

// -------------------------------------------------------------------

// mt_monitor_get_recharge_count_reply

// required uint32 reply_code = 1;
inline bool mt_monitor_get_recharge_count_reply::has_reply_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void mt_monitor_get_recharge_count_reply::set_has_reply_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void mt_monitor_get_recharge_count_reply::clear_has_reply_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void mt_monitor_get_recharge_count_reply::clear_reply_code() {
  reply_code_ = 0u;
  clear_has_reply_code();
}
inline ::google::protobuf::uint32 mt_monitor_get_recharge_count_reply::reply_code() const {
  return reply_code_;
}
inline void mt_monitor_get_recharge_count_reply::set_reply_code(::google::protobuf::uint32 value) {
  set_has_reply_code();
  reply_code_ = value;
}

// optional .proto.gm_common.recharge_count_info statistics = 2;
inline bool mt_monitor_get_recharge_count_reply::has_statistics() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void mt_monitor_get_recharge_count_reply::set_has_statistics() {
  _has_bits_[0] |= 0x00000002u;
}
inline void mt_monitor_get_recharge_count_reply::clear_has_statistics() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void mt_monitor_get_recharge_count_reply::clear_statistics() {
  if (statistics_ != NULL) statistics_->::proto::gm_common::recharge_count_info::Clear();
  clear_has_statistics();
}
inline const ::proto::gm_common::recharge_count_info& mt_monitor_get_recharge_count_reply::statistics() const {
  return statistics_ != NULL ? *statistics_ : *default_instance_->statistics_;
}
inline ::proto::gm_common::recharge_count_info* mt_monitor_get_recharge_count_reply::mutable_statistics() {
  set_has_statistics();
  if (statistics_ == NULL) statistics_ = new ::proto::gm_common::recharge_count_info;
  return statistics_;
}
inline ::proto::gm_common::recharge_count_info* mt_monitor_get_recharge_count_reply::release_statistics() {
  clear_has_statistics();
  ::proto::gm_common::recharge_count_info* temp = statistics_;
  statistics_ = NULL;
  return temp;
}
inline void mt_monitor_get_recharge_count_reply::set_allocated_statistics(::proto::gm_common::recharge_count_info* statistics) {
  delete statistics_;
  statistics_ = statistics;
  if (statistics) {
    set_has_statistics();
  } else {
    clear_has_statistics();
  }
}

// optional uint64 user_uid = 3;
inline bool mt_monitor_get_recharge_count_reply::has_user_uid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void mt_monitor_get_recharge_count_reply::set_has_user_uid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void mt_monitor_get_recharge_count_reply::clear_has_user_uid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void mt_monitor_get_recharge_count_reply::clear_user_uid() {
  user_uid_ = GOOGLE_ULONGLONG(0);
  clear_has_user_uid();
}
inline ::google::protobuf::uint64 mt_monitor_get_recharge_count_reply::user_uid() const {
  return user_uid_;
}
inline void mt_monitor_get_recharge_count_reply::set_user_uid(::google::protobuf::uint64 value) {
  set_has_user_uid();
  user_uid_ = value;
}

// optional uint32 total_pages = 4;
inline bool mt_monitor_get_recharge_count_reply::has_total_pages() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void mt_monitor_get_recharge_count_reply::set_has_total_pages() {
  _has_bits_[0] |= 0x00000008u;
}
inline void mt_monitor_get_recharge_count_reply::clear_has_total_pages() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void mt_monitor_get_recharge_count_reply::clear_total_pages() {
  total_pages_ = 0u;
  clear_has_total_pages();
}
inline ::google::protobuf::uint32 mt_monitor_get_recharge_count_reply::total_pages() const {
  return total_pages_;
}
inline void mt_monitor_get_recharge_count_reply::set_total_pages(::google::protobuf::uint32 value) {
  set_has_total_pages();
  total_pages_ = value;
}

// -------------------------------------------------------------------

// tm_set_user_data_request

// required uint64 user_uid = 1;
inline bool tm_set_user_data_request::has_user_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void tm_set_user_data_request::set_has_user_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void tm_set_user_data_request::clear_has_user_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void tm_set_user_data_request::clear_user_uid() {
  user_uid_ = GOOGLE_ULONGLONG(0);
  clear_has_user_uid();
}
inline ::google::protobuf::uint64 tm_set_user_data_request::user_uid() const {
  return user_uid_;
}
inline void tm_set_user_data_request::set_user_uid(::google::protobuf::uint64 value) {
  set_has_user_uid();
  user_uid_ = value;
}

// required int32 op_type = 2;
inline bool tm_set_user_data_request::has_op_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void tm_set_user_data_request::set_has_op_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void tm_set_user_data_request::clear_has_op_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void tm_set_user_data_request::clear_op_type() {
  op_type_ = 0;
  clear_has_op_type();
}
inline ::google::protobuf::int32 tm_set_user_data_request::op_type() const {
  return op_type_;
}
inline void tm_set_user_data_request::set_op_type(::google::protobuf::int32 value) {
  set_has_op_type();
  op_type_ = value;
}

// optional int32 gold = 3;
inline bool tm_set_user_data_request::has_gold() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void tm_set_user_data_request::set_has_gold() {
  _has_bits_[0] |= 0x00000004u;
}
inline void tm_set_user_data_request::clear_has_gold() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void tm_set_user_data_request::clear_gold() {
  gold_ = 0;
  clear_has_gold();
}
inline ::google::protobuf::int32 tm_set_user_data_request::gold() const {
  return gold_;
}
inline void tm_set_user_data_request::set_gold(::google::protobuf::int32 value) {
  set_has_gold();
  gold_ = value;
}

// optional int32 diamond = 4;
inline bool tm_set_user_data_request::has_diamond() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void tm_set_user_data_request::set_has_diamond() {
  _has_bits_[0] |= 0x00000008u;
}
inline void tm_set_user_data_request::clear_has_diamond() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void tm_set_user_data_request::clear_diamond() {
  diamond_ = 0;
  clear_has_diamond();
}
inline ::google::protobuf::int32 tm_set_user_data_request::diamond() const {
  return diamond_;
}
inline void tm_set_user_data_request::set_diamond(::google::protobuf::int32 value) {
  set_has_diamond();
  diamond_ = value;
}

// optional int32 exp = 5;
inline bool tm_set_user_data_request::has_exp() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void tm_set_user_data_request::set_has_exp() {
  _has_bits_[0] |= 0x00000010u;
}
inline void tm_set_user_data_request::clear_has_exp() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void tm_set_user_data_request::clear_exp() {
  exp_ = 0;
  clear_has_exp();
}
inline ::google::protobuf::int32 tm_set_user_data_request::exp() const {
  return exp_;
}
inline void tm_set_user_data_request::set_exp(::google::protobuf::int32 value) {
  set_has_exp();
  exp_ = value;
}

// optional int32 level = 6;
inline bool tm_set_user_data_request::has_level() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void tm_set_user_data_request::set_has_level() {
  _has_bits_[0] |= 0x00000020u;
}
inline void tm_set_user_data_request::clear_has_level() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void tm_set_user_data_request::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 tm_set_user_data_request::level() const {
  return level_;
}
inline void tm_set_user_data_request::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// optional int32 ap = 7;
inline bool tm_set_user_data_request::has_ap() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void tm_set_user_data_request::set_has_ap() {
  _has_bits_[0] |= 0x00000040u;
}
inline void tm_set_user_data_request::clear_has_ap() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void tm_set_user_data_request::clear_ap() {
  ap_ = 0;
  clear_has_ap();
}
inline ::google::protobuf::int32 tm_set_user_data_request::ap() const {
  return ap_;
}
inline void tm_set_user_data_request::set_ap(::google::protobuf::int32 value) {
  set_has_ap();
  ap_ = value;
}

// optional int32 skill_point = 8;
inline bool tm_set_user_data_request::has_skill_point() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void tm_set_user_data_request::set_has_skill_point() {
  _has_bits_[0] |= 0x00000080u;
}
inline void tm_set_user_data_request::clear_has_skill_point() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void tm_set_user_data_request::clear_skill_point() {
  skill_point_ = 0;
  clear_has_skill_point();
}
inline ::google::protobuf::int32 tm_set_user_data_request::skill_point() const {
  return skill_point_;
}
inline void tm_set_user_data_request::set_skill_point(::google::protobuf::int32 value) {
  set_has_skill_point();
  skill_point_ = value;
}

// optional int32 pve_badge = 9;
inline bool tm_set_user_data_request::has_pve_badge() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void tm_set_user_data_request::set_has_pve_badge() {
  _has_bits_[0] |= 0x00000100u;
}
inline void tm_set_user_data_request::clear_has_pve_badge() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void tm_set_user_data_request::clear_pve_badge() {
  pve_badge_ = 0;
  clear_has_pve_badge();
}
inline ::google::protobuf::int32 tm_set_user_data_request::pve_badge() const {
  return pve_badge_;
}
inline void tm_set_user_data_request::set_pve_badge(::google::protobuf::int32 value) {
  set_has_pve_badge();
  pve_badge_ = value;
}

// optional int32 pvp_badge = 10;
inline bool tm_set_user_data_request::has_pvp_badge() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void tm_set_user_data_request::set_has_pvp_badge() {
  _has_bits_[0] |= 0x00000200u;
}
inline void tm_set_user_data_request::clear_has_pvp_badge() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void tm_set_user_data_request::clear_pvp_badge() {
  pvp_badge_ = 0;
  clear_has_pvp_badge();
}
inline ::google::protobuf::int32 tm_set_user_data_request::pvp_badge() const {
  return pvp_badge_;
}
inline void tm_set_user_data_request::set_pvp_badge(::google::protobuf::int32 value) {
  set_has_pvp_badge();
  pvp_badge_ = value;
}

// optional int32 fate = 11;
inline bool tm_set_user_data_request::has_fate() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void tm_set_user_data_request::set_has_fate() {
  _has_bits_[0] |= 0x00000400u;
}
inline void tm_set_user_data_request::clear_has_fate() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void tm_set_user_data_request::clear_fate() {
  fate_ = 0;
  clear_has_fate();
}
inline ::google::protobuf::int32 tm_set_user_data_request::fate() const {
  return fate_;
}
inline void tm_set_user_data_request::set_fate(::google::protobuf::int32 value) {
  set_has_fate();
  fate_ = value;
}

// optional int32 vip_exp = 12;
inline bool tm_set_user_data_request::has_vip_exp() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void tm_set_user_data_request::set_has_vip_exp() {
  _has_bits_[0] |= 0x00000800u;
}
inline void tm_set_user_data_request::clear_has_vip_exp() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void tm_set_user_data_request::clear_vip_exp() {
  vip_exp_ = 0;
  clear_has_vip_exp();
}
inline ::google::protobuf::int32 tm_set_user_data_request::vip_exp() const {
  return vip_exp_;
}
inline void tm_set_user_data_request::set_vip_exp(::google::protobuf::int32 value) {
  set_has_vip_exp();
  vip_exp_ = value;
}

// optional int32 vip_level = 13;
inline bool tm_set_user_data_request::has_vip_level() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void tm_set_user_data_request::set_has_vip_level() {
  _has_bits_[0] |= 0x00001000u;
}
inline void tm_set_user_data_request::clear_has_vip_level() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void tm_set_user_data_request::clear_vip_level() {
  vip_level_ = 0;
  clear_has_vip_level();
}
inline ::google::protobuf::int32 tm_set_user_data_request::vip_level() const {
  return vip_level_;
}
inline void tm_set_user_data_request::set_vip_level(::google::protobuf::int32 value) {
  set_has_vip_level();
  vip_level_ = value;
}

// -------------------------------------------------------------------

// mt_set_user_data_reply

// required uint32 reply_code = 1;
inline bool mt_set_user_data_reply::has_reply_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void mt_set_user_data_reply::set_has_reply_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void mt_set_user_data_reply::clear_has_reply_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void mt_set_user_data_reply::clear_reply_code() {
  reply_code_ = 0u;
  clear_has_reply_code();
}
inline ::google::protobuf::uint32 mt_set_user_data_reply::reply_code() const {
  return reply_code_;
}
inline void mt_set_user_data_reply::set_reply_code(::google::protobuf::uint32 value) {
  set_has_reply_code();
  reply_code_ = value;
}

// optional uint64 user_uid = 2;
inline bool mt_set_user_data_reply::has_user_uid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void mt_set_user_data_reply::set_has_user_uid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void mt_set_user_data_reply::clear_has_user_uid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void mt_set_user_data_reply::clear_user_uid() {
  user_uid_ = GOOGLE_ULONGLONG(0);
  clear_has_user_uid();
}
inline ::google::protobuf::uint64 mt_set_user_data_reply::user_uid() const {
  return user_uid_;
}
inline void mt_set_user_data_reply::set_user_uid(::google::protobuf::uint64 value) {
  set_has_user_uid();
  user_uid_ = value;
}

// -------------------------------------------------------------------

// tm_monitor_get_item_info_request

// required uint64 user_uid = 1;
inline bool tm_monitor_get_item_info_request::has_user_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void tm_monitor_get_item_info_request::set_has_user_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void tm_monitor_get_item_info_request::clear_has_user_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void tm_monitor_get_item_info_request::clear_user_uid() {
  user_uid_ = GOOGLE_ULONGLONG(0);
  clear_has_user_uid();
}
inline ::google::protobuf::uint64 tm_monitor_get_item_info_request::user_uid() const {
  return user_uid_;
}
inline void tm_monitor_get_item_info_request::set_user_uid(::google::protobuf::uint64 value) {
  set_has_user_uid();
  user_uid_ = value;
}

// -------------------------------------------------------------------

// mt_monitor_get_item_info_reply

// required uint32 reply_code = 1;
inline bool mt_monitor_get_item_info_reply::has_reply_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void mt_monitor_get_item_info_reply::set_has_reply_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void mt_monitor_get_item_info_reply::clear_has_reply_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void mt_monitor_get_item_info_reply::clear_reply_code() {
  reply_code_ = 0u;
  clear_has_reply_code();
}
inline ::google::protobuf::uint32 mt_monitor_get_item_info_reply::reply_code() const {
  return reply_code_;
}
inline void mt_monitor_get_item_info_reply::set_reply_code(::google::protobuf::uint32 value) {
  set_has_reply_code();
  reply_code_ = value;
}

// optional .proto.gm_common.item_data item_info = 2;
inline bool mt_monitor_get_item_info_reply::has_item_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void mt_monitor_get_item_info_reply::set_has_item_info() {
  _has_bits_[0] |= 0x00000002u;
}
inline void mt_monitor_get_item_info_reply::clear_has_item_info() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void mt_monitor_get_item_info_reply::clear_item_info() {
  if (item_info_ != NULL) item_info_->::proto::gm_common::item_data::Clear();
  clear_has_item_info();
}
inline const ::proto::gm_common::item_data& mt_monitor_get_item_info_reply::item_info() const {
  return item_info_ != NULL ? *item_info_ : *default_instance_->item_info_;
}
inline ::proto::gm_common::item_data* mt_monitor_get_item_info_reply::mutable_item_info() {
  set_has_item_info();
  if (item_info_ == NULL) item_info_ = new ::proto::gm_common::item_data;
  return item_info_;
}
inline ::proto::gm_common::item_data* mt_monitor_get_item_info_reply::release_item_info() {
  clear_has_item_info();
  ::proto::gm_common::item_data* temp = item_info_;
  item_info_ = NULL;
  return temp;
}
inline void mt_monitor_get_item_info_reply::set_allocated_item_info(::proto::gm_common::item_data* item_info) {
  delete item_info_;
  item_info_ = item_info;
  if (item_info) {
    set_has_item_info();
  } else {
    clear_has_item_info();
  }
}

// optional uint64 user_uid = 3;
inline bool mt_monitor_get_item_info_reply::has_user_uid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void mt_monitor_get_item_info_reply::set_has_user_uid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void mt_monitor_get_item_info_reply::clear_has_user_uid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void mt_monitor_get_item_info_reply::clear_user_uid() {
  user_uid_ = GOOGLE_ULONGLONG(0);
  clear_has_user_uid();
}
inline ::google::protobuf::uint64 mt_monitor_get_item_info_reply::user_uid() const {
  return user_uid_;
}
inline void mt_monitor_get_item_info_reply::set_user_uid(::google::protobuf::uint64 value) {
  set_has_user_uid();
  user_uid_ = value;
}

// -------------------------------------------------------------------

// tm_monitor_get_hero_info_request

// required uint64 user_uid = 1;
inline bool tm_monitor_get_hero_info_request::has_user_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void tm_monitor_get_hero_info_request::set_has_user_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void tm_monitor_get_hero_info_request::clear_has_user_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void tm_monitor_get_hero_info_request::clear_user_uid() {
  user_uid_ = GOOGLE_ULONGLONG(0);
  clear_has_user_uid();
}
inline ::google::protobuf::uint64 tm_monitor_get_hero_info_request::user_uid() const {
  return user_uid_;
}
inline void tm_monitor_get_hero_info_request::set_user_uid(::google::protobuf::uint64 value) {
  set_has_user_uid();
  user_uid_ = value;
}

// -------------------------------------------------------------------

// mt_monitor_get_hero_info_reply

// required uint32 reply_code = 1;
inline bool mt_monitor_get_hero_info_reply::has_reply_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void mt_monitor_get_hero_info_reply::set_has_reply_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void mt_monitor_get_hero_info_reply::clear_has_reply_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void mt_monitor_get_hero_info_reply::clear_reply_code() {
  reply_code_ = 0u;
  clear_has_reply_code();
}
inline ::google::protobuf::uint32 mt_monitor_get_hero_info_reply::reply_code() const {
  return reply_code_;
}
inline void mt_monitor_get_hero_info_reply::set_reply_code(::google::protobuf::uint32 value) {
  set_has_reply_code();
  reply_code_ = value;
}

// optional .proto.gm_common.hero_data hero_info = 2;
inline bool mt_monitor_get_hero_info_reply::has_hero_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void mt_monitor_get_hero_info_reply::set_has_hero_info() {
  _has_bits_[0] |= 0x00000002u;
}
inline void mt_monitor_get_hero_info_reply::clear_has_hero_info() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void mt_monitor_get_hero_info_reply::clear_hero_info() {
  if (hero_info_ != NULL) hero_info_->::proto::gm_common::hero_data::Clear();
  clear_has_hero_info();
}
inline const ::proto::gm_common::hero_data& mt_monitor_get_hero_info_reply::hero_info() const {
  return hero_info_ != NULL ? *hero_info_ : *default_instance_->hero_info_;
}
inline ::proto::gm_common::hero_data* mt_monitor_get_hero_info_reply::mutable_hero_info() {
  set_has_hero_info();
  if (hero_info_ == NULL) hero_info_ = new ::proto::gm_common::hero_data;
  return hero_info_;
}
inline ::proto::gm_common::hero_data* mt_monitor_get_hero_info_reply::release_hero_info() {
  clear_has_hero_info();
  ::proto::gm_common::hero_data* temp = hero_info_;
  hero_info_ = NULL;
  return temp;
}
inline void mt_monitor_get_hero_info_reply::set_allocated_hero_info(::proto::gm_common::hero_data* hero_info) {
  delete hero_info_;
  hero_info_ = hero_info;
  if (hero_info) {
    set_has_hero_info();
  } else {
    clear_has_hero_info();
  }
}

// optional uint64 user_uid = 3;
inline bool mt_monitor_get_hero_info_reply::has_user_uid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void mt_monitor_get_hero_info_reply::set_has_user_uid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void mt_monitor_get_hero_info_reply::clear_has_user_uid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void mt_monitor_get_hero_info_reply::clear_user_uid() {
  user_uid_ = GOOGLE_ULONGLONG(0);
  clear_has_user_uid();
}
inline ::google::protobuf::uint64 mt_monitor_get_hero_info_reply::user_uid() const {
  return user_uid_;
}
inline void mt_monitor_get_hero_info_reply::set_user_uid(::google::protobuf::uint64 value) {
  set_has_user_uid();
  user_uid_ = value;
}

// -------------------------------------------------------------------

// tm_monitor_get_consume_record_request

// required uint64 user_uid = 1;
inline bool tm_monitor_get_consume_record_request::has_user_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void tm_monitor_get_consume_record_request::set_has_user_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void tm_monitor_get_consume_record_request::clear_has_user_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void tm_monitor_get_consume_record_request::clear_user_uid() {
  user_uid_ = GOOGLE_ULONGLONG(0);
  clear_has_user_uid();
}
inline ::google::protobuf::uint64 tm_monitor_get_consume_record_request::user_uid() const {
  return user_uid_;
}
inline void tm_monitor_get_consume_record_request::set_user_uid(::google::protobuf::uint64 value) {
  set_has_user_uid();
  user_uid_ = value;
}

// required uint32 type = 2;
inline bool tm_monitor_get_consume_record_request::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void tm_monitor_get_consume_record_request::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void tm_monitor_get_consume_record_request::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void tm_monitor_get_consume_record_request::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 tm_monitor_get_consume_record_request::type() const {
  return type_;
}
inline void tm_monitor_get_consume_record_request::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
}

// required uint32 begin_time = 3;
inline bool tm_monitor_get_consume_record_request::has_begin_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void tm_monitor_get_consume_record_request::set_has_begin_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void tm_monitor_get_consume_record_request::clear_has_begin_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void tm_monitor_get_consume_record_request::clear_begin_time() {
  begin_time_ = 0u;
  clear_has_begin_time();
}
inline ::google::protobuf::uint32 tm_monitor_get_consume_record_request::begin_time() const {
  return begin_time_;
}
inline void tm_monitor_get_consume_record_request::set_begin_time(::google::protobuf::uint32 value) {
  set_has_begin_time();
  begin_time_ = value;
}

// required uint32 end_time = 4;
inline bool tm_monitor_get_consume_record_request::has_end_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void tm_monitor_get_consume_record_request::set_has_end_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void tm_monitor_get_consume_record_request::clear_has_end_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void tm_monitor_get_consume_record_request::clear_end_time() {
  end_time_ = 0u;
  clear_has_end_time();
}
inline ::google::protobuf::uint32 tm_monitor_get_consume_record_request::end_time() const {
  return end_time_;
}
inline void tm_monitor_get_consume_record_request::set_end_time(::google::protobuf::uint32 value) {
  set_has_end_time();
  end_time_ = value;
}

// required uint32 page_num = 5;
inline bool tm_monitor_get_consume_record_request::has_page_num() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void tm_monitor_get_consume_record_request::set_has_page_num() {
  _has_bits_[0] |= 0x00000010u;
}
inline void tm_monitor_get_consume_record_request::clear_has_page_num() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void tm_monitor_get_consume_record_request::clear_page_num() {
  page_num_ = 0u;
  clear_has_page_num();
}
inline ::google::protobuf::uint32 tm_monitor_get_consume_record_request::page_num() const {
  return page_num_;
}
inline void tm_monitor_get_consume_record_request::set_page_num(::google::protobuf::uint32 value) {
  set_has_page_num();
  page_num_ = value;
}

// -------------------------------------------------------------------

// mt_monitor_get_consume_record_reply

// required uint32 reply_code = 1;
inline bool mt_monitor_get_consume_record_reply::has_reply_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void mt_monitor_get_consume_record_reply::set_has_reply_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void mt_monitor_get_consume_record_reply::clear_has_reply_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void mt_monitor_get_consume_record_reply::clear_reply_code() {
  reply_code_ = 0u;
  clear_has_reply_code();
}
inline ::google::protobuf::uint32 mt_monitor_get_consume_record_reply::reply_code() const {
  return reply_code_;
}
inline void mt_monitor_get_consume_record_reply::set_reply_code(::google::protobuf::uint32 value) {
  set_has_reply_code();
  reply_code_ = value;
}

// optional .proto.gm_common.consume_record_data consume_info = 2;
inline bool mt_monitor_get_consume_record_reply::has_consume_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void mt_monitor_get_consume_record_reply::set_has_consume_info() {
  _has_bits_[0] |= 0x00000002u;
}
inline void mt_monitor_get_consume_record_reply::clear_has_consume_info() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void mt_monitor_get_consume_record_reply::clear_consume_info() {
  if (consume_info_ != NULL) consume_info_->::proto::gm_common::consume_record_data::Clear();
  clear_has_consume_info();
}
inline const ::proto::gm_common::consume_record_data& mt_monitor_get_consume_record_reply::consume_info() const {
  return consume_info_ != NULL ? *consume_info_ : *default_instance_->consume_info_;
}
inline ::proto::gm_common::consume_record_data* mt_monitor_get_consume_record_reply::mutable_consume_info() {
  set_has_consume_info();
  if (consume_info_ == NULL) consume_info_ = new ::proto::gm_common::consume_record_data;
  return consume_info_;
}
inline ::proto::gm_common::consume_record_data* mt_monitor_get_consume_record_reply::release_consume_info() {
  clear_has_consume_info();
  ::proto::gm_common::consume_record_data* temp = consume_info_;
  consume_info_ = NULL;
  return temp;
}
inline void mt_monitor_get_consume_record_reply::set_allocated_consume_info(::proto::gm_common::consume_record_data* consume_info) {
  delete consume_info_;
  consume_info_ = consume_info;
  if (consume_info) {
    set_has_consume_info();
  } else {
    clear_has_consume_info();
  }
}

// optional uint64 user_uid = 3;
inline bool mt_monitor_get_consume_record_reply::has_user_uid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void mt_monitor_get_consume_record_reply::set_has_user_uid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void mt_monitor_get_consume_record_reply::clear_has_user_uid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void mt_monitor_get_consume_record_reply::clear_user_uid() {
  user_uid_ = GOOGLE_ULONGLONG(0);
  clear_has_user_uid();
}
inline ::google::protobuf::uint64 mt_monitor_get_consume_record_reply::user_uid() const {
  return user_uid_;
}
inline void mt_monitor_get_consume_record_reply::set_user_uid(::google::protobuf::uint64 value) {
  set_has_user_uid();
  user_uid_ = value;
}

// optional uint32 total_pages = 4;
inline bool mt_monitor_get_consume_record_reply::has_total_pages() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void mt_monitor_get_consume_record_reply::set_has_total_pages() {
  _has_bits_[0] |= 0x00000008u;
}
inline void mt_monitor_get_consume_record_reply::clear_has_total_pages() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void mt_monitor_get_consume_record_reply::clear_total_pages() {
  total_pages_ = 0u;
  clear_has_total_pages();
}
inline ::google::protobuf::uint32 mt_monitor_get_consume_record_reply::total_pages() const {
  return total_pages_;
}
inline void mt_monitor_get_consume_record_reply::set_total_pages(::google::protobuf::uint32 value) {
  set_has_total_pages();
  total_pages_ = value;
}

// -------------------------------------------------------------------

// tm_monitor_get_pve_info_request

// required uint64 user_uid = 1;
inline bool tm_monitor_get_pve_info_request::has_user_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void tm_monitor_get_pve_info_request::set_has_user_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void tm_monitor_get_pve_info_request::clear_has_user_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void tm_monitor_get_pve_info_request::clear_user_uid() {
  user_uid_ = GOOGLE_ULONGLONG(0);
  clear_has_user_uid();
}
inline ::google::protobuf::uint64 tm_monitor_get_pve_info_request::user_uid() const {
  return user_uid_;
}
inline void tm_monitor_get_pve_info_request::set_user_uid(::google::protobuf::uint64 value) {
  set_has_user_uid();
  user_uid_ = value;
}

// required int32 pve_type = 2;
inline bool tm_monitor_get_pve_info_request::has_pve_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void tm_monitor_get_pve_info_request::set_has_pve_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void tm_monitor_get_pve_info_request::clear_has_pve_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void tm_monitor_get_pve_info_request::clear_pve_type() {
  pve_type_ = 0;
  clear_has_pve_type();
}
inline ::google::protobuf::int32 tm_monitor_get_pve_info_request::pve_type() const {
  return pve_type_;
}
inline void tm_monitor_get_pve_info_request::set_pve_type(::google::protobuf::int32 value) {
  set_has_pve_type();
  pve_type_ = value;
}

// required uint32 page_num = 3;
inline bool tm_monitor_get_pve_info_request::has_page_num() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void tm_monitor_get_pve_info_request::set_has_page_num() {
  _has_bits_[0] |= 0x00000004u;
}
inline void tm_monitor_get_pve_info_request::clear_has_page_num() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void tm_monitor_get_pve_info_request::clear_page_num() {
  page_num_ = 0u;
  clear_has_page_num();
}
inline ::google::protobuf::uint32 tm_monitor_get_pve_info_request::page_num() const {
  return page_num_;
}
inline void tm_monitor_get_pve_info_request::set_page_num(::google::protobuf::uint32 value) {
  set_has_page_num();
  page_num_ = value;
}

// -------------------------------------------------------------------

// mt_monitor_get_pve_info_reply

// required uint32 reply_code = 1;
inline bool mt_monitor_get_pve_info_reply::has_reply_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void mt_monitor_get_pve_info_reply::set_has_reply_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void mt_monitor_get_pve_info_reply::clear_has_reply_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void mt_monitor_get_pve_info_reply::clear_reply_code() {
  reply_code_ = 0u;
  clear_has_reply_code();
}
inline ::google::protobuf::uint32 mt_monitor_get_pve_info_reply::reply_code() const {
  return reply_code_;
}
inline void mt_monitor_get_pve_info_reply::set_reply_code(::google::protobuf::uint32 value) {
  set_has_reply_code();
  reply_code_ = value;
}

// optional .proto.gm_common.campaign_data campaign_info = 2;
inline bool mt_monitor_get_pve_info_reply::has_campaign_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void mt_monitor_get_pve_info_reply::set_has_campaign_info() {
  _has_bits_[0] |= 0x00000002u;
}
inline void mt_monitor_get_pve_info_reply::clear_has_campaign_info() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void mt_monitor_get_pve_info_reply::clear_campaign_info() {
  if (campaign_info_ != NULL) campaign_info_->::proto::gm_common::campaign_data::Clear();
  clear_has_campaign_info();
}
inline const ::proto::gm_common::campaign_data& mt_monitor_get_pve_info_reply::campaign_info() const {
  return campaign_info_ != NULL ? *campaign_info_ : *default_instance_->campaign_info_;
}
inline ::proto::gm_common::campaign_data* mt_monitor_get_pve_info_reply::mutable_campaign_info() {
  set_has_campaign_info();
  if (campaign_info_ == NULL) campaign_info_ = new ::proto::gm_common::campaign_data;
  return campaign_info_;
}
inline ::proto::gm_common::campaign_data* mt_monitor_get_pve_info_reply::release_campaign_info() {
  clear_has_campaign_info();
  ::proto::gm_common::campaign_data* temp = campaign_info_;
  campaign_info_ = NULL;
  return temp;
}
inline void mt_monitor_get_pve_info_reply::set_allocated_campaign_info(::proto::gm_common::campaign_data* campaign_info) {
  delete campaign_info_;
  campaign_info_ = campaign_info;
  if (campaign_info) {
    set_has_campaign_info();
  } else {
    clear_has_campaign_info();
  }
}

// optional .proto.gm_common.matrix_data matrix_info = 3;
inline bool mt_monitor_get_pve_info_reply::has_matrix_info() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void mt_monitor_get_pve_info_reply::set_has_matrix_info() {
  _has_bits_[0] |= 0x00000004u;
}
inline void mt_monitor_get_pve_info_reply::clear_has_matrix_info() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void mt_monitor_get_pve_info_reply::clear_matrix_info() {
  if (matrix_info_ != NULL) matrix_info_->::proto::gm_common::matrix_data::Clear();
  clear_has_matrix_info();
}
inline const ::proto::gm_common::matrix_data& mt_monitor_get_pve_info_reply::matrix_info() const {
  return matrix_info_ != NULL ? *matrix_info_ : *default_instance_->matrix_info_;
}
inline ::proto::gm_common::matrix_data* mt_monitor_get_pve_info_reply::mutable_matrix_info() {
  set_has_matrix_info();
  if (matrix_info_ == NULL) matrix_info_ = new ::proto::gm_common::matrix_data;
  return matrix_info_;
}
inline ::proto::gm_common::matrix_data* mt_monitor_get_pve_info_reply::release_matrix_info() {
  clear_has_matrix_info();
  ::proto::gm_common::matrix_data* temp = matrix_info_;
  matrix_info_ = NULL;
  return temp;
}
inline void mt_monitor_get_pve_info_reply::set_allocated_matrix_info(::proto::gm_common::matrix_data* matrix_info) {
  delete matrix_info_;
  matrix_info_ = matrix_info;
  if (matrix_info) {
    set_has_matrix_info();
  } else {
    clear_has_matrix_info();
  }
}

// optional .proto.gm_common.produce_data produce_info = 4;
inline bool mt_monitor_get_pve_info_reply::has_produce_info() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void mt_monitor_get_pve_info_reply::set_has_produce_info() {
  _has_bits_[0] |= 0x00000008u;
}
inline void mt_monitor_get_pve_info_reply::clear_has_produce_info() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void mt_monitor_get_pve_info_reply::clear_produce_info() {
  if (produce_info_ != NULL) produce_info_->::proto::gm_common::produce_data::Clear();
  clear_has_produce_info();
}
inline const ::proto::gm_common::produce_data& mt_monitor_get_pve_info_reply::produce_info() const {
  return produce_info_ != NULL ? *produce_info_ : *default_instance_->produce_info_;
}
inline ::proto::gm_common::produce_data* mt_monitor_get_pve_info_reply::mutable_produce_info() {
  set_has_produce_info();
  if (produce_info_ == NULL) produce_info_ = new ::proto::gm_common::produce_data;
  return produce_info_;
}
inline ::proto::gm_common::produce_data* mt_monitor_get_pve_info_reply::release_produce_info() {
  clear_has_produce_info();
  ::proto::gm_common::produce_data* temp = produce_info_;
  produce_info_ = NULL;
  return temp;
}
inline void mt_monitor_get_pve_info_reply::set_allocated_produce_info(::proto::gm_common::produce_data* produce_info) {
  delete produce_info_;
  produce_info_ = produce_info;
  if (produce_info) {
    set_has_produce_info();
  } else {
    clear_has_produce_info();
  }
}

// optional uint64 user_uid = 5;
inline bool mt_monitor_get_pve_info_reply::has_user_uid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void mt_monitor_get_pve_info_reply::set_has_user_uid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void mt_monitor_get_pve_info_reply::clear_has_user_uid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void mt_monitor_get_pve_info_reply::clear_user_uid() {
  user_uid_ = GOOGLE_ULONGLONG(0);
  clear_has_user_uid();
}
inline ::google::protobuf::uint64 mt_monitor_get_pve_info_reply::user_uid() const {
  return user_uid_;
}
inline void mt_monitor_get_pve_info_reply::set_user_uid(::google::protobuf::uint64 value) {
  set_has_user_uid();
  user_uid_ = value;
}

// optional uint32 total_pages = 6;
inline bool mt_monitor_get_pve_info_reply::has_total_pages() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void mt_monitor_get_pve_info_reply::set_has_total_pages() {
  _has_bits_[0] |= 0x00000020u;
}
inline void mt_monitor_get_pve_info_reply::clear_has_total_pages() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void mt_monitor_get_pve_info_reply::clear_total_pages() {
  total_pages_ = 0u;
  clear_has_total_pages();
}
inline ::google::protobuf::uint32 mt_monitor_get_pve_info_reply::total_pages() const {
  return total_pages_;
}
inline void mt_monitor_get_pve_info_reply::set_total_pages(::google::protobuf::uint32 value) {
  set_has_total_pages();
  total_pages_ = value;
}

// -------------------------------------------------------------------

// tm_send_mail_request

// optional int32 reply_code = 1;
inline bool tm_send_mail_request::has_reply_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void tm_send_mail_request::set_has_reply_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void tm_send_mail_request::clear_has_reply_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void tm_send_mail_request::clear_reply_code() {
  reply_code_ = 0;
  clear_has_reply_code();
}
inline ::google::protobuf::int32 tm_send_mail_request::reply_code() const {
  return reply_code_;
}
inline void tm_send_mail_request::set_reply_code(::google::protobuf::int32 value) {
  set_has_reply_code();
  reply_code_ = value;
}

// -------------------------------------------------------------------

// mt_send_mail_reply

// required int32 reply_code = 1;
inline bool mt_send_mail_reply::has_reply_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void mt_send_mail_reply::set_has_reply_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void mt_send_mail_reply::clear_has_reply_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void mt_send_mail_reply::clear_reply_code() {
  reply_code_ = 0;
  clear_has_reply_code();
}
inline ::google::protobuf::int32 mt_send_mail_reply::reply_code() const {
  return reply_code_;
}
inline void mt_send_mail_reply::set_reply_code(::google::protobuf::int32 value) {
  set_has_reply_code();
  reply_code_ = value;
}

// -------------------------------------------------------------------

// tm_monitor_get_equip_info_request

// required uint64 user_uid = 1;
inline bool tm_monitor_get_equip_info_request::has_user_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void tm_monitor_get_equip_info_request::set_has_user_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void tm_monitor_get_equip_info_request::clear_has_user_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void tm_monitor_get_equip_info_request::clear_user_uid() {
  user_uid_ = GOOGLE_ULONGLONG(0);
  clear_has_user_uid();
}
inline ::google::protobuf::uint64 tm_monitor_get_equip_info_request::user_uid() const {
  return user_uid_;
}
inline void tm_monitor_get_equip_info_request::set_user_uid(::google::protobuf::uint64 value) {
  set_has_user_uid();
  user_uid_ = value;
}

// -------------------------------------------------------------------

// mt_monitor_get_equip_info_reply

// required uint32 reply_code = 1;
inline bool mt_monitor_get_equip_info_reply::has_reply_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void mt_monitor_get_equip_info_reply::set_has_reply_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void mt_monitor_get_equip_info_reply::clear_has_reply_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void mt_monitor_get_equip_info_reply::clear_reply_code() {
  reply_code_ = 0u;
  clear_has_reply_code();
}
inline ::google::protobuf::uint32 mt_monitor_get_equip_info_reply::reply_code() const {
  return reply_code_;
}
inline void mt_monitor_get_equip_info_reply::set_reply_code(::google::protobuf::uint32 value) {
  set_has_reply_code();
  reply_code_ = value;
}

// optional .proto.gm_common.equip_data equip_info = 2;
inline bool mt_monitor_get_equip_info_reply::has_equip_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void mt_monitor_get_equip_info_reply::set_has_equip_info() {
  _has_bits_[0] |= 0x00000002u;
}
inline void mt_monitor_get_equip_info_reply::clear_has_equip_info() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void mt_monitor_get_equip_info_reply::clear_equip_info() {
  if (equip_info_ != NULL) equip_info_->::proto::gm_common::equip_data::Clear();
  clear_has_equip_info();
}
inline const ::proto::gm_common::equip_data& mt_monitor_get_equip_info_reply::equip_info() const {
  return equip_info_ != NULL ? *equip_info_ : *default_instance_->equip_info_;
}
inline ::proto::gm_common::equip_data* mt_monitor_get_equip_info_reply::mutable_equip_info() {
  set_has_equip_info();
  if (equip_info_ == NULL) equip_info_ = new ::proto::gm_common::equip_data;
  return equip_info_;
}
inline ::proto::gm_common::equip_data* mt_monitor_get_equip_info_reply::release_equip_info() {
  clear_has_equip_info();
  ::proto::gm_common::equip_data* temp = equip_info_;
  equip_info_ = NULL;
  return temp;
}
inline void mt_monitor_get_equip_info_reply::set_allocated_equip_info(::proto::gm_common::equip_data* equip_info) {
  delete equip_info_;
  equip_info_ = equip_info;
  if (equip_info) {
    set_has_equip_info();
  } else {
    clear_has_equip_info();
  }
}

// optional uint64 user_uid = 3;
inline bool mt_monitor_get_equip_info_reply::has_user_uid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void mt_monitor_get_equip_info_reply::set_has_user_uid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void mt_monitor_get_equip_info_reply::clear_has_user_uid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void mt_monitor_get_equip_info_reply::clear_user_uid() {
  user_uid_ = GOOGLE_ULONGLONG(0);
  clear_has_user_uid();
}
inline ::google::protobuf::uint64 mt_monitor_get_equip_info_reply::user_uid() const {
  return user_uid_;
}
inline void mt_monitor_get_equip_info_reply::set_user_uid(::google::protobuf::uint64 value) {
  set_has_user_uid();
  user_uid_ = value;
}

// -------------------------------------------------------------------

// tm_monitor_get_pvp_info_request

// required uint64 user_uid = 1;
inline bool tm_monitor_get_pvp_info_request::has_user_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void tm_monitor_get_pvp_info_request::set_has_user_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void tm_monitor_get_pvp_info_request::clear_has_user_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void tm_monitor_get_pvp_info_request::clear_user_uid() {
  user_uid_ = GOOGLE_ULONGLONG(0);
  clear_has_user_uid();
}
inline ::google::protobuf::uint64 tm_monitor_get_pvp_info_request::user_uid() const {
  return user_uid_;
}
inline void tm_monitor_get_pvp_info_request::set_user_uid(::google::protobuf::uint64 value) {
  set_has_user_uid();
  user_uid_ = value;
}

// -------------------------------------------------------------------

// mt_monitor_get_pvp_info_reply

// required uint32 reply_code = 1;
inline bool mt_monitor_get_pvp_info_reply::has_reply_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void mt_monitor_get_pvp_info_reply::set_has_reply_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void mt_monitor_get_pvp_info_reply::clear_has_reply_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void mt_monitor_get_pvp_info_reply::clear_reply_code() {
  reply_code_ = 0u;
  clear_has_reply_code();
}
inline ::google::protobuf::uint32 mt_monitor_get_pvp_info_reply::reply_code() const {
  return reply_code_;
}
inline void mt_monitor_get_pvp_info_reply::set_reply_code(::google::protobuf::uint32 value) {
  set_has_reply_code();
  reply_code_ = value;
}

// optional uint32 history_top = 2;
inline bool mt_monitor_get_pvp_info_reply::has_history_top() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void mt_monitor_get_pvp_info_reply::set_has_history_top() {
  _has_bits_[0] |= 0x00000002u;
}
inline void mt_monitor_get_pvp_info_reply::clear_has_history_top() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void mt_monitor_get_pvp_info_reply::clear_history_top() {
  history_top_ = 0u;
  clear_has_history_top();
}
inline ::google::protobuf::uint32 mt_monitor_get_pvp_info_reply::history_top() const {
  return history_top_;
}
inline void mt_monitor_get_pvp_info_reply::set_history_top(::google::protobuf::uint32 value) {
  set_has_history_top();
  history_top_ = value;
}

// optional uint32 buy_challenge_times = 3;
inline bool mt_monitor_get_pvp_info_reply::has_buy_challenge_times() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void mt_monitor_get_pvp_info_reply::set_has_buy_challenge_times() {
  _has_bits_[0] |= 0x00000004u;
}
inline void mt_monitor_get_pvp_info_reply::clear_has_buy_challenge_times() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void mt_monitor_get_pvp_info_reply::clear_buy_challenge_times() {
  buy_challenge_times_ = 0u;
  clear_has_buy_challenge_times();
}
inline ::google::protobuf::uint32 mt_monitor_get_pvp_info_reply::buy_challenge_times() const {
  return buy_challenge_times_;
}
inline void mt_monitor_get_pvp_info_reply::set_buy_challenge_times(::google::protobuf::uint32 value) {
  set_has_buy_challenge_times();
  buy_challenge_times_ = value;
}

// optional uint32 challenge_times = 4;
inline bool mt_monitor_get_pvp_info_reply::has_challenge_times() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void mt_monitor_get_pvp_info_reply::set_has_challenge_times() {
  _has_bits_[0] |= 0x00000008u;
}
inline void mt_monitor_get_pvp_info_reply::clear_has_challenge_times() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void mt_monitor_get_pvp_info_reply::clear_challenge_times() {
  challenge_times_ = 0u;
  clear_has_challenge_times();
}
inline ::google::protobuf::uint32 mt_monitor_get_pvp_info_reply::challenge_times() const {
  return challenge_times_;
}
inline void mt_monitor_get_pvp_info_reply::set_challenge_times(::google::protobuf::uint32 value) {
  set_has_challenge_times();
  challenge_times_ = value;
}

// optional uint32 last_challenge_time = 5;
inline bool mt_monitor_get_pvp_info_reply::has_last_challenge_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void mt_monitor_get_pvp_info_reply::set_has_last_challenge_time() {
  _has_bits_[0] |= 0x00000010u;
}
inline void mt_monitor_get_pvp_info_reply::clear_has_last_challenge_time() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void mt_monitor_get_pvp_info_reply::clear_last_challenge_time() {
  last_challenge_time_ = 0u;
  clear_has_last_challenge_time();
}
inline ::google::protobuf::uint32 mt_monitor_get_pvp_info_reply::last_challenge_time() const {
  return last_challenge_time_;
}
inline void mt_monitor_get_pvp_info_reply::set_last_challenge_time(::google::protobuf::uint32 value) {
  set_has_last_challenge_time();
  last_challenge_time_ = value;
}

// -------------------------------------------------------------------

// tm_manage_role_byid_request

// repeated uint32 role_did = 1;
inline int tm_manage_role_byid_request::role_did_size() const {
  return role_did_.size();
}
inline void tm_manage_role_byid_request::clear_role_did() {
  role_did_.Clear();
}
inline ::google::protobuf::uint32 tm_manage_role_byid_request::role_did(int index) const {
  return role_did_.Get(index);
}
inline void tm_manage_role_byid_request::set_role_did(int index, ::google::protobuf::uint32 value) {
  role_did_.Set(index, value);
}
inline void tm_manage_role_byid_request::add_role_did(::google::protobuf::uint32 value) {
  role_did_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
tm_manage_role_byid_request::role_did() const {
  return role_did_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
tm_manage_role_byid_request::mutable_role_did() {
  return &role_did_;
}

// optional uint32 manage_type = 2;
inline bool tm_manage_role_byid_request::has_manage_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void tm_manage_role_byid_request::set_has_manage_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void tm_manage_role_byid_request::clear_has_manage_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void tm_manage_role_byid_request::clear_manage_type() {
  manage_type_ = 0u;
  clear_has_manage_type();
}
inline ::google::protobuf::uint32 tm_manage_role_byid_request::manage_type() const {
  return manage_type_;
}
inline void tm_manage_role_byid_request::set_manage_type(::google::protobuf::uint32 value) {
  set_has_manage_type();
  manage_type_ = value;
}

// optional uint32 offset_time = 3;
inline bool tm_manage_role_byid_request::has_offset_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void tm_manage_role_byid_request::set_has_offset_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void tm_manage_role_byid_request::clear_has_offset_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void tm_manage_role_byid_request::clear_offset_time() {
  offset_time_ = 0u;
  clear_has_offset_time();
}
inline ::google::protobuf::uint32 tm_manage_role_byid_request::offset_time() const {
  return offset_time_;
}
inline void tm_manage_role_byid_request::set_offset_time(::google::protobuf::uint32 value) {
  set_has_offset_time();
  offset_time_ = value;
}

// optional string reason = 4;
inline bool tm_manage_role_byid_request::has_reason() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void tm_manage_role_byid_request::set_has_reason() {
  _has_bits_[0] |= 0x00000008u;
}
inline void tm_manage_role_byid_request::clear_has_reason() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void tm_manage_role_byid_request::clear_reason() {
  if (reason_ != &::google::protobuf::internal::kEmptyString) {
    reason_->clear();
  }
  clear_has_reason();
}
inline const ::std::string& tm_manage_role_byid_request::reason() const {
  return *reason_;
}
inline void tm_manage_role_byid_request::set_reason(const ::std::string& value) {
  set_has_reason();
  if (reason_ == &::google::protobuf::internal::kEmptyString) {
    reason_ = new ::std::string;
  }
  reason_->assign(value);
}
inline void tm_manage_role_byid_request::set_reason(const char* value) {
  set_has_reason();
  if (reason_ == &::google::protobuf::internal::kEmptyString) {
    reason_ = new ::std::string;
  }
  reason_->assign(value);
}
inline void tm_manage_role_byid_request::set_reason(const char* value, size_t size) {
  set_has_reason();
  if (reason_ == &::google::protobuf::internal::kEmptyString) {
    reason_ = new ::std::string;
  }
  reason_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* tm_manage_role_byid_request::mutable_reason() {
  set_has_reason();
  if (reason_ == &::google::protobuf::internal::kEmptyString) {
    reason_ = new ::std::string;
  }
  return reason_;
}
inline ::std::string* tm_manage_role_byid_request::release_reason() {
  clear_has_reason();
  if (reason_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = reason_;
    reason_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void tm_manage_role_byid_request::set_allocated_reason(::std::string* reason) {
  if (reason_ != &::google::protobuf::internal::kEmptyString) {
    delete reason_;
  }
  if (reason) {
    set_has_reason();
    reason_ = reason;
  } else {
    clear_has_reason();
    reason_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string oper_name = 5;
inline bool tm_manage_role_byid_request::has_oper_name() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void tm_manage_role_byid_request::set_has_oper_name() {
  _has_bits_[0] |= 0x00000010u;
}
inline void tm_manage_role_byid_request::clear_has_oper_name() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void tm_manage_role_byid_request::clear_oper_name() {
  if (oper_name_ != &::google::protobuf::internal::kEmptyString) {
    oper_name_->clear();
  }
  clear_has_oper_name();
}
inline const ::std::string& tm_manage_role_byid_request::oper_name() const {
  return *oper_name_;
}
inline void tm_manage_role_byid_request::set_oper_name(const ::std::string& value) {
  set_has_oper_name();
  if (oper_name_ == &::google::protobuf::internal::kEmptyString) {
    oper_name_ = new ::std::string;
  }
  oper_name_->assign(value);
}
inline void tm_manage_role_byid_request::set_oper_name(const char* value) {
  set_has_oper_name();
  if (oper_name_ == &::google::protobuf::internal::kEmptyString) {
    oper_name_ = new ::std::string;
  }
  oper_name_->assign(value);
}
inline void tm_manage_role_byid_request::set_oper_name(const char* value, size_t size) {
  set_has_oper_name();
  if (oper_name_ == &::google::protobuf::internal::kEmptyString) {
    oper_name_ = new ::std::string;
  }
  oper_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* tm_manage_role_byid_request::mutable_oper_name() {
  set_has_oper_name();
  if (oper_name_ == &::google::protobuf::internal::kEmptyString) {
    oper_name_ = new ::std::string;
  }
  return oper_name_;
}
inline ::std::string* tm_manage_role_byid_request::release_oper_name() {
  clear_has_oper_name();
  if (oper_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = oper_name_;
    oper_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void tm_manage_role_byid_request::set_allocated_oper_name(::std::string* oper_name) {
  if (oper_name_ != &::google::protobuf::internal::kEmptyString) {
    delete oper_name_;
  }
  if (oper_name) {
    set_has_oper_name();
    oper_name_ = oper_name;
  } else {
    clear_has_oper_name();
    oper_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// mt_manage_role_byid_reply

// repeated .proto.gm_common.manage_reply_single reply_data = 1;
inline int mt_manage_role_byid_reply::reply_data_size() const {
  return reply_data_.size();
}
inline void mt_manage_role_byid_reply::clear_reply_data() {
  reply_data_.Clear();
}
inline const ::proto::gm_common::manage_reply_single& mt_manage_role_byid_reply::reply_data(int index) const {
  return reply_data_.Get(index);
}
inline ::proto::gm_common::manage_reply_single* mt_manage_role_byid_reply::mutable_reply_data(int index) {
  return reply_data_.Mutable(index);
}
inline ::proto::gm_common::manage_reply_single* mt_manage_role_byid_reply::add_reply_data() {
  return reply_data_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::gm_common::manage_reply_single >&
mt_manage_role_byid_reply::reply_data() const {
  return reply_data_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto::gm_common::manage_reply_single >*
mt_manage_role_byid_reply::mutable_reply_data() {
  return &reply_data_;
}

// optional uint32 oper_time = 2;
inline bool mt_manage_role_byid_reply::has_oper_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void mt_manage_role_byid_reply::set_has_oper_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void mt_manage_role_byid_reply::clear_has_oper_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void mt_manage_role_byid_reply::clear_oper_time() {
  oper_time_ = 0u;
  clear_has_oper_time();
}
inline ::google::protobuf::uint32 mt_manage_role_byid_reply::oper_time() const {
  return oper_time_;
}
inline void mt_manage_role_byid_reply::set_oper_time(::google::protobuf::uint32 value) {
  set_has_oper_time();
  oper_time_ = value;
}

// optional uint32 manage_type = 3;
inline bool mt_manage_role_byid_reply::has_manage_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void mt_manage_role_byid_reply::set_has_manage_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void mt_manage_role_byid_reply::clear_has_manage_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void mt_manage_role_byid_reply::clear_manage_type() {
  manage_type_ = 0u;
  clear_has_manage_type();
}
inline ::google::protobuf::uint32 mt_manage_role_byid_reply::manage_type() const {
  return manage_type_;
}
inline void mt_manage_role_byid_reply::set_manage_type(::google::protobuf::uint32 value) {
  set_has_manage_type();
  manage_type_ = value;
}

// optional uint32 offset_time = 4;
inline bool mt_manage_role_byid_reply::has_offset_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void mt_manage_role_byid_reply::set_has_offset_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void mt_manage_role_byid_reply::clear_has_offset_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void mt_manage_role_byid_reply::clear_offset_time() {
  offset_time_ = 0u;
  clear_has_offset_time();
}
inline ::google::protobuf::uint32 mt_manage_role_byid_reply::offset_time() const {
  return offset_time_;
}
inline void mt_manage_role_byid_reply::set_offset_time(::google::protobuf::uint32 value) {
  set_has_offset_time();
  offset_time_ = value;
}

// optional string reason = 5;
inline bool mt_manage_role_byid_reply::has_reason() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void mt_manage_role_byid_reply::set_has_reason() {
  _has_bits_[0] |= 0x00000010u;
}
inline void mt_manage_role_byid_reply::clear_has_reason() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void mt_manage_role_byid_reply::clear_reason() {
  if (reason_ != &::google::protobuf::internal::kEmptyString) {
    reason_->clear();
  }
  clear_has_reason();
}
inline const ::std::string& mt_manage_role_byid_reply::reason() const {
  return *reason_;
}
inline void mt_manage_role_byid_reply::set_reason(const ::std::string& value) {
  set_has_reason();
  if (reason_ == &::google::protobuf::internal::kEmptyString) {
    reason_ = new ::std::string;
  }
  reason_->assign(value);
}
inline void mt_manage_role_byid_reply::set_reason(const char* value) {
  set_has_reason();
  if (reason_ == &::google::protobuf::internal::kEmptyString) {
    reason_ = new ::std::string;
  }
  reason_->assign(value);
}
inline void mt_manage_role_byid_reply::set_reason(const char* value, size_t size) {
  set_has_reason();
  if (reason_ == &::google::protobuf::internal::kEmptyString) {
    reason_ = new ::std::string;
  }
  reason_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* mt_manage_role_byid_reply::mutable_reason() {
  set_has_reason();
  if (reason_ == &::google::protobuf::internal::kEmptyString) {
    reason_ = new ::std::string;
  }
  return reason_;
}
inline ::std::string* mt_manage_role_byid_reply::release_reason() {
  clear_has_reason();
  if (reason_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = reason_;
    reason_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void mt_manage_role_byid_reply::set_allocated_reason(::std::string* reason) {
  if (reason_ != &::google::protobuf::internal::kEmptyString) {
    delete reason_;
  }
  if (reason) {
    set_has_reason();
    reason_ = reason;
  } else {
    clear_has_reason();
    reason_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string oper_name = 6;
inline bool mt_manage_role_byid_reply::has_oper_name() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void mt_manage_role_byid_reply::set_has_oper_name() {
  _has_bits_[0] |= 0x00000020u;
}
inline void mt_manage_role_byid_reply::clear_has_oper_name() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void mt_manage_role_byid_reply::clear_oper_name() {
  if (oper_name_ != &::google::protobuf::internal::kEmptyString) {
    oper_name_->clear();
  }
  clear_has_oper_name();
}
inline const ::std::string& mt_manage_role_byid_reply::oper_name() const {
  return *oper_name_;
}
inline void mt_manage_role_byid_reply::set_oper_name(const ::std::string& value) {
  set_has_oper_name();
  if (oper_name_ == &::google::protobuf::internal::kEmptyString) {
    oper_name_ = new ::std::string;
  }
  oper_name_->assign(value);
}
inline void mt_manage_role_byid_reply::set_oper_name(const char* value) {
  set_has_oper_name();
  if (oper_name_ == &::google::protobuf::internal::kEmptyString) {
    oper_name_ = new ::std::string;
  }
  oper_name_->assign(value);
}
inline void mt_manage_role_byid_reply::set_oper_name(const char* value, size_t size) {
  set_has_oper_name();
  if (oper_name_ == &::google::protobuf::internal::kEmptyString) {
    oper_name_ = new ::std::string;
  }
  oper_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* mt_manage_role_byid_reply::mutable_oper_name() {
  set_has_oper_name();
  if (oper_name_ == &::google::protobuf::internal::kEmptyString) {
    oper_name_ = new ::std::string;
  }
  return oper_name_;
}
inline ::std::string* mt_manage_role_byid_reply::release_oper_name() {
  clear_has_oper_name();
  if (oper_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = oper_name_;
    oper_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void mt_manage_role_byid_reply::set_allocated_oper_name(::std::string* oper_name) {
  if (oper_name_ != &::google::protobuf::internal::kEmptyString) {
    delete oper_name_;
  }
  if (oper_name) {
    set_has_oper_name();
    oper_name_ = oper_name;
  } else {
    clear_has_oper_name();
    oper_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// tm_manage_role_byname_request

// repeated string role_name = 1;
inline int tm_manage_role_byname_request::role_name_size() const {
  return role_name_.size();
}
inline void tm_manage_role_byname_request::clear_role_name() {
  role_name_.Clear();
}
inline const ::std::string& tm_manage_role_byname_request::role_name(int index) const {
  return role_name_.Get(index);
}
inline ::std::string* tm_manage_role_byname_request::mutable_role_name(int index) {
  return role_name_.Mutable(index);
}
inline void tm_manage_role_byname_request::set_role_name(int index, const ::std::string& value) {
  role_name_.Mutable(index)->assign(value);
}
inline void tm_manage_role_byname_request::set_role_name(int index, const char* value) {
  role_name_.Mutable(index)->assign(value);
}
inline void tm_manage_role_byname_request::set_role_name(int index, const char* value, size_t size) {
  role_name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* tm_manage_role_byname_request::add_role_name() {
  return role_name_.Add();
}
inline void tm_manage_role_byname_request::add_role_name(const ::std::string& value) {
  role_name_.Add()->assign(value);
}
inline void tm_manage_role_byname_request::add_role_name(const char* value) {
  role_name_.Add()->assign(value);
}
inline void tm_manage_role_byname_request::add_role_name(const char* value, size_t size) {
  role_name_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
tm_manage_role_byname_request::role_name() const {
  return role_name_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
tm_manage_role_byname_request::mutable_role_name() {
  return &role_name_;
}

// optional uint32 manage_type = 2;
inline bool tm_manage_role_byname_request::has_manage_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void tm_manage_role_byname_request::set_has_manage_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void tm_manage_role_byname_request::clear_has_manage_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void tm_manage_role_byname_request::clear_manage_type() {
  manage_type_ = 0u;
  clear_has_manage_type();
}
inline ::google::protobuf::uint32 tm_manage_role_byname_request::manage_type() const {
  return manage_type_;
}
inline void tm_manage_role_byname_request::set_manage_type(::google::protobuf::uint32 value) {
  set_has_manage_type();
  manage_type_ = value;
}

// optional uint32 offset_time = 3;
inline bool tm_manage_role_byname_request::has_offset_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void tm_manage_role_byname_request::set_has_offset_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void tm_manage_role_byname_request::clear_has_offset_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void tm_manage_role_byname_request::clear_offset_time() {
  offset_time_ = 0u;
  clear_has_offset_time();
}
inline ::google::protobuf::uint32 tm_manage_role_byname_request::offset_time() const {
  return offset_time_;
}
inline void tm_manage_role_byname_request::set_offset_time(::google::protobuf::uint32 value) {
  set_has_offset_time();
  offset_time_ = value;
}

// optional string reason = 4;
inline bool tm_manage_role_byname_request::has_reason() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void tm_manage_role_byname_request::set_has_reason() {
  _has_bits_[0] |= 0x00000008u;
}
inline void tm_manage_role_byname_request::clear_has_reason() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void tm_manage_role_byname_request::clear_reason() {
  if (reason_ != &::google::protobuf::internal::kEmptyString) {
    reason_->clear();
  }
  clear_has_reason();
}
inline const ::std::string& tm_manage_role_byname_request::reason() const {
  return *reason_;
}
inline void tm_manage_role_byname_request::set_reason(const ::std::string& value) {
  set_has_reason();
  if (reason_ == &::google::protobuf::internal::kEmptyString) {
    reason_ = new ::std::string;
  }
  reason_->assign(value);
}
inline void tm_manage_role_byname_request::set_reason(const char* value) {
  set_has_reason();
  if (reason_ == &::google::protobuf::internal::kEmptyString) {
    reason_ = new ::std::string;
  }
  reason_->assign(value);
}
inline void tm_manage_role_byname_request::set_reason(const char* value, size_t size) {
  set_has_reason();
  if (reason_ == &::google::protobuf::internal::kEmptyString) {
    reason_ = new ::std::string;
  }
  reason_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* tm_manage_role_byname_request::mutable_reason() {
  set_has_reason();
  if (reason_ == &::google::protobuf::internal::kEmptyString) {
    reason_ = new ::std::string;
  }
  return reason_;
}
inline ::std::string* tm_manage_role_byname_request::release_reason() {
  clear_has_reason();
  if (reason_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = reason_;
    reason_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void tm_manage_role_byname_request::set_allocated_reason(::std::string* reason) {
  if (reason_ != &::google::protobuf::internal::kEmptyString) {
    delete reason_;
  }
  if (reason) {
    set_has_reason();
    reason_ = reason;
  } else {
    clear_has_reason();
    reason_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string oper_name = 5;
inline bool tm_manage_role_byname_request::has_oper_name() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void tm_manage_role_byname_request::set_has_oper_name() {
  _has_bits_[0] |= 0x00000010u;
}
inline void tm_manage_role_byname_request::clear_has_oper_name() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void tm_manage_role_byname_request::clear_oper_name() {
  if (oper_name_ != &::google::protobuf::internal::kEmptyString) {
    oper_name_->clear();
  }
  clear_has_oper_name();
}
inline const ::std::string& tm_manage_role_byname_request::oper_name() const {
  return *oper_name_;
}
inline void tm_manage_role_byname_request::set_oper_name(const ::std::string& value) {
  set_has_oper_name();
  if (oper_name_ == &::google::protobuf::internal::kEmptyString) {
    oper_name_ = new ::std::string;
  }
  oper_name_->assign(value);
}
inline void tm_manage_role_byname_request::set_oper_name(const char* value) {
  set_has_oper_name();
  if (oper_name_ == &::google::protobuf::internal::kEmptyString) {
    oper_name_ = new ::std::string;
  }
  oper_name_->assign(value);
}
inline void tm_manage_role_byname_request::set_oper_name(const char* value, size_t size) {
  set_has_oper_name();
  if (oper_name_ == &::google::protobuf::internal::kEmptyString) {
    oper_name_ = new ::std::string;
  }
  oper_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* tm_manage_role_byname_request::mutable_oper_name() {
  set_has_oper_name();
  if (oper_name_ == &::google::protobuf::internal::kEmptyString) {
    oper_name_ = new ::std::string;
  }
  return oper_name_;
}
inline ::std::string* tm_manage_role_byname_request::release_oper_name() {
  clear_has_oper_name();
  if (oper_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = oper_name_;
    oper_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void tm_manage_role_byname_request::set_allocated_oper_name(::std::string* oper_name) {
  if (oper_name_ != &::google::protobuf::internal::kEmptyString) {
    delete oper_name_;
  }
  if (oper_name) {
    set_has_oper_name();
    oper_name_ = oper_name;
  } else {
    clear_has_oper_name();
    oper_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// mt_manage_role_byname_reply

// repeated .proto.gm_common.manage_reply_single reply_data = 1;
inline int mt_manage_role_byname_reply::reply_data_size() const {
  return reply_data_.size();
}
inline void mt_manage_role_byname_reply::clear_reply_data() {
  reply_data_.Clear();
}
inline const ::proto::gm_common::manage_reply_single& mt_manage_role_byname_reply::reply_data(int index) const {
  return reply_data_.Get(index);
}
inline ::proto::gm_common::manage_reply_single* mt_manage_role_byname_reply::mutable_reply_data(int index) {
  return reply_data_.Mutable(index);
}
inline ::proto::gm_common::manage_reply_single* mt_manage_role_byname_reply::add_reply_data() {
  return reply_data_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::gm_common::manage_reply_single >&
mt_manage_role_byname_reply::reply_data() const {
  return reply_data_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto::gm_common::manage_reply_single >*
mt_manage_role_byname_reply::mutable_reply_data() {
  return &reply_data_;
}

// optional uint32 oper_time = 2;
inline bool mt_manage_role_byname_reply::has_oper_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void mt_manage_role_byname_reply::set_has_oper_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void mt_manage_role_byname_reply::clear_has_oper_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void mt_manage_role_byname_reply::clear_oper_time() {
  oper_time_ = 0u;
  clear_has_oper_time();
}
inline ::google::protobuf::uint32 mt_manage_role_byname_reply::oper_time() const {
  return oper_time_;
}
inline void mt_manage_role_byname_reply::set_oper_time(::google::protobuf::uint32 value) {
  set_has_oper_time();
  oper_time_ = value;
}

// optional uint32 manage_type = 3;
inline bool mt_manage_role_byname_reply::has_manage_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void mt_manage_role_byname_reply::set_has_manage_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void mt_manage_role_byname_reply::clear_has_manage_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void mt_manage_role_byname_reply::clear_manage_type() {
  manage_type_ = 0u;
  clear_has_manage_type();
}
inline ::google::protobuf::uint32 mt_manage_role_byname_reply::manage_type() const {
  return manage_type_;
}
inline void mt_manage_role_byname_reply::set_manage_type(::google::protobuf::uint32 value) {
  set_has_manage_type();
  manage_type_ = value;
}

// optional uint32 offset_time = 4;
inline bool mt_manage_role_byname_reply::has_offset_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void mt_manage_role_byname_reply::set_has_offset_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void mt_manage_role_byname_reply::clear_has_offset_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void mt_manage_role_byname_reply::clear_offset_time() {
  offset_time_ = 0u;
  clear_has_offset_time();
}
inline ::google::protobuf::uint32 mt_manage_role_byname_reply::offset_time() const {
  return offset_time_;
}
inline void mt_manage_role_byname_reply::set_offset_time(::google::protobuf::uint32 value) {
  set_has_offset_time();
  offset_time_ = value;
}

// optional string reason = 5;
inline bool mt_manage_role_byname_reply::has_reason() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void mt_manage_role_byname_reply::set_has_reason() {
  _has_bits_[0] |= 0x00000010u;
}
inline void mt_manage_role_byname_reply::clear_has_reason() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void mt_manage_role_byname_reply::clear_reason() {
  if (reason_ != &::google::protobuf::internal::kEmptyString) {
    reason_->clear();
  }
  clear_has_reason();
}
inline const ::std::string& mt_manage_role_byname_reply::reason() const {
  return *reason_;
}
inline void mt_manage_role_byname_reply::set_reason(const ::std::string& value) {
  set_has_reason();
  if (reason_ == &::google::protobuf::internal::kEmptyString) {
    reason_ = new ::std::string;
  }
  reason_->assign(value);
}
inline void mt_manage_role_byname_reply::set_reason(const char* value) {
  set_has_reason();
  if (reason_ == &::google::protobuf::internal::kEmptyString) {
    reason_ = new ::std::string;
  }
  reason_->assign(value);
}
inline void mt_manage_role_byname_reply::set_reason(const char* value, size_t size) {
  set_has_reason();
  if (reason_ == &::google::protobuf::internal::kEmptyString) {
    reason_ = new ::std::string;
  }
  reason_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* mt_manage_role_byname_reply::mutable_reason() {
  set_has_reason();
  if (reason_ == &::google::protobuf::internal::kEmptyString) {
    reason_ = new ::std::string;
  }
  return reason_;
}
inline ::std::string* mt_manage_role_byname_reply::release_reason() {
  clear_has_reason();
  if (reason_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = reason_;
    reason_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void mt_manage_role_byname_reply::set_allocated_reason(::std::string* reason) {
  if (reason_ != &::google::protobuf::internal::kEmptyString) {
    delete reason_;
  }
  if (reason) {
    set_has_reason();
    reason_ = reason;
  } else {
    clear_has_reason();
    reason_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string oper_name = 6;
inline bool mt_manage_role_byname_reply::has_oper_name() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void mt_manage_role_byname_reply::set_has_oper_name() {
  _has_bits_[0] |= 0x00000020u;
}
inline void mt_manage_role_byname_reply::clear_has_oper_name() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void mt_manage_role_byname_reply::clear_oper_name() {
  if (oper_name_ != &::google::protobuf::internal::kEmptyString) {
    oper_name_->clear();
  }
  clear_has_oper_name();
}
inline const ::std::string& mt_manage_role_byname_reply::oper_name() const {
  return *oper_name_;
}
inline void mt_manage_role_byname_reply::set_oper_name(const ::std::string& value) {
  set_has_oper_name();
  if (oper_name_ == &::google::protobuf::internal::kEmptyString) {
    oper_name_ = new ::std::string;
  }
  oper_name_->assign(value);
}
inline void mt_manage_role_byname_reply::set_oper_name(const char* value) {
  set_has_oper_name();
  if (oper_name_ == &::google::protobuf::internal::kEmptyString) {
    oper_name_ = new ::std::string;
  }
  oper_name_->assign(value);
}
inline void mt_manage_role_byname_reply::set_oper_name(const char* value, size_t size) {
  set_has_oper_name();
  if (oper_name_ == &::google::protobuf::internal::kEmptyString) {
    oper_name_ = new ::std::string;
  }
  oper_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* mt_manage_role_byname_reply::mutable_oper_name() {
  set_has_oper_name();
  if (oper_name_ == &::google::protobuf::internal::kEmptyString) {
    oper_name_ = new ::std::string;
  }
  return oper_name_;
}
inline ::std::string* mt_manage_role_byname_reply::release_oper_name() {
  clear_has_oper_name();
  if (oper_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = oper_name_;
    oper_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void mt_manage_role_byname_reply::set_allocated_oper_name(::std::string* oper_name) {
  if (oper_name_ != &::google::protobuf::internal::kEmptyString) {
    delete oper_name_;
  }
  if (oper_name) {
    set_has_oper_name();
    oper_name_ = oper_name;
  } else {
    clear_has_oper_name();
    oper_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// tm_manage_ban_state_query_request

// required uint32 page_num = 1;
inline bool tm_manage_ban_state_query_request::has_page_num() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void tm_manage_ban_state_query_request::set_has_page_num() {
  _has_bits_[0] |= 0x00000001u;
}
inline void tm_manage_ban_state_query_request::clear_has_page_num() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void tm_manage_ban_state_query_request::clear_page_num() {
  page_num_ = 0u;
  clear_has_page_num();
}
inline ::google::protobuf::uint32 tm_manage_ban_state_query_request::page_num() const {
  return page_num_;
}
inline void tm_manage_ban_state_query_request::set_page_num(::google::protobuf::uint32 value) {
  set_has_page_num();
  page_num_ = value;
}

// -------------------------------------------------------------------

// mt_manage_ban_state_query_reply

// required uint32 reply_code = 1;
inline bool mt_manage_ban_state_query_reply::has_reply_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void mt_manage_ban_state_query_reply::set_has_reply_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void mt_manage_ban_state_query_reply::clear_has_reply_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void mt_manage_ban_state_query_reply::clear_reply_code() {
  reply_code_ = 0u;
  clear_has_reply_code();
}
inline ::google::protobuf::uint32 mt_manage_ban_state_query_reply::reply_code() const {
  return reply_code_;
}
inline void mt_manage_ban_state_query_reply::set_reply_code(::google::protobuf::uint32 value) {
  set_has_reply_code();
  reply_code_ = value;
}

// repeated .proto.gm_common.ban_state_info ban_list = 2;
inline int mt_manage_ban_state_query_reply::ban_list_size() const {
  return ban_list_.size();
}
inline void mt_manage_ban_state_query_reply::clear_ban_list() {
  ban_list_.Clear();
}
inline const ::proto::gm_common::ban_state_info& mt_manage_ban_state_query_reply::ban_list(int index) const {
  return ban_list_.Get(index);
}
inline ::proto::gm_common::ban_state_info* mt_manage_ban_state_query_reply::mutable_ban_list(int index) {
  return ban_list_.Mutable(index);
}
inline ::proto::gm_common::ban_state_info* mt_manage_ban_state_query_reply::add_ban_list() {
  return ban_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::gm_common::ban_state_info >&
mt_manage_ban_state_query_reply::ban_list() const {
  return ban_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto::gm_common::ban_state_info >*
mt_manage_ban_state_query_reply::mutable_ban_list() {
  return &ban_list_;
}

// optional uint32 total_pages = 3;
inline bool mt_manage_ban_state_query_reply::has_total_pages() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void mt_manage_ban_state_query_reply::set_has_total_pages() {
  _has_bits_[0] |= 0x00000004u;
}
inline void mt_manage_ban_state_query_reply::clear_has_total_pages() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void mt_manage_ban_state_query_reply::clear_total_pages() {
  total_pages_ = 0u;
  clear_has_total_pages();
}
inline ::google::protobuf::uint32 mt_manage_ban_state_query_reply::total_pages() const {
  return total_pages_;
}
inline void mt_manage_ban_state_query_reply::set_total_pages(::google::protobuf::uint32 value) {
  set_has_total_pages();
  total_pages_ = value;
}

// -------------------------------------------------------------------

// tm_monitor_get_behavior_records_request

// required uint64 user_uid = 1;
inline bool tm_monitor_get_behavior_records_request::has_user_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void tm_monitor_get_behavior_records_request::set_has_user_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void tm_monitor_get_behavior_records_request::clear_has_user_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void tm_monitor_get_behavior_records_request::clear_user_uid() {
  user_uid_ = GOOGLE_ULONGLONG(0);
  clear_has_user_uid();
}
inline ::google::protobuf::uint64 tm_monitor_get_behavior_records_request::user_uid() const {
  return user_uid_;
}
inline void tm_monitor_get_behavior_records_request::set_user_uid(::google::protobuf::uint64 value) {
  set_has_user_uid();
  user_uid_ = value;
}

// required uint32 type = 2;
inline bool tm_monitor_get_behavior_records_request::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void tm_monitor_get_behavior_records_request::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void tm_monitor_get_behavior_records_request::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void tm_monitor_get_behavior_records_request::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 tm_monitor_get_behavior_records_request::type() const {
  return type_;
}
inline void tm_monitor_get_behavior_records_request::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
}

// optional uint32 page_num = 3;
inline bool tm_monitor_get_behavior_records_request::has_page_num() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void tm_monitor_get_behavior_records_request::set_has_page_num() {
  _has_bits_[0] |= 0x00000004u;
}
inline void tm_monitor_get_behavior_records_request::clear_has_page_num() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void tm_monitor_get_behavior_records_request::clear_page_num() {
  page_num_ = 0u;
  clear_has_page_num();
}
inline ::google::protobuf::uint32 tm_monitor_get_behavior_records_request::page_num() const {
  return page_num_;
}
inline void tm_monitor_get_behavior_records_request::set_page_num(::google::protobuf::uint32 value) {
  set_has_page_num();
  page_num_ = value;
}

// -------------------------------------------------------------------

// mt_monitor_get_behavior_records_reply

// required uint32 reply_code = 1;
inline bool mt_monitor_get_behavior_records_reply::has_reply_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void mt_monitor_get_behavior_records_reply::set_has_reply_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void mt_monitor_get_behavior_records_reply::clear_has_reply_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void mt_monitor_get_behavior_records_reply::clear_reply_code() {
  reply_code_ = 0u;
  clear_has_reply_code();
}
inline ::google::protobuf::uint32 mt_monitor_get_behavior_records_reply::reply_code() const {
  return reply_code_;
}
inline void mt_monitor_get_behavior_records_reply::set_reply_code(::google::protobuf::uint32 value) {
  set_has_reply_code();
  reply_code_ = value;
}

// optional uint64 user_uid = 2;
inline bool mt_monitor_get_behavior_records_reply::has_user_uid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void mt_monitor_get_behavior_records_reply::set_has_user_uid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void mt_monitor_get_behavior_records_reply::clear_has_user_uid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void mt_monitor_get_behavior_records_reply::clear_user_uid() {
  user_uid_ = GOOGLE_ULONGLONG(0);
  clear_has_user_uid();
}
inline ::google::protobuf::uint64 mt_monitor_get_behavior_records_reply::user_uid() const {
  return user_uid_;
}
inline void mt_monitor_get_behavior_records_reply::set_user_uid(::google::protobuf::uint64 value) {
  set_has_user_uid();
  user_uid_ = value;
}

// optional uint32 type = 3;
inline bool mt_monitor_get_behavior_records_reply::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void mt_monitor_get_behavior_records_reply::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void mt_monitor_get_behavior_records_reply::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void mt_monitor_get_behavior_records_reply::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 mt_monitor_get_behavior_records_reply::type() const {
  return type_;
}
inline void mt_monitor_get_behavior_records_reply::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
}

// repeated .proto.gm_common.sign_record_single sign_records = 4;
inline int mt_monitor_get_behavior_records_reply::sign_records_size() const {
  return sign_records_.size();
}
inline void mt_monitor_get_behavior_records_reply::clear_sign_records() {
  sign_records_.Clear();
}
inline const ::proto::gm_common::sign_record_single& mt_monitor_get_behavior_records_reply::sign_records(int index) const {
  return sign_records_.Get(index);
}
inline ::proto::gm_common::sign_record_single* mt_monitor_get_behavior_records_reply::mutable_sign_records(int index) {
  return sign_records_.Mutable(index);
}
inline ::proto::gm_common::sign_record_single* mt_monitor_get_behavior_records_reply::add_sign_records() {
  return sign_records_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::gm_common::sign_record_single >&
mt_monitor_get_behavior_records_reply::sign_records() const {
  return sign_records_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto::gm_common::sign_record_single >*
mt_monitor_get_behavior_records_reply::mutable_sign_records() {
  return &sign_records_;
}

// repeated .proto.gm_common.draw_record_single draw_records = 5;
inline int mt_monitor_get_behavior_records_reply::draw_records_size() const {
  return draw_records_.size();
}
inline void mt_monitor_get_behavior_records_reply::clear_draw_records() {
  draw_records_.Clear();
}
inline const ::proto::gm_common::draw_record_single& mt_monitor_get_behavior_records_reply::draw_records(int index) const {
  return draw_records_.Get(index);
}
inline ::proto::gm_common::draw_record_single* mt_monitor_get_behavior_records_reply::mutable_draw_records(int index) {
  return draw_records_.Mutable(index);
}
inline ::proto::gm_common::draw_record_single* mt_monitor_get_behavior_records_reply::add_draw_records() {
  return draw_records_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::gm_common::draw_record_single >&
mt_monitor_get_behavior_records_reply::draw_records() const {
  return draw_records_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto::gm_common::draw_record_single >*
mt_monitor_get_behavior_records_reply::mutable_draw_records() {
  return &draw_records_;
}

// repeated .proto.gm_common.buy_record_single buy_records = 6;
inline int mt_monitor_get_behavior_records_reply::buy_records_size() const {
  return buy_records_.size();
}
inline void mt_monitor_get_behavior_records_reply::clear_buy_records() {
  buy_records_.Clear();
}
inline const ::proto::gm_common::buy_record_single& mt_monitor_get_behavior_records_reply::buy_records(int index) const {
  return buy_records_.Get(index);
}
inline ::proto::gm_common::buy_record_single* mt_monitor_get_behavior_records_reply::mutable_buy_records(int index) {
  return buy_records_.Mutable(index);
}
inline ::proto::gm_common::buy_record_single* mt_monitor_get_behavior_records_reply::add_buy_records() {
  return buy_records_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::gm_common::buy_record_single >&
mt_monitor_get_behavior_records_reply::buy_records() const {
  return buy_records_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto::gm_common::buy_record_single >*
mt_monitor_get_behavior_records_reply::mutable_buy_records() {
  return &buy_records_;
}

// repeated .proto.gm_common.shop_record_single shop_records = 7;
inline int mt_monitor_get_behavior_records_reply::shop_records_size() const {
  return shop_records_.size();
}
inline void mt_monitor_get_behavior_records_reply::clear_shop_records() {
  shop_records_.Clear();
}
inline const ::proto::gm_common::shop_record_single& mt_monitor_get_behavior_records_reply::shop_records(int index) const {
  return shop_records_.Get(index);
}
inline ::proto::gm_common::shop_record_single* mt_monitor_get_behavior_records_reply::mutable_shop_records(int index) {
  return shop_records_.Mutable(index);
}
inline ::proto::gm_common::shop_record_single* mt_monitor_get_behavior_records_reply::add_shop_records() {
  return shop_records_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::gm_common::shop_record_single >&
mt_monitor_get_behavior_records_reply::shop_records() const {
  return shop_records_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto::gm_common::shop_record_single >*
mt_monitor_get_behavior_records_reply::mutable_shop_records() {
  return &shop_records_;
}

// optional uint32 total_pages = 8;
inline bool mt_monitor_get_behavior_records_reply::has_total_pages() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void mt_monitor_get_behavior_records_reply::set_has_total_pages() {
  _has_bits_[0] |= 0x00000080u;
}
inline void mt_monitor_get_behavior_records_reply::clear_has_total_pages() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void mt_monitor_get_behavior_records_reply::clear_total_pages() {
  total_pages_ = 0u;
  clear_has_total_pages();
}
inline ::google::protobuf::uint32 mt_monitor_get_behavior_records_reply::total_pages() const {
  return total_pages_;
}
inline void mt_monitor_get_behavior_records_reply::set_total_pages(::google::protobuf::uint32 value) {
  set_has_total_pages();
  total_pages_ = value;
}

// -------------------------------------------------------------------

// ma_masked_msg_notify

// repeated uint32 masked_list = 1;
inline int ma_masked_msg_notify::masked_list_size() const {
  return masked_list_.size();
}
inline void ma_masked_msg_notify::clear_masked_list() {
  masked_list_.Clear();
}
inline ::google::protobuf::uint32 ma_masked_msg_notify::masked_list(int index) const {
  return masked_list_.Get(index);
}
inline void ma_masked_msg_notify::set_masked_list(int index, ::google::protobuf::uint32 value) {
  masked_list_.Set(index, value);
}
inline void ma_masked_msg_notify::add_masked_list(::google::protobuf::uint32 value) {
  masked_list_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
ma_masked_msg_notify::masked_list() const {
  return masked_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
ma_masked_msg_notify::mutable_masked_list() {
  return &masked_list_;
}

// required uint32 masked_flag = 2;
inline bool ma_masked_msg_notify::has_masked_flag() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ma_masked_msg_notify::set_has_masked_flag() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ma_masked_msg_notify::clear_has_masked_flag() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ma_masked_msg_notify::clear_masked_flag() {
  masked_flag_ = 0u;
  clear_has_masked_flag();
}
inline ::google::protobuf::uint32 ma_masked_msg_notify::masked_flag() const {
  return masked_flag_;
}
inline void ma_masked_msg_notify::set_masked_flag(::google::protobuf::uint32 value) {
  set_has_masked_flag();
  masked_flag_ = value;
}

// -------------------------------------------------------------------

// tm_reload_config_notify

// optional uint32 load_type = 1;
inline bool tm_reload_config_notify::has_load_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void tm_reload_config_notify::set_has_load_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void tm_reload_config_notify::clear_has_load_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void tm_reload_config_notify::clear_load_type() {
  load_type_ = 0u;
  clear_has_load_type();
}
inline ::google::protobuf::uint32 tm_reload_config_notify::load_type() const {
  return load_type_;
}
inline void tm_reload_config_notify::set_load_type(::google::protobuf::uint32 value) {
  set_has_load_type();
  load_type_ = value;
}

// optional string file_name = 2;
inline bool tm_reload_config_notify::has_file_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void tm_reload_config_notify::set_has_file_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void tm_reload_config_notify::clear_has_file_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void tm_reload_config_notify::clear_file_name() {
  if (file_name_ != &::google::protobuf::internal::kEmptyString) {
    file_name_->clear();
  }
  clear_has_file_name();
}
inline const ::std::string& tm_reload_config_notify::file_name() const {
  return *file_name_;
}
inline void tm_reload_config_notify::set_file_name(const ::std::string& value) {
  set_has_file_name();
  if (file_name_ == &::google::protobuf::internal::kEmptyString) {
    file_name_ = new ::std::string;
  }
  file_name_->assign(value);
}
inline void tm_reload_config_notify::set_file_name(const char* value) {
  set_has_file_name();
  if (file_name_ == &::google::protobuf::internal::kEmptyString) {
    file_name_ = new ::std::string;
  }
  file_name_->assign(value);
}
inline void tm_reload_config_notify::set_file_name(const char* value, size_t size) {
  set_has_file_name();
  if (file_name_ == &::google::protobuf::internal::kEmptyString) {
    file_name_ = new ::std::string;
  }
  file_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* tm_reload_config_notify::mutable_file_name() {
  set_has_file_name();
  if (file_name_ == &::google::protobuf::internal::kEmptyString) {
    file_name_ = new ::std::string;
  }
  return file_name_;
}
inline ::std::string* tm_reload_config_notify::release_file_name() {
  clear_has_file_name();
  if (file_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = file_name_;
    file_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void tm_reload_config_notify::set_allocated_file_name(::std::string* file_name) {
  if (file_name_ != &::google::protobuf::internal::kEmptyString) {
    delete file_name_;
  }
  if (file_name) {
    set_has_file_name();
    file_name_ = file_name;
  } else {
    clear_has_file_name();
    file_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// me_ban_account_notify

// required uint32 flag = 1;
inline bool me_ban_account_notify::has_flag() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void me_ban_account_notify::set_has_flag() {
  _has_bits_[0] |= 0x00000001u;
}
inline void me_ban_account_notify::clear_has_flag() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void me_ban_account_notify::clear_flag() {
  flag_ = 0u;
  clear_has_flag();
}
inline ::google::protobuf::uint32 me_ban_account_notify::flag() const {
  return flag_;
}
inline void me_ban_account_notify::set_flag(::google::protobuf::uint32 value) {
  set_has_flag();
  flag_ = value;
}

// required string account = 2;
inline bool me_ban_account_notify::has_account() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void me_ban_account_notify::set_has_account() {
  _has_bits_[0] |= 0x00000002u;
}
inline void me_ban_account_notify::clear_has_account() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void me_ban_account_notify::clear_account() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    account_->clear();
  }
  clear_has_account();
}
inline const ::std::string& me_ban_account_notify::account() const {
  return *account_;
}
inline void me_ban_account_notify::set_account(const ::std::string& value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void me_ban_account_notify::set_account(const char* value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void me_ban_account_notify::set_account(const char* value, size_t size) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* me_ban_account_notify::mutable_account() {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  return account_;
}
inline ::std::string* me_ban_account_notify::release_account() {
  clear_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = account_;
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void me_ban_account_notify::set_allocated_account(::std::string* account) {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (account) {
    set_has_account();
    account_ = account;
  } else {
    clear_has_account();
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// me_access_ip_notify

// required uint32 flag = 1;
inline bool me_access_ip_notify::has_flag() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void me_access_ip_notify::set_has_flag() {
  _has_bits_[0] |= 0x00000001u;
}
inline void me_access_ip_notify::clear_has_flag() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void me_access_ip_notify::clear_flag() {
  flag_ = 0u;
  clear_has_flag();
}
inline ::google::protobuf::uint32 me_access_ip_notify::flag() const {
  return flag_;
}
inline void me_access_ip_notify::set_flag(::google::protobuf::uint32 value) {
  set_has_flag();
  flag_ = value;
}

// required string ip_address = 2;
inline bool me_access_ip_notify::has_ip_address() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void me_access_ip_notify::set_has_ip_address() {
  _has_bits_[0] |= 0x00000002u;
}
inline void me_access_ip_notify::clear_has_ip_address() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void me_access_ip_notify::clear_ip_address() {
  if (ip_address_ != &::google::protobuf::internal::kEmptyString) {
    ip_address_->clear();
  }
  clear_has_ip_address();
}
inline const ::std::string& me_access_ip_notify::ip_address() const {
  return *ip_address_;
}
inline void me_access_ip_notify::set_ip_address(const ::std::string& value) {
  set_has_ip_address();
  if (ip_address_ == &::google::protobuf::internal::kEmptyString) {
    ip_address_ = new ::std::string;
  }
  ip_address_->assign(value);
}
inline void me_access_ip_notify::set_ip_address(const char* value) {
  set_has_ip_address();
  if (ip_address_ == &::google::protobuf::internal::kEmptyString) {
    ip_address_ = new ::std::string;
  }
  ip_address_->assign(value);
}
inline void me_access_ip_notify::set_ip_address(const char* value, size_t size) {
  set_has_ip_address();
  if (ip_address_ == &::google::protobuf::internal::kEmptyString) {
    ip_address_ = new ::std::string;
  }
  ip_address_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* me_access_ip_notify::mutable_ip_address() {
  set_has_ip_address();
  if (ip_address_ == &::google::protobuf::internal::kEmptyString) {
    ip_address_ = new ::std::string;
  }
  return ip_address_;
}
inline ::std::string* me_access_ip_notify::release_ip_address() {
  clear_has_ip_address();
  if (ip_address_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ip_address_;
    ip_address_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void me_access_ip_notify::set_allocated_ip_address(::std::string* ip_address) {
  if (ip_address_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_address_;
  }
  if (ip_address) {
    set_has_ip_address();
    ip_address_ = ip_address;
  } else {
    clear_has_ip_address();
    ip_address_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 ip_end = 3;
inline bool me_access_ip_notify::has_ip_end() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void me_access_ip_notify::set_has_ip_end() {
  _has_bits_[0] |= 0x00000004u;
}
inline void me_access_ip_notify::clear_has_ip_end() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void me_access_ip_notify::clear_ip_end() {
  ip_end_ = 0u;
  clear_has_ip_end();
}
inline ::google::protobuf::uint32 me_access_ip_notify::ip_end() const {
  return ip_end_;
}
inline void me_access_ip_notify::set_ip_end(::google::protobuf::uint32 value) {
  set_has_ip_end();
  ip_end_ = value;
}

// -------------------------------------------------------------------

// tm_test_request

// required uint32 test1 = 1;
inline bool tm_test_request::has_test1() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void tm_test_request::set_has_test1() {
  _has_bits_[0] |= 0x00000001u;
}
inline void tm_test_request::clear_has_test1() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void tm_test_request::clear_test1() {
  test1_ = 0u;
  clear_has_test1();
}
inline ::google::protobuf::uint32 tm_test_request::test1() const {
  return test1_;
}
inline void tm_test_request::set_test1(::google::protobuf::uint32 value) {
  set_has_test1();
  test1_ = value;
}

// required uint32 test2 = 2;
inline bool tm_test_request::has_test2() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void tm_test_request::set_has_test2() {
  _has_bits_[0] |= 0x00000002u;
}
inline void tm_test_request::clear_has_test2() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void tm_test_request::clear_test2() {
  test2_ = 0u;
  clear_has_test2();
}
inline ::google::protobuf::uint32 tm_test_request::test2() const {
  return test2_;
}
inline void tm_test_request::set_test2(::google::protobuf::uint32 value) {
  set_has_test2();
  test2_ = value;
}

// -------------------------------------------------------------------

// mt_test_reply

// required uint32 test1 = 1;
inline bool mt_test_reply::has_test1() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void mt_test_reply::set_has_test1() {
  _has_bits_[0] |= 0x00000001u;
}
inline void mt_test_reply::clear_has_test1() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void mt_test_reply::clear_test1() {
  test1_ = 0u;
  clear_has_test1();
}
inline ::google::protobuf::uint32 mt_test_reply::test1() const {
  return test1_;
}
inline void mt_test_reply::set_test1(::google::protobuf::uint32 value) {
  set_has_test1();
  test1_ = value;
}

// required uint32 test2 = 2;
inline bool mt_test_reply::has_test2() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void mt_test_reply::set_has_test2() {
  _has_bits_[0] |= 0x00000002u;
}
inline void mt_test_reply::clear_has_test2() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void mt_test_reply::clear_test2() {
  test2_ = 0u;
  clear_has_test2();
}
inline ::google::protobuf::uint32 mt_test_reply::test2() const {
  return test2_;
}
inline void mt_test_reply::set_test2(::google::protobuf::uint32 value) {
  set_has_test2();
  test2_ = value;
}

// -------------------------------------------------------------------

// gm_data_threshold_notify

// optional uint64 uid = 1;
inline bool gm_data_threshold_notify::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gm_data_threshold_notify::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gm_data_threshold_notify::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gm_data_threshold_notify::clear_uid() {
  uid_ = GOOGLE_ULONGLONG(0);
  clear_has_uid();
}
inline ::google::protobuf::uint64 gm_data_threshold_notify::uid() const {
  return uid_;
}
inline void gm_data_threshold_notify::set_uid(::google::protobuf::uint64 value) {
  set_has_uid();
  uid_ = value;
}

// optional uint32 type = 2;
inline bool gm_data_threshold_notify::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gm_data_threshold_notify::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gm_data_threshold_notify::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gm_data_threshold_notify::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 gm_data_threshold_notify::type() const {
  return type_;
}
inline void gm_data_threshold_notify::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
}

// optional uint32 value = 3;
inline bool gm_data_threshold_notify::has_value() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void gm_data_threshold_notify::set_has_value() {
  _has_bits_[0] |= 0x00000004u;
}
inline void gm_data_threshold_notify::clear_has_value() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void gm_data_threshold_notify::clear_value() {
  value_ = 0u;
  clear_has_value();
}
inline ::google::protobuf::uint32 gm_data_threshold_notify::value() const {
  return value_;
}
inline void gm_data_threshold_notify::set_value(::google::protobuf::uint32 value) {
  set_has_value();
  value_ = value;
}

// optional uint32 param = 4 [default = 0];
inline bool gm_data_threshold_notify::has_param() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void gm_data_threshold_notify::set_has_param() {
  _has_bits_[0] |= 0x00000008u;
}
inline void gm_data_threshold_notify::clear_has_param() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void gm_data_threshold_notify::clear_param() {
  param_ = 0u;
  clear_has_param();
}
inline ::google::protobuf::uint32 gm_data_threshold_notify::param() const {
  return param_;
}
inline void gm_data_threshold_notify::set_param(::google::protobuf::uint32 value) {
  set_has_param();
  param_ = value;
}

// -------------------------------------------------------------------

// em_do_change_cdkey_request

// optional uint64 role_uid = 1;
inline bool em_do_change_cdkey_request::has_role_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void em_do_change_cdkey_request::set_has_role_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void em_do_change_cdkey_request::clear_has_role_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void em_do_change_cdkey_request::clear_role_uid() {
  role_uid_ = GOOGLE_ULONGLONG(0);
  clear_has_role_uid();
}
inline ::google::protobuf::uint64 em_do_change_cdkey_request::role_uid() const {
  return role_uid_;
}
inline void em_do_change_cdkey_request::set_role_uid(::google::protobuf::uint64 value) {
  set_has_role_uid();
  role_uid_ = value;
}

// optional uint32 channel_id = 2;
inline bool em_do_change_cdkey_request::has_channel_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void em_do_change_cdkey_request::set_has_channel_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void em_do_change_cdkey_request::clear_has_channel_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void em_do_change_cdkey_request::clear_channel_id() {
  channel_id_ = 0u;
  clear_has_channel_id();
}
inline ::google::protobuf::uint32 em_do_change_cdkey_request::channel_id() const {
  return channel_id_;
}
inline void em_do_change_cdkey_request::set_channel_id(::google::protobuf::uint32 value) {
  set_has_channel_id();
  channel_id_ = value;
}

// optional string key_code = 3;
inline bool em_do_change_cdkey_request::has_key_code() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void em_do_change_cdkey_request::set_has_key_code() {
  _has_bits_[0] |= 0x00000004u;
}
inline void em_do_change_cdkey_request::clear_has_key_code() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void em_do_change_cdkey_request::clear_key_code() {
  if (key_code_ != &::google::protobuf::internal::kEmptyString) {
    key_code_->clear();
  }
  clear_has_key_code();
}
inline const ::std::string& em_do_change_cdkey_request::key_code() const {
  return *key_code_;
}
inline void em_do_change_cdkey_request::set_key_code(const ::std::string& value) {
  set_has_key_code();
  if (key_code_ == &::google::protobuf::internal::kEmptyString) {
    key_code_ = new ::std::string;
  }
  key_code_->assign(value);
}
inline void em_do_change_cdkey_request::set_key_code(const char* value) {
  set_has_key_code();
  if (key_code_ == &::google::protobuf::internal::kEmptyString) {
    key_code_ = new ::std::string;
  }
  key_code_->assign(value);
}
inline void em_do_change_cdkey_request::set_key_code(const char* value, size_t size) {
  set_has_key_code();
  if (key_code_ == &::google::protobuf::internal::kEmptyString) {
    key_code_ = new ::std::string;
  }
  key_code_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* em_do_change_cdkey_request::mutable_key_code() {
  set_has_key_code();
  if (key_code_ == &::google::protobuf::internal::kEmptyString) {
    key_code_ = new ::std::string;
  }
  return key_code_;
}
inline ::std::string* em_do_change_cdkey_request::release_key_code() {
  clear_has_key_code();
  if (key_code_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = key_code_;
    key_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void em_do_change_cdkey_request::set_allocated_key_code(::std::string* key_code) {
  if (key_code_ != &::google::protobuf::internal::kEmptyString) {
    delete key_code_;
  }
  if (key_code) {
    set_has_key_code();
    key_code_ = key_code;
  } else {
    clear_has_key_code();
    key_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// me_do_change_cdkey_reply

// optional uint32 reply_code = 1;
inline bool me_do_change_cdkey_reply::has_reply_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void me_do_change_cdkey_reply::set_has_reply_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void me_do_change_cdkey_reply::clear_has_reply_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void me_do_change_cdkey_reply::clear_reply_code() {
  reply_code_ = 0u;
  clear_has_reply_code();
}
inline ::google::protobuf::uint32 me_do_change_cdkey_reply::reply_code() const {
  return reply_code_;
}
inline void me_do_change_cdkey_reply::set_reply_code(::google::protobuf::uint32 value) {
  set_has_reply_code();
  reply_code_ = value;
}

// optional uint64 role_uid = 2;
inline bool me_do_change_cdkey_reply::has_role_uid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void me_do_change_cdkey_reply::set_has_role_uid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void me_do_change_cdkey_reply::clear_has_role_uid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void me_do_change_cdkey_reply::clear_role_uid() {
  role_uid_ = GOOGLE_ULONGLONG(0);
  clear_has_role_uid();
}
inline ::google::protobuf::uint64 me_do_change_cdkey_reply::role_uid() const {
  return role_uid_;
}
inline void me_do_change_cdkey_reply::set_role_uid(::google::protobuf::uint64 value) {
  set_has_role_uid();
  role_uid_ = value;
}

// optional uint32 key_type = 3;
inline bool me_do_change_cdkey_reply::has_key_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void me_do_change_cdkey_reply::set_has_key_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void me_do_change_cdkey_reply::clear_has_key_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void me_do_change_cdkey_reply::clear_key_type() {
  key_type_ = 0u;
  clear_has_key_type();
}
inline ::google::protobuf::uint32 me_do_change_cdkey_reply::key_type() const {
  return key_type_;
}
inline void me_do_change_cdkey_reply::set_key_type(::google::protobuf::uint32 value) {
  set_has_key_type();
  key_type_ = value;
}

// -------------------------------------------------------------------

// me_send_mail_request

// optional .proto.gm_common.global_mail_single mail_data = 1;
inline bool me_send_mail_request::has_mail_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void me_send_mail_request::set_has_mail_data() {
  _has_bits_[0] |= 0x00000001u;
}
inline void me_send_mail_request::clear_has_mail_data() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void me_send_mail_request::clear_mail_data() {
  if (mail_data_ != NULL) mail_data_->::proto::gm_common::global_mail_single::Clear();
  clear_has_mail_data();
}
inline const ::proto::gm_common::global_mail_single& me_send_mail_request::mail_data() const {
  return mail_data_ != NULL ? *mail_data_ : *default_instance_->mail_data_;
}
inline ::proto::gm_common::global_mail_single* me_send_mail_request::mutable_mail_data() {
  set_has_mail_data();
  if (mail_data_ == NULL) mail_data_ = new ::proto::gm_common::global_mail_single;
  return mail_data_;
}
inline ::proto::gm_common::global_mail_single* me_send_mail_request::release_mail_data() {
  clear_has_mail_data();
  ::proto::gm_common::global_mail_single* temp = mail_data_;
  mail_data_ = NULL;
  return temp;
}
inline void me_send_mail_request::set_allocated_mail_data(::proto::gm_common::global_mail_single* mail_data) {
  delete mail_data_;
  mail_data_ = mail_data;
  if (mail_data) {
    set_has_mail_data();
  } else {
    clear_has_mail_data();
  }
}

// -------------------------------------------------------------------

// tm_get_user_ol_num_request

// -------------------------------------------------------------------

// mt_get_user_ol_num_reply

// optional uint32 ol_num = 1;
inline bool mt_get_user_ol_num_reply::has_ol_num() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void mt_get_user_ol_num_reply::set_has_ol_num() {
  _has_bits_[0] |= 0x00000001u;
}
inline void mt_get_user_ol_num_reply::clear_has_ol_num() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void mt_get_user_ol_num_reply::clear_ol_num() {
  ol_num_ = 0u;
  clear_has_ol_num();
}
inline ::google::protobuf::uint32 mt_get_user_ol_num_reply::ol_num() const {
  return ol_num_;
}
inline void mt_get_user_ol_num_reply::set_ol_num(::google::protobuf::uint32 value) {
  set_has_ol_num();
  ol_num_ = value;
}

// -------------------------------------------------------------------

// me_get_user_ol_num_request

// optional uint32 admin_id = 1;
inline bool me_get_user_ol_num_request::has_admin_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void me_get_user_ol_num_request::set_has_admin_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void me_get_user_ol_num_request::clear_has_admin_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void me_get_user_ol_num_request::clear_admin_id() {
  admin_id_ = 0u;
  clear_has_admin_id();
}
inline ::google::protobuf::uint32 me_get_user_ol_num_request::admin_id() const {
  return admin_id_;
}
inline void me_get_user_ol_num_request::set_admin_id(::google::protobuf::uint32 value) {
  set_has_admin_id();
  admin_id_ = value;
}

// -------------------------------------------------------------------

// em_get_user_ol_num_reply

// optional uint32 ol_num = 1;
inline bool em_get_user_ol_num_reply::has_ol_num() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void em_get_user_ol_num_reply::set_has_ol_num() {
  _has_bits_[0] |= 0x00000001u;
}
inline void em_get_user_ol_num_reply::clear_has_ol_num() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void em_get_user_ol_num_reply::clear_ol_num() {
  ol_num_ = 0u;
  clear_has_ol_num();
}
inline ::google::protobuf::uint32 em_get_user_ol_num_reply::ol_num() const {
  return ol_num_;
}
inline void em_get_user_ol_num_reply::set_ol_num(::google::protobuf::uint32 value) {
  set_has_ol_num();
  ol_num_ = value;
}

// optional uint32 admin_id = 2;
inline bool em_get_user_ol_num_reply::has_admin_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void em_get_user_ol_num_reply::set_has_admin_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void em_get_user_ol_num_reply::clear_has_admin_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void em_get_user_ol_num_reply::clear_admin_id() {
  admin_id_ = 0u;
  clear_has_admin_id();
}
inline ::google::protobuf::uint32 em_get_user_ol_num_reply::admin_id() const {
  return admin_id_;
}
inline void em_get_user_ol_num_reply::set_admin_id(::google::protobuf::uint32 value) {
  set_has_admin_id();
  admin_id_ = value;
}

// -------------------------------------------------------------------

// tm_send_notice_request

// optional uint32 type = 1;
inline bool tm_send_notice_request::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void tm_send_notice_request::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void tm_send_notice_request::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void tm_send_notice_request::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 tm_send_notice_request::type() const {
  return type_;
}
inline void tm_send_notice_request::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
}

// optional uint32 tick = 2;
inline bool tm_send_notice_request::has_tick() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void tm_send_notice_request::set_has_tick() {
  _has_bits_[0] |= 0x00000002u;
}
inline void tm_send_notice_request::clear_has_tick() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void tm_send_notice_request::clear_tick() {
  tick_ = 0u;
  clear_has_tick();
}
inline ::google::protobuf::uint32 tm_send_notice_request::tick() const {
  return tick_;
}
inline void tm_send_notice_request::set_tick(::google::protobuf::uint32 value) {
  set_has_tick();
  tick_ = value;
}

// optional uint32 start_time = 3;
inline bool tm_send_notice_request::has_start_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void tm_send_notice_request::set_has_start_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void tm_send_notice_request::clear_has_start_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void tm_send_notice_request::clear_start_time() {
  start_time_ = 0u;
  clear_has_start_time();
}
inline ::google::protobuf::uint32 tm_send_notice_request::start_time() const {
  return start_time_;
}
inline void tm_send_notice_request::set_start_time(::google::protobuf::uint32 value) {
  set_has_start_time();
  start_time_ = value;
}

// optional uint32 end_time = 4;
inline bool tm_send_notice_request::has_end_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void tm_send_notice_request::set_has_end_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void tm_send_notice_request::clear_has_end_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void tm_send_notice_request::clear_end_time() {
  end_time_ = 0u;
  clear_has_end_time();
}
inline ::google::protobuf::uint32 tm_send_notice_request::end_time() const {
  return end_time_;
}
inline void tm_send_notice_request::set_end_time(::google::protobuf::uint32 value) {
  set_has_end_time();
  end_time_ = value;
}

// optional string notice = 5;
inline bool tm_send_notice_request::has_notice() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void tm_send_notice_request::set_has_notice() {
  _has_bits_[0] |= 0x00000010u;
}
inline void tm_send_notice_request::clear_has_notice() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void tm_send_notice_request::clear_notice() {
  if (notice_ != &::google::protobuf::internal::kEmptyString) {
    notice_->clear();
  }
  clear_has_notice();
}
inline const ::std::string& tm_send_notice_request::notice() const {
  return *notice_;
}
inline void tm_send_notice_request::set_notice(const ::std::string& value) {
  set_has_notice();
  if (notice_ == &::google::protobuf::internal::kEmptyString) {
    notice_ = new ::std::string;
  }
  notice_->assign(value);
}
inline void tm_send_notice_request::set_notice(const char* value) {
  set_has_notice();
  if (notice_ == &::google::protobuf::internal::kEmptyString) {
    notice_ = new ::std::string;
  }
  notice_->assign(value);
}
inline void tm_send_notice_request::set_notice(const char* value, size_t size) {
  set_has_notice();
  if (notice_ == &::google::protobuf::internal::kEmptyString) {
    notice_ = new ::std::string;
  }
  notice_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* tm_send_notice_request::mutable_notice() {
  set_has_notice();
  if (notice_ == &::google::protobuf::internal::kEmptyString) {
    notice_ = new ::std::string;
  }
  return notice_;
}
inline ::std::string* tm_send_notice_request::release_notice() {
  clear_has_notice();
  if (notice_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = notice_;
    notice_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void tm_send_notice_request::set_allocated_notice(::std::string* notice) {
  if (notice_ != &::google::protobuf::internal::kEmptyString) {
    delete notice_;
  }
  if (notice) {
    set_has_notice();
    notice_ = notice;
  } else {
    clear_has_notice();
    notice_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// mt_send_notice_reply

// optional uint32 reply_code = 1;
inline bool mt_send_notice_reply::has_reply_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void mt_send_notice_reply::set_has_reply_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void mt_send_notice_reply::clear_has_reply_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void mt_send_notice_reply::clear_reply_code() {
  reply_code_ = 0u;
  clear_has_reply_code();
}
inline ::google::protobuf::uint32 mt_send_notice_reply::reply_code() const {
  return reply_code_;
}
inline void mt_send_notice_reply::set_reply_code(::google::protobuf::uint32 value) {
  set_has_reply_code();
  reply_code_ = value;
}

// -------------------------------------------------------------------

// me_send_notice_request

// optional .proto.gm_common.gm_notice_single notice_data = 1;
inline bool me_send_notice_request::has_notice_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void me_send_notice_request::set_has_notice_data() {
  _has_bits_[0] |= 0x00000001u;
}
inline void me_send_notice_request::clear_has_notice_data() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void me_send_notice_request::clear_notice_data() {
  if (notice_data_ != NULL) notice_data_->::proto::gm_common::gm_notice_single::Clear();
  clear_has_notice_data();
}
inline const ::proto::gm_common::gm_notice_single& me_send_notice_request::notice_data() const {
  return notice_data_ != NULL ? *notice_data_ : *default_instance_->notice_data_;
}
inline ::proto::gm_common::gm_notice_single* me_send_notice_request::mutable_notice_data() {
  set_has_notice_data();
  if (notice_data_ == NULL) notice_data_ = new ::proto::gm_common::gm_notice_single;
  return notice_data_;
}
inline ::proto::gm_common::gm_notice_single* me_send_notice_request::release_notice_data() {
  clear_has_notice_data();
  ::proto::gm_common::gm_notice_single* temp = notice_data_;
  notice_data_ = NULL;
  return temp;
}
inline void me_send_notice_request::set_allocated_notice_data(::proto::gm_common::gm_notice_single* notice_data) {
  delete notice_data_;
  notice_data_ = notice_data;
  if (notice_data) {
    set_has_notice_data();
  } else {
    clear_has_notice_data();
  }
}

// -------------------------------------------------------------------

// em_send_notice_reply

// optional uint32 reply_code = 1;
inline bool em_send_notice_reply::has_reply_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void em_send_notice_reply::set_has_reply_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void em_send_notice_reply::clear_has_reply_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void em_send_notice_reply::clear_reply_code() {
  reply_code_ = 0u;
  clear_has_reply_code();
}
inline ::google::protobuf::uint32 em_send_notice_reply::reply_code() const {
  return reply_code_;
}
inline void em_send_notice_reply::set_reply_code(::google::protobuf::uint32 value) {
  set_has_reply_code();
  reply_code_ = value;
}

// -------------------------------------------------------------------

// me_transport_ntf

// optional uint64 role_uid = 1;
inline bool me_transport_ntf::has_role_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void me_transport_ntf::set_has_role_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void me_transport_ntf::clear_has_role_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void me_transport_ntf::clear_role_uid() {
  role_uid_ = GOOGLE_ULONGLONG(0);
  clear_has_role_uid();
}
inline ::google::protobuf::uint64 me_transport_ntf::role_uid() const {
  return role_uid_;
}
inline void me_transport_ntf::set_role_uid(::google::protobuf::uint64 value) {
  set_has_role_uid();
  role_uid_ = value;
}

// optional uint32 scene_id = 2;
inline bool me_transport_ntf::has_scene_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void me_transport_ntf::set_has_scene_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void me_transport_ntf::clear_has_scene_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void me_transport_ntf::clear_scene_id() {
  scene_id_ = 0u;
  clear_has_scene_id();
}
inline ::google::protobuf::uint32 me_transport_ntf::scene_id() const {
  return scene_id_;
}
inline void me_transport_ntf::set_scene_id(::google::protobuf::uint32 value) {
  set_has_scene_id();
  scene_id_ = value;
}

// -------------------------------------------------------------------

// tm_set_user_create_limit_request

// optional uint32 flag = 1;
inline bool tm_set_user_create_limit_request::has_flag() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void tm_set_user_create_limit_request::set_has_flag() {
  _has_bits_[0] |= 0x00000001u;
}
inline void tm_set_user_create_limit_request::clear_has_flag() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void tm_set_user_create_limit_request::clear_flag() {
  flag_ = 0u;
  clear_has_flag();
}
inline ::google::protobuf::uint32 tm_set_user_create_limit_request::flag() const {
  return flag_;
}
inline void tm_set_user_create_limit_request::set_flag(::google::protobuf::uint32 value) {
  set_has_flag();
  flag_ = value;
}

// -------------------------------------------------------------------

// mt_set_user_create_limit_reply

// optional uint32 reply_code = 1;
inline bool mt_set_user_create_limit_reply::has_reply_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void mt_set_user_create_limit_reply::set_has_reply_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void mt_set_user_create_limit_reply::clear_has_reply_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void mt_set_user_create_limit_reply::clear_reply_code() {
  reply_code_ = 0u;
  clear_has_reply_code();
}
inline ::google::protobuf::uint32 mt_set_user_create_limit_reply::reply_code() const {
  return reply_code_;
}
inline void mt_set_user_create_limit_reply::set_reply_code(::google::protobuf::uint32 value) {
  set_has_reply_code();
  reply_code_ = value;
}

// -------------------------------------------------------------------

// me_send_gm_msg_to_account_request

// optional uint32 cmd_type = 1;
inline bool me_send_gm_msg_to_account_request::has_cmd_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void me_send_gm_msg_to_account_request::set_has_cmd_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void me_send_gm_msg_to_account_request::clear_has_cmd_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void me_send_gm_msg_to_account_request::clear_cmd_type() {
  cmd_type_ = 0u;
  clear_has_cmd_type();
}
inline ::google::protobuf::uint32 me_send_gm_msg_to_account_request::cmd_type() const {
  return cmd_type_;
}
inline void me_send_gm_msg_to_account_request::set_cmd_type(::google::protobuf::uint32 value) {
  set_has_cmd_type();
  cmd_type_ = value;
}

// optional .proto.common.gm_msg_to_account msg = 2;
inline bool me_send_gm_msg_to_account_request::has_msg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void me_send_gm_msg_to_account_request::set_has_msg() {
  _has_bits_[0] |= 0x00000002u;
}
inline void me_send_gm_msg_to_account_request::clear_has_msg() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void me_send_gm_msg_to_account_request::clear_msg() {
  if (msg_ != NULL) msg_->::proto::common::gm_msg_to_account::Clear();
  clear_has_msg();
}
inline const ::proto::common::gm_msg_to_account& me_send_gm_msg_to_account_request::msg() const {
  return msg_ != NULL ? *msg_ : *default_instance_->msg_;
}
inline ::proto::common::gm_msg_to_account* me_send_gm_msg_to_account_request::mutable_msg() {
  set_has_msg();
  if (msg_ == NULL) msg_ = new ::proto::common::gm_msg_to_account;
  return msg_;
}
inline ::proto::common::gm_msg_to_account* me_send_gm_msg_to_account_request::release_msg() {
  clear_has_msg();
  ::proto::common::gm_msg_to_account* temp = msg_;
  msg_ = NULL;
  return temp;
}
inline void me_send_gm_msg_to_account_request::set_allocated_msg(::proto::common::gm_msg_to_account* msg) {
  delete msg_;
  msg_ = msg;
  if (msg) {
    set_has_msg();
  } else {
    clear_has_msg();
  }
}

// -------------------------------------------------------------------

// tm_refresh_login_list

// -------------------------------------------------------------------

// tm_search_role_byid_request

// optional uint32 role_did = 1;
inline bool tm_search_role_byid_request::has_role_did() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void tm_search_role_byid_request::set_has_role_did() {
  _has_bits_[0] |= 0x00000001u;
}
inline void tm_search_role_byid_request::clear_has_role_did() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void tm_search_role_byid_request::clear_role_did() {
  role_did_ = 0u;
  clear_has_role_did();
}
inline ::google::protobuf::uint32 tm_search_role_byid_request::role_did() const {
  return role_did_;
}
inline void tm_search_role_byid_request::set_role_did(::google::protobuf::uint32 value) {
  set_has_role_did();
  role_did_ = value;
}

// -------------------------------------------------------------------

// tm_search_role_byname_request

// optional string role_name = 1;
inline bool tm_search_role_byname_request::has_role_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void tm_search_role_byname_request::set_has_role_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void tm_search_role_byname_request::clear_has_role_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void tm_search_role_byname_request::clear_role_name() {
  if (role_name_ != &::google::protobuf::internal::kEmptyString) {
    role_name_->clear();
  }
  clear_has_role_name();
}
inline const ::std::string& tm_search_role_byname_request::role_name() const {
  return *role_name_;
}
inline void tm_search_role_byname_request::set_role_name(const ::std::string& value) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(value);
}
inline void tm_search_role_byname_request::set_role_name(const char* value) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(value);
}
inline void tm_search_role_byname_request::set_role_name(const char* value, size_t size) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* tm_search_role_byname_request::mutable_role_name() {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  return role_name_;
}
inline ::std::string* tm_search_role_byname_request::release_role_name() {
  clear_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = role_name_;
    role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void tm_search_role_byname_request::set_allocated_role_name(::std::string* role_name) {
  if (role_name_ != &::google::protobuf::internal::kEmptyString) {
    delete role_name_;
  }
  if (role_name) {
    set_has_role_name();
    role_name_ = role_name;
  } else {
    clear_has_role_name();
    role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// mt_search_role_byname_reply

// optional uint32 role_did = 1;
inline bool mt_search_role_byname_reply::has_role_did() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void mt_search_role_byname_reply::set_has_role_did() {
  _has_bits_[0] |= 0x00000001u;
}
inline void mt_search_role_byname_reply::clear_has_role_did() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void mt_search_role_byname_reply::clear_role_did() {
  role_did_ = 0u;
  clear_has_role_did();
}
inline ::google::protobuf::uint32 mt_search_role_byname_reply::role_did() const {
  return role_did_;
}
inline void mt_search_role_byname_reply::set_role_did(::google::protobuf::uint32 value) {
  set_has_role_did();
  role_did_ = value;
}

// optional string role_name = 2;
inline bool mt_search_role_byname_reply::has_role_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void mt_search_role_byname_reply::set_has_role_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void mt_search_role_byname_reply::clear_has_role_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void mt_search_role_byname_reply::clear_role_name() {
  if (role_name_ != &::google::protobuf::internal::kEmptyString) {
    role_name_->clear();
  }
  clear_has_role_name();
}
inline const ::std::string& mt_search_role_byname_reply::role_name() const {
  return *role_name_;
}
inline void mt_search_role_byname_reply::set_role_name(const ::std::string& value) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(value);
}
inline void mt_search_role_byname_reply::set_role_name(const char* value) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(value);
}
inline void mt_search_role_byname_reply::set_role_name(const char* value, size_t size) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* mt_search_role_byname_reply::mutable_role_name() {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  return role_name_;
}
inline ::std::string* mt_search_role_byname_reply::release_role_name() {
  clear_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = role_name_;
    role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void mt_search_role_byname_reply::set_allocated_role_name(::std::string* role_name) {
  if (role_name_ != &::google::protobuf::internal::kEmptyString) {
    delete role_name_;
  }
  if (role_name) {
    set_has_role_name();
    role_name_ = role_name;
  } else {
    clear_has_role_name();
    role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 create_time = 3;
inline bool mt_search_role_byname_reply::has_create_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void mt_search_role_byname_reply::set_has_create_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void mt_search_role_byname_reply::clear_has_create_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void mt_search_role_byname_reply::clear_create_time() {
  create_time_ = 0u;
  clear_has_create_time();
}
inline ::google::protobuf::uint32 mt_search_role_byname_reply::create_time() const {
  return create_time_;
}
inline void mt_search_role_byname_reply::set_create_time(::google::protobuf::uint32 value) {
  set_has_create_time();
  create_time_ = value;
}

// optional uint32 last_login_time = 4;
inline bool mt_search_role_byname_reply::has_last_login_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void mt_search_role_byname_reply::set_has_last_login_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void mt_search_role_byname_reply::clear_has_last_login_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void mt_search_role_byname_reply::clear_last_login_time() {
  last_login_time_ = 0u;
  clear_has_last_login_time();
}
inline ::google::protobuf::uint32 mt_search_role_byname_reply::last_login_time() const {
  return last_login_time_;
}
inline void mt_search_role_byname_reply::set_last_login_time(::google::protobuf::uint32 value) {
  set_has_last_login_time();
  last_login_time_ = value;
}

// optional uint32 last_logout_time = 5;
inline bool mt_search_role_byname_reply::has_last_logout_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void mt_search_role_byname_reply::set_has_last_logout_time() {
  _has_bits_[0] |= 0x00000010u;
}
inline void mt_search_role_byname_reply::clear_has_last_logout_time() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void mt_search_role_byname_reply::clear_last_logout_time() {
  last_logout_time_ = 0u;
  clear_has_last_logout_time();
}
inline ::google::protobuf::uint32 mt_search_role_byname_reply::last_logout_time() const {
  return last_logout_time_;
}
inline void mt_search_role_byname_reply::set_last_logout_time(::google::protobuf::uint32 value) {
  set_has_last_logout_time();
  last_logout_time_ = value;
}

// optional uint32 level = 6;
inline bool mt_search_role_byname_reply::has_level() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void mt_search_role_byname_reply::set_has_level() {
  _has_bits_[0] |= 0x00000020u;
}
inline void mt_search_role_byname_reply::clear_has_level() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void mt_search_role_byname_reply::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 mt_search_role_byname_reply::level() const {
  return level_;
}
inline void mt_search_role_byname_reply::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
}

// optional uint32 total_recharge = 7;
inline bool mt_search_role_byname_reply::has_total_recharge() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void mt_search_role_byname_reply::set_has_total_recharge() {
  _has_bits_[0] |= 0x00000040u;
}
inline void mt_search_role_byname_reply::clear_has_total_recharge() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void mt_search_role_byname_reply::clear_total_recharge() {
  total_recharge_ = 0u;
  clear_has_total_recharge();
}
inline ::google::protobuf::uint32 mt_search_role_byname_reply::total_recharge() const {
  return total_recharge_;
}
inline void mt_search_role_byname_reply::set_total_recharge(::google::protobuf::uint32 value) {
  set_has_total_recharge();
  total_recharge_ = value;
}

// optional uint32 gold = 8;
inline bool mt_search_role_byname_reply::has_gold() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void mt_search_role_byname_reply::set_has_gold() {
  _has_bits_[0] |= 0x00000080u;
}
inline void mt_search_role_byname_reply::clear_has_gold() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void mt_search_role_byname_reply::clear_gold() {
  gold_ = 0u;
  clear_has_gold();
}
inline ::google::protobuf::uint32 mt_search_role_byname_reply::gold() const {
  return gold_;
}
inline void mt_search_role_byname_reply::set_gold(::google::protobuf::uint32 value) {
  set_has_gold();
  gold_ = value;
}

// optional uint32 silver = 9;
inline bool mt_search_role_byname_reply::has_silver() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void mt_search_role_byname_reply::set_has_silver() {
  _has_bits_[0] |= 0x00000100u;
}
inline void mt_search_role_byname_reply::clear_has_silver() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void mt_search_role_byname_reply::clear_silver() {
  silver_ = 0u;
  clear_has_silver();
}
inline ::google::protobuf::uint32 mt_search_role_byname_reply::silver() const {
  return silver_;
}
inline void mt_search_role_byname_reply::set_silver(::google::protobuf::uint32 value) {
  set_has_silver();
  silver_ = value;
}

// optional uint32 copper = 10;
inline bool mt_search_role_byname_reply::has_copper() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void mt_search_role_byname_reply::set_has_copper() {
  _has_bits_[0] |= 0x00000200u;
}
inline void mt_search_role_byname_reply::clear_has_copper() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void mt_search_role_byname_reply::clear_copper() {
  copper_ = 0u;
  clear_has_copper();
}
inline ::google::protobuf::uint32 mt_search_role_byname_reply::copper() const {
  return copper_;
}
inline void mt_search_role_byname_reply::set_copper(::google::protobuf::uint32 value) {
  set_has_copper();
  copper_ = value;
}

// optional uint32 life_stone = 11;
inline bool mt_search_role_byname_reply::has_life_stone() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void mt_search_role_byname_reply::set_has_life_stone() {
  _has_bits_[0] |= 0x00000400u;
}
inline void mt_search_role_byname_reply::clear_has_life_stone() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void mt_search_role_byname_reply::clear_life_stone() {
  life_stone_ = 0u;
  clear_has_life_stone();
}
inline ::google::protobuf::uint32 mt_search_role_byname_reply::life_stone() const {
  return life_stone_;
}
inline void mt_search_role_byname_reply::set_life_stone(::google::protobuf::uint32 value) {
  set_has_life_stone();
  life_stone_ = value;
}

// optional uint32 fighting = 12;
inline bool mt_search_role_byname_reply::has_fighting() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void mt_search_role_byname_reply::set_has_fighting() {
  _has_bits_[0] |= 0x00000800u;
}
inline void mt_search_role_byname_reply::clear_has_fighting() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void mt_search_role_byname_reply::clear_fighting() {
  fighting_ = 0u;
  clear_has_fighting();
}
inline ::google::protobuf::uint32 mt_search_role_byname_reply::fighting() const {
  return fighting_;
}
inline void mt_search_role_byname_reply::set_fighting(::google::protobuf::uint32 value) {
  set_has_fighting();
  fighting_ = value;
}

// optional uint32 scene_id = 13;
inline bool mt_search_role_byname_reply::has_scene_id() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void mt_search_role_byname_reply::set_has_scene_id() {
  _has_bits_[0] |= 0x00001000u;
}
inline void mt_search_role_byname_reply::clear_has_scene_id() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void mt_search_role_byname_reply::clear_scene_id() {
  scene_id_ = 0u;
  clear_has_scene_id();
}
inline ::google::protobuf::uint32 mt_search_role_byname_reply::scene_id() const {
  return scene_id_;
}
inline void mt_search_role_byname_reply::set_scene_id(::google::protobuf::uint32 value) {
  set_has_scene_id();
  scene_id_ = value;
}

// optional uint32 vip_level = 14;
inline bool mt_search_role_byname_reply::has_vip_level() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void mt_search_role_byname_reply::set_has_vip_level() {
  _has_bits_[0] |= 0x00002000u;
}
inline void mt_search_role_byname_reply::clear_has_vip_level() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void mt_search_role_byname_reply::clear_vip_level() {
  vip_level_ = 0u;
  clear_has_vip_level();
}
inline ::google::protobuf::uint32 mt_search_role_byname_reply::vip_level() const {
  return vip_level_;
}
inline void mt_search_role_byname_reply::set_vip_level(::google::protobuf::uint32 value) {
  set_has_vip_level();
  vip_level_ = value;
}

// optional uint64 role_uid = 15;
inline bool mt_search_role_byname_reply::has_role_uid() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void mt_search_role_byname_reply::set_has_role_uid() {
  _has_bits_[0] |= 0x00004000u;
}
inline void mt_search_role_byname_reply::clear_has_role_uid() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void mt_search_role_byname_reply::clear_role_uid() {
  role_uid_ = GOOGLE_ULONGLONG(0);
  clear_has_role_uid();
}
inline ::google::protobuf::uint64 mt_search_role_byname_reply::role_uid() const {
  return role_uid_;
}
inline void mt_search_role_byname_reply::set_role_uid(::google::protobuf::uint64 value) {
  set_has_role_uid();
  role_uid_ = value;
}

// -------------------------------------------------------------------

// mall_reload_xml_notify

// optional string field = 1;
inline bool mall_reload_xml_notify::has_field() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void mall_reload_xml_notify::set_has_field() {
  _has_bits_[0] |= 0x00000001u;
}
inline void mall_reload_xml_notify::clear_has_field() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void mall_reload_xml_notify::clear_field() {
  if (field_ != &::google::protobuf::internal::kEmptyString) {
    field_->clear();
  }
  clear_has_field();
}
inline const ::std::string& mall_reload_xml_notify::field() const {
  return *field_;
}
inline void mall_reload_xml_notify::set_field(const ::std::string& value) {
  set_has_field();
  if (field_ == &::google::protobuf::internal::kEmptyString) {
    field_ = new ::std::string;
  }
  field_->assign(value);
}
inline void mall_reload_xml_notify::set_field(const char* value) {
  set_has_field();
  if (field_ == &::google::protobuf::internal::kEmptyString) {
    field_ = new ::std::string;
  }
  field_->assign(value);
}
inline void mall_reload_xml_notify::set_field(const char* value, size_t size) {
  set_has_field();
  if (field_ == &::google::protobuf::internal::kEmptyString) {
    field_ = new ::std::string;
  }
  field_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* mall_reload_xml_notify::mutable_field() {
  set_has_field();
  if (field_ == &::google::protobuf::internal::kEmptyString) {
    field_ = new ::std::string;
  }
  return field_;
}
inline ::std::string* mall_reload_xml_notify::release_field() {
  clear_has_field();
  if (field_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = field_;
    field_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void mall_reload_xml_notify::set_allocated_field(::std::string* field) {
  if (field_ != &::google::protobuf::internal::kEmptyString) {
    delete field_;
  }
  if (field) {
    set_has_field();
    field_ = field;
  } else {
    clear_has_field();
    field_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string dest = 2;
inline bool mall_reload_xml_notify::has_dest() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void mall_reload_xml_notify::set_has_dest() {
  _has_bits_[0] |= 0x00000002u;
}
inline void mall_reload_xml_notify::clear_has_dest() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void mall_reload_xml_notify::clear_dest() {
  if (dest_ != &::google::protobuf::internal::kEmptyString) {
    dest_->clear();
  }
  clear_has_dest();
}
inline const ::std::string& mall_reload_xml_notify::dest() const {
  return *dest_;
}
inline void mall_reload_xml_notify::set_dest(const ::std::string& value) {
  set_has_dest();
  if (dest_ == &::google::protobuf::internal::kEmptyString) {
    dest_ = new ::std::string;
  }
  dest_->assign(value);
}
inline void mall_reload_xml_notify::set_dest(const char* value) {
  set_has_dest();
  if (dest_ == &::google::protobuf::internal::kEmptyString) {
    dest_ = new ::std::string;
  }
  dest_->assign(value);
}
inline void mall_reload_xml_notify::set_dest(const char* value, size_t size) {
  set_has_dest();
  if (dest_ == &::google::protobuf::internal::kEmptyString) {
    dest_ = new ::std::string;
  }
  dest_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* mall_reload_xml_notify::mutable_dest() {
  set_has_dest();
  if (dest_ == &::google::protobuf::internal::kEmptyString) {
    dest_ = new ::std::string;
  }
  return dest_;
}
inline ::std::string* mall_reload_xml_notify::release_dest() {
  clear_has_dest();
  if (dest_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = dest_;
    dest_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void mall_reload_xml_notify::set_allocated_dest(::std::string* dest) {
  if (dest_ != &::google::protobuf::internal::kEmptyString) {
    delete dest_;
  }
  if (dest) {
    set_has_dest();
    dest_ = dest;
  } else {
    clear_has_dest();
    dest_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace gm
}  // namespace proto

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_gm_2eproto__INCLUDED
