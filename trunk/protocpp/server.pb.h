// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: server.proto

#ifndef PROTOBUF_server_2eproto__INCLUDED
#define PROTOBUF_server_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "common.pb.h"
#include "client.pb.h"
#include "gm_common.pb.h"
// @@protoc_insertion_point(includes)

namespace proto {
namespace server {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_server_2eproto();
void protobuf_AssignDesc_server_2eproto();
void protobuf_ShutdownFile_server_2eproto();

class data_sync_item;
class server_pingpong_request;
class la_login_request;
class al_login_reply;
class gr_role_leave_game_notify;
class ag_role_enter_game_notify;
class ga_role_move_notify;
class ga_role_into_vision_notify;
class ga_role_out_vision_notify;
class ga_broadcast_notify;
class ea_broadcast_notify;
class al_kick_role_notify;
class al_kick_gate_all_user_notify;
class gh_kick_role_notify;
class gd_batch_save_to_db_notify;
class save_to_db;
class gd_role_data_request;
class dg_role_data_reply;
class al_update_gate_user_num_notify;
class de_user_data_reply;
class de_user_center_data_reply;
class ed_sync_role_data_request;
class ag_save_user_notify;
class ln_syn_login_info_notify;
class ln_close_server_notify;
class ln_user_num_notify;
class ag_syn_gate_info_notify;
class gh_syn_online_role_notify;
class hg_test_notify;
class ah_syn_gate_info_notify;
class ha_test_reply;
class gh_syn_game_info_notify;
class hg_chat_get_role_info_request;
class gh_chat_get_role_info_reply;
class hg_get_nearby_roles_request;
class gh_get_nearby_roles_reply;
class hg_task_seek_help_request;
class gh_task_seek_help_reply;
class hf_syn_chat_info_notify;
class fh_syn_transfer_info_notify;
class gh_gm_cmd_notify;
class hf_gm_cmd_notify;
class fh_test_reply;
class hg_syn_online_role_list_request;
class gh_syn_online_role_list_notify;
class eh_country_member_change_notify;
class eh_family_member_change_notify;
class hf_get_server_channel_list_request;
class fh_get_server_channel_list_reply;
class hf_change_server_channel_request;
class fh_change_server_channel_reply;
class fh_change_server_channel_notify;
class ha_change_server_channel_notify;
class hf_server_channel_chat_request;
class fh_server_channel_chat_reply;
class fh_server_channel_chat_notify;
class ha_server_channel_chat_notify;
class hf_personal_chat_request;
class fh_personal_chat_notify;
class ha_personal_chat_notify;
class he_family_chat_notify;
class he_personal_chat_notify;
class eh_kick_all_user_notify;
class dn_create_role_request;
class nd_create_role_reply;
class dn_role_data_update_notify;
class hg_user_channel_notify;
class ge_syn_game_info_notify;
class gd_syn_game_info_notify;
class al_syn_gate_info_notify;
class ga_syn_game_info_notify;
class ga_syn_cross_id_notify;
class ae_syn_gate_info_notify;
class cross_server_data;
class ae_reg_user_center_request;
class ae_unreg_user_scene_notify;
class ea_unreg_user_center_notify;
class ae_create_role_request;
class ea_create_role_reply;
class ae_user_cross_server_notify;
class ea_kick_all_user_notify;
class global_user_data;
class eg_unreg_user_scene_notify;
class ge_unreg_user_scene_notify;
class eg_reg_user_scene_request;
class ge_reg_user_scene_reply;
class eg_relogin_scene_request;
class ge_user_cross_scene_request;
class eg_user_cross_scene_reply;
class eg_kick_all_user_notify;
class ed_create_role_request;
class de_create_role_reply;
class ed_query_role_data_request;
class de_query_role_data_reply;
class ed_role_leave_game_notify;
class ag_unreg_user_scene_notify;
class ga_unreg_user_scene_notify;
class ga_reg_user_success_notify;
class ga_user_cross_server_notify;
class ge_city_trade_add_prosperity_value_notify;
class eg_city_base_info_notify;
class ge_get_city_list_request;
class eg_get_city_list_reply;
class eh_test_request;
class he_test_reply;
class ge_update_rank_notify;
class ge_create_family_request;
class eg_update_family_info_notify;
class eg_create_family_reply;
class ge_impeach_family_general_request;
class eg_impeach_family_general_reply;
class eg_notify_game_impeach_result;
class family_war_dungeon_info;
class family_war_dungeon_data;
class family_war_dungeon_back;
class eg_prepare_family_war_request;
class ge_prepare_family_war_reply;
class eg_family_war_start_notify;
class eg_family_war_end_notify;
class eg_enter_family_war_scene_request;
class family_war_personal;
class family_war_result_data;
class ge_family_war_early_result_notify;
class ge_family_war_result_notify;
class ge_family_update_glory_notify;
class ge_family_prayer_request;
class ge_family_prayer_gift_request;
class eg_family_prayer_gift_failed_notify;
class eg_family_country_change_notify;
class eg_family_level_change_notify;
class ge_family_shop_buy_request;
class eg_family_shop_buy_reply;
class ge_family_shop_back_notify;
class ge_gm_set_king_family_notify;
class eg_update_country_notify;
class eg_country_name_change_request;
class ge_country_name_change_reply;
class eg_country_year_name_request;
class ge_country_year_name_reply;
class eg_sync_data_request;
class ge_sync_data_request;
class ge_ready_enter_scene_notify;
class eg_summon_field_boss_request;
class eg_field_boss_die_notify;
class ge_summon_field_boss_replay;
class eg_clear_all_boss_notify;
class ge_field_boss_killed_notify;
class field_boss_rank;
class ge_field_boss_rank_notify;
class ge_check_drop_items_request;
class eg_check_drop_items_reply;
class eg_syn_item_limit_notify;
class ge_redbag_send_notify;
class eg_redbag_draw_notify;
class gall_reload_config_notify;
class eg_chat_get_role_info_request;
class ge_chat_get_role_info_reply;
class fr_syn_transfer_info_request;
class fr_test_request;
class rf_test_reply;
class mail_get_addenda;
class eg_mail_get_addenda_request;
class mail_get_addenda_back;
class ge_mail_get_addenda_reply;
class ge_mail_new_notify;
class sr_syn_cross_info_notify;
class rs_syn_area_info_notify;
class rs_cross_fight_test_notify;
class gr_cross_fight_test_notify;
class ef_syn_center_info_notify;
class ef_test_request;
class fe_syn_transfer_info_notify;
class fe_test_reply;
class rs_arena_battle_notify;
class rs_arena_battle_ai_notify;
class sr_arena_battle_result_notify;
class gr_arena_match_request;
class rg_arena_match_reply;
class gr_arena_cancel_match_request;
class rg_arena_cancel_match_reply;
class rg_arena_battle_result_notify;
class gr_get_arena_rank_data_request;
class rg_get_arena_rank_data_reply;
class gr_arena_self_rank_request;
class rg_arena_self_rank_reply;
class ge_arena_fight_data_notify;
class ge_role_online_notify;
class ge_challenge_request;
class eg_challenge_reply;
class ge_challenge_process_request;
class eg_challenge_process_reply;
class eg_challenge_fight_request;
class ge_challenge_fight_reply;
class ge_pk_beat_criminal_notify;
class eg_challenge_transfer_notify;
class eg_king_war_state_notify;
class eg_king_war_time_end_notify;
class king_war_personal;
class ge_king_war_result_notify;
class ge_king_war_scene_user_num_notify;
class eg_check_user_buy_goods_request;
class ge_check_user_buy_goods_reply;
class eg_give_user_goods_notify;
class er_world_cup_data_request;
class re_world_cup_data_reply;
class re_world_cup_battle_notify;
class re_world_cup_mail_notify;
class re_world_cup_coming_quarter_notify;
class re_world_cup_coming_soon_notify;
class re_world_cup_ready_notify;
class gr_world_cup_play_request;
class rg_world_cup_play_reply;
class re_world_cup_update_notify;
class er_world_cup_bet_data_request;
class re_world_cup_bet_data_reply;
class gr_world_cup_bet_request;
class rg_world_cup_bet_reply;
class gr_world_cup_bet_reward_request;
class rg_world_cup_bet_reward_reply;
class er_world_cup_odds_request;
class re_world_cup_odds_reply;
class eg_red_point_notify;
class troop_shadow_base;
class troop_extra_info;
class troop_server_data;
class eg_troop_event_notify;
class ge_troop_create_request;
class ge_troop_auto_match_request;
class ge_troop_join_request;
class eg_troop_agree_apply_request;
class ge_troop_agree_apply_reply;
class ge_troop_process_invite_request;
class ge_troop_dissolve_notify;
class ge_troop_back_request;
class ge_troop_transmission_notify;
class ge_troop_escape_notify;
class eg_troop_invite_shadow_notify;
class ge_troop_del_shadow_notify;
class ge_troop_friend_notify;
class game_scene_reg_info;
class game_scene_reg_ret;
class ge_game_scene_reg_request;
class eg_game_scene_reg_reply;
class ge_role_scene_info_notify;
class ge_game_scene_unload_notify;
class dungeon_create_data;
class ge_open_dungeon_request;
class eg_create_dugeon_request;
class ge_create_dugeon_reply;
class eg_open_dungeon_reply;
class ge_scene_state_notify;
class ge_goods_buy_request;
class eg_goods_buy_reply;
class ge_goods_sell_request;
class eg_goods_sell_reply;
class ge_goods_return_request;
class eg_goods_return_reply;
class ge_goods_resell_request;
class eg_goods_resell_reply;
class ge_goods_profit_request;
class eg_goods_profit_reply;
class ge_expedition_fight_data_request;
class eg_expedition_fight_data_reply;
class ge_expedition_refresh_request;
class eg_expedition_refresh_reply;
class ge_expedition_refresh_stage_request;
class eg_expedition_refresh_stage_reply;
class ge_expedition_help_request;
class eg_expedition_help_reply;
class global_data_day_update_time;
class global_data_family_war;
class global_data_country_data;
class global_data_king_war_data;
class eg_offline_data_notify;
class ge_offline_data_notify;
class eg_notify_progress_state_notify;
class hg_notify_progress_state_notify;
class ge_tower_trigger_notify;
class eg_tower_trigger_notify;
class eg_two_side_friend_notify;
class ge_check_sys_notice_request;
class eg_check_sys_notice_reply;
class eg_syn_sys_notice_notify;
class ge_gm_clear_notice_request;
class eg_gm_clear_notice_notify;
class ge_role_simple_data_notify;
class eg_offline_arena_join_notify;
class ge_offline_arena_form_notify;
class eg_offline_arena_fight_request;
class ge_offline_arena_fight_reply;
class eg_offline_arena_record_award_notify;
class eg_offline_arena_score_award_notify;
class eg_offline_arena_sweep_award_notify;
class eg_offline_arena_class_award_notify;
class ge_offline_arena_buy_request;
class eg_offline_arena_buy_reply;
class ge_offline_arena_gmrank_notify;
class hr_get_hero_strategy_info_request;
class rh_get_hero_strategy_info_reply;
class ge_troop_sync_task_request;
class eg_buy_wish_summon_request;
class ge_buy_wish_summon_reply;
class eg_king_open_wish_summon_request;
class ge_king_open_wish_summon_reply;
class ge_modify_family_money_request;
class ge_modify_country_money_request;
class ge_get_wish_summon_info_reply;
class ge_destine_item_request;
class eg_destine_item_reply;
class ge_undestine_item_request;
class ge_push_general_event_request;
class eg_sync_general_event_count_info;
class eg_sync_general_event_data;
class eg_sync_general_event_open;
class eg_sync_general_event_done;
class eg_sync_server_level;
class me_transport_ntf;
class eg_gm_transport_ntf;
class ea_send_gm_msg_to_account_request;
class ae_send_gm_msg_to_account_reply;
class al_send_gm_msg_to_account_requst;
class la_send_gm_msg_to_account_reply;
class ln_send_gm_msg_to_account_request;
class nl_send_gm_msg_to_account_reply;
class me_manage_role_ntf;
class em_manage_role_ntf;
class eh_silence_role_notify;
class nl_syn_account_info_notify;
class nd_syn_account_info_notify;
class gd_change_name_request;
class dg_change_name_reply;
class de_change_name_notify;
class eh_change_name_notify;
class me_reload_config_notify;
class eg_reload_config_notify;
class ge_change_friendliness_request;
class eg_change_friendliness_notify;
class ge_get_friendliness_request;
class player_friendliness;
class eg_get_friendliness_reply;
class eg_friend_point_operation_request;
class ge_friend_point_operation_reply;
class sv_cross_area_video_notify;
class gv_tower_video_notify;

enum data_sync_type {
  data_sync_type_begin = 1,
  data_sync_type_country_id = 2,
  data_sync_type_country_officer = 3,
  data_sync_type_level = 4,
  data_sync_type_fighting_value = 5,
  data_sync_type_country_money = 6,
  data_sync_type_server_time = 8,
  data_sync_type_family_money = 9,
  data_sync_type_family_officer = 16,
  data_sync_type_family_contribution = 17,
  data_sync_type_field_boss = 18,
  data_sync_type_head_frame = 19,
  data_sync_type_main_plugin = 20,
  data_sync_type_charm = 21,
  data_sync_type_end = 10000
};
bool data_sync_type_IsValid(int value);
const data_sync_type data_sync_type_MIN = data_sync_type_begin;
const data_sync_type data_sync_type_MAX = data_sync_type_end;
const int data_sync_type_ARRAYSIZE = data_sync_type_MAX + 1;

const ::google::protobuf::EnumDescriptor* data_sync_type_descriptor();
inline const ::std::string& data_sync_type_Name(data_sync_type value) {
  return ::google::protobuf::internal::NameOfEnum(
    data_sync_type_descriptor(), value);
}
inline bool data_sync_type_Parse(
    const ::std::string& name, data_sync_type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<data_sync_type>(
    data_sync_type_descriptor(), name, value);
}
enum scene_change_type {
  scene_change_none = 0,
  login_server_scene = 1,
  relogin_server_scene = 2,
  user_change_scene = 3,
  user_enter_dungeon = 4,
  user_troop_jump = 5,
  forced_change_scene = 6,
  center_change_scene = 7
};
bool scene_change_type_IsValid(int value);
const scene_change_type scene_change_type_MIN = scene_change_none;
const scene_change_type scene_change_type_MAX = center_change_scene;
const int scene_change_type_ARRAYSIZE = scene_change_type_MAX + 1;

const ::google::protobuf::EnumDescriptor* scene_change_type_descriptor();
inline const ::std::string& scene_change_type_Name(scene_change_type value) {
  return ::google::protobuf::internal::NameOfEnum(
    scene_change_type_descriptor(), value);
}
inline bool scene_change_type_Parse(
    const ::std::string& name, scene_change_type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<scene_change_type>(
    scene_change_type_descriptor(), name, value);
}
enum family_money_change_type {
  family_money_change_none = 0,
  family_money_change_king_war_cost = 1,
  family_money_change_king_war_fail_back = 2,
  family_money_change_king_war_error_back = 3,
  family_money_change_gm_add = 4,
  family_money_change_maintain_cost = 5,
  family_money_update_build = 6,
  family_money_clear_build_cd = 7,
  family_money_change_task_add = 8,
  family_money_king_war_back = 9,
  family_money_family_war_win = 10,
  family_money_family_war_lose = 11
};
bool family_money_change_type_IsValid(int value);
const family_money_change_type family_money_change_type_MIN = family_money_change_none;
const family_money_change_type family_money_change_type_MAX = family_money_family_war_lose;
const int family_money_change_type_ARRAYSIZE = family_money_change_type_MAX + 1;

const ::google::protobuf::EnumDescriptor* family_money_change_type_descriptor();
inline const ::std::string& family_money_change_type_Name(family_money_change_type value) {
  return ::google::protobuf::internal::NameOfEnum(
    family_money_change_type_descriptor(), value);
}
inline bool family_money_change_type_Parse(
    const ::std::string& name, family_money_change_type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<family_money_change_type>(
    family_money_change_type_descriptor(), name, value);
}
enum country_money_change_type {
  country_money_change_none = 0,
  country_money_change_gm_add = 1,
  country_money_change_task_add = 2
};
bool country_money_change_type_IsValid(int value);
const country_money_change_type country_money_change_type_MIN = country_money_change_none;
const country_money_change_type country_money_change_type_MAX = country_money_change_task_add;
const int country_money_change_type_ARRAYSIZE = country_money_change_type_MAX + 1;

const ::google::protobuf::EnumDescriptor* country_money_change_type_descriptor();
inline const ::std::string& country_money_change_type_Name(country_money_change_type value) {
  return ::google::protobuf::internal::NameOfEnum(
    country_money_change_type_descriptor(), value);
}
inline bool country_money_change_type_Parse(
    const ::std::string& name, country_money_change_type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<country_money_change_type>(
    country_money_change_type_descriptor(), name, value);
}
enum EM_FIELD_MODE {
  FIELD_BOSS_NONE = 0,
  FIELD_BOSS_KILL = 1,
  FILED_BOSS_END = 2
};
bool EM_FIELD_MODE_IsValid(int value);
const EM_FIELD_MODE EM_FIELD_MODE_MIN = FIELD_BOSS_NONE;
const EM_FIELD_MODE EM_FIELD_MODE_MAX = FILED_BOSS_END;
const int EM_FIELD_MODE_ARRAYSIZE = EM_FIELD_MODE_MAX + 1;

const ::google::protobuf::EnumDescriptor* EM_FIELD_MODE_descriptor();
inline const ::std::string& EM_FIELD_MODE_Name(EM_FIELD_MODE value) {
  return ::google::protobuf::internal::NameOfEnum(
    EM_FIELD_MODE_descriptor(), value);
}
inline bool EM_FIELD_MODE_Parse(
    const ::std::string& name, EM_FIELD_MODE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EM_FIELD_MODE>(
    EM_FIELD_MODE_descriptor(), name, value);
}
enum em_map_type {
  map_type_none = 0,
  map_type_static = 1,
  map_type_dynamic = 2
};
bool em_map_type_IsValid(int value);
const em_map_type em_map_type_MIN = map_type_none;
const em_map_type em_map_type_MAX = map_type_dynamic;
const int em_map_type_ARRAYSIZE = em_map_type_MAX + 1;

const ::google::protobuf::EnumDescriptor* em_map_type_descriptor();
inline const ::std::string& em_map_type_Name(em_map_type value) {
  return ::google::protobuf::internal::NameOfEnum(
    em_map_type_descriptor(), value);
}
inline bool em_map_type_Parse(
    const ::std::string& name, em_map_type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<em_map_type>(
    em_map_type_descriptor(), name, value);
}
enum dungeon_create_type {
  dungeon_create_single = 1,
  dungeon_create_team = 2
};
bool dungeon_create_type_IsValid(int value);
const dungeon_create_type dungeon_create_type_MIN = dungeon_create_single;
const dungeon_create_type dungeon_create_type_MAX = dungeon_create_team;
const int dungeon_create_type_ARRAYSIZE = dungeon_create_type_MAX + 1;

const ::google::protobuf::EnumDescriptor* dungeon_create_type_descriptor();
inline const ::std::string& dungeon_create_type_Name(dungeon_create_type value) {
  return ::google::protobuf::internal::NameOfEnum(
    dungeon_create_type_descriptor(), value);
}
inline bool dungeon_create_type_Parse(
    const ::std::string& name, dungeon_create_type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<dungeon_create_type>(
    dungeon_create_type_descriptor(), name, value);
}
enum em_scene_type {
  em_scene_type_none = 0,
  em_scene_type_emperor = 1,
  em_scene_type_king = 2,
  em_scene_type_normal = 3,
  em_scene_type_prison = 4,
  em_scene_type_arena = 5,
  em_scene_type_dugeon = 8,
  em_scene_type_family_war = 9
};
bool em_scene_type_IsValid(int value);
const em_scene_type em_scene_type_MIN = em_scene_type_none;
const em_scene_type em_scene_type_MAX = em_scene_type_family_war;
const int em_scene_type_ARRAYSIZE = em_scene_type_MAX + 1;

const ::google::protobuf::EnumDescriptor* em_scene_type_descriptor();
inline const ::std::string& em_scene_type_Name(em_scene_type value) {
  return ::google::protobuf::internal::NameOfEnum(
    em_scene_type_descriptor(), value);
}
inline bool em_scene_type_Parse(
    const ::std::string& name, em_scene_type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<em_scene_type>(
    em_scene_type_descriptor(), name, value);
}
enum global_data_type {
  global_data_type_none = 0,
  global_data_type_one_day = 1,
  global_data_type_family_war = 2,
  global_data_type_country = 3,
  global_data_type_king_war = 4
};
bool global_data_type_IsValid(int value);
const global_data_type global_data_type_MIN = global_data_type_none;
const global_data_type global_data_type_MAX = global_data_type_king_war;
const int global_data_type_ARRAYSIZE = global_data_type_MAX + 1;

const ::google::protobuf::EnumDescriptor* global_data_type_descriptor();
inline const ::std::string& global_data_type_Name(global_data_type value) {
  return ::google::protobuf::internal::NameOfEnum(
    global_data_type_descriptor(), value);
}
inline bool global_data_type_Parse(
    const ::std::string& name, global_data_type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<global_data_type>(
    global_data_type_descriptor(), name, value);
}
enum friend_point_operation {
  player_get_point_from_friend = 1,
  player_get_relation_award = 2,
  player_give_present = 3
};
bool friend_point_operation_IsValid(int value);
const friend_point_operation friend_point_operation_MIN = player_get_point_from_friend;
const friend_point_operation friend_point_operation_MAX = player_give_present;
const int friend_point_operation_ARRAYSIZE = friend_point_operation_MAX + 1;

const ::google::protobuf::EnumDescriptor* friend_point_operation_descriptor();
inline const ::std::string& friend_point_operation_Name(friend_point_operation value) {
  return ::google::protobuf::internal::NameOfEnum(
    friend_point_operation_descriptor(), value);
}
inline bool friend_point_operation_Parse(
    const ::std::string& name, friend_point_operation* value) {
  return ::google::protobuf::internal::ParseNamedEnum<friend_point_operation>(
    friend_point_operation_descriptor(), name, value);
}
// ===================================================================

class data_sync_item : public ::google::protobuf::Message {
 public:
  data_sync_item();
  virtual ~data_sync_item();

  data_sync_item(const data_sync_item& from);

  inline data_sync_item& operator=(const data_sync_item& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const data_sync_item& default_instance();

  void Swap(data_sync_item* other);

  // implements Message ----------------------------------------------

  data_sync_item* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const data_sync_item& from);
  void MergeFrom(const data_sync_item& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .proto.server.data_sync_type type = 1 [default = data_sync_type_begin];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::proto::server::data_sync_type type() const;
  inline void set_type(::proto::server::data_sync_type value);

  // optional string value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline const ::std::string& value() const;
  inline void set_value(const ::std::string& value);
  inline void set_value(const char* value);
  inline void set_value(const char* value, size_t size);
  inline ::std::string* mutable_value();
  inline ::std::string* release_value();
  inline void set_allocated_value(::std::string* value);

  // @@protoc_insertion_point(class_scope:proto.server.data_sync_item)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* value_;
  int type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static data_sync_item* default_instance_;
};
// -------------------------------------------------------------------

class server_pingpong_request : public ::google::protobuf::Message {
 public:
  server_pingpong_request();
  virtual ~server_pingpong_request();

  server_pingpong_request(const server_pingpong_request& from);

  inline server_pingpong_request& operator=(const server_pingpong_request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const server_pingpong_request& default_instance();

  void Swap(server_pingpong_request* other);

  // implements Message ----------------------------------------------

  server_pingpong_request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const server_pingpong_request& from);
  void MergeFrom(const server_pingpong_request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:proto.server.server_pingpong_request)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static server_pingpong_request* default_instance_;
};
// -------------------------------------------------------------------

class la_login_request : public ::google::protobuf::Message {
 public:
  la_login_request();
  virtual ~la_login_request();

  la_login_request(const la_login_request& from);

  inline la_login_request& operator=(const la_login_request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const la_login_request& default_instance();

  void Swap(la_login_request* other);

  // implements Message ----------------------------------------------

  la_login_request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const la_login_request& from);
  void MergeFrom(const la_login_request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string guid = 1;
  inline bool has_guid() const;
  inline void clear_guid();
  static const int kGuidFieldNumber = 1;
  inline const ::std::string& guid() const;
  inline void set_guid(const ::std::string& value);
  inline void set_guid(const char* value);
  inline void set_guid(const char* value, size_t size);
  inline ::std::string* mutable_guid();
  inline ::std::string* release_guid();
  inline void set_allocated_guid(::std::string* guid);

  // @@protoc_insertion_point(class_scope:proto.server.la_login_request)
 private:
  inline void set_has_guid();
  inline void clear_has_guid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* guid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static la_login_request* default_instance_;
};
// -------------------------------------------------------------------

class al_login_reply : public ::google::protobuf::Message {
 public:
  al_login_reply();
  virtual ~al_login_reply();

  al_login_reply(const al_login_reply& from);

  inline al_login_reply& operator=(const al_login_reply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const al_login_reply& default_instance();

  void Swap(al_login_reply* other);

  // implements Message ----------------------------------------------

  al_login_reply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const al_login_reply& from);
  void MergeFrom(const al_login_reply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 reply_code = 1;
  inline bool has_reply_code() const;
  inline void clear_reply_code();
  static const int kReplyCodeFieldNumber = 1;
  inline ::google::protobuf::uint32 reply_code() const;
  inline void set_reply_code(::google::protobuf::uint32 value);

  // optional string guid = 2;
  inline bool has_guid() const;
  inline void clear_guid();
  static const int kGuidFieldNumber = 2;
  inline const ::std::string& guid() const;
  inline void set_guid(const ::std::string& value);
  inline void set_guid(const char* value);
  inline void set_guid(const char* value, size_t size);
  inline ::std::string* mutable_guid();
  inline ::std::string* release_guid();
  inline void set_allocated_guid(::std::string* guid);

  // optional string gate_ip = 3;
  inline bool has_gate_ip() const;
  inline void clear_gate_ip();
  static const int kGateIpFieldNumber = 3;
  inline const ::std::string& gate_ip() const;
  inline void set_gate_ip(const ::std::string& value);
  inline void set_gate_ip(const char* value);
  inline void set_gate_ip(const char* value, size_t size);
  inline ::std::string* mutable_gate_ip();
  inline ::std::string* release_gate_ip();
  inline void set_allocated_gate_ip(::std::string* gate_ip);

  // optional uint32 gate_port = 4;
  inline bool has_gate_port() const;
  inline void clear_gate_port();
  static const int kGatePortFieldNumber = 4;
  inline ::google::protobuf::uint32 gate_port() const;
  inline void set_gate_port(::google::protobuf::uint32 value);

  // optional string session_id = 5;
  inline bool has_session_id() const;
  inline void clear_session_id();
  static const int kSessionIdFieldNumber = 5;
  inline const ::std::string& session_id() const;
  inline void set_session_id(const ::std::string& value);
  inline void set_session_id(const char* value);
  inline void set_session_id(const char* value, size_t size);
  inline ::std::string* mutable_session_id();
  inline ::std::string* release_session_id();
  inline void set_allocated_session_id(::std::string* session_id);

  // @@protoc_insertion_point(class_scope:proto.server.al_login_reply)
 private:
  inline void set_has_reply_code();
  inline void clear_has_reply_code();
  inline void set_has_guid();
  inline void clear_has_guid();
  inline void set_has_gate_ip();
  inline void clear_has_gate_ip();
  inline void set_has_gate_port();
  inline void clear_has_gate_port();
  inline void set_has_session_id();
  inline void clear_has_session_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* guid_;
  ::google::protobuf::uint32 reply_code_;
  ::google::protobuf::uint32 gate_port_;
  ::std::string* gate_ip_;
  ::std::string* session_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static al_login_reply* default_instance_;
};
// -------------------------------------------------------------------

class gr_role_leave_game_notify : public ::google::protobuf::Message {
 public:
  gr_role_leave_game_notify();
  virtual ~gr_role_leave_game_notify();

  gr_role_leave_game_notify(const gr_role_leave_game_notify& from);

  inline gr_role_leave_game_notify& operator=(const gr_role_leave_game_notify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gr_role_leave_game_notify& default_instance();

  void Swap(gr_role_leave_game_notify* other);

  // implements Message ----------------------------------------------

  gr_role_leave_game_notify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gr_role_leave_game_notify& from);
  void MergeFrom(const gr_role_leave_game_notify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:proto.server.gr_role_leave_game_notify)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static gr_role_leave_game_notify* default_instance_;
};
// -------------------------------------------------------------------

class ag_role_enter_game_notify : public ::google::protobuf::Message {
 public:
  ag_role_enter_game_notify();
  virtual ~ag_role_enter_game_notify();

  ag_role_enter_game_notify(const ag_role_enter_game_notify& from);

  inline ag_role_enter_game_notify& operator=(const ag_role_enter_game_notify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ag_role_enter_game_notify& default_instance();

  void Swap(ag_role_enter_game_notify* other);

  // implements Message ----------------------------------------------

  ag_role_enter_game_notify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ag_role_enter_game_notify& from);
  void MergeFrom(const ag_role_enter_game_notify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:proto.server.ag_role_enter_game_notify)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static ag_role_enter_game_notify* default_instance_;
};
// -------------------------------------------------------------------

class ga_role_move_notify : public ::google::protobuf::Message {
 public:
  ga_role_move_notify();
  virtual ~ga_role_move_notify();

  ga_role_move_notify(const ga_role_move_notify& from);

  inline ga_role_move_notify& operator=(const ga_role_move_notify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ga_role_move_notify& default_instance();

  void Swap(ga_role_move_notify* other);

  // implements Message ----------------------------------------------

  ga_role_move_notify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ga_role_move_notify& from);
  void MergeFrom(const ga_role_move_notify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint64 role_list = 1;
  inline int role_list_size() const;
  inline void clear_role_list();
  static const int kRoleListFieldNumber = 1;
  inline ::google::protobuf::uint64 role_list(int index) const;
  inline void set_role_list(int index, ::google::protobuf::uint64 value);
  inline void add_role_list(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      role_list() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_role_list();

  // required .proto.client.gc_move_notify msg = 2;
  inline bool has_msg() const;
  inline void clear_msg();
  static const int kMsgFieldNumber = 2;
  inline const ::proto::client::gc_move_notify& msg() const;
  inline ::proto::client::gc_move_notify* mutable_msg();
  inline ::proto::client::gc_move_notify* release_msg();
  inline void set_allocated_msg(::proto::client::gc_move_notify* msg);

  // @@protoc_insertion_point(class_scope:proto.server.ga_role_move_notify)
 private:
  inline void set_has_msg();
  inline void clear_has_msg();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > role_list_;
  ::proto::client::gc_move_notify* msg_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static ga_role_move_notify* default_instance_;
};
// -------------------------------------------------------------------

class ga_role_into_vision_notify : public ::google::protobuf::Message {
 public:
  ga_role_into_vision_notify();
  virtual ~ga_role_into_vision_notify();

  ga_role_into_vision_notify(const ga_role_into_vision_notify& from);

  inline ga_role_into_vision_notify& operator=(const ga_role_into_vision_notify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ga_role_into_vision_notify& default_instance();

  void Swap(ga_role_into_vision_notify* other);

  // implements Message ----------------------------------------------

  ga_role_into_vision_notify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ga_role_into_vision_notify& from);
  void MergeFrom(const ga_role_into_vision_notify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint64 role_list = 1;
  inline int role_list_size() const;
  inline void clear_role_list();
  static const int kRoleListFieldNumber = 1;
  inline ::google::protobuf::uint64 role_list(int index) const;
  inline void set_role_list(int index, ::google::protobuf::uint64 value);
  inline void add_role_list(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      role_list() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_role_list();

  // required .proto.client.gc_role_into_vision_notify msg = 2;
  inline bool has_msg() const;
  inline void clear_msg();
  static const int kMsgFieldNumber = 2;
  inline const ::proto::client::gc_role_into_vision_notify& msg() const;
  inline ::proto::client::gc_role_into_vision_notify* mutable_msg();
  inline ::proto::client::gc_role_into_vision_notify* release_msg();
  inline void set_allocated_msg(::proto::client::gc_role_into_vision_notify* msg);

  // @@protoc_insertion_point(class_scope:proto.server.ga_role_into_vision_notify)
 private:
  inline void set_has_msg();
  inline void clear_has_msg();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > role_list_;
  ::proto::client::gc_role_into_vision_notify* msg_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static ga_role_into_vision_notify* default_instance_;
};
// -------------------------------------------------------------------

class ga_role_out_vision_notify : public ::google::protobuf::Message {
 public:
  ga_role_out_vision_notify();
  virtual ~ga_role_out_vision_notify();

  ga_role_out_vision_notify(const ga_role_out_vision_notify& from);

  inline ga_role_out_vision_notify& operator=(const ga_role_out_vision_notify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ga_role_out_vision_notify& default_instance();

  void Swap(ga_role_out_vision_notify* other);

  // implements Message ----------------------------------------------

  ga_role_out_vision_notify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ga_role_out_vision_notify& from);
  void MergeFrom(const ga_role_out_vision_notify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint64 role_list = 1;
  inline int role_list_size() const;
  inline void clear_role_list();
  static const int kRoleListFieldNumber = 1;
  inline ::google::protobuf::uint64 role_list(int index) const;
  inline void set_role_list(int index, ::google::protobuf::uint64 value);
  inline void add_role_list(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      role_list() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_role_list();

  // required .proto.client.gc_role_outo_vision_notify msg = 2;
  inline bool has_msg() const;
  inline void clear_msg();
  static const int kMsgFieldNumber = 2;
  inline const ::proto::client::gc_role_outo_vision_notify& msg() const;
  inline ::proto::client::gc_role_outo_vision_notify* mutable_msg();
  inline ::proto::client::gc_role_outo_vision_notify* release_msg();
  inline void set_allocated_msg(::proto::client::gc_role_outo_vision_notify* msg);

  // @@protoc_insertion_point(class_scope:proto.server.ga_role_out_vision_notify)
 private:
  inline void set_has_msg();
  inline void clear_has_msg();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > role_list_;
  ::proto::client::gc_role_outo_vision_notify* msg_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static ga_role_out_vision_notify* default_instance_;
};
// -------------------------------------------------------------------

class ga_broadcast_notify : public ::google::protobuf::Message {
 public:
  ga_broadcast_notify();
  virtual ~ga_broadcast_notify();

  ga_broadcast_notify(const ga_broadcast_notify& from);

  inline ga_broadcast_notify& operator=(const ga_broadcast_notify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ga_broadcast_notify& default_instance();

  void Swap(ga_broadcast_notify* other);

  // implements Message ----------------------------------------------

  ga_broadcast_notify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ga_broadcast_notify& from);
  void MergeFrom(const ga_broadcast_notify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint64 role_list = 1;
  inline int role_list_size() const;
  inline void clear_role_list();
  static const int kRoleListFieldNumber = 1;
  inline ::google::protobuf::uint64 role_list(int index) const;
  inline void set_role_list(int index, ::google::protobuf::uint64 value);
  inline void add_role_list(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      role_list() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_role_list();

  // optional uint32 cmd = 2;
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 2;
  inline ::google::protobuf::uint32 cmd() const;
  inline void set_cmd(::google::protobuf::uint32 value);

  // optional bytes data = 3;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 3;
  inline const ::std::string& data() const;
  inline void set_data(const ::std::string& value);
  inline void set_data(const char* value);
  inline void set_data(const void* value, size_t size);
  inline ::std::string* mutable_data();
  inline ::std::string* release_data();
  inline void set_allocated_data(::std::string* data);

  // @@protoc_insertion_point(class_scope:proto.server.ga_broadcast_notify)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_data();
  inline void clear_has_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > role_list_;
  ::std::string* data_;
  ::google::protobuf::uint32 cmd_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static ga_broadcast_notify* default_instance_;
};
// -------------------------------------------------------------------

class ea_broadcast_notify : public ::google::protobuf::Message {
 public:
  ea_broadcast_notify();
  virtual ~ea_broadcast_notify();

  ea_broadcast_notify(const ea_broadcast_notify& from);

  inline ea_broadcast_notify& operator=(const ea_broadcast_notify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ea_broadcast_notify& default_instance();

  void Swap(ea_broadcast_notify* other);

  // implements Message ----------------------------------------------

  ea_broadcast_notify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ea_broadcast_notify& from);
  void MergeFrom(const ea_broadcast_notify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint64 role_list = 1;
  inline int role_list_size() const;
  inline void clear_role_list();
  static const int kRoleListFieldNumber = 1;
  inline ::google::protobuf::uint64 role_list(int index) const;
  inline void set_role_list(int index, ::google::protobuf::uint64 value);
  inline void add_role_list(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      role_list() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_role_list();

  // optional uint32 cmd = 2;
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 2;
  inline ::google::protobuf::uint32 cmd() const;
  inline void set_cmd(::google::protobuf::uint32 value);

  // optional bytes data = 3;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 3;
  inline const ::std::string& data() const;
  inline void set_data(const ::std::string& value);
  inline void set_data(const char* value);
  inline void set_data(const void* value, size_t size);
  inline ::std::string* mutable_data();
  inline ::std::string* release_data();
  inline void set_allocated_data(::std::string* data);

  // @@protoc_insertion_point(class_scope:proto.server.ea_broadcast_notify)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_data();
  inline void clear_has_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > role_list_;
  ::std::string* data_;
  ::google::protobuf::uint32 cmd_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static ea_broadcast_notify* default_instance_;
};
// -------------------------------------------------------------------

class al_kick_role_notify : public ::google::protobuf::Message {
 public:
  al_kick_role_notify();
  virtual ~al_kick_role_notify();

  al_kick_role_notify(const al_kick_role_notify& from);

  inline al_kick_role_notify& operator=(const al_kick_role_notify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const al_kick_role_notify& default_instance();

  void Swap(al_kick_role_notify* other);

  // implements Message ----------------------------------------------

  al_kick_role_notify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const al_kick_role_notify& from);
  void MergeFrom(const al_kick_role_notify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:proto.server.al_kick_role_notify)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static al_kick_role_notify* default_instance_;
};
// -------------------------------------------------------------------

class al_kick_gate_all_user_notify : public ::google::protobuf::Message {
 public:
  al_kick_gate_all_user_notify();
  virtual ~al_kick_gate_all_user_notify();

  al_kick_gate_all_user_notify(const al_kick_gate_all_user_notify& from);

  inline al_kick_gate_all_user_notify& operator=(const al_kick_gate_all_user_notify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const al_kick_gate_all_user_notify& default_instance();

  void Swap(al_kick_gate_all_user_notify* other);

  // implements Message ----------------------------------------------

  al_kick_gate_all_user_notify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const al_kick_gate_all_user_notify& from);
  void MergeFrom(const al_kick_gate_all_user_notify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 gate_id = 1;
  inline bool has_gate_id() const;
  inline void clear_gate_id();
  static const int kGateIdFieldNumber = 1;
  inline ::google::protobuf::uint32 gate_id() const;
  inline void set_gate_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.server.al_kick_gate_all_user_notify)
 private:
  inline void set_has_gate_id();
  inline void clear_has_gate_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 gate_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static al_kick_gate_all_user_notify* default_instance_;
};
// -------------------------------------------------------------------

class gh_kick_role_notify : public ::google::protobuf::Message {
 public:
  gh_kick_role_notify();
  virtual ~gh_kick_role_notify();

  gh_kick_role_notify(const gh_kick_role_notify& from);

  inline gh_kick_role_notify& operator=(const gh_kick_role_notify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gh_kick_role_notify& default_instance();

  void Swap(gh_kick_role_notify* other);

  // implements Message ----------------------------------------------

  gh_kick_role_notify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gh_kick_role_notify& from);
  void MergeFrom(const gh_kick_role_notify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:proto.server.gh_kick_role_notify)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static gh_kick_role_notify* default_instance_;
};
// -------------------------------------------------------------------

class gd_batch_save_to_db_notify : public ::google::protobuf::Message {
 public:
  gd_batch_save_to_db_notify();
  virtual ~gd_batch_save_to_db_notify();

  gd_batch_save_to_db_notify(const gd_batch_save_to_db_notify& from);

  inline gd_batch_save_to_db_notify& operator=(const gd_batch_save_to_db_notify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gd_batch_save_to_db_notify& default_instance();

  void Swap(gd_batch_save_to_db_notify* other);

  // implements Message ----------------------------------------------

  gd_batch_save_to_db_notify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gd_batch_save_to_db_notify& from);
  void MergeFrom(const gd_batch_save_to_db_notify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto.server.save_to_db datas = 1;
  inline int datas_size() const;
  inline void clear_datas();
  static const int kDatasFieldNumber = 1;
  inline const ::proto::server::save_to_db& datas(int index) const;
  inline ::proto::server::save_to_db* mutable_datas(int index);
  inline ::proto::server::save_to_db* add_datas();
  inline const ::google::protobuf::RepeatedPtrField< ::proto::server::save_to_db >&
      datas() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto::server::save_to_db >*
      mutable_datas();

  // optional uint32 type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.server.gd_batch_save_to_db_notify)
 private:
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto::server::save_to_db > datas_;
  ::google::protobuf::uint32 type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static gd_batch_save_to_db_notify* default_instance_;
};
// -------------------------------------------------------------------

class save_to_db : public ::google::protobuf::Message {
 public:
  save_to_db();
  virtual ~save_to_db();

  save_to_db(const save_to_db& from);

  inline save_to_db& operator=(const save_to_db& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const save_to_db& default_instance();

  void Swap(save_to_db* other);

  // implements Message ----------------------------------------------

  save_to_db* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const save_to_db& from);
  void MergeFrom(const save_to_db& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string key = 1;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 1;
  inline const ::std::string& key() const;
  inline void set_key(const ::std::string& value);
  inline void set_key(const char* value);
  inline void set_key(const char* value, size_t size);
  inline ::std::string* mutable_key();
  inline ::std::string* release_key();
  inline void set_allocated_key(::std::string* key);

  // required bytes data = 2;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 2;
  inline const ::std::string& data() const;
  inline void set_data(const ::std::string& value);
  inline void set_data(const char* value);
  inline void set_data(const void* value, size_t size);
  inline ::std::string* mutable_data();
  inline ::std::string* release_data();
  inline void set_allocated_data(::std::string* data);

  // optional bool new_flag = 3;
  inline bool has_new_flag() const;
  inline void clear_new_flag();
  static const int kNewFlagFieldNumber = 3;
  inline bool new_flag() const;
  inline void set_new_flag(bool value);

  // optional uint64 uid = 4;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 4;
  inline ::google::protobuf::uint64 uid() const;
  inline void set_uid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:proto.server.save_to_db)
 private:
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_data();
  inline void clear_has_data();
  inline void set_has_new_flag();
  inline void clear_has_new_flag();
  inline void set_has_uid();
  inline void clear_has_uid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* key_;
  ::std::string* data_;
  ::google::protobuf::uint64 uid_;
  bool new_flag_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static save_to_db* default_instance_;
};
// -------------------------------------------------------------------

class gd_role_data_request : public ::google::protobuf::Message {
 public:
  gd_role_data_request();
  virtual ~gd_role_data_request();

  gd_role_data_request(const gd_role_data_request& from);

  inline gd_role_data_request& operator=(const gd_role_data_request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gd_role_data_request& default_instance();

  void Swap(gd_role_data_request* other);

  // implements Message ----------------------------------------------

  gd_role_data_request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gd_role_data_request& from);
  void MergeFrom(const gd_role_data_request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 time = 1;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 1;
  inline ::google::protobuf::uint64 time() const;
  inline void set_time(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:proto.server.gd_role_data_request)
 private:
  inline void set_has_time();
  inline void clear_has_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static gd_role_data_request* default_instance_;
};
// -------------------------------------------------------------------

class dg_role_data_reply : public ::google::protobuf::Message {
 public:
  dg_role_data_reply();
  virtual ~dg_role_data_reply();

  dg_role_data_reply(const dg_role_data_reply& from);

  inline dg_role_data_reply& operator=(const dg_role_data_reply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const dg_role_data_reply& default_instance();

  void Swap(dg_role_data_reply* other);

  // implements Message ----------------------------------------------

  dg_role_data_reply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const dg_role_data_reply& from);
  void MergeFrom(const dg_role_data_reply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 reply_code = 1;
  inline bool has_reply_code() const;
  inline void clear_reply_code();
  static const int kReplyCodeFieldNumber = 1;
  inline ::google::protobuf::uint32 reply_code() const;
  inline void set_reply_code(::google::protobuf::uint32 value);

  // optional .proto.common.role_data role = 2;
  inline bool has_role() const;
  inline void clear_role();
  static const int kRoleFieldNumber = 2;
  inline const ::proto::common::role_data& role() const;
  inline ::proto::common::role_data* mutable_role();
  inline ::proto::common::role_data* release_role();
  inline void set_allocated_role(::proto::common::role_data* role);

  // optional .proto.common.item_data item = 3;
  inline bool has_item() const;
  inline void clear_item();
  static const int kItemFieldNumber = 3;
  inline const ::proto::common::item_data& item() const;
  inline ::proto::common::item_data* mutable_item();
  inline ::proto::common::item_data* release_item();
  inline void set_allocated_item(::proto::common::item_data* item);

  // optional .proto.common.hero_data hero = 4;
  inline bool has_hero() const;
  inline void clear_hero();
  static const int kHeroFieldNumber = 4;
  inline const ::proto::common::hero_data& hero() const;
  inline ::proto::common::hero_data* mutable_hero();
  inline ::proto::common::hero_data* release_hero();
  inline void set_allocated_hero(::proto::common::hero_data* hero);

  // optional .proto.common.formation_data formation = 5;
  inline bool has_formation() const;
  inline void clear_formation();
  static const int kFormationFieldNumber = 5;
  inline const ::proto::common::formation_data& formation() const;
  inline ::proto::common::formation_data* mutable_formation();
  inline ::proto::common::formation_data* release_formation();
  inline void set_allocated_formation(::proto::common::formation_data* formation);

  // optional .proto.common.task_data task = 7;
  inline bool has_task() const;
  inline void clear_task();
  static const int kTaskFieldNumber = 7;
  inline const ::proto::common::task_data& task() const;
  inline ::proto::common::task_data* mutable_task();
  inline ::proto::common::task_data* release_task();
  inline void set_allocated_task(::proto::common::task_data* task);

  // optional .proto.common.role_trade_item trade_item = 8;
  inline bool has_trade_item() const;
  inline void clear_trade_item();
  static const int kTradeItemFieldNumber = 8;
  inline const ::proto::common::role_trade_item& trade_item() const;
  inline ::proto::common::role_trade_item* mutable_trade_item();
  inline ::proto::common::role_trade_item* release_trade_item();
  inline void set_allocated_trade_item(::proto::common::role_trade_item* trade_item);

  // optional .proto.common.mount_data mount_data = 9;
  inline bool has_mount_data() const;
  inline void clear_mount_data();
  static const int kMountDataFieldNumber = 9;
  inline const ::proto::common::mount_data& mount_data() const;
  inline ::proto::common::mount_data* mutable_mount_data();
  inline ::proto::common::mount_data* release_mount_data();
  inline void set_allocated_mount_data(::proto::common::mount_data* mount_data);

  // optional .proto.common.country_bounty_data country_bounty = 10;
  inline bool has_country_bounty() const;
  inline void clear_country_bounty();
  static const int kCountryBountyFieldNumber = 10;
  inline const ::proto::common::country_bounty_data& country_bounty() const;
  inline ::proto::common::country_bounty_data* mutable_country_bounty();
  inline ::proto::common::country_bounty_data* release_country_bounty();
  inline void set_allocated_country_bounty(::proto::common::country_bounty_data* country_bounty);

  // optional .proto.common.activities_data activities_data = 11;
  inline bool has_activities_data() const;
  inline void clear_activities_data();
  static const int kActivitiesDataFieldNumber = 11;
  inline const ::proto::common::activities_data& activities_data() const;
  inline ::proto::common::activities_data* mutable_activities_data();
  inline ::proto::common::activities_data* release_activities_data();
  inline void set_allocated_activities_data(::proto::common::activities_data* activities_data);

  // optional .proto.common.arena_role_data arena_role_data = 12;
  inline bool has_arena_role_data() const;
  inline void clear_arena_role_data();
  static const int kArenaRoleDataFieldNumber = 12;
  inline const ::proto::common::arena_role_data& arena_role_data() const;
  inline ::proto::common::arena_role_data* mutable_arena_role_data();
  inline ::proto::common::arena_role_data* release_arena_role_data();
  inline void set_allocated_arena_role_data(::proto::common::arena_role_data* arena_role_data);

  // optional .proto.common.achieve_data achieve = 13;
  inline bool has_achieve() const;
  inline void clear_achieve();
  static const int kAchieveFieldNumber = 13;
  inline const ::proto::common::achieve_data& achieve() const;
  inline ::proto::common::achieve_data* mutable_achieve();
  inline ::proto::common::achieve_data* release_achieve();
  inline void set_allocated_achieve(::proto::common::achieve_data* achieve);

  // optional .proto.common.tower_data tower = 14;
  inline bool has_tower() const;
  inline void clear_tower();
  static const int kTowerFieldNumber = 14;
  inline const ::proto::common::tower_data& tower() const;
  inline ::proto::common::tower_data* mutable_tower();
  inline ::proto::common::tower_data* release_tower();
  inline void set_allocated_tower(::proto::common::tower_data* tower);

  // optional .proto.common.luckydraw_data luckydraw = 15;
  inline bool has_luckydraw() const;
  inline void clear_luckydraw();
  static const int kLuckydrawFieldNumber = 15;
  inline const ::proto::common::luckydraw_data& luckydraw() const;
  inline ::proto::common::luckydraw_data* mutable_luckydraw();
  inline ::proto::common::luckydraw_data* release_luckydraw();
  inline void set_allocated_luckydraw(::proto::common::luckydraw_data* luckydraw);

  // optional .proto.common.role_all_dungeon_data dungeon_data = 16;
  inline bool has_dungeon_data() const;
  inline void clear_dungeon_data();
  static const int kDungeonDataFieldNumber = 16;
  inline const ::proto::common::role_all_dungeon_data& dungeon_data() const;
  inline ::proto::common::role_all_dungeon_data* mutable_dungeon_data();
  inline ::proto::common::role_all_dungeon_data* release_dungeon_data();
  inline void set_allocated_dungeon_data(::proto::common::role_all_dungeon_data* dungeon_data);

  // optional .proto.common.expedition_data expedition_data = 17;
  inline bool has_expedition_data() const;
  inline void clear_expedition_data();
  static const int kExpeditionDataFieldNumber = 17;
  inline const ::proto::common::expedition_data& expedition_data() const;
  inline ::proto::common::expedition_data* mutable_expedition_data();
  inline ::proto::common::expedition_data* release_expedition_data();
  inline void set_allocated_expedition_data(::proto::common::expedition_data* expedition_data);

  // optional .proto.common.active_reward_data active_reward_data = 18;
  inline bool has_active_reward_data() const;
  inline void clear_active_reward_data();
  static const int kActiveRewardDataFieldNumber = 18;
  inline const ::proto::common::active_reward_data& active_reward_data() const;
  inline ::proto::common::active_reward_data* mutable_active_reward_data();
  inline ::proto::common::active_reward_data* release_active_reward_data();
  inline void set_allocated_active_reward_data(::proto::common::active_reward_data* active_reward_data);

  // optional .proto.common.role_random_shop_data random_shop_data = 19;
  inline bool has_random_shop_data() const;
  inline void clear_random_shop_data();
  static const int kRandomShopDataFieldNumber = 19;
  inline const ::proto::common::role_random_shop_data& random_shop_data() const;
  inline ::proto::common::role_random_shop_data* mutable_random_shop_data();
  inline ::proto::common::role_random_shop_data* release_random_shop_data();
  inline void set_allocated_random_shop_data(::proto::common::role_random_shop_data* random_shop_data);

  // optional .proto.common.level_reward_recived_list level_rwd_data = 20;
  inline bool has_level_rwd_data() const;
  inline void clear_level_rwd_data();
  static const int kLevelRwdDataFieldNumber = 20;
  inline const ::proto::common::level_reward_recived_list& level_rwd_data() const;
  inline ::proto::common::level_reward_recived_list* mutable_level_rwd_data();
  inline ::proto::common::level_reward_recived_list* release_level_rwd_data();
  inline void set_allocated_level_rwd_data(::proto::common::level_reward_recived_list* level_rwd_data);

  // optional .proto.common.level_reward_mail_recived_list level_rwd_mail_data = 21;
  inline bool has_level_rwd_mail_data() const;
  inline void clear_level_rwd_mail_data();
  static const int kLevelRwdMailDataFieldNumber = 21;
  inline const ::proto::common::level_reward_mail_recived_list& level_rwd_mail_data() const;
  inline ::proto::common::level_reward_mail_recived_list* mutable_level_rwd_mail_data();
  inline ::proto::common::level_reward_mail_recived_list* release_level_rwd_mail_data();
  inline void set_allocated_level_rwd_mail_data(::proto::common::level_reward_mail_recived_list* level_rwd_mail_data);

  // optional .proto.common.bussiness_act_data bussiness_act_data = 22;
  inline bool has_bussiness_act_data() const;
  inline void clear_bussiness_act_data();
  static const int kBussinessActDataFieldNumber = 22;
  inline const ::proto::common::bussiness_act_data& bussiness_act_data() const;
  inline ::proto::common::bussiness_act_data* mutable_bussiness_act_data();
  inline ::proto::common::bussiness_act_data* release_bussiness_act_data();
  inline void set_allocated_bussiness_act_data(::proto::common::bussiness_act_data* bussiness_act_data);

  // optional .proto.common.liandan_data liandan_data = 23;
  inline bool has_liandan_data() const;
  inline void clear_liandan_data();
  static const int kLiandanDataFieldNumber = 23;
  inline const ::proto::common::liandan_data& liandan_data() const;
  inline ::proto::common::liandan_data* mutable_liandan_data();
  inline ::proto::common::liandan_data* release_liandan_data();
  inline void set_allocated_liandan_data(::proto::common::liandan_data* liandan_data);

  // optional .proto.common.equip_plan_data equip_plan_data = 24;
  inline bool has_equip_plan_data() const;
  inline void clear_equip_plan_data();
  static const int kEquipPlanDataFieldNumber = 24;
  inline const ::proto::common::equip_plan_data& equip_plan_data() const;
  inline ::proto::common::equip_plan_data* mutable_equip_plan_data();
  inline ::proto::common::equip_plan_data* release_equip_plan_data();
  inline void set_allocated_equip_plan_data(::proto::common::equip_plan_data* equip_plan_data);

  // optional .proto.common.patrol_hire_data patrol_data = 25;
  inline bool has_patrol_data() const;
  inline void clear_patrol_data();
  static const int kPatrolDataFieldNumber = 25;
  inline const ::proto::common::patrol_hire_data& patrol_data() const;
  inline ::proto::common::patrol_hire_data* mutable_patrol_data();
  inline ::proto::common::patrol_hire_data* release_patrol_data();
  inline void set_allocated_patrol_data(::proto::common::patrol_hire_data* patrol_data);

  // optional .proto.common.role_all_dungeon_times_data dungeon_times_data = 26;
  inline bool has_dungeon_times_data() const;
  inline void clear_dungeon_times_data();
  static const int kDungeonTimesDataFieldNumber = 26;
  inline const ::proto::common::role_all_dungeon_times_data& dungeon_times_data() const;
  inline ::proto::common::role_all_dungeon_times_data* mutable_dungeon_times_data();
  inline ::proto::common::role_all_dungeon_times_data* release_dungeon_times_data();
  inline void set_allocated_dungeon_times_data(::proto::common::role_all_dungeon_times_data* dungeon_times_data);

  // optional .proto.common.family_skill_data family_skill_data = 27;
  inline bool has_family_skill_data() const;
  inline void clear_family_skill_data();
  static const int kFamilySkillDataFieldNumber = 27;
  inline const ::proto::common::family_skill_data& family_skill_data() const;
  inline ::proto::common::family_skill_data* mutable_family_skill_data();
  inline ::proto::common::family_skill_data* release_family_skill_data();
  inline void set_allocated_family_skill_data(::proto::common::family_skill_data* family_skill_data);

  // optional .proto.common.general_event_save_data general_event_data = 28;
  inline bool has_general_event_data() const;
  inline void clear_general_event_data();
  static const int kGeneralEventDataFieldNumber = 28;
  inline const ::proto::common::general_event_save_data& general_event_data() const;
  inline ::proto::common::general_event_save_data* mutable_general_event_data();
  inline ::proto::common::general_event_save_data* release_general_event_data();
  inline void set_allocated_general_event_data(::proto::common::general_event_save_data* general_event_data);

  // optional .proto.common.recharge_data recharge_data = 29;
  inline bool has_recharge_data() const;
  inline void clear_recharge_data();
  static const int kRechargeDataFieldNumber = 29;
  inline const ::proto::common::recharge_data& recharge_data() const;
  inline ::proto::common::recharge_data* mutable_recharge_data();
  inline ::proto::common::recharge_data* release_recharge_data();
  inline void set_allocated_recharge_data(::proto::common::recharge_data* recharge_data);

  // optional .proto.common.office_data office_data = 30;
  inline bool has_office_data() const;
  inline void clear_office_data();
  static const int kOfficeDataFieldNumber = 30;
  inline const ::proto::common::office_data& office_data() const;
  inline ::proto::common::office_data* mutable_office_data();
  inline ::proto::common::office_data* release_office_data();
  inline void set_allocated_office_data(::proto::common::office_data* office_data);

  // @@protoc_insertion_point(class_scope:proto.server.dg_role_data_reply)
 private:
  inline void set_has_reply_code();
  inline void clear_has_reply_code();
  inline void set_has_role();
  inline void clear_has_role();
  inline void set_has_item();
  inline void clear_has_item();
  inline void set_has_hero();
  inline void clear_has_hero();
  inline void set_has_formation();
  inline void clear_has_formation();
  inline void set_has_task();
  inline void clear_has_task();
  inline void set_has_trade_item();
  inline void clear_has_trade_item();
  inline void set_has_mount_data();
  inline void clear_has_mount_data();
  inline void set_has_country_bounty();
  inline void clear_has_country_bounty();
  inline void set_has_activities_data();
  inline void clear_has_activities_data();
  inline void set_has_arena_role_data();
  inline void clear_has_arena_role_data();
  inline void set_has_achieve();
  inline void clear_has_achieve();
  inline void set_has_tower();
  inline void clear_has_tower();
  inline void set_has_luckydraw();
  inline void clear_has_luckydraw();
  inline void set_has_dungeon_data();
  inline void clear_has_dungeon_data();
  inline void set_has_expedition_data();
  inline void clear_has_expedition_data();
  inline void set_has_active_reward_data();
  inline void clear_has_active_reward_data();
  inline void set_has_random_shop_data();
  inline void clear_has_random_shop_data();
  inline void set_has_level_rwd_data();
  inline void clear_has_level_rwd_data();
  inline void set_has_level_rwd_mail_data();
  inline void clear_has_level_rwd_mail_data();
  inline void set_has_bussiness_act_data();
  inline void clear_has_bussiness_act_data();
  inline void set_has_liandan_data();
  inline void clear_has_liandan_data();
  inline void set_has_equip_plan_data();
  inline void clear_has_equip_plan_data();
  inline void set_has_patrol_data();
  inline void clear_has_patrol_data();
  inline void set_has_dungeon_times_data();
  inline void clear_has_dungeon_times_data();
  inline void set_has_family_skill_data();
  inline void clear_has_family_skill_data();
  inline void set_has_general_event_data();
  inline void clear_has_general_event_data();
  inline void set_has_recharge_data();
  inline void clear_has_recharge_data();
  inline void set_has_office_data();
  inline void clear_has_office_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::proto::common::role_data* role_;
  ::proto::common::item_data* item_;
  ::proto::common::hero_data* hero_;
  ::proto::common::formation_data* formation_;
  ::proto::common::task_data* task_;
  ::proto::common::role_trade_item* trade_item_;
  ::proto::common::mount_data* mount_data_;
  ::proto::common::country_bounty_data* country_bounty_;
  ::proto::common::activities_data* activities_data_;
  ::proto::common::arena_role_data* arena_role_data_;
  ::proto::common::achieve_data* achieve_;
  ::proto::common::tower_data* tower_;
  ::proto::common::luckydraw_data* luckydraw_;
  ::proto::common::role_all_dungeon_data* dungeon_data_;
  ::proto::common::expedition_data* expedition_data_;
  ::proto::common::active_reward_data* active_reward_data_;
  ::proto::common::role_random_shop_data* random_shop_data_;
  ::proto::common::level_reward_recived_list* level_rwd_data_;
  ::proto::common::level_reward_mail_recived_list* level_rwd_mail_data_;
  ::proto::common::bussiness_act_data* bussiness_act_data_;
  ::proto::common::liandan_data* liandan_data_;
  ::proto::common::equip_plan_data* equip_plan_data_;
  ::proto::common::patrol_hire_data* patrol_data_;
  ::proto::common::role_all_dungeon_times_data* dungeon_times_data_;
  ::proto::common::family_skill_data* family_skill_data_;
  ::proto::common::general_event_save_data* general_event_data_;
  ::proto::common::recharge_data* recharge_data_;
  ::proto::common::office_data* office_data_;
  ::google::protobuf::uint32 reply_code_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(29 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static dg_role_data_reply* default_instance_;
};
// -------------------------------------------------------------------

class al_update_gate_user_num_notify : public ::google::protobuf::Message {
 public:
  al_update_gate_user_num_notify();
  virtual ~al_update_gate_user_num_notify();

  al_update_gate_user_num_notify(const al_update_gate_user_num_notify& from);

  inline al_update_gate_user_num_notify& operator=(const al_update_gate_user_num_notify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const al_update_gate_user_num_notify& default_instance();

  void Swap(al_update_gate_user_num_notify* other);

  // implements Message ----------------------------------------------

  al_update_gate_user_num_notify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const al_update_gate_user_num_notify& from);
  void MergeFrom(const al_update_gate_user_num_notify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 num = 1;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 1;
  inline ::google::protobuf::uint32 num() const;
  inline void set_num(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.server.al_update_gate_user_num_notify)
 private:
  inline void set_has_num();
  inline void clear_has_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 num_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static al_update_gate_user_num_notify* default_instance_;
};
// -------------------------------------------------------------------

class de_user_data_reply : public ::google::protobuf::Message {
 public:
  de_user_data_reply();
  virtual ~de_user_data_reply();

  de_user_data_reply(const de_user_data_reply& from);

  inline de_user_data_reply& operator=(const de_user_data_reply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const de_user_data_reply& default_instance();

  void Swap(de_user_data_reply* other);

  // implements Message ----------------------------------------------

  de_user_data_reply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const de_user_data_reply& from);
  void MergeFrom(const de_user_data_reply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required uint32 level = 2;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 2;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.server.de_user_data_reply)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_level();
  inline void clear_has_level();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::uint32 level_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static de_user_data_reply* default_instance_;
};
// -------------------------------------------------------------------

class de_user_center_data_reply : public ::google::protobuf::Message {
 public:
  de_user_center_data_reply();
  virtual ~de_user_center_data_reply();

  de_user_center_data_reply(const de_user_center_data_reply& from);

  inline de_user_center_data_reply& operator=(const de_user_center_data_reply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const de_user_center_data_reply& default_instance();

  void Swap(de_user_center_data_reply* other);

  // implements Message ----------------------------------------------

  de_user_center_data_reply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const de_user_center_data_reply& from);
  void MergeFrom(const de_user_center_data_reply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:proto.server.de_user_center_data_reply)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static de_user_center_data_reply* default_instance_;
};
// -------------------------------------------------------------------

class ed_sync_role_data_request : public ::google::protobuf::Message {
 public:
  ed_sync_role_data_request();
  virtual ~ed_sync_role_data_request();

  ed_sync_role_data_request(const ed_sync_role_data_request& from);

  inline ed_sync_role_data_request& operator=(const ed_sync_role_data_request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ed_sync_role_data_request& default_instance();

  void Swap(ed_sync_role_data_request* other);

  // implements Message ----------------------------------------------

  ed_sync_role_data_request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ed_sync_role_data_request& from);
  void MergeFrom(const ed_sync_role_data_request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:proto.server.ed_sync_role_data_request)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static ed_sync_role_data_request* default_instance_;
};
// -------------------------------------------------------------------

class ag_save_user_notify : public ::google::protobuf::Message {
 public:
  ag_save_user_notify();
  virtual ~ag_save_user_notify();

  ag_save_user_notify(const ag_save_user_notify& from);

  inline ag_save_user_notify& operator=(const ag_save_user_notify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ag_save_user_notify& default_instance();

  void Swap(ag_save_user_notify* other);

  // implements Message ----------------------------------------------

  ag_save_user_notify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ag_save_user_notify& from);
  void MergeFrom(const ag_save_user_notify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:proto.server.ag_save_user_notify)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static ag_save_user_notify* default_instance_;
};
// -------------------------------------------------------------------

class ln_syn_login_info_notify : public ::google::protobuf::Message {
 public:
  ln_syn_login_info_notify();
  virtual ~ln_syn_login_info_notify();

  ln_syn_login_info_notify(const ln_syn_login_info_notify& from);

  inline ln_syn_login_info_notify& operator=(const ln_syn_login_info_notify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ln_syn_login_info_notify& default_instance();

  void Swap(ln_syn_login_info_notify* other);

  // implements Message ----------------------------------------------

  ln_syn_login_info_notify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ln_syn_login_info_notify& from);
  void MergeFrom(const ln_syn_login_info_notify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 server_id = 1;
  inline bool has_server_id() const;
  inline void clear_server_id();
  static const int kServerIdFieldNumber = 1;
  inline ::google::protobuf::uint32 server_id() const;
  inline void set_server_id(::google::protobuf::uint32 value);

  // optional string login_ip = 2;
  inline bool has_login_ip() const;
  inline void clear_login_ip();
  static const int kLoginIpFieldNumber = 2;
  inline const ::std::string& login_ip() const;
  inline void set_login_ip(const ::std::string& value);
  inline void set_login_ip(const char* value);
  inline void set_login_ip(const char* value, size_t size);
  inline ::std::string* mutable_login_ip();
  inline ::std::string* release_login_ip();
  inline void set_allocated_login_ip(::std::string* login_ip);

  // optional uint32 login_port = 3;
  inline bool has_login_port() const;
  inline void clear_login_port();
  static const int kLoginPortFieldNumber = 3;
  inline ::google::protobuf::uint32 login_port() const;
  inline void set_login_port(::google::protobuf::uint32 value);

  // optional string server_name = 4;
  inline bool has_server_name() const;
  inline void clear_server_name();
  static const int kServerNameFieldNumber = 4;
  inline const ::std::string& server_name() const;
  inline void set_server_name(const ::std::string& value);
  inline void set_server_name(const char* value);
  inline void set_server_name(const char* value, size_t size);
  inline ::std::string* mutable_server_name();
  inline ::std::string* release_server_name();
  inline void set_allocated_server_name(::std::string* server_name);

  // optional uint32 can_create_new_role = 5;
  inline bool has_can_create_new_role() const;
  inline void clear_can_create_new_role();
  static const int kCanCreateNewRoleFieldNumber = 5;
  inline ::google::protobuf::uint32 can_create_new_role() const;
  inline void set_can_create_new_role(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.server.ln_syn_login_info_notify)
 private:
  inline void set_has_server_id();
  inline void clear_has_server_id();
  inline void set_has_login_ip();
  inline void clear_has_login_ip();
  inline void set_has_login_port();
  inline void clear_has_login_port();
  inline void set_has_server_name();
  inline void clear_has_server_name();
  inline void set_has_can_create_new_role();
  inline void clear_has_can_create_new_role();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* login_ip_;
  ::google::protobuf::uint32 server_id_;
  ::google::protobuf::uint32 login_port_;
  ::std::string* server_name_;
  ::google::protobuf::uint32 can_create_new_role_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static ln_syn_login_info_notify* default_instance_;
};
// -------------------------------------------------------------------

class ln_close_server_notify : public ::google::protobuf::Message {
 public:
  ln_close_server_notify();
  virtual ~ln_close_server_notify();

  ln_close_server_notify(const ln_close_server_notify& from);

  inline ln_close_server_notify& operator=(const ln_close_server_notify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ln_close_server_notify& default_instance();

  void Swap(ln_close_server_notify* other);

  // implements Message ----------------------------------------------

  ln_close_server_notify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ln_close_server_notify& from);
  void MergeFrom(const ln_close_server_notify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 server_id = 1;
  inline bool has_server_id() const;
  inline void clear_server_id();
  static const int kServerIdFieldNumber = 1;
  inline ::google::protobuf::uint32 server_id() const;
  inline void set_server_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.server.ln_close_server_notify)
 private:
  inline void set_has_server_id();
  inline void clear_has_server_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 server_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static ln_close_server_notify* default_instance_;
};
// -------------------------------------------------------------------

class ln_user_num_notify : public ::google::protobuf::Message {
 public:
  ln_user_num_notify();
  virtual ~ln_user_num_notify();

  ln_user_num_notify(const ln_user_num_notify& from);

  inline ln_user_num_notify& operator=(const ln_user_num_notify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ln_user_num_notify& default_instance();

  void Swap(ln_user_num_notify* other);

  // implements Message ----------------------------------------------

  ln_user_num_notify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ln_user_num_notify& from);
  void MergeFrom(const ln_user_num_notify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 server_id = 1;
  inline bool has_server_id() const;
  inline void clear_server_id();
  static const int kServerIdFieldNumber = 1;
  inline ::google::protobuf::uint32 server_id() const;
  inline void set_server_id(::google::protobuf::uint32 value);

  // optional uint32 user_num = 2;
  inline bool has_user_num() const;
  inline void clear_user_num();
  static const int kUserNumFieldNumber = 2;
  inline ::google::protobuf::uint32 user_num() const;
  inline void set_user_num(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.server.ln_user_num_notify)
 private:
  inline void set_has_server_id();
  inline void clear_has_server_id();
  inline void set_has_user_num();
  inline void clear_has_user_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 server_id_;
  ::google::protobuf::uint32 user_num_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static ln_user_num_notify* default_instance_;
};
// -------------------------------------------------------------------

class ag_syn_gate_info_notify : public ::google::protobuf::Message {
 public:
  ag_syn_gate_info_notify();
  virtual ~ag_syn_gate_info_notify();

  ag_syn_gate_info_notify(const ag_syn_gate_info_notify& from);

  inline ag_syn_gate_info_notify& operator=(const ag_syn_gate_info_notify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ag_syn_gate_info_notify& default_instance();

  void Swap(ag_syn_gate_info_notify* other);

  // implements Message ----------------------------------------------

  ag_syn_gate_info_notify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ag_syn_gate_info_notify& from);
  void MergeFrom(const ag_syn_gate_info_notify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 gate_id = 1;
  inline bool has_gate_id() const;
  inline void clear_gate_id();
  static const int kGateIdFieldNumber = 1;
  inline ::google::protobuf::uint32 gate_id() const;
  inline void set_gate_id(::google::protobuf::uint32 value);

  // optional uint32 server_id = 2;
  inline bool has_server_id() const;
  inline void clear_server_id();
  static const int kServerIdFieldNumber = 2;
  inline ::google::protobuf::uint32 server_id() const;
  inline void set_server_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.server.ag_syn_gate_info_notify)
 private:
  inline void set_has_gate_id();
  inline void clear_has_gate_id();
  inline void set_has_server_id();
  inline void clear_has_server_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 gate_id_;
  ::google::protobuf::uint32 server_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static ag_syn_gate_info_notify* default_instance_;
};
// -------------------------------------------------------------------

class gh_syn_online_role_notify : public ::google::protobuf::Message {
 public:
  gh_syn_online_role_notify();
  virtual ~gh_syn_online_role_notify();

  gh_syn_online_role_notify(const gh_syn_online_role_notify& from);

  inline gh_syn_online_role_notify& operator=(const gh_syn_online_role_notify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gh_syn_online_role_notify& default_instance();

  void Swap(gh_syn_online_role_notify* other);

  // implements Message ----------------------------------------------

  gh_syn_online_role_notify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gh_syn_online_role_notify& from);
  void MergeFrom(const gh_syn_online_role_notify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .proto.common.chat_syn_user_info chat_info = 1;
  inline bool has_chat_info() const;
  inline void clear_chat_info();
  static const int kChatInfoFieldNumber = 1;
  inline const ::proto::common::chat_syn_user_info& chat_info() const;
  inline ::proto::common::chat_syn_user_info* mutable_chat_info();
  inline ::proto::common::chat_syn_user_info* release_chat_info();
  inline void set_allocated_chat_info(::proto::common::chat_syn_user_info* chat_info);

  // @@protoc_insertion_point(class_scope:proto.server.gh_syn_online_role_notify)
 private:
  inline void set_has_chat_info();
  inline void clear_has_chat_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::proto::common::chat_syn_user_info* chat_info_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static gh_syn_online_role_notify* default_instance_;
};
// -------------------------------------------------------------------

class hg_test_notify : public ::google::protobuf::Message {
 public:
  hg_test_notify();
  virtual ~hg_test_notify();

  hg_test_notify(const hg_test_notify& from);

  inline hg_test_notify& operator=(const hg_test_notify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const hg_test_notify& default_instance();

  void Swap(hg_test_notify* other);

  // implements Message ----------------------------------------------

  hg_test_notify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const hg_test_notify& from);
  void MergeFrom(const hg_test_notify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:proto.server.hg_test_notify)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static hg_test_notify* default_instance_;
};
// -------------------------------------------------------------------

class ah_syn_gate_info_notify : public ::google::protobuf::Message {
 public:
  ah_syn_gate_info_notify();
  virtual ~ah_syn_gate_info_notify();

  ah_syn_gate_info_notify(const ah_syn_gate_info_notify& from);

  inline ah_syn_gate_info_notify& operator=(const ah_syn_gate_info_notify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ah_syn_gate_info_notify& default_instance();

  void Swap(ah_syn_gate_info_notify* other);

  // implements Message ----------------------------------------------

  ah_syn_gate_info_notify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ah_syn_gate_info_notify& from);
  void MergeFrom(const ah_syn_gate_info_notify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 gate_id = 1;
  inline bool has_gate_id() const;
  inline void clear_gate_id();
  static const int kGateIdFieldNumber = 1;
  inline ::google::protobuf::uint32 gate_id() const;
  inline void set_gate_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.server.ah_syn_gate_info_notify)
 private:
  inline void set_has_gate_id();
  inline void clear_has_gate_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 gate_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static ah_syn_gate_info_notify* default_instance_;
};
// -------------------------------------------------------------------

class ha_test_reply : public ::google::protobuf::Message {
 public:
  ha_test_reply();
  virtual ~ha_test_reply();

  ha_test_reply(const ha_test_reply& from);

  inline ha_test_reply& operator=(const ha_test_reply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ha_test_reply& default_instance();

  void Swap(ha_test_reply* other);

  // implements Message ----------------------------------------------

  ha_test_reply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ha_test_reply& from);
  void MergeFrom(const ha_test_reply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:proto.server.ha_test_reply)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static ha_test_reply* default_instance_;
};
// -------------------------------------------------------------------

class gh_syn_game_info_notify : public ::google::protobuf::Message {
 public:
  gh_syn_game_info_notify();
  virtual ~gh_syn_game_info_notify();

  gh_syn_game_info_notify(const gh_syn_game_info_notify& from);

  inline gh_syn_game_info_notify& operator=(const gh_syn_game_info_notify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gh_syn_game_info_notify& default_instance();

  void Swap(gh_syn_game_info_notify* other);

  // implements Message ----------------------------------------------

  gh_syn_game_info_notify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gh_syn_game_info_notify& from);
  void MergeFrom(const gh_syn_game_info_notify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 game_id = 1;
  inline bool has_game_id() const;
  inline void clear_game_id();
  static const int kGameIdFieldNumber = 1;
  inline ::google::protobuf::uint32 game_id() const;
  inline void set_game_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.server.gh_syn_game_info_notify)
 private:
  inline void set_has_game_id();
  inline void clear_has_game_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 game_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static gh_syn_game_info_notify* default_instance_;
};
// -------------------------------------------------------------------

class hg_chat_get_role_info_request : public ::google::protobuf::Message {
 public:
  hg_chat_get_role_info_request();
  virtual ~hg_chat_get_role_info_request();

  hg_chat_get_role_info_request(const hg_chat_get_role_info_request& from);

  inline hg_chat_get_role_info_request& operator=(const hg_chat_get_role_info_request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const hg_chat_get_role_info_request& default_instance();

  void Swap(hg_chat_get_role_info_request* other);

  // implements Message ----------------------------------------------

  hg_chat_get_role_info_request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const hg_chat_get_role_info_request& from);
  void MergeFrom(const hg_chat_get_role_info_request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto.common.chat_param param_list = 1;
  inline int param_list_size() const;
  inline void clear_param_list();
  static const int kParamListFieldNumber = 1;
  inline const ::proto::common::chat_param& param_list(int index) const;
  inline ::proto::common::chat_param* mutable_param_list(int index);
  inline ::proto::common::chat_param* add_param_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto::common::chat_param >&
      param_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto::common::chat_param >*
      mutable_param_list();

  // required .proto.common.chat_common_data chat_notify = 2;
  inline bool has_chat_notify() const;
  inline void clear_chat_notify();
  static const int kChatNotifyFieldNumber = 2;
  inline const ::proto::common::chat_common_data& chat_notify() const;
  inline ::proto::common::chat_common_data* mutable_chat_notify();
  inline ::proto::common::chat_common_data* release_chat_notify();
  inline void set_allocated_chat_notify(::proto::common::chat_common_data* chat_notify);

  // @@protoc_insertion_point(class_scope:proto.server.hg_chat_get_role_info_request)
 private:
  inline void set_has_chat_notify();
  inline void clear_has_chat_notify();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto::common::chat_param > param_list_;
  ::proto::common::chat_common_data* chat_notify_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static hg_chat_get_role_info_request* default_instance_;
};
// -------------------------------------------------------------------

class gh_chat_get_role_info_reply : public ::google::protobuf::Message {
 public:
  gh_chat_get_role_info_reply();
  virtual ~gh_chat_get_role_info_reply();

  gh_chat_get_role_info_reply(const gh_chat_get_role_info_reply& from);

  inline gh_chat_get_role_info_reply& operator=(const gh_chat_get_role_info_reply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gh_chat_get_role_info_reply& default_instance();

  void Swap(gh_chat_get_role_info_reply* other);

  // implements Message ----------------------------------------------

  gh_chat_get_role_info_reply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gh_chat_get_role_info_reply& from);
  void MergeFrom(const gh_chat_get_role_info_reply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 reply_code = 1;
  inline bool has_reply_code() const;
  inline void clear_reply_code();
  static const int kReplyCodeFieldNumber = 1;
  inline ::google::protobuf::uint32 reply_code() const;
  inline void set_reply_code(::google::protobuf::uint32 value);

  // optional .proto.common.chat_common_role_info chat_role_info = 2;
  inline bool has_chat_role_info() const;
  inline void clear_chat_role_info();
  static const int kChatRoleInfoFieldNumber = 2;
  inline const ::proto::common::chat_common_role_info& chat_role_info() const;
  inline ::proto::common::chat_common_role_info* mutable_chat_role_info();
  inline ::proto::common::chat_common_role_info* release_chat_role_info();
  inline void set_allocated_chat_role_info(::proto::common::chat_common_role_info* chat_role_info);

  // required .proto.common.chat_common_data chat_notify = 3;
  inline bool has_chat_notify() const;
  inline void clear_chat_notify();
  static const int kChatNotifyFieldNumber = 3;
  inline const ::proto::common::chat_common_data& chat_notify() const;
  inline ::proto::common::chat_common_data* mutable_chat_notify();
  inline ::proto::common::chat_common_data* release_chat_notify();
  inline void set_allocated_chat_notify(::proto::common::chat_common_data* chat_notify);

  // @@protoc_insertion_point(class_scope:proto.server.gh_chat_get_role_info_reply)
 private:
  inline void set_has_reply_code();
  inline void clear_has_reply_code();
  inline void set_has_chat_role_info();
  inline void clear_has_chat_role_info();
  inline void set_has_chat_notify();
  inline void clear_has_chat_notify();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::proto::common::chat_common_role_info* chat_role_info_;
  ::proto::common::chat_common_data* chat_notify_;
  ::google::protobuf::uint32 reply_code_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static gh_chat_get_role_info_reply* default_instance_;
};
// -------------------------------------------------------------------

class hg_get_nearby_roles_request : public ::google::protobuf::Message {
 public:
  hg_get_nearby_roles_request();
  virtual ~hg_get_nearby_roles_request();

  hg_get_nearby_roles_request(const hg_get_nearby_roles_request& from);

  inline hg_get_nearby_roles_request& operator=(const hg_get_nearby_roles_request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const hg_get_nearby_roles_request& default_instance();

  void Swap(hg_get_nearby_roles_request* other);

  // implements Message ----------------------------------------------

  hg_get_nearby_roles_request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const hg_get_nearby_roles_request& from);
  void MergeFrom(const hg_get_nearby_roles_request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .proto.common.chat_channel chat_channel = 1 [default = chat_channel_vicinity];
  inline bool has_chat_channel() const;
  inline void clear_chat_channel();
  static const int kChatChannelFieldNumber = 1;
  inline ::proto::common::chat_channel chat_channel() const;
  inline void set_chat_channel(::proto::common::chat_channel value);

  // optional string chat_info = 2;
  inline bool has_chat_info() const;
  inline void clear_chat_info();
  static const int kChatInfoFieldNumber = 2;
  inline const ::std::string& chat_info() const;
  inline void set_chat_info(const ::std::string& value);
  inline void set_chat_info(const char* value);
  inline void set_chat_info(const char* value, size_t size);
  inline ::std::string* mutable_chat_info();
  inline ::std::string* release_chat_info();
  inline void set_allocated_chat_info(::std::string* chat_info);

  // optional uint32 head_icon_id = 3;
  inline bool has_head_icon_id() const;
  inline void clear_head_icon_id();
  static const int kHeadIconIdFieldNumber = 3;
  inline ::google::protobuf::uint32 head_icon_id() const;
  inline void set_head_icon_id(::google::protobuf::uint32 value);

  // optional uint32 role_level = 4;
  inline bool has_role_level() const;
  inline void clear_role_level();
  static const int kRoleLevelFieldNumber = 4;
  inline ::google::protobuf::uint32 role_level() const;
  inline void set_role_level(::google::protobuf::uint32 value);

  // optional string param = 5;
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 5;
  inline const ::std::string& param() const;
  inline void set_param(const ::std::string& value);
  inline void set_param(const char* value);
  inline void set_param(const char* value, size_t size);
  inline ::std::string* mutable_param();
  inline ::std::string* release_param();
  inline void set_allocated_param(::std::string* param);

  // optional .proto.common.chat_common_role_info chat_role_info = 6;
  inline bool has_chat_role_info() const;
  inline void clear_chat_role_info();
  static const int kChatRoleInfoFieldNumber = 6;
  inline const ::proto::common::chat_common_role_info& chat_role_info() const;
  inline ::proto::common::chat_common_role_info* mutable_chat_role_info();
  inline ::proto::common::chat_common_role_info* release_chat_role_info();
  inline void set_allocated_chat_role_info(::proto::common::chat_common_role_info* chat_role_info);

  // @@protoc_insertion_point(class_scope:proto.server.hg_get_nearby_roles_request)
 private:
  inline void set_has_chat_channel();
  inline void clear_has_chat_channel();
  inline void set_has_chat_info();
  inline void clear_has_chat_info();
  inline void set_has_head_icon_id();
  inline void clear_has_head_icon_id();
  inline void set_has_role_level();
  inline void clear_has_role_level();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_chat_role_info();
  inline void clear_has_chat_role_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* chat_info_;
  int chat_channel_;
  ::google::protobuf::uint32 head_icon_id_;
  ::std::string* param_;
  ::proto::common::chat_common_role_info* chat_role_info_;
  ::google::protobuf::uint32 role_level_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static hg_get_nearby_roles_request* default_instance_;
};
// -------------------------------------------------------------------

class gh_get_nearby_roles_reply : public ::google::protobuf::Message {
 public:
  gh_get_nearby_roles_reply();
  virtual ~gh_get_nearby_roles_reply();

  gh_get_nearby_roles_reply(const gh_get_nearby_roles_reply& from);

  inline gh_get_nearby_roles_reply& operator=(const gh_get_nearby_roles_reply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gh_get_nearby_roles_reply& default_instance();

  void Swap(gh_get_nearby_roles_reply* other);

  // implements Message ----------------------------------------------

  gh_get_nearby_roles_reply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gh_get_nearby_roles_reply& from);
  void MergeFrom(const gh_get_nearby_roles_reply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 reply_code = 1;
  inline bool has_reply_code() const;
  inline void clear_reply_code();
  static const int kReplyCodeFieldNumber = 1;
  inline ::google::protobuf::uint32 reply_code() const;
  inline void set_reply_code(::google::protobuf::uint32 value);

  // optional .proto.common.chat_channel chat_channel = 2 [default = chat_channel_vicinity];
  inline bool has_chat_channel() const;
  inline void clear_chat_channel();
  static const int kChatChannelFieldNumber = 2;
  inline ::proto::common::chat_channel chat_channel() const;
  inline void set_chat_channel(::proto::common::chat_channel value);

  // optional string chat_info = 3;
  inline bool has_chat_info() const;
  inline void clear_chat_info();
  static const int kChatInfoFieldNumber = 3;
  inline const ::std::string& chat_info() const;
  inline void set_chat_info(const ::std::string& value);
  inline void set_chat_info(const char* value);
  inline void set_chat_info(const char* value, size_t size);
  inline ::std::string* mutable_chat_info();
  inline ::std::string* release_chat_info();
  inline void set_allocated_chat_info(::std::string* chat_info);

  // repeated uint64 role_uids = 4;
  inline int role_uids_size() const;
  inline void clear_role_uids();
  static const int kRoleUidsFieldNumber = 4;
  inline ::google::protobuf::uint64 role_uids(int index) const;
  inline void set_role_uids(int index, ::google::protobuf::uint64 value);
  inline void add_role_uids(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      role_uids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_role_uids();

  // optional uint32 head_icon_id = 5;
  inline bool has_head_icon_id() const;
  inline void clear_head_icon_id();
  static const int kHeadIconIdFieldNumber = 5;
  inline ::google::protobuf::uint32 head_icon_id() const;
  inline void set_head_icon_id(::google::protobuf::uint32 value);

  // optional uint32 role_level = 6;
  inline bool has_role_level() const;
  inline void clear_role_level();
  static const int kRoleLevelFieldNumber = 6;
  inline ::google::protobuf::uint32 role_level() const;
  inline void set_role_level(::google::protobuf::uint32 value);

  // optional string param = 7;
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 7;
  inline const ::std::string& param() const;
  inline void set_param(const ::std::string& value);
  inline void set_param(const char* value);
  inline void set_param(const char* value, size_t size);
  inline ::std::string* mutable_param();
  inline ::std::string* release_param();
  inline void set_allocated_param(::std::string* param);

  // optional .proto.common.chat_common_role_info chat_role_info = 8;
  inline bool has_chat_role_info() const;
  inline void clear_chat_role_info();
  static const int kChatRoleInfoFieldNumber = 8;
  inline const ::proto::common::chat_common_role_info& chat_role_info() const;
  inline ::proto::common::chat_common_role_info* mutable_chat_role_info();
  inline ::proto::common::chat_common_role_info* release_chat_role_info();
  inline void set_allocated_chat_role_info(::proto::common::chat_common_role_info* chat_role_info);

  // @@protoc_insertion_point(class_scope:proto.server.gh_get_nearby_roles_reply)
 private:
  inline void set_has_reply_code();
  inline void clear_has_reply_code();
  inline void set_has_chat_channel();
  inline void clear_has_chat_channel();
  inline void set_has_chat_info();
  inline void clear_has_chat_info();
  inline void set_has_head_icon_id();
  inline void clear_has_head_icon_id();
  inline void set_has_role_level();
  inline void clear_has_role_level();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_chat_role_info();
  inline void clear_has_chat_role_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 reply_code_;
  int chat_channel_;
  ::std::string* chat_info_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > role_uids_;
  ::google::protobuf::uint32 head_icon_id_;
  ::google::protobuf::uint32 role_level_;
  ::std::string* param_;
  ::proto::common::chat_common_role_info* chat_role_info_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static gh_get_nearby_roles_reply* default_instance_;
};
// -------------------------------------------------------------------

class hg_task_seek_help_request : public ::google::protobuf::Message {
 public:
  hg_task_seek_help_request();
  virtual ~hg_task_seek_help_request();

  hg_task_seek_help_request(const hg_task_seek_help_request& from);

  inline hg_task_seek_help_request& operator=(const hg_task_seek_help_request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const hg_task_seek_help_request& default_instance();

  void Swap(hg_task_seek_help_request* other);

  // implements Message ----------------------------------------------

  hg_task_seek_help_request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const hg_task_seek_help_request& from);
  void MergeFrom(const hg_task_seek_help_request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 task_id = 2;
  inline bool has_task_id() const;
  inline void clear_task_id();
  static const int kTaskIdFieldNumber = 2;
  inline ::google::protobuf::uint32 task_id() const;
  inline void set_task_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.server.hg_task_seek_help_request)
 private:
  inline void set_has_task_id();
  inline void clear_has_task_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 task_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static hg_task_seek_help_request* default_instance_;
};
// -------------------------------------------------------------------

class gh_task_seek_help_reply : public ::google::protobuf::Message {
 public:
  gh_task_seek_help_reply();
  virtual ~gh_task_seek_help_reply();

  gh_task_seek_help_reply(const gh_task_seek_help_reply& from);

  inline gh_task_seek_help_reply& operator=(const gh_task_seek_help_reply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gh_task_seek_help_reply& default_instance();

  void Swap(gh_task_seek_help_reply* other);

  // implements Message ----------------------------------------------

  gh_task_seek_help_reply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gh_task_seek_help_reply& from);
  void MergeFrom(const gh_task_seek_help_reply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 reply_code = 1;
  inline bool has_reply_code() const;
  inline void clear_reply_code();
  static const int kReplyCodeFieldNumber = 1;
  inline ::google::protobuf::uint32 reply_code() const;
  inline void set_reply_code(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.server.gh_task_seek_help_reply)
 private:
  inline void set_has_reply_code();
  inline void clear_has_reply_code();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 reply_code_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static gh_task_seek_help_reply* default_instance_;
};
// -------------------------------------------------------------------

class hf_syn_chat_info_notify : public ::google::protobuf::Message {
 public:
  hf_syn_chat_info_notify();
  virtual ~hf_syn_chat_info_notify();

  hf_syn_chat_info_notify(const hf_syn_chat_info_notify& from);

  inline hf_syn_chat_info_notify& operator=(const hf_syn_chat_info_notify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const hf_syn_chat_info_notify& default_instance();

  void Swap(hf_syn_chat_info_notify* other);

  // implements Message ----------------------------------------------

  hf_syn_chat_info_notify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const hf_syn_chat_info_notify& from);
  void MergeFrom(const hf_syn_chat_info_notify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 server_group_id = 1;
  inline bool has_server_group_id() const;
  inline void clear_server_group_id();
  static const int kServerGroupIdFieldNumber = 1;
  inline ::google::protobuf::uint32 server_group_id() const;
  inline void set_server_group_id(::google::protobuf::uint32 value);

  // optional string server_name = 2;
  inline bool has_server_name() const;
  inline void clear_server_name();
  static const int kServerNameFieldNumber = 2;
  inline const ::std::string& server_name() const;
  inline void set_server_name(const ::std::string& value);
  inline void set_server_name(const char* value);
  inline void set_server_name(const char* value, size_t size);
  inline ::std::string* mutable_server_name();
  inline ::std::string* release_server_name();
  inline void set_allocated_server_name(::std::string* server_name);

  // @@protoc_insertion_point(class_scope:proto.server.hf_syn_chat_info_notify)
 private:
  inline void set_has_server_group_id();
  inline void clear_has_server_group_id();
  inline void set_has_server_name();
  inline void clear_has_server_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* server_name_;
  ::google::protobuf::uint32 server_group_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static hf_syn_chat_info_notify* default_instance_;
};
// -------------------------------------------------------------------

class fh_syn_transfer_info_notify : public ::google::protobuf::Message {
 public:
  fh_syn_transfer_info_notify();
  virtual ~fh_syn_transfer_info_notify();

  fh_syn_transfer_info_notify(const fh_syn_transfer_info_notify& from);

  inline fh_syn_transfer_info_notify& operator=(const fh_syn_transfer_info_notify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const fh_syn_transfer_info_notify& default_instance();

  void Swap(fh_syn_transfer_info_notify* other);

  // implements Message ----------------------------------------------

  fh_syn_transfer_info_notify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const fh_syn_transfer_info_notify& from);
  void MergeFrom(const fh_syn_transfer_info_notify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 server_id = 1;
  inline bool has_server_id() const;
  inline void clear_server_id();
  static const int kServerIdFieldNumber = 1;
  inline ::google::protobuf::uint32 server_id() const;
  inline void set_server_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.server.fh_syn_transfer_info_notify)
 private:
  inline void set_has_server_id();
  inline void clear_has_server_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 server_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static fh_syn_transfer_info_notify* default_instance_;
};
// -------------------------------------------------------------------

class gh_gm_cmd_notify : public ::google::protobuf::Message {
 public:
  gh_gm_cmd_notify();
  virtual ~gh_gm_cmd_notify();

  gh_gm_cmd_notify(const gh_gm_cmd_notify& from);

  inline gh_gm_cmd_notify& operator=(const gh_gm_cmd_notify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gh_gm_cmd_notify& default_instance();

  void Swap(gh_gm_cmd_notify* other);

  // implements Message ----------------------------------------------

  gh_gm_cmd_notify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gh_gm_cmd_notify& from);
  void MergeFrom(const gh_gm_cmd_notify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string cmds = 1;
  inline int cmds_size() const;
  inline void clear_cmds();
  static const int kCmdsFieldNumber = 1;
  inline const ::std::string& cmds(int index) const;
  inline ::std::string* mutable_cmds(int index);
  inline void set_cmds(int index, const ::std::string& value);
  inline void set_cmds(int index, const char* value);
  inline void set_cmds(int index, const char* value, size_t size);
  inline ::std::string* add_cmds();
  inline void add_cmds(const ::std::string& value);
  inline void add_cmds(const char* value);
  inline void add_cmds(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& cmds() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_cmds();

  // @@protoc_insertion_point(class_scope:proto.server.gh_gm_cmd_notify)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::std::string> cmds_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static gh_gm_cmd_notify* default_instance_;
};
// -------------------------------------------------------------------

class hf_gm_cmd_notify : public ::google::protobuf::Message {
 public:
  hf_gm_cmd_notify();
  virtual ~hf_gm_cmd_notify();

  hf_gm_cmd_notify(const hf_gm_cmd_notify& from);

  inline hf_gm_cmd_notify& operator=(const hf_gm_cmd_notify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const hf_gm_cmd_notify& default_instance();

  void Swap(hf_gm_cmd_notify* other);

  // implements Message ----------------------------------------------

  hf_gm_cmd_notify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const hf_gm_cmd_notify& from);
  void MergeFrom(const hf_gm_cmd_notify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string cmds = 1;
  inline int cmds_size() const;
  inline void clear_cmds();
  static const int kCmdsFieldNumber = 1;
  inline const ::std::string& cmds(int index) const;
  inline ::std::string* mutable_cmds(int index);
  inline void set_cmds(int index, const ::std::string& value);
  inline void set_cmds(int index, const char* value);
  inline void set_cmds(int index, const char* value, size_t size);
  inline ::std::string* add_cmds();
  inline void add_cmds(const ::std::string& value);
  inline void add_cmds(const char* value);
  inline void add_cmds(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& cmds() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_cmds();

  // @@protoc_insertion_point(class_scope:proto.server.hf_gm_cmd_notify)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::std::string> cmds_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static hf_gm_cmd_notify* default_instance_;
};
// -------------------------------------------------------------------

class fh_test_reply : public ::google::protobuf::Message {
 public:
  fh_test_reply();
  virtual ~fh_test_reply();

  fh_test_reply(const fh_test_reply& from);

  inline fh_test_reply& operator=(const fh_test_reply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const fh_test_reply& default_instance();

  void Swap(fh_test_reply* other);

  // implements Message ----------------------------------------------

  fh_test_reply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const fh_test_reply& from);
  void MergeFrom(const fh_test_reply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 server_id = 1;
  inline bool has_server_id() const;
  inline void clear_server_id();
  static const int kServerIdFieldNumber = 1;
  inline ::google::protobuf::uint32 server_id() const;
  inline void set_server_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.server.fh_test_reply)
 private:
  inline void set_has_server_id();
  inline void clear_has_server_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 server_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static fh_test_reply* default_instance_;
};
// -------------------------------------------------------------------

class hg_syn_online_role_list_request : public ::google::protobuf::Message {
 public:
  hg_syn_online_role_list_request();
  virtual ~hg_syn_online_role_list_request();

  hg_syn_online_role_list_request(const hg_syn_online_role_list_request& from);

  inline hg_syn_online_role_list_request& operator=(const hg_syn_online_role_list_request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const hg_syn_online_role_list_request& default_instance();

  void Swap(hg_syn_online_role_list_request* other);

  // implements Message ----------------------------------------------

  hg_syn_online_role_list_request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const hg_syn_online_role_list_request& from);
  void MergeFrom(const hg_syn_online_role_list_request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:proto.server.hg_syn_online_role_list_request)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static hg_syn_online_role_list_request* default_instance_;
};
// -------------------------------------------------------------------

class gh_syn_online_role_list_notify : public ::google::protobuf::Message {
 public:
  gh_syn_online_role_list_notify();
  virtual ~gh_syn_online_role_list_notify();

  gh_syn_online_role_list_notify(const gh_syn_online_role_list_notify& from);

  inline gh_syn_online_role_list_notify& operator=(const gh_syn_online_role_list_notify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gh_syn_online_role_list_notify& default_instance();

  void Swap(gh_syn_online_role_list_notify* other);

  // implements Message ----------------------------------------------

  gh_syn_online_role_list_notify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gh_syn_online_role_list_notify& from);
  void MergeFrom(const gh_syn_online_role_list_notify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 server_id = 1;
  inline bool has_server_id() const;
  inline void clear_server_id();
  static const int kServerIdFieldNumber = 1;
  inline ::google::protobuf::uint32 server_id() const;
  inline void set_server_id(::google::protobuf::uint32 value);

  // repeated .proto.common.chat_syn_user_info user_list = 2;
  inline int user_list_size() const;
  inline void clear_user_list();
  static const int kUserListFieldNumber = 2;
  inline const ::proto::common::chat_syn_user_info& user_list(int index) const;
  inline ::proto::common::chat_syn_user_info* mutable_user_list(int index);
  inline ::proto::common::chat_syn_user_info* add_user_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto::common::chat_syn_user_info >&
      user_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto::common::chat_syn_user_info >*
      mutable_user_list();

  // @@protoc_insertion_point(class_scope:proto.server.gh_syn_online_role_list_notify)
 private:
  inline void set_has_server_id();
  inline void clear_has_server_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto::common::chat_syn_user_info > user_list_;
  ::google::protobuf::uint32 server_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static gh_syn_online_role_list_notify* default_instance_;
};
// -------------------------------------------------------------------

class eh_country_member_change_notify : public ::google::protobuf::Message {
 public:
  eh_country_member_change_notify();
  virtual ~eh_country_member_change_notify();

  eh_country_member_change_notify(const eh_country_member_change_notify& from);

  inline eh_country_member_change_notify& operator=(const eh_country_member_change_notify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const eh_country_member_change_notify& default_instance();

  void Swap(eh_country_member_change_notify* other);

  // implements Message ----------------------------------------------

  eh_country_member_change_notify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const eh_country_member_change_notify& from);
  void MergeFrom(const eh_country_member_change_notify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 country_id = 1;
  inline bool has_country_id() const;
  inline void clear_country_id();
  static const int kCountryIdFieldNumber = 1;
  inline ::google::protobuf::uint32 country_id() const;
  inline void set_country_id(::google::protobuf::uint32 value);

  // optional uint32 change_type = 2;
  inline bool has_change_type() const;
  inline void clear_change_type();
  static const int kChangeTypeFieldNumber = 2;
  inline ::google::protobuf::uint32 change_type() const;
  inline void set_change_type(::google::protobuf::uint32 value);

  // optional uint64 role_uid = 3;
  inline bool has_role_uid() const;
  inline void clear_role_uid();
  static const int kRoleUidFieldNumber = 3;
  inline ::google::protobuf::uint64 role_uid() const;
  inline void set_role_uid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:proto.server.eh_country_member_change_notify)
 private:
  inline void set_has_country_id();
  inline void clear_has_country_id();
  inline void set_has_change_type();
  inline void clear_has_change_type();
  inline void set_has_role_uid();
  inline void clear_has_role_uid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 country_id_;
  ::google::protobuf::uint32 change_type_;
  ::google::protobuf::uint64 role_uid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static eh_country_member_change_notify* default_instance_;
};
// -------------------------------------------------------------------

class eh_family_member_change_notify : public ::google::protobuf::Message {
 public:
  eh_family_member_change_notify();
  virtual ~eh_family_member_change_notify();

  eh_family_member_change_notify(const eh_family_member_change_notify& from);

  inline eh_family_member_change_notify& operator=(const eh_family_member_change_notify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const eh_family_member_change_notify& default_instance();

  void Swap(eh_family_member_change_notify* other);

  // implements Message ----------------------------------------------

  eh_family_member_change_notify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const eh_family_member_change_notify& from);
  void MergeFrom(const eh_family_member_change_notify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 family_id = 1;
  inline bool has_family_id() const;
  inline void clear_family_id();
  static const int kFamilyIdFieldNumber = 1;
  inline ::google::protobuf::uint64 family_id() const;
  inline void set_family_id(::google::protobuf::uint64 value);

  // optional uint32 change_type = 2;
  inline bool has_change_type() const;
  inline void clear_change_type();
  static const int kChangeTypeFieldNumber = 2;
  inline ::google::protobuf::uint32 change_type() const;
  inline void set_change_type(::google::protobuf::uint32 value);

  // optional uint64 role_uid = 3;
  inline bool has_role_uid() const;
  inline void clear_role_uid();
  static const int kRoleUidFieldNumber = 3;
  inline ::google::protobuf::uint64 role_uid() const;
  inline void set_role_uid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:proto.server.eh_family_member_change_notify)
 private:
  inline void set_has_family_id();
  inline void clear_has_family_id();
  inline void set_has_change_type();
  inline void clear_has_change_type();
  inline void set_has_role_uid();
  inline void clear_has_role_uid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 family_id_;
  ::google::protobuf::uint64 role_uid_;
  ::google::protobuf::uint32 change_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static eh_family_member_change_notify* default_instance_;
};
// -------------------------------------------------------------------

class hf_get_server_channel_list_request : public ::google::protobuf::Message {
 public:
  hf_get_server_channel_list_request();
  virtual ~hf_get_server_channel_list_request();

  hf_get_server_channel_list_request(const hf_get_server_channel_list_request& from);

  inline hf_get_server_channel_list_request& operator=(const hf_get_server_channel_list_request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const hf_get_server_channel_list_request& default_instance();

  void Swap(hf_get_server_channel_list_request* other);

  // implements Message ----------------------------------------------

  hf_get_server_channel_list_request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const hf_get_server_channel_list_request& from);
  void MergeFrom(const hf_get_server_channel_list_request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:proto.server.hf_get_server_channel_list_request)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static hf_get_server_channel_list_request* default_instance_;
};
// -------------------------------------------------------------------

class fh_get_server_channel_list_reply : public ::google::protobuf::Message {
 public:
  fh_get_server_channel_list_reply();
  virtual ~fh_get_server_channel_list_reply();

  fh_get_server_channel_list_reply(const fh_get_server_channel_list_reply& from);

  inline fh_get_server_channel_list_reply& operator=(const fh_get_server_channel_list_reply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const fh_get_server_channel_list_reply& default_instance();

  void Swap(fh_get_server_channel_list_reply* other);

  // implements Message ----------------------------------------------

  fh_get_server_channel_list_reply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const fh_get_server_channel_list_reply& from);
  void MergeFrom(const fh_get_server_channel_list_reply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 reply_code = 1;
  inline bool has_reply_code() const;
  inline void clear_reply_code();
  static const int kReplyCodeFieldNumber = 1;
  inline ::google::protobuf::uint32 reply_code() const;
  inline void set_reply_code(::google::protobuf::uint32 value);

  // optional .proto.common.server_channel_data server_channel_data = 2;
  inline bool has_server_channel_data() const;
  inline void clear_server_channel_data();
  static const int kServerChannelDataFieldNumber = 2;
  inline const ::proto::common::server_channel_data& server_channel_data() const;
  inline ::proto::common::server_channel_data* mutable_server_channel_data();
  inline ::proto::common::server_channel_data* release_server_channel_data();
  inline void set_allocated_server_channel_data(::proto::common::server_channel_data* server_channel_data);

  // @@protoc_insertion_point(class_scope:proto.server.fh_get_server_channel_list_reply)
 private:
  inline void set_has_reply_code();
  inline void clear_has_reply_code();
  inline void set_has_server_channel_data();
  inline void clear_has_server_channel_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::proto::common::server_channel_data* server_channel_data_;
  ::google::protobuf::uint32 reply_code_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static fh_get_server_channel_list_reply* default_instance_;
};
// -------------------------------------------------------------------

class hf_change_server_channel_request : public ::google::protobuf::Message {
 public:
  hf_change_server_channel_request();
  virtual ~hf_change_server_channel_request();

  hf_change_server_channel_request(const hf_change_server_channel_request& from);

  inline hf_change_server_channel_request& operator=(const hf_change_server_channel_request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const hf_change_server_channel_request& default_instance();

  void Swap(hf_change_server_channel_request* other);

  // implements Message ----------------------------------------------

  hf_change_server_channel_request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const hf_change_server_channel_request& from);
  void MergeFrom(const hf_change_server_channel_request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 dst_channel_id = 1;
  inline bool has_dst_channel_id() const;
  inline void clear_dst_channel_id();
  static const int kDstChannelIdFieldNumber = 1;
  inline ::google::protobuf::uint32 dst_channel_id() const;
  inline void set_dst_channel_id(::google::protobuf::uint32 value);

  // optional string user_name = 2;
  inline bool has_user_name() const;
  inline void clear_user_name();
  static const int kUserNameFieldNumber = 2;
  inline const ::std::string& user_name() const;
  inline void set_user_name(const ::std::string& value);
  inline void set_user_name(const char* value);
  inline void set_user_name(const char* value, size_t size);
  inline ::std::string* mutable_user_name();
  inline ::std::string* release_user_name();
  inline void set_allocated_user_name(::std::string* user_name);

  // optional uint32 type = 3;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 3;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.server.hf_change_server_channel_request)
 private:
  inline void set_has_dst_channel_id();
  inline void clear_has_dst_channel_id();
  inline void set_has_user_name();
  inline void clear_has_user_name();
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* user_name_;
  ::google::protobuf::uint32 dst_channel_id_;
  ::google::protobuf::uint32 type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static hf_change_server_channel_request* default_instance_;
};
// -------------------------------------------------------------------

class fh_change_server_channel_reply : public ::google::protobuf::Message {
 public:
  fh_change_server_channel_reply();
  virtual ~fh_change_server_channel_reply();

  fh_change_server_channel_reply(const fh_change_server_channel_reply& from);

  inline fh_change_server_channel_reply& operator=(const fh_change_server_channel_reply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const fh_change_server_channel_reply& default_instance();

  void Swap(fh_change_server_channel_reply* other);

  // implements Message ----------------------------------------------

  fh_change_server_channel_reply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const fh_change_server_channel_reply& from);
  void MergeFrom(const fh_change_server_channel_reply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 reply_code = 1;
  inline bool has_reply_code() const;
  inline void clear_reply_code();
  static const int kReplyCodeFieldNumber = 1;
  inline ::google::protobuf::uint32 reply_code() const;
  inline void set_reply_code(::google::protobuf::uint32 value);

  // optional uint32 channel_id = 2;
  inline bool has_channel_id() const;
  inline void clear_channel_id();
  static const int kChannelIdFieldNumber = 2;
  inline ::google::protobuf::uint32 channel_id() const;
  inline void set_channel_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.server.fh_change_server_channel_reply)
 private:
  inline void set_has_reply_code();
  inline void clear_has_reply_code();
  inline void set_has_channel_id();
  inline void clear_has_channel_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 reply_code_;
  ::google::protobuf::uint32 channel_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static fh_change_server_channel_reply* default_instance_;
};
// -------------------------------------------------------------------

class fh_change_server_channel_notify : public ::google::protobuf::Message {
 public:
  fh_change_server_channel_notify();
  virtual ~fh_change_server_channel_notify();

  fh_change_server_channel_notify(const fh_change_server_channel_notify& from);

  inline fh_change_server_channel_notify& operator=(const fh_change_server_channel_notify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const fh_change_server_channel_notify& default_instance();

  void Swap(fh_change_server_channel_notify* other);

  // implements Message ----------------------------------------------

  fh_change_server_channel_notify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const fh_change_server_channel_notify& from);
  void MergeFrom(const fh_change_server_channel_notify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .proto.common.fh_channel_role_list role_list = 1;
  inline bool has_role_list() const;
  inline void clear_role_list();
  static const int kRoleListFieldNumber = 1;
  inline const ::proto::common::fh_channel_role_list& role_list() const;
  inline ::proto::common::fh_channel_role_list* mutable_role_list();
  inline ::proto::common::fh_channel_role_list* release_role_list();
  inline void set_allocated_role_list(::proto::common::fh_channel_role_list* role_list);

  // required .proto.client.hc_change_server_channel_notify hc_msg = 2;
  inline bool has_hc_msg() const;
  inline void clear_hc_msg();
  static const int kHcMsgFieldNumber = 2;
  inline const ::proto::client::hc_change_server_channel_notify& hc_msg() const;
  inline ::proto::client::hc_change_server_channel_notify* mutable_hc_msg();
  inline ::proto::client::hc_change_server_channel_notify* release_hc_msg();
  inline void set_allocated_hc_msg(::proto::client::hc_change_server_channel_notify* hc_msg);

  // @@protoc_insertion_point(class_scope:proto.server.fh_change_server_channel_notify)
 private:
  inline void set_has_role_list();
  inline void clear_has_role_list();
  inline void set_has_hc_msg();
  inline void clear_has_hc_msg();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::proto::common::fh_channel_role_list* role_list_;
  ::proto::client::hc_change_server_channel_notify* hc_msg_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static fh_change_server_channel_notify* default_instance_;
};
// -------------------------------------------------------------------

class ha_change_server_channel_notify : public ::google::protobuf::Message {
 public:
  ha_change_server_channel_notify();
  virtual ~ha_change_server_channel_notify();

  ha_change_server_channel_notify(const ha_change_server_channel_notify& from);

  inline ha_change_server_channel_notify& operator=(const ha_change_server_channel_notify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ha_change_server_channel_notify& default_instance();

  void Swap(ha_change_server_channel_notify* other);

  // implements Message ----------------------------------------------

  ha_change_server_channel_notify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ha_change_server_channel_notify& from);
  void MergeFrom(const ha_change_server_channel_notify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .proto.server.fh_change_server_channel_notify fh_msg = 1;
  inline bool has_fh_msg() const;
  inline void clear_fh_msg();
  static const int kFhMsgFieldNumber = 1;
  inline const ::proto::server::fh_change_server_channel_notify& fh_msg() const;
  inline ::proto::server::fh_change_server_channel_notify* mutable_fh_msg();
  inline ::proto::server::fh_change_server_channel_notify* release_fh_msg();
  inline void set_allocated_fh_msg(::proto::server::fh_change_server_channel_notify* fh_msg);

  // @@protoc_insertion_point(class_scope:proto.server.ha_change_server_channel_notify)
 private:
  inline void set_has_fh_msg();
  inline void clear_has_fh_msg();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::proto::server::fh_change_server_channel_notify* fh_msg_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static ha_change_server_channel_notify* default_instance_;
};
// -------------------------------------------------------------------

class hf_server_channel_chat_request : public ::google::protobuf::Message {
 public:
  hf_server_channel_chat_request();
  virtual ~hf_server_channel_chat_request();

  hf_server_channel_chat_request(const hf_server_channel_chat_request& from);

  inline hf_server_channel_chat_request& operator=(const hf_server_channel_chat_request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const hf_server_channel_chat_request& default_instance();

  void Swap(hf_server_channel_chat_request* other);

  // implements Message ----------------------------------------------

  hf_server_channel_chat_request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const hf_server_channel_chat_request& from);
  void MergeFrom(const hf_server_channel_chat_request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string chat_info = 1;
  inline bool has_chat_info() const;
  inline void clear_chat_info();
  static const int kChatInfoFieldNumber = 1;
  inline const ::std::string& chat_info() const;
  inline void set_chat_info(const ::std::string& value);
  inline void set_chat_info(const char* value);
  inline void set_chat_info(const char* value, size_t size);
  inline ::std::string* mutable_chat_info();
  inline ::std::string* release_chat_info();
  inline void set_allocated_chat_info(::std::string* chat_info);

  // @@protoc_insertion_point(class_scope:proto.server.hf_server_channel_chat_request)
 private:
  inline void set_has_chat_info();
  inline void clear_has_chat_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* chat_info_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static hf_server_channel_chat_request* default_instance_;
};
// -------------------------------------------------------------------

class fh_server_channel_chat_reply : public ::google::protobuf::Message {
 public:
  fh_server_channel_chat_reply();
  virtual ~fh_server_channel_chat_reply();

  fh_server_channel_chat_reply(const fh_server_channel_chat_reply& from);

  inline fh_server_channel_chat_reply& operator=(const fh_server_channel_chat_reply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const fh_server_channel_chat_reply& default_instance();

  void Swap(fh_server_channel_chat_reply* other);

  // implements Message ----------------------------------------------

  fh_server_channel_chat_reply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const fh_server_channel_chat_reply& from);
  void MergeFrom(const fh_server_channel_chat_reply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 reply_code = 1;
  inline bool has_reply_code() const;
  inline void clear_reply_code();
  static const int kReplyCodeFieldNumber = 1;
  inline ::google::protobuf::uint32 reply_code() const;
  inline void set_reply_code(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.server.fh_server_channel_chat_reply)
 private:
  inline void set_has_reply_code();
  inline void clear_has_reply_code();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 reply_code_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static fh_server_channel_chat_reply* default_instance_;
};
// -------------------------------------------------------------------

class fh_server_channel_chat_notify : public ::google::protobuf::Message {
 public:
  fh_server_channel_chat_notify();
  virtual ~fh_server_channel_chat_notify();

  fh_server_channel_chat_notify(const fh_server_channel_chat_notify& from);

  inline fh_server_channel_chat_notify& operator=(const fh_server_channel_chat_notify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const fh_server_channel_chat_notify& default_instance();

  void Swap(fh_server_channel_chat_notify* other);

  // implements Message ----------------------------------------------

  fh_server_channel_chat_notify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const fh_server_channel_chat_notify& from);
  void MergeFrom(const fh_server_channel_chat_notify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .proto.common.fh_channel_role_list role_list = 1;
  inline bool has_role_list() const;
  inline void clear_role_list();
  static const int kRoleListFieldNumber = 1;
  inline const ::proto::common::fh_channel_role_list& role_list() const;
  inline ::proto::common::fh_channel_role_list* mutable_role_list();
  inline ::proto::common::fh_channel_role_list* release_role_list();
  inline void set_allocated_role_list(::proto::common::fh_channel_role_list* role_list);

  // required .proto.client.hc_server_channel_chat_notify hc_msg = 2;
  inline bool has_hc_msg() const;
  inline void clear_hc_msg();
  static const int kHcMsgFieldNumber = 2;
  inline const ::proto::client::hc_server_channel_chat_notify& hc_msg() const;
  inline ::proto::client::hc_server_channel_chat_notify* mutable_hc_msg();
  inline ::proto::client::hc_server_channel_chat_notify* release_hc_msg();
  inline void set_allocated_hc_msg(::proto::client::hc_server_channel_chat_notify* hc_msg);

  // @@protoc_insertion_point(class_scope:proto.server.fh_server_channel_chat_notify)
 private:
  inline void set_has_role_list();
  inline void clear_has_role_list();
  inline void set_has_hc_msg();
  inline void clear_has_hc_msg();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::proto::common::fh_channel_role_list* role_list_;
  ::proto::client::hc_server_channel_chat_notify* hc_msg_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static fh_server_channel_chat_notify* default_instance_;
};
// -------------------------------------------------------------------

class ha_server_channel_chat_notify : public ::google::protobuf::Message {
 public:
  ha_server_channel_chat_notify();
  virtual ~ha_server_channel_chat_notify();

  ha_server_channel_chat_notify(const ha_server_channel_chat_notify& from);

  inline ha_server_channel_chat_notify& operator=(const ha_server_channel_chat_notify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ha_server_channel_chat_notify& default_instance();

  void Swap(ha_server_channel_chat_notify* other);

  // implements Message ----------------------------------------------

  ha_server_channel_chat_notify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ha_server_channel_chat_notify& from);
  void MergeFrom(const ha_server_channel_chat_notify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .proto.server.fh_server_channel_chat_notify fh_msg = 1;
  inline bool has_fh_msg() const;
  inline void clear_fh_msg();
  static const int kFhMsgFieldNumber = 1;
  inline const ::proto::server::fh_server_channel_chat_notify& fh_msg() const;
  inline ::proto::server::fh_server_channel_chat_notify* mutable_fh_msg();
  inline ::proto::server::fh_server_channel_chat_notify* release_fh_msg();
  inline void set_allocated_fh_msg(::proto::server::fh_server_channel_chat_notify* fh_msg);

  // @@protoc_insertion_point(class_scope:proto.server.ha_server_channel_chat_notify)
 private:
  inline void set_has_fh_msg();
  inline void clear_has_fh_msg();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::proto::server::fh_server_channel_chat_notify* fh_msg_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static ha_server_channel_chat_notify* default_instance_;
};
// -------------------------------------------------------------------

class hf_personal_chat_request : public ::google::protobuf::Message {
 public:
  hf_personal_chat_request();
  virtual ~hf_personal_chat_request();

  hf_personal_chat_request(const hf_personal_chat_request& from);

  inline hf_personal_chat_request& operator=(const hf_personal_chat_request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const hf_personal_chat_request& default_instance();

  void Swap(hf_personal_chat_request* other);

  // implements Message ----------------------------------------------

  hf_personal_chat_request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const hf_personal_chat_request& from);
  void MergeFrom(const hf_personal_chat_request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:proto.server.hf_personal_chat_request)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static hf_personal_chat_request* default_instance_;
};
// -------------------------------------------------------------------

class fh_personal_chat_notify : public ::google::protobuf::Message {
 public:
  fh_personal_chat_notify();
  virtual ~fh_personal_chat_notify();

  fh_personal_chat_notify(const fh_personal_chat_notify& from);

  inline fh_personal_chat_notify& operator=(const fh_personal_chat_notify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const fh_personal_chat_notify& default_instance();

  void Swap(fh_personal_chat_notify* other);

  // implements Message ----------------------------------------------

  fh_personal_chat_notify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const fh_personal_chat_notify& from);
  void MergeFrom(const fh_personal_chat_notify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:proto.server.fh_personal_chat_notify)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static fh_personal_chat_notify* default_instance_;
};
// -------------------------------------------------------------------

class ha_personal_chat_notify : public ::google::protobuf::Message {
 public:
  ha_personal_chat_notify();
  virtual ~ha_personal_chat_notify();

  ha_personal_chat_notify(const ha_personal_chat_notify& from);

  inline ha_personal_chat_notify& operator=(const ha_personal_chat_notify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ha_personal_chat_notify& default_instance();

  void Swap(ha_personal_chat_notify* other);

  // implements Message ----------------------------------------------

  ha_personal_chat_notify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ha_personal_chat_notify& from);
  void MergeFrom(const ha_personal_chat_notify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:proto.server.ha_personal_chat_notify)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static ha_personal_chat_notify* default_instance_;
};
// -------------------------------------------------------------------

class he_family_chat_notify : public ::google::protobuf::Message {
 public:
  he_family_chat_notify();
  virtual ~he_family_chat_notify();

  he_family_chat_notify(const he_family_chat_notify& from);

  inline he_family_chat_notify& operator=(const he_family_chat_notify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const he_family_chat_notify& default_instance();

  void Swap(he_family_chat_notify* other);

  // implements Message ----------------------------------------------

  he_family_chat_notify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const he_family_chat_notify& from);
  void MergeFrom(const he_family_chat_notify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 src_uid = 1;
  inline bool has_src_uid() const;
  inline void clear_src_uid();
  static const int kSrcUidFieldNumber = 1;
  inline ::google::protobuf::uint64 src_uid() const;
  inline void set_src_uid(::google::protobuf::uint64 value);

  // optional uint64 family_uid = 2;
  inline bool has_family_uid() const;
  inline void clear_family_uid();
  static const int kFamilyUidFieldNumber = 2;
  inline ::google::protobuf::uint64 family_uid() const;
  inline void set_family_uid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:proto.server.he_family_chat_notify)
 private:
  inline void set_has_src_uid();
  inline void clear_has_src_uid();
  inline void set_has_family_uid();
  inline void clear_has_family_uid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 src_uid_;
  ::google::protobuf::uint64 family_uid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static he_family_chat_notify* default_instance_;
};
// -------------------------------------------------------------------

class he_personal_chat_notify : public ::google::protobuf::Message {
 public:
  he_personal_chat_notify();
  virtual ~he_personal_chat_notify();

  he_personal_chat_notify(const he_personal_chat_notify& from);

  inline he_personal_chat_notify& operator=(const he_personal_chat_notify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const he_personal_chat_notify& default_instance();

  void Swap(he_personal_chat_notify* other);

  // implements Message ----------------------------------------------

  he_personal_chat_notify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const he_personal_chat_notify& from);
  void MergeFrom(const he_personal_chat_notify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 src_uid = 1;
  inline bool has_src_uid() const;
  inline void clear_src_uid();
  static const int kSrcUidFieldNumber = 1;
  inline ::google::protobuf::uint64 src_uid() const;
  inline void set_src_uid(::google::protobuf::uint64 value);

  // optional uint64 tar_uid = 2;
  inline bool has_tar_uid() const;
  inline void clear_tar_uid();
  static const int kTarUidFieldNumber = 2;
  inline ::google::protobuf::uint64 tar_uid() const;
  inline void set_tar_uid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:proto.server.he_personal_chat_notify)
 private:
  inline void set_has_src_uid();
  inline void clear_has_src_uid();
  inline void set_has_tar_uid();
  inline void clear_has_tar_uid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 src_uid_;
  ::google::protobuf::uint64 tar_uid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static he_personal_chat_notify* default_instance_;
};
// -------------------------------------------------------------------

class eh_kick_all_user_notify : public ::google::protobuf::Message {
 public:
  eh_kick_all_user_notify();
  virtual ~eh_kick_all_user_notify();

  eh_kick_all_user_notify(const eh_kick_all_user_notify& from);

  inline eh_kick_all_user_notify& operator=(const eh_kick_all_user_notify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const eh_kick_all_user_notify& default_instance();

  void Swap(eh_kick_all_user_notify* other);

  // implements Message ----------------------------------------------

  eh_kick_all_user_notify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const eh_kick_all_user_notify& from);
  void MergeFrom(const eh_kick_all_user_notify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 reason = 1;
  inline bool has_reason() const;
  inline void clear_reason();
  static const int kReasonFieldNumber = 1;
  inline ::google::protobuf::uint32 reason() const;
  inline void set_reason(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.server.eh_kick_all_user_notify)
 private:
  inline void set_has_reason();
  inline void clear_has_reason();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 reason_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static eh_kick_all_user_notify* default_instance_;
};
// -------------------------------------------------------------------

class dn_create_role_request : public ::google::protobuf::Message {
 public:
  dn_create_role_request();
  virtual ~dn_create_role_request();

  dn_create_role_request(const dn_create_role_request& from);

  inline dn_create_role_request& operator=(const dn_create_role_request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const dn_create_role_request& default_instance();

  void Swap(dn_create_role_request* other);

  // implements Message ----------------------------------------------

  dn_create_role_request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const dn_create_role_request& from);
  void MergeFrom(const dn_create_role_request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 account_id = 1;
  inline bool has_account_id() const;
  inline void clear_account_id();
  static const int kAccountIdFieldNumber = 1;
  inline ::google::protobuf::uint64 account_id() const;
  inline void set_account_id(::google::protobuf::uint64 value);

  // optional uint32 server_id = 2;
  inline bool has_server_id() const;
  inline void clear_server_id();
  static const int kServerIdFieldNumber = 2;
  inline ::google::protobuf::uint32 server_id() const;
  inline void set_server_id(::google::protobuf::uint32 value);

  // optional uint32 gate_id = 3;
  inline bool has_gate_id() const;
  inline void clear_gate_id();
  static const int kGateIdFieldNumber = 3;
  inline ::google::protobuf::uint32 gate_id() const;
  inline void set_gate_id(::google::protobuf::uint32 value);

  // optional .proto.common.account_role_data role_data = 4;
  inline bool has_role_data() const;
  inline void clear_role_data();
  static const int kRoleDataFieldNumber = 4;
  inline const ::proto::common::account_role_data& role_data() const;
  inline ::proto::common::account_role_data* mutable_role_data();
  inline ::proto::common::account_role_data* release_role_data();
  inline void set_allocated_role_data(::proto::common::account_role_data* role_data);

  // @@protoc_insertion_point(class_scope:proto.server.dn_create_role_request)
 private:
  inline void set_has_account_id();
  inline void clear_has_account_id();
  inline void set_has_server_id();
  inline void clear_has_server_id();
  inline void set_has_gate_id();
  inline void clear_has_gate_id();
  inline void set_has_role_data();
  inline void clear_has_role_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 account_id_;
  ::google::protobuf::uint32 server_id_;
  ::google::protobuf::uint32 gate_id_;
  ::proto::common::account_role_data* role_data_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static dn_create_role_request* default_instance_;
};
// -------------------------------------------------------------------

class nd_create_role_reply : public ::google::protobuf::Message {
 public:
  nd_create_role_reply();
  virtual ~nd_create_role_reply();

  nd_create_role_reply(const nd_create_role_reply& from);

  inline nd_create_role_reply& operator=(const nd_create_role_reply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const nd_create_role_reply& default_instance();

  void Swap(nd_create_role_reply* other);

  // implements Message ----------------------------------------------

  nd_create_role_reply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const nd_create_role_reply& from);
  void MergeFrom(const nd_create_role_reply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 reply_code = 1;
  inline bool has_reply_code() const;
  inline void clear_reply_code();
  static const int kReplyCodeFieldNumber = 1;
  inline ::google::protobuf::uint32 reply_code() const;
  inline void set_reply_code(::google::protobuf::uint32 value);

  // optional uint32 gate_id = 2;
  inline bool has_gate_id() const;
  inline void clear_gate_id();
  static const int kGateIdFieldNumber = 2;
  inline ::google::protobuf::uint32 gate_id() const;
  inline void set_gate_id(::google::protobuf::uint32 value);

  // optional .proto.common.account_role_data role_data = 3;
  inline bool has_role_data() const;
  inline void clear_role_data();
  static const int kRoleDataFieldNumber = 3;
  inline const ::proto::common::account_role_data& role_data() const;
  inline ::proto::common::account_role_data* mutable_role_data();
  inline ::proto::common::account_role_data* release_role_data();
  inline void set_allocated_role_data(::proto::common::account_role_data* role_data);

  // optional uint64 time = 4;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 4;
  inline ::google::protobuf::uint64 time() const;
  inline void set_time(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:proto.server.nd_create_role_reply)
 private:
  inline void set_has_reply_code();
  inline void clear_has_reply_code();
  inline void set_has_gate_id();
  inline void clear_has_gate_id();
  inline void set_has_role_data();
  inline void clear_has_role_data();
  inline void set_has_time();
  inline void clear_has_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 reply_code_;
  ::google::protobuf::uint32 gate_id_;
  ::proto::common::account_role_data* role_data_;
  ::google::protobuf::uint64 time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static nd_create_role_reply* default_instance_;
};
// -------------------------------------------------------------------

class dn_role_data_update_notify : public ::google::protobuf::Message {
 public:
  dn_role_data_update_notify();
  virtual ~dn_role_data_update_notify();

  dn_role_data_update_notify(const dn_role_data_update_notify& from);

  inline dn_role_data_update_notify& operator=(const dn_role_data_update_notify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const dn_role_data_update_notify& default_instance();

  void Swap(dn_role_data_update_notify* other);

  // implements Message ----------------------------------------------

  dn_role_data_update_notify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const dn_role_data_update_notify& from);
  void MergeFrom(const dn_role_data_update_notify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .proto.common.account_role_data role_data = 1;
  inline bool has_role_data() const;
  inline void clear_role_data();
  static const int kRoleDataFieldNumber = 1;
  inline const ::proto::common::account_role_data& role_data() const;
  inline ::proto::common::account_role_data* mutable_role_data();
  inline ::proto::common::account_role_data* release_role_data();
  inline void set_allocated_role_data(::proto::common::account_role_data* role_data);

  // @@protoc_insertion_point(class_scope:proto.server.dn_role_data_update_notify)
 private:
  inline void set_has_role_data();
  inline void clear_has_role_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::proto::common::account_role_data* role_data_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static dn_role_data_update_notify* default_instance_;
};
// -------------------------------------------------------------------

class hg_user_channel_notify : public ::google::protobuf::Message {
 public:
  hg_user_channel_notify();
  virtual ~hg_user_channel_notify();

  hg_user_channel_notify(const hg_user_channel_notify& from);

  inline hg_user_channel_notify& operator=(const hg_user_channel_notify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const hg_user_channel_notify& default_instance();

  void Swap(hg_user_channel_notify* other);

  // implements Message ----------------------------------------------

  hg_user_channel_notify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const hg_user_channel_notify& from);
  void MergeFrom(const hg_user_channel_notify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 user_uid = 1;
  inline bool has_user_uid() const;
  inline void clear_user_uid();
  static const int kUserUidFieldNumber = 1;
  inline ::google::protobuf::uint64 user_uid() const;
  inline void set_user_uid(::google::protobuf::uint64 value);

  // optional uint64 channel_id = 2;
  inline bool has_channel_id() const;
  inline void clear_channel_id();
  static const int kChannelIdFieldNumber = 2;
  inline ::google::protobuf::uint64 channel_id() const;
  inline void set_channel_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:proto.server.hg_user_channel_notify)
 private:
  inline void set_has_user_uid();
  inline void clear_has_user_uid();
  inline void set_has_channel_id();
  inline void clear_has_channel_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 user_uid_;
  ::google::protobuf::uint64 channel_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static hg_user_channel_notify* default_instance_;
};
// -------------------------------------------------------------------

class ge_syn_game_info_notify : public ::google::protobuf::Message {
 public:
  ge_syn_game_info_notify();
  virtual ~ge_syn_game_info_notify();

  ge_syn_game_info_notify(const ge_syn_game_info_notify& from);

  inline ge_syn_game_info_notify& operator=(const ge_syn_game_info_notify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ge_syn_game_info_notify& default_instance();

  void Swap(ge_syn_game_info_notify* other);

  // implements Message ----------------------------------------------

  ge_syn_game_info_notify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ge_syn_game_info_notify& from);
  void MergeFrom(const ge_syn_game_info_notify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 game_id = 1;
  inline bool has_game_id() const;
  inline void clear_game_id();
  static const int kGameIdFieldNumber = 1;
  inline ::google::protobuf::uint32 game_id() const;
  inline void set_game_id(::google::protobuf::uint32 value);

  // optional .proto.server.ge_game_scene_reg_request regs = 2;
  inline bool has_regs() const;
  inline void clear_regs();
  static const int kRegsFieldNumber = 2;
  inline const ::proto::server::ge_game_scene_reg_request& regs() const;
  inline ::proto::server::ge_game_scene_reg_request* mutable_regs();
  inline ::proto::server::ge_game_scene_reg_request* release_regs();
  inline void set_allocated_regs(::proto::server::ge_game_scene_reg_request* regs);

  // @@protoc_insertion_point(class_scope:proto.server.ge_syn_game_info_notify)
 private:
  inline void set_has_game_id();
  inline void clear_has_game_id();
  inline void set_has_regs();
  inline void clear_has_regs();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::proto::server::ge_game_scene_reg_request* regs_;
  ::google::protobuf::uint32 game_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static ge_syn_game_info_notify* default_instance_;
};
// -------------------------------------------------------------------

class gd_syn_game_info_notify : public ::google::protobuf::Message {
 public:
  gd_syn_game_info_notify();
  virtual ~gd_syn_game_info_notify();

  gd_syn_game_info_notify(const gd_syn_game_info_notify& from);

  inline gd_syn_game_info_notify& operator=(const gd_syn_game_info_notify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gd_syn_game_info_notify& default_instance();

  void Swap(gd_syn_game_info_notify* other);

  // implements Message ----------------------------------------------

  gd_syn_game_info_notify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gd_syn_game_info_notify& from);
  void MergeFrom(const gd_syn_game_info_notify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 game_id = 1;
  inline bool has_game_id() const;
  inline void clear_game_id();
  static const int kGameIdFieldNumber = 1;
  inline ::google::protobuf::uint32 game_id() const;
  inline void set_game_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.server.gd_syn_game_info_notify)
 private:
  inline void set_has_game_id();
  inline void clear_has_game_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 game_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static gd_syn_game_info_notify* default_instance_;
};
// -------------------------------------------------------------------

class al_syn_gate_info_notify : public ::google::protobuf::Message {
 public:
  al_syn_gate_info_notify();
  virtual ~al_syn_gate_info_notify();

  al_syn_gate_info_notify(const al_syn_gate_info_notify& from);

  inline al_syn_gate_info_notify& operator=(const al_syn_gate_info_notify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const al_syn_gate_info_notify& default_instance();

  void Swap(al_syn_gate_info_notify* other);

  // implements Message ----------------------------------------------

  al_syn_gate_info_notify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const al_syn_gate_info_notify& from);
  void MergeFrom(const al_syn_gate_info_notify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 gate_id = 1;
  inline bool has_gate_id() const;
  inline void clear_gate_id();
  static const int kGateIdFieldNumber = 1;
  inline ::google::protobuf::uint32 gate_id() const;
  inline void set_gate_id(::google::protobuf::uint32 value);

  // repeated uint64 user_list = 2;
  inline int user_list_size() const;
  inline void clear_user_list();
  static const int kUserListFieldNumber = 2;
  inline ::google::protobuf::uint64 user_list(int index) const;
  inline void set_user_list(int index, ::google::protobuf::uint64 value);
  inline void add_user_list(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      user_list() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_user_list();

  // @@protoc_insertion_point(class_scope:proto.server.al_syn_gate_info_notify)
 private:
  inline void set_has_gate_id();
  inline void clear_has_gate_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > user_list_;
  ::google::protobuf::uint32 gate_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static al_syn_gate_info_notify* default_instance_;
};
// -------------------------------------------------------------------

class ga_syn_game_info_notify : public ::google::protobuf::Message {
 public:
  ga_syn_game_info_notify();
  virtual ~ga_syn_game_info_notify();

  ga_syn_game_info_notify(const ga_syn_game_info_notify& from);

  inline ga_syn_game_info_notify& operator=(const ga_syn_game_info_notify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ga_syn_game_info_notify& default_instance();

  void Swap(ga_syn_game_info_notify* other);

  // implements Message ----------------------------------------------

  ga_syn_game_info_notify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ga_syn_game_info_notify& from);
  void MergeFrom(const ga_syn_game_info_notify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 game_id = 1;
  inline bool has_game_id() const;
  inline void clear_game_id();
  static const int kGameIdFieldNumber = 1;
  inline ::google::protobuf::uint32 game_id() const;
  inline void set_game_id(::google::protobuf::uint32 value);

  // optional uint32 game_type = 2;
  inline bool has_game_type() const;
  inline void clear_game_type();
  static const int kGameTypeFieldNumber = 2;
  inline ::google::protobuf::uint32 game_type() const;
  inline void set_game_type(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.server.ga_syn_game_info_notify)
 private:
  inline void set_has_game_id();
  inline void clear_has_game_id();
  inline void set_has_game_type();
  inline void clear_has_game_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 game_id_;
  ::google::protobuf::uint32 game_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static ga_syn_game_info_notify* default_instance_;
};
// -------------------------------------------------------------------

class ga_syn_cross_id_notify : public ::google::protobuf::Message {
 public:
  ga_syn_cross_id_notify();
  virtual ~ga_syn_cross_id_notify();

  ga_syn_cross_id_notify(const ga_syn_cross_id_notify& from);

  inline ga_syn_cross_id_notify& operator=(const ga_syn_cross_id_notify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ga_syn_cross_id_notify& default_instance();

  void Swap(ga_syn_cross_id_notify* other);

  // implements Message ----------------------------------------------

  ga_syn_cross_id_notify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ga_syn_cross_id_notify& from);
  void MergeFrom(const ga_syn_cross_id_notify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 user_id = 1;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  inline ::google::protobuf::uint64 user_id() const;
  inline void set_user_id(::google::protobuf::uint64 value);

  // optional uint32 cross_id = 2;
  inline bool has_cross_id() const;
  inline void clear_cross_id();
  static const int kCrossIdFieldNumber = 2;
  inline ::google::protobuf::uint32 cross_id() const;
  inline void set_cross_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.server.ga_syn_cross_id_notify)
 private:
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_cross_id();
  inline void clear_has_cross_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 user_id_;
  ::google::protobuf::uint32 cross_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static ga_syn_cross_id_notify* default_instance_;
};
// -------------------------------------------------------------------

class ae_syn_gate_info_notify : public ::google::protobuf::Message {
 public:
  ae_syn_gate_info_notify();
  virtual ~ae_syn_gate_info_notify();

  ae_syn_gate_info_notify(const ae_syn_gate_info_notify& from);

  inline ae_syn_gate_info_notify& operator=(const ae_syn_gate_info_notify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ae_syn_gate_info_notify& default_instance();

  void Swap(ae_syn_gate_info_notify* other);

  // implements Message ----------------------------------------------

  ae_syn_gate_info_notify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ae_syn_gate_info_notify& from);
  void MergeFrom(const ae_syn_gate_info_notify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 gate_id = 1;
  inline bool has_gate_id() const;
  inline void clear_gate_id();
  static const int kGateIdFieldNumber = 1;
  inline ::google::protobuf::uint32 gate_id() const;
  inline void set_gate_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.server.ae_syn_gate_info_notify)
 private:
  inline void set_has_gate_id();
  inline void clear_has_gate_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 gate_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static ae_syn_gate_info_notify* default_instance_;
};
// -------------------------------------------------------------------

class cross_server_data : public ::google::protobuf::Message {
 public:
  cross_server_data();
  virtual ~cross_server_data();

  cross_server_data(const cross_server_data& from);

  inline cross_server_data& operator=(const cross_server_data& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const cross_server_data& default_instance();

  void Swap(cross_server_data* other);

  // implements Message ----------------------------------------------

  cross_server_data* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const cross_server_data& from);
  void MergeFrom(const cross_server_data& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .proto.server.scene_change_type type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::proto::server::scene_change_type type() const;
  inline void set_type(::proto::server::scene_change_type value);

  // optional uint64 scene_id = 2;
  inline bool has_scene_id() const;
  inline void clear_scene_id();
  static const int kSceneIdFieldNumber = 2;
  inline ::google::protobuf::uint64 scene_id() const;
  inline void set_scene_id(::google::protobuf::uint64 value);

  // optional float des_x = 3;
  inline bool has_des_x() const;
  inline void clear_des_x();
  static const int kDesXFieldNumber = 3;
  inline float des_x() const;
  inline void set_des_x(float value);

  // optional float des_y = 4;
  inline bool has_des_y() const;
  inline void clear_des_y();
  static const int kDesYFieldNumber = 4;
  inline float des_y() const;
  inline void set_des_y(float value);

  // optional float des_dir = 5;
  inline bool has_des_dir() const;
  inline void clear_des_dir();
  static const int kDesDirFieldNumber = 5;
  inline float des_dir() const;
  inline void set_des_dir(float value);

  // optional uint64 troop_id = 6;
  inline bool has_troop_id() const;
  inline void clear_troop_id();
  static const int kTroopIdFieldNumber = 6;
  inline ::google::protobuf::uint64 troop_id() const;
  inline void set_troop_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:proto.server.cross_server_data)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_scene_id();
  inline void clear_has_scene_id();
  inline void set_has_des_x();
  inline void clear_has_des_x();
  inline void set_has_des_y();
  inline void clear_has_des_y();
  inline void set_has_des_dir();
  inline void clear_has_des_dir();
  inline void set_has_troop_id();
  inline void clear_has_troop_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 scene_id_;
  int type_;
  float des_x_;
  float des_y_;
  float des_dir_;
  ::google::protobuf::uint64 troop_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static cross_server_data* default_instance_;
};
// -------------------------------------------------------------------

class ae_reg_user_center_request : public ::google::protobuf::Message {
 public:
  ae_reg_user_center_request();
  virtual ~ae_reg_user_center_request();

  ae_reg_user_center_request(const ae_reg_user_center_request& from);

  inline ae_reg_user_center_request& operator=(const ae_reg_user_center_request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ae_reg_user_center_request& default_instance();

  void Swap(ae_reg_user_center_request* other);

  // implements Message ----------------------------------------------

  ae_reg_user_center_request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ae_reg_user_center_request& from);
  void MergeFrom(const ae_reg_user_center_request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::uint64 uid() const;
  inline void set_uid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:proto.server.ae_reg_user_center_request)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 uid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static ae_reg_user_center_request* default_instance_;
};
// -------------------------------------------------------------------

class ae_unreg_user_scene_notify : public ::google::protobuf::Message {
 public:
  ae_unreg_user_scene_notify();
  virtual ~ae_unreg_user_scene_notify();

  ae_unreg_user_scene_notify(const ae_unreg_user_scene_notify& from);

  inline ae_unreg_user_scene_notify& operator=(const ae_unreg_user_scene_notify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ae_unreg_user_scene_notify& default_instance();

  void Swap(ae_unreg_user_scene_notify* other);

  // implements Message ----------------------------------------------

  ae_unreg_user_scene_notify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ae_unreg_user_scene_notify& from);
  void MergeFrom(const ae_unreg_user_scene_notify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::uint64 uid() const;
  inline void set_uid(::google::protobuf::uint64 value);

  // optional uint32 unreg_code = 2;
  inline bool has_unreg_code() const;
  inline void clear_unreg_code();
  static const int kUnregCodeFieldNumber = 2;
  inline ::google::protobuf::uint32 unreg_code() const;
  inline void set_unreg_code(::google::protobuf::uint32 value);

  // optional uint32 kick_reason = 3;
  inline bool has_kick_reason() const;
  inline void clear_kick_reason();
  static const int kKickReasonFieldNumber = 3;
  inline ::google::protobuf::uint32 kick_reason() const;
  inline void set_kick_reason(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.server.ae_unreg_user_scene_notify)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_unreg_code();
  inline void clear_has_unreg_code();
  inline void set_has_kick_reason();
  inline void clear_has_kick_reason();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 uid_;
  ::google::protobuf::uint32 unreg_code_;
  ::google::protobuf::uint32 kick_reason_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static ae_unreg_user_scene_notify* default_instance_;
};
// -------------------------------------------------------------------

class ea_unreg_user_center_notify : public ::google::protobuf::Message {
 public:
  ea_unreg_user_center_notify();
  virtual ~ea_unreg_user_center_notify();

  ea_unreg_user_center_notify(const ea_unreg_user_center_notify& from);

  inline ea_unreg_user_center_notify& operator=(const ea_unreg_user_center_notify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ea_unreg_user_center_notify& default_instance();

  void Swap(ea_unreg_user_center_notify* other);

  // implements Message ----------------------------------------------

  ea_unreg_user_center_notify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ea_unreg_user_center_notify& from);
  void MergeFrom(const ea_unreg_user_center_notify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::uint64 uid() const;
  inline void set_uid(::google::protobuf::uint64 value);

  // optional uint32 unreg_code = 2;
  inline bool has_unreg_code() const;
  inline void clear_unreg_code();
  static const int kUnregCodeFieldNumber = 2;
  inline ::google::protobuf::uint32 unreg_code() const;
  inline void set_unreg_code(::google::protobuf::uint32 value);

  // optional uint32 code_param = 3;
  inline bool has_code_param() const;
  inline void clear_code_param();
  static const int kCodeParamFieldNumber = 3;
  inline ::google::protobuf::uint32 code_param() const;
  inline void set_code_param(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.server.ea_unreg_user_center_notify)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_unreg_code();
  inline void clear_has_unreg_code();
  inline void set_has_code_param();
  inline void clear_has_code_param();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 uid_;
  ::google::protobuf::uint32 unreg_code_;
  ::google::protobuf::uint32 code_param_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static ea_unreg_user_center_notify* default_instance_;
};
// -------------------------------------------------------------------

class ae_create_role_request : public ::google::protobuf::Message {
 public:
  ae_create_role_request();
  virtual ~ae_create_role_request();

  ae_create_role_request(const ae_create_role_request& from);

  inline ae_create_role_request& operator=(const ae_create_role_request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ae_create_role_request& default_instance();

  void Swap(ae_create_role_request* other);

  // implements Message ----------------------------------------------

  ae_create_role_request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ae_create_role_request& from);
  void MergeFrom(const ae_create_role_request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::uint64 uid() const;
  inline void set_uid(::google::protobuf::uint64 value);

  // optional string nickname = 2;
  inline bool has_nickname() const;
  inline void clear_nickname();
  static const int kNicknameFieldNumber = 2;
  inline const ::std::string& nickname() const;
  inline void set_nickname(const ::std::string& value);
  inline void set_nickname(const char* value);
  inline void set_nickname(const char* value, size_t size);
  inline ::std::string* mutable_nickname();
  inline ::std::string* release_nickname();
  inline void set_allocated_nickname(::std::string* nickname);

  // optional uint32 role_type = 3;
  inline bool has_role_type() const;
  inline void clear_role_type();
  static const int kRoleTypeFieldNumber = 3;
  inline ::google::protobuf::uint32 role_type() const;
  inline void set_role_type(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.server.ae_create_role_request)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_nickname();
  inline void clear_has_nickname();
  inline void set_has_role_type();
  inline void clear_has_role_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 uid_;
  ::std::string* nickname_;
  ::google::protobuf::uint32 role_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static ae_create_role_request* default_instance_;
};
// -------------------------------------------------------------------

class ea_create_role_reply : public ::google::protobuf::Message {
 public:
  ea_create_role_reply();
  virtual ~ea_create_role_reply();

  ea_create_role_reply(const ea_create_role_reply& from);

  inline ea_create_role_reply& operator=(const ea_create_role_reply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ea_create_role_reply& default_instance();

  void Swap(ea_create_role_reply* other);

  // implements Message ----------------------------------------------

  ea_create_role_reply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ea_create_role_reply& from);
  void MergeFrom(const ea_create_role_reply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::uint64 uid() const;
  inline void set_uid(::google::protobuf::uint64 value);

  // optional uint32 reply_code = 2;
  inline bool has_reply_code() const;
  inline void clear_reply_code();
  static const int kReplyCodeFieldNumber = 2;
  inline ::google::protobuf::uint32 reply_code() const;
  inline void set_reply_code(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.server.ea_create_role_reply)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_reply_code();
  inline void clear_has_reply_code();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 uid_;
  ::google::protobuf::uint32 reply_code_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static ea_create_role_reply* default_instance_;
};
// -------------------------------------------------------------------

class ae_user_cross_server_notify : public ::google::protobuf::Message {
 public:
  ae_user_cross_server_notify();
  virtual ~ae_user_cross_server_notify();

  ae_user_cross_server_notify(const ae_user_cross_server_notify& from);

  inline ae_user_cross_server_notify& operator=(const ae_user_cross_server_notify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ae_user_cross_server_notify& default_instance();

  void Swap(ae_user_cross_server_notify* other);

  // implements Message ----------------------------------------------

  ae_user_cross_server_notify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ae_user_cross_server_notify& from);
  void MergeFrom(const ae_user_cross_server_notify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .proto.server.cross_server_data data = 1;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 1;
  inline const ::proto::server::cross_server_data& data() const;
  inline ::proto::server::cross_server_data* mutable_data();
  inline ::proto::server::cross_server_data* release_data();
  inline void set_allocated_data(::proto::server::cross_server_data* data);

  // @@protoc_insertion_point(class_scope:proto.server.ae_user_cross_server_notify)
 private:
  inline void set_has_data();
  inline void clear_has_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::proto::server::cross_server_data* data_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static ae_user_cross_server_notify* default_instance_;
};
// -------------------------------------------------------------------

class ea_kick_all_user_notify : public ::google::protobuf::Message {
 public:
  ea_kick_all_user_notify();
  virtual ~ea_kick_all_user_notify();

  ea_kick_all_user_notify(const ea_kick_all_user_notify& from);

  inline ea_kick_all_user_notify& operator=(const ea_kick_all_user_notify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ea_kick_all_user_notify& default_instance();

  void Swap(ea_kick_all_user_notify* other);

  // implements Message ----------------------------------------------

  ea_kick_all_user_notify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ea_kick_all_user_notify& from);
  void MergeFrom(const ea_kick_all_user_notify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 reason = 1;
  inline bool has_reason() const;
  inline void clear_reason();
  static const int kReasonFieldNumber = 1;
  inline ::google::protobuf::uint32 reason() const;
  inline void set_reason(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.server.ea_kick_all_user_notify)
 private:
  inline void set_has_reason();
  inline void clear_has_reason();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 reason_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static ea_kick_all_user_notify* default_instance_;
};
// -------------------------------------------------------------------

class global_user_data : public ::google::protobuf::Message {
 public:
  global_user_data();
  virtual ~global_user_data();

  global_user_data(const global_user_data& from);

  inline global_user_data& operator=(const global_user_data& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const global_user_data& default_instance();

  void Swap(global_user_data* other);

  // implements Message ----------------------------------------------

  global_user_data* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const global_user_data& from);
  void MergeFrom(const global_user_data& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .proto.server.scene_change_type type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::proto::server::scene_change_type type() const;
  inline void set_type(::proto::server::scene_change_type value);

  // optional uint32 level = 2;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 2;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // optional uint32 fighting = 3;
  inline bool has_fighting() const;
  inline void clear_fighting();
  static const int kFightingFieldNumber = 3;
  inline ::google::protobuf::uint32 fighting() const;
  inline void set_fighting(::google::protobuf::uint32 value);

  // optional uint32 hero_plugin = 4;
  inline bool has_hero_plugin() const;
  inline void clear_hero_plugin();
  static const int kHeroPluginFieldNumber = 4;
  inline ::google::protobuf::uint32 hero_plugin() const;
  inline void set_hero_plugin(::google::protobuf::uint32 value);

  // optional uint64 scene_id = 5;
  inline bool has_scene_id() const;
  inline void clear_scene_id();
  static const int kSceneIdFieldNumber = 5;
  inline ::google::protobuf::uint64 scene_id() const;
  inline void set_scene_id(::google::protobuf::uint64 value);

  // optional uint32 map_tid = 6;
  inline bool has_map_tid() const;
  inline void clear_map_tid();
  static const int kMapTidFieldNumber = 6;
  inline ::google::protobuf::uint32 map_tid() const;
  inline void set_map_tid(::google::protobuf::uint32 value);

  // optional uint32 family_contribution = 7;
  inline bool has_family_contribution() const;
  inline void clear_family_contribution();
  static const int kFamilyContributionFieldNumber = 7;
  inline ::google::protobuf::uint32 family_contribution() const;
  inline void set_family_contribution(::google::protobuf::uint32 value);

  // optional uint32 head_frame_id = 8;
  inline bool has_head_frame_id() const;
  inline void clear_head_frame_id();
  static const int kHeadFrameIdFieldNumber = 8;
  inline ::google::protobuf::uint32 head_frame_id() const;
  inline void set_head_frame_id(::google::protobuf::uint32 value);

  // optional uint32 charm = 9;
  inline bool has_charm() const;
  inline void clear_charm();
  static const int kCharmFieldNumber = 9;
  inline ::google::protobuf::uint32 charm() const;
  inline void set_charm(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.server.global_user_data)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_fighting();
  inline void clear_has_fighting();
  inline void set_has_hero_plugin();
  inline void clear_has_hero_plugin();
  inline void set_has_scene_id();
  inline void clear_has_scene_id();
  inline void set_has_map_tid();
  inline void clear_has_map_tid();
  inline void set_has_family_contribution();
  inline void clear_has_family_contribution();
  inline void set_has_head_frame_id();
  inline void clear_has_head_frame_id();
  inline void set_has_charm();
  inline void clear_has_charm();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  ::google::protobuf::uint32 level_;
  ::google::protobuf::uint32 fighting_;
  ::google::protobuf::uint32 hero_plugin_;
  ::google::protobuf::uint64 scene_id_;
  ::google::protobuf::uint32 map_tid_;
  ::google::protobuf::uint32 family_contribution_;
  ::google::protobuf::uint32 head_frame_id_;
  ::google::protobuf::uint32 charm_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static global_user_data* default_instance_;
};
// -------------------------------------------------------------------

class eg_unreg_user_scene_notify : public ::google::protobuf::Message {
 public:
  eg_unreg_user_scene_notify();
  virtual ~eg_unreg_user_scene_notify();

  eg_unreg_user_scene_notify(const eg_unreg_user_scene_notify& from);

  inline eg_unreg_user_scene_notify& operator=(const eg_unreg_user_scene_notify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const eg_unreg_user_scene_notify& default_instance();

  void Swap(eg_unreg_user_scene_notify* other);

  // implements Message ----------------------------------------------

  eg_unreg_user_scene_notify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const eg_unreg_user_scene_notify& from);
  void MergeFrom(const eg_unreg_user_scene_notify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::uint64 uid() const;
  inline void set_uid(::google::protobuf::uint64 value);

  // optional uint32 unreg_code = 2;
  inline bool has_unreg_code() const;
  inline void clear_unreg_code();
  static const int kUnregCodeFieldNumber = 2;
  inline ::google::protobuf::uint32 unreg_code() const;
  inline void set_unreg_code(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.server.eg_unreg_user_scene_notify)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_unreg_code();
  inline void clear_has_unreg_code();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 uid_;
  ::google::protobuf::uint32 unreg_code_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static eg_unreg_user_scene_notify* default_instance_;
};
// -------------------------------------------------------------------

class ge_unreg_user_scene_notify : public ::google::protobuf::Message {
 public:
  ge_unreg_user_scene_notify();
  virtual ~ge_unreg_user_scene_notify();

  ge_unreg_user_scene_notify(const ge_unreg_user_scene_notify& from);

  inline ge_unreg_user_scene_notify& operator=(const ge_unreg_user_scene_notify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ge_unreg_user_scene_notify& default_instance();

  void Swap(ge_unreg_user_scene_notify* other);

  // implements Message ----------------------------------------------

  ge_unreg_user_scene_notify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ge_unreg_user_scene_notify& from);
  void MergeFrom(const ge_unreg_user_scene_notify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::uint64 uid() const;
  inline void set_uid(::google::protobuf::uint64 value);

  // optional uint32 unreg_code = 2;
  inline bool has_unreg_code() const;
  inline void clear_unreg_code();
  static const int kUnregCodeFieldNumber = 2;
  inline ::google::protobuf::uint32 unreg_code() const;
  inline void set_unreg_code(::google::protobuf::uint32 value);

  // optional uint32 kick_reason = 3;
  inline bool has_kick_reason() const;
  inline void clear_kick_reason();
  static const int kKickReasonFieldNumber = 3;
  inline ::google::protobuf::uint32 kick_reason() const;
  inline void set_kick_reason(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.server.ge_unreg_user_scene_notify)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_unreg_code();
  inline void clear_has_unreg_code();
  inline void set_has_kick_reason();
  inline void clear_has_kick_reason();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 uid_;
  ::google::protobuf::uint32 unreg_code_;
  ::google::protobuf::uint32 kick_reason_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static ge_unreg_user_scene_notify* default_instance_;
};
// -------------------------------------------------------------------

class eg_reg_user_scene_request : public ::google::protobuf::Message {
 public:
  eg_reg_user_scene_request();
  virtual ~eg_reg_user_scene_request();

  eg_reg_user_scene_request(const eg_reg_user_scene_request& from);

  inline eg_reg_user_scene_request& operator=(const eg_reg_user_scene_request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const eg_reg_user_scene_request& default_instance();

  void Swap(eg_reg_user_scene_request* other);

  // implements Message ----------------------------------------------

  eg_reg_user_scene_request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const eg_reg_user_scene_request& from);
  void MergeFrom(const eg_reg_user_scene_request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::uint64 uid() const;
  inline void set_uid(::google::protobuf::uint64 value);

  // optional uint32 gate_id = 2;
  inline bool has_gate_id() const;
  inline void clear_gate_id();
  static const int kGateIdFieldNumber = 2;
  inline ::google::protobuf::uint32 gate_id() const;
  inline void set_gate_id(::google::protobuf::uint32 value);

  // optional .proto.server.cross_server_data scene_data = 3;
  inline bool has_scene_data() const;
  inline void clear_scene_data();
  static const int kSceneDataFieldNumber = 3;
  inline const ::proto::server::cross_server_data& scene_data() const;
  inline ::proto::server::cross_server_data* mutable_scene_data();
  inline ::proto::server::cross_server_data* release_scene_data();
  inline void set_allocated_scene_data(::proto::server::cross_server_data* scene_data);

  // optional uint64 family_id = 4;
  inline bool has_family_id() const;
  inline void clear_family_id();
  static const int kFamilyIdFieldNumber = 4;
  inline ::google::protobuf::uint64 family_id() const;
  inline void set_family_id(::google::protobuf::uint64 value);

  // optional string family_name = 5;
  inline bool has_family_name() const;
  inline void clear_family_name();
  static const int kFamilyNameFieldNumber = 5;
  inline const ::std::string& family_name() const;
  inline void set_family_name(const ::std::string& value);
  inline void set_family_name(const char* value);
  inline void set_family_name(const char* value, size_t size);
  inline ::std::string* mutable_family_name();
  inline ::std::string* release_family_name();
  inline void set_allocated_family_name(::std::string* family_name);

  // optional uint32 family_officer = 6;
  inline bool has_family_officer() const;
  inline void clear_family_officer();
  static const int kFamilyOfficerFieldNumber = 6;
  inline ::google::protobuf::uint32 family_officer() const;
  inline void set_family_officer(::google::protobuf::uint32 value);

  // optional uint32 country_id = 7;
  inline bool has_country_id() const;
  inline void clear_country_id();
  static const int kCountryIdFieldNumber = 7;
  inline ::google::protobuf::uint32 country_id() const;
  inline void set_country_id(::google::protobuf::uint32 value);

  // optional uint32 country_officer = 8;
  inline bool has_country_officer() const;
  inline void clear_country_officer();
  static const int kCountryOfficerFieldNumber = 8;
  inline ::google::protobuf::uint32 country_officer() const;
  inline void set_country_officer(::google::protobuf::uint32 value);

  // optional uint32 family_level = 9;
  inline bool has_family_level() const;
  inline void clear_family_level();
  static const int kFamilyLevelFieldNumber = 9;
  inline ::google::protobuf::uint32 family_level() const;
  inline void set_family_level(::google::protobuf::uint32 value);

  // optional uint32 charm = 10;
  inline bool has_charm() const;
  inline void clear_charm();
  static const int kCharmFieldNumber = 10;
  inline ::google::protobuf::uint32 charm() const;
  inline void set_charm(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.server.eg_reg_user_scene_request)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_gate_id();
  inline void clear_has_gate_id();
  inline void set_has_scene_data();
  inline void clear_has_scene_data();
  inline void set_has_family_id();
  inline void clear_has_family_id();
  inline void set_has_family_name();
  inline void clear_has_family_name();
  inline void set_has_family_officer();
  inline void clear_has_family_officer();
  inline void set_has_country_id();
  inline void clear_has_country_id();
  inline void set_has_country_officer();
  inline void clear_has_country_officer();
  inline void set_has_family_level();
  inline void clear_has_family_level();
  inline void set_has_charm();
  inline void clear_has_charm();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 uid_;
  ::proto::server::cross_server_data* scene_data_;
  ::google::protobuf::uint64 family_id_;
  ::google::protobuf::uint32 gate_id_;
  ::google::protobuf::uint32 family_officer_;
  ::std::string* family_name_;
  ::google::protobuf::uint32 country_id_;
  ::google::protobuf::uint32 country_officer_;
  ::google::protobuf::uint32 family_level_;
  ::google::protobuf::uint32 charm_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static eg_reg_user_scene_request* default_instance_;
};
// -------------------------------------------------------------------

class ge_reg_user_scene_reply : public ::google::protobuf::Message {
 public:
  ge_reg_user_scene_reply();
  virtual ~ge_reg_user_scene_reply();

  ge_reg_user_scene_reply(const ge_reg_user_scene_reply& from);

  inline ge_reg_user_scene_reply& operator=(const ge_reg_user_scene_reply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ge_reg_user_scene_reply& default_instance();

  void Swap(ge_reg_user_scene_reply* other);

  // implements Message ----------------------------------------------

  ge_reg_user_scene_reply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ge_reg_user_scene_reply& from);
  void MergeFrom(const ge_reg_user_scene_reply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::uint64 uid() const;
  inline void set_uid(::google::protobuf::uint64 value);

  // optional .proto.server.global_user_data user_data = 2;
  inline bool has_user_data() const;
  inline void clear_user_data();
  static const int kUserDataFieldNumber = 2;
  inline const ::proto::server::global_user_data& user_data() const;
  inline ::proto::server::global_user_data* mutable_user_data();
  inline ::proto::server::global_user_data* release_user_data();
  inline void set_allocated_user_data(::proto::server::global_user_data* user_data);

  // @@protoc_insertion_point(class_scope:proto.server.ge_reg_user_scene_reply)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_user_data();
  inline void clear_has_user_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 uid_;
  ::proto::server::global_user_data* user_data_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static ge_reg_user_scene_reply* default_instance_;
};
// -------------------------------------------------------------------

class eg_relogin_scene_request : public ::google::protobuf::Message {
 public:
  eg_relogin_scene_request();
  virtual ~eg_relogin_scene_request();

  eg_relogin_scene_request(const eg_relogin_scene_request& from);

  inline eg_relogin_scene_request& operator=(const eg_relogin_scene_request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const eg_relogin_scene_request& default_instance();

  void Swap(eg_relogin_scene_request* other);

  // implements Message ----------------------------------------------

  eg_relogin_scene_request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const eg_relogin_scene_request& from);
  void MergeFrom(const eg_relogin_scene_request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::uint64 uid() const;
  inline void set_uid(::google::protobuf::uint64 value);

  // optional uint32 gate_id = 2;
  inline bool has_gate_id() const;
  inline void clear_gate_id();
  static const int kGateIdFieldNumber = 2;
  inline ::google::protobuf::uint32 gate_id() const;
  inline void set_gate_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.server.eg_relogin_scene_request)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_gate_id();
  inline void clear_has_gate_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 uid_;
  ::google::protobuf::uint32 gate_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static eg_relogin_scene_request* default_instance_;
};
// -------------------------------------------------------------------

class ge_user_cross_scene_request : public ::google::protobuf::Message {
 public:
  ge_user_cross_scene_request();
  virtual ~ge_user_cross_scene_request();

  ge_user_cross_scene_request(const ge_user_cross_scene_request& from);

  inline ge_user_cross_scene_request& operator=(const ge_user_cross_scene_request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ge_user_cross_scene_request& default_instance();

  void Swap(ge_user_cross_scene_request* other);

  // implements Message ----------------------------------------------

  ge_user_cross_scene_request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ge_user_cross_scene_request& from);
  void MergeFrom(const ge_user_cross_scene_request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .proto.server.cross_server_data data = 1;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 1;
  inline const ::proto::server::cross_server_data& data() const;
  inline ::proto::server::cross_server_data* mutable_data();
  inline ::proto::server::cross_server_data* release_data();
  inline void set_allocated_data(::proto::server::cross_server_data* data);

  // @@protoc_insertion_point(class_scope:proto.server.ge_user_cross_scene_request)
 private:
  inline void set_has_data();
  inline void clear_has_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::proto::server::cross_server_data* data_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static ge_user_cross_scene_request* default_instance_;
};
// -------------------------------------------------------------------

class eg_user_cross_scene_reply : public ::google::protobuf::Message {
 public:
  eg_user_cross_scene_reply();
  virtual ~eg_user_cross_scene_reply();

  eg_user_cross_scene_reply(const eg_user_cross_scene_reply& from);

  inline eg_user_cross_scene_reply& operator=(const eg_user_cross_scene_reply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const eg_user_cross_scene_reply& default_instance();

  void Swap(eg_user_cross_scene_reply* other);

  // implements Message ----------------------------------------------

  eg_user_cross_scene_reply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const eg_user_cross_scene_reply& from);
  void MergeFrom(const eg_user_cross_scene_reply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 reply_code = 1;
  inline bool has_reply_code() const;
  inline void clear_reply_code();
  static const int kReplyCodeFieldNumber = 1;
  inline ::google::protobuf::uint32 reply_code() const;
  inline void set_reply_code(::google::protobuf::uint32 value);

  // optional .proto.server.cross_server_data data = 2;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 2;
  inline const ::proto::server::cross_server_data& data() const;
  inline ::proto::server::cross_server_data* mutable_data();
  inline ::proto::server::cross_server_data* release_data();
  inline void set_allocated_data(::proto::server::cross_server_data* data);

  // @@protoc_insertion_point(class_scope:proto.server.eg_user_cross_scene_reply)
 private:
  inline void set_has_reply_code();
  inline void clear_has_reply_code();
  inline void set_has_data();
  inline void clear_has_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::proto::server::cross_server_data* data_;
  ::google::protobuf::uint32 reply_code_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static eg_user_cross_scene_reply* default_instance_;
};
// -------------------------------------------------------------------

class eg_kick_all_user_notify : public ::google::protobuf::Message {
 public:
  eg_kick_all_user_notify();
  virtual ~eg_kick_all_user_notify();

  eg_kick_all_user_notify(const eg_kick_all_user_notify& from);

  inline eg_kick_all_user_notify& operator=(const eg_kick_all_user_notify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const eg_kick_all_user_notify& default_instance();

  void Swap(eg_kick_all_user_notify* other);

  // implements Message ----------------------------------------------

  eg_kick_all_user_notify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const eg_kick_all_user_notify& from);
  void MergeFrom(const eg_kick_all_user_notify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 reason = 1;
  inline bool has_reason() const;
  inline void clear_reason();
  static const int kReasonFieldNumber = 1;
  inline ::google::protobuf::uint32 reason() const;
  inline void set_reason(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.server.eg_kick_all_user_notify)
 private:
  inline void set_has_reason();
  inline void clear_has_reason();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 reason_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static eg_kick_all_user_notify* default_instance_;
};
// -------------------------------------------------------------------

class ed_create_role_request : public ::google::protobuf::Message {
 public:
  ed_create_role_request();
  virtual ~ed_create_role_request();

  ed_create_role_request(const ed_create_role_request& from);

  inline ed_create_role_request& operator=(const ed_create_role_request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ed_create_role_request& default_instance();

  void Swap(ed_create_role_request* other);

  // implements Message ----------------------------------------------

  ed_create_role_request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ed_create_role_request& from);
  void MergeFrom(const ed_create_role_request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::uint64 uid() const;
  inline void set_uid(::google::protobuf::uint64 value);

  // optional string nickname = 2;
  inline bool has_nickname() const;
  inline void clear_nickname();
  static const int kNicknameFieldNumber = 2;
  inline const ::std::string& nickname() const;
  inline void set_nickname(const ::std::string& value);
  inline void set_nickname(const char* value);
  inline void set_nickname(const char* value, size_t size);
  inline ::std::string* mutable_nickname();
  inline ::std::string* release_nickname();
  inline void set_allocated_nickname(::std::string* nickname);

  // optional uint32 role_type = 3;
  inline bool has_role_type() const;
  inline void clear_role_type();
  static const int kRoleTypeFieldNumber = 3;
  inline ::google::protobuf::uint32 role_type() const;
  inline void set_role_type(::google::protobuf::uint32 value);

  // optional uint32 gate_id = 4;
  inline bool has_gate_id() const;
  inline void clear_gate_id();
  static const int kGateIdFieldNumber = 4;
  inline ::google::protobuf::uint32 gate_id() const;
  inline void set_gate_id(::google::protobuf::uint32 value);

  // optional uint64 time = 5;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 5;
  inline ::google::protobuf::uint64 time() const;
  inline void set_time(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:proto.server.ed_create_role_request)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_nickname();
  inline void clear_has_nickname();
  inline void set_has_role_type();
  inline void clear_has_role_type();
  inline void set_has_gate_id();
  inline void clear_has_gate_id();
  inline void set_has_time();
  inline void clear_has_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 uid_;
  ::std::string* nickname_;
  ::google::protobuf::uint32 role_type_;
  ::google::protobuf::uint32 gate_id_;
  ::google::protobuf::uint64 time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static ed_create_role_request* default_instance_;
};
// -------------------------------------------------------------------

class de_create_role_reply : public ::google::protobuf::Message {
 public:
  de_create_role_reply();
  virtual ~de_create_role_reply();

  de_create_role_reply(const de_create_role_reply& from);

  inline de_create_role_reply& operator=(const de_create_role_reply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const de_create_role_reply& default_instance();

  void Swap(de_create_role_reply* other);

  // implements Message ----------------------------------------------

  de_create_role_reply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const de_create_role_reply& from);
  void MergeFrom(const de_create_role_reply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::uint64 uid() const;
  inline void set_uid(::google::protobuf::uint64 value);

  // optional uint32 reply_code = 2;
  inline bool has_reply_code() const;
  inline void clear_reply_code();
  static const int kReplyCodeFieldNumber = 2;
  inline ::google::protobuf::uint32 reply_code() const;
  inline void set_reply_code(::google::protobuf::uint32 value);

  // optional uint32 gate_id = 3;
  inline bool has_gate_id() const;
  inline void clear_gate_id();
  static const int kGateIdFieldNumber = 3;
  inline ::google::protobuf::uint32 gate_id() const;
  inline void set_gate_id(::google::protobuf::uint32 value);

  // optional string name = 4;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 4;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional uint32 create_time = 5;
  inline bool has_create_time() const;
  inline void clear_create_time();
  static const int kCreateTimeFieldNumber = 5;
  inline ::google::protobuf::uint32 create_time() const;
  inline void set_create_time(::google::protobuf::uint32 value);

  // optional uint32 role_type = 6;
  inline bool has_role_type() const;
  inline void clear_role_type();
  static const int kRoleTypeFieldNumber = 6;
  inline ::google::protobuf::uint32 role_type() const;
  inline void set_role_type(::google::protobuf::uint32 value);

  // optional uint32 channel_id = 7;
  inline bool has_channel_id() const;
  inline void clear_channel_id();
  static const int kChannelIdFieldNumber = 7;
  inline ::google::protobuf::uint32 channel_id() const;
  inline void set_channel_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.server.de_create_role_reply)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_reply_code();
  inline void clear_has_reply_code();
  inline void set_has_gate_id();
  inline void clear_has_gate_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_create_time();
  inline void clear_has_create_time();
  inline void set_has_role_type();
  inline void clear_has_role_type();
  inline void set_has_channel_id();
  inline void clear_has_channel_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 uid_;
  ::google::protobuf::uint32 reply_code_;
  ::google::protobuf::uint32 gate_id_;
  ::std::string* name_;
  ::google::protobuf::uint32 create_time_;
  ::google::protobuf::uint32 role_type_;
  ::google::protobuf::uint32 channel_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static de_create_role_reply* default_instance_;
};
// -------------------------------------------------------------------

class ed_query_role_data_request : public ::google::protobuf::Message {
 public:
  ed_query_role_data_request();
  virtual ~ed_query_role_data_request();

  ed_query_role_data_request(const ed_query_role_data_request& from);

  inline ed_query_role_data_request& operator=(const ed_query_role_data_request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ed_query_role_data_request& default_instance();

  void Swap(ed_query_role_data_request* other);

  // implements Message ----------------------------------------------

  ed_query_role_data_request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ed_query_role_data_request& from);
  void MergeFrom(const ed_query_role_data_request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::uint64 uid() const;
  inline void set_uid(::google::protobuf::uint64 value);

  // optional uint32 gate_id = 2;
  inline bool has_gate_id() const;
  inline void clear_gate_id();
  static const int kGateIdFieldNumber = 2;
  inline ::google::protobuf::uint32 gate_id() const;
  inline void set_gate_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.server.ed_query_role_data_request)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_gate_id();
  inline void clear_has_gate_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 uid_;
  ::google::protobuf::uint32 gate_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static ed_query_role_data_request* default_instance_;
};
// -------------------------------------------------------------------

class de_query_role_data_reply : public ::google::protobuf::Message {
 public:
  de_query_role_data_reply();
  virtual ~de_query_role_data_reply();

  de_query_role_data_reply(const de_query_role_data_reply& from);

  inline de_query_role_data_reply& operator=(const de_query_role_data_reply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const de_query_role_data_reply& default_instance();

  void Swap(de_query_role_data_reply* other);

  // implements Message ----------------------------------------------

  de_query_role_data_reply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const de_query_role_data_reply& from);
  void MergeFrom(const de_query_role_data_reply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::uint64 uid() const;
  inline void set_uid(::google::protobuf::uint64 value);

  // optional uint32 gate_id = 2;
  inline bool has_gate_id() const;
  inline void clear_gate_id();
  static const int kGateIdFieldNumber = 2;
  inline ::google::protobuf::uint32 gate_id() const;
  inline void set_gate_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.server.de_query_role_data_reply)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_gate_id();
  inline void clear_has_gate_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 uid_;
  ::google::protobuf::uint32 gate_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static de_query_role_data_reply* default_instance_;
};
// -------------------------------------------------------------------

class ed_role_leave_game_notify : public ::google::protobuf::Message {
 public:
  ed_role_leave_game_notify();
  virtual ~ed_role_leave_game_notify();

  ed_role_leave_game_notify(const ed_role_leave_game_notify& from);

  inline ed_role_leave_game_notify& operator=(const ed_role_leave_game_notify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ed_role_leave_game_notify& default_instance();

  void Swap(ed_role_leave_game_notify* other);

  // implements Message ----------------------------------------------

  ed_role_leave_game_notify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ed_role_leave_game_notify& from);
  void MergeFrom(const ed_role_leave_game_notify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:proto.server.ed_role_leave_game_notify)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static ed_role_leave_game_notify* default_instance_;
};
// -------------------------------------------------------------------

class ag_unreg_user_scene_notify : public ::google::protobuf::Message {
 public:
  ag_unreg_user_scene_notify();
  virtual ~ag_unreg_user_scene_notify();

  ag_unreg_user_scene_notify(const ag_unreg_user_scene_notify& from);

  inline ag_unreg_user_scene_notify& operator=(const ag_unreg_user_scene_notify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ag_unreg_user_scene_notify& default_instance();

  void Swap(ag_unreg_user_scene_notify* other);

  // implements Message ----------------------------------------------

  ag_unreg_user_scene_notify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ag_unreg_user_scene_notify& from);
  void MergeFrom(const ag_unreg_user_scene_notify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::uint64 uid() const;
  inline void set_uid(::google::protobuf::uint64 value);

  // optional uint32 unreg_code = 2;
  inline bool has_unreg_code() const;
  inline void clear_unreg_code();
  static const int kUnregCodeFieldNumber = 2;
  inline ::google::protobuf::uint32 unreg_code() const;
  inline void set_unreg_code(::google::protobuf::uint32 value);

  // optional uint32 kick_reason = 3;
  inline bool has_kick_reason() const;
  inline void clear_kick_reason();
  static const int kKickReasonFieldNumber = 3;
  inline ::google::protobuf::uint32 kick_reason() const;
  inline void set_kick_reason(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.server.ag_unreg_user_scene_notify)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_unreg_code();
  inline void clear_has_unreg_code();
  inline void set_has_kick_reason();
  inline void clear_has_kick_reason();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 uid_;
  ::google::protobuf::uint32 unreg_code_;
  ::google::protobuf::uint32 kick_reason_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static ag_unreg_user_scene_notify* default_instance_;
};
// -------------------------------------------------------------------

class ga_unreg_user_scene_notify : public ::google::protobuf::Message {
 public:
  ga_unreg_user_scene_notify();
  virtual ~ga_unreg_user_scene_notify();

  ga_unreg_user_scene_notify(const ga_unreg_user_scene_notify& from);

  inline ga_unreg_user_scene_notify& operator=(const ga_unreg_user_scene_notify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ga_unreg_user_scene_notify& default_instance();

  void Swap(ga_unreg_user_scene_notify* other);

  // implements Message ----------------------------------------------

  ga_unreg_user_scene_notify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ga_unreg_user_scene_notify& from);
  void MergeFrom(const ga_unreg_user_scene_notify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::uint64 uid() const;
  inline void set_uid(::google::protobuf::uint64 value);

  // optional uint32 unreg_code = 2;
  inline bool has_unreg_code() const;
  inline void clear_unreg_code();
  static const int kUnregCodeFieldNumber = 2;
  inline ::google::protobuf::uint32 unreg_code() const;
  inline void set_unreg_code(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.server.ga_unreg_user_scene_notify)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_unreg_code();
  inline void clear_has_unreg_code();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 uid_;
  ::google::protobuf::uint32 unreg_code_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static ga_unreg_user_scene_notify* default_instance_;
};
// -------------------------------------------------------------------

class ga_reg_user_success_notify : public ::google::protobuf::Message {
 public:
  ga_reg_user_success_notify();
  virtual ~ga_reg_user_success_notify();

  ga_reg_user_success_notify(const ga_reg_user_success_notify& from);

  inline ga_reg_user_success_notify& operator=(const ga_reg_user_success_notify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ga_reg_user_success_notify& default_instance();

  void Swap(ga_reg_user_success_notify* other);

  // implements Message ----------------------------------------------

  ga_reg_user_success_notify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ga_reg_user_success_notify& from);
  void MergeFrom(const ga_reg_user_success_notify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::uint32 uid() const;
  inline void set_uid(::google::protobuf::uint32 value);

  // optional uint32 gate_id = 2;
  inline bool has_gate_id() const;
  inline void clear_gate_id();
  static const int kGateIdFieldNumber = 2;
  inline ::google::protobuf::uint32 gate_id() const;
  inline void set_gate_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.server.ga_reg_user_success_notify)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_gate_id();
  inline void clear_has_gate_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 uid_;
  ::google::protobuf::uint32 gate_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static ga_reg_user_success_notify* default_instance_;
};
// -------------------------------------------------------------------

class ga_user_cross_server_notify : public ::google::protobuf::Message {
 public:
  ga_user_cross_server_notify();
  virtual ~ga_user_cross_server_notify();

  ga_user_cross_server_notify(const ga_user_cross_server_notify& from);

  inline ga_user_cross_server_notify& operator=(const ga_user_cross_server_notify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ga_user_cross_server_notify& default_instance();

  void Swap(ga_user_cross_server_notify* other);

  // implements Message ----------------------------------------------

  ga_user_cross_server_notify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ga_user_cross_server_notify& from);
  void MergeFrom(const ga_user_cross_server_notify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .proto.server.cross_server_data data = 1;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 1;
  inline const ::proto::server::cross_server_data& data() const;
  inline ::proto::server::cross_server_data* mutable_data();
  inline ::proto::server::cross_server_data* release_data();
  inline void set_allocated_data(::proto::server::cross_server_data* data);

  // @@protoc_insertion_point(class_scope:proto.server.ga_user_cross_server_notify)
 private:
  inline void set_has_data();
  inline void clear_has_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::proto::server::cross_server_data* data_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static ga_user_cross_server_notify* default_instance_;
};
// -------------------------------------------------------------------

class ge_city_trade_add_prosperity_value_notify : public ::google::protobuf::Message {
 public:
  ge_city_trade_add_prosperity_value_notify();
  virtual ~ge_city_trade_add_prosperity_value_notify();

  ge_city_trade_add_prosperity_value_notify(const ge_city_trade_add_prosperity_value_notify& from);

  inline ge_city_trade_add_prosperity_value_notify& operator=(const ge_city_trade_add_prosperity_value_notify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ge_city_trade_add_prosperity_value_notify& default_instance();

  void Swap(ge_city_trade_add_prosperity_value_notify* other);

  // implements Message ----------------------------------------------

  ge_city_trade_add_prosperity_value_notify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ge_city_trade_add_prosperity_value_notify& from);
  void MergeFrom(const ge_city_trade_add_prosperity_value_notify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 city_id = 1;
  inline bool has_city_id() const;
  inline void clear_city_id();
  static const int kCityIdFieldNumber = 1;
  inline ::google::protobuf::uint32 city_id() const;
  inline void set_city_id(::google::protobuf::uint32 value);

  // optional uint32 add_prosperity_value = 2;
  inline bool has_add_prosperity_value() const;
  inline void clear_add_prosperity_value();
  static const int kAddProsperityValueFieldNumber = 2;
  inline ::google::protobuf::uint32 add_prosperity_value() const;
  inline void set_add_prosperity_value(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.server.ge_city_trade_add_prosperity_value_notify)
 private:
  inline void set_has_city_id();
  inline void clear_has_city_id();
  inline void set_has_add_prosperity_value();
  inline void clear_has_add_prosperity_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 city_id_;
  ::google::protobuf::uint32 add_prosperity_value_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static ge_city_trade_add_prosperity_value_notify* default_instance_;
};
// -------------------------------------------------------------------

class eg_city_base_info_notify : public ::google::protobuf::Message {
 public:
  eg_city_base_info_notify();
  virtual ~eg_city_base_info_notify();

  eg_city_base_info_notify(const eg_city_base_info_notify& from);

  inline eg_city_base_info_notify& operator=(const eg_city_base_info_notify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const eg_city_base_info_notify& default_instance();

  void Swap(eg_city_base_info_notify* other);

  // implements Message ----------------------------------------------

  eg_city_base_info_notify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const eg_city_base_info_notify& from);
  void MergeFrom(const eg_city_base_info_notify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .proto.common.city_base_info city_info = 1;
  inline bool has_city_info() const;
  inline void clear_city_info();
  static const int kCityInfoFieldNumber = 1;
  inline const ::proto::common::city_base_info& city_info() const;
  inline ::proto::common::city_base_info* mutable_city_info();
  inline ::proto::common::city_base_info* release_city_info();
  inline void set_allocated_city_info(::proto::common::city_base_info* city_info);

  // @@protoc_insertion_point(class_scope:proto.server.eg_city_base_info_notify)
 private:
  inline void set_has_city_info();
  inline void clear_has_city_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::proto::common::city_base_info* city_info_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static eg_city_base_info_notify* default_instance_;
};
// -------------------------------------------------------------------

class ge_get_city_list_request : public ::google::protobuf::Message {
 public:
  ge_get_city_list_request();
  virtual ~ge_get_city_list_request();

  ge_get_city_list_request(const ge_get_city_list_request& from);

  inline ge_get_city_list_request& operator=(const ge_get_city_list_request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ge_get_city_list_request& default_instance();

  void Swap(ge_get_city_list_request* other);

  // implements Message ----------------------------------------------

  ge_get_city_list_request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ge_get_city_list_request& from);
  void MergeFrom(const ge_get_city_list_request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:proto.server.ge_get_city_list_request)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static ge_get_city_list_request* default_instance_;
};
// -------------------------------------------------------------------

class eg_get_city_list_reply : public ::google::protobuf::Message {
 public:
  eg_get_city_list_reply();
  virtual ~eg_get_city_list_reply();

  eg_get_city_list_reply(const eg_get_city_list_reply& from);

  inline eg_get_city_list_reply& operator=(const eg_get_city_list_reply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const eg_get_city_list_reply& default_instance();

  void Swap(eg_get_city_list_reply* other);

  // implements Message ----------------------------------------------

  eg_get_city_list_reply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const eg_get_city_list_reply& from);
  void MergeFrom(const eg_get_city_list_reply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto.common.city_base_info city_list = 1;
  inline int city_list_size() const;
  inline void clear_city_list();
  static const int kCityListFieldNumber = 1;
  inline const ::proto::common::city_base_info& city_list(int index) const;
  inline ::proto::common::city_base_info* mutable_city_list(int index);
  inline ::proto::common::city_base_info* add_city_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto::common::city_base_info >&
      city_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto::common::city_base_info >*
      mutable_city_list();

  // @@protoc_insertion_point(class_scope:proto.server.eg_get_city_list_reply)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto::common::city_base_info > city_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static eg_get_city_list_reply* default_instance_;
};
// -------------------------------------------------------------------

class eh_test_request : public ::google::protobuf::Message {
 public:
  eh_test_request();
  virtual ~eh_test_request();

  eh_test_request(const eh_test_request& from);

  inline eh_test_request& operator=(const eh_test_request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const eh_test_request& default_instance();

  void Swap(eh_test_request* other);

  // implements Message ----------------------------------------------

  eh_test_request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const eh_test_request& from);
  void MergeFrom(const eh_test_request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:proto.server.eh_test_request)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static eh_test_request* default_instance_;
};
// -------------------------------------------------------------------

class he_test_reply : public ::google::protobuf::Message {
 public:
  he_test_reply();
  virtual ~he_test_reply();

  he_test_reply(const he_test_reply& from);

  inline he_test_reply& operator=(const he_test_reply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const he_test_reply& default_instance();

  void Swap(he_test_reply* other);

  // implements Message ----------------------------------------------

  he_test_reply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const he_test_reply& from);
  void MergeFrom(const he_test_reply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:proto.server.he_test_reply)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static he_test_reply* default_instance_;
};
// -------------------------------------------------------------------

class ge_update_rank_notify : public ::google::protobuf::Message {
 public:
  ge_update_rank_notify();
  virtual ~ge_update_rank_notify();

  ge_update_rank_notify(const ge_update_rank_notify& from);

  inline ge_update_rank_notify& operator=(const ge_update_rank_notify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ge_update_rank_notify& default_instance();

  void Swap(ge_update_rank_notify* other);

  // implements Message ----------------------------------------------

  ge_update_rank_notify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ge_update_rank_notify& from);
  void MergeFrom(const ge_update_rank_notify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 rank_type = 1;
  inline bool has_rank_type() const;
  inline void clear_rank_type();
  static const int kRankTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 rank_type() const;
  inline void set_rank_type(::google::protobuf::uint32 value);

  // optional uint32 key = 2;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 2;
  inline ::google::protobuf::uint32 key() const;
  inline void set_key(::google::protobuf::uint32 value);

  // optional uint64 owner = 3;
  inline bool has_owner() const;
  inline void clear_owner();
  static const int kOwnerFieldNumber = 3;
  inline ::google::protobuf::uint64 owner() const;
  inline void set_owner(::google::protobuf::uint64 value);

  // optional .proto.common.rank_data_extra extra = 4;
  inline bool has_extra() const;
  inline void clear_extra();
  static const int kExtraFieldNumber = 4;
  inline const ::proto::common::rank_data_extra& extra() const;
  inline ::proto::common::rank_data_extra* mutable_extra();
  inline ::proto::common::rank_data_extra* release_extra();
  inline void set_allocated_extra(::proto::common::rank_data_extra* extra);

  // @@protoc_insertion_point(class_scope:proto.server.ge_update_rank_notify)
 private:
  inline void set_has_rank_type();
  inline void clear_has_rank_type();
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_owner();
  inline void clear_has_owner();
  inline void set_has_extra();
  inline void clear_has_extra();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 rank_type_;
  ::google::protobuf::uint32 key_;
  ::google::protobuf::uint64 owner_;
  ::proto::common::rank_data_extra* extra_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static ge_update_rank_notify* default_instance_;
};
// -------------------------------------------------------------------

class ge_create_family_request : public ::google::protobuf::Message {
 public:
  ge_create_family_request();
  virtual ~ge_create_family_request();

  ge_create_family_request(const ge_create_family_request& from);

  inline ge_create_family_request& operator=(const ge_create_family_request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ge_create_family_request& default_instance();

  void Swap(ge_create_family_request* other);

  // implements Message ----------------------------------------------

  ge_create_family_request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ge_create_family_request& from);
  void MergeFrom(const ge_create_family_request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional string declaration = 2;
  inline bool has_declaration() const;
  inline void clear_declaration();
  static const int kDeclarationFieldNumber = 2;
  inline const ::std::string& declaration() const;
  inline void set_declaration(const ::std::string& value);
  inline void set_declaration(const char* value);
  inline void set_declaration(const char* value, size_t size);
  inline ::std::string* mutable_declaration();
  inline ::std::string* release_declaration();
  inline void set_allocated_declaration(::std::string* declaration);

  // @@protoc_insertion_point(class_scope:proto.server.ge_create_family_request)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_declaration();
  inline void clear_has_declaration();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::std::string* declaration_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static ge_create_family_request* default_instance_;
};
// -------------------------------------------------------------------

class eg_update_family_info_notify : public ::google::protobuf::Message {
 public:
  eg_update_family_info_notify();
  virtual ~eg_update_family_info_notify();

  eg_update_family_info_notify(const eg_update_family_info_notify& from);

  inline eg_update_family_info_notify& operator=(const eg_update_family_info_notify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const eg_update_family_info_notify& default_instance();

  void Swap(eg_update_family_info_notify* other);

  // implements Message ----------------------------------------------

  eg_update_family_info_notify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const eg_update_family_info_notify& from);
  void MergeFrom(const eg_update_family_info_notify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint64 id() const;
  inline void set_id(::google::protobuf::uint64 value);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional uint32 officer = 3;
  inline bool has_officer() const;
  inline void clear_officer();
  static const int kOfficerFieldNumber = 3;
  inline ::google::protobuf::uint32 officer() const;
  inline void set_officer(::google::protobuf::uint32 value);

  // optional uint32 country_id = 4;
  inline bool has_country_id() const;
  inline void clear_country_id();
  static const int kCountryIdFieldNumber = 4;
  inline ::google::protobuf::uint32 country_id() const;
  inline void set_country_id(::google::protobuf::uint32 value);

  // optional uint32 family_lv = 5;
  inline bool has_family_lv() const;
  inline void clear_family_lv();
  static const int kFamilyLvFieldNumber = 5;
  inline ::google::protobuf::uint32 family_lv() const;
  inline void set_family_lv(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.server.eg_update_family_info_notify)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_officer();
  inline void clear_has_officer();
  inline void set_has_country_id();
  inline void clear_has_country_id();
  inline void set_has_family_lv();
  inline void clear_has_family_lv();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 id_;
  ::std::string* name_;
  ::google::protobuf::uint32 officer_;
  ::google::protobuf::uint32 country_id_;
  ::google::protobuf::uint32 family_lv_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static eg_update_family_info_notify* default_instance_;
};
// -------------------------------------------------------------------

class eg_create_family_reply : public ::google::protobuf::Message {
 public:
  eg_create_family_reply();
  virtual ~eg_create_family_reply();

  eg_create_family_reply(const eg_create_family_reply& from);

  inline eg_create_family_reply& operator=(const eg_create_family_reply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const eg_create_family_reply& default_instance();

  void Swap(eg_create_family_reply* other);

  // implements Message ----------------------------------------------

  eg_create_family_reply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const eg_create_family_reply& from);
  void MergeFrom(const eg_create_family_reply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 reply_code = 1;
  inline bool has_reply_code() const;
  inline void clear_reply_code();
  static const int kReplyCodeFieldNumber = 1;
  inline ::google::protobuf::uint32 reply_code() const;
  inline void set_reply_code(::google::protobuf::uint32 value);

  // optional .proto.server.eg_update_family_info_notify info = 2;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 2;
  inline const ::proto::server::eg_update_family_info_notify& info() const;
  inline ::proto::server::eg_update_family_info_notify* mutable_info();
  inline ::proto::server::eg_update_family_info_notify* release_info();
  inline void set_allocated_info(::proto::server::eg_update_family_info_notify* info);

  // @@protoc_insertion_point(class_scope:proto.server.eg_create_family_reply)
 private:
  inline void set_has_reply_code();
  inline void clear_has_reply_code();
  inline void set_has_info();
  inline void clear_has_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::proto::server::eg_update_family_info_notify* info_;
  ::google::protobuf::uint32 reply_code_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static eg_create_family_reply* default_instance_;
};
// -------------------------------------------------------------------

class ge_impeach_family_general_request : public ::google::protobuf::Message {
 public:
  ge_impeach_family_general_request();
  virtual ~ge_impeach_family_general_request();

  ge_impeach_family_general_request(const ge_impeach_family_general_request& from);

  inline ge_impeach_family_general_request& operator=(const ge_impeach_family_general_request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ge_impeach_family_general_request& default_instance();

  void Swap(ge_impeach_family_general_request* other);

  // implements Message ----------------------------------------------

  ge_impeach_family_general_request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ge_impeach_family_general_request& from);
  void MergeFrom(const ge_impeach_family_general_request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:proto.server.ge_impeach_family_general_request)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static ge_impeach_family_general_request* default_instance_;
};
// -------------------------------------------------------------------

class eg_impeach_family_general_reply : public ::google::protobuf::Message {
 public:
  eg_impeach_family_general_reply();
  virtual ~eg_impeach_family_general_reply();

  eg_impeach_family_general_reply(const eg_impeach_family_general_reply& from);

  inline eg_impeach_family_general_reply& operator=(const eg_impeach_family_general_reply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const eg_impeach_family_general_reply& default_instance();

  void Swap(eg_impeach_family_general_reply* other);

  // implements Message ----------------------------------------------

  eg_impeach_family_general_reply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const eg_impeach_family_general_reply& from);
  void MergeFrom(const eg_impeach_family_general_reply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 reply_code = 1;
  inline bool has_reply_code() const;
  inline void clear_reply_code();
  static const int kReplyCodeFieldNumber = 1;
  inline ::google::protobuf::uint32 reply_code() const;
  inline void set_reply_code(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.server.eg_impeach_family_general_reply)
 private:
  inline void set_has_reply_code();
  inline void clear_has_reply_code();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 reply_code_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static eg_impeach_family_general_reply* default_instance_;
};
// -------------------------------------------------------------------

class eg_notify_game_impeach_result : public ::google::protobuf::Message {
 public:
  eg_notify_game_impeach_result();
  virtual ~eg_notify_game_impeach_result();

  eg_notify_game_impeach_result(const eg_notify_game_impeach_result& from);

  inline eg_notify_game_impeach_result& operator=(const eg_notify_game_impeach_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const eg_notify_game_impeach_result& default_instance();

  void Swap(eg_notify_game_impeach_result* other);

  // implements Message ----------------------------------------------

  eg_notify_game_impeach_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const eg_notify_game_impeach_result& from);
  void MergeFrom(const eg_notify_game_impeach_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool is_succeed = 1;
  inline bool has_is_succeed() const;
  inline void clear_is_succeed();
  static const int kIsSucceedFieldNumber = 1;
  inline bool is_succeed() const;
  inline void set_is_succeed(bool value);

  // optional uint32 money_return = 2;
  inline bool has_money_return() const;
  inline void clear_money_return();
  static const int kMoneyReturnFieldNumber = 2;
  inline ::google::protobuf::uint32 money_return() const;
  inline void set_money_return(::google::protobuf::uint32 value);

  // optional uint64 role_id = 3;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 3;
  inline ::google::protobuf::uint64 role_id() const;
  inline void set_role_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:proto.server.eg_notify_game_impeach_result)
 private:
  inline void set_has_is_succeed();
  inline void clear_has_is_succeed();
  inline void set_has_money_return();
  inline void clear_has_money_return();
  inline void set_has_role_id();
  inline void clear_has_role_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  bool is_succeed_;
  ::google::protobuf::uint32 money_return_;
  ::google::protobuf::uint64 role_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static eg_notify_game_impeach_result* default_instance_;
};
// -------------------------------------------------------------------

class family_war_dungeon_info : public ::google::protobuf::Message {
 public:
  family_war_dungeon_info();
  virtual ~family_war_dungeon_info();

  family_war_dungeon_info(const family_war_dungeon_info& from);

  inline family_war_dungeon_info& operator=(const family_war_dungeon_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const family_war_dungeon_info& default_instance();

  void Swap(family_war_dungeon_info* other);

  // implements Message ----------------------------------------------

  family_war_dungeon_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const family_war_dungeon_info& from);
  void MergeFrom(const family_war_dungeon_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 family_id = 1;
  inline bool has_family_id() const;
  inline void clear_family_id();
  static const int kFamilyIdFieldNumber = 1;
  inline ::google::protobuf::uint64 family_id() const;
  inline void set_family_id(::google::protobuf::uint64 value);

  // optional string family_name = 2;
  inline bool has_family_name() const;
  inline void clear_family_name();
  static const int kFamilyNameFieldNumber = 2;
  inline const ::std::string& family_name() const;
  inline void set_family_name(const ::std::string& value);
  inline void set_family_name(const char* value);
  inline void set_family_name(const char* value, size_t size);
  inline ::std::string* mutable_family_name();
  inline ::std::string* release_family_name();
  inline void set_allocated_family_name(::std::string* family_name);

  // @@protoc_insertion_point(class_scope:proto.server.family_war_dungeon_info)
 private:
  inline void set_has_family_id();
  inline void clear_has_family_id();
  inline void set_has_family_name();
  inline void clear_has_family_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 family_id_;
  ::std::string* family_name_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static family_war_dungeon_info* default_instance_;
};
// -------------------------------------------------------------------

class family_war_dungeon_data : public ::google::protobuf::Message {
 public:
  family_war_dungeon_data();
  virtual ~family_war_dungeon_data();

  family_war_dungeon_data(const family_war_dungeon_data& from);

  inline family_war_dungeon_data& operator=(const family_war_dungeon_data& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const family_war_dungeon_data& default_instance();

  void Swap(family_war_dungeon_data* other);

  // implements Message ----------------------------------------------

  family_war_dungeon_data* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const family_war_dungeon_data& from);
  void MergeFrom(const family_war_dungeon_data& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // optional .proto.server.family_war_dungeon_info left_family = 2;
  inline bool has_left_family() const;
  inline void clear_left_family();
  static const int kLeftFamilyFieldNumber = 2;
  inline const ::proto::server::family_war_dungeon_info& left_family() const;
  inline ::proto::server::family_war_dungeon_info* mutable_left_family();
  inline ::proto::server::family_war_dungeon_info* release_left_family();
  inline void set_allocated_left_family(::proto::server::family_war_dungeon_info* left_family);

  // optional .proto.server.family_war_dungeon_info right_family = 3;
  inline bool has_right_family() const;
  inline void clear_right_family();
  static const int kRightFamilyFieldNumber = 3;
  inline const ::proto::server::family_war_dungeon_info& right_family() const;
  inline ::proto::server::family_war_dungeon_info* mutable_right_family();
  inline ::proto::server::family_war_dungeon_info* release_right_family();
  inline void set_allocated_right_family(::proto::server::family_war_dungeon_info* right_family);

  // @@protoc_insertion_point(class_scope:proto.server.family_war_dungeon_data)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_left_family();
  inline void clear_has_left_family();
  inline void set_has_right_family();
  inline void clear_has_right_family();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::proto::server::family_war_dungeon_info* left_family_;
  ::proto::server::family_war_dungeon_info* right_family_;
  ::google::protobuf::uint32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static family_war_dungeon_data* default_instance_;
};
// -------------------------------------------------------------------

class family_war_dungeon_back : public ::google::protobuf::Message {
 public:
  family_war_dungeon_back();
  virtual ~family_war_dungeon_back();

  family_war_dungeon_back(const family_war_dungeon_back& from);

  inline family_war_dungeon_back& operator=(const family_war_dungeon_back& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const family_war_dungeon_back& default_instance();

  void Swap(family_war_dungeon_back* other);

  // implements Message ----------------------------------------------

  family_war_dungeon_back* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const family_war_dungeon_back& from);
  void MergeFrom(const family_war_dungeon_back& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // optional .proto.server.game_scene_reg_info info = 2;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 2;
  inline const ::proto::server::game_scene_reg_info& info() const;
  inline ::proto::server::game_scene_reg_info* mutable_info();
  inline ::proto::server::game_scene_reg_info* release_info();
  inline void set_allocated_info(::proto::server::game_scene_reg_info* info);

  // @@protoc_insertion_point(class_scope:proto.server.family_war_dungeon_back)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_info();
  inline void clear_has_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::proto::server::game_scene_reg_info* info_;
  ::google::protobuf::uint32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static family_war_dungeon_back* default_instance_;
};
// -------------------------------------------------------------------

class eg_prepare_family_war_request : public ::google::protobuf::Message {
 public:
  eg_prepare_family_war_request();
  virtual ~eg_prepare_family_war_request();

  eg_prepare_family_war_request(const eg_prepare_family_war_request& from);

  inline eg_prepare_family_war_request& operator=(const eg_prepare_family_war_request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const eg_prepare_family_war_request& default_instance();

  void Swap(eg_prepare_family_war_request* other);

  // implements Message ----------------------------------------------

  eg_prepare_family_war_request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const eg_prepare_family_war_request& from);
  void MergeFrom(const eg_prepare_family_war_request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 start_time = 1;
  inline bool has_start_time() const;
  inline void clear_start_time();
  static const int kStartTimeFieldNumber = 1;
  inline ::google::protobuf::uint32 start_time() const;
  inline void set_start_time(::google::protobuf::uint32 value);

  // repeated .proto.server.family_war_dungeon_data family_war_data = 2;
  inline int family_war_data_size() const;
  inline void clear_family_war_data();
  static const int kFamilyWarDataFieldNumber = 2;
  inline const ::proto::server::family_war_dungeon_data& family_war_data(int index) const;
  inline ::proto::server::family_war_dungeon_data* mutable_family_war_data(int index);
  inline ::proto::server::family_war_dungeon_data* add_family_war_data();
  inline const ::google::protobuf::RepeatedPtrField< ::proto::server::family_war_dungeon_data >&
      family_war_data() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto::server::family_war_dungeon_data >*
      mutable_family_war_data();

  // @@protoc_insertion_point(class_scope:proto.server.eg_prepare_family_war_request)
 private:
  inline void set_has_start_time();
  inline void clear_has_start_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto::server::family_war_dungeon_data > family_war_data_;
  ::google::protobuf::uint32 start_time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static eg_prepare_family_war_request* default_instance_;
};
// -------------------------------------------------------------------

class ge_prepare_family_war_reply : public ::google::protobuf::Message {
 public:
  ge_prepare_family_war_reply();
  virtual ~ge_prepare_family_war_reply();

  ge_prepare_family_war_reply(const ge_prepare_family_war_reply& from);

  inline ge_prepare_family_war_reply& operator=(const ge_prepare_family_war_reply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ge_prepare_family_war_reply& default_instance();

  void Swap(ge_prepare_family_war_reply* other);

  // implements Message ----------------------------------------------

  ge_prepare_family_war_reply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ge_prepare_family_war_reply& from);
  void MergeFrom(const ge_prepare_family_war_reply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto.server.family_war_dungeon_back dungeons = 1;
  inline int dungeons_size() const;
  inline void clear_dungeons();
  static const int kDungeonsFieldNumber = 1;
  inline const ::proto::server::family_war_dungeon_back& dungeons(int index) const;
  inline ::proto::server::family_war_dungeon_back* mutable_dungeons(int index);
  inline ::proto::server::family_war_dungeon_back* add_dungeons();
  inline const ::google::protobuf::RepeatedPtrField< ::proto::server::family_war_dungeon_back >&
      dungeons() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto::server::family_war_dungeon_back >*
      mutable_dungeons();

  // @@protoc_insertion_point(class_scope:proto.server.ge_prepare_family_war_reply)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto::server::family_war_dungeon_back > dungeons_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static ge_prepare_family_war_reply* default_instance_;
};
// -------------------------------------------------------------------

class eg_family_war_start_notify : public ::google::protobuf::Message {
 public:
  eg_family_war_start_notify();
  virtual ~eg_family_war_start_notify();

  eg_family_war_start_notify(const eg_family_war_start_notify& from);

  inline eg_family_war_start_notify& operator=(const eg_family_war_start_notify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const eg_family_war_start_notify& default_instance();

  void Swap(eg_family_war_start_notify* other);

  // implements Message ----------------------------------------------

  eg_family_war_start_notify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const eg_family_war_start_notify& from);
  void MergeFrom(const eg_family_war_start_notify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 end_time = 1;
  inline bool has_end_time() const;
  inline void clear_end_time();
  static const int kEndTimeFieldNumber = 1;
  inline ::google::protobuf::uint32 end_time() const;
  inline void set_end_time(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.server.eg_family_war_start_notify)
 private:
  inline void set_has_end_time();
  inline void clear_has_end_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 end_time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static eg_family_war_start_notify* default_instance_;
};
// -------------------------------------------------------------------

class eg_family_war_end_notify : public ::google::protobuf::Message {
 public:
  eg_family_war_end_notify();
  virtual ~eg_family_war_end_notify();

  eg_family_war_end_notify(const eg_family_war_end_notify& from);

  inline eg_family_war_end_notify& operator=(const eg_family_war_end_notify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const eg_family_war_end_notify& default_instance();

  void Swap(eg_family_war_end_notify* other);

  // implements Message ----------------------------------------------

  eg_family_war_end_notify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const eg_family_war_end_notify& from);
  void MergeFrom(const eg_family_war_end_notify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:proto.server.eg_family_war_end_notify)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static eg_family_war_end_notify* default_instance_;
};
// -------------------------------------------------------------------

class eg_enter_family_war_scene_request : public ::google::protobuf::Message {
 public:
  eg_enter_family_war_scene_request();
  virtual ~eg_enter_family_war_scene_request();

  eg_enter_family_war_scene_request(const eg_enter_family_war_scene_request& from);

  inline eg_enter_family_war_scene_request& operator=(const eg_enter_family_war_scene_request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const eg_enter_family_war_scene_request& default_instance();

  void Swap(eg_enter_family_war_scene_request* other);

  // implements Message ----------------------------------------------

  eg_enter_family_war_scene_request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const eg_enter_family_war_scene_request& from);
  void MergeFrom(const eg_enter_family_war_scene_request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::uint64 uid() const;
  inline void set_uid(::google::protobuf::uint64 value);

  // optional uint64 family_dungeon_id = 2;
  inline bool has_family_dungeon_id() const;
  inline void clear_family_dungeon_id();
  static const int kFamilyDungeonIdFieldNumber = 2;
  inline ::google::protobuf::uint64 family_dungeon_id() const;
  inline void set_family_dungeon_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:proto.server.eg_enter_family_war_scene_request)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_family_dungeon_id();
  inline void clear_has_family_dungeon_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 uid_;
  ::google::protobuf::uint64 family_dungeon_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static eg_enter_family_war_scene_request* default_instance_;
};
// -------------------------------------------------------------------

class family_war_personal : public ::google::protobuf::Message {
 public:
  family_war_personal();
  virtual ~family_war_personal();

  family_war_personal(const family_war_personal& from);

  inline family_war_personal& operator=(const family_war_personal& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const family_war_personal& default_instance();

  void Swap(family_war_personal* other);

  // implements Message ----------------------------------------------

  family_war_personal* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const family_war_personal& from);
  void MergeFrom(const family_war_personal& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::uint64 uid() const;
  inline void set_uid(::google::protobuf::uint64 value);

  // optional uint64 exploit = 2;
  inline bool has_exploit() const;
  inline void clear_exploit();
  static const int kExploitFieldNumber = 2;
  inline ::google::protobuf::uint64 exploit() const;
  inline void set_exploit(::google::protobuf::uint64 value);

  // optional uint32 rank = 3;
  inline bool has_rank() const;
  inline void clear_rank();
  static const int kRankFieldNumber = 3;
  inline ::google::protobuf::uint32 rank() const;
  inline void set_rank(::google::protobuf::uint32 value);

  // optional uint32 rank_level = 4;
  inline bool has_rank_level() const;
  inline void clear_rank_level();
  static const int kRankLevelFieldNumber = 4;
  inline ::google::protobuf::uint32 rank_level() const;
  inline void set_rank_level(::google::protobuf::uint32 value);

  // optional uint32 exploit_level = 5;
  inline bool has_exploit_level() const;
  inline void clear_exploit_level();
  static const int kExploitLevelFieldNumber = 5;
  inline ::google::protobuf::uint32 exploit_level() const;
  inline void set_exploit_level(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.server.family_war_personal)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_exploit();
  inline void clear_has_exploit();
  inline void set_has_rank();
  inline void clear_has_rank();
  inline void set_has_rank_level();
  inline void clear_has_rank_level();
  inline void set_has_exploit_level();
  inline void clear_has_exploit_level();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 uid_;
  ::google::protobuf::uint64 exploit_;
  ::google::protobuf::uint32 rank_;
  ::google::protobuf::uint32 rank_level_;
  ::google::protobuf::uint32 exploit_level_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static family_war_personal* default_instance_;
};
// -------------------------------------------------------------------

class family_war_result_data : public ::google::protobuf::Message {
 public:
  family_war_result_data();
  virtual ~family_war_result_data();

  family_war_result_data(const family_war_result_data& from);

  inline family_war_result_data& operator=(const family_war_result_data& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const family_war_result_data& default_instance();

  void Swap(family_war_result_data* other);

  // implements Message ----------------------------------------------

  family_war_result_data* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const family_war_result_data& from);
  void MergeFrom(const family_war_result_data& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // optional uint64 win_family_id = 2;
  inline bool has_win_family_id() const;
  inline void clear_win_family_id();
  static const int kWinFamilyIdFieldNumber = 2;
  inline ::google::protobuf::uint64 win_family_id() const;
  inline void set_win_family_id(::google::protobuf::uint64 value);

  // optional uint32 left_family_score = 3;
  inline bool has_left_family_score() const;
  inline void clear_left_family_score();
  static const int kLeftFamilyScoreFieldNumber = 3;
  inline ::google::protobuf::uint32 left_family_score() const;
  inline void set_left_family_score(::google::protobuf::uint32 value);

  // optional uint32 right_family_score = 4;
  inline bool has_right_family_score() const;
  inline void clear_right_family_score();
  static const int kRightFamilyScoreFieldNumber = 4;
  inline ::google::protobuf::uint32 right_family_score() const;
  inline void set_right_family_score(::google::protobuf::uint32 value);

  // repeated .proto.server.family_war_personal all_roles = 5;
  inline int all_roles_size() const;
  inline void clear_all_roles();
  static const int kAllRolesFieldNumber = 5;
  inline const ::proto::server::family_war_personal& all_roles(int index) const;
  inline ::proto::server::family_war_personal* mutable_all_roles(int index);
  inline ::proto::server::family_war_personal* add_all_roles();
  inline const ::google::protobuf::RepeatedPtrField< ::proto::server::family_war_personal >&
      all_roles() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto::server::family_war_personal >*
      mutable_all_roles();

  // @@protoc_insertion_point(class_scope:proto.server.family_war_result_data)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_win_family_id();
  inline void clear_has_win_family_id();
  inline void set_has_left_family_score();
  inline void clear_has_left_family_score();
  inline void set_has_right_family_score();
  inline void clear_has_right_family_score();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 win_family_id_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 left_family_score_;
  ::google::protobuf::RepeatedPtrField< ::proto::server::family_war_personal > all_roles_;
  ::google::protobuf::uint32 right_family_score_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static family_war_result_data* default_instance_;
};
// -------------------------------------------------------------------

class ge_family_war_early_result_notify : public ::google::protobuf::Message {
 public:
  ge_family_war_early_result_notify();
  virtual ~ge_family_war_early_result_notify();

  ge_family_war_early_result_notify(const ge_family_war_early_result_notify& from);

  inline ge_family_war_early_result_notify& operator=(const ge_family_war_early_result_notify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ge_family_war_early_result_notify& default_instance();

  void Swap(ge_family_war_early_result_notify* other);

  // implements Message ----------------------------------------------

  ge_family_war_early_result_notify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ge_family_war_early_result_notify& from);
  void MergeFrom(const ge_family_war_early_result_notify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .proto.server.family_war_result_data data = 1;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 1;
  inline const ::proto::server::family_war_result_data& data() const;
  inline ::proto::server::family_war_result_data* mutable_data();
  inline ::proto::server::family_war_result_data* release_data();
  inline void set_allocated_data(::proto::server::family_war_result_data* data);

  // @@protoc_insertion_point(class_scope:proto.server.ge_family_war_early_result_notify)
 private:
  inline void set_has_data();
  inline void clear_has_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::proto::server::family_war_result_data* data_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static ge_family_war_early_result_notify* default_instance_;
};
// -------------------------------------------------------------------

class ge_family_war_result_notify : public ::google::protobuf::Message {
 public:
  ge_family_war_result_notify();
  virtual ~ge_family_war_result_notify();

  ge_family_war_result_notify(const ge_family_war_result_notify& from);

  inline ge_family_war_result_notify& operator=(const ge_family_war_result_notify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ge_family_war_result_notify& default_instance();

  void Swap(ge_family_war_result_notify* other);

  // implements Message ----------------------------------------------

  ge_family_war_result_notify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ge_family_war_result_notify& from);
  void MergeFrom(const ge_family_war_result_notify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto.server.family_war_result_data datas = 1;
  inline int datas_size() const;
  inline void clear_datas();
  static const int kDatasFieldNumber = 1;
  inline const ::proto::server::family_war_result_data& datas(int index) const;
  inline ::proto::server::family_war_result_data* mutable_datas(int index);
  inline ::proto::server::family_war_result_data* add_datas();
  inline const ::google::protobuf::RepeatedPtrField< ::proto::server::family_war_result_data >&
      datas() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto::server::family_war_result_data >*
      mutable_datas();

  // @@protoc_insertion_point(class_scope:proto.server.ge_family_war_result_notify)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto::server::family_war_result_data > datas_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static ge_family_war_result_notify* default_instance_;
};
// -------------------------------------------------------------------

class ge_family_update_glory_notify : public ::google::protobuf::Message {
 public:
  ge_family_update_glory_notify();
  virtual ~ge_family_update_glory_notify();

  ge_family_update_glory_notify(const ge_family_update_glory_notify& from);

  inline ge_family_update_glory_notify& operator=(const ge_family_update_glory_notify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ge_family_update_glory_notify& default_instance();

  void Swap(ge_family_update_glory_notify* other);

  // implements Message ----------------------------------------------

  ge_family_update_glory_notify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ge_family_update_glory_notify& from);
  void MergeFrom(const ge_family_update_glory_notify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 family_id = 1;
  inline bool has_family_id() const;
  inline void clear_family_id();
  static const int kFamilyIdFieldNumber = 1;
  inline ::google::protobuf::uint64 family_id() const;
  inline void set_family_id(::google::protobuf::uint64 value);

  // optional uint32 glory = 2;
  inline bool has_glory() const;
  inline void clear_glory();
  static const int kGloryFieldNumber = 2;
  inline ::google::protobuf::uint32 glory() const;
  inline void set_glory(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.server.ge_family_update_glory_notify)
 private:
  inline void set_has_family_id();
  inline void clear_has_family_id();
  inline void set_has_glory();
  inline void clear_has_glory();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 family_id_;
  ::google::protobuf::uint32 glory_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static ge_family_update_glory_notify* default_instance_;
};
// -------------------------------------------------------------------

class ge_family_prayer_request : public ::google::protobuf::Message {
 public:
  ge_family_prayer_request();
  virtual ~ge_family_prayer_request();

  ge_family_prayer_request(const ge_family_prayer_request& from);

  inline ge_family_prayer_request& operator=(const ge_family_prayer_request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ge_family_prayer_request& default_instance();

  void Swap(ge_family_prayer_request* other);

  // implements Message ----------------------------------------------

  ge_family_prayer_request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ge_family_prayer_request& from);
  void MergeFrom(const ge_family_prayer_request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 hero_tid = 1;
  inline bool has_hero_tid() const;
  inline void clear_hero_tid();
  static const int kHeroTidFieldNumber = 1;
  inline ::google::protobuf::uint32 hero_tid() const;
  inline void set_hero_tid(::google::protobuf::uint32 value);

  // optional uint32 hero_num = 2;
  inline bool has_hero_num() const;
  inline void clear_hero_num();
  static const int kHeroNumFieldNumber = 2;
  inline ::google::protobuf::uint32 hero_num() const;
  inline void set_hero_num(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.server.ge_family_prayer_request)
 private:
  inline void set_has_hero_tid();
  inline void clear_has_hero_tid();
  inline void set_has_hero_num();
  inline void clear_has_hero_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 hero_tid_;
  ::google::protobuf::uint32 hero_num_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static ge_family_prayer_request* default_instance_;
};
// -------------------------------------------------------------------

class ge_family_prayer_gift_request : public ::google::protobuf::Message {
 public:
  ge_family_prayer_gift_request();
  virtual ~ge_family_prayer_gift_request();

  ge_family_prayer_gift_request(const ge_family_prayer_gift_request& from);

  inline ge_family_prayer_gift_request& operator=(const ge_family_prayer_gift_request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ge_family_prayer_gift_request& default_instance();

  void Swap(ge_family_prayer_gift_request* other);

  // implements Message ----------------------------------------------

  ge_family_prayer_gift_request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ge_family_prayer_gift_request& from);
  void MergeFrom(const ge_family_prayer_gift_request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 role_id = 1;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 1;
  inline ::google::protobuf::uint64 role_id() const;
  inline void set_role_id(::google::protobuf::uint64 value);

  // optional uint32 hero_tid = 2;
  inline bool has_hero_tid() const;
  inline void clear_hero_tid();
  static const int kHeroTidFieldNumber = 2;
  inline ::google::protobuf::uint32 hero_tid() const;
  inline void set_hero_tid(::google::protobuf::uint32 value);

  // optional uint32 hero_num = 3;
  inline bool has_hero_num() const;
  inline void clear_hero_num();
  static const int kHeroNumFieldNumber = 3;
  inline ::google::protobuf::uint32 hero_num() const;
  inline void set_hero_num(::google::protobuf::uint32 value);

  // optional uint32 hero_rarity = 4;
  inline bool has_hero_rarity() const;
  inline void clear_hero_rarity();
  static const int kHeroRarityFieldNumber = 4;
  inline ::google::protobuf::uint32 hero_rarity() const;
  inline void set_hero_rarity(::google::protobuf::uint32 value);

  // optional uint32 hero_material_id = 5;
  inline bool has_hero_material_id() const;
  inline void clear_hero_material_id();
  static const int kHeroMaterialIdFieldNumber = 5;
  inline ::google::protobuf::uint32 hero_material_id() const;
  inline void set_hero_material_id(::google::protobuf::uint32 value);

  // optional .proto.common.role_change_data change_data = 6;
  inline bool has_change_data() const;
  inline void clear_change_data();
  static const int kChangeDataFieldNumber = 6;
  inline const ::proto::common::role_change_data& change_data() const;
  inline ::proto::common::role_change_data* mutable_change_data();
  inline ::proto::common::role_change_data* release_change_data();
  inline void set_allocated_change_data(::proto::common::role_change_data* change_data);

  // @@protoc_insertion_point(class_scope:proto.server.ge_family_prayer_gift_request)
 private:
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_hero_tid();
  inline void clear_has_hero_tid();
  inline void set_has_hero_num();
  inline void clear_has_hero_num();
  inline void set_has_hero_rarity();
  inline void clear_has_hero_rarity();
  inline void set_has_hero_material_id();
  inline void clear_has_hero_material_id();
  inline void set_has_change_data();
  inline void clear_has_change_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 role_id_;
  ::google::protobuf::uint32 hero_tid_;
  ::google::protobuf::uint32 hero_num_;
  ::google::protobuf::uint32 hero_rarity_;
  ::google::protobuf::uint32 hero_material_id_;
  ::proto::common::role_change_data* change_data_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static ge_family_prayer_gift_request* default_instance_;
};
// -------------------------------------------------------------------

class eg_family_prayer_gift_failed_notify : public ::google::protobuf::Message {
 public:
  eg_family_prayer_gift_failed_notify();
  virtual ~eg_family_prayer_gift_failed_notify();

  eg_family_prayer_gift_failed_notify(const eg_family_prayer_gift_failed_notify& from);

  inline eg_family_prayer_gift_failed_notify& operator=(const eg_family_prayer_gift_failed_notify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const eg_family_prayer_gift_failed_notify& default_instance();

  void Swap(eg_family_prayer_gift_failed_notify* other);

  // implements Message ----------------------------------------------

  eg_family_prayer_gift_failed_notify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const eg_family_prayer_gift_failed_notify& from);
  void MergeFrom(const eg_family_prayer_gift_failed_notify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 reply_code = 1;
  inline bool has_reply_code() const;
  inline void clear_reply_code();
  static const int kReplyCodeFieldNumber = 1;
  inline ::google::protobuf::uint32 reply_code() const;
  inline void set_reply_code(::google::protobuf::uint32 value);

  // optional uint64 role_id = 2;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 2;
  inline ::google::protobuf::uint64 role_id() const;
  inline void set_role_id(::google::protobuf::uint64 value);

  // optional uint32 hero_tid = 3;
  inline bool has_hero_tid() const;
  inline void clear_hero_tid();
  static const int kHeroTidFieldNumber = 3;
  inline ::google::protobuf::uint32 hero_tid() const;
  inline void set_hero_tid(::google::protobuf::uint32 value);

  // optional uint32 hero_num = 4;
  inline bool has_hero_num() const;
  inline void clear_hero_num();
  static const int kHeroNumFieldNumber = 4;
  inline ::google::protobuf::uint32 hero_num() const;
  inline void set_hero_num(::google::protobuf::uint32 value);

  // optional uint32 hero_material_id = 5;
  inline bool has_hero_material_id() const;
  inline void clear_hero_material_id();
  static const int kHeroMaterialIdFieldNumber = 5;
  inline ::google::protobuf::uint32 hero_material_id() const;
  inline void set_hero_material_id(::google::protobuf::uint32 value);

  // optional uint32 rwd_item = 6;
  inline bool has_rwd_item() const;
  inline void clear_rwd_item();
  static const int kRwdItemFieldNumber = 6;
  inline ::google::protobuf::uint32 rwd_item() const;
  inline void set_rwd_item(::google::protobuf::uint32 value);

  // optional .proto.common.role_change_data change_data = 7;
  inline bool has_change_data() const;
  inline void clear_change_data();
  static const int kChangeDataFieldNumber = 7;
  inline const ::proto::common::role_change_data& change_data() const;
  inline ::proto::common::role_change_data* mutable_change_data();
  inline ::proto::common::role_change_data* release_change_data();
  inline void set_allocated_change_data(::proto::common::role_change_data* change_data);

  // @@protoc_insertion_point(class_scope:proto.server.eg_family_prayer_gift_failed_notify)
 private:
  inline void set_has_reply_code();
  inline void clear_has_reply_code();
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_hero_tid();
  inline void clear_has_hero_tid();
  inline void set_has_hero_num();
  inline void clear_has_hero_num();
  inline void set_has_hero_material_id();
  inline void clear_has_hero_material_id();
  inline void set_has_rwd_item();
  inline void clear_has_rwd_item();
  inline void set_has_change_data();
  inline void clear_has_change_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 role_id_;
  ::google::protobuf::uint32 reply_code_;
  ::google::protobuf::uint32 hero_tid_;
  ::google::protobuf::uint32 hero_num_;
  ::google::protobuf::uint32 hero_material_id_;
  ::proto::common::role_change_data* change_data_;
  ::google::protobuf::uint32 rwd_item_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static eg_family_prayer_gift_failed_notify* default_instance_;
};
// -------------------------------------------------------------------

class eg_family_country_change_notify : public ::google::protobuf::Message {
 public:
  eg_family_country_change_notify();
  virtual ~eg_family_country_change_notify();

  eg_family_country_change_notify(const eg_family_country_change_notify& from);

  inline eg_family_country_change_notify& operator=(const eg_family_country_change_notify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const eg_family_country_change_notify& default_instance();

  void Swap(eg_family_country_change_notify* other);

  // implements Message ----------------------------------------------

  eg_family_country_change_notify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const eg_family_country_change_notify& from);
  void MergeFrom(const eg_family_country_change_notify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint64 role_list = 1;
  inline int role_list_size() const;
  inline void clear_role_list();
  static const int kRoleListFieldNumber = 1;
  inline ::google::protobuf::uint64 role_list(int index) const;
  inline void set_role_list(int index, ::google::protobuf::uint64 value);
  inline void add_role_list(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      role_list() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_role_list();

  // optional uint32 country_id = 2;
  inline bool has_country_id() const;
  inline void clear_country_id();
  static const int kCountryIdFieldNumber = 2;
  inline ::google::protobuf::uint32 country_id() const;
  inline void set_country_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.server.eg_family_country_change_notify)
 private:
  inline void set_has_country_id();
  inline void clear_has_country_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > role_list_;
  ::google::protobuf::uint32 country_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static eg_family_country_change_notify* default_instance_;
};
// -------------------------------------------------------------------

class eg_family_level_change_notify : public ::google::protobuf::Message {
 public:
  eg_family_level_change_notify();
  virtual ~eg_family_level_change_notify();

  eg_family_level_change_notify(const eg_family_level_change_notify& from);

  inline eg_family_level_change_notify& operator=(const eg_family_level_change_notify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const eg_family_level_change_notify& default_instance();

  void Swap(eg_family_level_change_notify* other);

  // implements Message ----------------------------------------------

  eg_family_level_change_notify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const eg_family_level_change_notify& from);
  void MergeFrom(const eg_family_level_change_notify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint64 role_list = 1;
  inline int role_list_size() const;
  inline void clear_role_list();
  static const int kRoleListFieldNumber = 1;
  inline ::google::protobuf::uint64 role_list(int index) const;
  inline void set_role_list(int index, ::google::protobuf::uint64 value);
  inline void add_role_list(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      role_list() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_role_list();

  // optional uint32 family_level = 2;
  inline bool has_family_level() const;
  inline void clear_family_level();
  static const int kFamilyLevelFieldNumber = 2;
  inline ::google::protobuf::uint32 family_level() const;
  inline void set_family_level(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.server.eg_family_level_change_notify)
 private:
  inline void set_has_family_level();
  inline void clear_has_family_level();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > role_list_;
  ::google::protobuf::uint32 family_level_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static eg_family_level_change_notify* default_instance_;
};
// -------------------------------------------------------------------

class ge_family_shop_buy_request : public ::google::protobuf::Message {
 public:
  ge_family_shop_buy_request();
  virtual ~ge_family_shop_buy_request();

  ge_family_shop_buy_request(const ge_family_shop_buy_request& from);

  inline ge_family_shop_buy_request& operator=(const ge_family_shop_buy_request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ge_family_shop_buy_request& default_instance();

  void Swap(ge_family_shop_buy_request* other);

  // implements Message ----------------------------------------------

  ge_family_shop_buy_request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ge_family_shop_buy_request& from);
  void MergeFrom(const ge_family_shop_buy_request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 index = 1;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 1;
  inline ::google::protobuf::uint32 index() const;
  inline void set_index(::google::protobuf::uint32 value);

  // optional uint32 shop_item = 2;
  inline bool has_shop_item() const;
  inline void clear_shop_item();
  static const int kShopItemFieldNumber = 2;
  inline ::google::protobuf::uint32 shop_item() const;
  inline void set_shop_item(::google::protobuf::uint32 value);

  // optional uint32 num = 3;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 3;
  inline ::google::protobuf::uint32 num() const;
  inline void set_num(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.server.ge_family_shop_buy_request)
 private:
  inline void set_has_index();
  inline void clear_has_index();
  inline void set_has_shop_item();
  inline void clear_has_shop_item();
  inline void set_has_num();
  inline void clear_has_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 index_;
  ::google::protobuf::uint32 shop_item_;
  ::google::protobuf::uint32 num_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static ge_family_shop_buy_request* default_instance_;
};
// -------------------------------------------------------------------

class eg_family_shop_buy_reply : public ::google::protobuf::Message {
 public:
  eg_family_shop_buy_reply();
  virtual ~eg_family_shop_buy_reply();

  eg_family_shop_buy_reply(const eg_family_shop_buy_reply& from);

  inline eg_family_shop_buy_reply& operator=(const eg_family_shop_buy_reply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const eg_family_shop_buy_reply& default_instance();

  void Swap(eg_family_shop_buy_reply* other);

  // implements Message ----------------------------------------------

  eg_family_shop_buy_reply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const eg_family_shop_buy_reply& from);
  void MergeFrom(const eg_family_shop_buy_reply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 refresh_time = 1;
  inline bool has_refresh_time() const;
  inline void clear_refresh_time();
  static const int kRefreshTimeFieldNumber = 1;
  inline ::google::protobuf::uint32 refresh_time() const;
  inline void set_refresh_time(::google::protobuf::uint32 value);

  // optional uint32 index = 2;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 2;
  inline ::google::protobuf::uint32 index() const;
  inline void set_index(::google::protobuf::uint32 value);

  // optional uint32 shop_item = 3;
  inline bool has_shop_item() const;
  inline void clear_shop_item();
  static const int kShopItemFieldNumber = 3;
  inline ::google::protobuf::uint32 shop_item() const;
  inline void set_shop_item(::google::protobuf::uint32 value);

  // optional uint32 num = 4;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 4;
  inline ::google::protobuf::uint32 num() const;
  inline void set_num(::google::protobuf::uint32 value);

  // optional .proto.common.family_shop_data shop_data = 5;
  inline bool has_shop_data() const;
  inline void clear_shop_data();
  static const int kShopDataFieldNumber = 5;
  inline const ::proto::common::family_shop_data& shop_data() const;
  inline ::proto::common::family_shop_data* mutable_shop_data();
  inline ::proto::common::family_shop_data* release_shop_data();
  inline void set_allocated_shop_data(::proto::common::family_shop_data* shop_data);

  // optional .proto.common.family_shop_personal_data personal_data = 6;
  inline bool has_personal_data() const;
  inline void clear_personal_data();
  static const int kPersonalDataFieldNumber = 6;
  inline const ::proto::common::family_shop_personal_data& personal_data() const;
  inline ::proto::common::family_shop_personal_data* mutable_personal_data();
  inline ::proto::common::family_shop_personal_data* release_personal_data();
  inline void set_allocated_personal_data(::proto::common::family_shop_personal_data* personal_data);

  // @@protoc_insertion_point(class_scope:proto.server.eg_family_shop_buy_reply)
 private:
  inline void set_has_refresh_time();
  inline void clear_has_refresh_time();
  inline void set_has_index();
  inline void clear_has_index();
  inline void set_has_shop_item();
  inline void clear_has_shop_item();
  inline void set_has_num();
  inline void clear_has_num();
  inline void set_has_shop_data();
  inline void clear_has_shop_data();
  inline void set_has_personal_data();
  inline void clear_has_personal_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 refresh_time_;
  ::google::protobuf::uint32 index_;
  ::google::protobuf::uint32 shop_item_;
  ::google::protobuf::uint32 num_;
  ::proto::common::family_shop_data* shop_data_;
  ::proto::common::family_shop_personal_data* personal_data_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static eg_family_shop_buy_reply* default_instance_;
};
// -------------------------------------------------------------------

class ge_family_shop_back_notify : public ::google::protobuf::Message {
 public:
  ge_family_shop_back_notify();
  virtual ~ge_family_shop_back_notify();

  ge_family_shop_back_notify(const ge_family_shop_back_notify& from);

  inline ge_family_shop_back_notify& operator=(const ge_family_shop_back_notify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ge_family_shop_back_notify& default_instance();

  void Swap(ge_family_shop_back_notify* other);

  // implements Message ----------------------------------------------

  ge_family_shop_back_notify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ge_family_shop_back_notify& from);
  void MergeFrom(const ge_family_shop_back_notify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 refresh_time = 1;
  inline bool has_refresh_time() const;
  inline void clear_refresh_time();
  static const int kRefreshTimeFieldNumber = 1;
  inline ::google::protobuf::uint32 refresh_time() const;
  inline void set_refresh_time(::google::protobuf::uint32 value);

  // optional uint32 index = 2;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 2;
  inline ::google::protobuf::uint32 index() const;
  inline void set_index(::google::protobuf::uint32 value);

  // optional uint32 num = 3;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 3;
  inline ::google::protobuf::uint32 num() const;
  inline void set_num(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.server.ge_family_shop_back_notify)
 private:
  inline void set_has_refresh_time();
  inline void clear_has_refresh_time();
  inline void set_has_index();
  inline void clear_has_index();
  inline void set_has_num();
  inline void clear_has_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 refresh_time_;
  ::google::protobuf::uint32 index_;
  ::google::protobuf::uint32 num_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static ge_family_shop_back_notify* default_instance_;
};
// -------------------------------------------------------------------

class ge_gm_set_king_family_notify : public ::google::protobuf::Message {
 public:
  ge_gm_set_king_family_notify();
  virtual ~ge_gm_set_king_family_notify();

  ge_gm_set_king_family_notify(const ge_gm_set_king_family_notify& from);

  inline ge_gm_set_king_family_notify& operator=(const ge_gm_set_king_family_notify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ge_gm_set_king_family_notify& default_instance();

  void Swap(ge_gm_set_king_family_notify* other);

  // implements Message ----------------------------------------------

  ge_gm_set_king_family_notify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ge_gm_set_king_family_notify& from);
  void MergeFrom(const ge_gm_set_king_family_notify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 country_id = 1;
  inline bool has_country_id() const;
  inline void clear_country_id();
  static const int kCountryIdFieldNumber = 1;
  inline ::google::protobuf::uint32 country_id() const;
  inline void set_country_id(::google::protobuf::uint32 value);

  // optional uint64 family_uid = 2;
  inline bool has_family_uid() const;
  inline void clear_family_uid();
  static const int kFamilyUidFieldNumber = 2;
  inline ::google::protobuf::uint64 family_uid() const;
  inline void set_family_uid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:proto.server.ge_gm_set_king_family_notify)
 private:
  inline void set_has_country_id();
  inline void clear_has_country_id();
  inline void set_has_family_uid();
  inline void clear_has_family_uid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 family_uid_;
  ::google::protobuf::uint32 country_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static ge_gm_set_king_family_notify* default_instance_;
};
// -------------------------------------------------------------------

class eg_update_country_notify : public ::google::protobuf::Message {
 public:
  eg_update_country_notify();
  virtual ~eg_update_country_notify();

  eg_update_country_notify(const eg_update_country_notify& from);

  inline eg_update_country_notify& operator=(const eg_update_country_notify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const eg_update_country_notify& default_instance();

  void Swap(eg_update_country_notify* other);

  // implements Message ----------------------------------------------

  eg_update_country_notify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const eg_update_country_notify& from);
  void MergeFrom(const eg_update_country_notify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto.common.country_common countries = 1;
  inline int countries_size() const;
  inline void clear_countries();
  static const int kCountriesFieldNumber = 1;
  inline const ::proto::common::country_common& countries(int index) const;
  inline ::proto::common::country_common* mutable_countries(int index);
  inline ::proto::common::country_common* add_countries();
  inline const ::google::protobuf::RepeatedPtrField< ::proto::common::country_common >&
      countries() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto::common::country_common >*
      mutable_countries();

  // @@protoc_insertion_point(class_scope:proto.server.eg_update_country_notify)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto::common::country_common > countries_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static eg_update_country_notify* default_instance_;
};
// -------------------------------------------------------------------

class eg_country_name_change_request : public ::google::protobuf::Message {
 public:
  eg_country_name_change_request();
  virtual ~eg_country_name_change_request();

  eg_country_name_change_request(const eg_country_name_change_request& from);

  inline eg_country_name_change_request& operator=(const eg_country_name_change_request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const eg_country_name_change_request& default_instance();

  void Swap(eg_country_name_change_request* other);

  // implements Message ----------------------------------------------

  eg_country_name_change_request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const eg_country_name_change_request& from);
  void MergeFrom(const eg_country_name_change_request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional uint32 flag_id = 2;
  inline bool has_flag_id() const;
  inline void clear_flag_id();
  static const int kFlagIdFieldNumber = 2;
  inline ::google::protobuf::uint32 flag_id() const;
  inline void set_flag_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.server.eg_country_name_change_request)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_flag_id();
  inline void clear_has_flag_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::uint32 flag_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static eg_country_name_change_request* default_instance_;
};
// -------------------------------------------------------------------

class ge_country_name_change_reply : public ::google::protobuf::Message {
 public:
  ge_country_name_change_reply();
  virtual ~ge_country_name_change_reply();

  ge_country_name_change_reply(const ge_country_name_change_reply& from);

  inline ge_country_name_change_reply& operator=(const ge_country_name_change_reply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ge_country_name_change_reply& default_instance();

  void Swap(ge_country_name_change_reply* other);

  // implements Message ----------------------------------------------

  ge_country_name_change_reply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ge_country_name_change_reply& from);
  void MergeFrom(const ge_country_name_change_reply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 reply_code = 1;
  inline bool has_reply_code() const;
  inline void clear_reply_code();
  static const int kReplyCodeFieldNumber = 1;
  inline ::google::protobuf::uint32 reply_code() const;
  inline void set_reply_code(::google::protobuf::uint32 value);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional uint32 flag_id = 3;
  inline bool has_flag_id() const;
  inline void clear_flag_id();
  static const int kFlagIdFieldNumber = 3;
  inline ::google::protobuf::uint32 flag_id() const;
  inline void set_flag_id(::google::protobuf::uint32 value);

  // optional .proto.common.role_change_data change_data = 4;
  inline bool has_change_data() const;
  inline void clear_change_data();
  static const int kChangeDataFieldNumber = 4;
  inline const ::proto::common::role_change_data& change_data() const;
  inline ::proto::common::role_change_data* mutable_change_data();
  inline ::proto::common::role_change_data* release_change_data();
  inline void set_allocated_change_data(::proto::common::role_change_data* change_data);

  // @@protoc_insertion_point(class_scope:proto.server.ge_country_name_change_reply)
 private:
  inline void set_has_reply_code();
  inline void clear_has_reply_code();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_flag_id();
  inline void clear_has_flag_id();
  inline void set_has_change_data();
  inline void clear_has_change_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::uint32 reply_code_;
  ::google::protobuf::uint32 flag_id_;
  ::proto::common::role_change_data* change_data_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static ge_country_name_change_reply* default_instance_;
};
// -------------------------------------------------------------------

class eg_country_year_name_request : public ::google::protobuf::Message {
 public:
  eg_country_year_name_request();
  virtual ~eg_country_year_name_request();

  eg_country_year_name_request(const eg_country_year_name_request& from);

  inline eg_country_year_name_request& operator=(const eg_country_year_name_request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const eg_country_year_name_request& default_instance();

  void Swap(eg_country_year_name_request* other);

  // implements Message ----------------------------------------------

  eg_country_year_name_request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const eg_country_year_name_request& from);
  void MergeFrom(const eg_country_year_name_request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:proto.server.eg_country_year_name_request)
 private:
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static eg_country_year_name_request* default_instance_;
};
// -------------------------------------------------------------------

class ge_country_year_name_reply : public ::google::protobuf::Message {
 public:
  ge_country_year_name_reply();
  virtual ~ge_country_year_name_reply();

  ge_country_year_name_reply(const ge_country_year_name_reply& from);

  inline ge_country_year_name_reply& operator=(const ge_country_year_name_reply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ge_country_year_name_reply& default_instance();

  void Swap(ge_country_year_name_reply* other);

  // implements Message ----------------------------------------------

  ge_country_year_name_reply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ge_country_year_name_reply& from);
  void MergeFrom(const ge_country_year_name_reply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 reply_code = 1;
  inline bool has_reply_code() const;
  inline void clear_reply_code();
  static const int kReplyCodeFieldNumber = 1;
  inline ::google::protobuf::uint32 reply_code() const;
  inline void set_reply_code(::google::protobuf::uint32 value);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional .proto.common.role_change_data change_data = 3;
  inline bool has_change_data() const;
  inline void clear_change_data();
  static const int kChangeDataFieldNumber = 3;
  inline const ::proto::common::role_change_data& change_data() const;
  inline ::proto::common::role_change_data* mutable_change_data();
  inline ::proto::common::role_change_data* release_change_data();
  inline void set_allocated_change_data(::proto::common::role_change_data* change_data);

  // @@protoc_insertion_point(class_scope:proto.server.ge_country_year_name_reply)
 private:
  inline void set_has_reply_code();
  inline void clear_has_reply_code();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_change_data();
  inline void clear_has_change_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::proto::common::role_change_data* change_data_;
  ::google::protobuf::uint32 reply_code_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static ge_country_year_name_reply* default_instance_;
};
// -------------------------------------------------------------------

class eg_sync_data_request : public ::google::protobuf::Message {
 public:
  eg_sync_data_request();
  virtual ~eg_sync_data_request();

  eg_sync_data_request(const eg_sync_data_request& from);

  inline eg_sync_data_request& operator=(const eg_sync_data_request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const eg_sync_data_request& default_instance();

  void Swap(eg_sync_data_request* other);

  // implements Message ----------------------------------------------

  eg_sync_data_request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const eg_sync_data_request& from);
  void MergeFrom(const eg_sync_data_request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto.server.data_sync_item items = 1;
  inline int items_size() const;
  inline void clear_items();
  static const int kItemsFieldNumber = 1;
  inline const ::proto::server::data_sync_item& items(int index) const;
  inline ::proto::server::data_sync_item* mutable_items(int index);
  inline ::proto::server::data_sync_item* add_items();
  inline const ::google::protobuf::RepeatedPtrField< ::proto::server::data_sync_item >&
      items() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto::server::data_sync_item >*
      mutable_items();

  // @@protoc_insertion_point(class_scope:proto.server.eg_sync_data_request)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto::server::data_sync_item > items_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static eg_sync_data_request* default_instance_;
};
// -------------------------------------------------------------------

class ge_sync_data_request : public ::google::protobuf::Message {
 public:
  ge_sync_data_request();
  virtual ~ge_sync_data_request();

  ge_sync_data_request(const ge_sync_data_request& from);

  inline ge_sync_data_request& operator=(const ge_sync_data_request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ge_sync_data_request& default_instance();

  void Swap(ge_sync_data_request* other);

  // implements Message ----------------------------------------------

  ge_sync_data_request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ge_sync_data_request& from);
  void MergeFrom(const ge_sync_data_request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto.server.data_sync_item items = 1;
  inline int items_size() const;
  inline void clear_items();
  static const int kItemsFieldNumber = 1;
  inline const ::proto::server::data_sync_item& items(int index) const;
  inline ::proto::server::data_sync_item* mutable_items(int index);
  inline ::proto::server::data_sync_item* add_items();
  inline const ::google::protobuf::RepeatedPtrField< ::proto::server::data_sync_item >&
      items() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto::server::data_sync_item >*
      mutable_items();

  // @@protoc_insertion_point(class_scope:proto.server.ge_sync_data_request)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto::server::data_sync_item > items_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static ge_sync_data_request* default_instance_;
};
// -------------------------------------------------------------------

class ge_ready_enter_scene_notify : public ::google::protobuf::Message {
 public:
  ge_ready_enter_scene_notify();
  virtual ~ge_ready_enter_scene_notify();

  ge_ready_enter_scene_notify(const ge_ready_enter_scene_notify& from);

  inline ge_ready_enter_scene_notify& operator=(const ge_ready_enter_scene_notify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ge_ready_enter_scene_notify& default_instance();

  void Swap(ge_ready_enter_scene_notify* other);

  // implements Message ----------------------------------------------

  ge_ready_enter_scene_notify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ge_ready_enter_scene_notify& from);
  void MergeFrom(const ge_ready_enter_scene_notify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:proto.server.ge_ready_enter_scene_notify)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static ge_ready_enter_scene_notify* default_instance_;
};
// -------------------------------------------------------------------

class eg_summon_field_boss_request : public ::google::protobuf::Message {
 public:
  eg_summon_field_boss_request();
  virtual ~eg_summon_field_boss_request();

  eg_summon_field_boss_request(const eg_summon_field_boss_request& from);

  inline eg_summon_field_boss_request& operator=(const eg_summon_field_boss_request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const eg_summon_field_boss_request& default_instance();

  void Swap(eg_summon_field_boss_request* other);

  // implements Message ----------------------------------------------

  eg_summon_field_boss_request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const eg_summon_field_boss_request& from);
  void MergeFrom(const eg_summon_field_boss_request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // optional uint64 scene_id = 2;
  inline bool has_scene_id() const;
  inline void clear_scene_id();
  static const int kSceneIdFieldNumber = 2;
  inline ::google::protobuf::uint64 scene_id() const;
  inline void set_scene_id(::google::protobuf::uint64 value);

  // optional uint64 object_id = 3;
  inline bool has_object_id() const;
  inline void clear_object_id();
  static const int kObjectIdFieldNumber = 3;
  inline ::google::protobuf::uint64 object_id() const;
  inline void set_object_id(::google::protobuf::uint64 value);

  // optional uint32 monster_id = 4;
  inline bool has_monster_id() const;
  inline void clear_monster_id();
  static const int kMonsterIdFieldNumber = 4;
  inline ::google::protobuf::uint32 monster_id() const;
  inline void set_monster_id(::google::protobuf::uint32 value);

  // optional uint32 pos_x = 5;
  inline bool has_pos_x() const;
  inline void clear_pos_x();
  static const int kPosXFieldNumber = 5;
  inline ::google::protobuf::uint32 pos_x() const;
  inline void set_pos_x(::google::protobuf::uint32 value);

  // optional uint32 pos_y = 6;
  inline bool has_pos_y() const;
  inline void clear_pos_y();
  static const int kPosYFieldNumber = 6;
  inline ::google::protobuf::uint32 pos_y() const;
  inline void set_pos_y(::google::protobuf::uint32 value);

  // optional uint32 dir = 7;
  inline bool has_dir() const;
  inline void clear_dir();
  static const int kDirFieldNumber = 7;
  inline ::google::protobuf::uint32 dir() const;
  inline void set_dir(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.server.eg_summon_field_boss_request)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_scene_id();
  inline void clear_has_scene_id();
  inline void set_has_object_id();
  inline void clear_has_object_id();
  inline void set_has_monster_id();
  inline void clear_has_monster_id();
  inline void set_has_pos_x();
  inline void clear_has_pos_x();
  inline void set_has_pos_y();
  inline void clear_has_pos_y();
  inline void set_has_dir();
  inline void clear_has_dir();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 scene_id_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 monster_id_;
  ::google::protobuf::uint64 object_id_;
  ::google::protobuf::uint32 pos_x_;
  ::google::protobuf::uint32 pos_y_;
  ::google::protobuf::uint32 dir_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static eg_summon_field_boss_request* default_instance_;
};
// -------------------------------------------------------------------

class eg_field_boss_die_notify : public ::google::protobuf::Message {
 public:
  eg_field_boss_die_notify();
  virtual ~eg_field_boss_die_notify();

  eg_field_boss_die_notify(const eg_field_boss_die_notify& from);

  inline eg_field_boss_die_notify& operator=(const eg_field_boss_die_notify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const eg_field_boss_die_notify& default_instance();

  void Swap(eg_field_boss_die_notify* other);

  // implements Message ----------------------------------------------

  eg_field_boss_die_notify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const eg_field_boss_die_notify& from);
  void MergeFrom(const eg_field_boss_die_notify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 object_id = 1;
  inline bool has_object_id() const;
  inline void clear_object_id();
  static const int kObjectIdFieldNumber = 1;
  inline ::google::protobuf::uint64 object_id() const;
  inline void set_object_id(::google::protobuf::uint64 value);

  // optional .proto.server.EM_FIELD_MODE mode = 2 [default = FIELD_BOSS_NONE];
  inline bool has_mode() const;
  inline void clear_mode();
  static const int kModeFieldNumber = 2;
  inline ::proto::server::EM_FIELD_MODE mode() const;
  inline void set_mode(::proto::server::EM_FIELD_MODE value);

  // @@protoc_insertion_point(class_scope:proto.server.eg_field_boss_die_notify)
 private:
  inline void set_has_object_id();
  inline void clear_has_object_id();
  inline void set_has_mode();
  inline void clear_has_mode();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 object_id_;
  int mode_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static eg_field_boss_die_notify* default_instance_;
};
// -------------------------------------------------------------------

class ge_summon_field_boss_replay : public ::google::protobuf::Message {
 public:
  ge_summon_field_boss_replay();
  virtual ~ge_summon_field_boss_replay();

  ge_summon_field_boss_replay(const ge_summon_field_boss_replay& from);

  inline ge_summon_field_boss_replay& operator=(const ge_summon_field_boss_replay& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ge_summon_field_boss_replay& default_instance();

  void Swap(ge_summon_field_boss_replay* other);

  // implements Message ----------------------------------------------

  ge_summon_field_boss_replay* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ge_summon_field_boss_replay& from);
  void MergeFrom(const ge_summon_field_boss_replay& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 reply_code = 1;
  inline bool has_reply_code() const;
  inline void clear_reply_code();
  static const int kReplyCodeFieldNumber = 1;
  inline ::google::protobuf::uint32 reply_code() const;
  inline void set_reply_code(::google::protobuf::uint32 value);

  // optional uint32 id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // optional uint64 object_id = 3;
  inline bool has_object_id() const;
  inline void clear_object_id();
  static const int kObjectIdFieldNumber = 3;
  inline ::google::protobuf::uint64 object_id() const;
  inline void set_object_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:proto.server.ge_summon_field_boss_replay)
 private:
  inline void set_has_reply_code();
  inline void clear_has_reply_code();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_object_id();
  inline void clear_has_object_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 reply_code_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint64 object_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static ge_summon_field_boss_replay* default_instance_;
};
// -------------------------------------------------------------------

class eg_clear_all_boss_notify : public ::google::protobuf::Message {
 public:
  eg_clear_all_boss_notify();
  virtual ~eg_clear_all_boss_notify();

  eg_clear_all_boss_notify(const eg_clear_all_boss_notify& from);

  inline eg_clear_all_boss_notify& operator=(const eg_clear_all_boss_notify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const eg_clear_all_boss_notify& default_instance();

  void Swap(eg_clear_all_boss_notify* other);

  // implements Message ----------------------------------------------

  eg_clear_all_boss_notify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const eg_clear_all_boss_notify& from);
  void MergeFrom(const eg_clear_all_boss_notify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint64 object_ids = 1;
  inline int object_ids_size() const;
  inline void clear_object_ids();
  static const int kObjectIdsFieldNumber = 1;
  inline ::google::protobuf::uint64 object_ids(int index) const;
  inline void set_object_ids(int index, ::google::protobuf::uint64 value);
  inline void add_object_ids(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      object_ids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_object_ids();

  // @@protoc_insertion_point(class_scope:proto.server.eg_clear_all_boss_notify)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > object_ids_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static eg_clear_all_boss_notify* default_instance_;
};
// -------------------------------------------------------------------

class ge_field_boss_killed_notify : public ::google::protobuf::Message {
 public:
  ge_field_boss_killed_notify();
  virtual ~ge_field_boss_killed_notify();

  ge_field_boss_killed_notify(const ge_field_boss_killed_notify& from);

  inline ge_field_boss_killed_notify& operator=(const ge_field_boss_killed_notify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ge_field_boss_killed_notify& default_instance();

  void Swap(ge_field_boss_killed_notify* other);

  // implements Message ----------------------------------------------

  ge_field_boss_killed_notify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ge_field_boss_killed_notify& from);
  void MergeFrom(const ge_field_boss_killed_notify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // optional uint64 object_id = 2;
  inline bool has_object_id() const;
  inline void clear_object_id();
  static const int kObjectIdFieldNumber = 2;
  inline ::google::protobuf::uint64 object_id() const;
  inline void set_object_id(::google::protobuf::uint64 value);

  // optional string killer_name = 4;
  inline bool has_killer_name() const;
  inline void clear_killer_name();
  static const int kKillerNameFieldNumber = 4;
  inline const ::std::string& killer_name() const;
  inline void set_killer_name(const ::std::string& value);
  inline void set_killer_name(const char* value);
  inline void set_killer_name(const char* value, size_t size);
  inline ::std::string* mutable_killer_name();
  inline ::std::string* release_killer_name();
  inline void set_allocated_killer_name(::std::string* killer_name);

  // @@protoc_insertion_point(class_scope:proto.server.ge_field_boss_killed_notify)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_object_id();
  inline void clear_has_object_id();
  inline void set_has_killer_name();
  inline void clear_has_killer_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 object_id_;
  ::std::string* killer_name_;
  ::google::protobuf::uint32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static ge_field_boss_killed_notify* default_instance_;
};
// -------------------------------------------------------------------

class field_boss_rank : public ::google::protobuf::Message {
 public:
  field_boss_rank();
  virtual ~field_boss_rank();

  field_boss_rank(const field_boss_rank& from);

  inline field_boss_rank& operator=(const field_boss_rank& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const field_boss_rank& default_instance();

  void Swap(field_boss_rank* other);

  // implements Message ----------------------------------------------

  field_boss_rank* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const field_boss_rank& from);
  void MergeFrom(const field_boss_rank& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 rank_id = 1;
  inline bool has_rank_id() const;
  inline void clear_rank_id();
  static const int kRankIdFieldNumber = 1;
  inline ::google::protobuf::uint32 rank_id() const;
  inline void set_rank_id(::google::protobuf::uint32 value);

  // repeated uint64 uids = 2;
  inline int uids_size() const;
  inline void clear_uids();
  static const int kUidsFieldNumber = 2;
  inline ::google::protobuf::uint64 uids(int index) const;
  inline void set_uids(int index, ::google::protobuf::uint64 value);
  inline void add_uids(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      uids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_uids();

  // @@protoc_insertion_point(class_scope:proto.server.field_boss_rank)
 private:
  inline void set_has_rank_id();
  inline void clear_has_rank_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > uids_;
  ::google::protobuf::uint32 rank_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static field_boss_rank* default_instance_;
};
// -------------------------------------------------------------------

class ge_field_boss_rank_notify : public ::google::protobuf::Message {
 public:
  ge_field_boss_rank_notify();
  virtual ~ge_field_boss_rank_notify();

  ge_field_boss_rank_notify(const ge_field_boss_rank_notify& from);

  inline ge_field_boss_rank_notify& operator=(const ge_field_boss_rank_notify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ge_field_boss_rank_notify& default_instance();

  void Swap(ge_field_boss_rank_notify* other);

  // implements Message ----------------------------------------------

  ge_field_boss_rank_notify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ge_field_boss_rank_notify& from);
  void MergeFrom(const ge_field_boss_rank_notify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // optional uint32 monster_id = 2;
  inline bool has_monster_id() const;
  inline void clear_monster_id();
  static const int kMonsterIdFieldNumber = 2;
  inline ::google::protobuf::uint32 monster_id() const;
  inline void set_monster_id(::google::protobuf::uint32 value);

  // optional .proto.server.EM_FIELD_MODE mode = 3 [default = FIELD_BOSS_NONE];
  inline bool has_mode() const;
  inline void clear_mode();
  static const int kModeFieldNumber = 3;
  inline ::proto::server::EM_FIELD_MODE mode() const;
  inline void set_mode(::proto::server::EM_FIELD_MODE value);

  // repeated .proto.server.field_boss_rank persion_ranks = 4;
  inline int persion_ranks_size() const;
  inline void clear_persion_ranks();
  static const int kPersionRanksFieldNumber = 4;
  inline const ::proto::server::field_boss_rank& persion_ranks(int index) const;
  inline ::proto::server::field_boss_rank* mutable_persion_ranks(int index);
  inline ::proto::server::field_boss_rank* add_persion_ranks();
  inline const ::google::protobuf::RepeatedPtrField< ::proto::server::field_boss_rank >&
      persion_ranks() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto::server::field_boss_rank >*
      mutable_persion_ranks();

  // repeated .proto.server.field_boss_rank family_ranks = 5;
  inline int family_ranks_size() const;
  inline void clear_family_ranks();
  static const int kFamilyRanksFieldNumber = 5;
  inline const ::proto::server::field_boss_rank& family_ranks(int index) const;
  inline ::proto::server::field_boss_rank* mutable_family_ranks(int index);
  inline ::proto::server::field_boss_rank* add_family_ranks();
  inline const ::google::protobuf::RepeatedPtrField< ::proto::server::field_boss_rank >&
      family_ranks() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto::server::field_boss_rank >*
      mutable_family_ranks();

  // repeated uint64 killers = 6;
  inline int killers_size() const;
  inline void clear_killers();
  static const int kKillersFieldNumber = 6;
  inline ::google::protobuf::uint64 killers(int index) const;
  inline void set_killers(int index, ::google::protobuf::uint64 value);
  inline void add_killers(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      killers() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_killers();

  // @@protoc_insertion_point(class_scope:proto.server.ge_field_boss_rank_notify)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_monster_id();
  inline void clear_has_monster_id();
  inline void set_has_mode();
  inline void clear_has_mode();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 monster_id_;
  ::google::protobuf::RepeatedPtrField< ::proto::server::field_boss_rank > persion_ranks_;
  ::google::protobuf::RepeatedPtrField< ::proto::server::field_boss_rank > family_ranks_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > killers_;
  int mode_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static ge_field_boss_rank_notify* default_instance_;
};
// -------------------------------------------------------------------

class ge_check_drop_items_request : public ::google::protobuf::Message {
 public:
  ge_check_drop_items_request();
  virtual ~ge_check_drop_items_request();

  ge_check_drop_items_request(const ge_check_drop_items_request& from);

  inline ge_check_drop_items_request& operator=(const ge_check_drop_items_request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ge_check_drop_items_request& default_instance();

  void Swap(ge_check_drop_items_request* other);

  // implements Message ----------------------------------------------

  ge_check_drop_items_request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ge_check_drop_items_request& from);
  void MergeFrom(const ge_check_drop_items_request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto.common.item_limit_data item_list = 1;
  inline int item_list_size() const;
  inline void clear_item_list();
  static const int kItemListFieldNumber = 1;
  inline const ::proto::common::item_limit_data& item_list(int index) const;
  inline ::proto::common::item_limit_data* mutable_item_list(int index);
  inline ::proto::common::item_limit_data* add_item_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto::common::item_limit_data >&
      item_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto::common::item_limit_data >*
      mutable_item_list();

  // @@protoc_insertion_point(class_scope:proto.server.ge_check_drop_items_request)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto::common::item_limit_data > item_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static ge_check_drop_items_request* default_instance_;
};
// -------------------------------------------------------------------

class eg_check_drop_items_reply : public ::google::protobuf::Message {
 public:
  eg_check_drop_items_reply();
  virtual ~eg_check_drop_items_reply();

  eg_check_drop_items_reply(const eg_check_drop_items_reply& from);

  inline eg_check_drop_items_reply& operator=(const eg_check_drop_items_reply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const eg_check_drop_items_reply& default_instance();

  void Swap(eg_check_drop_items_reply* other);

  // implements Message ----------------------------------------------

  eg_check_drop_items_reply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const eg_check_drop_items_reply& from);
  void MergeFrom(const eg_check_drop_items_reply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto.common.item_limit_data item_list = 3;
  inline int item_list_size() const;
  inline void clear_item_list();
  static const int kItemListFieldNumber = 3;
  inline const ::proto::common::item_limit_data& item_list(int index) const;
  inline ::proto::common::item_limit_data* mutable_item_list(int index);
  inline ::proto::common::item_limit_data* add_item_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto::common::item_limit_data >&
      item_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto::common::item_limit_data >*
      mutable_item_list();

  // @@protoc_insertion_point(class_scope:proto.server.eg_check_drop_items_reply)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto::common::item_limit_data > item_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static eg_check_drop_items_reply* default_instance_;
};
// -------------------------------------------------------------------

class eg_syn_item_limit_notify : public ::google::protobuf::Message {
 public:
  eg_syn_item_limit_notify();
  virtual ~eg_syn_item_limit_notify();

  eg_syn_item_limit_notify(const eg_syn_item_limit_notify& from);

  inline eg_syn_item_limit_notify& operator=(const eg_syn_item_limit_notify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const eg_syn_item_limit_notify& default_instance();

  void Swap(eg_syn_item_limit_notify* other);

  // implements Message ----------------------------------------------

  eg_syn_item_limit_notify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const eg_syn_item_limit_notify& from);
  void MergeFrom(const eg_syn_item_limit_notify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto.common.item_limit_data item_list = 1;
  inline int item_list_size() const;
  inline void clear_item_list();
  static const int kItemListFieldNumber = 1;
  inline const ::proto::common::item_limit_data& item_list(int index) const;
  inline ::proto::common::item_limit_data* mutable_item_list(int index);
  inline ::proto::common::item_limit_data* add_item_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto::common::item_limit_data >&
      item_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto::common::item_limit_data >*
      mutable_item_list();

  // @@protoc_insertion_point(class_scope:proto.server.eg_syn_item_limit_notify)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto::common::item_limit_data > item_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static eg_syn_item_limit_notify* default_instance_;
};
// -------------------------------------------------------------------

class ge_redbag_send_notify : public ::google::protobuf::Message {
 public:
  ge_redbag_send_notify();
  virtual ~ge_redbag_send_notify();

  ge_redbag_send_notify(const ge_redbag_send_notify& from);

  inline ge_redbag_send_notify& operator=(const ge_redbag_send_notify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ge_redbag_send_notify& default_instance();

  void Swap(ge_redbag_send_notify* other);

  // implements Message ----------------------------------------------

  ge_redbag_send_notify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ge_redbag_send_notify& from);
  void MergeFrom(const ge_redbag_send_notify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 count = 1;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 1;
  inline ::google::protobuf::uint32 count() const;
  inline void set_count(::google::protobuf::uint32 value);

  // optional uint32 money = 2;
  inline bool has_money() const;
  inline void clear_money();
  static const int kMoneyFieldNumber = 2;
  inline ::google::protobuf::uint32 money() const;
  inline void set_money(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.server.ge_redbag_send_notify)
 private:
  inline void set_has_count();
  inline void clear_has_count();
  inline void set_has_money();
  inline void clear_has_money();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 count_;
  ::google::protobuf::uint32 money_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static ge_redbag_send_notify* default_instance_;
};
// -------------------------------------------------------------------

class eg_redbag_draw_notify : public ::google::protobuf::Message {
 public:
  eg_redbag_draw_notify();
  virtual ~eg_redbag_draw_notify();

  eg_redbag_draw_notify(const eg_redbag_draw_notify& from);

  inline eg_redbag_draw_notify& operator=(const eg_redbag_draw_notify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const eg_redbag_draw_notify& default_instance();

  void Swap(eg_redbag_draw_notify* other);

  // implements Message ----------------------------------------------

  eg_redbag_draw_notify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const eg_redbag_draw_notify& from);
  void MergeFrom(const eg_redbag_draw_notify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 money = 1;
  inline bool has_money() const;
  inline void clear_money();
  static const int kMoneyFieldNumber = 1;
  inline ::google::protobuf::uint32 money() const;
  inline void set_money(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.server.eg_redbag_draw_notify)
 private:
  inline void set_has_money();
  inline void clear_has_money();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 money_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static eg_redbag_draw_notify* default_instance_;
};
// -------------------------------------------------------------------

class gall_reload_config_notify : public ::google::protobuf::Message {
 public:
  gall_reload_config_notify();
  virtual ~gall_reload_config_notify();

  gall_reload_config_notify(const gall_reload_config_notify& from);

  inline gall_reload_config_notify& operator=(const gall_reload_config_notify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gall_reload_config_notify& default_instance();

  void Swap(gall_reload_config_notify* other);

  // implements Message ----------------------------------------------

  gall_reload_config_notify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gall_reload_config_notify& from);
  void MergeFrom(const gall_reload_config_notify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:proto.server.gall_reload_config_notify)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static gall_reload_config_notify* default_instance_;
};
// -------------------------------------------------------------------

class eg_chat_get_role_info_request : public ::google::protobuf::Message {
 public:
  eg_chat_get_role_info_request();
  virtual ~eg_chat_get_role_info_request();

  eg_chat_get_role_info_request(const eg_chat_get_role_info_request& from);

  inline eg_chat_get_role_info_request& operator=(const eg_chat_get_role_info_request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const eg_chat_get_role_info_request& default_instance();

  void Swap(eg_chat_get_role_info_request* other);

  // implements Message ----------------------------------------------

  eg_chat_get_role_info_request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const eg_chat_get_role_info_request& from);
  void MergeFrom(const eg_chat_get_role_info_request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto.common.chat_param param_list = 1;
  inline int param_list_size() const;
  inline void clear_param_list();
  static const int kParamListFieldNumber = 1;
  inline const ::proto::common::chat_param& param_list(int index) const;
  inline ::proto::common::chat_param* mutable_param_list(int index);
  inline ::proto::common::chat_param* add_param_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto::common::chat_param >&
      param_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto::common::chat_param >*
      mutable_param_list();

  // required .proto.common.chat_common_data chat_notify = 2;
  inline bool has_chat_notify() const;
  inline void clear_chat_notify();
  static const int kChatNotifyFieldNumber = 2;
  inline const ::proto::common::chat_common_data& chat_notify() const;
  inline ::proto::common::chat_common_data* mutable_chat_notify();
  inline ::proto::common::chat_common_data* release_chat_notify();
  inline void set_allocated_chat_notify(::proto::common::chat_common_data* chat_notify);

  // @@protoc_insertion_point(class_scope:proto.server.eg_chat_get_role_info_request)
 private:
  inline void set_has_chat_notify();
  inline void clear_has_chat_notify();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto::common::chat_param > param_list_;
  ::proto::common::chat_common_data* chat_notify_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static eg_chat_get_role_info_request* default_instance_;
};
// -------------------------------------------------------------------

class ge_chat_get_role_info_reply : public ::google::protobuf::Message {
 public:
  ge_chat_get_role_info_reply();
  virtual ~ge_chat_get_role_info_reply();

  ge_chat_get_role_info_reply(const ge_chat_get_role_info_reply& from);

  inline ge_chat_get_role_info_reply& operator=(const ge_chat_get_role_info_reply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ge_chat_get_role_info_reply& default_instance();

  void Swap(ge_chat_get_role_info_reply* other);

  // implements Message ----------------------------------------------

  ge_chat_get_role_info_reply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ge_chat_get_role_info_reply& from);
  void MergeFrom(const ge_chat_get_role_info_reply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 reply_code = 1;
  inline bool has_reply_code() const;
  inline void clear_reply_code();
  static const int kReplyCodeFieldNumber = 1;
  inline ::google::protobuf::uint32 reply_code() const;
  inline void set_reply_code(::google::protobuf::uint32 value);

  // optional .proto.common.chat_common_role_info chat_role_info = 2;
  inline bool has_chat_role_info() const;
  inline void clear_chat_role_info();
  static const int kChatRoleInfoFieldNumber = 2;
  inline const ::proto::common::chat_common_role_info& chat_role_info() const;
  inline ::proto::common::chat_common_role_info* mutable_chat_role_info();
  inline ::proto::common::chat_common_role_info* release_chat_role_info();
  inline void set_allocated_chat_role_info(::proto::common::chat_common_role_info* chat_role_info);

  // required .proto.common.chat_common_data chat_notify = 3;
  inline bool has_chat_notify() const;
  inline void clear_chat_notify();
  static const int kChatNotifyFieldNumber = 3;
  inline const ::proto::common::chat_common_data& chat_notify() const;
  inline ::proto::common::chat_common_data* mutable_chat_notify();
  inline ::proto::common::chat_common_data* release_chat_notify();
  inline void set_allocated_chat_notify(::proto::common::chat_common_data* chat_notify);

  // @@protoc_insertion_point(class_scope:proto.server.ge_chat_get_role_info_reply)
 private:
  inline void set_has_reply_code();
  inline void clear_has_reply_code();
  inline void set_has_chat_role_info();
  inline void clear_has_chat_role_info();
  inline void set_has_chat_notify();
  inline void clear_has_chat_notify();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::proto::common::chat_common_role_info* chat_role_info_;
  ::proto::common::chat_common_data* chat_notify_;
  ::google::protobuf::uint32 reply_code_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static ge_chat_get_role_info_reply* default_instance_;
};
// -------------------------------------------------------------------

class fr_syn_transfer_info_request : public ::google::protobuf::Message {
 public:
  fr_syn_transfer_info_request();
  virtual ~fr_syn_transfer_info_request();

  fr_syn_transfer_info_request(const fr_syn_transfer_info_request& from);

  inline fr_syn_transfer_info_request& operator=(const fr_syn_transfer_info_request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const fr_syn_transfer_info_request& default_instance();

  void Swap(fr_syn_transfer_info_request* other);

  // implements Message ----------------------------------------------

  fr_syn_transfer_info_request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const fr_syn_transfer_info_request& from);
  void MergeFrom(const fr_syn_transfer_info_request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 server_id = 1;
  inline bool has_server_id() const;
  inline void clear_server_id();
  static const int kServerIdFieldNumber = 1;
  inline ::google::protobuf::uint32 server_id() const;
  inline void set_server_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.server.fr_syn_transfer_info_request)
 private:
  inline void set_has_server_id();
  inline void clear_has_server_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 server_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static fr_syn_transfer_info_request* default_instance_;
};
// -------------------------------------------------------------------

class fr_test_request : public ::google::protobuf::Message {
 public:
  fr_test_request();
  virtual ~fr_test_request();

  fr_test_request(const fr_test_request& from);

  inline fr_test_request& operator=(const fr_test_request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const fr_test_request& default_instance();

  void Swap(fr_test_request* other);

  // implements Message ----------------------------------------------

  fr_test_request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const fr_test_request& from);
  void MergeFrom(const fr_test_request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 test1 = 1;
  inline bool has_test1() const;
  inline void clear_test1();
  static const int kTest1FieldNumber = 1;
  inline ::google::protobuf::uint32 test1() const;
  inline void set_test1(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.server.fr_test_request)
 private:
  inline void set_has_test1();
  inline void clear_has_test1();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 test1_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static fr_test_request* default_instance_;
};
// -------------------------------------------------------------------

class rf_test_reply : public ::google::protobuf::Message {
 public:
  rf_test_reply();
  virtual ~rf_test_reply();

  rf_test_reply(const rf_test_reply& from);

  inline rf_test_reply& operator=(const rf_test_reply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const rf_test_reply& default_instance();

  void Swap(rf_test_reply* other);

  // implements Message ----------------------------------------------

  rf_test_reply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const rf_test_reply& from);
  void MergeFrom(const rf_test_reply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 test1 = 1;
  inline bool has_test1() const;
  inline void clear_test1();
  static const int kTest1FieldNumber = 1;
  inline ::google::protobuf::uint32 test1() const;
  inline void set_test1(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.server.rf_test_reply)
 private:
  inline void set_has_test1();
  inline void clear_has_test1();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 test1_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static rf_test_reply* default_instance_;
};
// -------------------------------------------------------------------

class mail_get_addenda : public ::google::protobuf::Message {
 public:
  mail_get_addenda();
  virtual ~mail_get_addenda();

  mail_get_addenda(const mail_get_addenda& from);

  inline mail_get_addenda& operator=(const mail_get_addenda& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const mail_get_addenda& default_instance();

  void Swap(mail_get_addenda* other);

  // implements Message ----------------------------------------------

  mail_get_addenda* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const mail_get_addenda& from);
  void MergeFrom(const mail_get_addenda& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 mail_id = 1;
  inline bool has_mail_id() const;
  inline void clear_mail_id();
  static const int kMailIdFieldNumber = 1;
  inline ::google::protobuf::uint64 mail_id() const;
  inline void set_mail_id(::google::protobuf::uint64 value);

  // repeated .proto.common.mail_item_obj objs = 2;
  inline int objs_size() const;
  inline void clear_objs();
  static const int kObjsFieldNumber = 2;
  inline const ::proto::common::mail_item_obj& objs(int index) const;
  inline ::proto::common::mail_item_obj* mutable_objs(int index);
  inline ::proto::common::mail_item_obj* add_objs();
  inline const ::google::protobuf::RepeatedPtrField< ::proto::common::mail_item_obj >&
      objs() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto::common::mail_item_obj >*
      mutable_objs();

  // optional uint32 item_type = 3;
  inline bool has_item_type() const;
  inline void clear_item_type();
  static const int kItemTypeFieldNumber = 3;
  inline ::google::protobuf::uint32 item_type() const;
  inline void set_item_type(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.server.mail_get_addenda)
 private:
  inline void set_has_mail_id();
  inline void clear_has_mail_id();
  inline void set_has_item_type();
  inline void clear_has_item_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 mail_id_;
  ::google::protobuf::RepeatedPtrField< ::proto::common::mail_item_obj > objs_;
  ::google::protobuf::uint32 item_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static mail_get_addenda* default_instance_;
};
// -------------------------------------------------------------------

class eg_mail_get_addenda_request : public ::google::protobuf::Message {
 public:
  eg_mail_get_addenda_request();
  virtual ~eg_mail_get_addenda_request();

  eg_mail_get_addenda_request(const eg_mail_get_addenda_request& from);

  inline eg_mail_get_addenda_request& operator=(const eg_mail_get_addenda_request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const eg_mail_get_addenda_request& default_instance();

  void Swap(eg_mail_get_addenda_request* other);

  // implements Message ----------------------------------------------

  eg_mail_get_addenda_request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const eg_mail_get_addenda_request& from);
  void MergeFrom(const eg_mail_get_addenda_request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::uint64 uid() const;
  inline void set_uid(::google::protobuf::uint64 value);

  // repeated .proto.server.mail_get_addenda addendas = 2;
  inline int addendas_size() const;
  inline void clear_addendas();
  static const int kAddendasFieldNumber = 2;
  inline const ::proto::server::mail_get_addenda& addendas(int index) const;
  inline ::proto::server::mail_get_addenda* mutable_addendas(int index);
  inline ::proto::server::mail_get_addenda* add_addendas();
  inline const ::google::protobuf::RepeatedPtrField< ::proto::server::mail_get_addenda >&
      addendas() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto::server::mail_get_addenda >*
      mutable_addendas();

  // @@protoc_insertion_point(class_scope:proto.server.eg_mail_get_addenda_request)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 uid_;
  ::google::protobuf::RepeatedPtrField< ::proto::server::mail_get_addenda > addendas_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static eg_mail_get_addenda_request* default_instance_;
};
// -------------------------------------------------------------------

class mail_get_addenda_back : public ::google::protobuf::Message {
 public:
  mail_get_addenda_back();
  virtual ~mail_get_addenda_back();

  mail_get_addenda_back(const mail_get_addenda_back& from);

  inline mail_get_addenda_back& operator=(const mail_get_addenda_back& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const mail_get_addenda_back& default_instance();

  void Swap(mail_get_addenda_back* other);

  // implements Message ----------------------------------------------

  mail_get_addenda_back* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const mail_get_addenda_back& from);
  void MergeFrom(const mail_get_addenda_back& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 mail_id = 1;
  inline bool has_mail_id() const;
  inline void clear_mail_id();
  static const int kMailIdFieldNumber = 1;
  inline ::google::protobuf::uint64 mail_id() const;
  inline void set_mail_id(::google::protobuf::uint64 value);

  // optional uint32 reply_code = 2;
  inline bool has_reply_code() const;
  inline void clear_reply_code();
  static const int kReplyCodeFieldNumber = 2;
  inline ::google::protobuf::uint32 reply_code() const;
  inline void set_reply_code(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.server.mail_get_addenda_back)
 private:
  inline void set_has_mail_id();
  inline void clear_has_mail_id();
  inline void set_has_reply_code();
  inline void clear_has_reply_code();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 mail_id_;
  ::google::protobuf::uint32 reply_code_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static mail_get_addenda_back* default_instance_;
};
// -------------------------------------------------------------------

class ge_mail_get_addenda_reply : public ::google::protobuf::Message {
 public:
  ge_mail_get_addenda_reply();
  virtual ~ge_mail_get_addenda_reply();

  ge_mail_get_addenda_reply(const ge_mail_get_addenda_reply& from);

  inline ge_mail_get_addenda_reply& operator=(const ge_mail_get_addenda_reply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ge_mail_get_addenda_reply& default_instance();

  void Swap(ge_mail_get_addenda_reply* other);

  // implements Message ----------------------------------------------

  ge_mail_get_addenda_reply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ge_mail_get_addenda_reply& from);
  void MergeFrom(const ge_mail_get_addenda_reply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::uint64 uid() const;
  inline void set_uid(::google::protobuf::uint64 value);

  // repeated .proto.server.mail_get_addenda_back backs = 2;
  inline int backs_size() const;
  inline void clear_backs();
  static const int kBacksFieldNumber = 2;
  inline const ::proto::server::mail_get_addenda_back& backs(int index) const;
  inline ::proto::server::mail_get_addenda_back* mutable_backs(int index);
  inline ::proto::server::mail_get_addenda_back* add_backs();
  inline const ::google::protobuf::RepeatedPtrField< ::proto::server::mail_get_addenda_back >&
      backs() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto::server::mail_get_addenda_back >*
      mutable_backs();

  // @@protoc_insertion_point(class_scope:proto.server.ge_mail_get_addenda_reply)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 uid_;
  ::google::protobuf::RepeatedPtrField< ::proto::server::mail_get_addenda_back > backs_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static ge_mail_get_addenda_reply* default_instance_;
};
// -------------------------------------------------------------------

class ge_mail_new_notify : public ::google::protobuf::Message {
 public:
  ge_mail_new_notify();
  virtual ~ge_mail_new_notify();

  ge_mail_new_notify(const ge_mail_new_notify& from);

  inline ge_mail_new_notify& operator=(const ge_mail_new_notify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ge_mail_new_notify& default_instance();

  void Swap(ge_mail_new_notify* other);

  // implements Message ----------------------------------------------

  ge_mail_new_notify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ge_mail_new_notify& from);
  void MergeFrom(const ge_mail_new_notify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint64 uids = 1;
  inline int uids_size() const;
  inline void clear_uids();
  static const int kUidsFieldNumber = 1;
  inline ::google::protobuf::uint64 uids(int index) const;
  inline void set_uids(int index, ::google::protobuf::uint64 value);
  inline void add_uids(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      uids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_uids();

  // optional .proto.common.em_mail_type mail_type = 2;
  inline bool has_mail_type() const;
  inline void clear_mail_type();
  static const int kMailTypeFieldNumber = 2;
  inline ::proto::common::em_mail_type mail_type() const;
  inline void set_mail_type(::proto::common::em_mail_type value);

  // optional uint64 from_id = 3;
  inline bool has_from_id() const;
  inline void clear_from_id();
  static const int kFromIdFieldNumber = 3;
  inline ::google::protobuf::uint64 from_id() const;
  inline void set_from_id(::google::protobuf::uint64 value);

  // optional string from_name = 4;
  inline bool has_from_name() const;
  inline void clear_from_name();
  static const int kFromNameFieldNumber = 4;
  inline const ::std::string& from_name() const;
  inline void set_from_name(const ::std::string& value);
  inline void set_from_name(const char* value);
  inline void set_from_name(const char* value, size_t size);
  inline ::std::string* mutable_from_name();
  inline ::std::string* release_from_name();
  inline void set_allocated_from_name(::std::string* from_name);

  // optional uint32 content_id = 5;
  inline bool has_content_id() const;
  inline void clear_content_id();
  static const int kContentIdFieldNumber = 5;
  inline ::google::protobuf::uint32 content_id() const;
  inline void set_content_id(::google::protobuf::uint32 value);

  // optional string title = 6;
  inline bool has_title() const;
  inline void clear_title();
  static const int kTitleFieldNumber = 6;
  inline const ::std::string& title() const;
  inline void set_title(const ::std::string& value);
  inline void set_title(const char* value);
  inline void set_title(const char* value, size_t size);
  inline ::std::string* mutable_title();
  inline ::std::string* release_title();
  inline void set_allocated_title(::std::string* title);

  // optional string content = 7;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 7;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const char* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  inline void set_allocated_content(::std::string* content);

  // optional string items = 8;
  inline bool has_items() const;
  inline void clear_items();
  static const int kItemsFieldNumber = 8;
  inline const ::std::string& items() const;
  inline void set_items(const ::std::string& value);
  inline void set_items(const char* value);
  inline void set_items(const char* value, size_t size);
  inline ::std::string* mutable_items();
  inline ::std::string* release_items();
  inline void set_allocated_items(::std::string* items);

  // optional .proto.common.em_mail_get_type get_type = 9;
  inline bool has_get_type() const;
  inline void clear_get_type();
  static const int kGetTypeFieldNumber = 9;
  inline ::proto::common::em_mail_get_type get_type() const;
  inline void set_get_type(::proto::common::em_mail_get_type value);

  // @@protoc_insertion_point(class_scope:proto.server.ge_mail_new_notify)
 private:
  inline void set_has_mail_type();
  inline void clear_has_mail_type();
  inline void set_has_from_id();
  inline void clear_has_from_id();
  inline void set_has_from_name();
  inline void clear_has_from_name();
  inline void set_has_content_id();
  inline void clear_has_content_id();
  inline void set_has_title();
  inline void clear_has_title();
  inline void set_has_content();
  inline void clear_has_content();
  inline void set_has_items();
  inline void clear_has_items();
  inline void set_has_get_type();
  inline void clear_has_get_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > uids_;
  ::google::protobuf::uint64 from_id_;
  int mail_type_;
  ::google::protobuf::uint32 content_id_;
  ::std::string* from_name_;
  ::std::string* title_;
  ::std::string* content_;
  ::std::string* items_;
  int get_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static ge_mail_new_notify* default_instance_;
};
// -------------------------------------------------------------------

class sr_syn_cross_info_notify : public ::google::protobuf::Message {
 public:
  sr_syn_cross_info_notify();
  virtual ~sr_syn_cross_info_notify();

  sr_syn_cross_info_notify(const sr_syn_cross_info_notify& from);

  inline sr_syn_cross_info_notify& operator=(const sr_syn_cross_info_notify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const sr_syn_cross_info_notify& default_instance();

  void Swap(sr_syn_cross_info_notify* other);

  // implements Message ----------------------------------------------

  sr_syn_cross_info_notify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const sr_syn_cross_info_notify& from);
  void MergeFrom(const sr_syn_cross_info_notify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 cross_id = 1;
  inline bool has_cross_id() const;
  inline void clear_cross_id();
  static const int kCrossIdFieldNumber = 1;
  inline ::google::protobuf::uint32 cross_id() const;
  inline void set_cross_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.server.sr_syn_cross_info_notify)
 private:
  inline void set_has_cross_id();
  inline void clear_has_cross_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 cross_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static sr_syn_cross_info_notify* default_instance_;
};
// -------------------------------------------------------------------

class rs_syn_area_info_notify : public ::google::protobuf::Message {
 public:
  rs_syn_area_info_notify();
  virtual ~rs_syn_area_info_notify();

  rs_syn_area_info_notify(const rs_syn_area_info_notify& from);

  inline rs_syn_area_info_notify& operator=(const rs_syn_area_info_notify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const rs_syn_area_info_notify& default_instance();

  void Swap(rs_syn_area_info_notify* other);

  // implements Message ----------------------------------------------

  rs_syn_area_info_notify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const rs_syn_area_info_notify& from);
  void MergeFrom(const rs_syn_area_info_notify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:proto.server.rs_syn_area_info_notify)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static rs_syn_area_info_notify* default_instance_;
};
// -------------------------------------------------------------------

class rs_cross_fight_test_notify : public ::google::protobuf::Message {
 public:
  rs_cross_fight_test_notify();
  virtual ~rs_cross_fight_test_notify();

  rs_cross_fight_test_notify(const rs_cross_fight_test_notify& from);

  inline rs_cross_fight_test_notify& operator=(const rs_cross_fight_test_notify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const rs_cross_fight_test_notify& default_instance();

  void Swap(rs_cross_fight_test_notify* other);

  // implements Message ----------------------------------------------

  rs_cross_fight_test_notify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const rs_cross_fight_test_notify& from);
  void MergeFrom(const rs_cross_fight_test_notify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .proto.common.fight_param fight = 1;
  inline bool has_fight() const;
  inline void clear_fight();
  static const int kFightFieldNumber = 1;
  inline const ::proto::common::fight_param& fight() const;
  inline ::proto::common::fight_param* mutable_fight();
  inline ::proto::common::fight_param* release_fight();
  inline void set_allocated_fight(::proto::common::fight_param* fight);

  // optional .proto.common.role_cross_data user1 = 2;
  inline bool has_user1() const;
  inline void clear_user1();
  static const int kUser1FieldNumber = 2;
  inline const ::proto::common::role_cross_data& user1() const;
  inline ::proto::common::role_cross_data* mutable_user1();
  inline ::proto::common::role_cross_data* release_user1();
  inline void set_allocated_user1(::proto::common::role_cross_data* user1);

  // optional .proto.common.role_cross_data user2 = 3;
  inline bool has_user2() const;
  inline void clear_user2();
  static const int kUser2FieldNumber = 3;
  inline const ::proto::common::role_cross_data& user2() const;
  inline ::proto::common::role_cross_data* mutable_user2();
  inline ::proto::common::role_cross_data* release_user2();
  inline void set_allocated_user2(::proto::common::role_cross_data* user2);

  // @@protoc_insertion_point(class_scope:proto.server.rs_cross_fight_test_notify)
 private:
  inline void set_has_fight();
  inline void clear_has_fight();
  inline void set_has_user1();
  inline void clear_has_user1();
  inline void set_has_user2();
  inline void clear_has_user2();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::proto::common::fight_param* fight_;
  ::proto::common::role_cross_data* user1_;
  ::proto::common::role_cross_data* user2_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static rs_cross_fight_test_notify* default_instance_;
};
// -------------------------------------------------------------------

class gr_cross_fight_test_notify : public ::google::protobuf::Message {
 public:
  gr_cross_fight_test_notify();
  virtual ~gr_cross_fight_test_notify();

  gr_cross_fight_test_notify(const gr_cross_fight_test_notify& from);

  inline gr_cross_fight_test_notify& operator=(const gr_cross_fight_test_notify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gr_cross_fight_test_notify& default_instance();

  void Swap(gr_cross_fight_test_notify* other);

  // implements Message ----------------------------------------------

  gr_cross_fight_test_notify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gr_cross_fight_test_notify& from);
  void MergeFrom(const gr_cross_fight_test_notify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .proto.common.role_cross_data user = 1;
  inline bool has_user() const;
  inline void clear_user();
  static const int kUserFieldNumber = 1;
  inline const ::proto::common::role_cross_data& user() const;
  inline ::proto::common::role_cross_data* mutable_user();
  inline ::proto::common::role_cross_data* release_user();
  inline void set_allocated_user(::proto::common::role_cross_data* user);

  // @@protoc_insertion_point(class_scope:proto.server.gr_cross_fight_test_notify)
 private:
  inline void set_has_user();
  inline void clear_has_user();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::proto::common::role_cross_data* user_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static gr_cross_fight_test_notify* default_instance_;
};
// -------------------------------------------------------------------

class ef_syn_center_info_notify : public ::google::protobuf::Message {
 public:
  ef_syn_center_info_notify();
  virtual ~ef_syn_center_info_notify();

  ef_syn_center_info_notify(const ef_syn_center_info_notify& from);

  inline ef_syn_center_info_notify& operator=(const ef_syn_center_info_notify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ef_syn_center_info_notify& default_instance();

  void Swap(ef_syn_center_info_notify* other);

  // implements Message ----------------------------------------------

  ef_syn_center_info_notify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ef_syn_center_info_notify& from);
  void MergeFrom(const ef_syn_center_info_notify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 server_id = 1;
  inline bool has_server_id() const;
  inline void clear_server_id();
  static const int kServerIdFieldNumber = 1;
  inline ::google::protobuf::uint32 server_id() const;
  inline void set_server_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.server.ef_syn_center_info_notify)
 private:
  inline void set_has_server_id();
  inline void clear_has_server_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 server_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static ef_syn_center_info_notify* default_instance_;
};
// -------------------------------------------------------------------

class ef_test_request : public ::google::protobuf::Message {
 public:
  ef_test_request();
  virtual ~ef_test_request();

  ef_test_request(const ef_test_request& from);

  inline ef_test_request& operator=(const ef_test_request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ef_test_request& default_instance();

  void Swap(ef_test_request* other);

  // implements Message ----------------------------------------------

  ef_test_request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ef_test_request& from);
  void MergeFrom(const ef_test_request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 role_game_server_id = 1;
  inline bool has_role_game_server_id() const;
  inline void clear_role_game_server_id();
  static const int kRoleGameServerIdFieldNumber = 1;
  inline ::google::protobuf::uint32 role_game_server_id() const;
  inline void set_role_game_server_id(::google::protobuf::uint32 value);

  // optional uint32 test1 = 2;
  inline bool has_test1() const;
  inline void clear_test1();
  static const int kTest1FieldNumber = 2;
  inline ::google::protobuf::uint32 test1() const;
  inline void set_test1(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.server.ef_test_request)
 private:
  inline void set_has_role_game_server_id();
  inline void clear_has_role_game_server_id();
  inline void set_has_test1();
  inline void clear_has_test1();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 role_game_server_id_;
  ::google::protobuf::uint32 test1_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static ef_test_request* default_instance_;
};
// -------------------------------------------------------------------

class fe_syn_transfer_info_notify : public ::google::protobuf::Message {
 public:
  fe_syn_transfer_info_notify();
  virtual ~fe_syn_transfer_info_notify();

  fe_syn_transfer_info_notify(const fe_syn_transfer_info_notify& from);

  inline fe_syn_transfer_info_notify& operator=(const fe_syn_transfer_info_notify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const fe_syn_transfer_info_notify& default_instance();

  void Swap(fe_syn_transfer_info_notify* other);

  // implements Message ----------------------------------------------

  fe_syn_transfer_info_notify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const fe_syn_transfer_info_notify& from);
  void MergeFrom(const fe_syn_transfer_info_notify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 server_id = 1;
  inline bool has_server_id() const;
  inline void clear_server_id();
  static const int kServerIdFieldNumber = 1;
  inline ::google::protobuf::uint32 server_id() const;
  inline void set_server_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.server.fe_syn_transfer_info_notify)
 private:
  inline void set_has_server_id();
  inline void clear_has_server_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 server_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static fe_syn_transfer_info_notify* default_instance_;
};
// -------------------------------------------------------------------

class fe_test_reply : public ::google::protobuf::Message {
 public:
  fe_test_reply();
  virtual ~fe_test_reply();

  fe_test_reply(const fe_test_reply& from);

  inline fe_test_reply& operator=(const fe_test_reply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const fe_test_reply& default_instance();

  void Swap(fe_test_reply* other);

  // implements Message ----------------------------------------------

  fe_test_reply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const fe_test_reply& from);
  void MergeFrom(const fe_test_reply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 role_game_server_id = 1;
  inline bool has_role_game_server_id() const;
  inline void clear_role_game_server_id();
  static const int kRoleGameServerIdFieldNumber = 1;
  inline ::google::protobuf::uint32 role_game_server_id() const;
  inline void set_role_game_server_id(::google::protobuf::uint32 value);

  // optional uint32 test1 = 2;
  inline bool has_test1() const;
  inline void clear_test1();
  static const int kTest1FieldNumber = 2;
  inline ::google::protobuf::uint32 test1() const;
  inline void set_test1(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.server.fe_test_reply)
 private:
  inline void set_has_role_game_server_id();
  inline void clear_has_role_game_server_id();
  inline void set_has_test1();
  inline void clear_has_test1();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 role_game_server_id_;
  ::google::protobuf::uint32 test1_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static fe_test_reply* default_instance_;
};
// -------------------------------------------------------------------

class rs_arena_battle_notify : public ::google::protobuf::Message {
 public:
  rs_arena_battle_notify();
  virtual ~rs_arena_battle_notify();

  rs_arena_battle_notify(const rs_arena_battle_notify& from);

  inline rs_arena_battle_notify& operator=(const rs_arena_battle_notify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const rs_arena_battle_notify& default_instance();

  void Swap(rs_arena_battle_notify* other);

  // implements Message ----------------------------------------------

  rs_arena_battle_notify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const rs_arena_battle_notify& from);
  void MergeFrom(const rs_arena_battle_notify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .proto.common.fight_param fight = 1;
  inline bool has_fight() const;
  inline void clear_fight();
  static const int kFightFieldNumber = 1;
  inline const ::proto::common::fight_param& fight() const;
  inline ::proto::common::fight_param* mutable_fight();
  inline ::proto::common::fight_param* release_fight();
  inline void set_allocated_fight(::proto::common::fight_param* fight);

  // optional .proto.common.role_cross_data user1 = 2;
  inline bool has_user1() const;
  inline void clear_user1();
  static const int kUser1FieldNumber = 2;
  inline const ::proto::common::role_cross_data& user1() const;
  inline ::proto::common::role_cross_data* mutable_user1();
  inline ::proto::common::role_cross_data* release_user1();
  inline void set_allocated_user1(::proto::common::role_cross_data* user1);

  // optional .proto.common.role_cross_data user2 = 3;
  inline bool has_user2() const;
  inline void clear_user2();
  static const int kUser2FieldNumber = 3;
  inline const ::proto::common::role_cross_data& user2() const;
  inline ::proto::common::role_cross_data* mutable_user2();
  inline ::proto::common::role_cross_data* release_user2();
  inline void set_allocated_user2(::proto::common::role_cross_data* user2);

  // @@protoc_insertion_point(class_scope:proto.server.rs_arena_battle_notify)
 private:
  inline void set_has_fight();
  inline void clear_has_fight();
  inline void set_has_user1();
  inline void clear_has_user1();
  inline void set_has_user2();
  inline void clear_has_user2();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::proto::common::fight_param* fight_;
  ::proto::common::role_cross_data* user1_;
  ::proto::common::role_cross_data* user2_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static rs_arena_battle_notify* default_instance_;
};
// -------------------------------------------------------------------

class rs_arena_battle_ai_notify : public ::google::protobuf::Message {
 public:
  rs_arena_battle_ai_notify();
  virtual ~rs_arena_battle_ai_notify();

  rs_arena_battle_ai_notify(const rs_arena_battle_ai_notify& from);

  inline rs_arena_battle_ai_notify& operator=(const rs_arena_battle_ai_notify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const rs_arena_battle_ai_notify& default_instance();

  void Swap(rs_arena_battle_ai_notify* other);

  // implements Message ----------------------------------------------

  rs_arena_battle_ai_notify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const rs_arena_battle_ai_notify& from);
  void MergeFrom(const rs_arena_battle_ai_notify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .proto.common.fight_param fight = 1;
  inline bool has_fight() const;
  inline void clear_fight();
  static const int kFightFieldNumber = 1;
  inline const ::proto::common::fight_param& fight() const;
  inline ::proto::common::fight_param* mutable_fight();
  inline ::proto::common::fight_param* release_fight();
  inline void set_allocated_fight(::proto::common::fight_param* fight);

  // optional .proto.common.role_cross_data user1 = 2;
  inline bool has_user1() const;
  inline void clear_user1();
  static const int kUser1FieldNumber = 2;
  inline const ::proto::common::role_cross_data& user1() const;
  inline ::proto::common::role_cross_data* mutable_user1();
  inline ::proto::common::role_cross_data* release_user1();
  inline void set_allocated_user1(::proto::common::role_cross_data* user1);

  // optional .proto.common.mirror_fight_data npc = 3;
  inline bool has_npc() const;
  inline void clear_npc();
  static const int kNpcFieldNumber = 3;
  inline const ::proto::common::mirror_fight_data& npc() const;
  inline ::proto::common::mirror_fight_data* mutable_npc();
  inline ::proto::common::mirror_fight_data* release_npc();
  inline void set_allocated_npc(::proto::common::mirror_fight_data* npc);

  // @@protoc_insertion_point(class_scope:proto.server.rs_arena_battle_ai_notify)
 private:
  inline void set_has_fight();
  inline void clear_has_fight();
  inline void set_has_user1();
  inline void clear_has_user1();
  inline void set_has_npc();
  inline void clear_has_npc();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::proto::common::fight_param* fight_;
  ::proto::common::role_cross_data* user1_;
  ::proto::common::mirror_fight_data* npc_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static rs_arena_battle_ai_notify* default_instance_;
};
// -------------------------------------------------------------------

class sr_arena_battle_result_notify : public ::google::protobuf::Message {
 public:
  sr_arena_battle_result_notify();
  virtual ~sr_arena_battle_result_notify();

  sr_arena_battle_result_notify(const sr_arena_battle_result_notify& from);

  inline sr_arena_battle_result_notify& operator=(const sr_arena_battle_result_notify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const sr_arena_battle_result_notify& default_instance();

  void Swap(sr_arena_battle_result_notify* other);

  // implements Message ----------------------------------------------

  sr_arena_battle_result_notify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const sr_arena_battle_result_notify& from);
  void MergeFrom(const sr_arena_battle_result_notify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .proto.common.obj_single win_obj = 1;
  inline bool has_win_obj() const;
  inline void clear_win_obj();
  static const int kWinObjFieldNumber = 1;
  inline const ::proto::common::obj_single& win_obj() const;
  inline ::proto::common::obj_single* mutable_win_obj();
  inline ::proto::common::obj_single* release_win_obj();
  inline void set_allocated_win_obj(::proto::common::obj_single* win_obj);

  // optional .proto.common.obj_single lose_obj = 2;
  inline bool has_lose_obj() const;
  inline void clear_lose_obj();
  static const int kLoseObjFieldNumber = 2;
  inline const ::proto::common::obj_single& lose_obj() const;
  inline ::proto::common::obj_single* mutable_lose_obj();
  inline ::proto::common::obj_single* release_lose_obj();
  inline void set_allocated_lose_obj(::proto::common::obj_single* lose_obj);

  // optional .proto.common.fight_param fight = 3;
  inline bool has_fight() const;
  inline void clear_fight();
  static const int kFightFieldNumber = 3;
  inline const ::proto::common::fight_param& fight() const;
  inline ::proto::common::fight_param* mutable_fight();
  inline ::proto::common::fight_param* release_fight();
  inline void set_allocated_fight(::proto::common::fight_param* fight);

  // optional .proto.common.hero_data win_heros = 4;
  inline bool has_win_heros() const;
  inline void clear_win_heros();
  static const int kWinHerosFieldNumber = 4;
  inline const ::proto::common::hero_data& win_heros() const;
  inline ::proto::common::hero_data* mutable_win_heros();
  inline ::proto::common::hero_data* release_win_heros();
  inline void set_allocated_win_heros(::proto::common::hero_data* win_heros);

  // optional .proto.common.hero_data lose_heros = 5;
  inline bool has_lose_heros() const;
  inline void clear_lose_heros();
  static const int kLoseHerosFieldNumber = 5;
  inline const ::proto::common::hero_data& lose_heros() const;
  inline ::proto::common::hero_data* mutable_lose_heros();
  inline ::proto::common::hero_data* release_lose_heros();
  inline void set_allocated_lose_heros(::proto::common::hero_data* lose_heros);

  // @@protoc_insertion_point(class_scope:proto.server.sr_arena_battle_result_notify)
 private:
  inline void set_has_win_obj();
  inline void clear_has_win_obj();
  inline void set_has_lose_obj();
  inline void clear_has_lose_obj();
  inline void set_has_fight();
  inline void clear_has_fight();
  inline void set_has_win_heros();
  inline void clear_has_win_heros();
  inline void set_has_lose_heros();
  inline void clear_has_lose_heros();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::proto::common::obj_single* win_obj_;
  ::proto::common::obj_single* lose_obj_;
  ::proto::common::fight_param* fight_;
  ::proto::common::hero_data* win_heros_;
  ::proto::common::hero_data* lose_heros_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static sr_arena_battle_result_notify* default_instance_;
};
// -------------------------------------------------------------------

class gr_arena_match_request : public ::google::protobuf::Message {
 public:
  gr_arena_match_request();
  virtual ~gr_arena_match_request();

  gr_arena_match_request(const gr_arena_match_request& from);

  inline gr_arena_match_request& operator=(const gr_arena_match_request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gr_arena_match_request& default_instance();

  void Swap(gr_arena_match_request* other);

  // implements Message ----------------------------------------------

  gr_arena_match_request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gr_arena_match_request& from);
  void MergeFrom(const gr_arena_match_request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 score = 1;
  inline bool has_score() const;
  inline void clear_score();
  static const int kScoreFieldNumber = 1;
  inline ::google::protobuf::uint32 score() const;
  inline void set_score(::google::protobuf::uint32 value);

  // optional uint32 arena_level = 2;
  inline bool has_arena_level() const;
  inline void clear_arena_level();
  static const int kArenaLevelFieldNumber = 2;
  inline ::google::protobuf::uint32 arena_level() const;
  inline void set_arena_level(::google::protobuf::uint32 value);

  // optional .proto.common.role_cross_data user = 3;
  inline bool has_user() const;
  inline void clear_user();
  static const int kUserFieldNumber = 3;
  inline const ::proto::common::role_cross_data& user() const;
  inline ::proto::common::role_cross_data* mutable_user();
  inline ::proto::common::role_cross_data* release_user();
  inline void set_allocated_user(::proto::common::role_cross_data* user);

  // @@protoc_insertion_point(class_scope:proto.server.gr_arena_match_request)
 private:
  inline void set_has_score();
  inline void clear_has_score();
  inline void set_has_arena_level();
  inline void clear_has_arena_level();
  inline void set_has_user();
  inline void clear_has_user();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 score_;
  ::google::protobuf::uint32 arena_level_;
  ::proto::common::role_cross_data* user_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static gr_arena_match_request* default_instance_;
};
// -------------------------------------------------------------------

class rg_arena_match_reply : public ::google::protobuf::Message {
 public:
  rg_arena_match_reply();
  virtual ~rg_arena_match_reply();

  rg_arena_match_reply(const rg_arena_match_reply& from);

  inline rg_arena_match_reply& operator=(const rg_arena_match_reply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const rg_arena_match_reply& default_instance();

  void Swap(rg_arena_match_reply* other);

  // implements Message ----------------------------------------------

  rg_arena_match_reply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const rg_arena_match_reply& from);
  void MergeFrom(const rg_arena_match_reply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 reply_code = 1;
  inline bool has_reply_code() const;
  inline void clear_reply_code();
  static const int kReplyCodeFieldNumber = 1;
  inline ::google::protobuf::uint32 reply_code() const;
  inline void set_reply_code(::google::protobuf::uint32 value);

  // optional uint32 target_score = 2;
  inline bool has_target_score() const;
  inline void clear_target_score();
  static const int kTargetScoreFieldNumber = 2;
  inline ::google::protobuf::uint32 target_score() const;
  inline void set_target_score(::google::protobuf::uint32 value);

  // optional uint32 target_arena_level = 3;
  inline bool has_target_arena_level() const;
  inline void clear_target_arena_level();
  static const int kTargetArenaLevelFieldNumber = 3;
  inline ::google::protobuf::uint32 target_arena_level() const;
  inline void set_target_arena_level(::google::protobuf::uint32 value);

  // optional uint32 server_id = 4;
  inline bool has_server_id() const;
  inline void clear_server_id();
  static const int kServerIdFieldNumber = 4;
  inline ::google::protobuf::uint32 server_id() const;
  inline void set_server_id(::google::protobuf::uint32 value);

  // optional .proto.common.role_cross_data target_user = 5;
  inline bool has_target_user() const;
  inline void clear_target_user();
  static const int kTargetUserFieldNumber = 5;
  inline const ::proto::common::role_cross_data& target_user() const;
  inline ::proto::common::role_cross_data* mutable_target_user();
  inline ::proto::common::role_cross_data* release_target_user();
  inline void set_allocated_target_user(::proto::common::role_cross_data* target_user);

  // @@protoc_insertion_point(class_scope:proto.server.rg_arena_match_reply)
 private:
  inline void set_has_reply_code();
  inline void clear_has_reply_code();
  inline void set_has_target_score();
  inline void clear_has_target_score();
  inline void set_has_target_arena_level();
  inline void clear_has_target_arena_level();
  inline void set_has_server_id();
  inline void clear_has_server_id();
  inline void set_has_target_user();
  inline void clear_has_target_user();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 reply_code_;
  ::google::protobuf::uint32 target_score_;
  ::google::protobuf::uint32 target_arena_level_;
  ::google::protobuf::uint32 server_id_;
  ::proto::common::role_cross_data* target_user_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static rg_arena_match_reply* default_instance_;
};
// -------------------------------------------------------------------

class gr_arena_cancel_match_request : public ::google::protobuf::Message {
 public:
  gr_arena_cancel_match_request();
  virtual ~gr_arena_cancel_match_request();

  gr_arena_cancel_match_request(const gr_arena_cancel_match_request& from);

  inline gr_arena_cancel_match_request& operator=(const gr_arena_cancel_match_request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gr_arena_cancel_match_request& default_instance();

  void Swap(gr_arena_cancel_match_request* other);

  // implements Message ----------------------------------------------

  gr_arena_cancel_match_request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gr_arena_cancel_match_request& from);
  void MergeFrom(const gr_arena_cancel_match_request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:proto.server.gr_arena_cancel_match_request)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static gr_arena_cancel_match_request* default_instance_;
};
// -------------------------------------------------------------------

class rg_arena_cancel_match_reply : public ::google::protobuf::Message {
 public:
  rg_arena_cancel_match_reply();
  virtual ~rg_arena_cancel_match_reply();

  rg_arena_cancel_match_reply(const rg_arena_cancel_match_reply& from);

  inline rg_arena_cancel_match_reply& operator=(const rg_arena_cancel_match_reply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const rg_arena_cancel_match_reply& default_instance();

  void Swap(rg_arena_cancel_match_reply* other);

  // implements Message ----------------------------------------------

  rg_arena_cancel_match_reply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const rg_arena_cancel_match_reply& from);
  void MergeFrom(const rg_arena_cancel_match_reply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 server_id = 1;
  inline bool has_server_id() const;
  inline void clear_server_id();
  static const int kServerIdFieldNumber = 1;
  inline ::google::protobuf::uint32 server_id() const;
  inline void set_server_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.server.rg_arena_cancel_match_reply)
 private:
  inline void set_has_server_id();
  inline void clear_has_server_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 server_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static rg_arena_cancel_match_reply* default_instance_;
};
// -------------------------------------------------------------------

class rg_arena_battle_result_notify : public ::google::protobuf::Message {
 public:
  rg_arena_battle_result_notify();
  virtual ~rg_arena_battle_result_notify();

  rg_arena_battle_result_notify(const rg_arena_battle_result_notify& from);

  inline rg_arena_battle_result_notify& operator=(const rg_arena_battle_result_notify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const rg_arena_battle_result_notify& default_instance();

  void Swap(rg_arena_battle_result_notify* other);

  // implements Message ----------------------------------------------

  rg_arena_battle_result_notify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const rg_arena_battle_result_notify& from);
  void MergeFrom(const rg_arena_battle_result_notify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 is_win = 1;
  inline bool has_is_win() const;
  inline void clear_is_win();
  static const int kIsWinFieldNumber = 1;
  inline ::google::protobuf::uint32 is_win() const;
  inline void set_is_win(::google::protobuf::uint32 value);

  // optional uint32 target_score = 2;
  inline bool has_target_score() const;
  inline void clear_target_score();
  static const int kTargetScoreFieldNumber = 2;
  inline ::google::protobuf::uint32 target_score() const;
  inline void set_target_score(::google::protobuf::uint32 value);

  // optional uint32 target_arena_level = 3;
  inline bool has_target_arena_level() const;
  inline void clear_target_arena_level();
  static const int kTargetArenaLevelFieldNumber = 3;
  inline ::google::protobuf::uint32 target_arena_level() const;
  inline void set_target_arena_level(::google::protobuf::uint32 value);

  // optional .proto.common.role_cross_data target = 4;
  inline bool has_target() const;
  inline void clear_target();
  static const int kTargetFieldNumber = 4;
  inline const ::proto::common::role_cross_data& target() const;
  inline ::proto::common::role_cross_data* mutable_target();
  inline ::proto::common::role_cross_data* release_target();
  inline void set_allocated_target(::proto::common::role_cross_data* target);

  // optional int32 own_rank_up = 5;
  inline bool has_own_rank_up() const;
  inline void clear_own_rank_up();
  static const int kOwnRankUpFieldNumber = 5;
  inline ::google::protobuf::int32 own_rank_up() const;
  inline void set_own_rank_up(::google::protobuf::int32 value);

  // optional uint32 own_new_rank = 6;
  inline bool has_own_new_rank() const;
  inline void clear_own_new_rank();
  static const int kOwnNewRankFieldNumber = 6;
  inline ::google::protobuf::uint32 own_new_rank() const;
  inline void set_own_new_rank(::google::protobuf::uint32 value);

  // optional uint32 server_id = 7;
  inline bool has_server_id() const;
  inline void clear_server_id();
  static const int kServerIdFieldNumber = 7;
  inline ::google::protobuf::uint32 server_id() const;
  inline void set_server_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.server.rg_arena_battle_result_notify)
 private:
  inline void set_has_is_win();
  inline void clear_has_is_win();
  inline void set_has_target_score();
  inline void clear_has_target_score();
  inline void set_has_target_arena_level();
  inline void clear_has_target_arena_level();
  inline void set_has_target();
  inline void clear_has_target();
  inline void set_has_own_rank_up();
  inline void clear_has_own_rank_up();
  inline void set_has_own_new_rank();
  inline void clear_has_own_new_rank();
  inline void set_has_server_id();
  inline void clear_has_server_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 is_win_;
  ::google::protobuf::uint32 target_score_;
  ::proto::common::role_cross_data* target_;
  ::google::protobuf::uint32 target_arena_level_;
  ::google::protobuf::int32 own_rank_up_;
  ::google::protobuf::uint32 own_new_rank_;
  ::google::protobuf::uint32 server_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static rg_arena_battle_result_notify* default_instance_;
};
// -------------------------------------------------------------------

class gr_get_arena_rank_data_request : public ::google::protobuf::Message {
 public:
  gr_get_arena_rank_data_request();
  virtual ~gr_get_arena_rank_data_request();

  gr_get_arena_rank_data_request(const gr_get_arena_rank_data_request& from);

  inline gr_get_arena_rank_data_request& operator=(const gr_get_arena_rank_data_request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gr_get_arena_rank_data_request& default_instance();

  void Swap(gr_get_arena_rank_data_request* other);

  // implements Message ----------------------------------------------

  gr_get_arena_rank_data_request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gr_get_arena_rank_data_request& from);
  void MergeFrom(const gr_get_arena_rank_data_request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 rank_start_pos = 1;
  inline bool has_rank_start_pos() const;
  inline void clear_rank_start_pos();
  static const int kRankStartPosFieldNumber = 1;
  inline ::google::protobuf::uint32 rank_start_pos() const;
  inline void set_rank_start_pos(::google::protobuf::uint32 value);

  // optional uint32 server_id = 2;
  inline bool has_server_id() const;
  inline void clear_server_id();
  static const int kServerIdFieldNumber = 2;
  inline ::google::protobuf::uint32 server_id() const;
  inline void set_server_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.server.gr_get_arena_rank_data_request)
 private:
  inline void set_has_rank_start_pos();
  inline void clear_has_rank_start_pos();
  inline void set_has_server_id();
  inline void clear_has_server_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 rank_start_pos_;
  ::google::protobuf::uint32 server_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static gr_get_arena_rank_data_request* default_instance_;
};
// -------------------------------------------------------------------

class rg_get_arena_rank_data_reply : public ::google::protobuf::Message {
 public:
  rg_get_arena_rank_data_reply();
  virtual ~rg_get_arena_rank_data_reply();

  rg_get_arena_rank_data_reply(const rg_get_arena_rank_data_reply& from);

  inline rg_get_arena_rank_data_reply& operator=(const rg_get_arena_rank_data_reply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const rg_get_arena_rank_data_reply& default_instance();

  void Swap(rg_get_arena_rank_data_reply* other);

  // implements Message ----------------------------------------------

  rg_get_arena_rank_data_reply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const rg_get_arena_rank_data_reply& from);
  void MergeFrom(const rg_get_arena_rank_data_reply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .proto.common.arena_rank_info_array rand_data = 1;
  inline bool has_rand_data() const;
  inline void clear_rand_data();
  static const int kRandDataFieldNumber = 1;
  inline const ::proto::common::arena_rank_info_array& rand_data() const;
  inline ::proto::common::arena_rank_info_array* mutable_rand_data();
  inline ::proto::common::arena_rank_info_array* release_rand_data();
  inline void set_allocated_rand_data(::proto::common::arena_rank_info_array* rand_data);

  // optional uint32 server_id = 2;
  inline bool has_server_id() const;
  inline void clear_server_id();
  static const int kServerIdFieldNumber = 2;
  inline ::google::protobuf::uint32 server_id() const;
  inline void set_server_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.server.rg_get_arena_rank_data_reply)
 private:
  inline void set_has_rand_data();
  inline void clear_has_rand_data();
  inline void set_has_server_id();
  inline void clear_has_server_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::proto::common::arena_rank_info_array* rand_data_;
  ::google::protobuf::uint32 server_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static rg_get_arena_rank_data_reply* default_instance_;
};
// -------------------------------------------------------------------

class gr_arena_self_rank_request : public ::google::protobuf::Message {
 public:
  gr_arena_self_rank_request();
  virtual ~gr_arena_self_rank_request();

  gr_arena_self_rank_request(const gr_arena_self_rank_request& from);

  inline gr_arena_self_rank_request& operator=(const gr_arena_self_rank_request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gr_arena_self_rank_request& default_instance();

  void Swap(gr_arena_self_rank_request* other);

  // implements Message ----------------------------------------------

  gr_arena_self_rank_request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gr_arena_self_rank_request& from);
  void MergeFrom(const gr_arena_self_rank_request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 server_id = 1;
  inline bool has_server_id() const;
  inline void clear_server_id();
  static const int kServerIdFieldNumber = 1;
  inline ::google::protobuf::uint32 server_id() const;
  inline void set_server_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.server.gr_arena_self_rank_request)
 private:
  inline void set_has_server_id();
  inline void clear_has_server_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 server_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static gr_arena_self_rank_request* default_instance_;
};
// -------------------------------------------------------------------

class rg_arena_self_rank_reply : public ::google::protobuf::Message {
 public:
  rg_arena_self_rank_reply();
  virtual ~rg_arena_self_rank_reply();

  rg_arena_self_rank_reply(const rg_arena_self_rank_reply& from);

  inline rg_arena_self_rank_reply& operator=(const rg_arena_self_rank_reply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const rg_arena_self_rank_reply& default_instance();

  void Swap(rg_arena_self_rank_reply* other);

  // implements Message ----------------------------------------------

  rg_arena_self_rank_reply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const rg_arena_self_rank_reply& from);
  void MergeFrom(const rg_arena_self_rank_reply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 server_id = 1;
  inline bool has_server_id() const;
  inline void clear_server_id();
  static const int kServerIdFieldNumber = 1;
  inline ::google::protobuf::uint32 server_id() const;
  inline void set_server_id(::google::protobuf::uint32 value);

  // optional uint32 rank = 2;
  inline bool has_rank() const;
  inline void clear_rank();
  static const int kRankFieldNumber = 2;
  inline ::google::protobuf::uint32 rank() const;
  inline void set_rank(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.server.rg_arena_self_rank_reply)
 private:
  inline void set_has_server_id();
  inline void clear_has_server_id();
  inline void set_has_rank();
  inline void clear_has_rank();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 server_id_;
  ::google::protobuf::uint32 rank_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static rg_arena_self_rank_reply* default_instance_;
};
// -------------------------------------------------------------------

class ge_arena_fight_data_notify : public ::google::protobuf::Message {
 public:
  ge_arena_fight_data_notify();
  virtual ~ge_arena_fight_data_notify();

  ge_arena_fight_data_notify(const ge_arena_fight_data_notify& from);

  inline ge_arena_fight_data_notify& operator=(const ge_arena_fight_data_notify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ge_arena_fight_data_notify& default_instance();

  void Swap(ge_arena_fight_data_notify* other);

  // implements Message ----------------------------------------------

  ge_arena_fight_data_notify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ge_arena_fight_data_notify& from);
  void MergeFrom(const ge_arena_fight_data_notify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 fight_value = 1;
  inline bool has_fight_value() const;
  inline void clear_fight_value();
  static const int kFightValueFieldNumber = 1;
  inline ::google::protobuf::uint32 fight_value() const;
  inline void set_fight_value(::google::protobuf::uint32 value);

  // optional .proto.common.mirror_fight_data fight_data = 2;
  inline bool has_fight_data() const;
  inline void clear_fight_data();
  static const int kFightDataFieldNumber = 2;
  inline const ::proto::common::mirror_fight_data& fight_data() const;
  inline ::proto::common::mirror_fight_data* mutable_fight_data();
  inline ::proto::common::mirror_fight_data* release_fight_data();
  inline void set_allocated_fight_data(::proto::common::mirror_fight_data* fight_data);

  // @@protoc_insertion_point(class_scope:proto.server.ge_arena_fight_data_notify)
 private:
  inline void set_has_fight_value();
  inline void clear_has_fight_value();
  inline void set_has_fight_data();
  inline void clear_has_fight_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::proto::common::mirror_fight_data* fight_data_;
  ::google::protobuf::uint32 fight_value_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static ge_arena_fight_data_notify* default_instance_;
};
// -------------------------------------------------------------------

class ge_role_online_notify : public ::google::protobuf::Message {
 public:
  ge_role_online_notify();
  virtual ~ge_role_online_notify();

  ge_role_online_notify(const ge_role_online_notify& from);

  inline ge_role_online_notify& operator=(const ge_role_online_notify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ge_role_online_notify& default_instance();

  void Swap(ge_role_online_notify* other);

  // implements Message ----------------------------------------------

  ge_role_online_notify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ge_role_online_notify& from);
  void MergeFrom(const ge_role_online_notify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 online = 1;
  inline bool has_online() const;
  inline void clear_online();
  static const int kOnlineFieldNumber = 1;
  inline ::google::protobuf::uint32 online() const;
  inline void set_online(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.server.ge_role_online_notify)
 private:
  inline void set_has_online();
  inline void clear_has_online();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 online_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static ge_role_online_notify* default_instance_;
};
// -------------------------------------------------------------------

class ge_challenge_request : public ::google::protobuf::Message {
 public:
  ge_challenge_request();
  virtual ~ge_challenge_request();

  ge_challenge_request(const ge_challenge_request& from);

  inline ge_challenge_request& operator=(const ge_challenge_request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ge_challenge_request& default_instance();

  void Swap(ge_challenge_request* other);

  // implements Message ----------------------------------------------

  ge_challenge_request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ge_challenge_request& from);
  void MergeFrom(const ge_challenge_request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 target_uid = 1;
  inline bool has_target_uid() const;
  inline void clear_target_uid();
  static const int kTargetUidFieldNumber = 1;
  inline ::google::protobuf::uint64 target_uid() const;
  inline void set_target_uid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:proto.server.ge_challenge_request)
 private:
  inline void set_has_target_uid();
  inline void clear_has_target_uid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 target_uid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static ge_challenge_request* default_instance_;
};
// -------------------------------------------------------------------

class eg_challenge_reply : public ::google::protobuf::Message {
 public:
  eg_challenge_reply();
  virtual ~eg_challenge_reply();

  eg_challenge_reply(const eg_challenge_reply& from);

  inline eg_challenge_reply& operator=(const eg_challenge_reply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const eg_challenge_reply& default_instance();

  void Swap(eg_challenge_reply* other);

  // implements Message ----------------------------------------------

  eg_challenge_reply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const eg_challenge_reply& from);
  void MergeFrom(const eg_challenge_reply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 reply_code = 1;
  inline bool has_reply_code() const;
  inline void clear_reply_code();
  static const int kReplyCodeFieldNumber = 1;
  inline ::google::protobuf::uint32 reply_code() const;
  inline void set_reply_code(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.server.eg_challenge_reply)
 private:
  inline void set_has_reply_code();
  inline void clear_has_reply_code();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 reply_code_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static eg_challenge_reply* default_instance_;
};
// -------------------------------------------------------------------

class ge_challenge_process_request : public ::google::protobuf::Message {
 public:
  ge_challenge_process_request();
  virtual ~ge_challenge_process_request();

  ge_challenge_process_request(const ge_challenge_process_request& from);

  inline ge_challenge_process_request& operator=(const ge_challenge_process_request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ge_challenge_process_request& default_instance();

  void Swap(ge_challenge_process_request* other);

  // implements Message ----------------------------------------------

  ge_challenge_process_request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ge_challenge_process_request& from);
  void MergeFrom(const ge_challenge_process_request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 process = 1;
  inline bool has_process() const;
  inline void clear_process();
  static const int kProcessFieldNumber = 1;
  inline ::google::protobuf::uint32 process() const;
  inline void set_process(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.server.ge_challenge_process_request)
 private:
  inline void set_has_process();
  inline void clear_has_process();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 process_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static ge_challenge_process_request* default_instance_;
};
// -------------------------------------------------------------------

class eg_challenge_process_reply : public ::google::protobuf::Message {
 public:
  eg_challenge_process_reply();
  virtual ~eg_challenge_process_reply();

  eg_challenge_process_reply(const eg_challenge_process_reply& from);

  inline eg_challenge_process_reply& operator=(const eg_challenge_process_reply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const eg_challenge_process_reply& default_instance();

  void Swap(eg_challenge_process_reply* other);

  // implements Message ----------------------------------------------

  eg_challenge_process_reply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const eg_challenge_process_reply& from);
  void MergeFrom(const eg_challenge_process_reply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 reply_code = 1;
  inline bool has_reply_code() const;
  inline void clear_reply_code();
  static const int kReplyCodeFieldNumber = 1;
  inline ::google::protobuf::uint32 reply_code() const;
  inline void set_reply_code(::google::protobuf::uint32 value);

  // optional uint32 process = 2;
  inline bool has_process() const;
  inline void clear_process();
  static const int kProcessFieldNumber = 2;
  inline ::google::protobuf::uint32 process() const;
  inline void set_process(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.server.eg_challenge_process_reply)
 private:
  inline void set_has_reply_code();
  inline void clear_has_reply_code();
  inline void set_has_process();
  inline void clear_has_process();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 reply_code_;
  ::google::protobuf::uint32 process_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static eg_challenge_process_reply* default_instance_;
};
// -------------------------------------------------------------------

class eg_challenge_fight_request : public ::google::protobuf::Message {
 public:
  eg_challenge_fight_request();
  virtual ~eg_challenge_fight_request();

  eg_challenge_fight_request(const eg_challenge_fight_request& from);

  inline eg_challenge_fight_request& operator=(const eg_challenge_fight_request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const eg_challenge_fight_request& default_instance();

  void Swap(eg_challenge_fight_request* other);

  // implements Message ----------------------------------------------

  eg_challenge_fight_request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const eg_challenge_fight_request& from);
  void MergeFrom(const eg_challenge_fight_request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 target_uid = 1;
  inline bool has_target_uid() const;
  inline void clear_target_uid();
  static const int kTargetUidFieldNumber = 1;
  inline ::google::protobuf::uint64 target_uid() const;
  inline void set_target_uid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:proto.server.eg_challenge_fight_request)
 private:
  inline void set_has_target_uid();
  inline void clear_has_target_uid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 target_uid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static eg_challenge_fight_request* default_instance_;
};
// -------------------------------------------------------------------

class ge_challenge_fight_reply : public ::google::protobuf::Message {
 public:
  ge_challenge_fight_reply();
  virtual ~ge_challenge_fight_reply();

  ge_challenge_fight_reply(const ge_challenge_fight_reply& from);

  inline ge_challenge_fight_reply& operator=(const ge_challenge_fight_reply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ge_challenge_fight_reply& default_instance();

  void Swap(ge_challenge_fight_reply* other);

  // implements Message ----------------------------------------------

  ge_challenge_fight_reply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ge_challenge_fight_reply& from);
  void MergeFrom(const ge_challenge_fight_reply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::uint32 result() const;
  inline void set_result(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.server.ge_challenge_fight_reply)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static ge_challenge_fight_reply* default_instance_;
};
// -------------------------------------------------------------------

class ge_pk_beat_criminal_notify : public ::google::protobuf::Message {
 public:
  ge_pk_beat_criminal_notify();
  virtual ~ge_pk_beat_criminal_notify();

  ge_pk_beat_criminal_notify(const ge_pk_beat_criminal_notify& from);

  inline ge_pk_beat_criminal_notify& operator=(const ge_pk_beat_criminal_notify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ge_pk_beat_criminal_notify& default_instance();

  void Swap(ge_pk_beat_criminal_notify* other);

  // implements Message ----------------------------------------------

  ge_pk_beat_criminal_notify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ge_pk_beat_criminal_notify& from);
  void MergeFrom(const ge_pk_beat_criminal_notify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 criminal_uid = 1;
  inline bool has_criminal_uid() const;
  inline void clear_criminal_uid();
  static const int kCriminalUidFieldNumber = 1;
  inline ::google::protobuf::uint64 criminal_uid() const;
  inline void set_criminal_uid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:proto.server.ge_pk_beat_criminal_notify)
 private:
  inline void set_has_criminal_uid();
  inline void clear_has_criminal_uid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 criminal_uid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static ge_pk_beat_criminal_notify* default_instance_;
};
// -------------------------------------------------------------------

class eg_challenge_transfer_notify : public ::google::protobuf::Message {
 public:
  eg_challenge_transfer_notify();
  virtual ~eg_challenge_transfer_notify();

  eg_challenge_transfer_notify(const eg_challenge_transfer_notify& from);

  inline eg_challenge_transfer_notify& operator=(const eg_challenge_transfer_notify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const eg_challenge_transfer_notify& default_instance();

  void Swap(eg_challenge_transfer_notify* other);

  // implements Message ----------------------------------------------

  eg_challenge_transfer_notify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const eg_challenge_transfer_notify& from);
  void MergeFrom(const eg_challenge_transfer_notify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:proto.server.eg_challenge_transfer_notify)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static eg_challenge_transfer_notify* default_instance_;
};
// -------------------------------------------------------------------

class eg_king_war_state_notify : public ::google::protobuf::Message {
 public:
  eg_king_war_state_notify();
  virtual ~eg_king_war_state_notify();

  eg_king_war_state_notify(const eg_king_war_state_notify& from);

  inline eg_king_war_state_notify& operator=(const eg_king_war_state_notify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const eg_king_war_state_notify& default_instance();

  void Swap(eg_king_war_state_notify* other);

  // implements Message ----------------------------------------------

  eg_king_war_state_notify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const eg_king_war_state_notify& from);
  void MergeFrom(const eg_king_war_state_notify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 country_id = 1;
  inline bool has_country_id() const;
  inline void clear_country_id();
  static const int kCountryIdFieldNumber = 1;
  inline ::google::protobuf::uint32 country_id() const;
  inline void set_country_id(::google::protobuf::uint32 value);

  // optional .proto.common.king_war_state state = 2 [default = king_war_state_end];
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 2;
  inline ::proto::common::king_war_state state() const;
  inline void set_state(::proto::common::king_war_state value);

  // optional uint64 def_family_id = 3;
  inline bool has_def_family_id() const;
  inline void clear_def_family_id();
  static const int kDefFamilyIdFieldNumber = 3;
  inline ::google::protobuf::uint64 def_family_id() const;
  inline void set_def_family_id(::google::protobuf::uint64 value);

  // optional string def_family_name = 4;
  inline bool has_def_family_name() const;
  inline void clear_def_family_name();
  static const int kDefFamilyNameFieldNumber = 4;
  inline const ::std::string& def_family_name() const;
  inline void set_def_family_name(const ::std::string& value);
  inline void set_def_family_name(const char* value);
  inline void set_def_family_name(const char* value, size_t size);
  inline ::std::string* mutable_def_family_name();
  inline ::std::string* release_def_family_name();
  inline void set_allocated_def_family_name(::std::string* def_family_name);

  // optional uint64 att_family_id = 5;
  inline bool has_att_family_id() const;
  inline void clear_att_family_id();
  static const int kAttFamilyIdFieldNumber = 5;
  inline ::google::protobuf::uint64 att_family_id() const;
  inline void set_att_family_id(::google::protobuf::uint64 value);

  // optional string att_family_name = 6;
  inline bool has_att_family_name() const;
  inline void clear_att_family_name();
  static const int kAttFamilyNameFieldNumber = 6;
  inline const ::std::string& att_family_name() const;
  inline void set_att_family_name(const ::std::string& value);
  inline void set_att_family_name(const char* value);
  inline void set_att_family_name(const char* value, size_t size);
  inline ::std::string* mutable_att_family_name();
  inline ::std::string* release_att_family_name();
  inline void set_allocated_att_family_name(::std::string* att_family_name);

  // optional uint64 def_help_family = 7;
  inline bool has_def_help_family() const;
  inline void clear_def_help_family();
  static const int kDefHelpFamilyFieldNumber = 7;
  inline ::google::protobuf::uint64 def_help_family() const;
  inline void set_def_help_family(::google::protobuf::uint64 value);

  // optional string def_help_family_name = 8;
  inline bool has_def_help_family_name() const;
  inline void clear_def_help_family_name();
  static const int kDefHelpFamilyNameFieldNumber = 8;
  inline const ::std::string& def_help_family_name() const;
  inline void set_def_help_family_name(const ::std::string& value);
  inline void set_def_help_family_name(const char* value);
  inline void set_def_help_family_name(const char* value, size_t size);
  inline ::std::string* mutable_def_help_family_name();
  inline ::std::string* release_def_help_family_name();
  inline void set_allocated_def_help_family_name(::std::string* def_help_family_name);

  // optional uint64 att_help_family = 9;
  inline bool has_att_help_family() const;
  inline void clear_att_help_family();
  static const int kAttHelpFamilyFieldNumber = 9;
  inline ::google::protobuf::uint64 att_help_family() const;
  inline void set_att_help_family(::google::protobuf::uint64 value);

  // optional string att_help_family_name = 10;
  inline bool has_att_help_family_name() const;
  inline void clear_att_help_family_name();
  static const int kAttHelpFamilyNameFieldNumber = 10;
  inline const ::std::string& att_help_family_name() const;
  inline void set_att_help_family_name(const ::std::string& value);
  inline void set_att_help_family_name(const char* value);
  inline void set_att_help_family_name(const char* value, size_t size);
  inline ::std::string* mutable_att_help_family_name();
  inline ::std::string* release_att_help_family_name();
  inline void set_allocated_att_help_family_name(::std::string* att_help_family_name);

  // @@protoc_insertion_point(class_scope:proto.server.eg_king_war_state_notify)
 private:
  inline void set_has_country_id();
  inline void clear_has_country_id();
  inline void set_has_state();
  inline void clear_has_state();
  inline void set_has_def_family_id();
  inline void clear_has_def_family_id();
  inline void set_has_def_family_name();
  inline void clear_has_def_family_name();
  inline void set_has_att_family_id();
  inline void clear_has_att_family_id();
  inline void set_has_att_family_name();
  inline void clear_has_att_family_name();
  inline void set_has_def_help_family();
  inline void clear_has_def_help_family();
  inline void set_has_def_help_family_name();
  inline void clear_has_def_help_family_name();
  inline void set_has_att_help_family();
  inline void clear_has_att_help_family();
  inline void set_has_att_help_family_name();
  inline void clear_has_att_help_family_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 country_id_;
  int state_;
  ::google::protobuf::uint64 def_family_id_;
  ::std::string* def_family_name_;
  ::google::protobuf::uint64 att_family_id_;
  ::std::string* att_family_name_;
  ::google::protobuf::uint64 def_help_family_;
  ::std::string* def_help_family_name_;
  ::google::protobuf::uint64 att_help_family_;
  ::std::string* att_help_family_name_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static eg_king_war_state_notify* default_instance_;
};
// -------------------------------------------------------------------

class eg_king_war_time_end_notify : public ::google::protobuf::Message {
 public:
  eg_king_war_time_end_notify();
  virtual ~eg_king_war_time_end_notify();

  eg_king_war_time_end_notify(const eg_king_war_time_end_notify& from);

  inline eg_king_war_time_end_notify& operator=(const eg_king_war_time_end_notify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const eg_king_war_time_end_notify& default_instance();

  void Swap(eg_king_war_time_end_notify* other);

  // implements Message ----------------------------------------------

  eg_king_war_time_end_notify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const eg_king_war_time_end_notify& from);
  void MergeFrom(const eg_king_war_time_end_notify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 country_id = 1;
  inline bool has_country_id() const;
  inline void clear_country_id();
  static const int kCountryIdFieldNumber = 1;
  inline ::google::protobuf::uint32 country_id() const;
  inline void set_country_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.server.eg_king_war_time_end_notify)
 private:
  inline void set_has_country_id();
  inline void clear_has_country_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 country_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static eg_king_war_time_end_notify* default_instance_;
};
// -------------------------------------------------------------------

class king_war_personal : public ::google::protobuf::Message {
 public:
  king_war_personal();
  virtual ~king_war_personal();

  king_war_personal(const king_war_personal& from);

  inline king_war_personal& operator=(const king_war_personal& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const king_war_personal& default_instance();

  void Swap(king_war_personal* other);

  // implements Message ----------------------------------------------

  king_war_personal* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const king_war_personal& from);
  void MergeFrom(const king_war_personal& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::uint64 uid() const;
  inline void set_uid(::google::protobuf::uint64 value);

  // optional uint64 exploit = 2;
  inline bool has_exploit() const;
  inline void clear_exploit();
  static const int kExploitFieldNumber = 2;
  inline ::google::protobuf::uint64 exploit() const;
  inline void set_exploit(::google::protobuf::uint64 value);

  // optional uint32 rank = 3;
  inline bool has_rank() const;
  inline void clear_rank();
  static const int kRankFieldNumber = 3;
  inline ::google::protobuf::uint32 rank() const;
  inline void set_rank(::google::protobuf::uint32 value);

  // optional uint32 rank_level = 4;
  inline bool has_rank_level() const;
  inline void clear_rank_level();
  static const int kRankLevelFieldNumber = 4;
  inline ::google::protobuf::uint32 rank_level() const;
  inline void set_rank_level(::google::protobuf::uint32 value);

  // optional uint32 exploit_level = 5;
  inline bool has_exploit_level() const;
  inline void clear_exploit_level();
  static const int kExploitLevelFieldNumber = 5;
  inline ::google::protobuf::uint32 exploit_level() const;
  inline void set_exploit_level(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.server.king_war_personal)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_exploit();
  inline void clear_has_exploit();
  inline void set_has_rank();
  inline void clear_has_rank();
  inline void set_has_rank_level();
  inline void clear_has_rank_level();
  inline void set_has_exploit_level();
  inline void clear_has_exploit_level();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 uid_;
  ::google::protobuf::uint64 exploit_;
  ::google::protobuf::uint32 rank_;
  ::google::protobuf::uint32 rank_level_;
  ::google::protobuf::uint32 exploit_level_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static king_war_personal* default_instance_;
};
// -------------------------------------------------------------------

class ge_king_war_result_notify : public ::google::protobuf::Message {
 public:
  ge_king_war_result_notify();
  virtual ~ge_king_war_result_notify();

  ge_king_war_result_notify(const ge_king_war_result_notify& from);

  inline ge_king_war_result_notify& operator=(const ge_king_war_result_notify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ge_king_war_result_notify& default_instance();

  void Swap(ge_king_war_result_notify* other);

  // implements Message ----------------------------------------------

  ge_king_war_result_notify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ge_king_war_result_notify& from);
  void MergeFrom(const ge_king_war_result_notify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 country_id = 1;
  inline bool has_country_id() const;
  inline void clear_country_id();
  static const int kCountryIdFieldNumber = 1;
  inline ::google::protobuf::uint32 country_id() const;
  inline void set_country_id(::google::protobuf::uint32 value);

  // optional uint64 win_family_id = 2;
  inline bool has_win_family_id() const;
  inline void clear_win_family_id();
  static const int kWinFamilyIdFieldNumber = 2;
  inline ::google::protobuf::uint64 win_family_id() const;
  inline void set_win_family_id(::google::protobuf::uint64 value);

  // repeated .proto.server.king_war_personal all_roles = 3;
  inline int all_roles_size() const;
  inline void clear_all_roles();
  static const int kAllRolesFieldNumber = 3;
  inline const ::proto::server::king_war_personal& all_roles(int index) const;
  inline ::proto::server::king_war_personal* mutable_all_roles(int index);
  inline ::proto::server::king_war_personal* add_all_roles();
  inline const ::google::protobuf::RepeatedPtrField< ::proto::server::king_war_personal >&
      all_roles() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto::server::king_war_personal >*
      mutable_all_roles();

  // @@protoc_insertion_point(class_scope:proto.server.ge_king_war_result_notify)
 private:
  inline void set_has_country_id();
  inline void clear_has_country_id();
  inline void set_has_win_family_id();
  inline void clear_has_win_family_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 win_family_id_;
  ::google::protobuf::RepeatedPtrField< ::proto::server::king_war_personal > all_roles_;
  ::google::protobuf::uint32 country_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static ge_king_war_result_notify* default_instance_;
};
// -------------------------------------------------------------------

class ge_king_war_scene_user_num_notify : public ::google::protobuf::Message {
 public:
  ge_king_war_scene_user_num_notify();
  virtual ~ge_king_war_scene_user_num_notify();

  ge_king_war_scene_user_num_notify(const ge_king_war_scene_user_num_notify& from);

  inline ge_king_war_scene_user_num_notify& operator=(const ge_king_war_scene_user_num_notify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ge_king_war_scene_user_num_notify& default_instance();

  void Swap(ge_king_war_scene_user_num_notify* other);

  // implements Message ----------------------------------------------

  ge_king_war_scene_user_num_notify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ge_king_war_scene_user_num_notify& from);
  void MergeFrom(const ge_king_war_scene_user_num_notify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 country_id = 1;
  inline bool has_country_id() const;
  inline void clear_country_id();
  static const int kCountryIdFieldNumber = 1;
  inline ::google::protobuf::uint32 country_id() const;
  inline void set_country_id(::google::protobuf::uint32 value);

  // optional uint32 att_num = 2;
  inline bool has_att_num() const;
  inline void clear_att_num();
  static const int kAttNumFieldNumber = 2;
  inline ::google::protobuf::uint32 att_num() const;
  inline void set_att_num(::google::protobuf::uint32 value);

  // optional uint32 def_num = 3;
  inline bool has_def_num() const;
  inline void clear_def_num();
  static const int kDefNumFieldNumber = 3;
  inline ::google::protobuf::uint32 def_num() const;
  inline void set_def_num(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.server.ge_king_war_scene_user_num_notify)
 private:
  inline void set_has_country_id();
  inline void clear_has_country_id();
  inline void set_has_att_num();
  inline void clear_has_att_num();
  inline void set_has_def_num();
  inline void clear_has_def_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 country_id_;
  ::google::protobuf::uint32 att_num_;
  ::google::protobuf::uint32 def_num_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static ge_king_war_scene_user_num_notify* default_instance_;
};
// -------------------------------------------------------------------

class eg_check_user_buy_goods_request : public ::google::protobuf::Message {
 public:
  eg_check_user_buy_goods_request();
  virtual ~eg_check_user_buy_goods_request();

  eg_check_user_buy_goods_request(const eg_check_user_buy_goods_request& from);

  inline eg_check_user_buy_goods_request& operator=(const eg_check_user_buy_goods_request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const eg_check_user_buy_goods_request& default_instance();

  void Swap(eg_check_user_buy_goods_request* other);

  // implements Message ----------------------------------------------

  eg_check_user_buy_goods_request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const eg_check_user_buy_goods_request& from);
  void MergeFrom(const eg_check_user_buy_goods_request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::uint64 uid() const;
  inline void set_uid(::google::protobuf::uint64 value);

  // optional .proto.common.user_buy_goods info = 2;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 2;
  inline const ::proto::common::user_buy_goods& info() const;
  inline ::proto::common::user_buy_goods* mutable_info();
  inline ::proto::common::user_buy_goods* release_info();
  inline void set_allocated_info(::proto::common::user_buy_goods* info);

  // optional uint32 purchased = 3;
  inline bool has_purchased() const;
  inline void clear_purchased();
  static const int kPurchasedFieldNumber = 3;
  inline ::google::protobuf::uint32 purchased() const;
  inline void set_purchased(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.server.eg_check_user_buy_goods_request)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_info();
  inline void clear_has_info();
  inline void set_has_purchased();
  inline void clear_has_purchased();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 uid_;
  ::proto::common::user_buy_goods* info_;
  ::google::protobuf::uint32 purchased_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static eg_check_user_buy_goods_request* default_instance_;
};
// -------------------------------------------------------------------

class ge_check_user_buy_goods_reply : public ::google::protobuf::Message {
 public:
  ge_check_user_buy_goods_reply();
  virtual ~ge_check_user_buy_goods_reply();

  ge_check_user_buy_goods_reply(const ge_check_user_buy_goods_reply& from);

  inline ge_check_user_buy_goods_reply& operator=(const ge_check_user_buy_goods_reply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ge_check_user_buy_goods_reply& default_instance();

  void Swap(ge_check_user_buy_goods_reply* other);

  // implements Message ----------------------------------------------

  ge_check_user_buy_goods_reply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ge_check_user_buy_goods_reply& from);
  void MergeFrom(const ge_check_user_buy_goods_reply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::uint64 uid() const;
  inline void set_uid(::google::protobuf::uint64 value);

  // optional .proto.common.user_buy_goods info = 2;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 2;
  inline const ::proto::common::user_buy_goods& info() const;
  inline ::proto::common::user_buy_goods* mutable_info();
  inline ::proto::common::user_buy_goods* release_info();
  inline void set_allocated_info(::proto::common::user_buy_goods* info);

  // optional .proto.common.role_change_data change_data = 3;
  inline bool has_change_data() const;
  inline void clear_change_data();
  static const int kChangeDataFieldNumber = 3;
  inline const ::proto::common::role_change_data& change_data() const;
  inline ::proto::common::role_change_data* mutable_change_data();
  inline ::proto::common::role_change_data* release_change_data();
  inline void set_allocated_change_data(::proto::common::role_change_data* change_data);

  // optional uint32 purchased = 4;
  inline bool has_purchased() const;
  inline void clear_purchased();
  static const int kPurchasedFieldNumber = 4;
  inline ::google::protobuf::uint32 purchased() const;
  inline void set_purchased(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.server.ge_check_user_buy_goods_reply)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_info();
  inline void clear_has_info();
  inline void set_has_change_data();
  inline void clear_has_change_data();
  inline void set_has_purchased();
  inline void clear_has_purchased();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 uid_;
  ::proto::common::user_buy_goods* info_;
  ::proto::common::role_change_data* change_data_;
  ::google::protobuf::uint32 purchased_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static ge_check_user_buy_goods_reply* default_instance_;
};
// -------------------------------------------------------------------

class eg_give_user_goods_notify : public ::google::protobuf::Message {
 public:
  eg_give_user_goods_notify();
  virtual ~eg_give_user_goods_notify();

  eg_give_user_goods_notify(const eg_give_user_goods_notify& from);

  inline eg_give_user_goods_notify& operator=(const eg_give_user_goods_notify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const eg_give_user_goods_notify& default_instance();

  void Swap(eg_give_user_goods_notify* other);

  // implements Message ----------------------------------------------

  eg_give_user_goods_notify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const eg_give_user_goods_notify& from);
  void MergeFrom(const eg_give_user_goods_notify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::uint64 uid() const;
  inline void set_uid(::google::protobuf::uint64 value);

  // optional uint32 reply_code = 2;
  inline bool has_reply_code() const;
  inline void clear_reply_code();
  static const int kReplyCodeFieldNumber = 2;
  inline ::google::protobuf::uint32 reply_code() const;
  inline void set_reply_code(::google::protobuf::uint32 value);

  // optional .proto.common.user_buy_goods info = 3;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 3;
  inline const ::proto::common::user_buy_goods& info() const;
  inline ::proto::common::user_buy_goods* mutable_info();
  inline ::proto::common::user_buy_goods* release_info();
  inline void set_allocated_info(::proto::common::user_buy_goods* info);

  // optional uint32 purchased = 4;
  inline bool has_purchased() const;
  inline void clear_purchased();
  static const int kPurchasedFieldNumber = 4;
  inline ::google::protobuf::uint32 purchased() const;
  inline void set_purchased(::google::protobuf::uint32 value);

  // optional .proto.common.role_change_data change_data = 5;
  inline bool has_change_data() const;
  inline void clear_change_data();
  static const int kChangeDataFieldNumber = 5;
  inline const ::proto::common::role_change_data& change_data() const;
  inline ::proto::common::role_change_data* mutable_change_data();
  inline ::proto::common::role_change_data* release_change_data();
  inline void set_allocated_change_data(::proto::common::role_change_data* change_data);

  // optional .proto.common.shop_goods shop_goods_data = 6;
  inline bool has_shop_goods_data() const;
  inline void clear_shop_goods_data();
  static const int kShopGoodsDataFieldNumber = 6;
  inline const ::proto::common::shop_goods& shop_goods_data() const;
  inline ::proto::common::shop_goods* mutable_shop_goods_data();
  inline ::proto::common::shop_goods* release_shop_goods_data();
  inline void set_allocated_shop_goods_data(::proto::common::shop_goods* shop_goods_data);

  // optional .proto.common.user_goods user_goods_data = 7;
  inline bool has_user_goods_data() const;
  inline void clear_user_goods_data();
  static const int kUserGoodsDataFieldNumber = 7;
  inline const ::proto::common::user_goods& user_goods_data() const;
  inline ::proto::common::user_goods* mutable_user_goods_data();
  inline ::proto::common::user_goods* release_user_goods_data();
  inline void set_allocated_user_goods_data(::proto::common::user_goods* user_goods_data);

  // @@protoc_insertion_point(class_scope:proto.server.eg_give_user_goods_notify)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_reply_code();
  inline void clear_has_reply_code();
  inline void set_has_info();
  inline void clear_has_info();
  inline void set_has_purchased();
  inline void clear_has_purchased();
  inline void set_has_change_data();
  inline void clear_has_change_data();
  inline void set_has_shop_goods_data();
  inline void clear_has_shop_goods_data();
  inline void set_has_user_goods_data();
  inline void clear_has_user_goods_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 uid_;
  ::proto::common::user_buy_goods* info_;
  ::google::protobuf::uint32 reply_code_;
  ::google::protobuf::uint32 purchased_;
  ::proto::common::role_change_data* change_data_;
  ::proto::common::shop_goods* shop_goods_data_;
  ::proto::common::user_goods* user_goods_data_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static eg_give_user_goods_notify* default_instance_;
};
// -------------------------------------------------------------------

class er_world_cup_data_request : public ::google::protobuf::Message {
 public:
  er_world_cup_data_request();
  virtual ~er_world_cup_data_request();

  er_world_cup_data_request(const er_world_cup_data_request& from);

  inline er_world_cup_data_request& operator=(const er_world_cup_data_request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const er_world_cup_data_request& default_instance();

  void Swap(er_world_cup_data_request* other);

  // implements Message ----------------------------------------------

  er_world_cup_data_request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const er_world_cup_data_request& from);
  void MergeFrom(const er_world_cup_data_request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 server_id = 1;
  inline bool has_server_id() const;
  inline void clear_server_id();
  static const int kServerIdFieldNumber = 1;
  inline ::google::protobuf::uint32 server_id() const;
  inline void set_server_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.server.er_world_cup_data_request)
 private:
  inline void set_has_server_id();
  inline void clear_has_server_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 server_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static er_world_cup_data_request* default_instance_;
};
// -------------------------------------------------------------------

class re_world_cup_data_reply : public ::google::protobuf::Message {
 public:
  re_world_cup_data_reply();
  virtual ~re_world_cup_data_reply();

  re_world_cup_data_reply(const re_world_cup_data_reply& from);

  inline re_world_cup_data_reply& operator=(const re_world_cup_data_reply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const re_world_cup_data_reply& default_instance();

  void Swap(re_world_cup_data_reply* other);

  // implements Message ----------------------------------------------

  re_world_cup_data_reply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const re_world_cup_data_reply& from);
  void MergeFrom(const re_world_cup_data_reply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .proto.common.world_cup_data world_cup_info = 1;
  inline bool has_world_cup_info() const;
  inline void clear_world_cup_info();
  static const int kWorldCupInfoFieldNumber = 1;
  inline const ::proto::common::world_cup_data& world_cup_info() const;
  inline ::proto::common::world_cup_data* mutable_world_cup_info();
  inline ::proto::common::world_cup_data* release_world_cup_info();
  inline void set_allocated_world_cup_info(::proto::common::world_cup_data* world_cup_info);

  // optional uint32 server_id = 2;
  inline bool has_server_id() const;
  inline void clear_server_id();
  static const int kServerIdFieldNumber = 2;
  inline ::google::protobuf::uint32 server_id() const;
  inline void set_server_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.server.re_world_cup_data_reply)
 private:
  inline void set_has_world_cup_info();
  inline void clear_has_world_cup_info();
  inline void set_has_server_id();
  inline void clear_has_server_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::proto::common::world_cup_data* world_cup_info_;
  ::google::protobuf::uint32 server_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static re_world_cup_data_reply* default_instance_;
};
// -------------------------------------------------------------------

class re_world_cup_battle_notify : public ::google::protobuf::Message {
 public:
  re_world_cup_battle_notify();
  virtual ~re_world_cup_battle_notify();

  re_world_cup_battle_notify(const re_world_cup_battle_notify& from);

  inline re_world_cup_battle_notify& operator=(const re_world_cup_battle_notify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const re_world_cup_battle_notify& default_instance();

  void Swap(re_world_cup_battle_notify* other);

  // implements Message ----------------------------------------------

  re_world_cup_battle_notify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const re_world_cup_battle_notify& from);
  void MergeFrom(const re_world_cup_battle_notify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .proto.common.world_cup_battle battle_info = 1;
  inline bool has_battle_info() const;
  inline void clear_battle_info();
  static const int kBattleInfoFieldNumber = 1;
  inline const ::proto::common::world_cup_battle& battle_info() const;
  inline ::proto::common::world_cup_battle* mutable_battle_info();
  inline ::proto::common::world_cup_battle* release_battle_info();
  inline void set_allocated_battle_info(::proto::common::world_cup_battle* battle_info);

  // @@protoc_insertion_point(class_scope:proto.server.re_world_cup_battle_notify)
 private:
  inline void set_has_battle_info();
  inline void clear_has_battle_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::proto::common::world_cup_battle* battle_info_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static re_world_cup_battle_notify* default_instance_;
};
// -------------------------------------------------------------------

class re_world_cup_mail_notify : public ::google::protobuf::Message {
 public:
  re_world_cup_mail_notify();
  virtual ~re_world_cup_mail_notify();

  re_world_cup_mail_notify(const re_world_cup_mail_notify& from);

  inline re_world_cup_mail_notify& operator=(const re_world_cup_mail_notify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const re_world_cup_mail_notify& default_instance();

  void Swap(re_world_cup_mail_notify* other);

  // implements Message ----------------------------------------------

  re_world_cup_mail_notify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const re_world_cup_mail_notify& from);
  void MergeFrom(const re_world_cup_mail_notify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 server_id = 1;
  inline bool has_server_id() const;
  inline void clear_server_id();
  static const int kServerIdFieldNumber = 1;
  inline ::google::protobuf::uint32 server_id() const;
  inline void set_server_id(::google::protobuf::uint32 value);

  // optional string player_name = 2;
  inline bool has_player_name() const;
  inline void clear_player_name();
  static const int kPlayerNameFieldNumber = 2;
  inline const ::std::string& player_name() const;
  inline void set_player_name(const ::std::string& value);
  inline void set_player_name(const char* value);
  inline void set_player_name(const char* value, size_t size);
  inline ::std::string* mutable_player_name();
  inline ::std::string* release_player_name();
  inline void set_allocated_player_name(::std::string* player_name);

  // optional uint32 round = 3;
  inline bool has_round() const;
  inline void clear_round();
  static const int kRoundFieldNumber = 3;
  inline ::google::protobuf::uint32 round() const;
  inline void set_round(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.server.re_world_cup_mail_notify)
 private:
  inline void set_has_server_id();
  inline void clear_has_server_id();
  inline void set_has_player_name();
  inline void clear_has_player_name();
  inline void set_has_round();
  inline void clear_has_round();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* player_name_;
  ::google::protobuf::uint32 server_id_;
  ::google::protobuf::uint32 round_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static re_world_cup_mail_notify* default_instance_;
};
// -------------------------------------------------------------------

class re_world_cup_coming_quarter_notify : public ::google::protobuf::Message {
 public:
  re_world_cup_coming_quarter_notify();
  virtual ~re_world_cup_coming_quarter_notify();

  re_world_cup_coming_quarter_notify(const re_world_cup_coming_quarter_notify& from);

  inline re_world_cup_coming_quarter_notify& operator=(const re_world_cup_coming_quarter_notify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const re_world_cup_coming_quarter_notify& default_instance();

  void Swap(re_world_cup_coming_quarter_notify* other);

  // implements Message ----------------------------------------------

  re_world_cup_coming_quarter_notify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const re_world_cup_coming_quarter_notify& from);
  void MergeFrom(const re_world_cup_coming_quarter_notify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 server_id = 1;
  inline bool has_server_id() const;
  inline void clear_server_id();
  static const int kServerIdFieldNumber = 1;
  inline ::google::protobuf::uint32 server_id() const;
  inline void set_server_id(::google::protobuf::uint32 value);

  // optional uint32 time_remain = 2;
  inline bool has_time_remain() const;
  inline void clear_time_remain();
  static const int kTimeRemainFieldNumber = 2;
  inline ::google::protobuf::uint32 time_remain() const;
  inline void set_time_remain(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.server.re_world_cup_coming_quarter_notify)
 private:
  inline void set_has_server_id();
  inline void clear_has_server_id();
  inline void set_has_time_remain();
  inline void clear_has_time_remain();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 server_id_;
  ::google::protobuf::uint32 time_remain_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static re_world_cup_coming_quarter_notify* default_instance_;
};
// -------------------------------------------------------------------

class re_world_cup_coming_soon_notify : public ::google::protobuf::Message {
 public:
  re_world_cup_coming_soon_notify();
  virtual ~re_world_cup_coming_soon_notify();

  re_world_cup_coming_soon_notify(const re_world_cup_coming_soon_notify& from);

  inline re_world_cup_coming_soon_notify& operator=(const re_world_cup_coming_soon_notify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const re_world_cup_coming_soon_notify& default_instance();

  void Swap(re_world_cup_coming_soon_notify* other);

  // implements Message ----------------------------------------------

  re_world_cup_coming_soon_notify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const re_world_cup_coming_soon_notify& from);
  void MergeFrom(const re_world_cup_coming_soon_notify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 server_id = 1;
  inline bool has_server_id() const;
  inline void clear_server_id();
  static const int kServerIdFieldNumber = 1;
  inline ::google::protobuf::uint32 server_id() const;
  inline void set_server_id(::google::protobuf::uint32 value);

  // optional uint32 time_remain = 2;
  inline bool has_time_remain() const;
  inline void clear_time_remain();
  static const int kTimeRemainFieldNumber = 2;
  inline ::google::protobuf::uint32 time_remain() const;
  inline void set_time_remain(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.server.re_world_cup_coming_soon_notify)
 private:
  inline void set_has_server_id();
  inline void clear_has_server_id();
  inline void set_has_time_remain();
  inline void clear_has_time_remain();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 server_id_;
  ::google::protobuf::uint32 time_remain_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static re_world_cup_coming_soon_notify* default_instance_;
};
// -------------------------------------------------------------------

class re_world_cup_ready_notify : public ::google::protobuf::Message {
 public:
  re_world_cup_ready_notify();
  virtual ~re_world_cup_ready_notify();

  re_world_cup_ready_notify(const re_world_cup_ready_notify& from);

  inline re_world_cup_ready_notify& operator=(const re_world_cup_ready_notify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const re_world_cup_ready_notify& default_instance();

  void Swap(re_world_cup_ready_notify* other);

  // implements Message ----------------------------------------------

  re_world_cup_ready_notify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const re_world_cup_ready_notify& from);
  void MergeFrom(const re_world_cup_ready_notify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 server_id = 1;
  inline bool has_server_id() const;
  inline void clear_server_id();
  static const int kServerIdFieldNumber = 1;
  inline ::google::protobuf::uint32 server_id() const;
  inline void set_server_id(::google::protobuf::uint32 value);

  // optional .proto.common.world_cup_battle battle_info = 2;
  inline bool has_battle_info() const;
  inline void clear_battle_info();
  static const int kBattleInfoFieldNumber = 2;
  inline const ::proto::common::world_cup_battle& battle_info() const;
  inline ::proto::common::world_cup_battle* mutable_battle_info();
  inline ::proto::common::world_cup_battle* release_battle_info();
  inline void set_allocated_battle_info(::proto::common::world_cup_battle* battle_info);

  // optional uint32 time_remain = 3;
  inline bool has_time_remain() const;
  inline void clear_time_remain();
  static const int kTimeRemainFieldNumber = 3;
  inline ::google::protobuf::uint32 time_remain() const;
  inline void set_time_remain(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.server.re_world_cup_ready_notify)
 private:
  inline void set_has_server_id();
  inline void clear_has_server_id();
  inline void set_has_battle_info();
  inline void clear_has_battle_info();
  inline void set_has_time_remain();
  inline void clear_has_time_remain();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::proto::common::world_cup_battle* battle_info_;
  ::google::protobuf::uint32 server_id_;
  ::google::protobuf::uint32 time_remain_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static re_world_cup_ready_notify* default_instance_;
};
// -------------------------------------------------------------------

class gr_world_cup_play_request : public ::google::protobuf::Message {
 public:
  gr_world_cup_play_request();
  virtual ~gr_world_cup_play_request();

  gr_world_cup_play_request(const gr_world_cup_play_request& from);

  inline gr_world_cup_play_request& operator=(const gr_world_cup_play_request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gr_world_cup_play_request& default_instance();

  void Swap(gr_world_cup_play_request* other);

  // implements Message ----------------------------------------------

  gr_world_cup_play_request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gr_world_cup_play_request& from);
  void MergeFrom(const gr_world_cup_play_request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 server_id = 1;
  inline bool has_server_id() const;
  inline void clear_server_id();
  static const int kServerIdFieldNumber = 1;
  inline ::google::protobuf::uint32 server_id() const;
  inline void set_server_id(::google::protobuf::uint32 value);

  // optional .proto.common.role_cross_data rcd = 2;
  inline bool has_rcd() const;
  inline void clear_rcd();
  static const int kRcdFieldNumber = 2;
  inline const ::proto::common::role_cross_data& rcd() const;
  inline ::proto::common::role_cross_data* mutable_rcd();
  inline ::proto::common::role_cross_data* release_rcd();
  inline void set_allocated_rcd(::proto::common::role_cross_data* rcd);

  // @@protoc_insertion_point(class_scope:proto.server.gr_world_cup_play_request)
 private:
  inline void set_has_server_id();
  inline void clear_has_server_id();
  inline void set_has_rcd();
  inline void clear_has_rcd();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::proto::common::role_cross_data* rcd_;
  ::google::protobuf::uint32 server_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static gr_world_cup_play_request* default_instance_;
};
// -------------------------------------------------------------------

class rg_world_cup_play_reply : public ::google::protobuf::Message {
 public:
  rg_world_cup_play_reply();
  virtual ~rg_world_cup_play_reply();

  rg_world_cup_play_reply(const rg_world_cup_play_reply& from);

  inline rg_world_cup_play_reply& operator=(const rg_world_cup_play_reply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const rg_world_cup_play_reply& default_instance();

  void Swap(rg_world_cup_play_reply* other);

  // implements Message ----------------------------------------------

  rg_world_cup_play_reply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const rg_world_cup_play_reply& from);
  void MergeFrom(const rg_world_cup_play_reply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 server_id = 1;
  inline bool has_server_id() const;
  inline void clear_server_id();
  static const int kServerIdFieldNumber = 1;
  inline ::google::protobuf::uint32 server_id() const;
  inline void set_server_id(::google::protobuf::uint32 value);

  // optional uint32 reply_code = 2;
  inline bool has_reply_code() const;
  inline void clear_reply_code();
  static const int kReplyCodeFieldNumber = 2;
  inline ::google::protobuf::uint32 reply_code() const;
  inline void set_reply_code(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.server.rg_world_cup_play_reply)
 private:
  inline void set_has_server_id();
  inline void clear_has_server_id();
  inline void set_has_reply_code();
  inline void clear_has_reply_code();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 server_id_;
  ::google::protobuf::uint32 reply_code_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static rg_world_cup_play_reply* default_instance_;
};
// -------------------------------------------------------------------

class re_world_cup_update_notify : public ::google::protobuf::Message {
 public:
  re_world_cup_update_notify();
  virtual ~re_world_cup_update_notify();

  re_world_cup_update_notify(const re_world_cup_update_notify& from);

  inline re_world_cup_update_notify& operator=(const re_world_cup_update_notify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const re_world_cup_update_notify& default_instance();

  void Swap(re_world_cup_update_notify* other);

  // implements Message ----------------------------------------------

  re_world_cup_update_notify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const re_world_cup_update_notify& from);
  void MergeFrom(const re_world_cup_update_notify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .proto.common.world_cup_battle battle_info = 1;
  inline bool has_battle_info() const;
  inline void clear_battle_info();
  static const int kBattleInfoFieldNumber = 1;
  inline const ::proto::common::world_cup_battle& battle_info() const;
  inline ::proto::common::world_cup_battle* mutable_battle_info();
  inline ::proto::common::world_cup_battle* release_battle_info();
  inline void set_allocated_battle_info(::proto::common::world_cup_battle* battle_info);

  // @@protoc_insertion_point(class_scope:proto.server.re_world_cup_update_notify)
 private:
  inline void set_has_battle_info();
  inline void clear_has_battle_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::proto::common::world_cup_battle* battle_info_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static re_world_cup_update_notify* default_instance_;
};
// -------------------------------------------------------------------

class er_world_cup_bet_data_request : public ::google::protobuf::Message {
 public:
  er_world_cup_bet_data_request();
  virtual ~er_world_cup_bet_data_request();

  er_world_cup_bet_data_request(const er_world_cup_bet_data_request& from);

  inline er_world_cup_bet_data_request& operator=(const er_world_cup_bet_data_request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const er_world_cup_bet_data_request& default_instance();

  void Swap(er_world_cup_bet_data_request* other);

  // implements Message ----------------------------------------------

  er_world_cup_bet_data_request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const er_world_cup_bet_data_request& from);
  void MergeFrom(const er_world_cup_bet_data_request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 server_id = 1;
  inline bool has_server_id() const;
  inline void clear_server_id();
  static const int kServerIdFieldNumber = 1;
  inline ::google::protobuf::uint32 server_id() const;
  inline void set_server_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.server.er_world_cup_bet_data_request)
 private:
  inline void set_has_server_id();
  inline void clear_has_server_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 server_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static er_world_cup_bet_data_request* default_instance_;
};
// -------------------------------------------------------------------

class re_world_cup_bet_data_reply : public ::google::protobuf::Message {
 public:
  re_world_cup_bet_data_reply();
  virtual ~re_world_cup_bet_data_reply();

  re_world_cup_bet_data_reply(const re_world_cup_bet_data_reply& from);

  inline re_world_cup_bet_data_reply& operator=(const re_world_cup_bet_data_reply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const re_world_cup_bet_data_reply& default_instance();

  void Swap(re_world_cup_bet_data_reply* other);

  // implements Message ----------------------------------------------

  re_world_cup_bet_data_reply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const re_world_cup_bet_data_reply& from);
  void MergeFrom(const re_world_cup_bet_data_reply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 server_id = 1;
  inline bool has_server_id() const;
  inline void clear_server_id();
  static const int kServerIdFieldNumber = 1;
  inline ::google::protobuf::uint32 server_id() const;
  inline void set_server_id(::google::protobuf::uint32 value);

  // repeated .proto.common.world_cup_bet bet_data = 2;
  inline int bet_data_size() const;
  inline void clear_bet_data();
  static const int kBetDataFieldNumber = 2;
  inline const ::proto::common::world_cup_bet& bet_data(int index) const;
  inline ::proto::common::world_cup_bet* mutable_bet_data(int index);
  inline ::proto::common::world_cup_bet* add_bet_data();
  inline const ::google::protobuf::RepeatedPtrField< ::proto::common::world_cup_bet >&
      bet_data() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto::common::world_cup_bet >*
      mutable_bet_data();

  // @@protoc_insertion_point(class_scope:proto.server.re_world_cup_bet_data_reply)
 private:
  inline void set_has_server_id();
  inline void clear_has_server_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto::common::world_cup_bet > bet_data_;
  ::google::protobuf::uint32 server_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static re_world_cup_bet_data_reply* default_instance_;
};
// -------------------------------------------------------------------

class gr_world_cup_bet_request : public ::google::protobuf::Message {
 public:
  gr_world_cup_bet_request();
  virtual ~gr_world_cup_bet_request();

  gr_world_cup_bet_request(const gr_world_cup_bet_request& from);

  inline gr_world_cup_bet_request& operator=(const gr_world_cup_bet_request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gr_world_cup_bet_request& default_instance();

  void Swap(gr_world_cup_bet_request* other);

  // implements Message ----------------------------------------------

  gr_world_cup_bet_request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gr_world_cup_bet_request& from);
  void MergeFrom(const gr_world_cup_bet_request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 battle_uid = 1;
  inline bool has_battle_uid() const;
  inline void clear_battle_uid();
  static const int kBattleUidFieldNumber = 1;
  inline ::google::protobuf::uint64 battle_uid() const;
  inline void set_battle_uid(::google::protobuf::uint64 value);

  // optional uint64 winner = 2;
  inline bool has_winner() const;
  inline void clear_winner();
  static const int kWinnerFieldNumber = 2;
  inline ::google::protobuf::uint64 winner() const;
  inline void set_winner(::google::protobuf::uint64 value);

  // optional uint32 odds = 3;
  inline bool has_odds() const;
  inline void clear_odds();
  static const int kOddsFieldNumber = 3;
  inline ::google::protobuf::uint32 odds() const;
  inline void set_odds(::google::protobuf::uint32 value);

  // optional uint32 bet = 4;
  inline bool has_bet() const;
  inline void clear_bet();
  static const int kBetFieldNumber = 4;
  inline ::google::protobuf::uint32 bet() const;
  inline void set_bet(::google::protobuf::uint32 value);

  // optional uint32 server_id = 5;
  inline bool has_server_id() const;
  inline void clear_server_id();
  static const int kServerIdFieldNumber = 5;
  inline ::google::protobuf::uint32 server_id() const;
  inline void set_server_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.server.gr_world_cup_bet_request)
 private:
  inline void set_has_battle_uid();
  inline void clear_has_battle_uid();
  inline void set_has_winner();
  inline void clear_has_winner();
  inline void set_has_odds();
  inline void clear_has_odds();
  inline void set_has_bet();
  inline void clear_has_bet();
  inline void set_has_server_id();
  inline void clear_has_server_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 battle_uid_;
  ::google::protobuf::uint64 winner_;
  ::google::protobuf::uint32 odds_;
  ::google::protobuf::uint32 bet_;
  ::google::protobuf::uint32 server_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static gr_world_cup_bet_request* default_instance_;
};
// -------------------------------------------------------------------

class rg_world_cup_bet_reply : public ::google::protobuf::Message {
 public:
  rg_world_cup_bet_reply();
  virtual ~rg_world_cup_bet_reply();

  rg_world_cup_bet_reply(const rg_world_cup_bet_reply& from);

  inline rg_world_cup_bet_reply& operator=(const rg_world_cup_bet_reply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const rg_world_cup_bet_reply& default_instance();

  void Swap(rg_world_cup_bet_reply* other);

  // implements Message ----------------------------------------------

  rg_world_cup_bet_reply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const rg_world_cup_bet_reply& from);
  void MergeFrom(const rg_world_cup_bet_reply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 reply_code = 1;
  inline bool has_reply_code() const;
  inline void clear_reply_code();
  static const int kReplyCodeFieldNumber = 1;
  inline ::google::protobuf::uint32 reply_code() const;
  inline void set_reply_code(::google::protobuf::uint32 value);

  // optional uint32 odds = 2;
  inline bool has_odds() const;
  inline void clear_odds();
  static const int kOddsFieldNumber = 2;
  inline ::google::protobuf::uint32 odds() const;
  inline void set_odds(::google::protobuf::uint32 value);

  // optional uint32 bet = 3;
  inline bool has_bet() const;
  inline void clear_bet();
  static const int kBetFieldNumber = 3;
  inline ::google::protobuf::uint32 bet() const;
  inline void set_bet(::google::protobuf::uint32 value);

  // optional .proto.common.world_cup_bet self_bet = 4;
  inline bool has_self_bet() const;
  inline void clear_self_bet();
  static const int kSelfBetFieldNumber = 4;
  inline const ::proto::common::world_cup_bet& self_bet() const;
  inline ::proto::common::world_cup_bet* mutable_self_bet();
  inline ::proto::common::world_cup_bet* release_self_bet();
  inline void set_allocated_self_bet(::proto::common::world_cup_bet* self_bet);

  // optional uint32 server_id = 5;
  inline bool has_server_id() const;
  inline void clear_server_id();
  static const int kServerIdFieldNumber = 5;
  inline ::google::protobuf::uint32 server_id() const;
  inline void set_server_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.server.rg_world_cup_bet_reply)
 private:
  inline void set_has_reply_code();
  inline void clear_has_reply_code();
  inline void set_has_odds();
  inline void clear_has_odds();
  inline void set_has_bet();
  inline void clear_has_bet();
  inline void set_has_self_bet();
  inline void clear_has_self_bet();
  inline void set_has_server_id();
  inline void clear_has_server_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 reply_code_;
  ::google::protobuf::uint32 odds_;
  ::proto::common::world_cup_bet* self_bet_;
  ::google::protobuf::uint32 bet_;
  ::google::protobuf::uint32 server_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static rg_world_cup_bet_reply* default_instance_;
};
// -------------------------------------------------------------------

class gr_world_cup_bet_reward_request : public ::google::protobuf::Message {
 public:
  gr_world_cup_bet_reward_request();
  virtual ~gr_world_cup_bet_reward_request();

  gr_world_cup_bet_reward_request(const gr_world_cup_bet_reward_request& from);

  inline gr_world_cup_bet_reward_request& operator=(const gr_world_cup_bet_reward_request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gr_world_cup_bet_reward_request& default_instance();

  void Swap(gr_world_cup_bet_reward_request* other);

  // implements Message ----------------------------------------------

  gr_world_cup_bet_reward_request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gr_world_cup_bet_reward_request& from);
  void MergeFrom(const gr_world_cup_bet_reward_request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 battle_uid = 1;
  inline bool has_battle_uid() const;
  inline void clear_battle_uid();
  static const int kBattleUidFieldNumber = 1;
  inline ::google::protobuf::uint64 battle_uid() const;
  inline void set_battle_uid(::google::protobuf::uint64 value);

  // optional uint32 server_id = 2;
  inline bool has_server_id() const;
  inline void clear_server_id();
  static const int kServerIdFieldNumber = 2;
  inline ::google::protobuf::uint32 server_id() const;
  inline void set_server_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.server.gr_world_cup_bet_reward_request)
 private:
  inline void set_has_battle_uid();
  inline void clear_has_battle_uid();
  inline void set_has_server_id();
  inline void clear_has_server_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 battle_uid_;
  ::google::protobuf::uint32 server_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static gr_world_cup_bet_reward_request* default_instance_;
};
// -------------------------------------------------------------------

class rg_world_cup_bet_reward_reply : public ::google::protobuf::Message {
 public:
  rg_world_cup_bet_reward_reply();
  virtual ~rg_world_cup_bet_reward_reply();

  rg_world_cup_bet_reward_reply(const rg_world_cup_bet_reward_reply& from);

  inline rg_world_cup_bet_reward_reply& operator=(const rg_world_cup_bet_reward_reply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const rg_world_cup_bet_reward_reply& default_instance();

  void Swap(rg_world_cup_bet_reward_reply* other);

  // implements Message ----------------------------------------------

  rg_world_cup_bet_reward_reply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const rg_world_cup_bet_reward_reply& from);
  void MergeFrom(const rg_world_cup_bet_reward_reply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 reply_code = 1;
  inline bool has_reply_code() const;
  inline void clear_reply_code();
  static const int kReplyCodeFieldNumber = 1;
  inline ::google::protobuf::uint32 reply_code() const;
  inline void set_reply_code(::google::protobuf::uint32 value);

  // optional uint32 reward = 2;
  inline bool has_reward() const;
  inline void clear_reward();
  static const int kRewardFieldNumber = 2;
  inline ::google::protobuf::uint32 reward() const;
  inline void set_reward(::google::protobuf::uint32 value);

  // optional uint32 server_id = 3;
  inline bool has_server_id() const;
  inline void clear_server_id();
  static const int kServerIdFieldNumber = 3;
  inline ::google::protobuf::uint32 server_id() const;
  inline void set_server_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.server.rg_world_cup_bet_reward_reply)
 private:
  inline void set_has_reply_code();
  inline void clear_has_reply_code();
  inline void set_has_reward();
  inline void clear_has_reward();
  inline void set_has_server_id();
  inline void clear_has_server_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 reply_code_;
  ::google::protobuf::uint32 reward_;
  ::google::protobuf::uint32 server_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static rg_world_cup_bet_reward_reply* default_instance_;
};
// -------------------------------------------------------------------

class er_world_cup_odds_request : public ::google::protobuf::Message {
 public:
  er_world_cup_odds_request();
  virtual ~er_world_cup_odds_request();

  er_world_cup_odds_request(const er_world_cup_odds_request& from);

  inline er_world_cup_odds_request& operator=(const er_world_cup_odds_request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const er_world_cup_odds_request& default_instance();

  void Swap(er_world_cup_odds_request* other);

  // implements Message ----------------------------------------------

  er_world_cup_odds_request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const er_world_cup_odds_request& from);
  void MergeFrom(const er_world_cup_odds_request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 server_id = 1;
  inline bool has_server_id() const;
  inline void clear_server_id();
  static const int kServerIdFieldNumber = 1;
  inline ::google::protobuf::uint32 server_id() const;
  inline void set_server_id(::google::protobuf::uint32 value);

  // optional uint64 battle_uid = 2;
  inline bool has_battle_uid() const;
  inline void clear_battle_uid();
  static const int kBattleUidFieldNumber = 2;
  inline ::google::protobuf::uint64 battle_uid() const;
  inline void set_battle_uid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:proto.server.er_world_cup_odds_request)
 private:
  inline void set_has_server_id();
  inline void clear_has_server_id();
  inline void set_has_battle_uid();
  inline void clear_has_battle_uid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 battle_uid_;
  ::google::protobuf::uint32 server_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static er_world_cup_odds_request* default_instance_;
};
// -------------------------------------------------------------------

class re_world_cup_odds_reply : public ::google::protobuf::Message {
 public:
  re_world_cup_odds_reply();
  virtual ~re_world_cup_odds_reply();

  re_world_cup_odds_reply(const re_world_cup_odds_reply& from);

  inline re_world_cup_odds_reply& operator=(const re_world_cup_odds_reply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const re_world_cup_odds_reply& default_instance();

  void Swap(re_world_cup_odds_reply* other);

  // implements Message ----------------------------------------------

  re_world_cup_odds_reply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const re_world_cup_odds_reply& from);
  void MergeFrom(const re_world_cup_odds_reply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 server_id = 1;
  inline bool has_server_id() const;
  inline void clear_server_id();
  static const int kServerIdFieldNumber = 1;
  inline ::google::protobuf::uint32 server_id() const;
  inline void set_server_id(::google::protobuf::uint32 value);

  // optional .proto.common.world_cup_odds odds_data = 2;
  inline bool has_odds_data() const;
  inline void clear_odds_data();
  static const int kOddsDataFieldNumber = 2;
  inline const ::proto::common::world_cup_odds& odds_data() const;
  inline ::proto::common::world_cup_odds* mutable_odds_data();
  inline ::proto::common::world_cup_odds* release_odds_data();
  inline void set_allocated_odds_data(::proto::common::world_cup_odds* odds_data);

  // @@protoc_insertion_point(class_scope:proto.server.re_world_cup_odds_reply)
 private:
  inline void set_has_server_id();
  inline void clear_has_server_id();
  inline void set_has_odds_data();
  inline void clear_has_odds_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::proto::common::world_cup_odds* odds_data_;
  ::google::protobuf::uint32 server_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static re_world_cup_odds_reply* default_instance_;
};
// -------------------------------------------------------------------

class eg_red_point_notify : public ::google::protobuf::Message {
 public:
  eg_red_point_notify();
  virtual ~eg_red_point_notify();

  eg_red_point_notify(const eg_red_point_notify& from);

  inline eg_red_point_notify& operator=(const eg_red_point_notify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const eg_red_point_notify& default_instance();

  void Swap(eg_red_point_notify* other);

  // implements Message ----------------------------------------------

  eg_red_point_notify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const eg_red_point_notify& from);
  void MergeFrom(const eg_red_point_notify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::uint64 uid() const;
  inline void set_uid(::google::protobuf::uint64 value);

  // optional .proto.common.RED_POINT_TYPE red_type = 2;
  inline bool has_red_type() const;
  inline void clear_red_type();
  static const int kRedTypeFieldNumber = 2;
  inline ::proto::common::RED_POINT_TYPE red_type() const;
  inline void set_red_type(::proto::common::RED_POINT_TYPE value);

  // repeated uint32 param = 3;
  inline int param_size() const;
  inline void clear_param();
  static const int kParamFieldNumber = 3;
  inline ::google::protobuf::uint32 param(int index) const;
  inline void set_param(int index, ::google::protobuf::uint32 value);
  inline void add_param(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      param() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_param();

  // @@protoc_insertion_point(class_scope:proto.server.eg_red_point_notify)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_red_type();
  inline void clear_has_red_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 uid_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > param_;
  int red_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static eg_red_point_notify* default_instance_;
};
// -------------------------------------------------------------------

class troop_shadow_base : public ::google::protobuf::Message {
 public:
  troop_shadow_base();
  virtual ~troop_shadow_base();

  troop_shadow_base(const troop_shadow_base& from);

  inline troop_shadow_base& operator=(const troop_shadow_base& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const troop_shadow_base& default_instance();

  void Swap(troop_shadow_base* other);

  // implements Message ----------------------------------------------

  troop_shadow_base* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const troop_shadow_base& from);
  void MergeFrom(const troop_shadow_base& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 role_uid = 1;
  inline bool has_role_uid() const;
  inline void clear_role_uid();
  static const int kRoleUidFieldNumber = 1;
  inline ::google::protobuf::uint64 role_uid() const;
  inline void set_role_uid(::google::protobuf::uint64 value);

  // optional .proto.common.role_blob_data blob = 2;
  inline bool has_blob() const;
  inline void clear_blob();
  static const int kBlobFieldNumber = 2;
  inline const ::proto::common::role_blob_data& blob() const;
  inline ::proto::common::role_blob_data* mutable_blob();
  inline ::proto::common::role_blob_data* release_blob();
  inline void set_allocated_blob(::proto::common::role_blob_data* blob);

  // optional uint32 country = 3;
  inline bool has_country() const;
  inline void clear_country();
  static const int kCountryFieldNumber = 3;
  inline ::google::protobuf::uint32 country() const;
  inline void set_country(::google::protobuf::uint32 value);

  // optional uint32 plugin_modle = 4;
  inline bool has_plugin_modle() const;
  inline void clear_plugin_modle();
  static const int kPluginModleFieldNumber = 4;
  inline ::google::protobuf::uint32 plugin_modle() const;
  inline void set_plugin_modle(::google::protobuf::uint32 value);

  // optional uint32 country_officer = 5;
  inline bool has_country_officer() const;
  inline void clear_country_officer();
  static const int kCountryOfficerFieldNumber = 5;
  inline ::google::protobuf::uint32 country_officer() const;
  inline void set_country_officer(::google::protobuf::uint32 value);

  // optional uint64 family_id = 6;
  inline bool has_family_id() const;
  inline void clear_family_id();
  static const int kFamilyIdFieldNumber = 6;
  inline ::google::protobuf::uint64 family_id() const;
  inline void set_family_id(::google::protobuf::uint64 value);

  // optional string family_name = 7;
  inline bool has_family_name() const;
  inline void clear_family_name();
  static const int kFamilyNameFieldNumber = 7;
  inline const ::std::string& family_name() const;
  inline void set_family_name(const ::std::string& value);
  inline void set_family_name(const char* value);
  inline void set_family_name(const char* value, size_t size);
  inline ::std::string* mutable_family_name();
  inline ::std::string* release_family_name();
  inline void set_allocated_family_name(::std::string* family_name);

  // optional uint32 family_officer = 8;
  inline bool has_family_officer() const;
  inline void clear_family_officer();
  static const int kFamilyOfficerFieldNumber = 8;
  inline ::google::protobuf::uint32 family_officer() const;
  inline void set_family_officer(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.server.troop_shadow_base)
 private:
  inline void set_has_role_uid();
  inline void clear_has_role_uid();
  inline void set_has_blob();
  inline void clear_has_blob();
  inline void set_has_country();
  inline void clear_has_country();
  inline void set_has_plugin_modle();
  inline void clear_has_plugin_modle();
  inline void set_has_country_officer();
  inline void clear_has_country_officer();
  inline void set_has_family_id();
  inline void clear_has_family_id();
  inline void set_has_family_name();
  inline void clear_has_family_name();
  inline void set_has_family_officer();
  inline void clear_has_family_officer();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 role_uid_;
  ::proto::common::role_blob_data* blob_;
  ::google::protobuf::uint32 country_;
  ::google::protobuf::uint32 plugin_modle_;
  ::google::protobuf::uint64 family_id_;
  ::google::protobuf::uint32 country_officer_;
  ::google::protobuf::uint32 family_officer_;
  ::std::string* family_name_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static troop_shadow_base* default_instance_;
};
// -------------------------------------------------------------------

class troop_extra_info : public ::google::protobuf::Message {
 public:
  troop_extra_info();
  virtual ~troop_extra_info();

  troop_extra_info(const troop_extra_info& from);

  inline troop_extra_info& operator=(const troop_extra_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const troop_extra_info& default_instance();

  void Swap(troop_extra_info* other);

  // implements Message ----------------------------------------------

  troop_extra_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const troop_extra_info& from);
  void MergeFrom(const troop_extra_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 tutor_tid = 1;
  inline bool has_tutor_tid() const;
  inline void clear_tutor_tid();
  static const int kTutorTidFieldNumber = 1;
  inline ::google::protobuf::uint32 tutor_tid() const;
  inline void set_tutor_tid(::google::protobuf::uint32 value);

  // optional .proto.server.troop_shadow_base shadow_info = 2;
  inline bool has_shadow_info() const;
  inline void clear_shadow_info();
  static const int kShadowInfoFieldNumber = 2;
  inline const ::proto::server::troop_shadow_base& shadow_info() const;
  inline ::proto::server::troop_shadow_base* mutable_shadow_info();
  inline ::proto::server::troop_shadow_base* release_shadow_info();
  inline void set_allocated_shadow_info(::proto::server::troop_shadow_base* shadow_info);

  // @@protoc_insertion_point(class_scope:proto.server.troop_extra_info)
 private:
  inline void set_has_tutor_tid();
  inline void clear_has_tutor_tid();
  inline void set_has_shadow_info();
  inline void clear_has_shadow_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::proto::server::troop_shadow_base* shadow_info_;
  ::google::protobuf::uint32 tutor_tid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static troop_extra_info* default_instance_;
};
// -------------------------------------------------------------------

class troop_server_data : public ::google::protobuf::Message {
 public:
  troop_server_data();
  virtual ~troop_server_data();

  troop_server_data(const troop_server_data& from);

  inline troop_server_data& operator=(const troop_server_data& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const troop_server_data& default_instance();

  void Swap(troop_server_data* other);

  // implements Message ----------------------------------------------

  troop_server_data* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const troop_server_data& from);
  void MergeFrom(const troop_server_data& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .proto.common.troop_data base = 1;
  inline bool has_base() const;
  inline void clear_base();
  static const int kBaseFieldNumber = 1;
  inline const ::proto::common::troop_data& base() const;
  inline ::proto::common::troop_data* mutable_base();
  inline ::proto::common::troop_data* release_base();
  inline void set_allocated_base(::proto::common::troop_data* base);

  // optional .proto.server.troop_extra_info extra_data = 2;
  inline bool has_extra_data() const;
  inline void clear_extra_data();
  static const int kExtraDataFieldNumber = 2;
  inline const ::proto::server::troop_extra_info& extra_data() const;
  inline ::proto::server::troop_extra_info* mutable_extra_data();
  inline ::proto::server::troop_extra_info* release_extra_data();
  inline void set_allocated_extra_data(::proto::server::troop_extra_info* extra_data);

  // @@protoc_insertion_point(class_scope:proto.server.troop_server_data)
 private:
  inline void set_has_base();
  inline void clear_has_base();
  inline void set_has_extra_data();
  inline void clear_has_extra_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::proto::common::troop_data* base_;
  ::proto::server::troop_extra_info* extra_data_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static troop_server_data* default_instance_;
};
// -------------------------------------------------------------------

class eg_troop_event_notify : public ::google::protobuf::Message {
 public:
  eg_troop_event_notify();
  virtual ~eg_troop_event_notify();

  eg_troop_event_notify(const eg_troop_event_notify& from);

  inline eg_troop_event_notify& operator=(const eg_troop_event_notify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const eg_troop_event_notify& default_instance();

  void Swap(eg_troop_event_notify* other);

  // implements Message ----------------------------------------------

  eg_troop_event_notify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const eg_troop_event_notify& from);
  void MergeFrom(const eg_troop_event_notify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 event = 1;
  inline bool has_event() const;
  inline void clear_event();
  static const int kEventFieldNumber = 1;
  inline ::google::protobuf::uint32 event() const;
  inline void set_event(::google::protobuf::uint32 value);

  // optional uint64 member_id = 2;
  inline bool has_member_id() const;
  inline void clear_member_id();
  static const int kMemberIdFieldNumber = 2;
  inline ::google::protobuf::uint64 member_id() const;
  inline void set_member_id(::google::protobuf::uint64 value);

  // optional .proto.server.troop_server_data troop = 3;
  inline bool has_troop() const;
  inline void clear_troop();
  static const int kTroopFieldNumber = 3;
  inline const ::proto::server::troop_server_data& troop() const;
  inline ::proto::server::troop_server_data* mutable_troop();
  inline ::proto::server::troop_server_data* release_troop();
  inline void set_allocated_troop(::proto::server::troop_server_data* troop);

  // @@protoc_insertion_point(class_scope:proto.server.eg_troop_event_notify)
 private:
  inline void set_has_event();
  inline void clear_has_event();
  inline void set_has_member_id();
  inline void clear_has_member_id();
  inline void set_has_troop();
  inline void clear_has_troop();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 member_id_;
  ::proto::server::troop_server_data* troop_;
  ::google::protobuf::uint32 event_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static eg_troop_event_notify* default_instance_;
};
// -------------------------------------------------------------------

class ge_troop_create_request : public ::google::protobuf::Message {
 public:
  ge_troop_create_request();
  virtual ~ge_troop_create_request();

  ge_troop_create_request(const ge_troop_create_request& from);

  inline ge_troop_create_request& operator=(const ge_troop_create_request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ge_troop_create_request& default_instance();

  void Swap(ge_troop_create_request* other);

  // implements Message ----------------------------------------------

  ge_troop_create_request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ge_troop_create_request& from);
  void MergeFrom(const ge_troop_create_request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);

  // optional uint64 role_uid = 2;
  inline bool has_role_uid() const;
  inline void clear_role_uid();
  static const int kRoleUidFieldNumber = 2;
  inline ::google::protobuf::uint64 role_uid() const;
  inline void set_role_uid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:proto.server.ge_troop_create_request)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_role_uid();
  inline void clear_has_role_uid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 role_uid_;
  ::google::protobuf::uint32 type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static ge_troop_create_request* default_instance_;
};
// -------------------------------------------------------------------

class ge_troop_auto_match_request : public ::google::protobuf::Message {
 public:
  ge_troop_auto_match_request();
  virtual ~ge_troop_auto_match_request();

  ge_troop_auto_match_request(const ge_troop_auto_match_request& from);

  inline ge_troop_auto_match_request& operator=(const ge_troop_auto_match_request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ge_troop_auto_match_request& default_instance();

  void Swap(ge_troop_auto_match_request* other);

  // implements Message ----------------------------------------------

  ge_troop_auto_match_request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ge_troop_auto_match_request& from);
  void MergeFrom(const ge_troop_auto_match_request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.server.ge_troop_auto_match_request)
 private:
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static ge_troop_auto_match_request* default_instance_;
};
// -------------------------------------------------------------------

class ge_troop_join_request : public ::google::protobuf::Message {
 public:
  ge_troop_join_request();
  virtual ~ge_troop_join_request();

  ge_troop_join_request(const ge_troop_join_request& from);

  inline ge_troop_join_request& operator=(const ge_troop_join_request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ge_troop_join_request& default_instance();

  void Swap(ge_troop_join_request* other);

  // implements Message ----------------------------------------------

  ge_troop_join_request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ge_troop_join_request& from);
  void MergeFrom(const ge_troop_join_request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 troop_id = 1;
  inline bool has_troop_id() const;
  inline void clear_troop_id();
  static const int kTroopIdFieldNumber = 1;
  inline ::google::protobuf::uint64 troop_id() const;
  inline void set_troop_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:proto.server.ge_troop_join_request)
 private:
  inline void set_has_troop_id();
  inline void clear_has_troop_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 troop_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static ge_troop_join_request* default_instance_;
};
// -------------------------------------------------------------------

class eg_troop_agree_apply_request : public ::google::protobuf::Message {
 public:
  eg_troop_agree_apply_request();
  virtual ~eg_troop_agree_apply_request();

  eg_troop_agree_apply_request(const eg_troop_agree_apply_request& from);

  inline eg_troop_agree_apply_request& operator=(const eg_troop_agree_apply_request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const eg_troop_agree_apply_request& default_instance();

  void Swap(eg_troop_agree_apply_request* other);

  // implements Message ----------------------------------------------

  eg_troop_agree_apply_request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const eg_troop_agree_apply_request& from);
  void MergeFrom(const eg_troop_agree_apply_request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 apply_uid = 1;
  inline bool has_apply_uid() const;
  inline void clear_apply_uid();
  static const int kApplyUidFieldNumber = 1;
  inline ::google::protobuf::uint64 apply_uid() const;
  inline void set_apply_uid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:proto.server.eg_troop_agree_apply_request)
 private:
  inline void set_has_apply_uid();
  inline void clear_has_apply_uid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 apply_uid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static eg_troop_agree_apply_request* default_instance_;
};
// -------------------------------------------------------------------

class ge_troop_agree_apply_reply : public ::google::protobuf::Message {
 public:
  ge_troop_agree_apply_reply();
  virtual ~ge_troop_agree_apply_reply();

  ge_troop_agree_apply_reply(const ge_troop_agree_apply_reply& from);

  inline ge_troop_agree_apply_reply& operator=(const ge_troop_agree_apply_reply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ge_troop_agree_apply_reply& default_instance();

  void Swap(ge_troop_agree_apply_reply* other);

  // implements Message ----------------------------------------------

  ge_troop_agree_apply_reply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ge_troop_agree_apply_reply& from);
  void MergeFrom(const ge_troop_agree_apply_reply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 apply_uid = 1;
  inline bool has_apply_uid() const;
  inline void clear_apply_uid();
  static const int kApplyUidFieldNumber = 1;
  inline ::google::protobuf::uint64 apply_uid() const;
  inline void set_apply_uid(::google::protobuf::uint64 value);

  // optional uint32 reply_code = 2;
  inline bool has_reply_code() const;
  inline void clear_reply_code();
  static const int kReplyCodeFieldNumber = 2;
  inline ::google::protobuf::uint32 reply_code() const;
  inline void set_reply_code(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.server.ge_troop_agree_apply_reply)
 private:
  inline void set_has_apply_uid();
  inline void clear_has_apply_uid();
  inline void set_has_reply_code();
  inline void clear_has_reply_code();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 apply_uid_;
  ::google::protobuf::uint32 reply_code_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static ge_troop_agree_apply_reply* default_instance_;
};
// -------------------------------------------------------------------

class ge_troop_process_invite_request : public ::google::protobuf::Message {
 public:
  ge_troop_process_invite_request();
  virtual ~ge_troop_process_invite_request();

  ge_troop_process_invite_request(const ge_troop_process_invite_request& from);

  inline ge_troop_process_invite_request& operator=(const ge_troop_process_invite_request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ge_troop_process_invite_request& default_instance();

  void Swap(ge_troop_process_invite_request* other);

  // implements Message ----------------------------------------------

  ge_troop_process_invite_request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ge_troop_process_invite_request& from);
  void MergeFrom(const ge_troop_process_invite_request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 troop_id = 1;
  inline bool has_troop_id() const;
  inline void clear_troop_id();
  static const int kTroopIdFieldNumber = 1;
  inline ::google::protobuf::uint64 troop_id() const;
  inline void set_troop_id(::google::protobuf::uint64 value);

  // optional uint32 process = 2;
  inline bool has_process() const;
  inline void clear_process();
  static const int kProcessFieldNumber = 2;
  inline ::google::protobuf::uint32 process() const;
  inline void set_process(::google::protobuf::uint32 value);

  // optional uint32 game_code = 3;
  inline bool has_game_code() const;
  inline void clear_game_code();
  static const int kGameCodeFieldNumber = 3;
  inline ::google::protobuf::uint32 game_code() const;
  inline void set_game_code(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.server.ge_troop_process_invite_request)
 private:
  inline void set_has_troop_id();
  inline void clear_has_troop_id();
  inline void set_has_process();
  inline void clear_has_process();
  inline void set_has_game_code();
  inline void clear_has_game_code();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 troop_id_;
  ::google::protobuf::uint32 process_;
  ::google::protobuf::uint32 game_code_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static ge_troop_process_invite_request* default_instance_;
};
// -------------------------------------------------------------------

class ge_troop_dissolve_notify : public ::google::protobuf::Message {
 public:
  ge_troop_dissolve_notify();
  virtual ~ge_troop_dissolve_notify();

  ge_troop_dissolve_notify(const ge_troop_dissolve_notify& from);

  inline ge_troop_dissolve_notify& operator=(const ge_troop_dissolve_notify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ge_troop_dissolve_notify& default_instance();

  void Swap(ge_troop_dissolve_notify* other);

  // implements Message ----------------------------------------------

  ge_troop_dissolve_notify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ge_troop_dissolve_notify& from);
  void MergeFrom(const ge_troop_dissolve_notify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:proto.server.ge_troop_dissolve_notify)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static ge_troop_dissolve_notify* default_instance_;
};
// -------------------------------------------------------------------

class ge_troop_back_request : public ::google::protobuf::Message {
 public:
  ge_troop_back_request();
  virtual ~ge_troop_back_request();

  ge_troop_back_request(const ge_troop_back_request& from);

  inline ge_troop_back_request& operator=(const ge_troop_back_request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ge_troop_back_request& default_instance();

  void Swap(ge_troop_back_request* other);

  // implements Message ----------------------------------------------

  ge_troop_back_request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ge_troop_back_request& from);
  void MergeFrom(const ge_troop_back_request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:proto.server.ge_troop_back_request)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static ge_troop_back_request* default_instance_;
};
// -------------------------------------------------------------------

class ge_troop_transmission_notify : public ::google::protobuf::Message {
 public:
  ge_troop_transmission_notify();
  virtual ~ge_troop_transmission_notify();

  ge_troop_transmission_notify(const ge_troop_transmission_notify& from);

  inline ge_troop_transmission_notify& operator=(const ge_troop_transmission_notify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ge_troop_transmission_notify& default_instance();

  void Swap(ge_troop_transmission_notify* other);

  // implements Message ----------------------------------------------

  ge_troop_transmission_notify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ge_troop_transmission_notify& from);
  void MergeFrom(const ge_troop_transmission_notify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::uint32 result() const;
  inline void set_result(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.server.ge_troop_transmission_notify)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static ge_troop_transmission_notify* default_instance_;
};
// -------------------------------------------------------------------

class ge_troop_escape_notify : public ::google::protobuf::Message {
 public:
  ge_troop_escape_notify();
  virtual ~ge_troop_escape_notify();

  ge_troop_escape_notify(const ge_troop_escape_notify& from);

  inline ge_troop_escape_notify& operator=(const ge_troop_escape_notify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ge_troop_escape_notify& default_instance();

  void Swap(ge_troop_escape_notify* other);

  // implements Message ----------------------------------------------

  ge_troop_escape_notify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ge_troop_escape_notify& from);
  void MergeFrom(const ge_troop_escape_notify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:proto.server.ge_troop_escape_notify)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static ge_troop_escape_notify* default_instance_;
};
// -------------------------------------------------------------------

class eg_troop_invite_shadow_notify : public ::google::protobuf::Message {
 public:
  eg_troop_invite_shadow_notify();
  virtual ~eg_troop_invite_shadow_notify();

  eg_troop_invite_shadow_notify(const eg_troop_invite_shadow_notify& from);

  inline eg_troop_invite_shadow_notify& operator=(const eg_troop_invite_shadow_notify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const eg_troop_invite_shadow_notify& default_instance();

  void Swap(eg_troop_invite_shadow_notify* other);

  // implements Message ----------------------------------------------

  eg_troop_invite_shadow_notify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const eg_troop_invite_shadow_notify& from);
  void MergeFrom(const eg_troop_invite_shadow_notify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .proto.common.friend_member member_info = 1;
  inline bool has_member_info() const;
  inline void clear_member_info();
  static const int kMemberInfoFieldNumber = 1;
  inline const ::proto::common::friend_member& member_info() const;
  inline ::proto::common::friend_member* mutable_member_info();
  inline ::proto::common::friend_member* release_member_info();
  inline void set_allocated_member_info(::proto::common::friend_member* member_info);

  // @@protoc_insertion_point(class_scope:proto.server.eg_troop_invite_shadow_notify)
 private:
  inline void set_has_member_info();
  inline void clear_has_member_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::proto::common::friend_member* member_info_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static eg_troop_invite_shadow_notify* default_instance_;
};
// -------------------------------------------------------------------

class ge_troop_del_shadow_notify : public ::google::protobuf::Message {
 public:
  ge_troop_del_shadow_notify();
  virtual ~ge_troop_del_shadow_notify();

  ge_troop_del_shadow_notify(const ge_troop_del_shadow_notify& from);

  inline ge_troop_del_shadow_notify& operator=(const ge_troop_del_shadow_notify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ge_troop_del_shadow_notify& default_instance();

  void Swap(ge_troop_del_shadow_notify* other);

  // implements Message ----------------------------------------------

  ge_troop_del_shadow_notify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ge_troop_del_shadow_notify& from);
  void MergeFrom(const ge_troop_del_shadow_notify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 troop_id = 1;
  inline bool has_troop_id() const;
  inline void clear_troop_id();
  static const int kTroopIdFieldNumber = 1;
  inline ::google::protobuf::uint64 troop_id() const;
  inline void set_troop_id(::google::protobuf::uint64 value);

  // optional uint64 member_id = 2;
  inline bool has_member_id() const;
  inline void clear_member_id();
  static const int kMemberIdFieldNumber = 2;
  inline ::google::protobuf::uint64 member_id() const;
  inline void set_member_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:proto.server.ge_troop_del_shadow_notify)
 private:
  inline void set_has_troop_id();
  inline void clear_has_troop_id();
  inline void set_has_member_id();
  inline void clear_has_member_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 troop_id_;
  ::google::protobuf::uint64 member_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static ge_troop_del_shadow_notify* default_instance_;
};
// -------------------------------------------------------------------

class ge_troop_friend_notify : public ::google::protobuf::Message {
 public:
  ge_troop_friend_notify();
  virtual ~ge_troop_friend_notify();

  ge_troop_friend_notify(const ge_troop_friend_notify& from);

  inline ge_troop_friend_notify& operator=(const ge_troop_friend_notify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ge_troop_friend_notify& default_instance();

  void Swap(ge_troop_friend_notify* other);

  // implements Message ----------------------------------------------

  ge_troop_friend_notify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ge_troop_friend_notify& from);
  void MergeFrom(const ge_troop_friend_notify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 troop_id = 1;
  inline bool has_troop_id() const;
  inline void clear_troop_id();
  static const int kTroopIdFieldNumber = 1;
  inline ::google::protobuf::uint64 troop_id() const;
  inline void set_troop_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:proto.server.ge_troop_friend_notify)
 private:
  inline void set_has_troop_id();
  inline void clear_has_troop_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 troop_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static ge_troop_friend_notify* default_instance_;
};
// -------------------------------------------------------------------

class game_scene_reg_info : public ::google::protobuf::Message {
 public:
  game_scene_reg_info();
  virtual ~game_scene_reg_info();

  game_scene_reg_info(const game_scene_reg_info& from);

  inline game_scene_reg_info& operator=(const game_scene_reg_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const game_scene_reg_info& default_instance();

  void Swap(game_scene_reg_info* other);

  // implements Message ----------------------------------------------

  game_scene_reg_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const game_scene_reg_info& from);
  void MergeFrom(const game_scene_reg_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 scene_id = 1;
  inline bool has_scene_id() const;
  inline void clear_scene_id();
  static const int kSceneIdFieldNumber = 1;
  inline ::google::protobuf::uint64 scene_id() const;
  inline void set_scene_id(::google::protobuf::uint64 value);

  // optional uint32 map_tid = 2;
  inline bool has_map_tid() const;
  inline void clear_map_tid();
  static const int kMapTidFieldNumber = 2;
  inline ::google::protobuf::uint32 map_tid() const;
  inline void set_map_tid(::google::protobuf::uint32 value);

  // optional uint32 num = 3;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 3;
  inline ::google::protobuf::uint32 num() const;
  inline void set_num(::google::protobuf::uint32 value);

  // optional bool is_diversion = 4;
  inline bool has_is_diversion() const;
  inline void clear_is_diversion();
  static const int kIsDiversionFieldNumber = 4;
  inline bool is_diversion() const;
  inline void set_is_diversion(bool value);

  // @@protoc_insertion_point(class_scope:proto.server.game_scene_reg_info)
 private:
  inline void set_has_scene_id();
  inline void clear_has_scene_id();
  inline void set_has_map_tid();
  inline void clear_has_map_tid();
  inline void set_has_num();
  inline void clear_has_num();
  inline void set_has_is_diversion();
  inline void clear_has_is_diversion();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 scene_id_;
  ::google::protobuf::uint32 map_tid_;
  ::google::protobuf::uint32 num_;
  bool is_diversion_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static game_scene_reg_info* default_instance_;
};
// -------------------------------------------------------------------

class game_scene_reg_ret : public ::google::protobuf::Message {
 public:
  game_scene_reg_ret();
  virtual ~game_scene_reg_ret();

  game_scene_reg_ret(const game_scene_reg_ret& from);

  inline game_scene_reg_ret& operator=(const game_scene_reg_ret& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const game_scene_reg_ret& default_instance();

  void Swap(game_scene_reg_ret* other);

  // implements Message ----------------------------------------------

  game_scene_reg_ret* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const game_scene_reg_ret& from);
  void MergeFrom(const game_scene_reg_ret& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 scene_id = 1;
  inline bool has_scene_id() const;
  inline void clear_scene_id();
  static const int kSceneIdFieldNumber = 1;
  inline ::google::protobuf::uint64 scene_id() const;
  inline void set_scene_id(::google::protobuf::uint64 value);

  // optional bool is_success = 2;
  inline bool has_is_success() const;
  inline void clear_is_success();
  static const int kIsSuccessFieldNumber = 2;
  inline bool is_success() const;
  inline void set_is_success(bool value);

  // @@protoc_insertion_point(class_scope:proto.server.game_scene_reg_ret)
 private:
  inline void set_has_scene_id();
  inline void clear_has_scene_id();
  inline void set_has_is_success();
  inline void clear_has_is_success();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 scene_id_;
  bool is_success_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static game_scene_reg_ret* default_instance_;
};
// -------------------------------------------------------------------

class ge_game_scene_reg_request : public ::google::protobuf::Message {
 public:
  ge_game_scene_reg_request();
  virtual ~ge_game_scene_reg_request();

  ge_game_scene_reg_request(const ge_game_scene_reg_request& from);

  inline ge_game_scene_reg_request& operator=(const ge_game_scene_reg_request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ge_game_scene_reg_request& default_instance();

  void Swap(ge_game_scene_reg_request* other);

  // implements Message ----------------------------------------------

  ge_game_scene_reg_request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ge_game_scene_reg_request& from);
  void MergeFrom(const ge_game_scene_reg_request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto.server.game_scene_reg_info scene_infos = 2;
  inline int scene_infos_size() const;
  inline void clear_scene_infos();
  static const int kSceneInfosFieldNumber = 2;
  inline const ::proto::server::game_scene_reg_info& scene_infos(int index) const;
  inline ::proto::server::game_scene_reg_info* mutable_scene_infos(int index);
  inline ::proto::server::game_scene_reg_info* add_scene_infos();
  inline const ::google::protobuf::RepeatedPtrField< ::proto::server::game_scene_reg_info >&
      scene_infos() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto::server::game_scene_reg_info >*
      mutable_scene_infos();

  // @@protoc_insertion_point(class_scope:proto.server.ge_game_scene_reg_request)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto::server::game_scene_reg_info > scene_infos_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static ge_game_scene_reg_request* default_instance_;
};
// -------------------------------------------------------------------

class eg_game_scene_reg_reply : public ::google::protobuf::Message {
 public:
  eg_game_scene_reg_reply();
  virtual ~eg_game_scene_reg_reply();

  eg_game_scene_reg_reply(const eg_game_scene_reg_reply& from);

  inline eg_game_scene_reg_reply& operator=(const eg_game_scene_reg_reply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const eg_game_scene_reg_reply& default_instance();

  void Swap(eg_game_scene_reg_reply* other);

  // implements Message ----------------------------------------------

  eg_game_scene_reg_reply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const eg_game_scene_reg_reply& from);
  void MergeFrom(const eg_game_scene_reg_reply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 game_id = 1;
  inline bool has_game_id() const;
  inline void clear_game_id();
  static const int kGameIdFieldNumber = 1;
  inline ::google::protobuf::uint32 game_id() const;
  inline void set_game_id(::google::protobuf::uint32 value);

  // repeated .proto.server.game_scene_reg_ret rets = 2;
  inline int rets_size() const;
  inline void clear_rets();
  static const int kRetsFieldNumber = 2;
  inline const ::proto::server::game_scene_reg_ret& rets(int index) const;
  inline ::proto::server::game_scene_reg_ret* mutable_rets(int index);
  inline ::proto::server::game_scene_reg_ret* add_rets();
  inline const ::google::protobuf::RepeatedPtrField< ::proto::server::game_scene_reg_ret >&
      rets() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto::server::game_scene_reg_ret >*
      mutable_rets();

  // @@protoc_insertion_point(class_scope:proto.server.eg_game_scene_reg_reply)
 private:
  inline void set_has_game_id();
  inline void clear_has_game_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto::server::game_scene_reg_ret > rets_;
  ::google::protobuf::uint32 game_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static eg_game_scene_reg_reply* default_instance_;
};
// -------------------------------------------------------------------

class ge_role_scene_info_notify : public ::google::protobuf::Message {
 public:
  ge_role_scene_info_notify();
  virtual ~ge_role_scene_info_notify();

  ge_role_scene_info_notify(const ge_role_scene_info_notify& from);

  inline ge_role_scene_info_notify& operator=(const ge_role_scene_info_notify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ge_role_scene_info_notify& default_instance();

  void Swap(ge_role_scene_info_notify* other);

  // implements Message ----------------------------------------------

  ge_role_scene_info_notify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ge_role_scene_info_notify& from);
  void MergeFrom(const ge_role_scene_info_notify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 scene_id = 1;
  inline bool has_scene_id() const;
  inline void clear_scene_id();
  static const int kSceneIdFieldNumber = 1;
  inline ::google::protobuf::uint64 scene_id() const;
  inline void set_scene_id(::google::protobuf::uint64 value);

  // optional uint32 map_tid = 2;
  inline bool has_map_tid() const;
  inline void clear_map_tid();
  static const int kMapTidFieldNumber = 2;
  inline ::google::protobuf::uint32 map_tid() const;
  inline void set_map_tid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.server.ge_role_scene_info_notify)
 private:
  inline void set_has_scene_id();
  inline void clear_has_scene_id();
  inline void set_has_map_tid();
  inline void clear_has_map_tid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 scene_id_;
  ::google::protobuf::uint32 map_tid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static ge_role_scene_info_notify* default_instance_;
};
// -------------------------------------------------------------------

class ge_game_scene_unload_notify : public ::google::protobuf::Message {
 public:
  ge_game_scene_unload_notify();
  virtual ~ge_game_scene_unload_notify();

  ge_game_scene_unload_notify(const ge_game_scene_unload_notify& from);

  inline ge_game_scene_unload_notify& operator=(const ge_game_scene_unload_notify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ge_game_scene_unload_notify& default_instance();

  void Swap(ge_game_scene_unload_notify* other);

  // implements Message ----------------------------------------------

  ge_game_scene_unload_notify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ge_game_scene_unload_notify& from);
  void MergeFrom(const ge_game_scene_unload_notify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 scene_id = 1;
  inline bool has_scene_id() const;
  inline void clear_scene_id();
  static const int kSceneIdFieldNumber = 1;
  inline ::google::protobuf::uint64 scene_id() const;
  inline void set_scene_id(::google::protobuf::uint64 value);

  // optional uint32 mpa_tid = 2;
  inline bool has_mpa_tid() const;
  inline void clear_mpa_tid();
  static const int kMpaTidFieldNumber = 2;
  inline ::google::protobuf::uint32 mpa_tid() const;
  inline void set_mpa_tid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.server.ge_game_scene_unload_notify)
 private:
  inline void set_has_scene_id();
  inline void clear_has_scene_id();
  inline void set_has_mpa_tid();
  inline void clear_has_mpa_tid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 scene_id_;
  ::google::protobuf::uint32 mpa_tid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static ge_game_scene_unload_notify* default_instance_;
};
// -------------------------------------------------------------------

class dungeon_create_data : public ::google::protobuf::Message {
 public:
  dungeon_create_data();
  virtual ~dungeon_create_data();

  dungeon_create_data(const dungeon_create_data& from);

  inline dungeon_create_data& operator=(const dungeon_create_data& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const dungeon_create_data& default_instance();

  void Swap(dungeon_create_data* other);

  // implements Message ----------------------------------------------

  dungeon_create_data* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const dungeon_create_data& from);
  void MergeFrom(const dungeon_create_data& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 game_id = 1;
  inline bool has_game_id() const;
  inline void clear_game_id();
  static const int kGameIdFieldNumber = 1;
  inline ::google::protobuf::uint32 game_id() const;
  inline void set_game_id(::google::protobuf::uint32 value);

  // optional uint32 dungeon_id = 2;
  inline bool has_dungeon_id() const;
  inline void clear_dungeon_id();
  static const int kDungeonIdFieldNumber = 2;
  inline ::google::protobuf::uint32 dungeon_id() const;
  inline void set_dungeon_id(::google::protobuf::uint32 value);

  // optional .proto.server.dungeon_create_type type = 3;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 3;
  inline ::proto::server::dungeon_create_type type() const;
  inline void set_type(::proto::server::dungeon_create_type value);

  // optional uint64 dungeon_create_id = 4;
  inline bool has_dungeon_create_id() const;
  inline void clear_dungeon_create_id();
  static const int kDungeonCreateIdFieldNumber = 4;
  inline ::google::protobuf::uint64 dungeon_create_id() const;
  inline void set_dungeon_create_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:proto.server.dungeon_create_data)
 private:
  inline void set_has_game_id();
  inline void clear_has_game_id();
  inline void set_has_dungeon_id();
  inline void clear_has_dungeon_id();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_dungeon_create_id();
  inline void clear_has_dungeon_create_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 game_id_;
  ::google::protobuf::uint32 dungeon_id_;
  ::google::protobuf::uint64 dungeon_create_id_;
  int type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static dungeon_create_data* default_instance_;
};
// -------------------------------------------------------------------

class ge_open_dungeon_request : public ::google::protobuf::Message {
 public:
  ge_open_dungeon_request();
  virtual ~ge_open_dungeon_request();

  ge_open_dungeon_request(const ge_open_dungeon_request& from);

  inline ge_open_dungeon_request& operator=(const ge_open_dungeon_request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ge_open_dungeon_request& default_instance();

  void Swap(ge_open_dungeon_request* other);

  // implements Message ----------------------------------------------

  ge_open_dungeon_request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ge_open_dungeon_request& from);
  void MergeFrom(const ge_open_dungeon_request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .proto.server.dungeon_create_data data = 1;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 1;
  inline const ::proto::server::dungeon_create_data& data() const;
  inline ::proto::server::dungeon_create_data* mutable_data();
  inline ::proto::server::dungeon_create_data* release_data();
  inline void set_allocated_data(::proto::server::dungeon_create_data* data);

  // @@protoc_insertion_point(class_scope:proto.server.ge_open_dungeon_request)
 private:
  inline void set_has_data();
  inline void clear_has_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::proto::server::dungeon_create_data* data_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static ge_open_dungeon_request* default_instance_;
};
// -------------------------------------------------------------------

class eg_create_dugeon_request : public ::google::protobuf::Message {
 public:
  eg_create_dugeon_request();
  virtual ~eg_create_dugeon_request();

  eg_create_dugeon_request(const eg_create_dugeon_request& from);

  inline eg_create_dugeon_request& operator=(const eg_create_dugeon_request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const eg_create_dugeon_request& default_instance();

  void Swap(eg_create_dugeon_request* other);

  // implements Message ----------------------------------------------

  eg_create_dugeon_request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const eg_create_dugeon_request& from);
  void MergeFrom(const eg_create_dugeon_request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .proto.server.dungeon_create_data data = 1;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 1;
  inline const ::proto::server::dungeon_create_data& data() const;
  inline ::proto::server::dungeon_create_data* mutable_data();
  inline ::proto::server::dungeon_create_data* release_data();
  inline void set_allocated_data(::proto::server::dungeon_create_data* data);

  // @@protoc_insertion_point(class_scope:proto.server.eg_create_dugeon_request)
 private:
  inline void set_has_data();
  inline void clear_has_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::proto::server::dungeon_create_data* data_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static eg_create_dugeon_request* default_instance_;
};
// -------------------------------------------------------------------

class ge_create_dugeon_reply : public ::google::protobuf::Message {
 public:
  ge_create_dugeon_reply();
  virtual ~ge_create_dugeon_reply();

  ge_create_dugeon_reply(const ge_create_dugeon_reply& from);

  inline ge_create_dugeon_reply& operator=(const ge_create_dugeon_reply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ge_create_dugeon_reply& default_instance();

  void Swap(ge_create_dugeon_reply* other);

  // implements Message ----------------------------------------------

  ge_create_dugeon_reply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ge_create_dugeon_reply& from);
  void MergeFrom(const ge_create_dugeon_reply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 reply_code = 1;
  inline bool has_reply_code() const;
  inline void clear_reply_code();
  static const int kReplyCodeFieldNumber = 1;
  inline ::google::protobuf::uint32 reply_code() const;
  inline void set_reply_code(::google::protobuf::uint32 value);

  // optional .proto.server.dungeon_create_data data = 2;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 2;
  inline const ::proto::server::dungeon_create_data& data() const;
  inline ::proto::server::dungeon_create_data* mutable_data();
  inline ::proto::server::dungeon_create_data* release_data();
  inline void set_allocated_data(::proto::server::dungeon_create_data* data);

  // optional .proto.server.game_scene_reg_info info = 3;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 3;
  inline const ::proto::server::game_scene_reg_info& info() const;
  inline ::proto::server::game_scene_reg_info* mutable_info();
  inline ::proto::server::game_scene_reg_info* release_info();
  inline void set_allocated_info(::proto::server::game_scene_reg_info* info);

  // @@protoc_insertion_point(class_scope:proto.server.ge_create_dugeon_reply)
 private:
  inline void set_has_reply_code();
  inline void clear_has_reply_code();
  inline void set_has_data();
  inline void clear_has_data();
  inline void set_has_info();
  inline void clear_has_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::proto::server::dungeon_create_data* data_;
  ::proto::server::game_scene_reg_info* info_;
  ::google::protobuf::uint32 reply_code_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static ge_create_dugeon_reply* default_instance_;
};
// -------------------------------------------------------------------

class eg_open_dungeon_reply : public ::google::protobuf::Message {
 public:
  eg_open_dungeon_reply();
  virtual ~eg_open_dungeon_reply();

  eg_open_dungeon_reply(const eg_open_dungeon_reply& from);

  inline eg_open_dungeon_reply& operator=(const eg_open_dungeon_reply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const eg_open_dungeon_reply& default_instance();

  void Swap(eg_open_dungeon_reply* other);

  // implements Message ----------------------------------------------

  eg_open_dungeon_reply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const eg_open_dungeon_reply& from);
  void MergeFrom(const eg_open_dungeon_reply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 reply_code = 1;
  inline bool has_reply_code() const;
  inline void clear_reply_code();
  static const int kReplyCodeFieldNumber = 1;
  inline ::google::protobuf::uint32 reply_code() const;
  inline void set_reply_code(::google::protobuf::uint32 value);

  // optional .proto.server.dungeon_create_data data = 2;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 2;
  inline const ::proto::server::dungeon_create_data& data() const;
  inline ::proto::server::dungeon_create_data* mutable_data();
  inline ::proto::server::dungeon_create_data* release_data();
  inline void set_allocated_data(::proto::server::dungeon_create_data* data);

  // optional .proto.server.game_scene_reg_info info = 3;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 3;
  inline const ::proto::server::game_scene_reg_info& info() const;
  inline ::proto::server::game_scene_reg_info* mutable_info();
  inline ::proto::server::game_scene_reg_info* release_info();
  inline void set_allocated_info(::proto::server::game_scene_reg_info* info);

  // @@protoc_insertion_point(class_scope:proto.server.eg_open_dungeon_reply)
 private:
  inline void set_has_reply_code();
  inline void clear_has_reply_code();
  inline void set_has_data();
  inline void clear_has_data();
  inline void set_has_info();
  inline void clear_has_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::proto::server::dungeon_create_data* data_;
  ::proto::server::game_scene_reg_info* info_;
  ::google::protobuf::uint32 reply_code_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static eg_open_dungeon_reply* default_instance_;
};
// -------------------------------------------------------------------

class ge_scene_state_notify : public ::google::protobuf::Message {
 public:
  ge_scene_state_notify();
  virtual ~ge_scene_state_notify();

  ge_scene_state_notify(const ge_scene_state_notify& from);

  inline ge_scene_state_notify& operator=(const ge_scene_state_notify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ge_scene_state_notify& default_instance();

  void Swap(ge_scene_state_notify* other);

  // implements Message ----------------------------------------------

  ge_scene_state_notify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ge_scene_state_notify& from);
  void MergeFrom(const ge_scene_state_notify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 scene_id = 1;
  inline bool has_scene_id() const;
  inline void clear_scene_id();
  static const int kSceneIdFieldNumber = 1;
  inline ::google::protobuf::uint64 scene_id() const;
  inline void set_scene_id(::google::protobuf::uint64 value);

  // optional uint32 state = 2;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 2;
  inline ::google::protobuf::uint32 state() const;
  inline void set_state(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.server.ge_scene_state_notify)
 private:
  inline void set_has_scene_id();
  inline void clear_has_scene_id();
  inline void set_has_state();
  inline void clear_has_state();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 scene_id_;
  ::google::protobuf::uint32 state_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static ge_scene_state_notify* default_instance_;
};
// -------------------------------------------------------------------

class ge_goods_buy_request : public ::google::protobuf::Message {
 public:
  ge_goods_buy_request();
  virtual ~ge_goods_buy_request();

  ge_goods_buy_request(const ge_goods_buy_request& from);

  inline ge_goods_buy_request& operator=(const ge_goods_buy_request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ge_goods_buy_request& default_instance();

  void Swap(ge_goods_buy_request* other);

  // implements Message ----------------------------------------------

  ge_goods_buy_request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ge_goods_buy_request& from);
  void MergeFrom(const ge_goods_buy_request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 goods_uid = 1;
  inline bool has_goods_uid() const;
  inline void clear_goods_uid();
  static const int kGoodsUidFieldNumber = 1;
  inline ::google::protobuf::uint64 goods_uid() const;
  inline void set_goods_uid(::google::protobuf::uint64 value);

  // optional uint32 item_tid = 2;
  inline bool has_item_tid() const;
  inline void clear_item_tid();
  static const int kItemTidFieldNumber = 2;
  inline ::google::protobuf::uint32 item_tid() const;
  inline void set_item_tid(::google::protobuf::uint32 value);

  // optional uint32 buy_count = 3;
  inline bool has_buy_count() const;
  inline void clear_buy_count();
  static const int kBuyCountFieldNumber = 3;
  inline ::google::protobuf::uint32 buy_count() const;
  inline void set_buy_count(::google::protobuf::uint32 value);

  // optional uint32 price = 4;
  inline bool has_price() const;
  inline void clear_price();
  static const int kPriceFieldNumber = 4;
  inline ::google::protobuf::uint32 price() const;
  inline void set_price(::google::protobuf::uint32 value);

  // optional .proto.common.ex_reason reason = 5;
  inline bool has_reason() const;
  inline void clear_reason();
  static const int kReasonFieldNumber = 5;
  inline const ::proto::common::ex_reason& reason() const;
  inline ::proto::common::ex_reason* mutable_reason();
  inline ::proto::common::ex_reason* release_reason();
  inline void set_allocated_reason(::proto::common::ex_reason* reason);

  // @@protoc_insertion_point(class_scope:proto.server.ge_goods_buy_request)
 private:
  inline void set_has_goods_uid();
  inline void clear_has_goods_uid();
  inline void set_has_item_tid();
  inline void clear_has_item_tid();
  inline void set_has_buy_count();
  inline void clear_has_buy_count();
  inline void set_has_price();
  inline void clear_has_price();
  inline void set_has_reason();
  inline void clear_has_reason();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 goods_uid_;
  ::google::protobuf::uint32 item_tid_;
  ::google::protobuf::uint32 buy_count_;
  ::proto::common::ex_reason* reason_;
  ::google::protobuf::uint32 price_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static ge_goods_buy_request* default_instance_;
};
// -------------------------------------------------------------------

class eg_goods_buy_reply : public ::google::protobuf::Message {
 public:
  eg_goods_buy_reply();
  virtual ~eg_goods_buy_reply();

  eg_goods_buy_reply(const eg_goods_buy_reply& from);

  inline eg_goods_buy_reply& operator=(const eg_goods_buy_reply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const eg_goods_buy_reply& default_instance();

  void Swap(eg_goods_buy_reply* other);

  // implements Message ----------------------------------------------

  eg_goods_buy_reply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const eg_goods_buy_reply& from);
  void MergeFrom(const eg_goods_buy_reply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 reply_code = 1;
  inline bool has_reply_code() const;
  inline void clear_reply_code();
  static const int kReplyCodeFieldNumber = 1;
  inline ::google::protobuf::uint32 reply_code() const;
  inline void set_reply_code(::google::protobuf::uint32 value);

  // optional uint32 buy_count = 2;
  inline bool has_buy_count() const;
  inline void clear_buy_count();
  static const int kBuyCountFieldNumber = 2;
  inline ::google::protobuf::uint32 buy_count() const;
  inline void set_buy_count(::google::protobuf::uint32 value);

  // optional uint32 price = 3;
  inline bool has_price() const;
  inline void clear_price();
  static const int kPriceFieldNumber = 3;
  inline ::google::protobuf::uint32 price() const;
  inline void set_price(::google::protobuf::uint32 value);

  // optional .proto.common.goods_item item_info = 4;
  inline bool has_item_info() const;
  inline void clear_item_info();
  static const int kItemInfoFieldNumber = 4;
  inline const ::proto::common::goods_item& item_info() const;
  inline ::proto::common::goods_item* mutable_item_info();
  inline ::proto::common::goods_item* release_item_info();
  inline void set_allocated_item_info(::proto::common::goods_item* item_info);

  // optional .proto.common.ex_reason reason = 5;
  inline bool has_reason() const;
  inline void clear_reason();
  static const int kReasonFieldNumber = 5;
  inline const ::proto::common::ex_reason& reason() const;
  inline ::proto::common::ex_reason* mutable_reason();
  inline ::proto::common::ex_reason* release_reason();
  inline void set_allocated_reason(::proto::common::ex_reason* reason);

  // @@protoc_insertion_point(class_scope:proto.server.eg_goods_buy_reply)
 private:
  inline void set_has_reply_code();
  inline void clear_has_reply_code();
  inline void set_has_buy_count();
  inline void clear_has_buy_count();
  inline void set_has_price();
  inline void clear_has_price();
  inline void set_has_item_info();
  inline void clear_has_item_info();
  inline void set_has_reason();
  inline void clear_has_reason();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 reply_code_;
  ::google::protobuf::uint32 buy_count_;
  ::proto::common::goods_item* item_info_;
  ::proto::common::ex_reason* reason_;
  ::google::protobuf::uint32 price_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static eg_goods_buy_reply* default_instance_;
};
// -------------------------------------------------------------------

class ge_goods_sell_request : public ::google::protobuf::Message {
 public:
  ge_goods_sell_request();
  virtual ~ge_goods_sell_request();

  ge_goods_sell_request(const ge_goods_sell_request& from);

  inline ge_goods_sell_request& operator=(const ge_goods_sell_request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ge_goods_sell_request& default_instance();

  void Swap(ge_goods_sell_request* other);

  // implements Message ----------------------------------------------

  ge_goods_sell_request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ge_goods_sell_request& from);
  void MergeFrom(const ge_goods_sell_request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 item_uid = 1;
  inline bool has_item_uid() const;
  inline void clear_item_uid();
  static const int kItemUidFieldNumber = 1;
  inline ::google::protobuf::uint64 item_uid() const;
  inline void set_item_uid(::google::protobuf::uint64 value);

  // optional uint32 price = 2;
  inline bool has_price() const;
  inline void clear_price();
  static const int kPriceFieldNumber = 2;
  inline ::google::protobuf::uint32 price() const;
  inline void set_price(::google::protobuf::uint32 value);

  // optional .proto.common.goods_item item_info = 3;
  inline bool has_item_info() const;
  inline void clear_item_info();
  static const int kItemInfoFieldNumber = 3;
  inline const ::proto::common::goods_item& item_info() const;
  inline ::proto::common::goods_item* mutable_item_info();
  inline ::proto::common::goods_item* release_item_info();
  inline void set_allocated_item_info(::proto::common::goods_item* item_info);

  // @@protoc_insertion_point(class_scope:proto.server.ge_goods_sell_request)
 private:
  inline void set_has_item_uid();
  inline void clear_has_item_uid();
  inline void set_has_price();
  inline void clear_has_price();
  inline void set_has_item_info();
  inline void clear_has_item_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 item_uid_;
  ::proto::common::goods_item* item_info_;
  ::google::protobuf::uint32 price_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static ge_goods_sell_request* default_instance_;
};
// -------------------------------------------------------------------

class eg_goods_sell_reply : public ::google::protobuf::Message {
 public:
  eg_goods_sell_reply();
  virtual ~eg_goods_sell_reply();

  eg_goods_sell_reply(const eg_goods_sell_reply& from);

  inline eg_goods_sell_reply& operator=(const eg_goods_sell_reply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const eg_goods_sell_reply& default_instance();

  void Swap(eg_goods_sell_reply* other);

  // implements Message ----------------------------------------------

  eg_goods_sell_reply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const eg_goods_sell_reply& from);
  void MergeFrom(const eg_goods_sell_reply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 reply_code = 1;
  inline bool has_reply_code() const;
  inline void clear_reply_code();
  static const int kReplyCodeFieldNumber = 1;
  inline ::google::protobuf::uint32 reply_code() const;
  inline void set_reply_code(::google::protobuf::uint32 value);

  // optional uint64 item_uid = 2;
  inline bool has_item_uid() const;
  inline void clear_item_uid();
  static const int kItemUidFieldNumber = 2;
  inline ::google::protobuf::uint64 item_uid() const;
  inline void set_item_uid(::google::protobuf::uint64 value);

  // optional uint32 price = 3;
  inline bool has_price() const;
  inline void clear_price();
  static const int kPriceFieldNumber = 3;
  inline ::google::protobuf::uint32 price() const;
  inline void set_price(::google::protobuf::uint32 value);

  // optional .proto.common.goods_item item_info = 4;
  inline bool has_item_info() const;
  inline void clear_item_info();
  static const int kItemInfoFieldNumber = 4;
  inline const ::proto::common::goods_item& item_info() const;
  inline ::proto::common::goods_item* mutable_item_info();
  inline ::proto::common::goods_item* release_item_info();
  inline void set_allocated_item_info(::proto::common::goods_item* item_info);

  // @@protoc_insertion_point(class_scope:proto.server.eg_goods_sell_reply)
 private:
  inline void set_has_reply_code();
  inline void clear_has_reply_code();
  inline void set_has_item_uid();
  inline void clear_has_item_uid();
  inline void set_has_price();
  inline void clear_has_price();
  inline void set_has_item_info();
  inline void clear_has_item_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 item_uid_;
  ::google::protobuf::uint32 reply_code_;
  ::google::protobuf::uint32 price_;
  ::proto::common::goods_item* item_info_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static eg_goods_sell_reply* default_instance_;
};
// -------------------------------------------------------------------

class ge_goods_return_request : public ::google::protobuf::Message {
 public:
  ge_goods_return_request();
  virtual ~ge_goods_return_request();

  ge_goods_return_request(const ge_goods_return_request& from);

  inline ge_goods_return_request& operator=(const ge_goods_return_request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ge_goods_return_request& default_instance();

  void Swap(ge_goods_return_request* other);

  // implements Message ----------------------------------------------

  ge_goods_return_request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ge_goods_return_request& from);
  void MergeFrom(const ge_goods_return_request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 goods_uid = 1;
  inline bool has_goods_uid() const;
  inline void clear_goods_uid();
  static const int kGoodsUidFieldNumber = 1;
  inline ::google::protobuf::uint64 goods_uid() const;
  inline void set_goods_uid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:proto.server.ge_goods_return_request)
 private:
  inline void set_has_goods_uid();
  inline void clear_has_goods_uid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 goods_uid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static ge_goods_return_request* default_instance_;
};
// -------------------------------------------------------------------

class eg_goods_return_reply : public ::google::protobuf::Message {
 public:
  eg_goods_return_reply();
  virtual ~eg_goods_return_reply();

  eg_goods_return_reply(const eg_goods_return_reply& from);

  inline eg_goods_return_reply& operator=(const eg_goods_return_reply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const eg_goods_return_reply& default_instance();

  void Swap(eg_goods_return_reply* other);

  // implements Message ----------------------------------------------

  eg_goods_return_reply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const eg_goods_return_reply& from);
  void MergeFrom(const eg_goods_return_reply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 reply_code = 1;
  inline bool has_reply_code() const;
  inline void clear_reply_code();
  static const int kReplyCodeFieldNumber = 1;
  inline ::google::protobuf::uint32 reply_code() const;
  inline void set_reply_code(::google::protobuf::uint32 value);

  // optional .proto.common.goods_item item_info = 2;
  inline bool has_item_info() const;
  inline void clear_item_info();
  static const int kItemInfoFieldNumber = 2;
  inline const ::proto::common::goods_item& item_info() const;
  inline ::proto::common::goods_item* mutable_item_info();
  inline ::proto::common::goods_item* release_item_info();
  inline void set_allocated_item_info(::proto::common::goods_item* item_info);

  // @@protoc_insertion_point(class_scope:proto.server.eg_goods_return_reply)
 private:
  inline void set_has_reply_code();
  inline void clear_has_reply_code();
  inline void set_has_item_info();
  inline void clear_has_item_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::proto::common::goods_item* item_info_;
  ::google::protobuf::uint32 reply_code_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static eg_goods_return_reply* default_instance_;
};
// -------------------------------------------------------------------

class ge_goods_resell_request : public ::google::protobuf::Message {
 public:
  ge_goods_resell_request();
  virtual ~ge_goods_resell_request();

  ge_goods_resell_request(const ge_goods_resell_request& from);

  inline ge_goods_resell_request& operator=(const ge_goods_resell_request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ge_goods_resell_request& default_instance();

  void Swap(ge_goods_resell_request* other);

  // implements Message ----------------------------------------------

  ge_goods_resell_request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ge_goods_resell_request& from);
  void MergeFrom(const ge_goods_resell_request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 goods_uid = 1;
  inline bool has_goods_uid() const;
  inline void clear_goods_uid();
  static const int kGoodsUidFieldNumber = 1;
  inline ::google::protobuf::uint64 goods_uid() const;
  inline void set_goods_uid(::google::protobuf::uint64 value);

  // optional uint32 sell_count = 2;
  inline bool has_sell_count() const;
  inline void clear_sell_count();
  static const int kSellCountFieldNumber = 2;
  inline ::google::protobuf::uint32 sell_count() const;
  inline void set_sell_count(::google::protobuf::uint32 value);

  // optional uint32 price = 3;
  inline bool has_price() const;
  inline void clear_price();
  static const int kPriceFieldNumber = 3;
  inline ::google::protobuf::uint32 price() const;
  inline void set_price(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.server.ge_goods_resell_request)
 private:
  inline void set_has_goods_uid();
  inline void clear_has_goods_uid();
  inline void set_has_sell_count();
  inline void clear_has_sell_count();
  inline void set_has_price();
  inline void clear_has_price();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 goods_uid_;
  ::google::protobuf::uint32 sell_count_;
  ::google::protobuf::uint32 price_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static ge_goods_resell_request* default_instance_;
};
// -------------------------------------------------------------------

class eg_goods_resell_reply : public ::google::protobuf::Message {
 public:
  eg_goods_resell_reply();
  virtual ~eg_goods_resell_reply();

  eg_goods_resell_reply(const eg_goods_resell_reply& from);

  inline eg_goods_resell_reply& operator=(const eg_goods_resell_reply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const eg_goods_resell_reply& default_instance();

  void Swap(eg_goods_resell_reply* other);

  // implements Message ----------------------------------------------

  eg_goods_resell_reply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const eg_goods_resell_reply& from);
  void MergeFrom(const eg_goods_resell_reply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 reply_code = 1;
  inline bool has_reply_code() const;
  inline void clear_reply_code();
  static const int kReplyCodeFieldNumber = 1;
  inline ::google::protobuf::uint32 reply_code() const;
  inline void set_reply_code(::google::protobuf::uint32 value);

  // optional uint32 sell_count = 2;
  inline bool has_sell_count() const;
  inline void clear_sell_count();
  static const int kSellCountFieldNumber = 2;
  inline ::google::protobuf::uint32 sell_count() const;
  inline void set_sell_count(::google::protobuf::uint32 value);

  // optional uint32 price = 3;
  inline bool has_price() const;
  inline void clear_price();
  static const int kPriceFieldNumber = 3;
  inline ::google::protobuf::uint32 price() const;
  inline void set_price(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.server.eg_goods_resell_reply)
 private:
  inline void set_has_reply_code();
  inline void clear_has_reply_code();
  inline void set_has_sell_count();
  inline void clear_has_sell_count();
  inline void set_has_price();
  inline void clear_has_price();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 reply_code_;
  ::google::protobuf::uint32 sell_count_;
  ::google::protobuf::uint32 price_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static eg_goods_resell_reply* default_instance_;
};
// -------------------------------------------------------------------

class ge_goods_profit_request : public ::google::protobuf::Message {
 public:
  ge_goods_profit_request();
  virtual ~ge_goods_profit_request();

  ge_goods_profit_request(const ge_goods_profit_request& from);

  inline ge_goods_profit_request& operator=(const ge_goods_profit_request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ge_goods_profit_request& default_instance();

  void Swap(ge_goods_profit_request* other);

  // implements Message ----------------------------------------------

  ge_goods_profit_request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ge_goods_profit_request& from);
  void MergeFrom(const ge_goods_profit_request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:proto.server.ge_goods_profit_request)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static ge_goods_profit_request* default_instance_;
};
// -------------------------------------------------------------------

class eg_goods_profit_reply : public ::google::protobuf::Message {
 public:
  eg_goods_profit_reply();
  virtual ~eg_goods_profit_reply();

  eg_goods_profit_reply(const eg_goods_profit_reply& from);

  inline eg_goods_profit_reply& operator=(const eg_goods_profit_reply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const eg_goods_profit_reply& default_instance();

  void Swap(eg_goods_profit_reply* other);

  // implements Message ----------------------------------------------

  eg_goods_profit_reply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const eg_goods_profit_reply& from);
  void MergeFrom(const eg_goods_profit_reply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 reply_code = 1;
  inline bool has_reply_code() const;
  inline void clear_reply_code();
  static const int kReplyCodeFieldNumber = 1;
  inline ::google::protobuf::uint32 reply_code() const;
  inline void set_reply_code(::google::protobuf::uint32 value);

  // optional uint32 profit = 2;
  inline bool has_profit() const;
  inline void clear_profit();
  static const int kProfitFieldNumber = 2;
  inline ::google::protobuf::uint32 profit() const;
  inline void set_profit(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.server.eg_goods_profit_reply)
 private:
  inline void set_has_reply_code();
  inline void clear_has_reply_code();
  inline void set_has_profit();
  inline void clear_has_profit();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 reply_code_;
  ::google::protobuf::uint32 profit_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static eg_goods_profit_reply* default_instance_;
};
// -------------------------------------------------------------------

class ge_expedition_fight_data_request : public ::google::protobuf::Message {
 public:
  ge_expedition_fight_data_request();
  virtual ~ge_expedition_fight_data_request();

  ge_expedition_fight_data_request(const ge_expedition_fight_data_request& from);

  inline ge_expedition_fight_data_request& operator=(const ge_expedition_fight_data_request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ge_expedition_fight_data_request& default_instance();

  void Swap(ge_expedition_fight_data_request* other);

  // implements Message ----------------------------------------------

  ge_expedition_fight_data_request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ge_expedition_fight_data_request& from);
  void MergeFrom(const ge_expedition_fight_data_request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 level = 1;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 1;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.server.ge_expedition_fight_data_request)
 private:
  inline void set_has_level();
  inline void clear_has_level();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 level_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static ge_expedition_fight_data_request* default_instance_;
};
// -------------------------------------------------------------------

class eg_expedition_fight_data_reply : public ::google::protobuf::Message {
 public:
  eg_expedition_fight_data_reply();
  virtual ~eg_expedition_fight_data_reply();

  eg_expedition_fight_data_reply(const eg_expedition_fight_data_reply& from);

  inline eg_expedition_fight_data_reply& operator=(const eg_expedition_fight_data_reply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const eg_expedition_fight_data_reply& default_instance();

  void Swap(eg_expedition_fight_data_reply* other);

  // implements Message ----------------------------------------------

  eg_expedition_fight_data_reply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const eg_expedition_fight_data_reply& from);
  void MergeFrom(const eg_expedition_fight_data_reply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto.common.expedition_stage_single stage_list = 1;
  inline int stage_list_size() const;
  inline void clear_stage_list();
  static const int kStageListFieldNumber = 1;
  inline const ::proto::common::expedition_stage_single& stage_list(int index) const;
  inline ::proto::common::expedition_stage_single* mutable_stage_list(int index);
  inline ::proto::common::expedition_stage_single* add_stage_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto::common::expedition_stage_single >&
      stage_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto::common::expedition_stage_single >*
      mutable_stage_list();

  // @@protoc_insertion_point(class_scope:proto.server.eg_expedition_fight_data_reply)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto::common::expedition_stage_single > stage_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static eg_expedition_fight_data_reply* default_instance_;
};
// -------------------------------------------------------------------

class ge_expedition_refresh_request : public ::google::protobuf::Message {
 public:
  ge_expedition_refresh_request();
  virtual ~ge_expedition_refresh_request();

  ge_expedition_refresh_request(const ge_expedition_refresh_request& from);

  inline ge_expedition_refresh_request& operator=(const ge_expedition_refresh_request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ge_expedition_refresh_request& default_instance();

  void Swap(ge_expedition_refresh_request* other);

  // implements Message ----------------------------------------------

  ge_expedition_refresh_request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ge_expedition_refresh_request& from);
  void MergeFrom(const ge_expedition_refresh_request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 level = 1;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 1;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.server.ge_expedition_refresh_request)
 private:
  inline void set_has_level();
  inline void clear_has_level();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 level_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static ge_expedition_refresh_request* default_instance_;
};
// -------------------------------------------------------------------

class eg_expedition_refresh_reply : public ::google::protobuf::Message {
 public:
  eg_expedition_refresh_reply();
  virtual ~eg_expedition_refresh_reply();

  eg_expedition_refresh_reply(const eg_expedition_refresh_reply& from);

  inline eg_expedition_refresh_reply& operator=(const eg_expedition_refresh_reply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const eg_expedition_refresh_reply& default_instance();

  void Swap(eg_expedition_refresh_reply* other);

  // implements Message ----------------------------------------------

  eg_expedition_refresh_reply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const eg_expedition_refresh_reply& from);
  void MergeFrom(const eg_expedition_refresh_reply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto.common.expedition_stage_single stage_list = 1;
  inline int stage_list_size() const;
  inline void clear_stage_list();
  static const int kStageListFieldNumber = 1;
  inline const ::proto::common::expedition_stage_single& stage_list(int index) const;
  inline ::proto::common::expedition_stage_single* mutable_stage_list(int index);
  inline ::proto::common::expedition_stage_single* add_stage_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto::common::expedition_stage_single >&
      stage_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto::common::expedition_stage_single >*
      mutable_stage_list();

  // @@protoc_insertion_point(class_scope:proto.server.eg_expedition_refresh_reply)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto::common::expedition_stage_single > stage_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static eg_expedition_refresh_reply* default_instance_;
};
// -------------------------------------------------------------------

class ge_expedition_refresh_stage_request : public ::google::protobuf::Message {
 public:
  ge_expedition_refresh_stage_request();
  virtual ~ge_expedition_refresh_stage_request();

  ge_expedition_refresh_stage_request(const ge_expedition_refresh_stage_request& from);

  inline ge_expedition_refresh_stage_request& operator=(const ge_expedition_refresh_stage_request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ge_expedition_refresh_stage_request& default_instance();

  void Swap(ge_expedition_refresh_stage_request* other);

  // implements Message ----------------------------------------------

  ge_expedition_refresh_stage_request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ge_expedition_refresh_stage_request& from);
  void MergeFrom(const ge_expedition_refresh_stage_request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 level = 1;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 1;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // optional uint32 stage_id = 2;
  inline bool has_stage_id() const;
  inline void clear_stage_id();
  static const int kStageIdFieldNumber = 2;
  inline ::google::protobuf::uint32 stage_id() const;
  inline void set_stage_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.server.ge_expedition_refresh_stage_request)
 private:
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_stage_id();
  inline void clear_has_stage_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 level_;
  ::google::protobuf::uint32 stage_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static ge_expedition_refresh_stage_request* default_instance_;
};
// -------------------------------------------------------------------

class eg_expedition_refresh_stage_reply : public ::google::protobuf::Message {
 public:
  eg_expedition_refresh_stage_reply();
  virtual ~eg_expedition_refresh_stage_reply();

  eg_expedition_refresh_stage_reply(const eg_expedition_refresh_stage_reply& from);

  inline eg_expedition_refresh_stage_reply& operator=(const eg_expedition_refresh_stage_reply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const eg_expedition_refresh_stage_reply& default_instance();

  void Swap(eg_expedition_refresh_stage_reply* other);

  // implements Message ----------------------------------------------

  eg_expedition_refresh_stage_reply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const eg_expedition_refresh_stage_reply& from);
  void MergeFrom(const eg_expedition_refresh_stage_reply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .proto.common.expedition_stage_single stage_data = 1;
  inline bool has_stage_data() const;
  inline void clear_stage_data();
  static const int kStageDataFieldNumber = 1;
  inline const ::proto::common::expedition_stage_single& stage_data() const;
  inline ::proto::common::expedition_stage_single* mutable_stage_data();
  inline ::proto::common::expedition_stage_single* release_stage_data();
  inline void set_allocated_stage_data(::proto::common::expedition_stage_single* stage_data);

  // @@protoc_insertion_point(class_scope:proto.server.eg_expedition_refresh_stage_reply)
 private:
  inline void set_has_stage_data();
  inline void clear_has_stage_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::proto::common::expedition_stage_single* stage_data_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static eg_expedition_refresh_stage_reply* default_instance_;
};
// -------------------------------------------------------------------

class ge_expedition_help_request : public ::google::protobuf::Message {
 public:
  ge_expedition_help_request();
  virtual ~ge_expedition_help_request();

  ge_expedition_help_request(const ge_expedition_help_request& from);

  inline ge_expedition_help_request& operator=(const ge_expedition_help_request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ge_expedition_help_request& default_instance();

  void Swap(ge_expedition_help_request* other);

  // implements Message ----------------------------------------------

  ge_expedition_help_request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ge_expedition_help_request& from);
  void MergeFrom(const ge_expedition_help_request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint64 helper_list = 1;
  inline int helper_list_size() const;
  inline void clear_helper_list();
  static const int kHelperListFieldNumber = 1;
  inline ::google::protobuf::uint64 helper_list(int index) const;
  inline void set_helper_list(int index, ::google::protobuf::uint64 value);
  inline void add_helper_list(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      helper_list() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_helper_list();

  // @@protoc_insertion_point(class_scope:proto.server.ge_expedition_help_request)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > helper_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static ge_expedition_help_request* default_instance_;
};
// -------------------------------------------------------------------

class eg_expedition_help_reply : public ::google::protobuf::Message {
 public:
  eg_expedition_help_reply();
  virtual ~eg_expedition_help_reply();

  eg_expedition_help_reply(const eg_expedition_help_reply& from);

  inline eg_expedition_help_reply& operator=(const eg_expedition_help_reply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const eg_expedition_help_reply& default_instance();

  void Swap(eg_expedition_help_reply* other);

  // implements Message ----------------------------------------------

  eg_expedition_help_reply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const eg_expedition_help_reply& from);
  void MergeFrom(const eg_expedition_help_reply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 reply_code = 1;
  inline bool has_reply_code() const;
  inline void clear_reply_code();
  static const int kReplyCodeFieldNumber = 1;
  inline ::google::protobuf::uint32 reply_code() const;
  inline void set_reply_code(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.server.eg_expedition_help_reply)
 private:
  inline void set_has_reply_code();
  inline void clear_has_reply_code();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 reply_code_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static eg_expedition_help_reply* default_instance_;
};
// -------------------------------------------------------------------

class global_data_day_update_time : public ::google::protobuf::Message {
 public:
  global_data_day_update_time();
  virtual ~global_data_day_update_time();

  global_data_day_update_time(const global_data_day_update_time& from);

  inline global_data_day_update_time& operator=(const global_data_day_update_time& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const global_data_day_update_time& default_instance();

  void Swap(global_data_day_update_time* other);

  // implements Message ----------------------------------------------

  global_data_day_update_time* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const global_data_day_update_time& from);
  void MergeFrom(const global_data_day_update_time& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 update_time = 1;
  inline bool has_update_time() const;
  inline void clear_update_time();
  static const int kUpdateTimeFieldNumber = 1;
  inline ::google::protobuf::uint32 update_time() const;
  inline void set_update_time(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.server.global_data_day_update_time)
 private:
  inline void set_has_update_time();
  inline void clear_has_update_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 update_time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static global_data_day_update_time* default_instance_;
};
// -------------------------------------------------------------------

class global_data_family_war : public ::google::protobuf::Message {
 public:
  global_data_family_war();
  virtual ~global_data_family_war();

  global_data_family_war(const global_data_family_war& from);

  inline global_data_family_war& operator=(const global_data_family_war& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const global_data_family_war& default_instance();

  void Swap(global_data_family_war* other);

  // implements Message ----------------------------------------------

  global_data_family_war* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const global_data_family_war& from);
  void MergeFrom(const global_data_family_war& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 week_id = 1;
  inline bool has_week_id() const;
  inline void clear_week_id();
  static const int kWeekIdFieldNumber = 1;
  inline ::google::protobuf::uint32 week_id() const;
  inline void set_week_id(::google::protobuf::uint32 value);

  // optional .proto.common.family_war_state state = 2 [default = family_war_state_end];
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 2;
  inline ::proto::common::family_war_state state() const;
  inline void set_state(::proto::common::family_war_state value);

  // @@protoc_insertion_point(class_scope:proto.server.global_data_family_war)
 private:
  inline void set_has_week_id();
  inline void clear_has_week_id();
  inline void set_has_state();
  inline void clear_has_state();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 week_id_;
  int state_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static global_data_family_war* default_instance_;
};
// -------------------------------------------------------------------

class global_data_country_data : public ::google::protobuf::Message {
 public:
  global_data_country_data();
  virtual ~global_data_country_data();

  global_data_country_data(const global_data_country_data& from);

  inline global_data_country_data& operator=(const global_data_country_data& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const global_data_country_data& default_instance();

  void Swap(global_data_country_data* other);

  // implements Message ----------------------------------------------

  global_data_country_data* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const global_data_country_data& from);
  void MergeFrom(const global_data_country_data& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 period_type = 1;
  inline bool has_period_type() const;
  inline void clear_period_type();
  static const int kPeriodTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 period_type() const;
  inline void set_period_type(::google::protobuf::uint32 value);

  // optional uint32 period_time = 2;
  inline bool has_period_time() const;
  inline void clear_period_time();
  static const int kPeriodTimeFieldNumber = 2;
  inline ::google::protobuf::uint32 period_time() const;
  inline void set_period_time(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.server.global_data_country_data)
 private:
  inline void set_has_period_type();
  inline void clear_has_period_type();
  inline void set_has_period_time();
  inline void clear_has_period_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 period_type_;
  ::google::protobuf::uint32 period_time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static global_data_country_data* default_instance_;
};
// -------------------------------------------------------------------

class global_data_king_war_data : public ::google::protobuf::Message {
 public:
  global_data_king_war_data();
  virtual ~global_data_king_war_data();

  global_data_king_war_data(const global_data_king_war_data& from);

  inline global_data_king_war_data& operator=(const global_data_king_war_data& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const global_data_king_war_data& default_instance();

  void Swap(global_data_king_war_data* other);

  // implements Message ----------------------------------------------

  global_data_king_war_data* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const global_data_king_war_data& from);
  void MergeFrom(const global_data_king_war_data& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 state = 1;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 1;
  inline ::google::protobuf::uint32 state() const;
  inline void set_state(::google::protobuf::uint32 value);

  // optional uint32 state_end_time = 2;
  inline bool has_state_end_time() const;
  inline void clear_state_end_time();
  static const int kStateEndTimeFieldNumber = 2;
  inline ::google::protobuf::uint32 state_end_time() const;
  inline void set_state_end_time(::google::protobuf::uint32 value);

  // optional uint32 battle_time = 3;
  inline bool has_battle_time() const;
  inline void clear_battle_time();
  static const int kBattleTimeFieldNumber = 3;
  inline ::google::protobuf::uint32 battle_time() const;
  inline void set_battle_time(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.server.global_data_king_war_data)
 private:
  inline void set_has_state();
  inline void clear_has_state();
  inline void set_has_state_end_time();
  inline void clear_has_state_end_time();
  inline void set_has_battle_time();
  inline void clear_has_battle_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 state_;
  ::google::protobuf::uint32 state_end_time_;
  ::google::protobuf::uint32 battle_time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static global_data_king_war_data* default_instance_;
};
// -------------------------------------------------------------------

class eg_offline_data_notify : public ::google::protobuf::Message {
 public:
  eg_offline_data_notify();
  virtual ~eg_offline_data_notify();

  eg_offline_data_notify(const eg_offline_data_notify& from);

  inline eg_offline_data_notify& operator=(const eg_offline_data_notify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const eg_offline_data_notify& default_instance();

  void Swap(eg_offline_data_notify* other);

  // implements Message ----------------------------------------------

  eg_offline_data_notify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const eg_offline_data_notify& from);
  void MergeFrom(const eg_offline_data_notify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .proto.common.offline_role_data ord = 1;
  inline bool has_ord() const;
  inline void clear_ord();
  static const int kOrdFieldNumber = 1;
  inline const ::proto::common::offline_role_data& ord() const;
  inline ::proto::common::offline_role_data* mutable_ord();
  inline ::proto::common::offline_role_data* release_ord();
  inline void set_allocated_ord(::proto::common::offline_role_data* ord);

  // @@protoc_insertion_point(class_scope:proto.server.eg_offline_data_notify)
 private:
  inline void set_has_ord();
  inline void clear_has_ord();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::proto::common::offline_role_data* ord_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static eg_offline_data_notify* default_instance_;
};
// -------------------------------------------------------------------

class ge_offline_data_notify : public ::google::protobuf::Message {
 public:
  ge_offline_data_notify();
  virtual ~ge_offline_data_notify();

  ge_offline_data_notify(const ge_offline_data_notify& from);

  inline ge_offline_data_notify& operator=(const ge_offline_data_notify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ge_offline_data_notify& default_instance();

  void Swap(ge_offline_data_notify* other);

  // implements Message ----------------------------------------------

  ge_offline_data_notify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ge_offline_data_notify& from);
  void MergeFrom(const ge_offline_data_notify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .proto.common.offline_role_data ord = 1;
  inline bool has_ord() const;
  inline void clear_ord();
  static const int kOrdFieldNumber = 1;
  inline const ::proto::common::offline_role_data& ord() const;
  inline ::proto::common::offline_role_data* mutable_ord();
  inline ::proto::common::offline_role_data* release_ord();
  inline void set_allocated_ord(::proto::common::offline_role_data* ord);

  // @@protoc_insertion_point(class_scope:proto.server.ge_offline_data_notify)
 private:
  inline void set_has_ord();
  inline void clear_has_ord();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::proto::common::offline_role_data* ord_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static ge_offline_data_notify* default_instance_;
};
// -------------------------------------------------------------------

class eg_notify_progress_state_notify : public ::google::protobuf::Message {
 public:
  eg_notify_progress_state_notify();
  virtual ~eg_notify_progress_state_notify();

  eg_notify_progress_state_notify(const eg_notify_progress_state_notify& from);

  inline eg_notify_progress_state_notify& operator=(const eg_notify_progress_state_notify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const eg_notify_progress_state_notify& default_instance();

  void Swap(eg_notify_progress_state_notify* other);

  // implements Message ----------------------------------------------

  eg_notify_progress_state_notify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const eg_notify_progress_state_notify& from);
  void MergeFrom(const eg_notify_progress_state_notify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);

  // optional uint32 param1 = 2;
  inline bool has_param1() const;
  inline void clear_param1();
  static const int kParam1FieldNumber = 2;
  inline ::google::protobuf::uint32 param1() const;
  inline void set_param1(::google::protobuf::uint32 value);

  // optional uint32 param2 = 3;
  inline bool has_param2() const;
  inline void clear_param2();
  static const int kParam2FieldNumber = 3;
  inline ::google::protobuf::uint32 param2() const;
  inline void set_param2(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.server.eg_notify_progress_state_notify)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_param1();
  inline void clear_has_param1();
  inline void set_has_param2();
  inline void clear_has_param2();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 type_;
  ::google::protobuf::uint32 param1_;
  ::google::protobuf::uint32 param2_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static eg_notify_progress_state_notify* default_instance_;
};
// -------------------------------------------------------------------

class hg_notify_progress_state_notify : public ::google::protobuf::Message {
 public:
  hg_notify_progress_state_notify();
  virtual ~hg_notify_progress_state_notify();

  hg_notify_progress_state_notify(const hg_notify_progress_state_notify& from);

  inline hg_notify_progress_state_notify& operator=(const hg_notify_progress_state_notify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const hg_notify_progress_state_notify& default_instance();

  void Swap(hg_notify_progress_state_notify* other);

  // implements Message ----------------------------------------------

  hg_notify_progress_state_notify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const hg_notify_progress_state_notify& from);
  void MergeFrom(const hg_notify_progress_state_notify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);

  // optional uint32 param1 = 2;
  inline bool has_param1() const;
  inline void clear_param1();
  static const int kParam1FieldNumber = 2;
  inline ::google::protobuf::uint32 param1() const;
  inline void set_param1(::google::protobuf::uint32 value);

  // optional uint32 param2 = 3;
  inline bool has_param2() const;
  inline void clear_param2();
  static const int kParam2FieldNumber = 3;
  inline ::google::protobuf::uint32 param2() const;
  inline void set_param2(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.server.hg_notify_progress_state_notify)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_param1();
  inline void clear_has_param1();
  inline void set_has_param2();
  inline void clear_has_param2();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 type_;
  ::google::protobuf::uint32 param1_;
  ::google::protobuf::uint32 param2_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static hg_notify_progress_state_notify* default_instance_;
};
// -------------------------------------------------------------------

class ge_tower_trigger_notify : public ::google::protobuf::Message {
 public:
  ge_tower_trigger_notify();
  virtual ~ge_tower_trigger_notify();

  ge_tower_trigger_notify(const ge_tower_trigger_notify& from);

  inline ge_tower_trigger_notify& operator=(const ge_tower_trigger_notify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ge_tower_trigger_notify& default_instance();

  void Swap(ge_tower_trigger_notify* other);

  // implements Message ----------------------------------------------

  ge_tower_trigger_notify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ge_tower_trigger_notify& from);
  void MergeFrom(const ge_tower_trigger_notify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto.common.tower_trigger tower_trigger = 1;
  inline int tower_trigger_size() const;
  inline void clear_tower_trigger();
  static const int kTowerTriggerFieldNumber = 1;
  inline const ::proto::common::tower_trigger& tower_trigger(int index) const;
  inline ::proto::common::tower_trigger* mutable_tower_trigger(int index);
  inline ::proto::common::tower_trigger* add_tower_trigger();
  inline const ::google::protobuf::RepeatedPtrField< ::proto::common::tower_trigger >&
      tower_trigger() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto::common::tower_trigger >*
      mutable_tower_trigger();

  // optional uint64 friend_uid = 2;
  inline bool has_friend_uid() const;
  inline void clear_friend_uid();
  static const int kFriendUidFieldNumber = 2;
  inline ::google::protobuf::uint64 friend_uid() const;
  inline void set_friend_uid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:proto.server.ge_tower_trigger_notify)
 private:
  inline void set_has_friend_uid();
  inline void clear_has_friend_uid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto::common::tower_trigger > tower_trigger_;
  ::google::protobuf::uint64 friend_uid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static ge_tower_trigger_notify* default_instance_;
};
// -------------------------------------------------------------------

class eg_tower_trigger_notify : public ::google::protobuf::Message {
 public:
  eg_tower_trigger_notify();
  virtual ~eg_tower_trigger_notify();

  eg_tower_trigger_notify(const eg_tower_trigger_notify& from);

  inline eg_tower_trigger_notify& operator=(const eg_tower_trigger_notify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const eg_tower_trigger_notify& default_instance();

  void Swap(eg_tower_trigger_notify* other);

  // implements Message ----------------------------------------------

  eg_tower_trigger_notify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const eg_tower_trigger_notify& from);
  void MergeFrom(const eg_tower_trigger_notify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto.common.tower_trigger tower_trigger = 1;
  inline int tower_trigger_size() const;
  inline void clear_tower_trigger();
  static const int kTowerTriggerFieldNumber = 1;
  inline const ::proto::common::tower_trigger& tower_trigger(int index) const;
  inline ::proto::common::tower_trigger* mutable_tower_trigger(int index);
  inline ::proto::common::tower_trigger* add_tower_trigger();
  inline const ::google::protobuf::RepeatedPtrField< ::proto::common::tower_trigger >&
      tower_trigger() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto::common::tower_trigger >*
      mutable_tower_trigger();

  // @@protoc_insertion_point(class_scope:proto.server.eg_tower_trigger_notify)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto::common::tower_trigger > tower_trigger_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static eg_tower_trigger_notify* default_instance_;
};
// -------------------------------------------------------------------

class eg_two_side_friend_notify : public ::google::protobuf::Message {
 public:
  eg_two_side_friend_notify();
  virtual ~eg_two_side_friend_notify();

  eg_two_side_friend_notify(const eg_two_side_friend_notify& from);

  inline eg_two_side_friend_notify& operator=(const eg_two_side_friend_notify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const eg_two_side_friend_notify& default_instance();

  void Swap(eg_two_side_friend_notify* other);

  // implements Message ----------------------------------------------

  eg_two_side_friend_notify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const eg_two_side_friend_notify& from);
  void MergeFrom(const eg_two_side_friend_notify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 friend_uid = 1;
  inline bool has_friend_uid() const;
  inline void clear_friend_uid();
  static const int kFriendUidFieldNumber = 1;
  inline ::google::protobuf::uint64 friend_uid() const;
  inline void set_friend_uid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:proto.server.eg_two_side_friend_notify)
 private:
  inline void set_has_friend_uid();
  inline void clear_has_friend_uid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 friend_uid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static eg_two_side_friend_notify* default_instance_;
};
// -------------------------------------------------------------------

class ge_check_sys_notice_request : public ::google::protobuf::Message {
 public:
  ge_check_sys_notice_request();
  virtual ~ge_check_sys_notice_request();

  ge_check_sys_notice_request(const ge_check_sys_notice_request& from);

  inline ge_check_sys_notice_request& operator=(const ge_check_sys_notice_request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ge_check_sys_notice_request& default_instance();

  void Swap(ge_check_sys_notice_request* other);

  // implements Message ----------------------------------------------

  ge_check_sys_notice_request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ge_check_sys_notice_request& from);
  void MergeFrom(const ge_check_sys_notice_request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .proto.common.sys_notity_data sys_notice_list = 1;
  inline bool has_sys_notice_list() const;
  inline void clear_sys_notice_list();
  static const int kSysNoticeListFieldNumber = 1;
  inline const ::proto::common::sys_notity_data& sys_notice_list() const;
  inline ::proto::common::sys_notity_data* mutable_sys_notice_list();
  inline ::proto::common::sys_notity_data* release_sys_notice_list();
  inline void set_allocated_sys_notice_list(::proto::common::sys_notity_data* sys_notice_list);

  // @@protoc_insertion_point(class_scope:proto.server.ge_check_sys_notice_request)
 private:
  inline void set_has_sys_notice_list();
  inline void clear_has_sys_notice_list();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::proto::common::sys_notity_data* sys_notice_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static ge_check_sys_notice_request* default_instance_;
};
// -------------------------------------------------------------------

class eg_check_sys_notice_reply : public ::google::protobuf::Message {
 public:
  eg_check_sys_notice_reply();
  virtual ~eg_check_sys_notice_reply();

  eg_check_sys_notice_reply(const eg_check_sys_notice_reply& from);

  inline eg_check_sys_notice_reply& operator=(const eg_check_sys_notice_reply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const eg_check_sys_notice_reply& default_instance();

  void Swap(eg_check_sys_notice_reply* other);

  // implements Message ----------------------------------------------

  eg_check_sys_notice_reply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const eg_check_sys_notice_reply& from);
  void MergeFrom(const eg_check_sys_notice_reply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .proto.common.sys_notity_data sys_notice_list = 1;
  inline bool has_sys_notice_list() const;
  inline void clear_sys_notice_list();
  static const int kSysNoticeListFieldNumber = 1;
  inline const ::proto::common::sys_notity_data& sys_notice_list() const;
  inline ::proto::common::sys_notity_data* mutable_sys_notice_list();
  inline ::proto::common::sys_notity_data* release_sys_notice_list();
  inline void set_allocated_sys_notice_list(::proto::common::sys_notity_data* sys_notice_list);

  // @@protoc_insertion_point(class_scope:proto.server.eg_check_sys_notice_reply)
 private:
  inline void set_has_sys_notice_list();
  inline void clear_has_sys_notice_list();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::proto::common::sys_notity_data* sys_notice_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static eg_check_sys_notice_reply* default_instance_;
};
// -------------------------------------------------------------------

class eg_syn_sys_notice_notify : public ::google::protobuf::Message {
 public:
  eg_syn_sys_notice_notify();
  virtual ~eg_syn_sys_notice_notify();

  eg_syn_sys_notice_notify(const eg_syn_sys_notice_notify& from);

  inline eg_syn_sys_notice_notify& operator=(const eg_syn_sys_notice_notify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const eg_syn_sys_notice_notify& default_instance();

  void Swap(eg_syn_sys_notice_notify* other);

  // implements Message ----------------------------------------------

  eg_syn_sys_notice_notify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const eg_syn_sys_notice_notify& from);
  void MergeFrom(const eg_syn_sys_notice_notify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .proto.common.sys_notity_data sys_notice_list = 1;
  inline bool has_sys_notice_list() const;
  inline void clear_sys_notice_list();
  static const int kSysNoticeListFieldNumber = 1;
  inline const ::proto::common::sys_notity_data& sys_notice_list() const;
  inline ::proto::common::sys_notity_data* mutable_sys_notice_list();
  inline ::proto::common::sys_notity_data* release_sys_notice_list();
  inline void set_allocated_sys_notice_list(::proto::common::sys_notity_data* sys_notice_list);

  // @@protoc_insertion_point(class_scope:proto.server.eg_syn_sys_notice_notify)
 private:
  inline void set_has_sys_notice_list();
  inline void clear_has_sys_notice_list();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::proto::common::sys_notity_data* sys_notice_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static eg_syn_sys_notice_notify* default_instance_;
};
// -------------------------------------------------------------------

class ge_gm_clear_notice_request : public ::google::protobuf::Message {
 public:
  ge_gm_clear_notice_request();
  virtual ~ge_gm_clear_notice_request();

  ge_gm_clear_notice_request(const ge_gm_clear_notice_request& from);

  inline ge_gm_clear_notice_request& operator=(const ge_gm_clear_notice_request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ge_gm_clear_notice_request& default_instance();

  void Swap(ge_gm_clear_notice_request* other);

  // implements Message ----------------------------------------------

  ge_gm_clear_notice_request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ge_gm_clear_notice_request& from);
  void MergeFrom(const ge_gm_clear_notice_request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:proto.server.ge_gm_clear_notice_request)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static ge_gm_clear_notice_request* default_instance_;
};
// -------------------------------------------------------------------

class eg_gm_clear_notice_notify : public ::google::protobuf::Message {
 public:
  eg_gm_clear_notice_notify();
  virtual ~eg_gm_clear_notice_notify();

  eg_gm_clear_notice_notify(const eg_gm_clear_notice_notify& from);

  inline eg_gm_clear_notice_notify& operator=(const eg_gm_clear_notice_notify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const eg_gm_clear_notice_notify& default_instance();

  void Swap(eg_gm_clear_notice_notify* other);

  // implements Message ----------------------------------------------

  eg_gm_clear_notice_notify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const eg_gm_clear_notice_notify& from);
  void MergeFrom(const eg_gm_clear_notice_notify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:proto.server.eg_gm_clear_notice_notify)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static eg_gm_clear_notice_notify* default_instance_;
};
// -------------------------------------------------------------------

class ge_role_simple_data_notify : public ::google::protobuf::Message {
 public:
  ge_role_simple_data_notify();
  virtual ~ge_role_simple_data_notify();

  ge_role_simple_data_notify(const ge_role_simple_data_notify& from);

  inline ge_role_simple_data_notify& operator=(const ge_role_simple_data_notify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ge_role_simple_data_notify& default_instance();

  void Swap(ge_role_simple_data_notify* other);

  // implements Message ----------------------------------------------

  ge_role_simple_data_notify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ge_role_simple_data_notify& from);
  void MergeFrom(const ge_role_simple_data_notify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .proto.common.role_data_type type = 1 [default = simple_info_type];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::proto::common::role_data_type type() const;
  inline void set_type(::proto::common::role_data_type value);

  // optional .proto.common.role_blob_data simple_data = 2;
  inline bool has_simple_data() const;
  inline void clear_simple_data();
  static const int kSimpleDataFieldNumber = 2;
  inline const ::proto::common::role_blob_data& simple_data() const;
  inline ::proto::common::role_blob_data* mutable_simple_data();
  inline ::proto::common::role_blob_data* release_simple_data();
  inline void set_allocated_simple_data(::proto::common::role_blob_data* simple_data);

  // @@protoc_insertion_point(class_scope:proto.server.ge_role_simple_data_notify)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_simple_data();
  inline void clear_has_simple_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::proto::common::role_blob_data* simple_data_;
  int type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static ge_role_simple_data_notify* default_instance_;
};
// -------------------------------------------------------------------

class eg_offline_arena_join_notify : public ::google::protobuf::Message {
 public:
  eg_offline_arena_join_notify();
  virtual ~eg_offline_arena_join_notify();

  eg_offline_arena_join_notify(const eg_offline_arena_join_notify& from);

  inline eg_offline_arena_join_notify& operator=(const eg_offline_arena_join_notify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const eg_offline_arena_join_notify& default_instance();

  void Swap(eg_offline_arena_join_notify* other);

  // implements Message ----------------------------------------------

  eg_offline_arena_join_notify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const eg_offline_arena_join_notify& from);
  void MergeFrom(const eg_offline_arena_join_notify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:proto.server.eg_offline_arena_join_notify)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static eg_offline_arena_join_notify* default_instance_;
};
// -------------------------------------------------------------------

class ge_offline_arena_form_notify : public ::google::protobuf::Message {
 public:
  ge_offline_arena_form_notify();
  virtual ~ge_offline_arena_form_notify();

  ge_offline_arena_form_notify(const ge_offline_arena_form_notify& from);

  inline ge_offline_arena_form_notify& operator=(const ge_offline_arena_form_notify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ge_offline_arena_form_notify& default_instance();

  void Swap(ge_offline_arena_form_notify* other);

  // implements Message ----------------------------------------------

  ge_offline_arena_form_notify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ge_offline_arena_form_notify& from);
  void MergeFrom(const ge_offline_arena_form_notify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .proto.common.mirror_fight_data form_data = 1;
  inline bool has_form_data() const;
  inline void clear_form_data();
  static const int kFormDataFieldNumber = 1;
  inline const ::proto::common::mirror_fight_data& form_data() const;
  inline ::proto::common::mirror_fight_data* mutable_form_data();
  inline ::proto::common::mirror_fight_data* release_form_data();
  inline void set_allocated_form_data(::proto::common::mirror_fight_data* form_data);

  // @@protoc_insertion_point(class_scope:proto.server.ge_offline_arena_form_notify)
 private:
  inline void set_has_form_data();
  inline void clear_has_form_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::proto::common::mirror_fight_data* form_data_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static ge_offline_arena_form_notify* default_instance_;
};
// -------------------------------------------------------------------

class eg_offline_arena_fight_request : public ::google::protobuf::Message {
 public:
  eg_offline_arena_fight_request();
  virtual ~eg_offline_arena_fight_request();

  eg_offline_arena_fight_request(const eg_offline_arena_fight_request& from);

  inline eg_offline_arena_fight_request& operator=(const eg_offline_arena_fight_request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const eg_offline_arena_fight_request& default_instance();

  void Swap(eg_offline_arena_fight_request* other);

  // implements Message ----------------------------------------------

  eg_offline_arena_fight_request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const eg_offline_arena_fight_request& from);
  void MergeFrom(const eg_offline_arena_fight_request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .proto.common.mirror_fight_data enemy_data = 1;
  inline bool has_enemy_data() const;
  inline void clear_enemy_data();
  static const int kEnemyDataFieldNumber = 1;
  inline const ::proto::common::mirror_fight_data& enemy_data() const;
  inline ::proto::common::mirror_fight_data* mutable_enemy_data();
  inline ::proto::common::mirror_fight_data* release_enemy_data();
  inline void set_allocated_enemy_data(::proto::common::mirror_fight_data* enemy_data);

  // optional uint32 offline_arena_class = 2;
  inline bool has_offline_arena_class() const;
  inline void clear_offline_arena_class();
  static const int kOfflineArenaClassFieldNumber = 2;
  inline ::google::protobuf::uint32 offline_arena_class() const;
  inline void set_offline_arena_class(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.server.eg_offline_arena_fight_request)
 private:
  inline void set_has_enemy_data();
  inline void clear_has_enemy_data();
  inline void set_has_offline_arena_class();
  inline void clear_has_offline_arena_class();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::proto::common::mirror_fight_data* enemy_data_;
  ::google::protobuf::uint32 offline_arena_class_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static eg_offline_arena_fight_request* default_instance_;
};
// -------------------------------------------------------------------

class ge_offline_arena_fight_reply : public ::google::protobuf::Message {
 public:
  ge_offline_arena_fight_reply();
  virtual ~ge_offline_arena_fight_reply();

  ge_offline_arena_fight_reply(const ge_offline_arena_fight_reply& from);

  inline ge_offline_arena_fight_reply& operator=(const ge_offline_arena_fight_reply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ge_offline_arena_fight_reply& default_instance();

  void Swap(ge_offline_arena_fight_reply* other);

  // implements Message ----------------------------------------------

  ge_offline_arena_fight_reply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ge_offline_arena_fight_reply& from);
  void MergeFrom(const ge_offline_arena_fight_reply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 is_win = 1;
  inline bool has_is_win() const;
  inline void clear_is_win();
  static const int kIsWinFieldNumber = 1;
  inline ::google::protobuf::uint32 is_win() const;
  inline void set_is_win(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.server.ge_offline_arena_fight_reply)
 private:
  inline void set_has_is_win();
  inline void clear_has_is_win();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 is_win_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static ge_offline_arena_fight_reply* default_instance_;
};
// -------------------------------------------------------------------

class eg_offline_arena_record_award_notify : public ::google::protobuf::Message {
 public:
  eg_offline_arena_record_award_notify();
  virtual ~eg_offline_arena_record_award_notify();

  eg_offline_arena_record_award_notify(const eg_offline_arena_record_award_notify& from);

  inline eg_offline_arena_record_award_notify& operator=(const eg_offline_arena_record_award_notify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const eg_offline_arena_record_award_notify& default_instance();

  void Swap(eg_offline_arena_record_award_notify* other);

  // implements Message ----------------------------------------------

  eg_offline_arena_record_award_notify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const eg_offline_arena_record_award_notify& from);
  void MergeFrom(const eg_offline_arena_record_award_notify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto.common.mail_item_obj item_list = 1;
  inline int item_list_size() const;
  inline void clear_item_list();
  static const int kItemListFieldNumber = 1;
  inline const ::proto::common::mail_item_obj& item_list(int index) const;
  inline ::proto::common::mail_item_obj* mutable_item_list(int index);
  inline ::proto::common::mail_item_obj* add_item_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto::common::mail_item_obj >&
      item_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto::common::mail_item_obj >*
      mutable_item_list();

  // @@protoc_insertion_point(class_scope:proto.server.eg_offline_arena_record_award_notify)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto::common::mail_item_obj > item_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static eg_offline_arena_record_award_notify* default_instance_;
};
// -------------------------------------------------------------------

class eg_offline_arena_score_award_notify : public ::google::protobuf::Message {
 public:
  eg_offline_arena_score_award_notify();
  virtual ~eg_offline_arena_score_award_notify();

  eg_offline_arena_score_award_notify(const eg_offline_arena_score_award_notify& from);

  inline eg_offline_arena_score_award_notify& operator=(const eg_offline_arena_score_award_notify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const eg_offline_arena_score_award_notify& default_instance();

  void Swap(eg_offline_arena_score_award_notify* other);

  // implements Message ----------------------------------------------

  eg_offline_arena_score_award_notify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const eg_offline_arena_score_award_notify& from);
  void MergeFrom(const eg_offline_arena_score_award_notify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 drop_id = 1;
  inline bool has_drop_id() const;
  inline void clear_drop_id();
  static const int kDropIdFieldNumber = 1;
  inline ::google::protobuf::uint32 drop_id() const;
  inline void set_drop_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.server.eg_offline_arena_score_award_notify)
 private:
  inline void set_has_drop_id();
  inline void clear_has_drop_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 drop_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static eg_offline_arena_score_award_notify* default_instance_;
};
// -------------------------------------------------------------------

class eg_offline_arena_sweep_award_notify : public ::google::protobuf::Message {
 public:
  eg_offline_arena_sweep_award_notify();
  virtual ~eg_offline_arena_sweep_award_notify();

  eg_offline_arena_sweep_award_notify(const eg_offline_arena_sweep_award_notify& from);

  inline eg_offline_arena_sweep_award_notify& operator=(const eg_offline_arena_sweep_award_notify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const eg_offline_arena_sweep_award_notify& default_instance();

  void Swap(eg_offline_arena_sweep_award_notify* other);

  // implements Message ----------------------------------------------

  eg_offline_arena_sweep_award_notify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const eg_offline_arena_sweep_award_notify& from);
  void MergeFrom(const eg_offline_arena_sweep_award_notify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 drop_id = 1;
  inline bool has_drop_id() const;
  inline void clear_drop_id();
  static const int kDropIdFieldNumber = 1;
  inline ::google::protobuf::uint32 drop_id() const;
  inline void set_drop_id(::google::protobuf::uint32 value);

  // optional uint32 count = 2;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 2;
  inline ::google::protobuf::uint32 count() const;
  inline void set_count(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.server.eg_offline_arena_sweep_award_notify)
 private:
  inline void set_has_drop_id();
  inline void clear_has_drop_id();
  inline void set_has_count();
  inline void clear_has_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 drop_id_;
  ::google::protobuf::uint32 count_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static eg_offline_arena_sweep_award_notify* default_instance_;
};
// -------------------------------------------------------------------

class eg_offline_arena_class_award_notify : public ::google::protobuf::Message {
 public:
  eg_offline_arena_class_award_notify();
  virtual ~eg_offline_arena_class_award_notify();

  eg_offline_arena_class_award_notify(const eg_offline_arena_class_award_notify& from);

  inline eg_offline_arena_class_award_notify& operator=(const eg_offline_arena_class_award_notify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const eg_offline_arena_class_award_notify& default_instance();

  void Swap(eg_offline_arena_class_award_notify* other);

  // implements Message ----------------------------------------------

  eg_offline_arena_class_award_notify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const eg_offline_arena_class_award_notify& from);
  void MergeFrom(const eg_offline_arena_class_award_notify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 drop_id = 1;
  inline int drop_id_size() const;
  inline void clear_drop_id();
  static const int kDropIdFieldNumber = 1;
  inline ::google::protobuf::uint32 drop_id(int index) const;
  inline void set_drop_id(int index, ::google::protobuf::uint32 value);
  inline void add_drop_id(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      drop_id() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_drop_id();

  // optional uint32 cur_class = 2;
  inline bool has_cur_class() const;
  inline void clear_cur_class();
  static const int kCurClassFieldNumber = 2;
  inline ::google::protobuf::uint32 cur_class() const;
  inline void set_cur_class(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.server.eg_offline_arena_class_award_notify)
 private:
  inline void set_has_cur_class();
  inline void clear_has_cur_class();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > drop_id_;
  ::google::protobuf::uint32 cur_class_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static eg_offline_arena_class_award_notify* default_instance_;
};
// -------------------------------------------------------------------

class ge_offline_arena_buy_request : public ::google::protobuf::Message {
 public:
  ge_offline_arena_buy_request();
  virtual ~ge_offline_arena_buy_request();

  ge_offline_arena_buy_request(const ge_offline_arena_buy_request& from);

  inline ge_offline_arena_buy_request& operator=(const ge_offline_arena_buy_request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ge_offline_arena_buy_request& default_instance();

  void Swap(ge_offline_arena_buy_request* other);

  // implements Message ----------------------------------------------

  ge_offline_arena_buy_request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ge_offline_arena_buy_request& from);
  void MergeFrom(const ge_offline_arena_buy_request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 money = 1;
  inline bool has_money() const;
  inline void clear_money();
  static const int kMoneyFieldNumber = 1;
  inline ::google::protobuf::uint32 money() const;
  inline void set_money(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.server.ge_offline_arena_buy_request)
 private:
  inline void set_has_money();
  inline void clear_has_money();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 money_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static ge_offline_arena_buy_request* default_instance_;
};
// -------------------------------------------------------------------

class eg_offline_arena_buy_reply : public ::google::protobuf::Message {
 public:
  eg_offline_arena_buy_reply();
  virtual ~eg_offline_arena_buy_reply();

  eg_offline_arena_buy_reply(const eg_offline_arena_buy_reply& from);

  inline eg_offline_arena_buy_reply& operator=(const eg_offline_arena_buy_reply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const eg_offline_arena_buy_reply& default_instance();

  void Swap(eg_offline_arena_buy_reply* other);

  // implements Message ----------------------------------------------

  eg_offline_arena_buy_reply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const eg_offline_arena_buy_reply& from);
  void MergeFrom(const eg_offline_arena_buy_reply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 reply_code = 1;
  inline bool has_reply_code() const;
  inline void clear_reply_code();
  static const int kReplyCodeFieldNumber = 1;
  inline ::google::protobuf::uint32 reply_code() const;
  inline void set_reply_code(::google::protobuf::uint32 value);

  // optional uint32 money = 2;
  inline bool has_money() const;
  inline void clear_money();
  static const int kMoneyFieldNumber = 2;
  inline ::google::protobuf::uint32 money() const;
  inline void set_money(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.server.eg_offline_arena_buy_reply)
 private:
  inline void set_has_reply_code();
  inline void clear_has_reply_code();
  inline void set_has_money();
  inline void clear_has_money();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 reply_code_;
  ::google::protobuf::uint32 money_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static eg_offline_arena_buy_reply* default_instance_;
};
// -------------------------------------------------------------------

class ge_offline_arena_gmrank_notify : public ::google::protobuf::Message {
 public:
  ge_offline_arena_gmrank_notify();
  virtual ~ge_offline_arena_gmrank_notify();

  ge_offline_arena_gmrank_notify(const ge_offline_arena_gmrank_notify& from);

  inline ge_offline_arena_gmrank_notify& operator=(const ge_offline_arena_gmrank_notify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ge_offline_arena_gmrank_notify& default_instance();

  void Swap(ge_offline_arena_gmrank_notify* other);

  // implements Message ----------------------------------------------

  ge_offline_arena_gmrank_notify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ge_offline_arena_gmrank_notify& from);
  void MergeFrom(const ge_offline_arena_gmrank_notify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 rank = 1;
  inline bool has_rank() const;
  inline void clear_rank();
  static const int kRankFieldNumber = 1;
  inline ::google::protobuf::uint32 rank() const;
  inline void set_rank(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.server.ge_offline_arena_gmrank_notify)
 private:
  inline void set_has_rank();
  inline void clear_has_rank();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 rank_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static ge_offline_arena_gmrank_notify* default_instance_;
};
// -------------------------------------------------------------------

class hr_get_hero_strategy_info_request : public ::google::protobuf::Message {
 public:
  hr_get_hero_strategy_info_request();
  virtual ~hr_get_hero_strategy_info_request();

  hr_get_hero_strategy_info_request(const hr_get_hero_strategy_info_request& from);

  inline hr_get_hero_strategy_info_request& operator=(const hr_get_hero_strategy_info_request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const hr_get_hero_strategy_info_request& default_instance();

  void Swap(hr_get_hero_strategy_info_request* other);

  // implements Message ----------------------------------------------

  hr_get_hero_strategy_info_request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const hr_get_hero_strategy_info_request& from);
  void MergeFrom(const hr_get_hero_strategy_info_request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 server_id = 1;
  inline bool has_server_id() const;
  inline void clear_server_id();
  static const int kServerIdFieldNumber = 1;
  inline ::google::protobuf::uint32 server_id() const;
  inline void set_server_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.server.hr_get_hero_strategy_info_request)
 private:
  inline void set_has_server_id();
  inline void clear_has_server_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 server_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static hr_get_hero_strategy_info_request* default_instance_;
};
// -------------------------------------------------------------------

class rh_get_hero_strategy_info_reply : public ::google::protobuf::Message {
 public:
  rh_get_hero_strategy_info_reply();
  virtual ~rh_get_hero_strategy_info_reply();

  rh_get_hero_strategy_info_reply(const rh_get_hero_strategy_info_reply& from);

  inline rh_get_hero_strategy_info_reply& operator=(const rh_get_hero_strategy_info_reply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const rh_get_hero_strategy_info_reply& default_instance();

  void Swap(rh_get_hero_strategy_info_reply* other);

  // implements Message ----------------------------------------------

  rh_get_hero_strategy_info_reply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const rh_get_hero_strategy_info_reply& from);
  void MergeFrom(const rh_get_hero_strategy_info_reply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 server_id = 1;
  inline bool has_server_id() const;
  inline void clear_server_id();
  static const int kServerIdFieldNumber = 1;
  inline ::google::protobuf::uint32 server_id() const;
  inline void set_server_id(::google::protobuf::uint32 value);

  // repeated .proto.common.hero_strategy_info hero_info = 2;
  inline int hero_info_size() const;
  inline void clear_hero_info();
  static const int kHeroInfoFieldNumber = 2;
  inline const ::proto::common::hero_strategy_info& hero_info(int index) const;
  inline ::proto::common::hero_strategy_info* mutable_hero_info(int index);
  inline ::proto::common::hero_strategy_info* add_hero_info();
  inline const ::google::protobuf::RepeatedPtrField< ::proto::common::hero_strategy_info >&
      hero_info() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto::common::hero_strategy_info >*
      mutable_hero_info();

  // @@protoc_insertion_point(class_scope:proto.server.rh_get_hero_strategy_info_reply)
 private:
  inline void set_has_server_id();
  inline void clear_has_server_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto::common::hero_strategy_info > hero_info_;
  ::google::protobuf::uint32 server_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static rh_get_hero_strategy_info_reply* default_instance_;
};
// -------------------------------------------------------------------

class ge_troop_sync_task_request : public ::google::protobuf::Message {
 public:
  ge_troop_sync_task_request();
  virtual ~ge_troop_sync_task_request();

  ge_troop_sync_task_request(const ge_troop_sync_task_request& from);

  inline ge_troop_sync_task_request& operator=(const ge_troop_sync_task_request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ge_troop_sync_task_request& default_instance();

  void Swap(ge_troop_sync_task_request* other);

  // implements Message ----------------------------------------------

  ge_troop_sync_task_request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ge_troop_sync_task_request& from);
  void MergeFrom(const ge_troop_sync_task_request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 troop_id = 1;
  inline bool has_troop_id() const;
  inline void clear_troop_id();
  static const int kTroopIdFieldNumber = 1;
  inline ::google::protobuf::uint64 troop_id() const;
  inline void set_troop_id(::google::protobuf::uint64 value);

  // optional .proto.common.task_state task_info = 2;
  inline bool has_task_info() const;
  inline void clear_task_info();
  static const int kTaskInfoFieldNumber = 2;
  inline const ::proto::common::task_state& task_info() const;
  inline ::proto::common::task_state* mutable_task_info();
  inline ::proto::common::task_state* release_task_info();
  inline void set_allocated_task_info(::proto::common::task_state* task_info);

  // @@protoc_insertion_point(class_scope:proto.server.ge_troop_sync_task_request)
 private:
  inline void set_has_troop_id();
  inline void clear_has_troop_id();
  inline void set_has_task_info();
  inline void clear_has_task_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 troop_id_;
  ::proto::common::task_state* task_info_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static ge_troop_sync_task_request* default_instance_;
};
// -------------------------------------------------------------------

class eg_buy_wish_summon_request : public ::google::protobuf::Message {
 public:
  eg_buy_wish_summon_request();
  virtual ~eg_buy_wish_summon_request();

  eg_buy_wish_summon_request(const eg_buy_wish_summon_request& from);

  inline eg_buy_wish_summon_request& operator=(const eg_buy_wish_summon_request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const eg_buy_wish_summon_request& default_instance();

  void Swap(eg_buy_wish_summon_request* other);

  // implements Message ----------------------------------------------

  eg_buy_wish_summon_request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const eg_buy_wish_summon_request& from);
  void MergeFrom(const eg_buy_wish_summon_request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 summon_id = 1;
  inline bool has_summon_id() const;
  inline void clear_summon_id();
  static const int kSummonIdFieldNumber = 1;
  inline ::google::protobuf::uint32 summon_id() const;
  inline void set_summon_id(::google::protobuf::uint32 value);

  // optional uint32 reply_code = 2;
  inline bool has_reply_code() const;
  inline void clear_reply_code();
  static const int kReplyCodeFieldNumber = 2;
  inline ::google::protobuf::uint32 reply_code() const;
  inline void set_reply_code(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.server.eg_buy_wish_summon_request)
 private:
  inline void set_has_summon_id();
  inline void clear_has_summon_id();
  inline void set_has_reply_code();
  inline void clear_has_reply_code();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 summon_id_;
  ::google::protobuf::uint32 reply_code_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static eg_buy_wish_summon_request* default_instance_;
};
// -------------------------------------------------------------------

class ge_buy_wish_summon_reply : public ::google::protobuf::Message {
 public:
  ge_buy_wish_summon_reply();
  virtual ~ge_buy_wish_summon_reply();

  ge_buy_wish_summon_reply(const ge_buy_wish_summon_reply& from);

  inline ge_buy_wish_summon_reply& operator=(const ge_buy_wish_summon_reply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ge_buy_wish_summon_reply& default_instance();

  void Swap(ge_buy_wish_summon_reply* other);

  // implements Message ----------------------------------------------

  ge_buy_wish_summon_reply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ge_buy_wish_summon_reply& from);
  void MergeFrom(const ge_buy_wish_summon_reply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 summon_id = 1;
  inline bool has_summon_id() const;
  inline void clear_summon_id();
  static const int kSummonIdFieldNumber = 1;
  inline ::google::protobuf::uint32 summon_id() const;
  inline void set_summon_id(::google::protobuf::uint32 value);

  // optional uint32 reply_code = 2;
  inline bool has_reply_code() const;
  inline void clear_reply_code();
  static const int kReplyCodeFieldNumber = 2;
  inline ::google::protobuf::uint32 reply_code() const;
  inline void set_reply_code(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.server.ge_buy_wish_summon_reply)
 private:
  inline void set_has_summon_id();
  inline void clear_has_summon_id();
  inline void set_has_reply_code();
  inline void clear_has_reply_code();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 summon_id_;
  ::google::protobuf::uint32 reply_code_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static ge_buy_wish_summon_reply* default_instance_;
};
// -------------------------------------------------------------------

class eg_king_open_wish_summon_request : public ::google::protobuf::Message {
 public:
  eg_king_open_wish_summon_request();
  virtual ~eg_king_open_wish_summon_request();

  eg_king_open_wish_summon_request(const eg_king_open_wish_summon_request& from);

  inline eg_king_open_wish_summon_request& operator=(const eg_king_open_wish_summon_request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const eg_king_open_wish_summon_request& default_instance();

  void Swap(eg_king_open_wish_summon_request* other);

  // implements Message ----------------------------------------------

  eg_king_open_wish_summon_request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const eg_king_open_wish_summon_request& from);
  void MergeFrom(const eg_king_open_wish_summon_request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 summon_id = 1;
  inline bool has_summon_id() const;
  inline void clear_summon_id();
  static const int kSummonIdFieldNumber = 1;
  inline ::google::protobuf::uint32 summon_id() const;
  inline void set_summon_id(::google::protobuf::uint32 value);

  // optional uint32 reply_code = 2;
  inline bool has_reply_code() const;
  inline void clear_reply_code();
  static const int kReplyCodeFieldNumber = 2;
  inline ::google::protobuf::uint32 reply_code() const;
  inline void set_reply_code(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.server.eg_king_open_wish_summon_request)
 private:
  inline void set_has_summon_id();
  inline void clear_has_summon_id();
  inline void set_has_reply_code();
  inline void clear_has_reply_code();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 summon_id_;
  ::google::protobuf::uint32 reply_code_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static eg_king_open_wish_summon_request* default_instance_;
};
// -------------------------------------------------------------------

class ge_king_open_wish_summon_reply : public ::google::protobuf::Message {
 public:
  ge_king_open_wish_summon_reply();
  virtual ~ge_king_open_wish_summon_reply();

  ge_king_open_wish_summon_reply(const ge_king_open_wish_summon_reply& from);

  inline ge_king_open_wish_summon_reply& operator=(const ge_king_open_wish_summon_reply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ge_king_open_wish_summon_reply& default_instance();

  void Swap(ge_king_open_wish_summon_reply* other);

  // implements Message ----------------------------------------------

  ge_king_open_wish_summon_reply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ge_king_open_wish_summon_reply& from);
  void MergeFrom(const ge_king_open_wish_summon_reply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 summon_id = 1;
  inline bool has_summon_id() const;
  inline void clear_summon_id();
  static const int kSummonIdFieldNumber = 1;
  inline ::google::protobuf::uint32 summon_id() const;
  inline void set_summon_id(::google::protobuf::uint32 value);

  // optional uint32 reply_code = 2;
  inline bool has_reply_code() const;
  inline void clear_reply_code();
  static const int kReplyCodeFieldNumber = 2;
  inline ::google::protobuf::uint32 reply_code() const;
  inline void set_reply_code(::google::protobuf::uint32 value);

  // optional .proto.common.role_change_data rcd = 3;
  inline bool has_rcd() const;
  inline void clear_rcd();
  static const int kRcdFieldNumber = 3;
  inline const ::proto::common::role_change_data& rcd() const;
  inline ::proto::common::role_change_data* mutable_rcd();
  inline ::proto::common::role_change_data* release_rcd();
  inline void set_allocated_rcd(::proto::common::role_change_data* rcd);

  // @@protoc_insertion_point(class_scope:proto.server.ge_king_open_wish_summon_reply)
 private:
  inline void set_has_summon_id();
  inline void clear_has_summon_id();
  inline void set_has_reply_code();
  inline void clear_has_reply_code();
  inline void set_has_rcd();
  inline void clear_has_rcd();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 summon_id_;
  ::google::protobuf::uint32 reply_code_;
  ::proto::common::role_change_data* rcd_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static ge_king_open_wish_summon_reply* default_instance_;
};
// -------------------------------------------------------------------

class ge_modify_family_money_request : public ::google::protobuf::Message {
 public:
  ge_modify_family_money_request();
  virtual ~ge_modify_family_money_request();

  ge_modify_family_money_request(const ge_modify_family_money_request& from);

  inline ge_modify_family_money_request& operator=(const ge_modify_family_money_request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ge_modify_family_money_request& default_instance();

  void Swap(ge_modify_family_money_request* other);

  // implements Message ----------------------------------------------

  ge_modify_family_money_request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ge_modify_family_money_request& from);
  void MergeFrom(const ge_modify_family_money_request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 family_id = 1;
  inline bool has_family_id() const;
  inline void clear_family_id();
  static const int kFamilyIdFieldNumber = 1;
  inline ::google::protobuf::uint64 family_id() const;
  inline void set_family_id(::google::protobuf::uint64 value);

  // optional uint32 type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);

  // optional uint32 num = 3;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 3;
  inline ::google::protobuf::uint32 num() const;
  inline void set_num(::google::protobuf::uint32 value);

  // optional uint32 source_type = 4;
  inline bool has_source_type() const;
  inline void clear_source_type();
  static const int kSourceTypeFieldNumber = 4;
  inline ::google::protobuf::uint32 source_type() const;
  inline void set_source_type(::google::protobuf::uint32 value);

  // optional uint32 source_param = 5;
  inline bool has_source_param() const;
  inline void clear_source_param();
  static const int kSourceParamFieldNumber = 5;
  inline ::google::protobuf::uint32 source_param() const;
  inline void set_source_param(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.server.ge_modify_family_money_request)
 private:
  inline void set_has_family_id();
  inline void clear_has_family_id();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_num();
  inline void clear_has_num();
  inline void set_has_source_type();
  inline void clear_has_source_type();
  inline void set_has_source_param();
  inline void clear_has_source_param();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 family_id_;
  ::google::protobuf::uint32 type_;
  ::google::protobuf::uint32 num_;
  ::google::protobuf::uint32 source_type_;
  ::google::protobuf::uint32 source_param_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static ge_modify_family_money_request* default_instance_;
};
// -------------------------------------------------------------------

class ge_modify_country_money_request : public ::google::protobuf::Message {
 public:
  ge_modify_country_money_request();
  virtual ~ge_modify_country_money_request();

  ge_modify_country_money_request(const ge_modify_country_money_request& from);

  inline ge_modify_country_money_request& operator=(const ge_modify_country_money_request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ge_modify_country_money_request& default_instance();

  void Swap(ge_modify_country_money_request* other);

  // implements Message ----------------------------------------------

  ge_modify_country_money_request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ge_modify_country_money_request& from);
  void MergeFrom(const ge_modify_country_money_request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 country_id = 1;
  inline bool has_country_id() const;
  inline void clear_country_id();
  static const int kCountryIdFieldNumber = 1;
  inline ::google::protobuf::uint32 country_id() const;
  inline void set_country_id(::google::protobuf::uint32 value);

  // optional uint32 type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);

  // optional uint32 num = 3;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 3;
  inline ::google::protobuf::uint32 num() const;
  inline void set_num(::google::protobuf::uint32 value);

  // optional uint32 source_type = 4;
  inline bool has_source_type() const;
  inline void clear_source_type();
  static const int kSourceTypeFieldNumber = 4;
  inline ::google::protobuf::uint32 source_type() const;
  inline void set_source_type(::google::protobuf::uint32 value);

  // optional uint32 source_param = 5;
  inline bool has_source_param() const;
  inline void clear_source_param();
  static const int kSourceParamFieldNumber = 5;
  inline ::google::protobuf::uint32 source_param() const;
  inline void set_source_param(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.server.ge_modify_country_money_request)
 private:
  inline void set_has_country_id();
  inline void clear_has_country_id();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_num();
  inline void clear_has_num();
  inline void set_has_source_type();
  inline void clear_has_source_type();
  inline void set_has_source_param();
  inline void clear_has_source_param();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 country_id_;
  ::google::protobuf::uint32 type_;
  ::google::protobuf::uint32 num_;
  ::google::protobuf::uint32 source_type_;
  ::google::protobuf::uint32 source_param_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static ge_modify_country_money_request* default_instance_;
};
// -------------------------------------------------------------------

class ge_get_wish_summon_info_reply : public ::google::protobuf::Message {
 public:
  ge_get_wish_summon_info_reply();
  virtual ~ge_get_wish_summon_info_reply();

  ge_get_wish_summon_info_reply(const ge_get_wish_summon_info_reply& from);

  inline ge_get_wish_summon_info_reply& operator=(const ge_get_wish_summon_info_reply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ge_get_wish_summon_info_reply& default_instance();

  void Swap(ge_get_wish_summon_info_reply* other);

  // implements Message ----------------------------------------------

  ge_get_wish_summon_info_reply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ge_get_wish_summon_info_reply& from);
  void MergeFrom(const ge_get_wish_summon_info_reply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto.common.buy_summon_info buy_info = 1;
  inline int buy_info_size() const;
  inline void clear_buy_info();
  static const int kBuyInfoFieldNumber = 1;
  inline const ::proto::common::buy_summon_info& buy_info(int index) const;
  inline ::proto::common::buy_summon_info* mutable_buy_info(int index);
  inline ::proto::common::buy_summon_info* add_buy_info();
  inline const ::google::protobuf::RepeatedPtrField< ::proto::common::buy_summon_info >&
      buy_info() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto::common::buy_summon_info >*
      mutable_buy_info();

  // @@protoc_insertion_point(class_scope:proto.server.ge_get_wish_summon_info_reply)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto::common::buy_summon_info > buy_info_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static ge_get_wish_summon_info_reply* default_instance_;
};
// -------------------------------------------------------------------

class ge_destine_item_request : public ::google::protobuf::Message {
 public:
  ge_destine_item_request();
  virtual ~ge_destine_item_request();

  ge_destine_item_request(const ge_destine_item_request& from);

  inline ge_destine_item_request& operator=(const ge_destine_item_request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ge_destine_item_request& default_instance();

  void Swap(ge_destine_item_request* other);

  // implements Message ----------------------------------------------

  ge_destine_item_request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ge_destine_item_request& from);
  void MergeFrom(const ge_destine_item_request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 role_id = 1;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 1;
  inline ::google::protobuf::uint64 role_id() const;
  inline void set_role_id(::google::protobuf::uint64 value);

  // optional uint32 search_id = 2;
  inline bool has_search_id() const;
  inline void clear_search_id();
  static const int kSearchIdFieldNumber = 2;
  inline ::google::protobuf::uint32 search_id() const;
  inline void set_search_id(::google::protobuf::uint32 value);

  // optional uint32 num = 3;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 3;
  inline ::google::protobuf::uint32 num() const;
  inline void set_num(::google::protobuf::uint32 value);

  // optional .proto.common.ex_reason reason = 4;
  inline bool has_reason() const;
  inline void clear_reason();
  static const int kReasonFieldNumber = 4;
  inline const ::proto::common::ex_reason& reason() const;
  inline ::proto::common::ex_reason* mutable_reason();
  inline ::proto::common::ex_reason* release_reason();
  inline void set_allocated_reason(::proto::common::ex_reason* reason);

  // @@protoc_insertion_point(class_scope:proto.server.ge_destine_item_request)
 private:
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_search_id();
  inline void clear_has_search_id();
  inline void set_has_num();
  inline void clear_has_num();
  inline void set_has_reason();
  inline void clear_has_reason();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 role_id_;
  ::google::protobuf::uint32 search_id_;
  ::google::protobuf::uint32 num_;
  ::proto::common::ex_reason* reason_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static ge_destine_item_request* default_instance_;
};
// -------------------------------------------------------------------

class eg_destine_item_reply : public ::google::protobuf::Message {
 public:
  eg_destine_item_reply();
  virtual ~eg_destine_item_reply();

  eg_destine_item_reply(const eg_destine_item_reply& from);

  inline eg_destine_item_reply& operator=(const eg_destine_item_reply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const eg_destine_item_reply& default_instance();

  void Swap(eg_destine_item_reply* other);

  // implements Message ----------------------------------------------

  eg_destine_item_reply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const eg_destine_item_reply& from);
  void MergeFrom(const eg_destine_item_reply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 role_id = 1;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 1;
  inline ::google::protobuf::uint64 role_id() const;
  inline void set_role_id(::google::protobuf::uint64 value);

  // optional uint64 goods_uid = 2;
  inline bool has_goods_uid() const;
  inline void clear_goods_uid();
  static const int kGoodsUidFieldNumber = 2;
  inline ::google::protobuf::uint64 goods_uid() const;
  inline void set_goods_uid(::google::protobuf::uint64 value);

  // optional uint32 item_id = 3;
  inline bool has_item_id() const;
  inline void clear_item_id();
  static const int kItemIdFieldNumber = 3;
  inline ::google::protobuf::uint32 item_id() const;
  inline void set_item_id(::google::protobuf::uint32 value);

  // optional uint32 num = 4;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 4;
  inline ::google::protobuf::uint32 num() const;
  inline void set_num(::google::protobuf::uint32 value);

  // optional uint32 price = 5;
  inline bool has_price() const;
  inline void clear_price();
  static const int kPriceFieldNumber = 5;
  inline ::google::protobuf::uint32 price() const;
  inline void set_price(::google::protobuf::uint32 value);

  // optional .proto.common.ex_reason reason = 6;
  inline bool has_reason() const;
  inline void clear_reason();
  static const int kReasonFieldNumber = 6;
  inline const ::proto::common::ex_reason& reason() const;
  inline ::proto::common::ex_reason* mutable_reason();
  inline ::proto::common::ex_reason* release_reason();
  inline void set_allocated_reason(::proto::common::ex_reason* reason);

  // optional uint32 reply_code = 7;
  inline bool has_reply_code() const;
  inline void clear_reply_code();
  static const int kReplyCodeFieldNumber = 7;
  inline ::google::protobuf::uint32 reply_code() const;
  inline void set_reply_code(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.server.eg_destine_item_reply)
 private:
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_goods_uid();
  inline void clear_has_goods_uid();
  inline void set_has_item_id();
  inline void clear_has_item_id();
  inline void set_has_num();
  inline void clear_has_num();
  inline void set_has_price();
  inline void clear_has_price();
  inline void set_has_reason();
  inline void clear_has_reason();
  inline void set_has_reply_code();
  inline void clear_has_reply_code();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 role_id_;
  ::google::protobuf::uint64 goods_uid_;
  ::google::protobuf::uint32 item_id_;
  ::google::protobuf::uint32 num_;
  ::proto::common::ex_reason* reason_;
  ::google::protobuf::uint32 price_;
  ::google::protobuf::uint32 reply_code_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static eg_destine_item_reply* default_instance_;
};
// -------------------------------------------------------------------

class ge_undestine_item_request : public ::google::protobuf::Message {
 public:
  ge_undestine_item_request();
  virtual ~ge_undestine_item_request();

  ge_undestine_item_request(const ge_undestine_item_request& from);

  inline ge_undestine_item_request& operator=(const ge_undestine_item_request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ge_undestine_item_request& default_instance();

  void Swap(ge_undestine_item_request* other);

  // implements Message ----------------------------------------------

  ge_undestine_item_request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ge_undestine_item_request& from);
  void MergeFrom(const ge_undestine_item_request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 goods_uid = 1;
  inline bool has_goods_uid() const;
  inline void clear_goods_uid();
  static const int kGoodsUidFieldNumber = 1;
  inline ::google::protobuf::uint64 goods_uid() const;
  inline void set_goods_uid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:proto.server.ge_undestine_item_request)
 private:
  inline void set_has_goods_uid();
  inline void clear_has_goods_uid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 goods_uid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static ge_undestine_item_request* default_instance_;
};
// -------------------------------------------------------------------

class ge_push_general_event_request : public ::google::protobuf::Message {
 public:
  ge_push_general_event_request();
  virtual ~ge_push_general_event_request();

  ge_push_general_event_request(const ge_push_general_event_request& from);

  inline ge_push_general_event_request& operator=(const ge_push_general_event_request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ge_push_general_event_request& default_instance();

  void Swap(ge_push_general_event_request* other);

  // implements Message ----------------------------------------------

  ge_push_general_event_request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ge_push_general_event_request& from);
  void MergeFrom(const ge_push_general_event_request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 index = 1;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 1;
  inline ::google::protobuf::uint32 index() const;
  inline void set_index(::google::protobuf::uint32 value);

  // optional uint64 role_uid = 2;
  inline bool has_role_uid() const;
  inline void clear_role_uid();
  static const int kRoleUidFieldNumber = 2;
  inline ::google::protobuf::uint64 role_uid() const;
  inline void set_role_uid(::google::protobuf::uint64 value);

  // optional string name = 3;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 3;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional uint32 value = 4;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 4;
  inline ::google::protobuf::uint32 value() const;
  inline void set_value(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.server.ge_push_general_event_request)
 private:
  inline void set_has_index();
  inline void clear_has_index();
  inline void set_has_role_uid();
  inline void clear_has_role_uid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 role_uid_;
  ::google::protobuf::uint32 index_;
  ::google::protobuf::uint32 value_;
  ::std::string* name_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static ge_push_general_event_request* default_instance_;
};
// -------------------------------------------------------------------

class eg_sync_general_event_count_info : public ::google::protobuf::Message {
 public:
  eg_sync_general_event_count_info();
  virtual ~eg_sync_general_event_count_info();

  eg_sync_general_event_count_info(const eg_sync_general_event_count_info& from);

  inline eg_sync_general_event_count_info& operator=(const eg_sync_general_event_count_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const eg_sync_general_event_count_info& default_instance();

  void Swap(eg_sync_general_event_count_info* other);

  // implements Message ----------------------------------------------

  eg_sync_general_event_count_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const eg_sync_general_event_count_info& from);
  void MergeFrom(const eg_sync_general_event_count_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto.common.general_info_single general_info = 1;
  inline int general_info_size() const;
  inline void clear_general_info();
  static const int kGeneralInfoFieldNumber = 1;
  inline const ::proto::common::general_info_single& general_info(int index) const;
  inline ::proto::common::general_info_single* mutable_general_info(int index);
  inline ::proto::common::general_info_single* add_general_info();
  inline const ::google::protobuf::RepeatedPtrField< ::proto::common::general_info_single >&
      general_info() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto::common::general_info_single >*
      mutable_general_info();

  // @@protoc_insertion_point(class_scope:proto.server.eg_sync_general_event_count_info)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto::common::general_info_single > general_info_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static eg_sync_general_event_count_info* default_instance_;
};
// -------------------------------------------------------------------

class eg_sync_general_event_data : public ::google::protobuf::Message {
 public:
  eg_sync_general_event_data();
  virtual ~eg_sync_general_event_data();

  eg_sync_general_event_data(const eg_sync_general_event_data& from);

  inline eg_sync_general_event_data& operator=(const eg_sync_general_event_data& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const eg_sync_general_event_data& default_instance();

  void Swap(eg_sync_general_event_data* other);

  // implements Message ----------------------------------------------

  eg_sync_general_event_data* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const eg_sync_general_event_data& from);
  void MergeFrom(const eg_sync_general_event_data& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto.common.general_event_data info = 1;
  inline int info_size() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 1;
  inline const ::proto::common::general_event_data& info(int index) const;
  inline ::proto::common::general_event_data* mutable_info(int index);
  inline ::proto::common::general_event_data* add_info();
  inline const ::google::protobuf::RepeatedPtrField< ::proto::common::general_event_data >&
      info() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto::common::general_event_data >*
      mutable_info();

  // @@protoc_insertion_point(class_scope:proto.server.eg_sync_general_event_data)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto::common::general_event_data > info_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static eg_sync_general_event_data* default_instance_;
};
// -------------------------------------------------------------------

class eg_sync_general_event_open : public ::google::protobuf::Message {
 public:
  eg_sync_general_event_open();
  virtual ~eg_sync_general_event_open();

  eg_sync_general_event_open(const eg_sync_general_event_open& from);

  inline eg_sync_general_event_open& operator=(const eg_sync_general_event_open& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const eg_sync_general_event_open& default_instance();

  void Swap(eg_sync_general_event_open* other);

  // implements Message ----------------------------------------------

  eg_sync_general_event_open* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const eg_sync_general_event_open& from);
  void MergeFrom(const eg_sync_general_event_open& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // optional .proto.common.general_event_data info = 2;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 2;
  inline const ::proto::common::general_event_data& info() const;
  inline ::proto::common::general_event_data* mutable_info();
  inline ::proto::common::general_event_data* release_info();
  inline void set_allocated_info(::proto::common::general_event_data* info);

  // @@protoc_insertion_point(class_scope:proto.server.eg_sync_general_event_open)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_info();
  inline void clear_has_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::proto::common::general_event_data* info_;
  ::google::protobuf::uint32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static eg_sync_general_event_open* default_instance_;
};
// -------------------------------------------------------------------

class eg_sync_general_event_done : public ::google::protobuf::Message {
 public:
  eg_sync_general_event_done();
  virtual ~eg_sync_general_event_done();

  eg_sync_general_event_done(const eg_sync_general_event_done& from);

  inline eg_sync_general_event_done& operator=(const eg_sync_general_event_done& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const eg_sync_general_event_done& default_instance();

  void Swap(eg_sync_general_event_done* other);

  // implements Message ----------------------------------------------

  eg_sync_general_event_done* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const eg_sync_general_event_done& from);
  void MergeFrom(const eg_sync_general_event_done& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // optional .proto.common.general_event_data info = 2;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 2;
  inline const ::proto::common::general_event_data& info() const;
  inline ::proto::common::general_event_data* mutable_info();
  inline ::proto::common::general_event_data* release_info();
  inline void set_allocated_info(::proto::common::general_event_data* info);

  // @@protoc_insertion_point(class_scope:proto.server.eg_sync_general_event_done)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_info();
  inline void clear_has_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::proto::common::general_event_data* info_;
  ::google::protobuf::uint32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static eg_sync_general_event_done* default_instance_;
};
// -------------------------------------------------------------------

class eg_sync_server_level : public ::google::protobuf::Message {
 public:
  eg_sync_server_level();
  virtual ~eg_sync_server_level();

  eg_sync_server_level(const eg_sync_server_level& from);

  inline eg_sync_server_level& operator=(const eg_sync_server_level& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const eg_sync_server_level& default_instance();

  void Swap(eg_sync_server_level* other);

  // implements Message ----------------------------------------------

  eg_sync_server_level* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const eg_sync_server_level& from);
  void MergeFrom(const eg_sync_server_level& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 level = 1;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 1;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.server.eg_sync_server_level)
 private:
  inline void set_has_level();
  inline void clear_has_level();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 level_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static eg_sync_server_level* default_instance_;
};
// -------------------------------------------------------------------

class me_transport_ntf : public ::google::protobuf::Message {
 public:
  me_transport_ntf();
  virtual ~me_transport_ntf();

  me_transport_ntf(const me_transport_ntf& from);

  inline me_transport_ntf& operator=(const me_transport_ntf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const me_transport_ntf& default_instance();

  void Swap(me_transport_ntf* other);

  // implements Message ----------------------------------------------

  me_transport_ntf* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const me_transport_ntf& from);
  void MergeFrom(const me_transport_ntf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 role_uid = 1;
  inline bool has_role_uid() const;
  inline void clear_role_uid();
  static const int kRoleUidFieldNumber = 1;
  inline ::google::protobuf::uint64 role_uid() const;
  inline void set_role_uid(::google::protobuf::uint64 value);

  // optional uint32 scene_id = 2;
  inline bool has_scene_id() const;
  inline void clear_scene_id();
  static const int kSceneIdFieldNumber = 2;
  inline ::google::protobuf::uint32 scene_id() const;
  inline void set_scene_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.server.me_transport_ntf)
 private:
  inline void set_has_role_uid();
  inline void clear_has_role_uid();
  inline void set_has_scene_id();
  inline void clear_has_scene_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 role_uid_;
  ::google::protobuf::uint32 scene_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static me_transport_ntf* default_instance_;
};
// -------------------------------------------------------------------

class eg_gm_transport_ntf : public ::google::protobuf::Message {
 public:
  eg_gm_transport_ntf();
  virtual ~eg_gm_transport_ntf();

  eg_gm_transport_ntf(const eg_gm_transport_ntf& from);

  inline eg_gm_transport_ntf& operator=(const eg_gm_transport_ntf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const eg_gm_transport_ntf& default_instance();

  void Swap(eg_gm_transport_ntf* other);

  // implements Message ----------------------------------------------

  eg_gm_transport_ntf* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const eg_gm_transport_ntf& from);
  void MergeFrom(const eg_gm_transport_ntf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 role_uid = 1;
  inline bool has_role_uid() const;
  inline void clear_role_uid();
  static const int kRoleUidFieldNumber = 1;
  inline ::google::protobuf::uint64 role_uid() const;
  inline void set_role_uid(::google::protobuf::uint64 value);

  // optional uint32 scene_id = 2;
  inline bool has_scene_id() const;
  inline void clear_scene_id();
  static const int kSceneIdFieldNumber = 2;
  inline ::google::protobuf::uint32 scene_id() const;
  inline void set_scene_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.server.eg_gm_transport_ntf)
 private:
  inline void set_has_role_uid();
  inline void clear_has_role_uid();
  inline void set_has_scene_id();
  inline void clear_has_scene_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 role_uid_;
  ::google::protobuf::uint32 scene_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static eg_gm_transport_ntf* default_instance_;
};
// -------------------------------------------------------------------

class ea_send_gm_msg_to_account_request : public ::google::protobuf::Message {
 public:
  ea_send_gm_msg_to_account_request();
  virtual ~ea_send_gm_msg_to_account_request();

  ea_send_gm_msg_to_account_request(const ea_send_gm_msg_to_account_request& from);

  inline ea_send_gm_msg_to_account_request& operator=(const ea_send_gm_msg_to_account_request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ea_send_gm_msg_to_account_request& default_instance();

  void Swap(ea_send_gm_msg_to_account_request* other);

  // implements Message ----------------------------------------------

  ea_send_gm_msg_to_account_request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ea_send_gm_msg_to_account_request& from);
  void MergeFrom(const ea_send_gm_msg_to_account_request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 cmd_type = 1;
  inline bool has_cmd_type() const;
  inline void clear_cmd_type();
  static const int kCmdTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 cmd_type() const;
  inline void set_cmd_type(::google::protobuf::uint32 value);

  // optional .proto.common.gm_msg_to_account msg = 2;
  inline bool has_msg() const;
  inline void clear_msg();
  static const int kMsgFieldNumber = 2;
  inline const ::proto::common::gm_msg_to_account& msg() const;
  inline ::proto::common::gm_msg_to_account* mutable_msg();
  inline ::proto::common::gm_msg_to_account* release_msg();
  inline void set_allocated_msg(::proto::common::gm_msg_to_account* msg);

  // @@protoc_insertion_point(class_scope:proto.server.ea_send_gm_msg_to_account_request)
 private:
  inline void set_has_cmd_type();
  inline void clear_has_cmd_type();
  inline void set_has_msg();
  inline void clear_has_msg();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::proto::common::gm_msg_to_account* msg_;
  ::google::protobuf::uint32 cmd_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static ea_send_gm_msg_to_account_request* default_instance_;
};
// -------------------------------------------------------------------

class ae_send_gm_msg_to_account_reply : public ::google::protobuf::Message {
 public:
  ae_send_gm_msg_to_account_reply();
  virtual ~ae_send_gm_msg_to_account_reply();

  ae_send_gm_msg_to_account_reply(const ae_send_gm_msg_to_account_reply& from);

  inline ae_send_gm_msg_to_account_reply& operator=(const ae_send_gm_msg_to_account_reply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ae_send_gm_msg_to_account_reply& default_instance();

  void Swap(ae_send_gm_msg_to_account_reply* other);

  // implements Message ----------------------------------------------

  ae_send_gm_msg_to_account_reply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ae_send_gm_msg_to_account_reply& from);
  void MergeFrom(const ae_send_gm_msg_to_account_reply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 reply_code = 1;
  inline bool has_reply_code() const;
  inline void clear_reply_code();
  static const int kReplyCodeFieldNumber = 1;
  inline ::google::protobuf::uint32 reply_code() const;
  inline void set_reply_code(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.server.ae_send_gm_msg_to_account_reply)
 private:
  inline void set_has_reply_code();
  inline void clear_has_reply_code();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 reply_code_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static ae_send_gm_msg_to_account_reply* default_instance_;
};
// -------------------------------------------------------------------

class al_send_gm_msg_to_account_requst : public ::google::protobuf::Message {
 public:
  al_send_gm_msg_to_account_requst();
  virtual ~al_send_gm_msg_to_account_requst();

  al_send_gm_msg_to_account_requst(const al_send_gm_msg_to_account_requst& from);

  inline al_send_gm_msg_to_account_requst& operator=(const al_send_gm_msg_to_account_requst& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const al_send_gm_msg_to_account_requst& default_instance();

  void Swap(al_send_gm_msg_to_account_requst* other);

  // implements Message ----------------------------------------------

  al_send_gm_msg_to_account_requst* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const al_send_gm_msg_to_account_requst& from);
  void MergeFrom(const al_send_gm_msg_to_account_requst& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 cmd_type = 1;
  inline bool has_cmd_type() const;
  inline void clear_cmd_type();
  static const int kCmdTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 cmd_type() const;
  inline void set_cmd_type(::google::protobuf::uint32 value);

  // optional .proto.common.gm_msg_to_account msg = 2;
  inline bool has_msg() const;
  inline void clear_msg();
  static const int kMsgFieldNumber = 2;
  inline const ::proto::common::gm_msg_to_account& msg() const;
  inline ::proto::common::gm_msg_to_account* mutable_msg();
  inline ::proto::common::gm_msg_to_account* release_msg();
  inline void set_allocated_msg(::proto::common::gm_msg_to_account* msg);

  // @@protoc_insertion_point(class_scope:proto.server.al_send_gm_msg_to_account_requst)
 private:
  inline void set_has_cmd_type();
  inline void clear_has_cmd_type();
  inline void set_has_msg();
  inline void clear_has_msg();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::proto::common::gm_msg_to_account* msg_;
  ::google::protobuf::uint32 cmd_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static al_send_gm_msg_to_account_requst* default_instance_;
};
// -------------------------------------------------------------------

class la_send_gm_msg_to_account_reply : public ::google::protobuf::Message {
 public:
  la_send_gm_msg_to_account_reply();
  virtual ~la_send_gm_msg_to_account_reply();

  la_send_gm_msg_to_account_reply(const la_send_gm_msg_to_account_reply& from);

  inline la_send_gm_msg_to_account_reply& operator=(const la_send_gm_msg_to_account_reply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const la_send_gm_msg_to_account_reply& default_instance();

  void Swap(la_send_gm_msg_to_account_reply* other);

  // implements Message ----------------------------------------------

  la_send_gm_msg_to_account_reply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const la_send_gm_msg_to_account_reply& from);
  void MergeFrom(const la_send_gm_msg_to_account_reply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 reply_code = 1;
  inline bool has_reply_code() const;
  inline void clear_reply_code();
  static const int kReplyCodeFieldNumber = 1;
  inline ::google::protobuf::uint32 reply_code() const;
  inline void set_reply_code(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.server.la_send_gm_msg_to_account_reply)
 private:
  inline void set_has_reply_code();
  inline void clear_has_reply_code();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 reply_code_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static la_send_gm_msg_to_account_reply* default_instance_;
};
// -------------------------------------------------------------------

class ln_send_gm_msg_to_account_request : public ::google::protobuf::Message {
 public:
  ln_send_gm_msg_to_account_request();
  virtual ~ln_send_gm_msg_to_account_request();

  ln_send_gm_msg_to_account_request(const ln_send_gm_msg_to_account_request& from);

  inline ln_send_gm_msg_to_account_request& operator=(const ln_send_gm_msg_to_account_request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ln_send_gm_msg_to_account_request& default_instance();

  void Swap(ln_send_gm_msg_to_account_request* other);

  // implements Message ----------------------------------------------

  ln_send_gm_msg_to_account_request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ln_send_gm_msg_to_account_request& from);
  void MergeFrom(const ln_send_gm_msg_to_account_request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 cmd_type = 1;
  inline bool has_cmd_type() const;
  inline void clear_cmd_type();
  static const int kCmdTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 cmd_type() const;
  inline void set_cmd_type(::google::protobuf::uint32 value);

  // optional uint32 server_id = 2;
  inline bool has_server_id() const;
  inline void clear_server_id();
  static const int kServerIdFieldNumber = 2;
  inline ::google::protobuf::uint32 server_id() const;
  inline void set_server_id(::google::protobuf::uint32 value);

  // optional .proto.common.gm_msg_to_account msg = 3;
  inline bool has_msg() const;
  inline void clear_msg();
  static const int kMsgFieldNumber = 3;
  inline const ::proto::common::gm_msg_to_account& msg() const;
  inline ::proto::common::gm_msg_to_account* mutable_msg();
  inline ::proto::common::gm_msg_to_account* release_msg();
  inline void set_allocated_msg(::proto::common::gm_msg_to_account* msg);

  // @@protoc_insertion_point(class_scope:proto.server.ln_send_gm_msg_to_account_request)
 private:
  inline void set_has_cmd_type();
  inline void clear_has_cmd_type();
  inline void set_has_server_id();
  inline void clear_has_server_id();
  inline void set_has_msg();
  inline void clear_has_msg();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 cmd_type_;
  ::google::protobuf::uint32 server_id_;
  ::proto::common::gm_msg_to_account* msg_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static ln_send_gm_msg_to_account_request* default_instance_;
};
// -------------------------------------------------------------------

class nl_send_gm_msg_to_account_reply : public ::google::protobuf::Message {
 public:
  nl_send_gm_msg_to_account_reply();
  virtual ~nl_send_gm_msg_to_account_reply();

  nl_send_gm_msg_to_account_reply(const nl_send_gm_msg_to_account_reply& from);

  inline nl_send_gm_msg_to_account_reply& operator=(const nl_send_gm_msg_to_account_reply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const nl_send_gm_msg_to_account_reply& default_instance();

  void Swap(nl_send_gm_msg_to_account_reply* other);

  // implements Message ----------------------------------------------

  nl_send_gm_msg_to_account_reply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const nl_send_gm_msg_to_account_reply& from);
  void MergeFrom(const nl_send_gm_msg_to_account_reply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 reply_code = 1;
  inline bool has_reply_code() const;
  inline void clear_reply_code();
  static const int kReplyCodeFieldNumber = 1;
  inline ::google::protobuf::uint32 reply_code() const;
  inline void set_reply_code(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.server.nl_send_gm_msg_to_account_reply)
 private:
  inline void set_has_reply_code();
  inline void clear_has_reply_code();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 reply_code_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static nl_send_gm_msg_to_account_reply* default_instance_;
};
// -------------------------------------------------------------------

class me_manage_role_ntf : public ::google::protobuf::Message {
 public:
  me_manage_role_ntf();
  virtual ~me_manage_role_ntf();

  me_manage_role_ntf(const me_manage_role_ntf& from);

  inline me_manage_role_ntf& operator=(const me_manage_role_ntf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const me_manage_role_ntf& default_instance();

  void Swap(me_manage_role_ntf* other);

  // implements Message ----------------------------------------------

  me_manage_role_ntf* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const me_manage_role_ntf& from);
  void MergeFrom(const me_manage_role_ntf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint64 role_uid = 1;
  inline int role_uid_size() const;
  inline void clear_role_uid();
  static const int kRoleUidFieldNumber = 1;
  inline ::google::protobuf::uint64 role_uid(int index) const;
  inline void set_role_uid(int index, ::google::protobuf::uint64 value);
  inline void add_role_uid(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      role_uid() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_role_uid();

  // optional uint32 manage_type = 2;
  inline bool has_manage_type() const;
  inline void clear_manage_type();
  static const int kManageTypeFieldNumber = 2;
  inline ::google::protobuf::uint32 manage_type() const;
  inline void set_manage_type(::google::protobuf::uint32 value);

  // optional uint32 offset_time = 3;
  inline bool has_offset_time() const;
  inline void clear_offset_time();
  static const int kOffsetTimeFieldNumber = 3;
  inline ::google::protobuf::uint32 offset_time() const;
  inline void set_offset_time(::google::protobuf::uint32 value);

  // optional uint32 admin_id = 4;
  inline bool has_admin_id() const;
  inline void clear_admin_id();
  static const int kAdminIdFieldNumber = 4;
  inline ::google::protobuf::uint32 admin_id() const;
  inline void set_admin_id(::google::protobuf::uint32 value);

  // optional string reason = 5;
  inline bool has_reason() const;
  inline void clear_reason();
  static const int kReasonFieldNumber = 5;
  inline const ::std::string& reason() const;
  inline void set_reason(const ::std::string& value);
  inline void set_reason(const char* value);
  inline void set_reason(const char* value, size_t size);
  inline ::std::string* mutable_reason();
  inline ::std::string* release_reason();
  inline void set_allocated_reason(::std::string* reason);

  // optional string oper_name = 6;
  inline bool has_oper_name() const;
  inline void clear_oper_name();
  static const int kOperNameFieldNumber = 6;
  inline const ::std::string& oper_name() const;
  inline void set_oper_name(const ::std::string& value);
  inline void set_oper_name(const char* value);
  inline void set_oper_name(const char* value, size_t size);
  inline ::std::string* mutable_oper_name();
  inline ::std::string* release_oper_name();
  inline void set_allocated_oper_name(::std::string* oper_name);

  // @@protoc_insertion_point(class_scope:proto.server.me_manage_role_ntf)
 private:
  inline void set_has_manage_type();
  inline void clear_has_manage_type();
  inline void set_has_offset_time();
  inline void clear_has_offset_time();
  inline void set_has_admin_id();
  inline void clear_has_admin_id();
  inline void set_has_reason();
  inline void clear_has_reason();
  inline void set_has_oper_name();
  inline void clear_has_oper_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > role_uid_;
  ::google::protobuf::uint32 manage_type_;
  ::google::protobuf::uint32 offset_time_;
  ::std::string* reason_;
  ::std::string* oper_name_;
  ::google::protobuf::uint32 admin_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static me_manage_role_ntf* default_instance_;
};
// -------------------------------------------------------------------

class em_manage_role_ntf : public ::google::protobuf::Message {
 public:
  em_manage_role_ntf();
  virtual ~em_manage_role_ntf();

  em_manage_role_ntf(const em_manage_role_ntf& from);

  inline em_manage_role_ntf& operator=(const em_manage_role_ntf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const em_manage_role_ntf& default_instance();

  void Swap(em_manage_role_ntf* other);

  // implements Message ----------------------------------------------

  em_manage_role_ntf* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const em_manage_role_ntf& from);
  void MergeFrom(const em_manage_role_ntf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto.gm_common.manage_reply_single reply_data = 1;
  inline int reply_data_size() const;
  inline void clear_reply_data();
  static const int kReplyDataFieldNumber = 1;
  inline const ::proto::gm_common::manage_reply_single& reply_data(int index) const;
  inline ::proto::gm_common::manage_reply_single* mutable_reply_data(int index);
  inline ::proto::gm_common::manage_reply_single* add_reply_data();
  inline const ::google::protobuf::RepeatedPtrField< ::proto::gm_common::manage_reply_single >&
      reply_data() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto::gm_common::manage_reply_single >*
      mutable_reply_data();

  // optional uint32 admin_id = 2;
  inline bool has_admin_id() const;
  inline void clear_admin_id();
  static const int kAdminIdFieldNumber = 2;
  inline ::google::protobuf::uint32 admin_id() const;
  inline void set_admin_id(::google::protobuf::uint32 value);

  // optional uint32 manage_type = 3;
  inline bool has_manage_type() const;
  inline void clear_manage_type();
  static const int kManageTypeFieldNumber = 3;
  inline ::google::protobuf::uint32 manage_type() const;
  inline void set_manage_type(::google::protobuf::uint32 value);

  // optional uint32 offset_time = 4;
  inline bool has_offset_time() const;
  inline void clear_offset_time();
  static const int kOffsetTimeFieldNumber = 4;
  inline ::google::protobuf::uint32 offset_time() const;
  inline void set_offset_time(::google::protobuf::uint32 value);

  // optional string reason = 5;
  inline bool has_reason() const;
  inline void clear_reason();
  static const int kReasonFieldNumber = 5;
  inline const ::std::string& reason() const;
  inline void set_reason(const ::std::string& value);
  inline void set_reason(const char* value);
  inline void set_reason(const char* value, size_t size);
  inline ::std::string* mutable_reason();
  inline ::std::string* release_reason();
  inline void set_allocated_reason(::std::string* reason);

  // optional string oper_name = 6;
  inline bool has_oper_name() const;
  inline void clear_oper_name();
  static const int kOperNameFieldNumber = 6;
  inline const ::std::string& oper_name() const;
  inline void set_oper_name(const ::std::string& value);
  inline void set_oper_name(const char* value);
  inline void set_oper_name(const char* value, size_t size);
  inline ::std::string* mutable_oper_name();
  inline ::std::string* release_oper_name();
  inline void set_allocated_oper_name(::std::string* oper_name);

  // @@protoc_insertion_point(class_scope:proto.server.em_manage_role_ntf)
 private:
  inline void set_has_admin_id();
  inline void clear_has_admin_id();
  inline void set_has_manage_type();
  inline void clear_has_manage_type();
  inline void set_has_offset_time();
  inline void clear_has_offset_time();
  inline void set_has_reason();
  inline void clear_has_reason();
  inline void set_has_oper_name();
  inline void clear_has_oper_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto::gm_common::manage_reply_single > reply_data_;
  ::google::protobuf::uint32 admin_id_;
  ::google::protobuf::uint32 manage_type_;
  ::std::string* reason_;
  ::std::string* oper_name_;
  ::google::protobuf::uint32 offset_time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static em_manage_role_ntf* default_instance_;
};
// -------------------------------------------------------------------

class eh_silence_role_notify : public ::google::protobuf::Message {
 public:
  eh_silence_role_notify();
  virtual ~eh_silence_role_notify();

  eh_silence_role_notify(const eh_silence_role_notify& from);

  inline eh_silence_role_notify& operator=(const eh_silence_role_notify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const eh_silence_role_notify& default_instance();

  void Swap(eh_silence_role_notify* other);

  // implements Message ----------------------------------------------

  eh_silence_role_notify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const eh_silence_role_notify& from);
  void MergeFrom(const eh_silence_role_notify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 silence_time = 1;
  inline bool has_silence_time() const;
  inline void clear_silence_time();
  static const int kSilenceTimeFieldNumber = 1;
  inline ::google::protobuf::uint32 silence_time() const;
  inline void set_silence_time(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.server.eh_silence_role_notify)
 private:
  inline void set_has_silence_time();
  inline void clear_has_silence_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 silence_time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static eh_silence_role_notify* default_instance_;
};
// -------------------------------------------------------------------

class nl_syn_account_info_notify : public ::google::protobuf::Message {
 public:
  nl_syn_account_info_notify();
  virtual ~nl_syn_account_info_notify();

  nl_syn_account_info_notify(const nl_syn_account_info_notify& from);

  inline nl_syn_account_info_notify& operator=(const nl_syn_account_info_notify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const nl_syn_account_info_notify& default_instance();

  void Swap(nl_syn_account_info_notify* other);

  // implements Message ----------------------------------------------

  nl_syn_account_info_notify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const nl_syn_account_info_notify& from);
  void MergeFrom(const nl_syn_account_info_notify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 account_id = 1;
  inline bool has_account_id() const;
  inline void clear_account_id();
  static const int kAccountIdFieldNumber = 1;
  inline ::google::protobuf::uint32 account_id() const;
  inline void set_account_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.server.nl_syn_account_info_notify)
 private:
  inline void set_has_account_id();
  inline void clear_has_account_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 account_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static nl_syn_account_info_notify* default_instance_;
};
// -------------------------------------------------------------------

class nd_syn_account_info_notify : public ::google::protobuf::Message {
 public:
  nd_syn_account_info_notify();
  virtual ~nd_syn_account_info_notify();

  nd_syn_account_info_notify(const nd_syn_account_info_notify& from);

  inline nd_syn_account_info_notify& operator=(const nd_syn_account_info_notify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const nd_syn_account_info_notify& default_instance();

  void Swap(nd_syn_account_info_notify* other);

  // implements Message ----------------------------------------------

  nd_syn_account_info_notify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const nd_syn_account_info_notify& from);
  void MergeFrom(const nd_syn_account_info_notify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 account_id = 1;
  inline bool has_account_id() const;
  inline void clear_account_id();
  static const int kAccountIdFieldNumber = 1;
  inline ::google::protobuf::uint32 account_id() const;
  inline void set_account_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.server.nd_syn_account_info_notify)
 private:
  inline void set_has_account_id();
  inline void clear_has_account_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 account_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static nd_syn_account_info_notify* default_instance_;
};
// -------------------------------------------------------------------

class gd_change_name_request : public ::google::protobuf::Message {
 public:
  gd_change_name_request();
  virtual ~gd_change_name_request();

  gd_change_name_request(const gd_change_name_request& from);

  inline gd_change_name_request& operator=(const gd_change_name_request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gd_change_name_request& default_instance();

  void Swap(gd_change_name_request* other);

  // implements Message ----------------------------------------------

  gd_change_name_request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gd_change_name_request& from);
  void MergeFrom(const gd_change_name_request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string new_name = 1;
  inline bool has_new_name() const;
  inline void clear_new_name();
  static const int kNewNameFieldNumber = 1;
  inline const ::std::string& new_name() const;
  inline void set_new_name(const ::std::string& value);
  inline void set_new_name(const char* value);
  inline void set_new_name(const char* value, size_t size);
  inline ::std::string* mutable_new_name();
  inline ::std::string* release_new_name();
  inline void set_allocated_new_name(::std::string* new_name);

  // optional uint32 cost = 2;
  inline bool has_cost() const;
  inline void clear_cost();
  static const int kCostFieldNumber = 2;
  inline ::google::protobuf::uint32 cost() const;
  inline void set_cost(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.server.gd_change_name_request)
 private:
  inline void set_has_new_name();
  inline void clear_has_new_name();
  inline void set_has_cost();
  inline void clear_has_cost();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* new_name_;
  ::google::protobuf::uint32 cost_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static gd_change_name_request* default_instance_;
};
// -------------------------------------------------------------------

class dg_change_name_reply : public ::google::protobuf::Message {
 public:
  dg_change_name_reply();
  virtual ~dg_change_name_reply();

  dg_change_name_reply(const dg_change_name_reply& from);

  inline dg_change_name_reply& operator=(const dg_change_name_reply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const dg_change_name_reply& default_instance();

  void Swap(dg_change_name_reply* other);

  // implements Message ----------------------------------------------

  dg_change_name_reply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const dg_change_name_reply& from);
  void MergeFrom(const dg_change_name_reply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 reply_code = 1;
  inline bool has_reply_code() const;
  inline void clear_reply_code();
  static const int kReplyCodeFieldNumber = 1;
  inline ::google::protobuf::uint32 reply_code() const;
  inline void set_reply_code(::google::protobuf::uint32 value);

  // optional string new_name = 2;
  inline bool has_new_name() const;
  inline void clear_new_name();
  static const int kNewNameFieldNumber = 2;
  inline const ::std::string& new_name() const;
  inline void set_new_name(const ::std::string& value);
  inline void set_new_name(const char* value);
  inline void set_new_name(const char* value, size_t size);
  inline ::std::string* mutable_new_name();
  inline ::std::string* release_new_name();
  inline void set_allocated_new_name(::std::string* new_name);

  // optional uint32 cost = 3;
  inline bool has_cost() const;
  inline void clear_cost();
  static const int kCostFieldNumber = 3;
  inline ::google::protobuf::uint32 cost() const;
  inline void set_cost(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.server.dg_change_name_reply)
 private:
  inline void set_has_reply_code();
  inline void clear_has_reply_code();
  inline void set_has_new_name();
  inline void clear_has_new_name();
  inline void set_has_cost();
  inline void clear_has_cost();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* new_name_;
  ::google::protobuf::uint32 reply_code_;
  ::google::protobuf::uint32 cost_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static dg_change_name_reply* default_instance_;
};
// -------------------------------------------------------------------

class de_change_name_notify : public ::google::protobuf::Message {
 public:
  de_change_name_notify();
  virtual ~de_change_name_notify();

  de_change_name_notify(const de_change_name_notify& from);

  inline de_change_name_notify& operator=(const de_change_name_notify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const de_change_name_notify& default_instance();

  void Swap(de_change_name_notify* other);

  // implements Message ----------------------------------------------

  de_change_name_notify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const de_change_name_notify& from);
  void MergeFrom(const de_change_name_notify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string new_name = 1;
  inline bool has_new_name() const;
  inline void clear_new_name();
  static const int kNewNameFieldNumber = 1;
  inline const ::std::string& new_name() const;
  inline void set_new_name(const ::std::string& value);
  inline void set_new_name(const char* value);
  inline void set_new_name(const char* value, size_t size);
  inline ::std::string* mutable_new_name();
  inline ::std::string* release_new_name();
  inline void set_allocated_new_name(::std::string* new_name);

  // @@protoc_insertion_point(class_scope:proto.server.de_change_name_notify)
 private:
  inline void set_has_new_name();
  inline void clear_has_new_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* new_name_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static de_change_name_notify* default_instance_;
};
// -------------------------------------------------------------------

class eh_change_name_notify : public ::google::protobuf::Message {
 public:
  eh_change_name_notify();
  virtual ~eh_change_name_notify();

  eh_change_name_notify(const eh_change_name_notify& from);

  inline eh_change_name_notify& operator=(const eh_change_name_notify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const eh_change_name_notify& default_instance();

  void Swap(eh_change_name_notify* other);

  // implements Message ----------------------------------------------

  eh_change_name_notify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const eh_change_name_notify& from);
  void MergeFrom(const eh_change_name_notify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string new_name = 1;
  inline bool has_new_name() const;
  inline void clear_new_name();
  static const int kNewNameFieldNumber = 1;
  inline const ::std::string& new_name() const;
  inline void set_new_name(const ::std::string& value);
  inline void set_new_name(const char* value);
  inline void set_new_name(const char* value, size_t size);
  inline ::std::string* mutable_new_name();
  inline ::std::string* release_new_name();
  inline void set_allocated_new_name(::std::string* new_name);

  // @@protoc_insertion_point(class_scope:proto.server.eh_change_name_notify)
 private:
  inline void set_has_new_name();
  inline void clear_has_new_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* new_name_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static eh_change_name_notify* default_instance_;
};
// -------------------------------------------------------------------

class me_reload_config_notify : public ::google::protobuf::Message {
 public:
  me_reload_config_notify();
  virtual ~me_reload_config_notify();

  me_reload_config_notify(const me_reload_config_notify& from);

  inline me_reload_config_notify& operator=(const me_reload_config_notify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const me_reload_config_notify& default_instance();

  void Swap(me_reload_config_notify* other);

  // implements Message ----------------------------------------------

  me_reload_config_notify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const me_reload_config_notify& from);
  void MergeFrom(const me_reload_config_notify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 load_type = 1;
  inline bool has_load_type() const;
  inline void clear_load_type();
  static const int kLoadTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 load_type() const;
  inline void set_load_type(::google::protobuf::uint32 value);

  // optional string file_name = 2;
  inline bool has_file_name() const;
  inline void clear_file_name();
  static const int kFileNameFieldNumber = 2;
  inline const ::std::string& file_name() const;
  inline void set_file_name(const ::std::string& value);
  inline void set_file_name(const char* value);
  inline void set_file_name(const char* value, size_t size);
  inline ::std::string* mutable_file_name();
  inline ::std::string* release_file_name();
  inline void set_allocated_file_name(::std::string* file_name);

  // @@protoc_insertion_point(class_scope:proto.server.me_reload_config_notify)
 private:
  inline void set_has_load_type();
  inline void clear_has_load_type();
  inline void set_has_file_name();
  inline void clear_has_file_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* file_name_;
  ::google::protobuf::uint32 load_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static me_reload_config_notify* default_instance_;
};
// -------------------------------------------------------------------

class eg_reload_config_notify : public ::google::protobuf::Message {
 public:
  eg_reload_config_notify();
  virtual ~eg_reload_config_notify();

  eg_reload_config_notify(const eg_reload_config_notify& from);

  inline eg_reload_config_notify& operator=(const eg_reload_config_notify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const eg_reload_config_notify& default_instance();

  void Swap(eg_reload_config_notify* other);

  // implements Message ----------------------------------------------

  eg_reload_config_notify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const eg_reload_config_notify& from);
  void MergeFrom(const eg_reload_config_notify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 load_type = 1;
  inline bool has_load_type() const;
  inline void clear_load_type();
  static const int kLoadTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 load_type() const;
  inline void set_load_type(::google::protobuf::uint32 value);

  // optional string file_name = 2;
  inline bool has_file_name() const;
  inline void clear_file_name();
  static const int kFileNameFieldNumber = 2;
  inline const ::std::string& file_name() const;
  inline void set_file_name(const ::std::string& value);
  inline void set_file_name(const char* value);
  inline void set_file_name(const char* value, size_t size);
  inline ::std::string* mutable_file_name();
  inline ::std::string* release_file_name();
  inline void set_allocated_file_name(::std::string* file_name);

  // @@protoc_insertion_point(class_scope:proto.server.eg_reload_config_notify)
 private:
  inline void set_has_load_type();
  inline void clear_has_load_type();
  inline void set_has_file_name();
  inline void clear_has_file_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* file_name_;
  ::google::protobuf::uint32 load_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static eg_reload_config_notify* default_instance_;
};
// -------------------------------------------------------------------

class ge_change_friendliness_request : public ::google::protobuf::Message {
 public:
  ge_change_friendliness_request();
  virtual ~ge_change_friendliness_request();

  ge_change_friendliness_request(const ge_change_friendliness_request& from);

  inline ge_change_friendliness_request& operator=(const ge_change_friendliness_request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ge_change_friendliness_request& default_instance();

  void Swap(ge_change_friendliness_request* other);

  // implements Message ----------------------------------------------

  ge_change_friendliness_request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ge_change_friendliness_request& from);
  void MergeFrom(const ge_change_friendliness_request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 my_role_id = 1;
  inline bool has_my_role_id() const;
  inline void clear_my_role_id();
  static const int kMyRoleIdFieldNumber = 1;
  inline ::google::protobuf::uint64 my_role_id() const;
  inline void set_my_role_id(::google::protobuf::uint64 value);

  // optional uint64 friend_role_id = 2;
  inline bool has_friend_role_id() const;
  inline void clear_friend_role_id();
  static const int kFriendRoleIdFieldNumber = 2;
  inline ::google::protobuf::uint64 friend_role_id() const;
  inline void set_friend_role_id(::google::protobuf::uint64 value);

  // optional int32 change_value = 3;
  inline bool has_change_value() const;
  inline void clear_change_value();
  static const int kChangeValueFieldNumber = 3;
  inline ::google::protobuf::int32 change_value() const;
  inline void set_change_value(::google::protobuf::int32 value);

  // optional .proto.common.change_friendliness_reason reason = 4;
  inline bool has_reason() const;
  inline void clear_reason();
  static const int kReasonFieldNumber = 4;
  inline ::proto::common::change_friendliness_reason reason() const;
  inline void set_reason(::proto::common::change_friendliness_reason value);

  // @@protoc_insertion_point(class_scope:proto.server.ge_change_friendliness_request)
 private:
  inline void set_has_my_role_id();
  inline void clear_has_my_role_id();
  inline void set_has_friend_role_id();
  inline void clear_has_friend_role_id();
  inline void set_has_change_value();
  inline void clear_has_change_value();
  inline void set_has_reason();
  inline void clear_has_reason();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 my_role_id_;
  ::google::protobuf::uint64 friend_role_id_;
  ::google::protobuf::int32 change_value_;
  int reason_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static ge_change_friendliness_request* default_instance_;
};
// -------------------------------------------------------------------

class eg_change_friendliness_notify : public ::google::protobuf::Message {
 public:
  eg_change_friendliness_notify();
  virtual ~eg_change_friendliness_notify();

  eg_change_friendliness_notify(const eg_change_friendliness_notify& from);

  inline eg_change_friendliness_notify& operator=(const eg_change_friendliness_notify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const eg_change_friendliness_notify& default_instance();

  void Swap(eg_change_friendliness_notify* other);

  // implements Message ----------------------------------------------

  eg_change_friendliness_notify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const eg_change_friendliness_notify& from);
  void MergeFrom(const eg_change_friendliness_notify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 my_role_id = 1;
  inline bool has_my_role_id() const;
  inline void clear_my_role_id();
  static const int kMyRoleIdFieldNumber = 1;
  inline ::google::protobuf::uint64 my_role_id() const;
  inline void set_my_role_id(::google::protobuf::uint64 value);

  // optional uint64 friend_role_id = 2;
  inline bool has_friend_role_id() const;
  inline void clear_friend_role_id();
  static const int kFriendRoleIdFieldNumber = 2;
  inline ::google::protobuf::uint64 friend_role_id() const;
  inline void set_friend_role_id(::google::protobuf::uint64 value);

  // optional int32 change_value = 3;
  inline bool has_change_value() const;
  inline void clear_change_value();
  static const int kChangeValueFieldNumber = 3;
  inline ::google::protobuf::int32 change_value() const;
  inline void set_change_value(::google::protobuf::int32 value);

  // optional .proto.common.change_friendliness_reason reason = 4;
  inline bool has_reason() const;
  inline void clear_reason();
  static const int kReasonFieldNumber = 4;
  inline ::proto::common::change_friendliness_reason reason() const;
  inline void set_reason(::proto::common::change_friendliness_reason value);

  // @@protoc_insertion_point(class_scope:proto.server.eg_change_friendliness_notify)
 private:
  inline void set_has_my_role_id();
  inline void clear_has_my_role_id();
  inline void set_has_friend_role_id();
  inline void clear_has_friend_role_id();
  inline void set_has_change_value();
  inline void clear_has_change_value();
  inline void set_has_reason();
  inline void clear_has_reason();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 my_role_id_;
  ::google::protobuf::uint64 friend_role_id_;
  ::google::protobuf::int32 change_value_;
  int reason_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static eg_change_friendliness_notify* default_instance_;
};
// -------------------------------------------------------------------

class ge_get_friendliness_request : public ::google::protobuf::Message {
 public:
  ge_get_friendliness_request();
  virtual ~ge_get_friendliness_request();

  ge_get_friendliness_request(const ge_get_friendliness_request& from);

  inline ge_get_friendliness_request& operator=(const ge_get_friendliness_request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ge_get_friendliness_request& default_instance();

  void Swap(ge_get_friendliness_request* other);

  // implements Message ----------------------------------------------

  ge_get_friendliness_request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ge_get_friendliness_request& from);
  void MergeFrom(const ge_get_friendliness_request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 role_id = 1;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 1;
  inline ::google::protobuf::uint64 role_id() const;
  inline void set_role_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:proto.server.ge_get_friendliness_request)
 private:
  inline void set_has_role_id();
  inline void clear_has_role_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 role_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static ge_get_friendliness_request* default_instance_;
};
// -------------------------------------------------------------------

class player_friendliness : public ::google::protobuf::Message {
 public:
  player_friendliness();
  virtual ~player_friendliness();

  player_friendliness(const player_friendliness& from);

  inline player_friendliness& operator=(const player_friendliness& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const player_friendliness& default_instance();

  void Swap(player_friendliness* other);

  // implements Message ----------------------------------------------

  player_friendliness* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const player_friendliness& from);
  void MergeFrom(const player_friendliness& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 friend_role_id = 1;
  inline bool has_friend_role_id() const;
  inline void clear_friend_role_id();
  static const int kFriendRoleIdFieldNumber = 1;
  inline ::google::protobuf::uint64 friend_role_id() const;
  inline void set_friend_role_id(::google::protobuf::uint64 value);

  // optional uint32 friendliness = 2;
  inline bool has_friendliness() const;
  inline void clear_friendliness();
  static const int kFriendlinessFieldNumber = 2;
  inline ::google::protobuf::uint32 friendliness() const;
  inline void set_friendliness(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.server.player_friendliness)
 private:
  inline void set_has_friend_role_id();
  inline void clear_has_friend_role_id();
  inline void set_has_friendliness();
  inline void clear_has_friendliness();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 friend_role_id_;
  ::google::protobuf::uint32 friendliness_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static player_friendliness* default_instance_;
};
// -------------------------------------------------------------------

class eg_get_friendliness_reply : public ::google::protobuf::Message {
 public:
  eg_get_friendliness_reply();
  virtual ~eg_get_friendliness_reply();

  eg_get_friendliness_reply(const eg_get_friendliness_reply& from);

  inline eg_get_friendliness_reply& operator=(const eg_get_friendliness_reply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const eg_get_friendliness_reply& default_instance();

  void Swap(eg_get_friendliness_reply* other);

  // implements Message ----------------------------------------------

  eg_get_friendliness_reply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const eg_get_friendliness_reply& from);
  void MergeFrom(const eg_get_friendliness_reply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 role_id = 1;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 1;
  inline ::google::protobuf::uint64 role_id() const;
  inline void set_role_id(::google::protobuf::uint64 value);

  // repeated .proto.server.player_friendliness friendliness = 2;
  inline int friendliness_size() const;
  inline void clear_friendliness();
  static const int kFriendlinessFieldNumber = 2;
  inline const ::proto::server::player_friendliness& friendliness(int index) const;
  inline ::proto::server::player_friendliness* mutable_friendliness(int index);
  inline ::proto::server::player_friendliness* add_friendliness();
  inline const ::google::protobuf::RepeatedPtrField< ::proto::server::player_friendliness >&
      friendliness() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto::server::player_friendliness >*
      mutable_friendliness();

  // @@protoc_insertion_point(class_scope:proto.server.eg_get_friendliness_reply)
 private:
  inline void set_has_role_id();
  inline void clear_has_role_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 role_id_;
  ::google::protobuf::RepeatedPtrField< ::proto::server::player_friendliness > friendliness_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static eg_get_friendliness_reply* default_instance_;
};
// -------------------------------------------------------------------

class eg_friend_point_operation_request : public ::google::protobuf::Message {
 public:
  eg_friend_point_operation_request();
  virtual ~eg_friend_point_operation_request();

  eg_friend_point_operation_request(const eg_friend_point_operation_request& from);

  inline eg_friend_point_operation_request& operator=(const eg_friend_point_operation_request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const eg_friend_point_operation_request& default_instance();

  void Swap(eg_friend_point_operation_request* other);

  // implements Message ----------------------------------------------

  eg_friend_point_operation_request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const eg_friend_point_operation_request& from);
  void MergeFrom(const eg_friend_point_operation_request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 role_id = 1;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 1;
  inline ::google::protobuf::uint64 role_id() const;
  inline void set_role_id(::google::protobuf::uint64 value);

  // optional uint64 friend_role_id = 2;
  inline bool has_friend_role_id() const;
  inline void clear_friend_role_id();
  static const int kFriendRoleIdFieldNumber = 2;
  inline ::google::protobuf::uint64 friend_role_id() const;
  inline void set_friend_role_id(::google::protobuf::uint64 value);

  // optional .proto.server.friend_point_operation operation = 3;
  inline bool has_operation() const;
  inline void clear_operation();
  static const int kOperationFieldNumber = 3;
  inline ::proto::server::friend_point_operation operation() const;
  inline void set_operation(::proto::server::friend_point_operation value);

  // optional int32 parameter1 = 4;
  inline bool has_parameter1() const;
  inline void clear_parameter1();
  static const int kParameter1FieldNumber = 4;
  inline ::google::protobuf::int32 parameter1() const;
  inline void set_parameter1(::google::protobuf::int32 value);

  // optional int32 parameter2 = 5;
  inline bool has_parameter2() const;
  inline void clear_parameter2();
  static const int kParameter2FieldNumber = 5;
  inline ::google::protobuf::int32 parameter2() const;
  inline void set_parameter2(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.server.eg_friend_point_operation_request)
 private:
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_friend_role_id();
  inline void clear_has_friend_role_id();
  inline void set_has_operation();
  inline void clear_has_operation();
  inline void set_has_parameter1();
  inline void clear_has_parameter1();
  inline void set_has_parameter2();
  inline void clear_has_parameter2();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 role_id_;
  ::google::protobuf::uint64 friend_role_id_;
  int operation_;
  ::google::protobuf::int32 parameter1_;
  ::google::protobuf::int32 parameter2_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static eg_friend_point_operation_request* default_instance_;
};
// -------------------------------------------------------------------

class ge_friend_point_operation_reply : public ::google::protobuf::Message {
 public:
  ge_friend_point_operation_reply();
  virtual ~ge_friend_point_operation_reply();

  ge_friend_point_operation_reply(const ge_friend_point_operation_reply& from);

  inline ge_friend_point_operation_reply& operator=(const ge_friend_point_operation_reply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ge_friend_point_operation_reply& default_instance();

  void Swap(ge_friend_point_operation_reply* other);

  // implements Message ----------------------------------------------

  ge_friend_point_operation_reply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ge_friend_point_operation_reply& from);
  void MergeFrom(const ge_friend_point_operation_reply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 role_id = 1;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 1;
  inline ::google::protobuf::uint64 role_id() const;
  inline void set_role_id(::google::protobuf::uint64 value);

  // optional uint64 friend_role_id = 2;
  inline bool has_friend_role_id() const;
  inline void clear_friend_role_id();
  static const int kFriendRoleIdFieldNumber = 2;
  inline ::google::protobuf::uint64 friend_role_id() const;
  inline void set_friend_role_id(::google::protobuf::uint64 value);

  // optional .proto.server.friend_point_operation operation = 3;
  inline bool has_operation() const;
  inline void clear_operation();
  static const int kOperationFieldNumber = 3;
  inline ::proto::server::friend_point_operation operation() const;
  inline void set_operation(::proto::server::friend_point_operation value);

  // optional int32 parameter1 = 4;
  inline bool has_parameter1() const;
  inline void clear_parameter1();
  static const int kParameter1FieldNumber = 4;
  inline ::google::protobuf::int32 parameter1() const;
  inline void set_parameter1(::google::protobuf::int32 value);

  // optional int32 parameter2 = 5;
  inline bool has_parameter2() const;
  inline void clear_parameter2();
  static const int kParameter2FieldNumber = 5;
  inline ::google::protobuf::int32 parameter2() const;
  inline void set_parameter2(::google::protobuf::int32 value);

  // optional int32 info1 = 6;
  inline bool has_info1() const;
  inline void clear_info1();
  static const int kInfo1FieldNumber = 6;
  inline ::google::protobuf::int32 info1() const;
  inline void set_info1(::google::protobuf::int32 value);

  // optional int32 info2 = 7;
  inline bool has_info2() const;
  inline void clear_info2();
  static const int kInfo2FieldNumber = 7;
  inline ::google::protobuf::int32 info2() const;
  inline void set_info2(::google::protobuf::int32 value);

  // optional string info3 = 10;
  inline bool has_info3() const;
  inline void clear_info3();
  static const int kInfo3FieldNumber = 10;
  inline const ::std::string& info3() const;
  inline void set_info3(const ::std::string& value);
  inline void set_info3(const char* value);
  inline void set_info3(const char* value, size_t size);
  inline ::std::string* mutable_info3();
  inline ::std::string* release_info3();
  inline void set_allocated_info3(::std::string* info3);

  // optional .proto.common.role_change_data change_data = 8;
  inline bool has_change_data() const;
  inline void clear_change_data();
  static const int kChangeDataFieldNumber = 8;
  inline const ::proto::common::role_change_data& change_data() const;
  inline ::proto::common::role_change_data* mutable_change_data();
  inline ::proto::common::role_change_data* release_change_data();
  inline void set_allocated_change_data(::proto::common::role_change_data* change_data);

  // optional int32 reply_code = 9;
  inline bool has_reply_code() const;
  inline void clear_reply_code();
  static const int kReplyCodeFieldNumber = 9;
  inline ::google::protobuf::int32 reply_code() const;
  inline void set_reply_code(::google::protobuf::int32 value);

  // optional int32 info4 = 11;
  inline bool has_info4() const;
  inline void clear_info4();
  static const int kInfo4FieldNumber = 11;
  inline ::google::protobuf::int32 info4() const;
  inline void set_info4(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.server.ge_friend_point_operation_reply)
 private:
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_friend_role_id();
  inline void clear_has_friend_role_id();
  inline void set_has_operation();
  inline void clear_has_operation();
  inline void set_has_parameter1();
  inline void clear_has_parameter1();
  inline void set_has_parameter2();
  inline void clear_has_parameter2();
  inline void set_has_info1();
  inline void clear_has_info1();
  inline void set_has_info2();
  inline void clear_has_info2();
  inline void set_has_info3();
  inline void clear_has_info3();
  inline void set_has_change_data();
  inline void clear_has_change_data();
  inline void set_has_reply_code();
  inline void clear_has_reply_code();
  inline void set_has_info4();
  inline void clear_has_info4();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 role_id_;
  ::google::protobuf::uint64 friend_role_id_;
  int operation_;
  ::google::protobuf::int32 parameter1_;
  ::google::protobuf::int32 parameter2_;
  ::google::protobuf::int32 info1_;
  ::std::string* info3_;
  ::google::protobuf::int32 info2_;
  ::google::protobuf::int32 reply_code_;
  ::proto::common::role_change_data* change_data_;
  ::google::protobuf::int32 info4_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(11 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static ge_friend_point_operation_reply* default_instance_;
};
// -------------------------------------------------------------------

class sv_cross_area_video_notify : public ::google::protobuf::Message {
 public:
  sv_cross_area_video_notify();
  virtual ~sv_cross_area_video_notify();

  sv_cross_area_video_notify(const sv_cross_area_video_notify& from);

  inline sv_cross_area_video_notify& operator=(const sv_cross_area_video_notify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const sv_cross_area_video_notify& default_instance();

  void Swap(sv_cross_area_video_notify* other);

  // implements Message ----------------------------------------------

  sv_cross_area_video_notify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const sv_cross_area_video_notify& from);
  void MergeFrom(const sv_cross_area_video_notify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .proto.common.video_single_base base = 1;
  inline bool has_base() const;
  inline void clear_base();
  static const int kBaseFieldNumber = 1;
  inline const ::proto::common::video_single_base& base() const;
  inline ::proto::common::video_single_base* mutable_base();
  inline ::proto::common::video_single_base* release_base();
  inline void set_allocated_base(::proto::common::video_single_base* base);

  // optional bytes fight_data = 2;
  inline bool has_fight_data() const;
  inline void clear_fight_data();
  static const int kFightDataFieldNumber = 2;
  inline const ::std::string& fight_data() const;
  inline void set_fight_data(const ::std::string& value);
  inline void set_fight_data(const char* value);
  inline void set_fight_data(const void* value, size_t size);
  inline ::std::string* mutable_fight_data();
  inline ::std::string* release_fight_data();
  inline void set_allocated_fight_data(::std::string* fight_data);

  // @@protoc_insertion_point(class_scope:proto.server.sv_cross_area_video_notify)
 private:
  inline void set_has_base();
  inline void clear_has_base();
  inline void set_has_fight_data();
  inline void clear_has_fight_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::proto::common::video_single_base* base_;
  ::std::string* fight_data_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static sv_cross_area_video_notify* default_instance_;
};
// -------------------------------------------------------------------

class gv_tower_video_notify : public ::google::protobuf::Message {
 public:
  gv_tower_video_notify();
  virtual ~gv_tower_video_notify();

  gv_tower_video_notify(const gv_tower_video_notify& from);

  inline gv_tower_video_notify& operator=(const gv_tower_video_notify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gv_tower_video_notify& default_instance();

  void Swap(gv_tower_video_notify* other);

  // implements Message ----------------------------------------------

  gv_tower_video_notify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gv_tower_video_notify& from);
  void MergeFrom(const gv_tower_video_notify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .proto.common.video_single_base base = 1;
  inline bool has_base() const;
  inline void clear_base();
  static const int kBaseFieldNumber = 1;
  inline const ::proto::common::video_single_base& base() const;
  inline ::proto::common::video_single_base* mutable_base();
  inline ::proto::common::video_single_base* release_base();
  inline void set_allocated_base(::proto::common::video_single_base* base);

  // optional bytes fight_data = 2;
  inline bool has_fight_data() const;
  inline void clear_fight_data();
  static const int kFightDataFieldNumber = 2;
  inline const ::std::string& fight_data() const;
  inline void set_fight_data(const ::std::string& value);
  inline void set_fight_data(const char* value);
  inline void set_fight_data(const void* value, size_t size);
  inline ::std::string* mutable_fight_data();
  inline ::std::string* release_fight_data();
  inline void set_allocated_fight_data(::std::string* fight_data);

  // @@protoc_insertion_point(class_scope:proto.server.gv_tower_video_notify)
 private:
  inline void set_has_base();
  inline void clear_has_base();
  inline void set_has_fight_data();
  inline void clear_has_fight_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::proto::common::video_single_base* base_;
  ::std::string* fight_data_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static gv_tower_video_notify* default_instance_;
};
// ===================================================================


// ===================================================================

// data_sync_item

// optional .proto.server.data_sync_type type = 1 [default = data_sync_type_begin];
inline bool data_sync_item::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void data_sync_item::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void data_sync_item::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void data_sync_item::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::proto::server::data_sync_type data_sync_item::type() const {
  return static_cast< ::proto::server::data_sync_type >(type_);
}
inline void data_sync_item::set_type(::proto::server::data_sync_type value) {
  assert(::proto::server::data_sync_type_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional string value = 2;
inline bool data_sync_item::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void data_sync_item::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void data_sync_item::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void data_sync_item::clear_value() {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    value_->clear();
  }
  clear_has_value();
}
inline const ::std::string& data_sync_item::value() const {
  return *value_;
}
inline void data_sync_item::set_value(const ::std::string& value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void data_sync_item::set_value(const char* value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void data_sync_item::set_value(const char* value, size_t size) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* data_sync_item::mutable_value() {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  return value_;
}
inline ::std::string* data_sync_item::release_value() {
  clear_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = value_;
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void data_sync_item::set_allocated_value(::std::string* value) {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (value) {
    set_has_value();
    value_ = value;
  } else {
    clear_has_value();
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// server_pingpong_request

// -------------------------------------------------------------------

// la_login_request

// required string guid = 1;
inline bool la_login_request::has_guid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void la_login_request::set_has_guid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void la_login_request::clear_has_guid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void la_login_request::clear_guid() {
  if (guid_ != &::google::protobuf::internal::kEmptyString) {
    guid_->clear();
  }
  clear_has_guid();
}
inline const ::std::string& la_login_request::guid() const {
  return *guid_;
}
inline void la_login_request::set_guid(const ::std::string& value) {
  set_has_guid();
  if (guid_ == &::google::protobuf::internal::kEmptyString) {
    guid_ = new ::std::string;
  }
  guid_->assign(value);
}
inline void la_login_request::set_guid(const char* value) {
  set_has_guid();
  if (guid_ == &::google::protobuf::internal::kEmptyString) {
    guid_ = new ::std::string;
  }
  guid_->assign(value);
}
inline void la_login_request::set_guid(const char* value, size_t size) {
  set_has_guid();
  if (guid_ == &::google::protobuf::internal::kEmptyString) {
    guid_ = new ::std::string;
  }
  guid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* la_login_request::mutable_guid() {
  set_has_guid();
  if (guid_ == &::google::protobuf::internal::kEmptyString) {
    guid_ = new ::std::string;
  }
  return guid_;
}
inline ::std::string* la_login_request::release_guid() {
  clear_has_guid();
  if (guid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = guid_;
    guid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void la_login_request::set_allocated_guid(::std::string* guid) {
  if (guid_ != &::google::protobuf::internal::kEmptyString) {
    delete guid_;
  }
  if (guid) {
    set_has_guid();
    guid_ = guid;
  } else {
    clear_has_guid();
    guid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// al_login_reply

// required uint32 reply_code = 1;
inline bool al_login_reply::has_reply_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void al_login_reply::set_has_reply_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void al_login_reply::clear_has_reply_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void al_login_reply::clear_reply_code() {
  reply_code_ = 0u;
  clear_has_reply_code();
}
inline ::google::protobuf::uint32 al_login_reply::reply_code() const {
  return reply_code_;
}
inline void al_login_reply::set_reply_code(::google::protobuf::uint32 value) {
  set_has_reply_code();
  reply_code_ = value;
}

// optional string guid = 2;
inline bool al_login_reply::has_guid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void al_login_reply::set_has_guid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void al_login_reply::clear_has_guid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void al_login_reply::clear_guid() {
  if (guid_ != &::google::protobuf::internal::kEmptyString) {
    guid_->clear();
  }
  clear_has_guid();
}
inline const ::std::string& al_login_reply::guid() const {
  return *guid_;
}
inline void al_login_reply::set_guid(const ::std::string& value) {
  set_has_guid();
  if (guid_ == &::google::protobuf::internal::kEmptyString) {
    guid_ = new ::std::string;
  }
  guid_->assign(value);
}
inline void al_login_reply::set_guid(const char* value) {
  set_has_guid();
  if (guid_ == &::google::protobuf::internal::kEmptyString) {
    guid_ = new ::std::string;
  }
  guid_->assign(value);
}
inline void al_login_reply::set_guid(const char* value, size_t size) {
  set_has_guid();
  if (guid_ == &::google::protobuf::internal::kEmptyString) {
    guid_ = new ::std::string;
  }
  guid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* al_login_reply::mutable_guid() {
  set_has_guid();
  if (guid_ == &::google::protobuf::internal::kEmptyString) {
    guid_ = new ::std::string;
  }
  return guid_;
}
inline ::std::string* al_login_reply::release_guid() {
  clear_has_guid();
  if (guid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = guid_;
    guid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void al_login_reply::set_allocated_guid(::std::string* guid) {
  if (guid_ != &::google::protobuf::internal::kEmptyString) {
    delete guid_;
  }
  if (guid) {
    set_has_guid();
    guid_ = guid;
  } else {
    clear_has_guid();
    guid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string gate_ip = 3;
inline bool al_login_reply::has_gate_ip() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void al_login_reply::set_has_gate_ip() {
  _has_bits_[0] |= 0x00000004u;
}
inline void al_login_reply::clear_has_gate_ip() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void al_login_reply::clear_gate_ip() {
  if (gate_ip_ != &::google::protobuf::internal::kEmptyString) {
    gate_ip_->clear();
  }
  clear_has_gate_ip();
}
inline const ::std::string& al_login_reply::gate_ip() const {
  return *gate_ip_;
}
inline void al_login_reply::set_gate_ip(const ::std::string& value) {
  set_has_gate_ip();
  if (gate_ip_ == &::google::protobuf::internal::kEmptyString) {
    gate_ip_ = new ::std::string;
  }
  gate_ip_->assign(value);
}
inline void al_login_reply::set_gate_ip(const char* value) {
  set_has_gate_ip();
  if (gate_ip_ == &::google::protobuf::internal::kEmptyString) {
    gate_ip_ = new ::std::string;
  }
  gate_ip_->assign(value);
}
inline void al_login_reply::set_gate_ip(const char* value, size_t size) {
  set_has_gate_ip();
  if (gate_ip_ == &::google::protobuf::internal::kEmptyString) {
    gate_ip_ = new ::std::string;
  }
  gate_ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* al_login_reply::mutable_gate_ip() {
  set_has_gate_ip();
  if (gate_ip_ == &::google::protobuf::internal::kEmptyString) {
    gate_ip_ = new ::std::string;
  }
  return gate_ip_;
}
inline ::std::string* al_login_reply::release_gate_ip() {
  clear_has_gate_ip();
  if (gate_ip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = gate_ip_;
    gate_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void al_login_reply::set_allocated_gate_ip(::std::string* gate_ip) {
  if (gate_ip_ != &::google::protobuf::internal::kEmptyString) {
    delete gate_ip_;
  }
  if (gate_ip) {
    set_has_gate_ip();
    gate_ip_ = gate_ip;
  } else {
    clear_has_gate_ip();
    gate_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 gate_port = 4;
inline bool al_login_reply::has_gate_port() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void al_login_reply::set_has_gate_port() {
  _has_bits_[0] |= 0x00000008u;
}
inline void al_login_reply::clear_has_gate_port() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void al_login_reply::clear_gate_port() {
  gate_port_ = 0u;
  clear_has_gate_port();
}
inline ::google::protobuf::uint32 al_login_reply::gate_port() const {
  return gate_port_;
}
inline void al_login_reply::set_gate_port(::google::protobuf::uint32 value) {
  set_has_gate_port();
  gate_port_ = value;
}

// optional string session_id = 5;
inline bool al_login_reply::has_session_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void al_login_reply::set_has_session_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void al_login_reply::clear_has_session_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void al_login_reply::clear_session_id() {
  if (session_id_ != &::google::protobuf::internal::kEmptyString) {
    session_id_->clear();
  }
  clear_has_session_id();
}
inline const ::std::string& al_login_reply::session_id() const {
  return *session_id_;
}
inline void al_login_reply::set_session_id(const ::std::string& value) {
  set_has_session_id();
  if (session_id_ == &::google::protobuf::internal::kEmptyString) {
    session_id_ = new ::std::string;
  }
  session_id_->assign(value);
}
inline void al_login_reply::set_session_id(const char* value) {
  set_has_session_id();
  if (session_id_ == &::google::protobuf::internal::kEmptyString) {
    session_id_ = new ::std::string;
  }
  session_id_->assign(value);
}
inline void al_login_reply::set_session_id(const char* value, size_t size) {
  set_has_session_id();
  if (session_id_ == &::google::protobuf::internal::kEmptyString) {
    session_id_ = new ::std::string;
  }
  session_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* al_login_reply::mutable_session_id() {
  set_has_session_id();
  if (session_id_ == &::google::protobuf::internal::kEmptyString) {
    session_id_ = new ::std::string;
  }
  return session_id_;
}
inline ::std::string* al_login_reply::release_session_id() {
  clear_has_session_id();
  if (session_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = session_id_;
    session_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void al_login_reply::set_allocated_session_id(::std::string* session_id) {
  if (session_id_ != &::google::protobuf::internal::kEmptyString) {
    delete session_id_;
  }
  if (session_id) {
    set_has_session_id();
    session_id_ = session_id;
  } else {
    clear_has_session_id();
    session_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// gr_role_leave_game_notify

// -------------------------------------------------------------------

// ag_role_enter_game_notify

// -------------------------------------------------------------------

// ga_role_move_notify

// repeated uint64 role_list = 1;
inline int ga_role_move_notify::role_list_size() const {
  return role_list_.size();
}
inline void ga_role_move_notify::clear_role_list() {
  role_list_.Clear();
}
inline ::google::protobuf::uint64 ga_role_move_notify::role_list(int index) const {
  return role_list_.Get(index);
}
inline void ga_role_move_notify::set_role_list(int index, ::google::protobuf::uint64 value) {
  role_list_.Set(index, value);
}
inline void ga_role_move_notify::add_role_list(::google::protobuf::uint64 value) {
  role_list_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
ga_role_move_notify::role_list() const {
  return role_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
ga_role_move_notify::mutable_role_list() {
  return &role_list_;
}

// required .proto.client.gc_move_notify msg = 2;
inline bool ga_role_move_notify::has_msg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ga_role_move_notify::set_has_msg() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ga_role_move_notify::clear_has_msg() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ga_role_move_notify::clear_msg() {
  if (msg_ != NULL) msg_->::proto::client::gc_move_notify::Clear();
  clear_has_msg();
}
inline const ::proto::client::gc_move_notify& ga_role_move_notify::msg() const {
  return msg_ != NULL ? *msg_ : *default_instance_->msg_;
}
inline ::proto::client::gc_move_notify* ga_role_move_notify::mutable_msg() {
  set_has_msg();
  if (msg_ == NULL) msg_ = new ::proto::client::gc_move_notify;
  return msg_;
}
inline ::proto::client::gc_move_notify* ga_role_move_notify::release_msg() {
  clear_has_msg();
  ::proto::client::gc_move_notify* temp = msg_;
  msg_ = NULL;
  return temp;
}
inline void ga_role_move_notify::set_allocated_msg(::proto::client::gc_move_notify* msg) {
  delete msg_;
  msg_ = msg;
  if (msg) {
    set_has_msg();
  } else {
    clear_has_msg();
  }
}

// -------------------------------------------------------------------

// ga_role_into_vision_notify

// repeated uint64 role_list = 1;
inline int ga_role_into_vision_notify::role_list_size() const {
  return role_list_.size();
}
inline void ga_role_into_vision_notify::clear_role_list() {
  role_list_.Clear();
}
inline ::google::protobuf::uint64 ga_role_into_vision_notify::role_list(int index) const {
  return role_list_.Get(index);
}
inline void ga_role_into_vision_notify::set_role_list(int index, ::google::protobuf::uint64 value) {
  role_list_.Set(index, value);
}
inline void ga_role_into_vision_notify::add_role_list(::google::protobuf::uint64 value) {
  role_list_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
ga_role_into_vision_notify::role_list() const {
  return role_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
ga_role_into_vision_notify::mutable_role_list() {
  return &role_list_;
}

// required .proto.client.gc_role_into_vision_notify msg = 2;
inline bool ga_role_into_vision_notify::has_msg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ga_role_into_vision_notify::set_has_msg() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ga_role_into_vision_notify::clear_has_msg() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ga_role_into_vision_notify::clear_msg() {
  if (msg_ != NULL) msg_->::proto::client::gc_role_into_vision_notify::Clear();
  clear_has_msg();
}
inline const ::proto::client::gc_role_into_vision_notify& ga_role_into_vision_notify::msg() const {
  return msg_ != NULL ? *msg_ : *default_instance_->msg_;
}
inline ::proto::client::gc_role_into_vision_notify* ga_role_into_vision_notify::mutable_msg() {
  set_has_msg();
  if (msg_ == NULL) msg_ = new ::proto::client::gc_role_into_vision_notify;
  return msg_;
}
inline ::proto::client::gc_role_into_vision_notify* ga_role_into_vision_notify::release_msg() {
  clear_has_msg();
  ::proto::client::gc_role_into_vision_notify* temp = msg_;
  msg_ = NULL;
  return temp;
}
inline void ga_role_into_vision_notify::set_allocated_msg(::proto::client::gc_role_into_vision_notify* msg) {
  delete msg_;
  msg_ = msg;
  if (msg) {
    set_has_msg();
  } else {
    clear_has_msg();
  }
}

// -------------------------------------------------------------------

// ga_role_out_vision_notify

// repeated uint64 role_list = 1;
inline int ga_role_out_vision_notify::role_list_size() const {
  return role_list_.size();
}
inline void ga_role_out_vision_notify::clear_role_list() {
  role_list_.Clear();
}
inline ::google::protobuf::uint64 ga_role_out_vision_notify::role_list(int index) const {
  return role_list_.Get(index);
}
inline void ga_role_out_vision_notify::set_role_list(int index, ::google::protobuf::uint64 value) {
  role_list_.Set(index, value);
}
inline void ga_role_out_vision_notify::add_role_list(::google::protobuf::uint64 value) {
  role_list_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
ga_role_out_vision_notify::role_list() const {
  return role_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
ga_role_out_vision_notify::mutable_role_list() {
  return &role_list_;
}

// required .proto.client.gc_role_outo_vision_notify msg = 2;
inline bool ga_role_out_vision_notify::has_msg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ga_role_out_vision_notify::set_has_msg() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ga_role_out_vision_notify::clear_has_msg() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ga_role_out_vision_notify::clear_msg() {
  if (msg_ != NULL) msg_->::proto::client::gc_role_outo_vision_notify::Clear();
  clear_has_msg();
}
inline const ::proto::client::gc_role_outo_vision_notify& ga_role_out_vision_notify::msg() const {
  return msg_ != NULL ? *msg_ : *default_instance_->msg_;
}
inline ::proto::client::gc_role_outo_vision_notify* ga_role_out_vision_notify::mutable_msg() {
  set_has_msg();
  if (msg_ == NULL) msg_ = new ::proto::client::gc_role_outo_vision_notify;
  return msg_;
}
inline ::proto::client::gc_role_outo_vision_notify* ga_role_out_vision_notify::release_msg() {
  clear_has_msg();
  ::proto::client::gc_role_outo_vision_notify* temp = msg_;
  msg_ = NULL;
  return temp;
}
inline void ga_role_out_vision_notify::set_allocated_msg(::proto::client::gc_role_outo_vision_notify* msg) {
  delete msg_;
  msg_ = msg;
  if (msg) {
    set_has_msg();
  } else {
    clear_has_msg();
  }
}

// -------------------------------------------------------------------

// ga_broadcast_notify

// repeated uint64 role_list = 1;
inline int ga_broadcast_notify::role_list_size() const {
  return role_list_.size();
}
inline void ga_broadcast_notify::clear_role_list() {
  role_list_.Clear();
}
inline ::google::protobuf::uint64 ga_broadcast_notify::role_list(int index) const {
  return role_list_.Get(index);
}
inline void ga_broadcast_notify::set_role_list(int index, ::google::protobuf::uint64 value) {
  role_list_.Set(index, value);
}
inline void ga_broadcast_notify::add_role_list(::google::protobuf::uint64 value) {
  role_list_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
ga_broadcast_notify::role_list() const {
  return role_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
ga_broadcast_notify::mutable_role_list() {
  return &role_list_;
}

// optional uint32 cmd = 2;
inline bool ga_broadcast_notify::has_cmd() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ga_broadcast_notify::set_has_cmd() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ga_broadcast_notify::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ga_broadcast_notify::clear_cmd() {
  cmd_ = 0u;
  clear_has_cmd();
}
inline ::google::protobuf::uint32 ga_broadcast_notify::cmd() const {
  return cmd_;
}
inline void ga_broadcast_notify::set_cmd(::google::protobuf::uint32 value) {
  set_has_cmd();
  cmd_ = value;
}

// optional bytes data = 3;
inline bool ga_broadcast_notify::has_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ga_broadcast_notify::set_has_data() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ga_broadcast_notify::clear_has_data() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ga_broadcast_notify::clear_data() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    data_->clear();
  }
  clear_has_data();
}
inline const ::std::string& ga_broadcast_notify::data() const {
  return *data_;
}
inline void ga_broadcast_notify::set_data(const ::std::string& value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void ga_broadcast_notify::set_data(const char* value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void ga_broadcast_notify::set_data(const void* value, size_t size) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ga_broadcast_notify::mutable_data() {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  return data_;
}
inline ::std::string* ga_broadcast_notify::release_data() {
  clear_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = data_;
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ga_broadcast_notify::set_allocated_data(::std::string* data) {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (data) {
    set_has_data();
    data_ = data;
  } else {
    clear_has_data();
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// ea_broadcast_notify

// repeated uint64 role_list = 1;
inline int ea_broadcast_notify::role_list_size() const {
  return role_list_.size();
}
inline void ea_broadcast_notify::clear_role_list() {
  role_list_.Clear();
}
inline ::google::protobuf::uint64 ea_broadcast_notify::role_list(int index) const {
  return role_list_.Get(index);
}
inline void ea_broadcast_notify::set_role_list(int index, ::google::protobuf::uint64 value) {
  role_list_.Set(index, value);
}
inline void ea_broadcast_notify::add_role_list(::google::protobuf::uint64 value) {
  role_list_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
ea_broadcast_notify::role_list() const {
  return role_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
ea_broadcast_notify::mutable_role_list() {
  return &role_list_;
}

// optional uint32 cmd = 2;
inline bool ea_broadcast_notify::has_cmd() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ea_broadcast_notify::set_has_cmd() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ea_broadcast_notify::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ea_broadcast_notify::clear_cmd() {
  cmd_ = 0u;
  clear_has_cmd();
}
inline ::google::protobuf::uint32 ea_broadcast_notify::cmd() const {
  return cmd_;
}
inline void ea_broadcast_notify::set_cmd(::google::protobuf::uint32 value) {
  set_has_cmd();
  cmd_ = value;
}

// optional bytes data = 3;
inline bool ea_broadcast_notify::has_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ea_broadcast_notify::set_has_data() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ea_broadcast_notify::clear_has_data() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ea_broadcast_notify::clear_data() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    data_->clear();
  }
  clear_has_data();
}
inline const ::std::string& ea_broadcast_notify::data() const {
  return *data_;
}
inline void ea_broadcast_notify::set_data(const ::std::string& value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void ea_broadcast_notify::set_data(const char* value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void ea_broadcast_notify::set_data(const void* value, size_t size) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ea_broadcast_notify::mutable_data() {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  return data_;
}
inline ::std::string* ea_broadcast_notify::release_data() {
  clear_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = data_;
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ea_broadcast_notify::set_allocated_data(::std::string* data) {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (data) {
    set_has_data();
    data_ = data;
  } else {
    clear_has_data();
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// al_kick_role_notify

// -------------------------------------------------------------------

// al_kick_gate_all_user_notify

// optional uint32 gate_id = 1;
inline bool al_kick_gate_all_user_notify::has_gate_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void al_kick_gate_all_user_notify::set_has_gate_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void al_kick_gate_all_user_notify::clear_has_gate_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void al_kick_gate_all_user_notify::clear_gate_id() {
  gate_id_ = 0u;
  clear_has_gate_id();
}
inline ::google::protobuf::uint32 al_kick_gate_all_user_notify::gate_id() const {
  return gate_id_;
}
inline void al_kick_gate_all_user_notify::set_gate_id(::google::protobuf::uint32 value) {
  set_has_gate_id();
  gate_id_ = value;
}

// -------------------------------------------------------------------

// gh_kick_role_notify

// -------------------------------------------------------------------

// gd_batch_save_to_db_notify

// repeated .proto.server.save_to_db datas = 1;
inline int gd_batch_save_to_db_notify::datas_size() const {
  return datas_.size();
}
inline void gd_batch_save_to_db_notify::clear_datas() {
  datas_.Clear();
}
inline const ::proto::server::save_to_db& gd_batch_save_to_db_notify::datas(int index) const {
  return datas_.Get(index);
}
inline ::proto::server::save_to_db* gd_batch_save_to_db_notify::mutable_datas(int index) {
  return datas_.Mutable(index);
}
inline ::proto::server::save_to_db* gd_batch_save_to_db_notify::add_datas() {
  return datas_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::server::save_to_db >&
gd_batch_save_to_db_notify::datas() const {
  return datas_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto::server::save_to_db >*
gd_batch_save_to_db_notify::mutable_datas() {
  return &datas_;
}

// optional uint32 type = 2;
inline bool gd_batch_save_to_db_notify::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gd_batch_save_to_db_notify::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gd_batch_save_to_db_notify::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gd_batch_save_to_db_notify::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 gd_batch_save_to_db_notify::type() const {
  return type_;
}
inline void gd_batch_save_to_db_notify::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
}

// -------------------------------------------------------------------

// save_to_db

// required string key = 1;
inline bool save_to_db::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void save_to_db::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void save_to_db::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void save_to_db::clear_key() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    key_->clear();
  }
  clear_has_key();
}
inline const ::std::string& save_to_db::key() const {
  return *key_;
}
inline void save_to_db::set_key(const ::std::string& value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void save_to_db::set_key(const char* value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void save_to_db::set_key(const char* value, size_t size) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* save_to_db::mutable_key() {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  return key_;
}
inline ::std::string* save_to_db::release_key() {
  clear_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = key_;
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void save_to_db::set_allocated_key(::std::string* key) {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (key) {
    set_has_key();
    key_ = key;
  } else {
    clear_has_key();
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required bytes data = 2;
inline bool save_to_db::has_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void save_to_db::set_has_data() {
  _has_bits_[0] |= 0x00000002u;
}
inline void save_to_db::clear_has_data() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void save_to_db::clear_data() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    data_->clear();
  }
  clear_has_data();
}
inline const ::std::string& save_to_db::data() const {
  return *data_;
}
inline void save_to_db::set_data(const ::std::string& value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void save_to_db::set_data(const char* value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void save_to_db::set_data(const void* value, size_t size) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* save_to_db::mutable_data() {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  return data_;
}
inline ::std::string* save_to_db::release_data() {
  clear_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = data_;
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void save_to_db::set_allocated_data(::std::string* data) {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (data) {
    set_has_data();
    data_ = data;
  } else {
    clear_has_data();
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bool new_flag = 3;
inline bool save_to_db::has_new_flag() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void save_to_db::set_has_new_flag() {
  _has_bits_[0] |= 0x00000004u;
}
inline void save_to_db::clear_has_new_flag() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void save_to_db::clear_new_flag() {
  new_flag_ = false;
  clear_has_new_flag();
}
inline bool save_to_db::new_flag() const {
  return new_flag_;
}
inline void save_to_db::set_new_flag(bool value) {
  set_has_new_flag();
  new_flag_ = value;
}

// optional uint64 uid = 4;
inline bool save_to_db::has_uid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void save_to_db::set_has_uid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void save_to_db::clear_has_uid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void save_to_db::clear_uid() {
  uid_ = GOOGLE_ULONGLONG(0);
  clear_has_uid();
}
inline ::google::protobuf::uint64 save_to_db::uid() const {
  return uid_;
}
inline void save_to_db::set_uid(::google::protobuf::uint64 value) {
  set_has_uid();
  uid_ = value;
}

// -------------------------------------------------------------------

// gd_role_data_request

// optional uint64 time = 1;
inline bool gd_role_data_request::has_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gd_role_data_request::set_has_time() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gd_role_data_request::clear_has_time() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gd_role_data_request::clear_time() {
  time_ = GOOGLE_ULONGLONG(0);
  clear_has_time();
}
inline ::google::protobuf::uint64 gd_role_data_request::time() const {
  return time_;
}
inline void gd_role_data_request::set_time(::google::protobuf::uint64 value) {
  set_has_time();
  time_ = value;
}

// -------------------------------------------------------------------

// dg_role_data_reply

// required uint32 reply_code = 1;
inline bool dg_role_data_reply::has_reply_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void dg_role_data_reply::set_has_reply_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void dg_role_data_reply::clear_has_reply_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void dg_role_data_reply::clear_reply_code() {
  reply_code_ = 0u;
  clear_has_reply_code();
}
inline ::google::protobuf::uint32 dg_role_data_reply::reply_code() const {
  return reply_code_;
}
inline void dg_role_data_reply::set_reply_code(::google::protobuf::uint32 value) {
  set_has_reply_code();
  reply_code_ = value;
}

// optional .proto.common.role_data role = 2;
inline bool dg_role_data_reply::has_role() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void dg_role_data_reply::set_has_role() {
  _has_bits_[0] |= 0x00000002u;
}
inline void dg_role_data_reply::clear_has_role() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void dg_role_data_reply::clear_role() {
  if (role_ != NULL) role_->::proto::common::role_data::Clear();
  clear_has_role();
}
inline const ::proto::common::role_data& dg_role_data_reply::role() const {
  return role_ != NULL ? *role_ : *default_instance_->role_;
}
inline ::proto::common::role_data* dg_role_data_reply::mutable_role() {
  set_has_role();
  if (role_ == NULL) role_ = new ::proto::common::role_data;
  return role_;
}
inline ::proto::common::role_data* dg_role_data_reply::release_role() {
  clear_has_role();
  ::proto::common::role_data* temp = role_;
  role_ = NULL;
  return temp;
}
inline void dg_role_data_reply::set_allocated_role(::proto::common::role_data* role) {
  delete role_;
  role_ = role;
  if (role) {
    set_has_role();
  } else {
    clear_has_role();
  }
}

// optional .proto.common.item_data item = 3;
inline bool dg_role_data_reply::has_item() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void dg_role_data_reply::set_has_item() {
  _has_bits_[0] |= 0x00000004u;
}
inline void dg_role_data_reply::clear_has_item() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void dg_role_data_reply::clear_item() {
  if (item_ != NULL) item_->::proto::common::item_data::Clear();
  clear_has_item();
}
inline const ::proto::common::item_data& dg_role_data_reply::item() const {
  return item_ != NULL ? *item_ : *default_instance_->item_;
}
inline ::proto::common::item_data* dg_role_data_reply::mutable_item() {
  set_has_item();
  if (item_ == NULL) item_ = new ::proto::common::item_data;
  return item_;
}
inline ::proto::common::item_data* dg_role_data_reply::release_item() {
  clear_has_item();
  ::proto::common::item_data* temp = item_;
  item_ = NULL;
  return temp;
}
inline void dg_role_data_reply::set_allocated_item(::proto::common::item_data* item) {
  delete item_;
  item_ = item;
  if (item) {
    set_has_item();
  } else {
    clear_has_item();
  }
}

// optional .proto.common.hero_data hero = 4;
inline bool dg_role_data_reply::has_hero() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void dg_role_data_reply::set_has_hero() {
  _has_bits_[0] |= 0x00000008u;
}
inline void dg_role_data_reply::clear_has_hero() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void dg_role_data_reply::clear_hero() {
  if (hero_ != NULL) hero_->::proto::common::hero_data::Clear();
  clear_has_hero();
}
inline const ::proto::common::hero_data& dg_role_data_reply::hero() const {
  return hero_ != NULL ? *hero_ : *default_instance_->hero_;
}
inline ::proto::common::hero_data* dg_role_data_reply::mutable_hero() {
  set_has_hero();
  if (hero_ == NULL) hero_ = new ::proto::common::hero_data;
  return hero_;
}
inline ::proto::common::hero_data* dg_role_data_reply::release_hero() {
  clear_has_hero();
  ::proto::common::hero_data* temp = hero_;
  hero_ = NULL;
  return temp;
}
inline void dg_role_data_reply::set_allocated_hero(::proto::common::hero_data* hero) {
  delete hero_;
  hero_ = hero;
  if (hero) {
    set_has_hero();
  } else {
    clear_has_hero();
  }
}

// optional .proto.common.formation_data formation = 5;
inline bool dg_role_data_reply::has_formation() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void dg_role_data_reply::set_has_formation() {
  _has_bits_[0] |= 0x00000010u;
}
inline void dg_role_data_reply::clear_has_formation() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void dg_role_data_reply::clear_formation() {
  if (formation_ != NULL) formation_->::proto::common::formation_data::Clear();
  clear_has_formation();
}
inline const ::proto::common::formation_data& dg_role_data_reply::formation() const {
  return formation_ != NULL ? *formation_ : *default_instance_->formation_;
}
inline ::proto::common::formation_data* dg_role_data_reply::mutable_formation() {
  set_has_formation();
  if (formation_ == NULL) formation_ = new ::proto::common::formation_data;
  return formation_;
}
inline ::proto::common::formation_data* dg_role_data_reply::release_formation() {
  clear_has_formation();
  ::proto::common::formation_data* temp = formation_;
  formation_ = NULL;
  return temp;
}
inline void dg_role_data_reply::set_allocated_formation(::proto::common::formation_data* formation) {
  delete formation_;
  formation_ = formation;
  if (formation) {
    set_has_formation();
  } else {
    clear_has_formation();
  }
}

// optional .proto.common.task_data task = 7;
inline bool dg_role_data_reply::has_task() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void dg_role_data_reply::set_has_task() {
  _has_bits_[0] |= 0x00000020u;
}
inline void dg_role_data_reply::clear_has_task() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void dg_role_data_reply::clear_task() {
  if (task_ != NULL) task_->::proto::common::task_data::Clear();
  clear_has_task();
}
inline const ::proto::common::task_data& dg_role_data_reply::task() const {
  return task_ != NULL ? *task_ : *default_instance_->task_;
}
inline ::proto::common::task_data* dg_role_data_reply::mutable_task() {
  set_has_task();
  if (task_ == NULL) task_ = new ::proto::common::task_data;
  return task_;
}
inline ::proto::common::task_data* dg_role_data_reply::release_task() {
  clear_has_task();
  ::proto::common::task_data* temp = task_;
  task_ = NULL;
  return temp;
}
inline void dg_role_data_reply::set_allocated_task(::proto::common::task_data* task) {
  delete task_;
  task_ = task;
  if (task) {
    set_has_task();
  } else {
    clear_has_task();
  }
}

// optional .proto.common.role_trade_item trade_item = 8;
inline bool dg_role_data_reply::has_trade_item() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void dg_role_data_reply::set_has_trade_item() {
  _has_bits_[0] |= 0x00000040u;
}
inline void dg_role_data_reply::clear_has_trade_item() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void dg_role_data_reply::clear_trade_item() {
  if (trade_item_ != NULL) trade_item_->::proto::common::role_trade_item::Clear();
  clear_has_trade_item();
}
inline const ::proto::common::role_trade_item& dg_role_data_reply::trade_item() const {
  return trade_item_ != NULL ? *trade_item_ : *default_instance_->trade_item_;
}
inline ::proto::common::role_trade_item* dg_role_data_reply::mutable_trade_item() {
  set_has_trade_item();
  if (trade_item_ == NULL) trade_item_ = new ::proto::common::role_trade_item;
  return trade_item_;
}
inline ::proto::common::role_trade_item* dg_role_data_reply::release_trade_item() {
  clear_has_trade_item();
  ::proto::common::role_trade_item* temp = trade_item_;
  trade_item_ = NULL;
  return temp;
}
inline void dg_role_data_reply::set_allocated_trade_item(::proto::common::role_trade_item* trade_item) {
  delete trade_item_;
  trade_item_ = trade_item;
  if (trade_item) {
    set_has_trade_item();
  } else {
    clear_has_trade_item();
  }
}

// optional .proto.common.mount_data mount_data = 9;
inline bool dg_role_data_reply::has_mount_data() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void dg_role_data_reply::set_has_mount_data() {
  _has_bits_[0] |= 0x00000080u;
}
inline void dg_role_data_reply::clear_has_mount_data() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void dg_role_data_reply::clear_mount_data() {
  if (mount_data_ != NULL) mount_data_->::proto::common::mount_data::Clear();
  clear_has_mount_data();
}
inline const ::proto::common::mount_data& dg_role_data_reply::mount_data() const {
  return mount_data_ != NULL ? *mount_data_ : *default_instance_->mount_data_;
}
inline ::proto::common::mount_data* dg_role_data_reply::mutable_mount_data() {
  set_has_mount_data();
  if (mount_data_ == NULL) mount_data_ = new ::proto::common::mount_data;
  return mount_data_;
}
inline ::proto::common::mount_data* dg_role_data_reply::release_mount_data() {
  clear_has_mount_data();
  ::proto::common::mount_data* temp = mount_data_;
  mount_data_ = NULL;
  return temp;
}
inline void dg_role_data_reply::set_allocated_mount_data(::proto::common::mount_data* mount_data) {
  delete mount_data_;
  mount_data_ = mount_data;
  if (mount_data) {
    set_has_mount_data();
  } else {
    clear_has_mount_data();
  }
}

// optional .proto.common.country_bounty_data country_bounty = 10;
inline bool dg_role_data_reply::has_country_bounty() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void dg_role_data_reply::set_has_country_bounty() {
  _has_bits_[0] |= 0x00000100u;
}
inline void dg_role_data_reply::clear_has_country_bounty() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void dg_role_data_reply::clear_country_bounty() {
  if (country_bounty_ != NULL) country_bounty_->::proto::common::country_bounty_data::Clear();
  clear_has_country_bounty();
}
inline const ::proto::common::country_bounty_data& dg_role_data_reply::country_bounty() const {
  return country_bounty_ != NULL ? *country_bounty_ : *default_instance_->country_bounty_;
}
inline ::proto::common::country_bounty_data* dg_role_data_reply::mutable_country_bounty() {
  set_has_country_bounty();
  if (country_bounty_ == NULL) country_bounty_ = new ::proto::common::country_bounty_data;
  return country_bounty_;
}
inline ::proto::common::country_bounty_data* dg_role_data_reply::release_country_bounty() {
  clear_has_country_bounty();
  ::proto::common::country_bounty_data* temp = country_bounty_;
  country_bounty_ = NULL;
  return temp;
}
inline void dg_role_data_reply::set_allocated_country_bounty(::proto::common::country_bounty_data* country_bounty) {
  delete country_bounty_;
  country_bounty_ = country_bounty;
  if (country_bounty) {
    set_has_country_bounty();
  } else {
    clear_has_country_bounty();
  }
}

// optional .proto.common.activities_data activities_data = 11;
inline bool dg_role_data_reply::has_activities_data() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void dg_role_data_reply::set_has_activities_data() {
  _has_bits_[0] |= 0x00000200u;
}
inline void dg_role_data_reply::clear_has_activities_data() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void dg_role_data_reply::clear_activities_data() {
  if (activities_data_ != NULL) activities_data_->::proto::common::activities_data::Clear();
  clear_has_activities_data();
}
inline const ::proto::common::activities_data& dg_role_data_reply::activities_data() const {
  return activities_data_ != NULL ? *activities_data_ : *default_instance_->activities_data_;
}
inline ::proto::common::activities_data* dg_role_data_reply::mutable_activities_data() {
  set_has_activities_data();
  if (activities_data_ == NULL) activities_data_ = new ::proto::common::activities_data;
  return activities_data_;
}
inline ::proto::common::activities_data* dg_role_data_reply::release_activities_data() {
  clear_has_activities_data();
  ::proto::common::activities_data* temp = activities_data_;
  activities_data_ = NULL;
  return temp;
}
inline void dg_role_data_reply::set_allocated_activities_data(::proto::common::activities_data* activities_data) {
  delete activities_data_;
  activities_data_ = activities_data;
  if (activities_data) {
    set_has_activities_data();
  } else {
    clear_has_activities_data();
  }
}

// optional .proto.common.arena_role_data arena_role_data = 12;
inline bool dg_role_data_reply::has_arena_role_data() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void dg_role_data_reply::set_has_arena_role_data() {
  _has_bits_[0] |= 0x00000400u;
}
inline void dg_role_data_reply::clear_has_arena_role_data() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void dg_role_data_reply::clear_arena_role_data() {
  if (arena_role_data_ != NULL) arena_role_data_->::proto::common::arena_role_data::Clear();
  clear_has_arena_role_data();
}
inline const ::proto::common::arena_role_data& dg_role_data_reply::arena_role_data() const {
  return arena_role_data_ != NULL ? *arena_role_data_ : *default_instance_->arena_role_data_;
}
inline ::proto::common::arena_role_data* dg_role_data_reply::mutable_arena_role_data() {
  set_has_arena_role_data();
  if (arena_role_data_ == NULL) arena_role_data_ = new ::proto::common::arena_role_data;
  return arena_role_data_;
}
inline ::proto::common::arena_role_data* dg_role_data_reply::release_arena_role_data() {
  clear_has_arena_role_data();
  ::proto::common::arena_role_data* temp = arena_role_data_;
  arena_role_data_ = NULL;
  return temp;
}
inline void dg_role_data_reply::set_allocated_arena_role_data(::proto::common::arena_role_data* arena_role_data) {
  delete arena_role_data_;
  arena_role_data_ = arena_role_data;
  if (arena_role_data) {
    set_has_arena_role_data();
  } else {
    clear_has_arena_role_data();
  }
}

// optional .proto.common.achieve_data achieve = 13;
inline bool dg_role_data_reply::has_achieve() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void dg_role_data_reply::set_has_achieve() {
  _has_bits_[0] |= 0x00000800u;
}
inline void dg_role_data_reply::clear_has_achieve() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void dg_role_data_reply::clear_achieve() {
  if (achieve_ != NULL) achieve_->::proto::common::achieve_data::Clear();
  clear_has_achieve();
}
inline const ::proto::common::achieve_data& dg_role_data_reply::achieve() const {
  return achieve_ != NULL ? *achieve_ : *default_instance_->achieve_;
}
inline ::proto::common::achieve_data* dg_role_data_reply::mutable_achieve() {
  set_has_achieve();
  if (achieve_ == NULL) achieve_ = new ::proto::common::achieve_data;
  return achieve_;
}
inline ::proto::common::achieve_data* dg_role_data_reply::release_achieve() {
  clear_has_achieve();
  ::proto::common::achieve_data* temp = achieve_;
  achieve_ = NULL;
  return temp;
}
inline void dg_role_data_reply::set_allocated_achieve(::proto::common::achieve_data* achieve) {
  delete achieve_;
  achieve_ = achieve;
  if (achieve) {
    set_has_achieve();
  } else {
    clear_has_achieve();
  }
}

// optional .proto.common.tower_data tower = 14;
inline bool dg_role_data_reply::has_tower() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void dg_role_data_reply::set_has_tower() {
  _has_bits_[0] |= 0x00001000u;
}
inline void dg_role_data_reply::clear_has_tower() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void dg_role_data_reply::clear_tower() {
  if (tower_ != NULL) tower_->::proto::common::tower_data::Clear();
  clear_has_tower();
}
inline const ::proto::common::tower_data& dg_role_data_reply::tower() const {
  return tower_ != NULL ? *tower_ : *default_instance_->tower_;
}
inline ::proto::common::tower_data* dg_role_data_reply::mutable_tower() {
  set_has_tower();
  if (tower_ == NULL) tower_ = new ::proto::common::tower_data;
  return tower_;
}
inline ::proto::common::tower_data* dg_role_data_reply::release_tower() {
  clear_has_tower();
  ::proto::common::tower_data* temp = tower_;
  tower_ = NULL;
  return temp;
}
inline void dg_role_data_reply::set_allocated_tower(::proto::common::tower_data* tower) {
  delete tower_;
  tower_ = tower;
  if (tower) {
    set_has_tower();
  } else {
    clear_has_tower();
  }
}

// optional .proto.common.luckydraw_data luckydraw = 15;
inline bool dg_role_data_reply::has_luckydraw() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void dg_role_data_reply::set_has_luckydraw() {
  _has_bits_[0] |= 0x00002000u;
}
inline void dg_role_data_reply::clear_has_luckydraw() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void dg_role_data_reply::clear_luckydraw() {
  if (luckydraw_ != NULL) luckydraw_->::proto::common::luckydraw_data::Clear();
  clear_has_luckydraw();
}
inline const ::proto::common::luckydraw_data& dg_role_data_reply::luckydraw() const {
  return luckydraw_ != NULL ? *luckydraw_ : *default_instance_->luckydraw_;
}
inline ::proto::common::luckydraw_data* dg_role_data_reply::mutable_luckydraw() {
  set_has_luckydraw();
  if (luckydraw_ == NULL) luckydraw_ = new ::proto::common::luckydraw_data;
  return luckydraw_;
}
inline ::proto::common::luckydraw_data* dg_role_data_reply::release_luckydraw() {
  clear_has_luckydraw();
  ::proto::common::luckydraw_data* temp = luckydraw_;
  luckydraw_ = NULL;
  return temp;
}
inline void dg_role_data_reply::set_allocated_luckydraw(::proto::common::luckydraw_data* luckydraw) {
  delete luckydraw_;
  luckydraw_ = luckydraw;
  if (luckydraw) {
    set_has_luckydraw();
  } else {
    clear_has_luckydraw();
  }
}

// optional .proto.common.role_all_dungeon_data dungeon_data = 16;
inline bool dg_role_data_reply::has_dungeon_data() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void dg_role_data_reply::set_has_dungeon_data() {
  _has_bits_[0] |= 0x00004000u;
}
inline void dg_role_data_reply::clear_has_dungeon_data() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void dg_role_data_reply::clear_dungeon_data() {
  if (dungeon_data_ != NULL) dungeon_data_->::proto::common::role_all_dungeon_data::Clear();
  clear_has_dungeon_data();
}
inline const ::proto::common::role_all_dungeon_data& dg_role_data_reply::dungeon_data() const {
  return dungeon_data_ != NULL ? *dungeon_data_ : *default_instance_->dungeon_data_;
}
inline ::proto::common::role_all_dungeon_data* dg_role_data_reply::mutable_dungeon_data() {
  set_has_dungeon_data();
  if (dungeon_data_ == NULL) dungeon_data_ = new ::proto::common::role_all_dungeon_data;
  return dungeon_data_;
}
inline ::proto::common::role_all_dungeon_data* dg_role_data_reply::release_dungeon_data() {
  clear_has_dungeon_data();
  ::proto::common::role_all_dungeon_data* temp = dungeon_data_;
  dungeon_data_ = NULL;
  return temp;
}
inline void dg_role_data_reply::set_allocated_dungeon_data(::proto::common::role_all_dungeon_data* dungeon_data) {
  delete dungeon_data_;
  dungeon_data_ = dungeon_data;
  if (dungeon_data) {
    set_has_dungeon_data();
  } else {
    clear_has_dungeon_data();
  }
}

// optional .proto.common.expedition_data expedition_data = 17;
inline bool dg_role_data_reply::has_expedition_data() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void dg_role_data_reply::set_has_expedition_data() {
  _has_bits_[0] |= 0x00008000u;
}
inline void dg_role_data_reply::clear_has_expedition_data() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void dg_role_data_reply::clear_expedition_data() {
  if (expedition_data_ != NULL) expedition_data_->::proto::common::expedition_data::Clear();
  clear_has_expedition_data();
}
inline const ::proto::common::expedition_data& dg_role_data_reply::expedition_data() const {
  return expedition_data_ != NULL ? *expedition_data_ : *default_instance_->expedition_data_;
}
inline ::proto::common::expedition_data* dg_role_data_reply::mutable_expedition_data() {
  set_has_expedition_data();
  if (expedition_data_ == NULL) expedition_data_ = new ::proto::common::expedition_data;
  return expedition_data_;
}
inline ::proto::common::expedition_data* dg_role_data_reply::release_expedition_data() {
  clear_has_expedition_data();
  ::proto::common::expedition_data* temp = expedition_data_;
  expedition_data_ = NULL;
  return temp;
}
inline void dg_role_data_reply::set_allocated_expedition_data(::proto::common::expedition_data* expedition_data) {
  delete expedition_data_;
  expedition_data_ = expedition_data;
  if (expedition_data) {
    set_has_expedition_data();
  } else {
    clear_has_expedition_data();
  }
}

// optional .proto.common.active_reward_data active_reward_data = 18;
inline bool dg_role_data_reply::has_active_reward_data() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void dg_role_data_reply::set_has_active_reward_data() {
  _has_bits_[0] |= 0x00010000u;
}
inline void dg_role_data_reply::clear_has_active_reward_data() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void dg_role_data_reply::clear_active_reward_data() {
  if (active_reward_data_ != NULL) active_reward_data_->::proto::common::active_reward_data::Clear();
  clear_has_active_reward_data();
}
inline const ::proto::common::active_reward_data& dg_role_data_reply::active_reward_data() const {
  return active_reward_data_ != NULL ? *active_reward_data_ : *default_instance_->active_reward_data_;
}
inline ::proto::common::active_reward_data* dg_role_data_reply::mutable_active_reward_data() {
  set_has_active_reward_data();
  if (active_reward_data_ == NULL) active_reward_data_ = new ::proto::common::active_reward_data;
  return active_reward_data_;
}
inline ::proto::common::active_reward_data* dg_role_data_reply::release_active_reward_data() {
  clear_has_active_reward_data();
  ::proto::common::active_reward_data* temp = active_reward_data_;
  active_reward_data_ = NULL;
  return temp;
}
inline void dg_role_data_reply::set_allocated_active_reward_data(::proto::common::active_reward_data* active_reward_data) {
  delete active_reward_data_;
  active_reward_data_ = active_reward_data;
  if (active_reward_data) {
    set_has_active_reward_data();
  } else {
    clear_has_active_reward_data();
  }
}

// optional .proto.common.role_random_shop_data random_shop_data = 19;
inline bool dg_role_data_reply::has_random_shop_data() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void dg_role_data_reply::set_has_random_shop_data() {
  _has_bits_[0] |= 0x00020000u;
}
inline void dg_role_data_reply::clear_has_random_shop_data() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void dg_role_data_reply::clear_random_shop_data() {
  if (random_shop_data_ != NULL) random_shop_data_->::proto::common::role_random_shop_data::Clear();
  clear_has_random_shop_data();
}
inline const ::proto::common::role_random_shop_data& dg_role_data_reply::random_shop_data() const {
  return random_shop_data_ != NULL ? *random_shop_data_ : *default_instance_->random_shop_data_;
}
inline ::proto::common::role_random_shop_data* dg_role_data_reply::mutable_random_shop_data() {
  set_has_random_shop_data();
  if (random_shop_data_ == NULL) random_shop_data_ = new ::proto::common::role_random_shop_data;
  return random_shop_data_;
}
inline ::proto::common::role_random_shop_data* dg_role_data_reply::release_random_shop_data() {
  clear_has_random_shop_data();
  ::proto::common::role_random_shop_data* temp = random_shop_data_;
  random_shop_data_ = NULL;
  return temp;
}
inline void dg_role_data_reply::set_allocated_random_shop_data(::proto::common::role_random_shop_data* random_shop_data) {
  delete random_shop_data_;
  random_shop_data_ = random_shop_data;
  if (random_shop_data) {
    set_has_random_shop_data();
  } else {
    clear_has_random_shop_data();
  }
}

// optional .proto.common.level_reward_recived_list level_rwd_data = 20;
inline bool dg_role_data_reply::has_level_rwd_data() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void dg_role_data_reply::set_has_level_rwd_data() {
  _has_bits_[0] |= 0x00040000u;
}
inline void dg_role_data_reply::clear_has_level_rwd_data() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void dg_role_data_reply::clear_level_rwd_data() {
  if (level_rwd_data_ != NULL) level_rwd_data_->::proto::common::level_reward_recived_list::Clear();
  clear_has_level_rwd_data();
}
inline const ::proto::common::level_reward_recived_list& dg_role_data_reply::level_rwd_data() const {
  return level_rwd_data_ != NULL ? *level_rwd_data_ : *default_instance_->level_rwd_data_;
}
inline ::proto::common::level_reward_recived_list* dg_role_data_reply::mutable_level_rwd_data() {
  set_has_level_rwd_data();
  if (level_rwd_data_ == NULL) level_rwd_data_ = new ::proto::common::level_reward_recived_list;
  return level_rwd_data_;
}
inline ::proto::common::level_reward_recived_list* dg_role_data_reply::release_level_rwd_data() {
  clear_has_level_rwd_data();
  ::proto::common::level_reward_recived_list* temp = level_rwd_data_;
  level_rwd_data_ = NULL;
  return temp;
}
inline void dg_role_data_reply::set_allocated_level_rwd_data(::proto::common::level_reward_recived_list* level_rwd_data) {
  delete level_rwd_data_;
  level_rwd_data_ = level_rwd_data;
  if (level_rwd_data) {
    set_has_level_rwd_data();
  } else {
    clear_has_level_rwd_data();
  }
}

// optional .proto.common.level_reward_mail_recived_list level_rwd_mail_data = 21;
inline bool dg_role_data_reply::has_level_rwd_mail_data() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void dg_role_data_reply::set_has_level_rwd_mail_data() {
  _has_bits_[0] |= 0x00080000u;
}
inline void dg_role_data_reply::clear_has_level_rwd_mail_data() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void dg_role_data_reply::clear_level_rwd_mail_data() {
  if (level_rwd_mail_data_ != NULL) level_rwd_mail_data_->::proto::common::level_reward_mail_recived_list::Clear();
  clear_has_level_rwd_mail_data();
}
inline const ::proto::common::level_reward_mail_recived_list& dg_role_data_reply::level_rwd_mail_data() const {
  return level_rwd_mail_data_ != NULL ? *level_rwd_mail_data_ : *default_instance_->level_rwd_mail_data_;
}
inline ::proto::common::level_reward_mail_recived_list* dg_role_data_reply::mutable_level_rwd_mail_data() {
  set_has_level_rwd_mail_data();
  if (level_rwd_mail_data_ == NULL) level_rwd_mail_data_ = new ::proto::common::level_reward_mail_recived_list;
  return level_rwd_mail_data_;
}
inline ::proto::common::level_reward_mail_recived_list* dg_role_data_reply::release_level_rwd_mail_data() {
  clear_has_level_rwd_mail_data();
  ::proto::common::level_reward_mail_recived_list* temp = level_rwd_mail_data_;
  level_rwd_mail_data_ = NULL;
  return temp;
}
inline void dg_role_data_reply::set_allocated_level_rwd_mail_data(::proto::common::level_reward_mail_recived_list* level_rwd_mail_data) {
  delete level_rwd_mail_data_;
  level_rwd_mail_data_ = level_rwd_mail_data;
  if (level_rwd_mail_data) {
    set_has_level_rwd_mail_data();
  } else {
    clear_has_level_rwd_mail_data();
  }
}

// optional .proto.common.bussiness_act_data bussiness_act_data = 22;
inline bool dg_role_data_reply::has_bussiness_act_data() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void dg_role_data_reply::set_has_bussiness_act_data() {
  _has_bits_[0] |= 0x00100000u;
}
inline void dg_role_data_reply::clear_has_bussiness_act_data() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void dg_role_data_reply::clear_bussiness_act_data() {
  if (bussiness_act_data_ != NULL) bussiness_act_data_->::proto::common::bussiness_act_data::Clear();
  clear_has_bussiness_act_data();
}
inline const ::proto::common::bussiness_act_data& dg_role_data_reply::bussiness_act_data() const {
  return bussiness_act_data_ != NULL ? *bussiness_act_data_ : *default_instance_->bussiness_act_data_;
}
inline ::proto::common::bussiness_act_data* dg_role_data_reply::mutable_bussiness_act_data() {
  set_has_bussiness_act_data();
  if (bussiness_act_data_ == NULL) bussiness_act_data_ = new ::proto::common::bussiness_act_data;
  return bussiness_act_data_;
}
inline ::proto::common::bussiness_act_data* dg_role_data_reply::release_bussiness_act_data() {
  clear_has_bussiness_act_data();
  ::proto::common::bussiness_act_data* temp = bussiness_act_data_;
  bussiness_act_data_ = NULL;
  return temp;
}
inline void dg_role_data_reply::set_allocated_bussiness_act_data(::proto::common::bussiness_act_data* bussiness_act_data) {
  delete bussiness_act_data_;
  bussiness_act_data_ = bussiness_act_data;
  if (bussiness_act_data) {
    set_has_bussiness_act_data();
  } else {
    clear_has_bussiness_act_data();
  }
}

// optional .proto.common.liandan_data liandan_data = 23;
inline bool dg_role_data_reply::has_liandan_data() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void dg_role_data_reply::set_has_liandan_data() {
  _has_bits_[0] |= 0x00200000u;
}
inline void dg_role_data_reply::clear_has_liandan_data() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void dg_role_data_reply::clear_liandan_data() {
  if (liandan_data_ != NULL) liandan_data_->::proto::common::liandan_data::Clear();
  clear_has_liandan_data();
}
inline const ::proto::common::liandan_data& dg_role_data_reply::liandan_data() const {
  return liandan_data_ != NULL ? *liandan_data_ : *default_instance_->liandan_data_;
}
inline ::proto::common::liandan_data* dg_role_data_reply::mutable_liandan_data() {
  set_has_liandan_data();
  if (liandan_data_ == NULL) liandan_data_ = new ::proto::common::liandan_data;
  return liandan_data_;
}
inline ::proto::common::liandan_data* dg_role_data_reply::release_liandan_data() {
  clear_has_liandan_data();
  ::proto::common::liandan_data* temp = liandan_data_;
  liandan_data_ = NULL;
  return temp;
}
inline void dg_role_data_reply::set_allocated_liandan_data(::proto::common::liandan_data* liandan_data) {
  delete liandan_data_;
  liandan_data_ = liandan_data;
  if (liandan_data) {
    set_has_liandan_data();
  } else {
    clear_has_liandan_data();
  }
}

// optional .proto.common.equip_plan_data equip_plan_data = 24;
inline bool dg_role_data_reply::has_equip_plan_data() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void dg_role_data_reply::set_has_equip_plan_data() {
  _has_bits_[0] |= 0x00400000u;
}
inline void dg_role_data_reply::clear_has_equip_plan_data() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void dg_role_data_reply::clear_equip_plan_data() {
  if (equip_plan_data_ != NULL) equip_plan_data_->::proto::common::equip_plan_data::Clear();
  clear_has_equip_plan_data();
}
inline const ::proto::common::equip_plan_data& dg_role_data_reply::equip_plan_data() const {
  return equip_plan_data_ != NULL ? *equip_plan_data_ : *default_instance_->equip_plan_data_;
}
inline ::proto::common::equip_plan_data* dg_role_data_reply::mutable_equip_plan_data() {
  set_has_equip_plan_data();
  if (equip_plan_data_ == NULL) equip_plan_data_ = new ::proto::common::equip_plan_data;
  return equip_plan_data_;
}
inline ::proto::common::equip_plan_data* dg_role_data_reply::release_equip_plan_data() {
  clear_has_equip_plan_data();
  ::proto::common::equip_plan_data* temp = equip_plan_data_;
  equip_plan_data_ = NULL;
  return temp;
}
inline void dg_role_data_reply::set_allocated_equip_plan_data(::proto::common::equip_plan_data* equip_plan_data) {
  delete equip_plan_data_;
  equip_plan_data_ = equip_plan_data;
  if (equip_plan_data) {
    set_has_equip_plan_data();
  } else {
    clear_has_equip_plan_data();
  }
}

// optional .proto.common.patrol_hire_data patrol_data = 25;
inline bool dg_role_data_reply::has_patrol_data() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void dg_role_data_reply::set_has_patrol_data() {
  _has_bits_[0] |= 0x00800000u;
}
inline void dg_role_data_reply::clear_has_patrol_data() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void dg_role_data_reply::clear_patrol_data() {
  if (patrol_data_ != NULL) patrol_data_->::proto::common::patrol_hire_data::Clear();
  clear_has_patrol_data();
}
inline const ::proto::common::patrol_hire_data& dg_role_data_reply::patrol_data() const {
  return patrol_data_ != NULL ? *patrol_data_ : *default_instance_->patrol_data_;
}
inline ::proto::common::patrol_hire_data* dg_role_data_reply::mutable_patrol_data() {
  set_has_patrol_data();
  if (patrol_data_ == NULL) patrol_data_ = new ::proto::common::patrol_hire_data;
  return patrol_data_;
}
inline ::proto::common::patrol_hire_data* dg_role_data_reply::release_patrol_data() {
  clear_has_patrol_data();
  ::proto::common::patrol_hire_data* temp = patrol_data_;
  patrol_data_ = NULL;
  return temp;
}
inline void dg_role_data_reply::set_allocated_patrol_data(::proto::common::patrol_hire_data* patrol_data) {
  delete patrol_data_;
  patrol_data_ = patrol_data;
  if (patrol_data) {
    set_has_patrol_data();
  } else {
    clear_has_patrol_data();
  }
}

// optional .proto.common.role_all_dungeon_times_data dungeon_times_data = 26;
inline bool dg_role_data_reply::has_dungeon_times_data() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void dg_role_data_reply::set_has_dungeon_times_data() {
  _has_bits_[0] |= 0x01000000u;
}
inline void dg_role_data_reply::clear_has_dungeon_times_data() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void dg_role_data_reply::clear_dungeon_times_data() {
  if (dungeon_times_data_ != NULL) dungeon_times_data_->::proto::common::role_all_dungeon_times_data::Clear();
  clear_has_dungeon_times_data();
}
inline const ::proto::common::role_all_dungeon_times_data& dg_role_data_reply::dungeon_times_data() const {
  return dungeon_times_data_ != NULL ? *dungeon_times_data_ : *default_instance_->dungeon_times_data_;
}
inline ::proto::common::role_all_dungeon_times_data* dg_role_data_reply::mutable_dungeon_times_data() {
  set_has_dungeon_times_data();
  if (dungeon_times_data_ == NULL) dungeon_times_data_ = new ::proto::common::role_all_dungeon_times_data;
  return dungeon_times_data_;
}
inline ::proto::common::role_all_dungeon_times_data* dg_role_data_reply::release_dungeon_times_data() {
  clear_has_dungeon_times_data();
  ::proto::common::role_all_dungeon_times_data* temp = dungeon_times_data_;
  dungeon_times_data_ = NULL;
  return temp;
}
inline void dg_role_data_reply::set_allocated_dungeon_times_data(::proto::common::role_all_dungeon_times_data* dungeon_times_data) {
  delete dungeon_times_data_;
  dungeon_times_data_ = dungeon_times_data;
  if (dungeon_times_data) {
    set_has_dungeon_times_data();
  } else {
    clear_has_dungeon_times_data();
  }
}

// optional .proto.common.family_skill_data family_skill_data = 27;
inline bool dg_role_data_reply::has_family_skill_data() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void dg_role_data_reply::set_has_family_skill_data() {
  _has_bits_[0] |= 0x02000000u;
}
inline void dg_role_data_reply::clear_has_family_skill_data() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void dg_role_data_reply::clear_family_skill_data() {
  if (family_skill_data_ != NULL) family_skill_data_->::proto::common::family_skill_data::Clear();
  clear_has_family_skill_data();
}
inline const ::proto::common::family_skill_data& dg_role_data_reply::family_skill_data() const {
  return family_skill_data_ != NULL ? *family_skill_data_ : *default_instance_->family_skill_data_;
}
inline ::proto::common::family_skill_data* dg_role_data_reply::mutable_family_skill_data() {
  set_has_family_skill_data();
  if (family_skill_data_ == NULL) family_skill_data_ = new ::proto::common::family_skill_data;
  return family_skill_data_;
}
inline ::proto::common::family_skill_data* dg_role_data_reply::release_family_skill_data() {
  clear_has_family_skill_data();
  ::proto::common::family_skill_data* temp = family_skill_data_;
  family_skill_data_ = NULL;
  return temp;
}
inline void dg_role_data_reply::set_allocated_family_skill_data(::proto::common::family_skill_data* family_skill_data) {
  delete family_skill_data_;
  family_skill_data_ = family_skill_data;
  if (family_skill_data) {
    set_has_family_skill_data();
  } else {
    clear_has_family_skill_data();
  }
}

// optional .proto.common.general_event_save_data general_event_data = 28;
inline bool dg_role_data_reply::has_general_event_data() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void dg_role_data_reply::set_has_general_event_data() {
  _has_bits_[0] |= 0x04000000u;
}
inline void dg_role_data_reply::clear_has_general_event_data() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void dg_role_data_reply::clear_general_event_data() {
  if (general_event_data_ != NULL) general_event_data_->::proto::common::general_event_save_data::Clear();
  clear_has_general_event_data();
}
inline const ::proto::common::general_event_save_data& dg_role_data_reply::general_event_data() const {
  return general_event_data_ != NULL ? *general_event_data_ : *default_instance_->general_event_data_;
}
inline ::proto::common::general_event_save_data* dg_role_data_reply::mutable_general_event_data() {
  set_has_general_event_data();
  if (general_event_data_ == NULL) general_event_data_ = new ::proto::common::general_event_save_data;
  return general_event_data_;
}
inline ::proto::common::general_event_save_data* dg_role_data_reply::release_general_event_data() {
  clear_has_general_event_data();
  ::proto::common::general_event_save_data* temp = general_event_data_;
  general_event_data_ = NULL;
  return temp;
}
inline void dg_role_data_reply::set_allocated_general_event_data(::proto::common::general_event_save_data* general_event_data) {
  delete general_event_data_;
  general_event_data_ = general_event_data;
  if (general_event_data) {
    set_has_general_event_data();
  } else {
    clear_has_general_event_data();
  }
}

// optional .proto.common.recharge_data recharge_data = 29;
inline bool dg_role_data_reply::has_recharge_data() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void dg_role_data_reply::set_has_recharge_data() {
  _has_bits_[0] |= 0x08000000u;
}
inline void dg_role_data_reply::clear_has_recharge_data() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void dg_role_data_reply::clear_recharge_data() {
  if (recharge_data_ != NULL) recharge_data_->::proto::common::recharge_data::Clear();
  clear_has_recharge_data();
}
inline const ::proto::common::recharge_data& dg_role_data_reply::recharge_data() const {
  return recharge_data_ != NULL ? *recharge_data_ : *default_instance_->recharge_data_;
}
inline ::proto::common::recharge_data* dg_role_data_reply::mutable_recharge_data() {
  set_has_recharge_data();
  if (recharge_data_ == NULL) recharge_data_ = new ::proto::common::recharge_data;
  return recharge_data_;
}
inline ::proto::common::recharge_data* dg_role_data_reply::release_recharge_data() {
  clear_has_recharge_data();
  ::proto::common::recharge_data* temp = recharge_data_;
  recharge_data_ = NULL;
  return temp;
}
inline void dg_role_data_reply::set_allocated_recharge_data(::proto::common::recharge_data* recharge_data) {
  delete recharge_data_;
  recharge_data_ = recharge_data;
  if (recharge_data) {
    set_has_recharge_data();
  } else {
    clear_has_recharge_data();
  }
}

// optional .proto.common.office_data office_data = 30;
inline bool dg_role_data_reply::has_office_data() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void dg_role_data_reply::set_has_office_data() {
  _has_bits_[0] |= 0x10000000u;
}
inline void dg_role_data_reply::clear_has_office_data() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void dg_role_data_reply::clear_office_data() {
  if (office_data_ != NULL) office_data_->::proto::common::office_data::Clear();
  clear_has_office_data();
}
inline const ::proto::common::office_data& dg_role_data_reply::office_data() const {
  return office_data_ != NULL ? *office_data_ : *default_instance_->office_data_;
}
inline ::proto::common::office_data* dg_role_data_reply::mutable_office_data() {
  set_has_office_data();
  if (office_data_ == NULL) office_data_ = new ::proto::common::office_data;
  return office_data_;
}
inline ::proto::common::office_data* dg_role_data_reply::release_office_data() {
  clear_has_office_data();
  ::proto::common::office_data* temp = office_data_;
  office_data_ = NULL;
  return temp;
}
inline void dg_role_data_reply::set_allocated_office_data(::proto::common::office_data* office_data) {
  delete office_data_;
  office_data_ = office_data;
  if (office_data) {
    set_has_office_data();
  } else {
    clear_has_office_data();
  }
}

// -------------------------------------------------------------------

// al_update_gate_user_num_notify

// required uint32 num = 1;
inline bool al_update_gate_user_num_notify::has_num() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void al_update_gate_user_num_notify::set_has_num() {
  _has_bits_[0] |= 0x00000001u;
}
inline void al_update_gate_user_num_notify::clear_has_num() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void al_update_gate_user_num_notify::clear_num() {
  num_ = 0u;
  clear_has_num();
}
inline ::google::protobuf::uint32 al_update_gate_user_num_notify::num() const {
  return num_;
}
inline void al_update_gate_user_num_notify::set_num(::google::protobuf::uint32 value) {
  set_has_num();
  num_ = value;
}

// -------------------------------------------------------------------

// de_user_data_reply

// required string name = 1;
inline bool de_user_data_reply::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void de_user_data_reply::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void de_user_data_reply::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void de_user_data_reply::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& de_user_data_reply::name() const {
  return *name_;
}
inline void de_user_data_reply::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void de_user_data_reply::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void de_user_data_reply::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* de_user_data_reply::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* de_user_data_reply::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void de_user_data_reply::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint32 level = 2;
inline bool de_user_data_reply::has_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void de_user_data_reply::set_has_level() {
  _has_bits_[0] |= 0x00000002u;
}
inline void de_user_data_reply::clear_has_level() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void de_user_data_reply::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 de_user_data_reply::level() const {
  return level_;
}
inline void de_user_data_reply::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
}

// -------------------------------------------------------------------

// de_user_center_data_reply

// -------------------------------------------------------------------

// ed_sync_role_data_request

// -------------------------------------------------------------------

// ag_save_user_notify

// -------------------------------------------------------------------

// ln_syn_login_info_notify

// optional uint32 server_id = 1;
inline bool ln_syn_login_info_notify::has_server_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ln_syn_login_info_notify::set_has_server_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ln_syn_login_info_notify::clear_has_server_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ln_syn_login_info_notify::clear_server_id() {
  server_id_ = 0u;
  clear_has_server_id();
}
inline ::google::protobuf::uint32 ln_syn_login_info_notify::server_id() const {
  return server_id_;
}
inline void ln_syn_login_info_notify::set_server_id(::google::protobuf::uint32 value) {
  set_has_server_id();
  server_id_ = value;
}

// optional string login_ip = 2;
inline bool ln_syn_login_info_notify::has_login_ip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ln_syn_login_info_notify::set_has_login_ip() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ln_syn_login_info_notify::clear_has_login_ip() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ln_syn_login_info_notify::clear_login_ip() {
  if (login_ip_ != &::google::protobuf::internal::kEmptyString) {
    login_ip_->clear();
  }
  clear_has_login_ip();
}
inline const ::std::string& ln_syn_login_info_notify::login_ip() const {
  return *login_ip_;
}
inline void ln_syn_login_info_notify::set_login_ip(const ::std::string& value) {
  set_has_login_ip();
  if (login_ip_ == &::google::protobuf::internal::kEmptyString) {
    login_ip_ = new ::std::string;
  }
  login_ip_->assign(value);
}
inline void ln_syn_login_info_notify::set_login_ip(const char* value) {
  set_has_login_ip();
  if (login_ip_ == &::google::protobuf::internal::kEmptyString) {
    login_ip_ = new ::std::string;
  }
  login_ip_->assign(value);
}
inline void ln_syn_login_info_notify::set_login_ip(const char* value, size_t size) {
  set_has_login_ip();
  if (login_ip_ == &::google::protobuf::internal::kEmptyString) {
    login_ip_ = new ::std::string;
  }
  login_ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ln_syn_login_info_notify::mutable_login_ip() {
  set_has_login_ip();
  if (login_ip_ == &::google::protobuf::internal::kEmptyString) {
    login_ip_ = new ::std::string;
  }
  return login_ip_;
}
inline ::std::string* ln_syn_login_info_notify::release_login_ip() {
  clear_has_login_ip();
  if (login_ip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = login_ip_;
    login_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ln_syn_login_info_notify::set_allocated_login_ip(::std::string* login_ip) {
  if (login_ip_ != &::google::protobuf::internal::kEmptyString) {
    delete login_ip_;
  }
  if (login_ip) {
    set_has_login_ip();
    login_ip_ = login_ip;
  } else {
    clear_has_login_ip();
    login_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 login_port = 3;
inline bool ln_syn_login_info_notify::has_login_port() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ln_syn_login_info_notify::set_has_login_port() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ln_syn_login_info_notify::clear_has_login_port() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ln_syn_login_info_notify::clear_login_port() {
  login_port_ = 0u;
  clear_has_login_port();
}
inline ::google::protobuf::uint32 ln_syn_login_info_notify::login_port() const {
  return login_port_;
}
inline void ln_syn_login_info_notify::set_login_port(::google::protobuf::uint32 value) {
  set_has_login_port();
  login_port_ = value;
}

// optional string server_name = 4;
inline bool ln_syn_login_info_notify::has_server_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ln_syn_login_info_notify::set_has_server_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ln_syn_login_info_notify::clear_has_server_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ln_syn_login_info_notify::clear_server_name() {
  if (server_name_ != &::google::protobuf::internal::kEmptyString) {
    server_name_->clear();
  }
  clear_has_server_name();
}
inline const ::std::string& ln_syn_login_info_notify::server_name() const {
  return *server_name_;
}
inline void ln_syn_login_info_notify::set_server_name(const ::std::string& value) {
  set_has_server_name();
  if (server_name_ == &::google::protobuf::internal::kEmptyString) {
    server_name_ = new ::std::string;
  }
  server_name_->assign(value);
}
inline void ln_syn_login_info_notify::set_server_name(const char* value) {
  set_has_server_name();
  if (server_name_ == &::google::protobuf::internal::kEmptyString) {
    server_name_ = new ::std::string;
  }
  server_name_->assign(value);
}
inline void ln_syn_login_info_notify::set_server_name(const char* value, size_t size) {
  set_has_server_name();
  if (server_name_ == &::google::protobuf::internal::kEmptyString) {
    server_name_ = new ::std::string;
  }
  server_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ln_syn_login_info_notify::mutable_server_name() {
  set_has_server_name();
  if (server_name_ == &::google::protobuf::internal::kEmptyString) {
    server_name_ = new ::std::string;
  }
  return server_name_;
}
inline ::std::string* ln_syn_login_info_notify::release_server_name() {
  clear_has_server_name();
  if (server_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = server_name_;
    server_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ln_syn_login_info_notify::set_allocated_server_name(::std::string* server_name) {
  if (server_name_ != &::google::protobuf::internal::kEmptyString) {
    delete server_name_;
  }
  if (server_name) {
    set_has_server_name();
    server_name_ = server_name;
  } else {
    clear_has_server_name();
    server_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 can_create_new_role = 5;
inline bool ln_syn_login_info_notify::has_can_create_new_role() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ln_syn_login_info_notify::set_has_can_create_new_role() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ln_syn_login_info_notify::clear_has_can_create_new_role() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ln_syn_login_info_notify::clear_can_create_new_role() {
  can_create_new_role_ = 0u;
  clear_has_can_create_new_role();
}
inline ::google::protobuf::uint32 ln_syn_login_info_notify::can_create_new_role() const {
  return can_create_new_role_;
}
inline void ln_syn_login_info_notify::set_can_create_new_role(::google::protobuf::uint32 value) {
  set_has_can_create_new_role();
  can_create_new_role_ = value;
}

// -------------------------------------------------------------------

// ln_close_server_notify

// optional uint32 server_id = 1;
inline bool ln_close_server_notify::has_server_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ln_close_server_notify::set_has_server_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ln_close_server_notify::clear_has_server_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ln_close_server_notify::clear_server_id() {
  server_id_ = 0u;
  clear_has_server_id();
}
inline ::google::protobuf::uint32 ln_close_server_notify::server_id() const {
  return server_id_;
}
inline void ln_close_server_notify::set_server_id(::google::protobuf::uint32 value) {
  set_has_server_id();
  server_id_ = value;
}

// -------------------------------------------------------------------

// ln_user_num_notify

// optional uint32 server_id = 1;
inline bool ln_user_num_notify::has_server_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ln_user_num_notify::set_has_server_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ln_user_num_notify::clear_has_server_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ln_user_num_notify::clear_server_id() {
  server_id_ = 0u;
  clear_has_server_id();
}
inline ::google::protobuf::uint32 ln_user_num_notify::server_id() const {
  return server_id_;
}
inline void ln_user_num_notify::set_server_id(::google::protobuf::uint32 value) {
  set_has_server_id();
  server_id_ = value;
}

// optional uint32 user_num = 2;
inline bool ln_user_num_notify::has_user_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ln_user_num_notify::set_has_user_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ln_user_num_notify::clear_has_user_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ln_user_num_notify::clear_user_num() {
  user_num_ = 0u;
  clear_has_user_num();
}
inline ::google::protobuf::uint32 ln_user_num_notify::user_num() const {
  return user_num_;
}
inline void ln_user_num_notify::set_user_num(::google::protobuf::uint32 value) {
  set_has_user_num();
  user_num_ = value;
}

// -------------------------------------------------------------------

// ag_syn_gate_info_notify

// required uint32 gate_id = 1;
inline bool ag_syn_gate_info_notify::has_gate_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ag_syn_gate_info_notify::set_has_gate_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ag_syn_gate_info_notify::clear_has_gate_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ag_syn_gate_info_notify::clear_gate_id() {
  gate_id_ = 0u;
  clear_has_gate_id();
}
inline ::google::protobuf::uint32 ag_syn_gate_info_notify::gate_id() const {
  return gate_id_;
}
inline void ag_syn_gate_info_notify::set_gate_id(::google::protobuf::uint32 value) {
  set_has_gate_id();
  gate_id_ = value;
}

// optional uint32 server_id = 2;
inline bool ag_syn_gate_info_notify::has_server_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ag_syn_gate_info_notify::set_has_server_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ag_syn_gate_info_notify::clear_has_server_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ag_syn_gate_info_notify::clear_server_id() {
  server_id_ = 0u;
  clear_has_server_id();
}
inline ::google::protobuf::uint32 ag_syn_gate_info_notify::server_id() const {
  return server_id_;
}
inline void ag_syn_gate_info_notify::set_server_id(::google::protobuf::uint32 value) {
  set_has_server_id();
  server_id_ = value;
}

// -------------------------------------------------------------------

// gh_syn_online_role_notify

// required .proto.common.chat_syn_user_info chat_info = 1;
inline bool gh_syn_online_role_notify::has_chat_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gh_syn_online_role_notify::set_has_chat_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gh_syn_online_role_notify::clear_has_chat_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gh_syn_online_role_notify::clear_chat_info() {
  if (chat_info_ != NULL) chat_info_->::proto::common::chat_syn_user_info::Clear();
  clear_has_chat_info();
}
inline const ::proto::common::chat_syn_user_info& gh_syn_online_role_notify::chat_info() const {
  return chat_info_ != NULL ? *chat_info_ : *default_instance_->chat_info_;
}
inline ::proto::common::chat_syn_user_info* gh_syn_online_role_notify::mutable_chat_info() {
  set_has_chat_info();
  if (chat_info_ == NULL) chat_info_ = new ::proto::common::chat_syn_user_info;
  return chat_info_;
}
inline ::proto::common::chat_syn_user_info* gh_syn_online_role_notify::release_chat_info() {
  clear_has_chat_info();
  ::proto::common::chat_syn_user_info* temp = chat_info_;
  chat_info_ = NULL;
  return temp;
}
inline void gh_syn_online_role_notify::set_allocated_chat_info(::proto::common::chat_syn_user_info* chat_info) {
  delete chat_info_;
  chat_info_ = chat_info;
  if (chat_info) {
    set_has_chat_info();
  } else {
    clear_has_chat_info();
  }
}

// -------------------------------------------------------------------

// hg_test_notify

// -------------------------------------------------------------------

// ah_syn_gate_info_notify

// required uint32 gate_id = 1;
inline bool ah_syn_gate_info_notify::has_gate_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ah_syn_gate_info_notify::set_has_gate_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ah_syn_gate_info_notify::clear_has_gate_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ah_syn_gate_info_notify::clear_gate_id() {
  gate_id_ = 0u;
  clear_has_gate_id();
}
inline ::google::protobuf::uint32 ah_syn_gate_info_notify::gate_id() const {
  return gate_id_;
}
inline void ah_syn_gate_info_notify::set_gate_id(::google::protobuf::uint32 value) {
  set_has_gate_id();
  gate_id_ = value;
}

// -------------------------------------------------------------------

// ha_test_reply

// -------------------------------------------------------------------

// gh_syn_game_info_notify

// required uint32 game_id = 1;
inline bool gh_syn_game_info_notify::has_game_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gh_syn_game_info_notify::set_has_game_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gh_syn_game_info_notify::clear_has_game_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gh_syn_game_info_notify::clear_game_id() {
  game_id_ = 0u;
  clear_has_game_id();
}
inline ::google::protobuf::uint32 gh_syn_game_info_notify::game_id() const {
  return game_id_;
}
inline void gh_syn_game_info_notify::set_game_id(::google::protobuf::uint32 value) {
  set_has_game_id();
  game_id_ = value;
}

// -------------------------------------------------------------------

// hg_chat_get_role_info_request

// repeated .proto.common.chat_param param_list = 1;
inline int hg_chat_get_role_info_request::param_list_size() const {
  return param_list_.size();
}
inline void hg_chat_get_role_info_request::clear_param_list() {
  param_list_.Clear();
}
inline const ::proto::common::chat_param& hg_chat_get_role_info_request::param_list(int index) const {
  return param_list_.Get(index);
}
inline ::proto::common::chat_param* hg_chat_get_role_info_request::mutable_param_list(int index) {
  return param_list_.Mutable(index);
}
inline ::proto::common::chat_param* hg_chat_get_role_info_request::add_param_list() {
  return param_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::common::chat_param >&
hg_chat_get_role_info_request::param_list() const {
  return param_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto::common::chat_param >*
hg_chat_get_role_info_request::mutable_param_list() {
  return &param_list_;
}

// required .proto.common.chat_common_data chat_notify = 2;
inline bool hg_chat_get_role_info_request::has_chat_notify() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void hg_chat_get_role_info_request::set_has_chat_notify() {
  _has_bits_[0] |= 0x00000002u;
}
inline void hg_chat_get_role_info_request::clear_has_chat_notify() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void hg_chat_get_role_info_request::clear_chat_notify() {
  if (chat_notify_ != NULL) chat_notify_->::proto::common::chat_common_data::Clear();
  clear_has_chat_notify();
}
inline const ::proto::common::chat_common_data& hg_chat_get_role_info_request::chat_notify() const {
  return chat_notify_ != NULL ? *chat_notify_ : *default_instance_->chat_notify_;
}
inline ::proto::common::chat_common_data* hg_chat_get_role_info_request::mutable_chat_notify() {
  set_has_chat_notify();
  if (chat_notify_ == NULL) chat_notify_ = new ::proto::common::chat_common_data;
  return chat_notify_;
}
inline ::proto::common::chat_common_data* hg_chat_get_role_info_request::release_chat_notify() {
  clear_has_chat_notify();
  ::proto::common::chat_common_data* temp = chat_notify_;
  chat_notify_ = NULL;
  return temp;
}
inline void hg_chat_get_role_info_request::set_allocated_chat_notify(::proto::common::chat_common_data* chat_notify) {
  delete chat_notify_;
  chat_notify_ = chat_notify;
  if (chat_notify) {
    set_has_chat_notify();
  } else {
    clear_has_chat_notify();
  }
}

// -------------------------------------------------------------------

// gh_chat_get_role_info_reply

// optional uint32 reply_code = 1;
inline bool gh_chat_get_role_info_reply::has_reply_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gh_chat_get_role_info_reply::set_has_reply_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gh_chat_get_role_info_reply::clear_has_reply_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gh_chat_get_role_info_reply::clear_reply_code() {
  reply_code_ = 0u;
  clear_has_reply_code();
}
inline ::google::protobuf::uint32 gh_chat_get_role_info_reply::reply_code() const {
  return reply_code_;
}
inline void gh_chat_get_role_info_reply::set_reply_code(::google::protobuf::uint32 value) {
  set_has_reply_code();
  reply_code_ = value;
}

// optional .proto.common.chat_common_role_info chat_role_info = 2;
inline bool gh_chat_get_role_info_reply::has_chat_role_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gh_chat_get_role_info_reply::set_has_chat_role_info() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gh_chat_get_role_info_reply::clear_has_chat_role_info() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gh_chat_get_role_info_reply::clear_chat_role_info() {
  if (chat_role_info_ != NULL) chat_role_info_->::proto::common::chat_common_role_info::Clear();
  clear_has_chat_role_info();
}
inline const ::proto::common::chat_common_role_info& gh_chat_get_role_info_reply::chat_role_info() const {
  return chat_role_info_ != NULL ? *chat_role_info_ : *default_instance_->chat_role_info_;
}
inline ::proto::common::chat_common_role_info* gh_chat_get_role_info_reply::mutable_chat_role_info() {
  set_has_chat_role_info();
  if (chat_role_info_ == NULL) chat_role_info_ = new ::proto::common::chat_common_role_info;
  return chat_role_info_;
}
inline ::proto::common::chat_common_role_info* gh_chat_get_role_info_reply::release_chat_role_info() {
  clear_has_chat_role_info();
  ::proto::common::chat_common_role_info* temp = chat_role_info_;
  chat_role_info_ = NULL;
  return temp;
}
inline void gh_chat_get_role_info_reply::set_allocated_chat_role_info(::proto::common::chat_common_role_info* chat_role_info) {
  delete chat_role_info_;
  chat_role_info_ = chat_role_info;
  if (chat_role_info) {
    set_has_chat_role_info();
  } else {
    clear_has_chat_role_info();
  }
}

// required .proto.common.chat_common_data chat_notify = 3;
inline bool gh_chat_get_role_info_reply::has_chat_notify() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void gh_chat_get_role_info_reply::set_has_chat_notify() {
  _has_bits_[0] |= 0x00000004u;
}
inline void gh_chat_get_role_info_reply::clear_has_chat_notify() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void gh_chat_get_role_info_reply::clear_chat_notify() {
  if (chat_notify_ != NULL) chat_notify_->::proto::common::chat_common_data::Clear();
  clear_has_chat_notify();
}
inline const ::proto::common::chat_common_data& gh_chat_get_role_info_reply::chat_notify() const {
  return chat_notify_ != NULL ? *chat_notify_ : *default_instance_->chat_notify_;
}
inline ::proto::common::chat_common_data* gh_chat_get_role_info_reply::mutable_chat_notify() {
  set_has_chat_notify();
  if (chat_notify_ == NULL) chat_notify_ = new ::proto::common::chat_common_data;
  return chat_notify_;
}
inline ::proto::common::chat_common_data* gh_chat_get_role_info_reply::release_chat_notify() {
  clear_has_chat_notify();
  ::proto::common::chat_common_data* temp = chat_notify_;
  chat_notify_ = NULL;
  return temp;
}
inline void gh_chat_get_role_info_reply::set_allocated_chat_notify(::proto::common::chat_common_data* chat_notify) {
  delete chat_notify_;
  chat_notify_ = chat_notify;
  if (chat_notify) {
    set_has_chat_notify();
  } else {
    clear_has_chat_notify();
  }
}

// -------------------------------------------------------------------

// hg_get_nearby_roles_request

// optional .proto.common.chat_channel chat_channel = 1 [default = chat_channel_vicinity];
inline bool hg_get_nearby_roles_request::has_chat_channel() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void hg_get_nearby_roles_request::set_has_chat_channel() {
  _has_bits_[0] |= 0x00000001u;
}
inline void hg_get_nearby_roles_request::clear_has_chat_channel() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void hg_get_nearby_roles_request::clear_chat_channel() {
  chat_channel_ = 2;
  clear_has_chat_channel();
}
inline ::proto::common::chat_channel hg_get_nearby_roles_request::chat_channel() const {
  return static_cast< ::proto::common::chat_channel >(chat_channel_);
}
inline void hg_get_nearby_roles_request::set_chat_channel(::proto::common::chat_channel value) {
  assert(::proto::common::chat_channel_IsValid(value));
  set_has_chat_channel();
  chat_channel_ = value;
}

// optional string chat_info = 2;
inline bool hg_get_nearby_roles_request::has_chat_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void hg_get_nearby_roles_request::set_has_chat_info() {
  _has_bits_[0] |= 0x00000002u;
}
inline void hg_get_nearby_roles_request::clear_has_chat_info() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void hg_get_nearby_roles_request::clear_chat_info() {
  if (chat_info_ != &::google::protobuf::internal::kEmptyString) {
    chat_info_->clear();
  }
  clear_has_chat_info();
}
inline const ::std::string& hg_get_nearby_roles_request::chat_info() const {
  return *chat_info_;
}
inline void hg_get_nearby_roles_request::set_chat_info(const ::std::string& value) {
  set_has_chat_info();
  if (chat_info_ == &::google::protobuf::internal::kEmptyString) {
    chat_info_ = new ::std::string;
  }
  chat_info_->assign(value);
}
inline void hg_get_nearby_roles_request::set_chat_info(const char* value) {
  set_has_chat_info();
  if (chat_info_ == &::google::protobuf::internal::kEmptyString) {
    chat_info_ = new ::std::string;
  }
  chat_info_->assign(value);
}
inline void hg_get_nearby_roles_request::set_chat_info(const char* value, size_t size) {
  set_has_chat_info();
  if (chat_info_ == &::google::protobuf::internal::kEmptyString) {
    chat_info_ = new ::std::string;
  }
  chat_info_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* hg_get_nearby_roles_request::mutable_chat_info() {
  set_has_chat_info();
  if (chat_info_ == &::google::protobuf::internal::kEmptyString) {
    chat_info_ = new ::std::string;
  }
  return chat_info_;
}
inline ::std::string* hg_get_nearby_roles_request::release_chat_info() {
  clear_has_chat_info();
  if (chat_info_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = chat_info_;
    chat_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void hg_get_nearby_roles_request::set_allocated_chat_info(::std::string* chat_info) {
  if (chat_info_ != &::google::protobuf::internal::kEmptyString) {
    delete chat_info_;
  }
  if (chat_info) {
    set_has_chat_info();
    chat_info_ = chat_info;
  } else {
    clear_has_chat_info();
    chat_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 head_icon_id = 3;
inline bool hg_get_nearby_roles_request::has_head_icon_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void hg_get_nearby_roles_request::set_has_head_icon_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void hg_get_nearby_roles_request::clear_has_head_icon_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void hg_get_nearby_roles_request::clear_head_icon_id() {
  head_icon_id_ = 0u;
  clear_has_head_icon_id();
}
inline ::google::protobuf::uint32 hg_get_nearby_roles_request::head_icon_id() const {
  return head_icon_id_;
}
inline void hg_get_nearby_roles_request::set_head_icon_id(::google::protobuf::uint32 value) {
  set_has_head_icon_id();
  head_icon_id_ = value;
}

// optional uint32 role_level = 4;
inline bool hg_get_nearby_roles_request::has_role_level() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void hg_get_nearby_roles_request::set_has_role_level() {
  _has_bits_[0] |= 0x00000008u;
}
inline void hg_get_nearby_roles_request::clear_has_role_level() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void hg_get_nearby_roles_request::clear_role_level() {
  role_level_ = 0u;
  clear_has_role_level();
}
inline ::google::protobuf::uint32 hg_get_nearby_roles_request::role_level() const {
  return role_level_;
}
inline void hg_get_nearby_roles_request::set_role_level(::google::protobuf::uint32 value) {
  set_has_role_level();
  role_level_ = value;
}

// optional string param = 5;
inline bool hg_get_nearby_roles_request::has_param() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void hg_get_nearby_roles_request::set_has_param() {
  _has_bits_[0] |= 0x00000010u;
}
inline void hg_get_nearby_roles_request::clear_has_param() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void hg_get_nearby_roles_request::clear_param() {
  if (param_ != &::google::protobuf::internal::kEmptyString) {
    param_->clear();
  }
  clear_has_param();
}
inline const ::std::string& hg_get_nearby_roles_request::param() const {
  return *param_;
}
inline void hg_get_nearby_roles_request::set_param(const ::std::string& value) {
  set_has_param();
  if (param_ == &::google::protobuf::internal::kEmptyString) {
    param_ = new ::std::string;
  }
  param_->assign(value);
}
inline void hg_get_nearby_roles_request::set_param(const char* value) {
  set_has_param();
  if (param_ == &::google::protobuf::internal::kEmptyString) {
    param_ = new ::std::string;
  }
  param_->assign(value);
}
inline void hg_get_nearby_roles_request::set_param(const char* value, size_t size) {
  set_has_param();
  if (param_ == &::google::protobuf::internal::kEmptyString) {
    param_ = new ::std::string;
  }
  param_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* hg_get_nearby_roles_request::mutable_param() {
  set_has_param();
  if (param_ == &::google::protobuf::internal::kEmptyString) {
    param_ = new ::std::string;
  }
  return param_;
}
inline ::std::string* hg_get_nearby_roles_request::release_param() {
  clear_has_param();
  if (param_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = param_;
    param_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void hg_get_nearby_roles_request::set_allocated_param(::std::string* param) {
  if (param_ != &::google::protobuf::internal::kEmptyString) {
    delete param_;
  }
  if (param) {
    set_has_param();
    param_ = param;
  } else {
    clear_has_param();
    param_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .proto.common.chat_common_role_info chat_role_info = 6;
inline bool hg_get_nearby_roles_request::has_chat_role_info() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void hg_get_nearby_roles_request::set_has_chat_role_info() {
  _has_bits_[0] |= 0x00000020u;
}
inline void hg_get_nearby_roles_request::clear_has_chat_role_info() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void hg_get_nearby_roles_request::clear_chat_role_info() {
  if (chat_role_info_ != NULL) chat_role_info_->::proto::common::chat_common_role_info::Clear();
  clear_has_chat_role_info();
}
inline const ::proto::common::chat_common_role_info& hg_get_nearby_roles_request::chat_role_info() const {
  return chat_role_info_ != NULL ? *chat_role_info_ : *default_instance_->chat_role_info_;
}
inline ::proto::common::chat_common_role_info* hg_get_nearby_roles_request::mutable_chat_role_info() {
  set_has_chat_role_info();
  if (chat_role_info_ == NULL) chat_role_info_ = new ::proto::common::chat_common_role_info;
  return chat_role_info_;
}
inline ::proto::common::chat_common_role_info* hg_get_nearby_roles_request::release_chat_role_info() {
  clear_has_chat_role_info();
  ::proto::common::chat_common_role_info* temp = chat_role_info_;
  chat_role_info_ = NULL;
  return temp;
}
inline void hg_get_nearby_roles_request::set_allocated_chat_role_info(::proto::common::chat_common_role_info* chat_role_info) {
  delete chat_role_info_;
  chat_role_info_ = chat_role_info;
  if (chat_role_info) {
    set_has_chat_role_info();
  } else {
    clear_has_chat_role_info();
  }
}

// -------------------------------------------------------------------

// gh_get_nearby_roles_reply

// optional uint32 reply_code = 1;
inline bool gh_get_nearby_roles_reply::has_reply_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gh_get_nearby_roles_reply::set_has_reply_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gh_get_nearby_roles_reply::clear_has_reply_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gh_get_nearby_roles_reply::clear_reply_code() {
  reply_code_ = 0u;
  clear_has_reply_code();
}
inline ::google::protobuf::uint32 gh_get_nearby_roles_reply::reply_code() const {
  return reply_code_;
}
inline void gh_get_nearby_roles_reply::set_reply_code(::google::protobuf::uint32 value) {
  set_has_reply_code();
  reply_code_ = value;
}

// optional .proto.common.chat_channel chat_channel = 2 [default = chat_channel_vicinity];
inline bool gh_get_nearby_roles_reply::has_chat_channel() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gh_get_nearby_roles_reply::set_has_chat_channel() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gh_get_nearby_roles_reply::clear_has_chat_channel() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gh_get_nearby_roles_reply::clear_chat_channel() {
  chat_channel_ = 2;
  clear_has_chat_channel();
}
inline ::proto::common::chat_channel gh_get_nearby_roles_reply::chat_channel() const {
  return static_cast< ::proto::common::chat_channel >(chat_channel_);
}
inline void gh_get_nearby_roles_reply::set_chat_channel(::proto::common::chat_channel value) {
  assert(::proto::common::chat_channel_IsValid(value));
  set_has_chat_channel();
  chat_channel_ = value;
}

// optional string chat_info = 3;
inline bool gh_get_nearby_roles_reply::has_chat_info() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void gh_get_nearby_roles_reply::set_has_chat_info() {
  _has_bits_[0] |= 0x00000004u;
}
inline void gh_get_nearby_roles_reply::clear_has_chat_info() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void gh_get_nearby_roles_reply::clear_chat_info() {
  if (chat_info_ != &::google::protobuf::internal::kEmptyString) {
    chat_info_->clear();
  }
  clear_has_chat_info();
}
inline const ::std::string& gh_get_nearby_roles_reply::chat_info() const {
  return *chat_info_;
}
inline void gh_get_nearby_roles_reply::set_chat_info(const ::std::string& value) {
  set_has_chat_info();
  if (chat_info_ == &::google::protobuf::internal::kEmptyString) {
    chat_info_ = new ::std::string;
  }
  chat_info_->assign(value);
}
inline void gh_get_nearby_roles_reply::set_chat_info(const char* value) {
  set_has_chat_info();
  if (chat_info_ == &::google::protobuf::internal::kEmptyString) {
    chat_info_ = new ::std::string;
  }
  chat_info_->assign(value);
}
inline void gh_get_nearby_roles_reply::set_chat_info(const char* value, size_t size) {
  set_has_chat_info();
  if (chat_info_ == &::google::protobuf::internal::kEmptyString) {
    chat_info_ = new ::std::string;
  }
  chat_info_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* gh_get_nearby_roles_reply::mutable_chat_info() {
  set_has_chat_info();
  if (chat_info_ == &::google::protobuf::internal::kEmptyString) {
    chat_info_ = new ::std::string;
  }
  return chat_info_;
}
inline ::std::string* gh_get_nearby_roles_reply::release_chat_info() {
  clear_has_chat_info();
  if (chat_info_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = chat_info_;
    chat_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void gh_get_nearby_roles_reply::set_allocated_chat_info(::std::string* chat_info) {
  if (chat_info_ != &::google::protobuf::internal::kEmptyString) {
    delete chat_info_;
  }
  if (chat_info) {
    set_has_chat_info();
    chat_info_ = chat_info;
  } else {
    clear_has_chat_info();
    chat_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated uint64 role_uids = 4;
inline int gh_get_nearby_roles_reply::role_uids_size() const {
  return role_uids_.size();
}
inline void gh_get_nearby_roles_reply::clear_role_uids() {
  role_uids_.Clear();
}
inline ::google::protobuf::uint64 gh_get_nearby_roles_reply::role_uids(int index) const {
  return role_uids_.Get(index);
}
inline void gh_get_nearby_roles_reply::set_role_uids(int index, ::google::protobuf::uint64 value) {
  role_uids_.Set(index, value);
}
inline void gh_get_nearby_roles_reply::add_role_uids(::google::protobuf::uint64 value) {
  role_uids_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
gh_get_nearby_roles_reply::role_uids() const {
  return role_uids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
gh_get_nearby_roles_reply::mutable_role_uids() {
  return &role_uids_;
}

// optional uint32 head_icon_id = 5;
inline bool gh_get_nearby_roles_reply::has_head_icon_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void gh_get_nearby_roles_reply::set_has_head_icon_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void gh_get_nearby_roles_reply::clear_has_head_icon_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void gh_get_nearby_roles_reply::clear_head_icon_id() {
  head_icon_id_ = 0u;
  clear_has_head_icon_id();
}
inline ::google::protobuf::uint32 gh_get_nearby_roles_reply::head_icon_id() const {
  return head_icon_id_;
}
inline void gh_get_nearby_roles_reply::set_head_icon_id(::google::protobuf::uint32 value) {
  set_has_head_icon_id();
  head_icon_id_ = value;
}

// optional uint32 role_level = 6;
inline bool gh_get_nearby_roles_reply::has_role_level() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void gh_get_nearby_roles_reply::set_has_role_level() {
  _has_bits_[0] |= 0x00000020u;
}
inline void gh_get_nearby_roles_reply::clear_has_role_level() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void gh_get_nearby_roles_reply::clear_role_level() {
  role_level_ = 0u;
  clear_has_role_level();
}
inline ::google::protobuf::uint32 gh_get_nearby_roles_reply::role_level() const {
  return role_level_;
}
inline void gh_get_nearby_roles_reply::set_role_level(::google::protobuf::uint32 value) {
  set_has_role_level();
  role_level_ = value;
}

// optional string param = 7;
inline bool gh_get_nearby_roles_reply::has_param() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void gh_get_nearby_roles_reply::set_has_param() {
  _has_bits_[0] |= 0x00000040u;
}
inline void gh_get_nearby_roles_reply::clear_has_param() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void gh_get_nearby_roles_reply::clear_param() {
  if (param_ != &::google::protobuf::internal::kEmptyString) {
    param_->clear();
  }
  clear_has_param();
}
inline const ::std::string& gh_get_nearby_roles_reply::param() const {
  return *param_;
}
inline void gh_get_nearby_roles_reply::set_param(const ::std::string& value) {
  set_has_param();
  if (param_ == &::google::protobuf::internal::kEmptyString) {
    param_ = new ::std::string;
  }
  param_->assign(value);
}
inline void gh_get_nearby_roles_reply::set_param(const char* value) {
  set_has_param();
  if (param_ == &::google::protobuf::internal::kEmptyString) {
    param_ = new ::std::string;
  }
  param_->assign(value);
}
inline void gh_get_nearby_roles_reply::set_param(const char* value, size_t size) {
  set_has_param();
  if (param_ == &::google::protobuf::internal::kEmptyString) {
    param_ = new ::std::string;
  }
  param_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* gh_get_nearby_roles_reply::mutable_param() {
  set_has_param();
  if (param_ == &::google::protobuf::internal::kEmptyString) {
    param_ = new ::std::string;
  }
  return param_;
}
inline ::std::string* gh_get_nearby_roles_reply::release_param() {
  clear_has_param();
  if (param_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = param_;
    param_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void gh_get_nearby_roles_reply::set_allocated_param(::std::string* param) {
  if (param_ != &::google::protobuf::internal::kEmptyString) {
    delete param_;
  }
  if (param) {
    set_has_param();
    param_ = param;
  } else {
    clear_has_param();
    param_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .proto.common.chat_common_role_info chat_role_info = 8;
inline bool gh_get_nearby_roles_reply::has_chat_role_info() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void gh_get_nearby_roles_reply::set_has_chat_role_info() {
  _has_bits_[0] |= 0x00000080u;
}
inline void gh_get_nearby_roles_reply::clear_has_chat_role_info() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void gh_get_nearby_roles_reply::clear_chat_role_info() {
  if (chat_role_info_ != NULL) chat_role_info_->::proto::common::chat_common_role_info::Clear();
  clear_has_chat_role_info();
}
inline const ::proto::common::chat_common_role_info& gh_get_nearby_roles_reply::chat_role_info() const {
  return chat_role_info_ != NULL ? *chat_role_info_ : *default_instance_->chat_role_info_;
}
inline ::proto::common::chat_common_role_info* gh_get_nearby_roles_reply::mutable_chat_role_info() {
  set_has_chat_role_info();
  if (chat_role_info_ == NULL) chat_role_info_ = new ::proto::common::chat_common_role_info;
  return chat_role_info_;
}
inline ::proto::common::chat_common_role_info* gh_get_nearby_roles_reply::release_chat_role_info() {
  clear_has_chat_role_info();
  ::proto::common::chat_common_role_info* temp = chat_role_info_;
  chat_role_info_ = NULL;
  return temp;
}
inline void gh_get_nearby_roles_reply::set_allocated_chat_role_info(::proto::common::chat_common_role_info* chat_role_info) {
  delete chat_role_info_;
  chat_role_info_ = chat_role_info;
  if (chat_role_info) {
    set_has_chat_role_info();
  } else {
    clear_has_chat_role_info();
  }
}

// -------------------------------------------------------------------

// hg_task_seek_help_request

// optional uint32 task_id = 2;
inline bool hg_task_seek_help_request::has_task_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void hg_task_seek_help_request::set_has_task_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void hg_task_seek_help_request::clear_has_task_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void hg_task_seek_help_request::clear_task_id() {
  task_id_ = 0u;
  clear_has_task_id();
}
inline ::google::protobuf::uint32 hg_task_seek_help_request::task_id() const {
  return task_id_;
}
inline void hg_task_seek_help_request::set_task_id(::google::protobuf::uint32 value) {
  set_has_task_id();
  task_id_ = value;
}

// -------------------------------------------------------------------

// gh_task_seek_help_reply

// optional uint32 reply_code = 1;
inline bool gh_task_seek_help_reply::has_reply_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gh_task_seek_help_reply::set_has_reply_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gh_task_seek_help_reply::clear_has_reply_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gh_task_seek_help_reply::clear_reply_code() {
  reply_code_ = 0u;
  clear_has_reply_code();
}
inline ::google::protobuf::uint32 gh_task_seek_help_reply::reply_code() const {
  return reply_code_;
}
inline void gh_task_seek_help_reply::set_reply_code(::google::protobuf::uint32 value) {
  set_has_reply_code();
  reply_code_ = value;
}

// -------------------------------------------------------------------

// hf_syn_chat_info_notify

// required uint32 server_group_id = 1;
inline bool hf_syn_chat_info_notify::has_server_group_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void hf_syn_chat_info_notify::set_has_server_group_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void hf_syn_chat_info_notify::clear_has_server_group_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void hf_syn_chat_info_notify::clear_server_group_id() {
  server_group_id_ = 0u;
  clear_has_server_group_id();
}
inline ::google::protobuf::uint32 hf_syn_chat_info_notify::server_group_id() const {
  return server_group_id_;
}
inline void hf_syn_chat_info_notify::set_server_group_id(::google::protobuf::uint32 value) {
  set_has_server_group_id();
  server_group_id_ = value;
}

// optional string server_name = 2;
inline bool hf_syn_chat_info_notify::has_server_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void hf_syn_chat_info_notify::set_has_server_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void hf_syn_chat_info_notify::clear_has_server_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void hf_syn_chat_info_notify::clear_server_name() {
  if (server_name_ != &::google::protobuf::internal::kEmptyString) {
    server_name_->clear();
  }
  clear_has_server_name();
}
inline const ::std::string& hf_syn_chat_info_notify::server_name() const {
  return *server_name_;
}
inline void hf_syn_chat_info_notify::set_server_name(const ::std::string& value) {
  set_has_server_name();
  if (server_name_ == &::google::protobuf::internal::kEmptyString) {
    server_name_ = new ::std::string;
  }
  server_name_->assign(value);
}
inline void hf_syn_chat_info_notify::set_server_name(const char* value) {
  set_has_server_name();
  if (server_name_ == &::google::protobuf::internal::kEmptyString) {
    server_name_ = new ::std::string;
  }
  server_name_->assign(value);
}
inline void hf_syn_chat_info_notify::set_server_name(const char* value, size_t size) {
  set_has_server_name();
  if (server_name_ == &::google::protobuf::internal::kEmptyString) {
    server_name_ = new ::std::string;
  }
  server_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* hf_syn_chat_info_notify::mutable_server_name() {
  set_has_server_name();
  if (server_name_ == &::google::protobuf::internal::kEmptyString) {
    server_name_ = new ::std::string;
  }
  return server_name_;
}
inline ::std::string* hf_syn_chat_info_notify::release_server_name() {
  clear_has_server_name();
  if (server_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = server_name_;
    server_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void hf_syn_chat_info_notify::set_allocated_server_name(::std::string* server_name) {
  if (server_name_ != &::google::protobuf::internal::kEmptyString) {
    delete server_name_;
  }
  if (server_name) {
    set_has_server_name();
    server_name_ = server_name;
  } else {
    clear_has_server_name();
    server_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// fh_syn_transfer_info_notify

// required uint32 server_id = 1;
inline bool fh_syn_transfer_info_notify::has_server_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void fh_syn_transfer_info_notify::set_has_server_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void fh_syn_transfer_info_notify::clear_has_server_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void fh_syn_transfer_info_notify::clear_server_id() {
  server_id_ = 0u;
  clear_has_server_id();
}
inline ::google::protobuf::uint32 fh_syn_transfer_info_notify::server_id() const {
  return server_id_;
}
inline void fh_syn_transfer_info_notify::set_server_id(::google::protobuf::uint32 value) {
  set_has_server_id();
  server_id_ = value;
}

// -------------------------------------------------------------------

// gh_gm_cmd_notify

// repeated string cmds = 1;
inline int gh_gm_cmd_notify::cmds_size() const {
  return cmds_.size();
}
inline void gh_gm_cmd_notify::clear_cmds() {
  cmds_.Clear();
}
inline const ::std::string& gh_gm_cmd_notify::cmds(int index) const {
  return cmds_.Get(index);
}
inline ::std::string* gh_gm_cmd_notify::mutable_cmds(int index) {
  return cmds_.Mutable(index);
}
inline void gh_gm_cmd_notify::set_cmds(int index, const ::std::string& value) {
  cmds_.Mutable(index)->assign(value);
}
inline void gh_gm_cmd_notify::set_cmds(int index, const char* value) {
  cmds_.Mutable(index)->assign(value);
}
inline void gh_gm_cmd_notify::set_cmds(int index, const char* value, size_t size) {
  cmds_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* gh_gm_cmd_notify::add_cmds() {
  return cmds_.Add();
}
inline void gh_gm_cmd_notify::add_cmds(const ::std::string& value) {
  cmds_.Add()->assign(value);
}
inline void gh_gm_cmd_notify::add_cmds(const char* value) {
  cmds_.Add()->assign(value);
}
inline void gh_gm_cmd_notify::add_cmds(const char* value, size_t size) {
  cmds_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
gh_gm_cmd_notify::cmds() const {
  return cmds_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
gh_gm_cmd_notify::mutable_cmds() {
  return &cmds_;
}

// -------------------------------------------------------------------

// hf_gm_cmd_notify

// repeated string cmds = 1;
inline int hf_gm_cmd_notify::cmds_size() const {
  return cmds_.size();
}
inline void hf_gm_cmd_notify::clear_cmds() {
  cmds_.Clear();
}
inline const ::std::string& hf_gm_cmd_notify::cmds(int index) const {
  return cmds_.Get(index);
}
inline ::std::string* hf_gm_cmd_notify::mutable_cmds(int index) {
  return cmds_.Mutable(index);
}
inline void hf_gm_cmd_notify::set_cmds(int index, const ::std::string& value) {
  cmds_.Mutable(index)->assign(value);
}
inline void hf_gm_cmd_notify::set_cmds(int index, const char* value) {
  cmds_.Mutable(index)->assign(value);
}
inline void hf_gm_cmd_notify::set_cmds(int index, const char* value, size_t size) {
  cmds_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* hf_gm_cmd_notify::add_cmds() {
  return cmds_.Add();
}
inline void hf_gm_cmd_notify::add_cmds(const ::std::string& value) {
  cmds_.Add()->assign(value);
}
inline void hf_gm_cmd_notify::add_cmds(const char* value) {
  cmds_.Add()->assign(value);
}
inline void hf_gm_cmd_notify::add_cmds(const char* value, size_t size) {
  cmds_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
hf_gm_cmd_notify::cmds() const {
  return cmds_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
hf_gm_cmd_notify::mutable_cmds() {
  return &cmds_;
}

// -------------------------------------------------------------------

// fh_test_reply

// required uint32 server_id = 1;
inline bool fh_test_reply::has_server_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void fh_test_reply::set_has_server_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void fh_test_reply::clear_has_server_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void fh_test_reply::clear_server_id() {
  server_id_ = 0u;
  clear_has_server_id();
}
inline ::google::protobuf::uint32 fh_test_reply::server_id() const {
  return server_id_;
}
inline void fh_test_reply::set_server_id(::google::protobuf::uint32 value) {
  set_has_server_id();
  server_id_ = value;
}

// -------------------------------------------------------------------

// hg_syn_online_role_list_request

// -------------------------------------------------------------------

// gh_syn_online_role_list_notify

// optional uint32 server_id = 1;
inline bool gh_syn_online_role_list_notify::has_server_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gh_syn_online_role_list_notify::set_has_server_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gh_syn_online_role_list_notify::clear_has_server_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gh_syn_online_role_list_notify::clear_server_id() {
  server_id_ = 0u;
  clear_has_server_id();
}
inline ::google::protobuf::uint32 gh_syn_online_role_list_notify::server_id() const {
  return server_id_;
}
inline void gh_syn_online_role_list_notify::set_server_id(::google::protobuf::uint32 value) {
  set_has_server_id();
  server_id_ = value;
}

// repeated .proto.common.chat_syn_user_info user_list = 2;
inline int gh_syn_online_role_list_notify::user_list_size() const {
  return user_list_.size();
}
inline void gh_syn_online_role_list_notify::clear_user_list() {
  user_list_.Clear();
}
inline const ::proto::common::chat_syn_user_info& gh_syn_online_role_list_notify::user_list(int index) const {
  return user_list_.Get(index);
}
inline ::proto::common::chat_syn_user_info* gh_syn_online_role_list_notify::mutable_user_list(int index) {
  return user_list_.Mutable(index);
}
inline ::proto::common::chat_syn_user_info* gh_syn_online_role_list_notify::add_user_list() {
  return user_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::common::chat_syn_user_info >&
gh_syn_online_role_list_notify::user_list() const {
  return user_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto::common::chat_syn_user_info >*
gh_syn_online_role_list_notify::mutable_user_list() {
  return &user_list_;
}

// -------------------------------------------------------------------

// eh_country_member_change_notify

// optional uint32 country_id = 1;
inline bool eh_country_member_change_notify::has_country_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void eh_country_member_change_notify::set_has_country_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void eh_country_member_change_notify::clear_has_country_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void eh_country_member_change_notify::clear_country_id() {
  country_id_ = 0u;
  clear_has_country_id();
}
inline ::google::protobuf::uint32 eh_country_member_change_notify::country_id() const {
  return country_id_;
}
inline void eh_country_member_change_notify::set_country_id(::google::protobuf::uint32 value) {
  set_has_country_id();
  country_id_ = value;
}

// optional uint32 change_type = 2;
inline bool eh_country_member_change_notify::has_change_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void eh_country_member_change_notify::set_has_change_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void eh_country_member_change_notify::clear_has_change_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void eh_country_member_change_notify::clear_change_type() {
  change_type_ = 0u;
  clear_has_change_type();
}
inline ::google::protobuf::uint32 eh_country_member_change_notify::change_type() const {
  return change_type_;
}
inline void eh_country_member_change_notify::set_change_type(::google::protobuf::uint32 value) {
  set_has_change_type();
  change_type_ = value;
}

// optional uint64 role_uid = 3;
inline bool eh_country_member_change_notify::has_role_uid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void eh_country_member_change_notify::set_has_role_uid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void eh_country_member_change_notify::clear_has_role_uid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void eh_country_member_change_notify::clear_role_uid() {
  role_uid_ = GOOGLE_ULONGLONG(0);
  clear_has_role_uid();
}
inline ::google::protobuf::uint64 eh_country_member_change_notify::role_uid() const {
  return role_uid_;
}
inline void eh_country_member_change_notify::set_role_uid(::google::protobuf::uint64 value) {
  set_has_role_uid();
  role_uid_ = value;
}

// -------------------------------------------------------------------

// eh_family_member_change_notify

// optional uint64 family_id = 1;
inline bool eh_family_member_change_notify::has_family_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void eh_family_member_change_notify::set_has_family_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void eh_family_member_change_notify::clear_has_family_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void eh_family_member_change_notify::clear_family_id() {
  family_id_ = GOOGLE_ULONGLONG(0);
  clear_has_family_id();
}
inline ::google::protobuf::uint64 eh_family_member_change_notify::family_id() const {
  return family_id_;
}
inline void eh_family_member_change_notify::set_family_id(::google::protobuf::uint64 value) {
  set_has_family_id();
  family_id_ = value;
}

// optional uint32 change_type = 2;
inline bool eh_family_member_change_notify::has_change_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void eh_family_member_change_notify::set_has_change_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void eh_family_member_change_notify::clear_has_change_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void eh_family_member_change_notify::clear_change_type() {
  change_type_ = 0u;
  clear_has_change_type();
}
inline ::google::protobuf::uint32 eh_family_member_change_notify::change_type() const {
  return change_type_;
}
inline void eh_family_member_change_notify::set_change_type(::google::protobuf::uint32 value) {
  set_has_change_type();
  change_type_ = value;
}

// optional uint64 role_uid = 3;
inline bool eh_family_member_change_notify::has_role_uid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void eh_family_member_change_notify::set_has_role_uid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void eh_family_member_change_notify::clear_has_role_uid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void eh_family_member_change_notify::clear_role_uid() {
  role_uid_ = GOOGLE_ULONGLONG(0);
  clear_has_role_uid();
}
inline ::google::protobuf::uint64 eh_family_member_change_notify::role_uid() const {
  return role_uid_;
}
inline void eh_family_member_change_notify::set_role_uid(::google::protobuf::uint64 value) {
  set_has_role_uid();
  role_uid_ = value;
}

// -------------------------------------------------------------------

// hf_get_server_channel_list_request

// -------------------------------------------------------------------

// fh_get_server_channel_list_reply

// optional uint32 reply_code = 1;
inline bool fh_get_server_channel_list_reply::has_reply_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void fh_get_server_channel_list_reply::set_has_reply_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void fh_get_server_channel_list_reply::clear_has_reply_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void fh_get_server_channel_list_reply::clear_reply_code() {
  reply_code_ = 0u;
  clear_has_reply_code();
}
inline ::google::protobuf::uint32 fh_get_server_channel_list_reply::reply_code() const {
  return reply_code_;
}
inline void fh_get_server_channel_list_reply::set_reply_code(::google::protobuf::uint32 value) {
  set_has_reply_code();
  reply_code_ = value;
}

// optional .proto.common.server_channel_data server_channel_data = 2;
inline bool fh_get_server_channel_list_reply::has_server_channel_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void fh_get_server_channel_list_reply::set_has_server_channel_data() {
  _has_bits_[0] |= 0x00000002u;
}
inline void fh_get_server_channel_list_reply::clear_has_server_channel_data() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void fh_get_server_channel_list_reply::clear_server_channel_data() {
  if (server_channel_data_ != NULL) server_channel_data_->::proto::common::server_channel_data::Clear();
  clear_has_server_channel_data();
}
inline const ::proto::common::server_channel_data& fh_get_server_channel_list_reply::server_channel_data() const {
  return server_channel_data_ != NULL ? *server_channel_data_ : *default_instance_->server_channel_data_;
}
inline ::proto::common::server_channel_data* fh_get_server_channel_list_reply::mutable_server_channel_data() {
  set_has_server_channel_data();
  if (server_channel_data_ == NULL) server_channel_data_ = new ::proto::common::server_channel_data;
  return server_channel_data_;
}
inline ::proto::common::server_channel_data* fh_get_server_channel_list_reply::release_server_channel_data() {
  clear_has_server_channel_data();
  ::proto::common::server_channel_data* temp = server_channel_data_;
  server_channel_data_ = NULL;
  return temp;
}
inline void fh_get_server_channel_list_reply::set_allocated_server_channel_data(::proto::common::server_channel_data* server_channel_data) {
  delete server_channel_data_;
  server_channel_data_ = server_channel_data;
  if (server_channel_data) {
    set_has_server_channel_data();
  } else {
    clear_has_server_channel_data();
  }
}

// -------------------------------------------------------------------

// hf_change_server_channel_request

// optional uint32 dst_channel_id = 1;
inline bool hf_change_server_channel_request::has_dst_channel_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void hf_change_server_channel_request::set_has_dst_channel_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void hf_change_server_channel_request::clear_has_dst_channel_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void hf_change_server_channel_request::clear_dst_channel_id() {
  dst_channel_id_ = 0u;
  clear_has_dst_channel_id();
}
inline ::google::protobuf::uint32 hf_change_server_channel_request::dst_channel_id() const {
  return dst_channel_id_;
}
inline void hf_change_server_channel_request::set_dst_channel_id(::google::protobuf::uint32 value) {
  set_has_dst_channel_id();
  dst_channel_id_ = value;
}

// optional string user_name = 2;
inline bool hf_change_server_channel_request::has_user_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void hf_change_server_channel_request::set_has_user_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void hf_change_server_channel_request::clear_has_user_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void hf_change_server_channel_request::clear_user_name() {
  if (user_name_ != &::google::protobuf::internal::kEmptyString) {
    user_name_->clear();
  }
  clear_has_user_name();
}
inline const ::std::string& hf_change_server_channel_request::user_name() const {
  return *user_name_;
}
inline void hf_change_server_channel_request::set_user_name(const ::std::string& value) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(value);
}
inline void hf_change_server_channel_request::set_user_name(const char* value) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(value);
}
inline void hf_change_server_channel_request::set_user_name(const char* value, size_t size) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* hf_change_server_channel_request::mutable_user_name() {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  return user_name_;
}
inline ::std::string* hf_change_server_channel_request::release_user_name() {
  clear_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = user_name_;
    user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void hf_change_server_channel_request::set_allocated_user_name(::std::string* user_name) {
  if (user_name_ != &::google::protobuf::internal::kEmptyString) {
    delete user_name_;
  }
  if (user_name) {
    set_has_user_name();
    user_name_ = user_name;
  } else {
    clear_has_user_name();
    user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 type = 3;
inline bool hf_change_server_channel_request::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void hf_change_server_channel_request::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void hf_change_server_channel_request::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void hf_change_server_channel_request::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 hf_change_server_channel_request::type() const {
  return type_;
}
inline void hf_change_server_channel_request::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
}

// -------------------------------------------------------------------

// fh_change_server_channel_reply

// optional uint32 reply_code = 1;
inline bool fh_change_server_channel_reply::has_reply_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void fh_change_server_channel_reply::set_has_reply_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void fh_change_server_channel_reply::clear_has_reply_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void fh_change_server_channel_reply::clear_reply_code() {
  reply_code_ = 0u;
  clear_has_reply_code();
}
inline ::google::protobuf::uint32 fh_change_server_channel_reply::reply_code() const {
  return reply_code_;
}
inline void fh_change_server_channel_reply::set_reply_code(::google::protobuf::uint32 value) {
  set_has_reply_code();
  reply_code_ = value;
}

// optional uint32 channel_id = 2;
inline bool fh_change_server_channel_reply::has_channel_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void fh_change_server_channel_reply::set_has_channel_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void fh_change_server_channel_reply::clear_has_channel_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void fh_change_server_channel_reply::clear_channel_id() {
  channel_id_ = 0u;
  clear_has_channel_id();
}
inline ::google::protobuf::uint32 fh_change_server_channel_reply::channel_id() const {
  return channel_id_;
}
inline void fh_change_server_channel_reply::set_channel_id(::google::protobuf::uint32 value) {
  set_has_channel_id();
  channel_id_ = value;
}

// -------------------------------------------------------------------

// fh_change_server_channel_notify

// required .proto.common.fh_channel_role_list role_list = 1;
inline bool fh_change_server_channel_notify::has_role_list() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void fh_change_server_channel_notify::set_has_role_list() {
  _has_bits_[0] |= 0x00000001u;
}
inline void fh_change_server_channel_notify::clear_has_role_list() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void fh_change_server_channel_notify::clear_role_list() {
  if (role_list_ != NULL) role_list_->::proto::common::fh_channel_role_list::Clear();
  clear_has_role_list();
}
inline const ::proto::common::fh_channel_role_list& fh_change_server_channel_notify::role_list() const {
  return role_list_ != NULL ? *role_list_ : *default_instance_->role_list_;
}
inline ::proto::common::fh_channel_role_list* fh_change_server_channel_notify::mutable_role_list() {
  set_has_role_list();
  if (role_list_ == NULL) role_list_ = new ::proto::common::fh_channel_role_list;
  return role_list_;
}
inline ::proto::common::fh_channel_role_list* fh_change_server_channel_notify::release_role_list() {
  clear_has_role_list();
  ::proto::common::fh_channel_role_list* temp = role_list_;
  role_list_ = NULL;
  return temp;
}
inline void fh_change_server_channel_notify::set_allocated_role_list(::proto::common::fh_channel_role_list* role_list) {
  delete role_list_;
  role_list_ = role_list;
  if (role_list) {
    set_has_role_list();
  } else {
    clear_has_role_list();
  }
}

// required .proto.client.hc_change_server_channel_notify hc_msg = 2;
inline bool fh_change_server_channel_notify::has_hc_msg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void fh_change_server_channel_notify::set_has_hc_msg() {
  _has_bits_[0] |= 0x00000002u;
}
inline void fh_change_server_channel_notify::clear_has_hc_msg() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void fh_change_server_channel_notify::clear_hc_msg() {
  if (hc_msg_ != NULL) hc_msg_->::proto::client::hc_change_server_channel_notify::Clear();
  clear_has_hc_msg();
}
inline const ::proto::client::hc_change_server_channel_notify& fh_change_server_channel_notify::hc_msg() const {
  return hc_msg_ != NULL ? *hc_msg_ : *default_instance_->hc_msg_;
}
inline ::proto::client::hc_change_server_channel_notify* fh_change_server_channel_notify::mutable_hc_msg() {
  set_has_hc_msg();
  if (hc_msg_ == NULL) hc_msg_ = new ::proto::client::hc_change_server_channel_notify;
  return hc_msg_;
}
inline ::proto::client::hc_change_server_channel_notify* fh_change_server_channel_notify::release_hc_msg() {
  clear_has_hc_msg();
  ::proto::client::hc_change_server_channel_notify* temp = hc_msg_;
  hc_msg_ = NULL;
  return temp;
}
inline void fh_change_server_channel_notify::set_allocated_hc_msg(::proto::client::hc_change_server_channel_notify* hc_msg) {
  delete hc_msg_;
  hc_msg_ = hc_msg;
  if (hc_msg) {
    set_has_hc_msg();
  } else {
    clear_has_hc_msg();
  }
}

// -------------------------------------------------------------------

// ha_change_server_channel_notify

// required .proto.server.fh_change_server_channel_notify fh_msg = 1;
inline bool ha_change_server_channel_notify::has_fh_msg() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ha_change_server_channel_notify::set_has_fh_msg() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ha_change_server_channel_notify::clear_has_fh_msg() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ha_change_server_channel_notify::clear_fh_msg() {
  if (fh_msg_ != NULL) fh_msg_->::proto::server::fh_change_server_channel_notify::Clear();
  clear_has_fh_msg();
}
inline const ::proto::server::fh_change_server_channel_notify& ha_change_server_channel_notify::fh_msg() const {
  return fh_msg_ != NULL ? *fh_msg_ : *default_instance_->fh_msg_;
}
inline ::proto::server::fh_change_server_channel_notify* ha_change_server_channel_notify::mutable_fh_msg() {
  set_has_fh_msg();
  if (fh_msg_ == NULL) fh_msg_ = new ::proto::server::fh_change_server_channel_notify;
  return fh_msg_;
}
inline ::proto::server::fh_change_server_channel_notify* ha_change_server_channel_notify::release_fh_msg() {
  clear_has_fh_msg();
  ::proto::server::fh_change_server_channel_notify* temp = fh_msg_;
  fh_msg_ = NULL;
  return temp;
}
inline void ha_change_server_channel_notify::set_allocated_fh_msg(::proto::server::fh_change_server_channel_notify* fh_msg) {
  delete fh_msg_;
  fh_msg_ = fh_msg;
  if (fh_msg) {
    set_has_fh_msg();
  } else {
    clear_has_fh_msg();
  }
}

// -------------------------------------------------------------------

// hf_server_channel_chat_request

// optional string chat_info = 1;
inline bool hf_server_channel_chat_request::has_chat_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void hf_server_channel_chat_request::set_has_chat_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void hf_server_channel_chat_request::clear_has_chat_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void hf_server_channel_chat_request::clear_chat_info() {
  if (chat_info_ != &::google::protobuf::internal::kEmptyString) {
    chat_info_->clear();
  }
  clear_has_chat_info();
}
inline const ::std::string& hf_server_channel_chat_request::chat_info() const {
  return *chat_info_;
}
inline void hf_server_channel_chat_request::set_chat_info(const ::std::string& value) {
  set_has_chat_info();
  if (chat_info_ == &::google::protobuf::internal::kEmptyString) {
    chat_info_ = new ::std::string;
  }
  chat_info_->assign(value);
}
inline void hf_server_channel_chat_request::set_chat_info(const char* value) {
  set_has_chat_info();
  if (chat_info_ == &::google::protobuf::internal::kEmptyString) {
    chat_info_ = new ::std::string;
  }
  chat_info_->assign(value);
}
inline void hf_server_channel_chat_request::set_chat_info(const char* value, size_t size) {
  set_has_chat_info();
  if (chat_info_ == &::google::protobuf::internal::kEmptyString) {
    chat_info_ = new ::std::string;
  }
  chat_info_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* hf_server_channel_chat_request::mutable_chat_info() {
  set_has_chat_info();
  if (chat_info_ == &::google::protobuf::internal::kEmptyString) {
    chat_info_ = new ::std::string;
  }
  return chat_info_;
}
inline ::std::string* hf_server_channel_chat_request::release_chat_info() {
  clear_has_chat_info();
  if (chat_info_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = chat_info_;
    chat_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void hf_server_channel_chat_request::set_allocated_chat_info(::std::string* chat_info) {
  if (chat_info_ != &::google::protobuf::internal::kEmptyString) {
    delete chat_info_;
  }
  if (chat_info) {
    set_has_chat_info();
    chat_info_ = chat_info;
  } else {
    clear_has_chat_info();
    chat_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// fh_server_channel_chat_reply

// optional uint32 reply_code = 1;
inline bool fh_server_channel_chat_reply::has_reply_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void fh_server_channel_chat_reply::set_has_reply_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void fh_server_channel_chat_reply::clear_has_reply_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void fh_server_channel_chat_reply::clear_reply_code() {
  reply_code_ = 0u;
  clear_has_reply_code();
}
inline ::google::protobuf::uint32 fh_server_channel_chat_reply::reply_code() const {
  return reply_code_;
}
inline void fh_server_channel_chat_reply::set_reply_code(::google::protobuf::uint32 value) {
  set_has_reply_code();
  reply_code_ = value;
}

// -------------------------------------------------------------------

// fh_server_channel_chat_notify

// required .proto.common.fh_channel_role_list role_list = 1;
inline bool fh_server_channel_chat_notify::has_role_list() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void fh_server_channel_chat_notify::set_has_role_list() {
  _has_bits_[0] |= 0x00000001u;
}
inline void fh_server_channel_chat_notify::clear_has_role_list() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void fh_server_channel_chat_notify::clear_role_list() {
  if (role_list_ != NULL) role_list_->::proto::common::fh_channel_role_list::Clear();
  clear_has_role_list();
}
inline const ::proto::common::fh_channel_role_list& fh_server_channel_chat_notify::role_list() const {
  return role_list_ != NULL ? *role_list_ : *default_instance_->role_list_;
}
inline ::proto::common::fh_channel_role_list* fh_server_channel_chat_notify::mutable_role_list() {
  set_has_role_list();
  if (role_list_ == NULL) role_list_ = new ::proto::common::fh_channel_role_list;
  return role_list_;
}
inline ::proto::common::fh_channel_role_list* fh_server_channel_chat_notify::release_role_list() {
  clear_has_role_list();
  ::proto::common::fh_channel_role_list* temp = role_list_;
  role_list_ = NULL;
  return temp;
}
inline void fh_server_channel_chat_notify::set_allocated_role_list(::proto::common::fh_channel_role_list* role_list) {
  delete role_list_;
  role_list_ = role_list;
  if (role_list) {
    set_has_role_list();
  } else {
    clear_has_role_list();
  }
}

// required .proto.client.hc_server_channel_chat_notify hc_msg = 2;
inline bool fh_server_channel_chat_notify::has_hc_msg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void fh_server_channel_chat_notify::set_has_hc_msg() {
  _has_bits_[0] |= 0x00000002u;
}
inline void fh_server_channel_chat_notify::clear_has_hc_msg() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void fh_server_channel_chat_notify::clear_hc_msg() {
  if (hc_msg_ != NULL) hc_msg_->::proto::client::hc_server_channel_chat_notify::Clear();
  clear_has_hc_msg();
}
inline const ::proto::client::hc_server_channel_chat_notify& fh_server_channel_chat_notify::hc_msg() const {
  return hc_msg_ != NULL ? *hc_msg_ : *default_instance_->hc_msg_;
}
inline ::proto::client::hc_server_channel_chat_notify* fh_server_channel_chat_notify::mutable_hc_msg() {
  set_has_hc_msg();
  if (hc_msg_ == NULL) hc_msg_ = new ::proto::client::hc_server_channel_chat_notify;
  return hc_msg_;
}
inline ::proto::client::hc_server_channel_chat_notify* fh_server_channel_chat_notify::release_hc_msg() {
  clear_has_hc_msg();
  ::proto::client::hc_server_channel_chat_notify* temp = hc_msg_;
  hc_msg_ = NULL;
  return temp;
}
inline void fh_server_channel_chat_notify::set_allocated_hc_msg(::proto::client::hc_server_channel_chat_notify* hc_msg) {
  delete hc_msg_;
  hc_msg_ = hc_msg;
  if (hc_msg) {
    set_has_hc_msg();
  } else {
    clear_has_hc_msg();
  }
}

// -------------------------------------------------------------------

// ha_server_channel_chat_notify

// required .proto.server.fh_server_channel_chat_notify fh_msg = 1;
inline bool ha_server_channel_chat_notify::has_fh_msg() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ha_server_channel_chat_notify::set_has_fh_msg() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ha_server_channel_chat_notify::clear_has_fh_msg() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ha_server_channel_chat_notify::clear_fh_msg() {
  if (fh_msg_ != NULL) fh_msg_->::proto::server::fh_server_channel_chat_notify::Clear();
  clear_has_fh_msg();
}
inline const ::proto::server::fh_server_channel_chat_notify& ha_server_channel_chat_notify::fh_msg() const {
  return fh_msg_ != NULL ? *fh_msg_ : *default_instance_->fh_msg_;
}
inline ::proto::server::fh_server_channel_chat_notify* ha_server_channel_chat_notify::mutable_fh_msg() {
  set_has_fh_msg();
  if (fh_msg_ == NULL) fh_msg_ = new ::proto::server::fh_server_channel_chat_notify;
  return fh_msg_;
}
inline ::proto::server::fh_server_channel_chat_notify* ha_server_channel_chat_notify::release_fh_msg() {
  clear_has_fh_msg();
  ::proto::server::fh_server_channel_chat_notify* temp = fh_msg_;
  fh_msg_ = NULL;
  return temp;
}
inline void ha_server_channel_chat_notify::set_allocated_fh_msg(::proto::server::fh_server_channel_chat_notify* fh_msg) {
  delete fh_msg_;
  fh_msg_ = fh_msg;
  if (fh_msg) {
    set_has_fh_msg();
  } else {
    clear_has_fh_msg();
  }
}

// -------------------------------------------------------------------

// hf_personal_chat_request

// -------------------------------------------------------------------

// fh_personal_chat_notify

// -------------------------------------------------------------------

// ha_personal_chat_notify

// -------------------------------------------------------------------

// he_family_chat_notify

// optional uint64 src_uid = 1;
inline bool he_family_chat_notify::has_src_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void he_family_chat_notify::set_has_src_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void he_family_chat_notify::clear_has_src_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void he_family_chat_notify::clear_src_uid() {
  src_uid_ = GOOGLE_ULONGLONG(0);
  clear_has_src_uid();
}
inline ::google::protobuf::uint64 he_family_chat_notify::src_uid() const {
  return src_uid_;
}
inline void he_family_chat_notify::set_src_uid(::google::protobuf::uint64 value) {
  set_has_src_uid();
  src_uid_ = value;
}

// optional uint64 family_uid = 2;
inline bool he_family_chat_notify::has_family_uid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void he_family_chat_notify::set_has_family_uid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void he_family_chat_notify::clear_has_family_uid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void he_family_chat_notify::clear_family_uid() {
  family_uid_ = GOOGLE_ULONGLONG(0);
  clear_has_family_uid();
}
inline ::google::protobuf::uint64 he_family_chat_notify::family_uid() const {
  return family_uid_;
}
inline void he_family_chat_notify::set_family_uid(::google::protobuf::uint64 value) {
  set_has_family_uid();
  family_uid_ = value;
}

// -------------------------------------------------------------------

// he_personal_chat_notify

// optional uint64 src_uid = 1;
inline bool he_personal_chat_notify::has_src_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void he_personal_chat_notify::set_has_src_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void he_personal_chat_notify::clear_has_src_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void he_personal_chat_notify::clear_src_uid() {
  src_uid_ = GOOGLE_ULONGLONG(0);
  clear_has_src_uid();
}
inline ::google::protobuf::uint64 he_personal_chat_notify::src_uid() const {
  return src_uid_;
}
inline void he_personal_chat_notify::set_src_uid(::google::protobuf::uint64 value) {
  set_has_src_uid();
  src_uid_ = value;
}

// optional uint64 tar_uid = 2;
inline bool he_personal_chat_notify::has_tar_uid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void he_personal_chat_notify::set_has_tar_uid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void he_personal_chat_notify::clear_has_tar_uid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void he_personal_chat_notify::clear_tar_uid() {
  tar_uid_ = GOOGLE_ULONGLONG(0);
  clear_has_tar_uid();
}
inline ::google::protobuf::uint64 he_personal_chat_notify::tar_uid() const {
  return tar_uid_;
}
inline void he_personal_chat_notify::set_tar_uid(::google::protobuf::uint64 value) {
  set_has_tar_uid();
  tar_uid_ = value;
}

// -------------------------------------------------------------------

// eh_kick_all_user_notify

// optional uint32 reason = 1;
inline bool eh_kick_all_user_notify::has_reason() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void eh_kick_all_user_notify::set_has_reason() {
  _has_bits_[0] |= 0x00000001u;
}
inline void eh_kick_all_user_notify::clear_has_reason() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void eh_kick_all_user_notify::clear_reason() {
  reason_ = 0u;
  clear_has_reason();
}
inline ::google::protobuf::uint32 eh_kick_all_user_notify::reason() const {
  return reason_;
}
inline void eh_kick_all_user_notify::set_reason(::google::protobuf::uint32 value) {
  set_has_reason();
  reason_ = value;
}

// -------------------------------------------------------------------

// dn_create_role_request

// optional uint64 account_id = 1;
inline bool dn_create_role_request::has_account_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void dn_create_role_request::set_has_account_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void dn_create_role_request::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void dn_create_role_request::clear_account_id() {
  account_id_ = GOOGLE_ULONGLONG(0);
  clear_has_account_id();
}
inline ::google::protobuf::uint64 dn_create_role_request::account_id() const {
  return account_id_;
}
inline void dn_create_role_request::set_account_id(::google::protobuf::uint64 value) {
  set_has_account_id();
  account_id_ = value;
}

// optional uint32 server_id = 2;
inline bool dn_create_role_request::has_server_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void dn_create_role_request::set_has_server_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void dn_create_role_request::clear_has_server_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void dn_create_role_request::clear_server_id() {
  server_id_ = 0u;
  clear_has_server_id();
}
inline ::google::protobuf::uint32 dn_create_role_request::server_id() const {
  return server_id_;
}
inline void dn_create_role_request::set_server_id(::google::protobuf::uint32 value) {
  set_has_server_id();
  server_id_ = value;
}

// optional uint32 gate_id = 3;
inline bool dn_create_role_request::has_gate_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void dn_create_role_request::set_has_gate_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void dn_create_role_request::clear_has_gate_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void dn_create_role_request::clear_gate_id() {
  gate_id_ = 0u;
  clear_has_gate_id();
}
inline ::google::protobuf::uint32 dn_create_role_request::gate_id() const {
  return gate_id_;
}
inline void dn_create_role_request::set_gate_id(::google::protobuf::uint32 value) {
  set_has_gate_id();
  gate_id_ = value;
}

// optional .proto.common.account_role_data role_data = 4;
inline bool dn_create_role_request::has_role_data() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void dn_create_role_request::set_has_role_data() {
  _has_bits_[0] |= 0x00000008u;
}
inline void dn_create_role_request::clear_has_role_data() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void dn_create_role_request::clear_role_data() {
  if (role_data_ != NULL) role_data_->::proto::common::account_role_data::Clear();
  clear_has_role_data();
}
inline const ::proto::common::account_role_data& dn_create_role_request::role_data() const {
  return role_data_ != NULL ? *role_data_ : *default_instance_->role_data_;
}
inline ::proto::common::account_role_data* dn_create_role_request::mutable_role_data() {
  set_has_role_data();
  if (role_data_ == NULL) role_data_ = new ::proto::common::account_role_data;
  return role_data_;
}
inline ::proto::common::account_role_data* dn_create_role_request::release_role_data() {
  clear_has_role_data();
  ::proto::common::account_role_data* temp = role_data_;
  role_data_ = NULL;
  return temp;
}
inline void dn_create_role_request::set_allocated_role_data(::proto::common::account_role_data* role_data) {
  delete role_data_;
  role_data_ = role_data;
  if (role_data) {
    set_has_role_data();
  } else {
    clear_has_role_data();
  }
}

// -------------------------------------------------------------------

// nd_create_role_reply

// optional uint32 reply_code = 1;
inline bool nd_create_role_reply::has_reply_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void nd_create_role_reply::set_has_reply_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void nd_create_role_reply::clear_has_reply_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void nd_create_role_reply::clear_reply_code() {
  reply_code_ = 0u;
  clear_has_reply_code();
}
inline ::google::protobuf::uint32 nd_create_role_reply::reply_code() const {
  return reply_code_;
}
inline void nd_create_role_reply::set_reply_code(::google::protobuf::uint32 value) {
  set_has_reply_code();
  reply_code_ = value;
}

// optional uint32 gate_id = 2;
inline bool nd_create_role_reply::has_gate_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void nd_create_role_reply::set_has_gate_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void nd_create_role_reply::clear_has_gate_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void nd_create_role_reply::clear_gate_id() {
  gate_id_ = 0u;
  clear_has_gate_id();
}
inline ::google::protobuf::uint32 nd_create_role_reply::gate_id() const {
  return gate_id_;
}
inline void nd_create_role_reply::set_gate_id(::google::protobuf::uint32 value) {
  set_has_gate_id();
  gate_id_ = value;
}

// optional .proto.common.account_role_data role_data = 3;
inline bool nd_create_role_reply::has_role_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void nd_create_role_reply::set_has_role_data() {
  _has_bits_[0] |= 0x00000004u;
}
inline void nd_create_role_reply::clear_has_role_data() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void nd_create_role_reply::clear_role_data() {
  if (role_data_ != NULL) role_data_->::proto::common::account_role_data::Clear();
  clear_has_role_data();
}
inline const ::proto::common::account_role_data& nd_create_role_reply::role_data() const {
  return role_data_ != NULL ? *role_data_ : *default_instance_->role_data_;
}
inline ::proto::common::account_role_data* nd_create_role_reply::mutable_role_data() {
  set_has_role_data();
  if (role_data_ == NULL) role_data_ = new ::proto::common::account_role_data;
  return role_data_;
}
inline ::proto::common::account_role_data* nd_create_role_reply::release_role_data() {
  clear_has_role_data();
  ::proto::common::account_role_data* temp = role_data_;
  role_data_ = NULL;
  return temp;
}
inline void nd_create_role_reply::set_allocated_role_data(::proto::common::account_role_data* role_data) {
  delete role_data_;
  role_data_ = role_data;
  if (role_data) {
    set_has_role_data();
  } else {
    clear_has_role_data();
  }
}

// optional uint64 time = 4;
inline bool nd_create_role_reply::has_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void nd_create_role_reply::set_has_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void nd_create_role_reply::clear_has_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void nd_create_role_reply::clear_time() {
  time_ = GOOGLE_ULONGLONG(0);
  clear_has_time();
}
inline ::google::protobuf::uint64 nd_create_role_reply::time() const {
  return time_;
}
inline void nd_create_role_reply::set_time(::google::protobuf::uint64 value) {
  set_has_time();
  time_ = value;
}

// -------------------------------------------------------------------

// dn_role_data_update_notify

// optional .proto.common.account_role_data role_data = 1;
inline bool dn_role_data_update_notify::has_role_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void dn_role_data_update_notify::set_has_role_data() {
  _has_bits_[0] |= 0x00000001u;
}
inline void dn_role_data_update_notify::clear_has_role_data() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void dn_role_data_update_notify::clear_role_data() {
  if (role_data_ != NULL) role_data_->::proto::common::account_role_data::Clear();
  clear_has_role_data();
}
inline const ::proto::common::account_role_data& dn_role_data_update_notify::role_data() const {
  return role_data_ != NULL ? *role_data_ : *default_instance_->role_data_;
}
inline ::proto::common::account_role_data* dn_role_data_update_notify::mutable_role_data() {
  set_has_role_data();
  if (role_data_ == NULL) role_data_ = new ::proto::common::account_role_data;
  return role_data_;
}
inline ::proto::common::account_role_data* dn_role_data_update_notify::release_role_data() {
  clear_has_role_data();
  ::proto::common::account_role_data* temp = role_data_;
  role_data_ = NULL;
  return temp;
}
inline void dn_role_data_update_notify::set_allocated_role_data(::proto::common::account_role_data* role_data) {
  delete role_data_;
  role_data_ = role_data;
  if (role_data) {
    set_has_role_data();
  } else {
    clear_has_role_data();
  }
}

// -------------------------------------------------------------------

// hg_user_channel_notify

// optional uint64 user_uid = 1;
inline bool hg_user_channel_notify::has_user_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void hg_user_channel_notify::set_has_user_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void hg_user_channel_notify::clear_has_user_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void hg_user_channel_notify::clear_user_uid() {
  user_uid_ = GOOGLE_ULONGLONG(0);
  clear_has_user_uid();
}
inline ::google::protobuf::uint64 hg_user_channel_notify::user_uid() const {
  return user_uid_;
}
inline void hg_user_channel_notify::set_user_uid(::google::protobuf::uint64 value) {
  set_has_user_uid();
  user_uid_ = value;
}

// optional uint64 channel_id = 2;
inline bool hg_user_channel_notify::has_channel_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void hg_user_channel_notify::set_has_channel_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void hg_user_channel_notify::clear_has_channel_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void hg_user_channel_notify::clear_channel_id() {
  channel_id_ = GOOGLE_ULONGLONG(0);
  clear_has_channel_id();
}
inline ::google::protobuf::uint64 hg_user_channel_notify::channel_id() const {
  return channel_id_;
}
inline void hg_user_channel_notify::set_channel_id(::google::protobuf::uint64 value) {
  set_has_channel_id();
  channel_id_ = value;
}

// -------------------------------------------------------------------

// ge_syn_game_info_notify

// required uint32 game_id = 1;
inline bool ge_syn_game_info_notify::has_game_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ge_syn_game_info_notify::set_has_game_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ge_syn_game_info_notify::clear_has_game_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ge_syn_game_info_notify::clear_game_id() {
  game_id_ = 0u;
  clear_has_game_id();
}
inline ::google::protobuf::uint32 ge_syn_game_info_notify::game_id() const {
  return game_id_;
}
inline void ge_syn_game_info_notify::set_game_id(::google::protobuf::uint32 value) {
  set_has_game_id();
  game_id_ = value;
}

// optional .proto.server.ge_game_scene_reg_request regs = 2;
inline bool ge_syn_game_info_notify::has_regs() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ge_syn_game_info_notify::set_has_regs() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ge_syn_game_info_notify::clear_has_regs() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ge_syn_game_info_notify::clear_regs() {
  if (regs_ != NULL) regs_->::proto::server::ge_game_scene_reg_request::Clear();
  clear_has_regs();
}
inline const ::proto::server::ge_game_scene_reg_request& ge_syn_game_info_notify::regs() const {
  return regs_ != NULL ? *regs_ : *default_instance_->regs_;
}
inline ::proto::server::ge_game_scene_reg_request* ge_syn_game_info_notify::mutable_regs() {
  set_has_regs();
  if (regs_ == NULL) regs_ = new ::proto::server::ge_game_scene_reg_request;
  return regs_;
}
inline ::proto::server::ge_game_scene_reg_request* ge_syn_game_info_notify::release_regs() {
  clear_has_regs();
  ::proto::server::ge_game_scene_reg_request* temp = regs_;
  regs_ = NULL;
  return temp;
}
inline void ge_syn_game_info_notify::set_allocated_regs(::proto::server::ge_game_scene_reg_request* regs) {
  delete regs_;
  regs_ = regs;
  if (regs) {
    set_has_regs();
  } else {
    clear_has_regs();
  }
}

// -------------------------------------------------------------------

// gd_syn_game_info_notify

// required uint32 game_id = 1;
inline bool gd_syn_game_info_notify::has_game_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gd_syn_game_info_notify::set_has_game_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gd_syn_game_info_notify::clear_has_game_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gd_syn_game_info_notify::clear_game_id() {
  game_id_ = 0u;
  clear_has_game_id();
}
inline ::google::protobuf::uint32 gd_syn_game_info_notify::game_id() const {
  return game_id_;
}
inline void gd_syn_game_info_notify::set_game_id(::google::protobuf::uint32 value) {
  set_has_game_id();
  game_id_ = value;
}

// -------------------------------------------------------------------

// al_syn_gate_info_notify

// required uint32 gate_id = 1;
inline bool al_syn_gate_info_notify::has_gate_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void al_syn_gate_info_notify::set_has_gate_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void al_syn_gate_info_notify::clear_has_gate_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void al_syn_gate_info_notify::clear_gate_id() {
  gate_id_ = 0u;
  clear_has_gate_id();
}
inline ::google::protobuf::uint32 al_syn_gate_info_notify::gate_id() const {
  return gate_id_;
}
inline void al_syn_gate_info_notify::set_gate_id(::google::protobuf::uint32 value) {
  set_has_gate_id();
  gate_id_ = value;
}

// repeated uint64 user_list = 2;
inline int al_syn_gate_info_notify::user_list_size() const {
  return user_list_.size();
}
inline void al_syn_gate_info_notify::clear_user_list() {
  user_list_.Clear();
}
inline ::google::protobuf::uint64 al_syn_gate_info_notify::user_list(int index) const {
  return user_list_.Get(index);
}
inline void al_syn_gate_info_notify::set_user_list(int index, ::google::protobuf::uint64 value) {
  user_list_.Set(index, value);
}
inline void al_syn_gate_info_notify::add_user_list(::google::protobuf::uint64 value) {
  user_list_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
al_syn_gate_info_notify::user_list() const {
  return user_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
al_syn_gate_info_notify::mutable_user_list() {
  return &user_list_;
}

// -------------------------------------------------------------------

// ga_syn_game_info_notify

// required uint32 game_id = 1;
inline bool ga_syn_game_info_notify::has_game_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ga_syn_game_info_notify::set_has_game_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ga_syn_game_info_notify::clear_has_game_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ga_syn_game_info_notify::clear_game_id() {
  game_id_ = 0u;
  clear_has_game_id();
}
inline ::google::protobuf::uint32 ga_syn_game_info_notify::game_id() const {
  return game_id_;
}
inline void ga_syn_game_info_notify::set_game_id(::google::protobuf::uint32 value) {
  set_has_game_id();
  game_id_ = value;
}

// optional uint32 game_type = 2;
inline bool ga_syn_game_info_notify::has_game_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ga_syn_game_info_notify::set_has_game_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ga_syn_game_info_notify::clear_has_game_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ga_syn_game_info_notify::clear_game_type() {
  game_type_ = 0u;
  clear_has_game_type();
}
inline ::google::protobuf::uint32 ga_syn_game_info_notify::game_type() const {
  return game_type_;
}
inline void ga_syn_game_info_notify::set_game_type(::google::protobuf::uint32 value) {
  set_has_game_type();
  game_type_ = value;
}

// -------------------------------------------------------------------

// ga_syn_cross_id_notify

// optional uint64 user_id = 1;
inline bool ga_syn_cross_id_notify::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ga_syn_cross_id_notify::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ga_syn_cross_id_notify::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ga_syn_cross_id_notify::clear_user_id() {
  user_id_ = GOOGLE_ULONGLONG(0);
  clear_has_user_id();
}
inline ::google::protobuf::uint64 ga_syn_cross_id_notify::user_id() const {
  return user_id_;
}
inline void ga_syn_cross_id_notify::set_user_id(::google::protobuf::uint64 value) {
  set_has_user_id();
  user_id_ = value;
}

// optional uint32 cross_id = 2;
inline bool ga_syn_cross_id_notify::has_cross_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ga_syn_cross_id_notify::set_has_cross_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ga_syn_cross_id_notify::clear_has_cross_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ga_syn_cross_id_notify::clear_cross_id() {
  cross_id_ = 0u;
  clear_has_cross_id();
}
inline ::google::protobuf::uint32 ga_syn_cross_id_notify::cross_id() const {
  return cross_id_;
}
inline void ga_syn_cross_id_notify::set_cross_id(::google::protobuf::uint32 value) {
  set_has_cross_id();
  cross_id_ = value;
}

// -------------------------------------------------------------------

// ae_syn_gate_info_notify

// required uint32 gate_id = 1;
inline bool ae_syn_gate_info_notify::has_gate_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ae_syn_gate_info_notify::set_has_gate_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ae_syn_gate_info_notify::clear_has_gate_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ae_syn_gate_info_notify::clear_gate_id() {
  gate_id_ = 0u;
  clear_has_gate_id();
}
inline ::google::protobuf::uint32 ae_syn_gate_info_notify::gate_id() const {
  return gate_id_;
}
inline void ae_syn_gate_info_notify::set_gate_id(::google::protobuf::uint32 value) {
  set_has_gate_id();
  gate_id_ = value;
}

// -------------------------------------------------------------------

// cross_server_data

// optional .proto.server.scene_change_type type = 1;
inline bool cross_server_data::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void cross_server_data::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void cross_server_data::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void cross_server_data::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::proto::server::scene_change_type cross_server_data::type() const {
  return static_cast< ::proto::server::scene_change_type >(type_);
}
inline void cross_server_data::set_type(::proto::server::scene_change_type value) {
  assert(::proto::server::scene_change_type_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional uint64 scene_id = 2;
inline bool cross_server_data::has_scene_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void cross_server_data::set_has_scene_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void cross_server_data::clear_has_scene_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void cross_server_data::clear_scene_id() {
  scene_id_ = GOOGLE_ULONGLONG(0);
  clear_has_scene_id();
}
inline ::google::protobuf::uint64 cross_server_data::scene_id() const {
  return scene_id_;
}
inline void cross_server_data::set_scene_id(::google::protobuf::uint64 value) {
  set_has_scene_id();
  scene_id_ = value;
}

// optional float des_x = 3;
inline bool cross_server_data::has_des_x() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void cross_server_data::set_has_des_x() {
  _has_bits_[0] |= 0x00000004u;
}
inline void cross_server_data::clear_has_des_x() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void cross_server_data::clear_des_x() {
  des_x_ = 0;
  clear_has_des_x();
}
inline float cross_server_data::des_x() const {
  return des_x_;
}
inline void cross_server_data::set_des_x(float value) {
  set_has_des_x();
  des_x_ = value;
}

// optional float des_y = 4;
inline bool cross_server_data::has_des_y() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void cross_server_data::set_has_des_y() {
  _has_bits_[0] |= 0x00000008u;
}
inline void cross_server_data::clear_has_des_y() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void cross_server_data::clear_des_y() {
  des_y_ = 0;
  clear_has_des_y();
}
inline float cross_server_data::des_y() const {
  return des_y_;
}
inline void cross_server_data::set_des_y(float value) {
  set_has_des_y();
  des_y_ = value;
}

// optional float des_dir = 5;
inline bool cross_server_data::has_des_dir() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void cross_server_data::set_has_des_dir() {
  _has_bits_[0] |= 0x00000010u;
}
inline void cross_server_data::clear_has_des_dir() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void cross_server_data::clear_des_dir() {
  des_dir_ = 0;
  clear_has_des_dir();
}
inline float cross_server_data::des_dir() const {
  return des_dir_;
}
inline void cross_server_data::set_des_dir(float value) {
  set_has_des_dir();
  des_dir_ = value;
}

// optional uint64 troop_id = 6;
inline bool cross_server_data::has_troop_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void cross_server_data::set_has_troop_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void cross_server_data::clear_has_troop_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void cross_server_data::clear_troop_id() {
  troop_id_ = GOOGLE_ULONGLONG(0);
  clear_has_troop_id();
}
inline ::google::protobuf::uint64 cross_server_data::troop_id() const {
  return troop_id_;
}
inline void cross_server_data::set_troop_id(::google::protobuf::uint64 value) {
  set_has_troop_id();
  troop_id_ = value;
}

// -------------------------------------------------------------------

// ae_reg_user_center_request

// optional uint64 uid = 1;
inline bool ae_reg_user_center_request::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ae_reg_user_center_request::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ae_reg_user_center_request::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ae_reg_user_center_request::clear_uid() {
  uid_ = GOOGLE_ULONGLONG(0);
  clear_has_uid();
}
inline ::google::protobuf::uint64 ae_reg_user_center_request::uid() const {
  return uid_;
}
inline void ae_reg_user_center_request::set_uid(::google::protobuf::uint64 value) {
  set_has_uid();
  uid_ = value;
}

// -------------------------------------------------------------------

// ae_unreg_user_scene_notify

// optional uint64 uid = 1;
inline bool ae_unreg_user_scene_notify::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ae_unreg_user_scene_notify::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ae_unreg_user_scene_notify::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ae_unreg_user_scene_notify::clear_uid() {
  uid_ = GOOGLE_ULONGLONG(0);
  clear_has_uid();
}
inline ::google::protobuf::uint64 ae_unreg_user_scene_notify::uid() const {
  return uid_;
}
inline void ae_unreg_user_scene_notify::set_uid(::google::protobuf::uint64 value) {
  set_has_uid();
  uid_ = value;
}

// optional uint32 unreg_code = 2;
inline bool ae_unreg_user_scene_notify::has_unreg_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ae_unreg_user_scene_notify::set_has_unreg_code() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ae_unreg_user_scene_notify::clear_has_unreg_code() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ae_unreg_user_scene_notify::clear_unreg_code() {
  unreg_code_ = 0u;
  clear_has_unreg_code();
}
inline ::google::protobuf::uint32 ae_unreg_user_scene_notify::unreg_code() const {
  return unreg_code_;
}
inline void ae_unreg_user_scene_notify::set_unreg_code(::google::protobuf::uint32 value) {
  set_has_unreg_code();
  unreg_code_ = value;
}

// optional uint32 kick_reason = 3;
inline bool ae_unreg_user_scene_notify::has_kick_reason() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ae_unreg_user_scene_notify::set_has_kick_reason() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ae_unreg_user_scene_notify::clear_has_kick_reason() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ae_unreg_user_scene_notify::clear_kick_reason() {
  kick_reason_ = 0u;
  clear_has_kick_reason();
}
inline ::google::protobuf::uint32 ae_unreg_user_scene_notify::kick_reason() const {
  return kick_reason_;
}
inline void ae_unreg_user_scene_notify::set_kick_reason(::google::protobuf::uint32 value) {
  set_has_kick_reason();
  kick_reason_ = value;
}

// -------------------------------------------------------------------

// ea_unreg_user_center_notify

// optional uint64 uid = 1;
inline bool ea_unreg_user_center_notify::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ea_unreg_user_center_notify::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ea_unreg_user_center_notify::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ea_unreg_user_center_notify::clear_uid() {
  uid_ = GOOGLE_ULONGLONG(0);
  clear_has_uid();
}
inline ::google::protobuf::uint64 ea_unreg_user_center_notify::uid() const {
  return uid_;
}
inline void ea_unreg_user_center_notify::set_uid(::google::protobuf::uint64 value) {
  set_has_uid();
  uid_ = value;
}

// optional uint32 unreg_code = 2;
inline bool ea_unreg_user_center_notify::has_unreg_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ea_unreg_user_center_notify::set_has_unreg_code() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ea_unreg_user_center_notify::clear_has_unreg_code() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ea_unreg_user_center_notify::clear_unreg_code() {
  unreg_code_ = 0u;
  clear_has_unreg_code();
}
inline ::google::protobuf::uint32 ea_unreg_user_center_notify::unreg_code() const {
  return unreg_code_;
}
inline void ea_unreg_user_center_notify::set_unreg_code(::google::protobuf::uint32 value) {
  set_has_unreg_code();
  unreg_code_ = value;
}

// optional uint32 code_param = 3;
inline bool ea_unreg_user_center_notify::has_code_param() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ea_unreg_user_center_notify::set_has_code_param() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ea_unreg_user_center_notify::clear_has_code_param() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ea_unreg_user_center_notify::clear_code_param() {
  code_param_ = 0u;
  clear_has_code_param();
}
inline ::google::protobuf::uint32 ea_unreg_user_center_notify::code_param() const {
  return code_param_;
}
inline void ea_unreg_user_center_notify::set_code_param(::google::protobuf::uint32 value) {
  set_has_code_param();
  code_param_ = value;
}

// -------------------------------------------------------------------

// ae_create_role_request

// optional uint64 uid = 1;
inline bool ae_create_role_request::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ae_create_role_request::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ae_create_role_request::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ae_create_role_request::clear_uid() {
  uid_ = GOOGLE_ULONGLONG(0);
  clear_has_uid();
}
inline ::google::protobuf::uint64 ae_create_role_request::uid() const {
  return uid_;
}
inline void ae_create_role_request::set_uid(::google::protobuf::uint64 value) {
  set_has_uid();
  uid_ = value;
}

// optional string nickname = 2;
inline bool ae_create_role_request::has_nickname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ae_create_role_request::set_has_nickname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ae_create_role_request::clear_has_nickname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ae_create_role_request::clear_nickname() {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    nickname_->clear();
  }
  clear_has_nickname();
}
inline const ::std::string& ae_create_role_request::nickname() const {
  return *nickname_;
}
inline void ae_create_role_request::set_nickname(const ::std::string& value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
}
inline void ae_create_role_request::set_nickname(const char* value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
}
inline void ae_create_role_request::set_nickname(const char* value, size_t size) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ae_create_role_request::mutable_nickname() {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  return nickname_;
}
inline ::std::string* ae_create_role_request::release_nickname() {
  clear_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = nickname_;
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ae_create_role_request::set_allocated_nickname(::std::string* nickname) {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    delete nickname_;
  }
  if (nickname) {
    set_has_nickname();
    nickname_ = nickname;
  } else {
    clear_has_nickname();
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 role_type = 3;
inline bool ae_create_role_request::has_role_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ae_create_role_request::set_has_role_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ae_create_role_request::clear_has_role_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ae_create_role_request::clear_role_type() {
  role_type_ = 0u;
  clear_has_role_type();
}
inline ::google::protobuf::uint32 ae_create_role_request::role_type() const {
  return role_type_;
}
inline void ae_create_role_request::set_role_type(::google::protobuf::uint32 value) {
  set_has_role_type();
  role_type_ = value;
}

// -------------------------------------------------------------------

// ea_create_role_reply

// optional uint64 uid = 1;
inline bool ea_create_role_reply::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ea_create_role_reply::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ea_create_role_reply::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ea_create_role_reply::clear_uid() {
  uid_ = GOOGLE_ULONGLONG(0);
  clear_has_uid();
}
inline ::google::protobuf::uint64 ea_create_role_reply::uid() const {
  return uid_;
}
inline void ea_create_role_reply::set_uid(::google::protobuf::uint64 value) {
  set_has_uid();
  uid_ = value;
}

// optional uint32 reply_code = 2;
inline bool ea_create_role_reply::has_reply_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ea_create_role_reply::set_has_reply_code() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ea_create_role_reply::clear_has_reply_code() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ea_create_role_reply::clear_reply_code() {
  reply_code_ = 0u;
  clear_has_reply_code();
}
inline ::google::protobuf::uint32 ea_create_role_reply::reply_code() const {
  return reply_code_;
}
inline void ea_create_role_reply::set_reply_code(::google::protobuf::uint32 value) {
  set_has_reply_code();
  reply_code_ = value;
}

// -------------------------------------------------------------------

// ae_user_cross_server_notify

// optional .proto.server.cross_server_data data = 1;
inline bool ae_user_cross_server_notify::has_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ae_user_cross_server_notify::set_has_data() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ae_user_cross_server_notify::clear_has_data() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ae_user_cross_server_notify::clear_data() {
  if (data_ != NULL) data_->::proto::server::cross_server_data::Clear();
  clear_has_data();
}
inline const ::proto::server::cross_server_data& ae_user_cross_server_notify::data() const {
  return data_ != NULL ? *data_ : *default_instance_->data_;
}
inline ::proto::server::cross_server_data* ae_user_cross_server_notify::mutable_data() {
  set_has_data();
  if (data_ == NULL) data_ = new ::proto::server::cross_server_data;
  return data_;
}
inline ::proto::server::cross_server_data* ae_user_cross_server_notify::release_data() {
  clear_has_data();
  ::proto::server::cross_server_data* temp = data_;
  data_ = NULL;
  return temp;
}
inline void ae_user_cross_server_notify::set_allocated_data(::proto::server::cross_server_data* data) {
  delete data_;
  data_ = data;
  if (data) {
    set_has_data();
  } else {
    clear_has_data();
  }
}

// -------------------------------------------------------------------

// ea_kick_all_user_notify

// optional uint32 reason = 1;
inline bool ea_kick_all_user_notify::has_reason() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ea_kick_all_user_notify::set_has_reason() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ea_kick_all_user_notify::clear_has_reason() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ea_kick_all_user_notify::clear_reason() {
  reason_ = 0u;
  clear_has_reason();
}
inline ::google::protobuf::uint32 ea_kick_all_user_notify::reason() const {
  return reason_;
}
inline void ea_kick_all_user_notify::set_reason(::google::protobuf::uint32 value) {
  set_has_reason();
  reason_ = value;
}

// -------------------------------------------------------------------

// global_user_data

// optional .proto.server.scene_change_type type = 1;
inline bool global_user_data::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void global_user_data::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void global_user_data::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void global_user_data::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::proto::server::scene_change_type global_user_data::type() const {
  return static_cast< ::proto::server::scene_change_type >(type_);
}
inline void global_user_data::set_type(::proto::server::scene_change_type value) {
  assert(::proto::server::scene_change_type_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional uint32 level = 2;
inline bool global_user_data::has_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void global_user_data::set_has_level() {
  _has_bits_[0] |= 0x00000002u;
}
inline void global_user_data::clear_has_level() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void global_user_data::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 global_user_data::level() const {
  return level_;
}
inline void global_user_data::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
}

// optional uint32 fighting = 3;
inline bool global_user_data::has_fighting() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void global_user_data::set_has_fighting() {
  _has_bits_[0] |= 0x00000004u;
}
inline void global_user_data::clear_has_fighting() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void global_user_data::clear_fighting() {
  fighting_ = 0u;
  clear_has_fighting();
}
inline ::google::protobuf::uint32 global_user_data::fighting() const {
  return fighting_;
}
inline void global_user_data::set_fighting(::google::protobuf::uint32 value) {
  set_has_fighting();
  fighting_ = value;
}

// optional uint32 hero_plugin = 4;
inline bool global_user_data::has_hero_plugin() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void global_user_data::set_has_hero_plugin() {
  _has_bits_[0] |= 0x00000008u;
}
inline void global_user_data::clear_has_hero_plugin() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void global_user_data::clear_hero_plugin() {
  hero_plugin_ = 0u;
  clear_has_hero_plugin();
}
inline ::google::protobuf::uint32 global_user_data::hero_plugin() const {
  return hero_plugin_;
}
inline void global_user_data::set_hero_plugin(::google::protobuf::uint32 value) {
  set_has_hero_plugin();
  hero_plugin_ = value;
}

// optional uint64 scene_id = 5;
inline bool global_user_data::has_scene_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void global_user_data::set_has_scene_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void global_user_data::clear_has_scene_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void global_user_data::clear_scene_id() {
  scene_id_ = GOOGLE_ULONGLONG(0);
  clear_has_scene_id();
}
inline ::google::protobuf::uint64 global_user_data::scene_id() const {
  return scene_id_;
}
inline void global_user_data::set_scene_id(::google::protobuf::uint64 value) {
  set_has_scene_id();
  scene_id_ = value;
}

// optional uint32 map_tid = 6;
inline bool global_user_data::has_map_tid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void global_user_data::set_has_map_tid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void global_user_data::clear_has_map_tid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void global_user_data::clear_map_tid() {
  map_tid_ = 0u;
  clear_has_map_tid();
}
inline ::google::protobuf::uint32 global_user_data::map_tid() const {
  return map_tid_;
}
inline void global_user_data::set_map_tid(::google::protobuf::uint32 value) {
  set_has_map_tid();
  map_tid_ = value;
}

// optional uint32 family_contribution = 7;
inline bool global_user_data::has_family_contribution() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void global_user_data::set_has_family_contribution() {
  _has_bits_[0] |= 0x00000040u;
}
inline void global_user_data::clear_has_family_contribution() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void global_user_data::clear_family_contribution() {
  family_contribution_ = 0u;
  clear_has_family_contribution();
}
inline ::google::protobuf::uint32 global_user_data::family_contribution() const {
  return family_contribution_;
}
inline void global_user_data::set_family_contribution(::google::protobuf::uint32 value) {
  set_has_family_contribution();
  family_contribution_ = value;
}

// optional uint32 head_frame_id = 8;
inline bool global_user_data::has_head_frame_id() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void global_user_data::set_has_head_frame_id() {
  _has_bits_[0] |= 0x00000080u;
}
inline void global_user_data::clear_has_head_frame_id() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void global_user_data::clear_head_frame_id() {
  head_frame_id_ = 0u;
  clear_has_head_frame_id();
}
inline ::google::protobuf::uint32 global_user_data::head_frame_id() const {
  return head_frame_id_;
}
inline void global_user_data::set_head_frame_id(::google::protobuf::uint32 value) {
  set_has_head_frame_id();
  head_frame_id_ = value;
}

// optional uint32 charm = 9;
inline bool global_user_data::has_charm() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void global_user_data::set_has_charm() {
  _has_bits_[0] |= 0x00000100u;
}
inline void global_user_data::clear_has_charm() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void global_user_data::clear_charm() {
  charm_ = 0u;
  clear_has_charm();
}
inline ::google::protobuf::uint32 global_user_data::charm() const {
  return charm_;
}
inline void global_user_data::set_charm(::google::protobuf::uint32 value) {
  set_has_charm();
  charm_ = value;
}

// -------------------------------------------------------------------

// eg_unreg_user_scene_notify

// optional uint64 uid = 1;
inline bool eg_unreg_user_scene_notify::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void eg_unreg_user_scene_notify::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void eg_unreg_user_scene_notify::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void eg_unreg_user_scene_notify::clear_uid() {
  uid_ = GOOGLE_ULONGLONG(0);
  clear_has_uid();
}
inline ::google::protobuf::uint64 eg_unreg_user_scene_notify::uid() const {
  return uid_;
}
inline void eg_unreg_user_scene_notify::set_uid(::google::protobuf::uint64 value) {
  set_has_uid();
  uid_ = value;
}

// optional uint32 unreg_code = 2;
inline bool eg_unreg_user_scene_notify::has_unreg_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void eg_unreg_user_scene_notify::set_has_unreg_code() {
  _has_bits_[0] |= 0x00000002u;
}
inline void eg_unreg_user_scene_notify::clear_has_unreg_code() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void eg_unreg_user_scene_notify::clear_unreg_code() {
  unreg_code_ = 0u;
  clear_has_unreg_code();
}
inline ::google::protobuf::uint32 eg_unreg_user_scene_notify::unreg_code() const {
  return unreg_code_;
}
inline void eg_unreg_user_scene_notify::set_unreg_code(::google::protobuf::uint32 value) {
  set_has_unreg_code();
  unreg_code_ = value;
}

// -------------------------------------------------------------------

// ge_unreg_user_scene_notify

// optional uint64 uid = 1;
inline bool ge_unreg_user_scene_notify::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ge_unreg_user_scene_notify::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ge_unreg_user_scene_notify::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ge_unreg_user_scene_notify::clear_uid() {
  uid_ = GOOGLE_ULONGLONG(0);
  clear_has_uid();
}
inline ::google::protobuf::uint64 ge_unreg_user_scene_notify::uid() const {
  return uid_;
}
inline void ge_unreg_user_scene_notify::set_uid(::google::protobuf::uint64 value) {
  set_has_uid();
  uid_ = value;
}

// optional uint32 unreg_code = 2;
inline bool ge_unreg_user_scene_notify::has_unreg_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ge_unreg_user_scene_notify::set_has_unreg_code() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ge_unreg_user_scene_notify::clear_has_unreg_code() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ge_unreg_user_scene_notify::clear_unreg_code() {
  unreg_code_ = 0u;
  clear_has_unreg_code();
}
inline ::google::protobuf::uint32 ge_unreg_user_scene_notify::unreg_code() const {
  return unreg_code_;
}
inline void ge_unreg_user_scene_notify::set_unreg_code(::google::protobuf::uint32 value) {
  set_has_unreg_code();
  unreg_code_ = value;
}

// optional uint32 kick_reason = 3;
inline bool ge_unreg_user_scene_notify::has_kick_reason() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ge_unreg_user_scene_notify::set_has_kick_reason() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ge_unreg_user_scene_notify::clear_has_kick_reason() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ge_unreg_user_scene_notify::clear_kick_reason() {
  kick_reason_ = 0u;
  clear_has_kick_reason();
}
inline ::google::protobuf::uint32 ge_unreg_user_scene_notify::kick_reason() const {
  return kick_reason_;
}
inline void ge_unreg_user_scene_notify::set_kick_reason(::google::protobuf::uint32 value) {
  set_has_kick_reason();
  kick_reason_ = value;
}

// -------------------------------------------------------------------

// eg_reg_user_scene_request

// optional uint64 uid = 1;
inline bool eg_reg_user_scene_request::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void eg_reg_user_scene_request::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void eg_reg_user_scene_request::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void eg_reg_user_scene_request::clear_uid() {
  uid_ = GOOGLE_ULONGLONG(0);
  clear_has_uid();
}
inline ::google::protobuf::uint64 eg_reg_user_scene_request::uid() const {
  return uid_;
}
inline void eg_reg_user_scene_request::set_uid(::google::protobuf::uint64 value) {
  set_has_uid();
  uid_ = value;
}

// optional uint32 gate_id = 2;
inline bool eg_reg_user_scene_request::has_gate_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void eg_reg_user_scene_request::set_has_gate_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void eg_reg_user_scene_request::clear_has_gate_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void eg_reg_user_scene_request::clear_gate_id() {
  gate_id_ = 0u;
  clear_has_gate_id();
}
inline ::google::protobuf::uint32 eg_reg_user_scene_request::gate_id() const {
  return gate_id_;
}
inline void eg_reg_user_scene_request::set_gate_id(::google::protobuf::uint32 value) {
  set_has_gate_id();
  gate_id_ = value;
}

// optional .proto.server.cross_server_data scene_data = 3;
inline bool eg_reg_user_scene_request::has_scene_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void eg_reg_user_scene_request::set_has_scene_data() {
  _has_bits_[0] |= 0x00000004u;
}
inline void eg_reg_user_scene_request::clear_has_scene_data() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void eg_reg_user_scene_request::clear_scene_data() {
  if (scene_data_ != NULL) scene_data_->::proto::server::cross_server_data::Clear();
  clear_has_scene_data();
}
inline const ::proto::server::cross_server_data& eg_reg_user_scene_request::scene_data() const {
  return scene_data_ != NULL ? *scene_data_ : *default_instance_->scene_data_;
}
inline ::proto::server::cross_server_data* eg_reg_user_scene_request::mutable_scene_data() {
  set_has_scene_data();
  if (scene_data_ == NULL) scene_data_ = new ::proto::server::cross_server_data;
  return scene_data_;
}
inline ::proto::server::cross_server_data* eg_reg_user_scene_request::release_scene_data() {
  clear_has_scene_data();
  ::proto::server::cross_server_data* temp = scene_data_;
  scene_data_ = NULL;
  return temp;
}
inline void eg_reg_user_scene_request::set_allocated_scene_data(::proto::server::cross_server_data* scene_data) {
  delete scene_data_;
  scene_data_ = scene_data;
  if (scene_data) {
    set_has_scene_data();
  } else {
    clear_has_scene_data();
  }
}

// optional uint64 family_id = 4;
inline bool eg_reg_user_scene_request::has_family_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void eg_reg_user_scene_request::set_has_family_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void eg_reg_user_scene_request::clear_has_family_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void eg_reg_user_scene_request::clear_family_id() {
  family_id_ = GOOGLE_ULONGLONG(0);
  clear_has_family_id();
}
inline ::google::protobuf::uint64 eg_reg_user_scene_request::family_id() const {
  return family_id_;
}
inline void eg_reg_user_scene_request::set_family_id(::google::protobuf::uint64 value) {
  set_has_family_id();
  family_id_ = value;
}

// optional string family_name = 5;
inline bool eg_reg_user_scene_request::has_family_name() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void eg_reg_user_scene_request::set_has_family_name() {
  _has_bits_[0] |= 0x00000010u;
}
inline void eg_reg_user_scene_request::clear_has_family_name() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void eg_reg_user_scene_request::clear_family_name() {
  if (family_name_ != &::google::protobuf::internal::kEmptyString) {
    family_name_->clear();
  }
  clear_has_family_name();
}
inline const ::std::string& eg_reg_user_scene_request::family_name() const {
  return *family_name_;
}
inline void eg_reg_user_scene_request::set_family_name(const ::std::string& value) {
  set_has_family_name();
  if (family_name_ == &::google::protobuf::internal::kEmptyString) {
    family_name_ = new ::std::string;
  }
  family_name_->assign(value);
}
inline void eg_reg_user_scene_request::set_family_name(const char* value) {
  set_has_family_name();
  if (family_name_ == &::google::protobuf::internal::kEmptyString) {
    family_name_ = new ::std::string;
  }
  family_name_->assign(value);
}
inline void eg_reg_user_scene_request::set_family_name(const char* value, size_t size) {
  set_has_family_name();
  if (family_name_ == &::google::protobuf::internal::kEmptyString) {
    family_name_ = new ::std::string;
  }
  family_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* eg_reg_user_scene_request::mutable_family_name() {
  set_has_family_name();
  if (family_name_ == &::google::protobuf::internal::kEmptyString) {
    family_name_ = new ::std::string;
  }
  return family_name_;
}
inline ::std::string* eg_reg_user_scene_request::release_family_name() {
  clear_has_family_name();
  if (family_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = family_name_;
    family_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void eg_reg_user_scene_request::set_allocated_family_name(::std::string* family_name) {
  if (family_name_ != &::google::protobuf::internal::kEmptyString) {
    delete family_name_;
  }
  if (family_name) {
    set_has_family_name();
    family_name_ = family_name;
  } else {
    clear_has_family_name();
    family_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 family_officer = 6;
inline bool eg_reg_user_scene_request::has_family_officer() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void eg_reg_user_scene_request::set_has_family_officer() {
  _has_bits_[0] |= 0x00000020u;
}
inline void eg_reg_user_scene_request::clear_has_family_officer() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void eg_reg_user_scene_request::clear_family_officer() {
  family_officer_ = 0u;
  clear_has_family_officer();
}
inline ::google::protobuf::uint32 eg_reg_user_scene_request::family_officer() const {
  return family_officer_;
}
inline void eg_reg_user_scene_request::set_family_officer(::google::protobuf::uint32 value) {
  set_has_family_officer();
  family_officer_ = value;
}

// optional uint32 country_id = 7;
inline bool eg_reg_user_scene_request::has_country_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void eg_reg_user_scene_request::set_has_country_id() {
  _has_bits_[0] |= 0x00000040u;
}
inline void eg_reg_user_scene_request::clear_has_country_id() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void eg_reg_user_scene_request::clear_country_id() {
  country_id_ = 0u;
  clear_has_country_id();
}
inline ::google::protobuf::uint32 eg_reg_user_scene_request::country_id() const {
  return country_id_;
}
inline void eg_reg_user_scene_request::set_country_id(::google::protobuf::uint32 value) {
  set_has_country_id();
  country_id_ = value;
}

// optional uint32 country_officer = 8;
inline bool eg_reg_user_scene_request::has_country_officer() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void eg_reg_user_scene_request::set_has_country_officer() {
  _has_bits_[0] |= 0x00000080u;
}
inline void eg_reg_user_scene_request::clear_has_country_officer() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void eg_reg_user_scene_request::clear_country_officer() {
  country_officer_ = 0u;
  clear_has_country_officer();
}
inline ::google::protobuf::uint32 eg_reg_user_scene_request::country_officer() const {
  return country_officer_;
}
inline void eg_reg_user_scene_request::set_country_officer(::google::protobuf::uint32 value) {
  set_has_country_officer();
  country_officer_ = value;
}

// optional uint32 family_level = 9;
inline bool eg_reg_user_scene_request::has_family_level() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void eg_reg_user_scene_request::set_has_family_level() {
  _has_bits_[0] |= 0x00000100u;
}
inline void eg_reg_user_scene_request::clear_has_family_level() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void eg_reg_user_scene_request::clear_family_level() {
  family_level_ = 0u;
  clear_has_family_level();
}
inline ::google::protobuf::uint32 eg_reg_user_scene_request::family_level() const {
  return family_level_;
}
inline void eg_reg_user_scene_request::set_family_level(::google::protobuf::uint32 value) {
  set_has_family_level();
  family_level_ = value;
}

// optional uint32 charm = 10;
inline bool eg_reg_user_scene_request::has_charm() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void eg_reg_user_scene_request::set_has_charm() {
  _has_bits_[0] |= 0x00000200u;
}
inline void eg_reg_user_scene_request::clear_has_charm() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void eg_reg_user_scene_request::clear_charm() {
  charm_ = 0u;
  clear_has_charm();
}
inline ::google::protobuf::uint32 eg_reg_user_scene_request::charm() const {
  return charm_;
}
inline void eg_reg_user_scene_request::set_charm(::google::protobuf::uint32 value) {
  set_has_charm();
  charm_ = value;
}

// -------------------------------------------------------------------

// ge_reg_user_scene_reply

// optional uint64 uid = 1;
inline bool ge_reg_user_scene_reply::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ge_reg_user_scene_reply::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ge_reg_user_scene_reply::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ge_reg_user_scene_reply::clear_uid() {
  uid_ = GOOGLE_ULONGLONG(0);
  clear_has_uid();
}
inline ::google::protobuf::uint64 ge_reg_user_scene_reply::uid() const {
  return uid_;
}
inline void ge_reg_user_scene_reply::set_uid(::google::protobuf::uint64 value) {
  set_has_uid();
  uid_ = value;
}

// optional .proto.server.global_user_data user_data = 2;
inline bool ge_reg_user_scene_reply::has_user_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ge_reg_user_scene_reply::set_has_user_data() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ge_reg_user_scene_reply::clear_has_user_data() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ge_reg_user_scene_reply::clear_user_data() {
  if (user_data_ != NULL) user_data_->::proto::server::global_user_data::Clear();
  clear_has_user_data();
}
inline const ::proto::server::global_user_data& ge_reg_user_scene_reply::user_data() const {
  return user_data_ != NULL ? *user_data_ : *default_instance_->user_data_;
}
inline ::proto::server::global_user_data* ge_reg_user_scene_reply::mutable_user_data() {
  set_has_user_data();
  if (user_data_ == NULL) user_data_ = new ::proto::server::global_user_data;
  return user_data_;
}
inline ::proto::server::global_user_data* ge_reg_user_scene_reply::release_user_data() {
  clear_has_user_data();
  ::proto::server::global_user_data* temp = user_data_;
  user_data_ = NULL;
  return temp;
}
inline void ge_reg_user_scene_reply::set_allocated_user_data(::proto::server::global_user_data* user_data) {
  delete user_data_;
  user_data_ = user_data;
  if (user_data) {
    set_has_user_data();
  } else {
    clear_has_user_data();
  }
}

// -------------------------------------------------------------------

// eg_relogin_scene_request

// optional uint64 uid = 1;
inline bool eg_relogin_scene_request::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void eg_relogin_scene_request::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void eg_relogin_scene_request::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void eg_relogin_scene_request::clear_uid() {
  uid_ = GOOGLE_ULONGLONG(0);
  clear_has_uid();
}
inline ::google::protobuf::uint64 eg_relogin_scene_request::uid() const {
  return uid_;
}
inline void eg_relogin_scene_request::set_uid(::google::protobuf::uint64 value) {
  set_has_uid();
  uid_ = value;
}

// optional uint32 gate_id = 2;
inline bool eg_relogin_scene_request::has_gate_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void eg_relogin_scene_request::set_has_gate_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void eg_relogin_scene_request::clear_has_gate_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void eg_relogin_scene_request::clear_gate_id() {
  gate_id_ = 0u;
  clear_has_gate_id();
}
inline ::google::protobuf::uint32 eg_relogin_scene_request::gate_id() const {
  return gate_id_;
}
inline void eg_relogin_scene_request::set_gate_id(::google::protobuf::uint32 value) {
  set_has_gate_id();
  gate_id_ = value;
}

// -------------------------------------------------------------------

// ge_user_cross_scene_request

// optional .proto.server.cross_server_data data = 1;
inline bool ge_user_cross_scene_request::has_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ge_user_cross_scene_request::set_has_data() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ge_user_cross_scene_request::clear_has_data() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ge_user_cross_scene_request::clear_data() {
  if (data_ != NULL) data_->::proto::server::cross_server_data::Clear();
  clear_has_data();
}
inline const ::proto::server::cross_server_data& ge_user_cross_scene_request::data() const {
  return data_ != NULL ? *data_ : *default_instance_->data_;
}
inline ::proto::server::cross_server_data* ge_user_cross_scene_request::mutable_data() {
  set_has_data();
  if (data_ == NULL) data_ = new ::proto::server::cross_server_data;
  return data_;
}
inline ::proto::server::cross_server_data* ge_user_cross_scene_request::release_data() {
  clear_has_data();
  ::proto::server::cross_server_data* temp = data_;
  data_ = NULL;
  return temp;
}
inline void ge_user_cross_scene_request::set_allocated_data(::proto::server::cross_server_data* data) {
  delete data_;
  data_ = data;
  if (data) {
    set_has_data();
  } else {
    clear_has_data();
  }
}

// -------------------------------------------------------------------

// eg_user_cross_scene_reply

// optional uint32 reply_code = 1;
inline bool eg_user_cross_scene_reply::has_reply_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void eg_user_cross_scene_reply::set_has_reply_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void eg_user_cross_scene_reply::clear_has_reply_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void eg_user_cross_scene_reply::clear_reply_code() {
  reply_code_ = 0u;
  clear_has_reply_code();
}
inline ::google::protobuf::uint32 eg_user_cross_scene_reply::reply_code() const {
  return reply_code_;
}
inline void eg_user_cross_scene_reply::set_reply_code(::google::protobuf::uint32 value) {
  set_has_reply_code();
  reply_code_ = value;
}

// optional .proto.server.cross_server_data data = 2;
inline bool eg_user_cross_scene_reply::has_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void eg_user_cross_scene_reply::set_has_data() {
  _has_bits_[0] |= 0x00000002u;
}
inline void eg_user_cross_scene_reply::clear_has_data() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void eg_user_cross_scene_reply::clear_data() {
  if (data_ != NULL) data_->::proto::server::cross_server_data::Clear();
  clear_has_data();
}
inline const ::proto::server::cross_server_data& eg_user_cross_scene_reply::data() const {
  return data_ != NULL ? *data_ : *default_instance_->data_;
}
inline ::proto::server::cross_server_data* eg_user_cross_scene_reply::mutable_data() {
  set_has_data();
  if (data_ == NULL) data_ = new ::proto::server::cross_server_data;
  return data_;
}
inline ::proto::server::cross_server_data* eg_user_cross_scene_reply::release_data() {
  clear_has_data();
  ::proto::server::cross_server_data* temp = data_;
  data_ = NULL;
  return temp;
}
inline void eg_user_cross_scene_reply::set_allocated_data(::proto::server::cross_server_data* data) {
  delete data_;
  data_ = data;
  if (data) {
    set_has_data();
  } else {
    clear_has_data();
  }
}

// -------------------------------------------------------------------

// eg_kick_all_user_notify

// optional uint32 reason = 1;
inline bool eg_kick_all_user_notify::has_reason() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void eg_kick_all_user_notify::set_has_reason() {
  _has_bits_[0] |= 0x00000001u;
}
inline void eg_kick_all_user_notify::clear_has_reason() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void eg_kick_all_user_notify::clear_reason() {
  reason_ = 0u;
  clear_has_reason();
}
inline ::google::protobuf::uint32 eg_kick_all_user_notify::reason() const {
  return reason_;
}
inline void eg_kick_all_user_notify::set_reason(::google::protobuf::uint32 value) {
  set_has_reason();
  reason_ = value;
}

// -------------------------------------------------------------------

// ed_create_role_request

// optional uint64 uid = 1;
inline bool ed_create_role_request::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ed_create_role_request::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ed_create_role_request::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ed_create_role_request::clear_uid() {
  uid_ = GOOGLE_ULONGLONG(0);
  clear_has_uid();
}
inline ::google::protobuf::uint64 ed_create_role_request::uid() const {
  return uid_;
}
inline void ed_create_role_request::set_uid(::google::protobuf::uint64 value) {
  set_has_uid();
  uid_ = value;
}

// optional string nickname = 2;
inline bool ed_create_role_request::has_nickname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ed_create_role_request::set_has_nickname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ed_create_role_request::clear_has_nickname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ed_create_role_request::clear_nickname() {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    nickname_->clear();
  }
  clear_has_nickname();
}
inline const ::std::string& ed_create_role_request::nickname() const {
  return *nickname_;
}
inline void ed_create_role_request::set_nickname(const ::std::string& value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
}
inline void ed_create_role_request::set_nickname(const char* value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
}
inline void ed_create_role_request::set_nickname(const char* value, size_t size) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ed_create_role_request::mutable_nickname() {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  return nickname_;
}
inline ::std::string* ed_create_role_request::release_nickname() {
  clear_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = nickname_;
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ed_create_role_request::set_allocated_nickname(::std::string* nickname) {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    delete nickname_;
  }
  if (nickname) {
    set_has_nickname();
    nickname_ = nickname;
  } else {
    clear_has_nickname();
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 role_type = 3;
inline bool ed_create_role_request::has_role_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ed_create_role_request::set_has_role_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ed_create_role_request::clear_has_role_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ed_create_role_request::clear_role_type() {
  role_type_ = 0u;
  clear_has_role_type();
}
inline ::google::protobuf::uint32 ed_create_role_request::role_type() const {
  return role_type_;
}
inline void ed_create_role_request::set_role_type(::google::protobuf::uint32 value) {
  set_has_role_type();
  role_type_ = value;
}

// optional uint32 gate_id = 4;
inline bool ed_create_role_request::has_gate_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ed_create_role_request::set_has_gate_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ed_create_role_request::clear_has_gate_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ed_create_role_request::clear_gate_id() {
  gate_id_ = 0u;
  clear_has_gate_id();
}
inline ::google::protobuf::uint32 ed_create_role_request::gate_id() const {
  return gate_id_;
}
inline void ed_create_role_request::set_gate_id(::google::protobuf::uint32 value) {
  set_has_gate_id();
  gate_id_ = value;
}

// optional uint64 time = 5;
inline bool ed_create_role_request::has_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ed_create_role_request::set_has_time() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ed_create_role_request::clear_has_time() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ed_create_role_request::clear_time() {
  time_ = GOOGLE_ULONGLONG(0);
  clear_has_time();
}
inline ::google::protobuf::uint64 ed_create_role_request::time() const {
  return time_;
}
inline void ed_create_role_request::set_time(::google::protobuf::uint64 value) {
  set_has_time();
  time_ = value;
}

// -------------------------------------------------------------------

// de_create_role_reply

// optional uint64 uid = 1;
inline bool de_create_role_reply::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void de_create_role_reply::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void de_create_role_reply::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void de_create_role_reply::clear_uid() {
  uid_ = GOOGLE_ULONGLONG(0);
  clear_has_uid();
}
inline ::google::protobuf::uint64 de_create_role_reply::uid() const {
  return uid_;
}
inline void de_create_role_reply::set_uid(::google::protobuf::uint64 value) {
  set_has_uid();
  uid_ = value;
}

// optional uint32 reply_code = 2;
inline bool de_create_role_reply::has_reply_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void de_create_role_reply::set_has_reply_code() {
  _has_bits_[0] |= 0x00000002u;
}
inline void de_create_role_reply::clear_has_reply_code() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void de_create_role_reply::clear_reply_code() {
  reply_code_ = 0u;
  clear_has_reply_code();
}
inline ::google::protobuf::uint32 de_create_role_reply::reply_code() const {
  return reply_code_;
}
inline void de_create_role_reply::set_reply_code(::google::protobuf::uint32 value) {
  set_has_reply_code();
  reply_code_ = value;
}

// optional uint32 gate_id = 3;
inline bool de_create_role_reply::has_gate_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void de_create_role_reply::set_has_gate_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void de_create_role_reply::clear_has_gate_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void de_create_role_reply::clear_gate_id() {
  gate_id_ = 0u;
  clear_has_gate_id();
}
inline ::google::protobuf::uint32 de_create_role_reply::gate_id() const {
  return gate_id_;
}
inline void de_create_role_reply::set_gate_id(::google::protobuf::uint32 value) {
  set_has_gate_id();
  gate_id_ = value;
}

// optional string name = 4;
inline bool de_create_role_reply::has_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void de_create_role_reply::set_has_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void de_create_role_reply::clear_has_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void de_create_role_reply::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& de_create_role_reply::name() const {
  return *name_;
}
inline void de_create_role_reply::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void de_create_role_reply::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void de_create_role_reply::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* de_create_role_reply::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* de_create_role_reply::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void de_create_role_reply::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 create_time = 5;
inline bool de_create_role_reply::has_create_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void de_create_role_reply::set_has_create_time() {
  _has_bits_[0] |= 0x00000010u;
}
inline void de_create_role_reply::clear_has_create_time() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void de_create_role_reply::clear_create_time() {
  create_time_ = 0u;
  clear_has_create_time();
}
inline ::google::protobuf::uint32 de_create_role_reply::create_time() const {
  return create_time_;
}
inline void de_create_role_reply::set_create_time(::google::protobuf::uint32 value) {
  set_has_create_time();
  create_time_ = value;
}

// optional uint32 role_type = 6;
inline bool de_create_role_reply::has_role_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void de_create_role_reply::set_has_role_type() {
  _has_bits_[0] |= 0x00000020u;
}
inline void de_create_role_reply::clear_has_role_type() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void de_create_role_reply::clear_role_type() {
  role_type_ = 0u;
  clear_has_role_type();
}
inline ::google::protobuf::uint32 de_create_role_reply::role_type() const {
  return role_type_;
}
inline void de_create_role_reply::set_role_type(::google::protobuf::uint32 value) {
  set_has_role_type();
  role_type_ = value;
}

// optional uint32 channel_id = 7;
inline bool de_create_role_reply::has_channel_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void de_create_role_reply::set_has_channel_id() {
  _has_bits_[0] |= 0x00000040u;
}
inline void de_create_role_reply::clear_has_channel_id() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void de_create_role_reply::clear_channel_id() {
  channel_id_ = 0u;
  clear_has_channel_id();
}
inline ::google::protobuf::uint32 de_create_role_reply::channel_id() const {
  return channel_id_;
}
inline void de_create_role_reply::set_channel_id(::google::protobuf::uint32 value) {
  set_has_channel_id();
  channel_id_ = value;
}

// -------------------------------------------------------------------

// ed_query_role_data_request

// optional uint64 uid = 1;
inline bool ed_query_role_data_request::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ed_query_role_data_request::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ed_query_role_data_request::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ed_query_role_data_request::clear_uid() {
  uid_ = GOOGLE_ULONGLONG(0);
  clear_has_uid();
}
inline ::google::protobuf::uint64 ed_query_role_data_request::uid() const {
  return uid_;
}
inline void ed_query_role_data_request::set_uid(::google::protobuf::uint64 value) {
  set_has_uid();
  uid_ = value;
}

// optional uint32 gate_id = 2;
inline bool ed_query_role_data_request::has_gate_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ed_query_role_data_request::set_has_gate_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ed_query_role_data_request::clear_has_gate_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ed_query_role_data_request::clear_gate_id() {
  gate_id_ = 0u;
  clear_has_gate_id();
}
inline ::google::protobuf::uint32 ed_query_role_data_request::gate_id() const {
  return gate_id_;
}
inline void ed_query_role_data_request::set_gate_id(::google::protobuf::uint32 value) {
  set_has_gate_id();
  gate_id_ = value;
}

// -------------------------------------------------------------------

// de_query_role_data_reply

// optional uint64 uid = 1;
inline bool de_query_role_data_reply::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void de_query_role_data_reply::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void de_query_role_data_reply::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void de_query_role_data_reply::clear_uid() {
  uid_ = GOOGLE_ULONGLONG(0);
  clear_has_uid();
}
inline ::google::protobuf::uint64 de_query_role_data_reply::uid() const {
  return uid_;
}
inline void de_query_role_data_reply::set_uid(::google::protobuf::uint64 value) {
  set_has_uid();
  uid_ = value;
}

// optional uint32 gate_id = 2;
inline bool de_query_role_data_reply::has_gate_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void de_query_role_data_reply::set_has_gate_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void de_query_role_data_reply::clear_has_gate_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void de_query_role_data_reply::clear_gate_id() {
  gate_id_ = 0u;
  clear_has_gate_id();
}
inline ::google::protobuf::uint32 de_query_role_data_reply::gate_id() const {
  return gate_id_;
}
inline void de_query_role_data_reply::set_gate_id(::google::protobuf::uint32 value) {
  set_has_gate_id();
  gate_id_ = value;
}

// -------------------------------------------------------------------

// ed_role_leave_game_notify

// -------------------------------------------------------------------

// ag_unreg_user_scene_notify

// optional uint64 uid = 1;
inline bool ag_unreg_user_scene_notify::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ag_unreg_user_scene_notify::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ag_unreg_user_scene_notify::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ag_unreg_user_scene_notify::clear_uid() {
  uid_ = GOOGLE_ULONGLONG(0);
  clear_has_uid();
}
inline ::google::protobuf::uint64 ag_unreg_user_scene_notify::uid() const {
  return uid_;
}
inline void ag_unreg_user_scene_notify::set_uid(::google::protobuf::uint64 value) {
  set_has_uid();
  uid_ = value;
}

// optional uint32 unreg_code = 2;
inline bool ag_unreg_user_scene_notify::has_unreg_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ag_unreg_user_scene_notify::set_has_unreg_code() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ag_unreg_user_scene_notify::clear_has_unreg_code() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ag_unreg_user_scene_notify::clear_unreg_code() {
  unreg_code_ = 0u;
  clear_has_unreg_code();
}
inline ::google::protobuf::uint32 ag_unreg_user_scene_notify::unreg_code() const {
  return unreg_code_;
}
inline void ag_unreg_user_scene_notify::set_unreg_code(::google::protobuf::uint32 value) {
  set_has_unreg_code();
  unreg_code_ = value;
}

// optional uint32 kick_reason = 3;
inline bool ag_unreg_user_scene_notify::has_kick_reason() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ag_unreg_user_scene_notify::set_has_kick_reason() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ag_unreg_user_scene_notify::clear_has_kick_reason() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ag_unreg_user_scene_notify::clear_kick_reason() {
  kick_reason_ = 0u;
  clear_has_kick_reason();
}
inline ::google::protobuf::uint32 ag_unreg_user_scene_notify::kick_reason() const {
  return kick_reason_;
}
inline void ag_unreg_user_scene_notify::set_kick_reason(::google::protobuf::uint32 value) {
  set_has_kick_reason();
  kick_reason_ = value;
}

// -------------------------------------------------------------------

// ga_unreg_user_scene_notify

// optional uint64 uid = 1;
inline bool ga_unreg_user_scene_notify::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ga_unreg_user_scene_notify::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ga_unreg_user_scene_notify::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ga_unreg_user_scene_notify::clear_uid() {
  uid_ = GOOGLE_ULONGLONG(0);
  clear_has_uid();
}
inline ::google::protobuf::uint64 ga_unreg_user_scene_notify::uid() const {
  return uid_;
}
inline void ga_unreg_user_scene_notify::set_uid(::google::protobuf::uint64 value) {
  set_has_uid();
  uid_ = value;
}

// optional uint32 unreg_code = 2;
inline bool ga_unreg_user_scene_notify::has_unreg_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ga_unreg_user_scene_notify::set_has_unreg_code() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ga_unreg_user_scene_notify::clear_has_unreg_code() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ga_unreg_user_scene_notify::clear_unreg_code() {
  unreg_code_ = 0u;
  clear_has_unreg_code();
}
inline ::google::protobuf::uint32 ga_unreg_user_scene_notify::unreg_code() const {
  return unreg_code_;
}
inline void ga_unreg_user_scene_notify::set_unreg_code(::google::protobuf::uint32 value) {
  set_has_unreg_code();
  unreg_code_ = value;
}

// -------------------------------------------------------------------

// ga_reg_user_success_notify

// optional uint32 uid = 1;
inline bool ga_reg_user_success_notify::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ga_reg_user_success_notify::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ga_reg_user_success_notify::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ga_reg_user_success_notify::clear_uid() {
  uid_ = 0u;
  clear_has_uid();
}
inline ::google::protobuf::uint32 ga_reg_user_success_notify::uid() const {
  return uid_;
}
inline void ga_reg_user_success_notify::set_uid(::google::protobuf::uint32 value) {
  set_has_uid();
  uid_ = value;
}

// optional uint32 gate_id = 2;
inline bool ga_reg_user_success_notify::has_gate_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ga_reg_user_success_notify::set_has_gate_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ga_reg_user_success_notify::clear_has_gate_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ga_reg_user_success_notify::clear_gate_id() {
  gate_id_ = 0u;
  clear_has_gate_id();
}
inline ::google::protobuf::uint32 ga_reg_user_success_notify::gate_id() const {
  return gate_id_;
}
inline void ga_reg_user_success_notify::set_gate_id(::google::protobuf::uint32 value) {
  set_has_gate_id();
  gate_id_ = value;
}

// -------------------------------------------------------------------

// ga_user_cross_server_notify

// optional .proto.server.cross_server_data data = 1;
inline bool ga_user_cross_server_notify::has_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ga_user_cross_server_notify::set_has_data() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ga_user_cross_server_notify::clear_has_data() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ga_user_cross_server_notify::clear_data() {
  if (data_ != NULL) data_->::proto::server::cross_server_data::Clear();
  clear_has_data();
}
inline const ::proto::server::cross_server_data& ga_user_cross_server_notify::data() const {
  return data_ != NULL ? *data_ : *default_instance_->data_;
}
inline ::proto::server::cross_server_data* ga_user_cross_server_notify::mutable_data() {
  set_has_data();
  if (data_ == NULL) data_ = new ::proto::server::cross_server_data;
  return data_;
}
inline ::proto::server::cross_server_data* ga_user_cross_server_notify::release_data() {
  clear_has_data();
  ::proto::server::cross_server_data* temp = data_;
  data_ = NULL;
  return temp;
}
inline void ga_user_cross_server_notify::set_allocated_data(::proto::server::cross_server_data* data) {
  delete data_;
  data_ = data;
  if (data) {
    set_has_data();
  } else {
    clear_has_data();
  }
}

// -------------------------------------------------------------------

// ge_city_trade_add_prosperity_value_notify

// required uint32 city_id = 1;
inline bool ge_city_trade_add_prosperity_value_notify::has_city_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ge_city_trade_add_prosperity_value_notify::set_has_city_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ge_city_trade_add_prosperity_value_notify::clear_has_city_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ge_city_trade_add_prosperity_value_notify::clear_city_id() {
  city_id_ = 0u;
  clear_has_city_id();
}
inline ::google::protobuf::uint32 ge_city_trade_add_prosperity_value_notify::city_id() const {
  return city_id_;
}
inline void ge_city_trade_add_prosperity_value_notify::set_city_id(::google::protobuf::uint32 value) {
  set_has_city_id();
  city_id_ = value;
}

// optional uint32 add_prosperity_value = 2;
inline bool ge_city_trade_add_prosperity_value_notify::has_add_prosperity_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ge_city_trade_add_prosperity_value_notify::set_has_add_prosperity_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ge_city_trade_add_prosperity_value_notify::clear_has_add_prosperity_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ge_city_trade_add_prosperity_value_notify::clear_add_prosperity_value() {
  add_prosperity_value_ = 0u;
  clear_has_add_prosperity_value();
}
inline ::google::protobuf::uint32 ge_city_trade_add_prosperity_value_notify::add_prosperity_value() const {
  return add_prosperity_value_;
}
inline void ge_city_trade_add_prosperity_value_notify::set_add_prosperity_value(::google::protobuf::uint32 value) {
  set_has_add_prosperity_value();
  add_prosperity_value_ = value;
}

// -------------------------------------------------------------------

// eg_city_base_info_notify

// required .proto.common.city_base_info city_info = 1;
inline bool eg_city_base_info_notify::has_city_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void eg_city_base_info_notify::set_has_city_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void eg_city_base_info_notify::clear_has_city_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void eg_city_base_info_notify::clear_city_info() {
  if (city_info_ != NULL) city_info_->::proto::common::city_base_info::Clear();
  clear_has_city_info();
}
inline const ::proto::common::city_base_info& eg_city_base_info_notify::city_info() const {
  return city_info_ != NULL ? *city_info_ : *default_instance_->city_info_;
}
inline ::proto::common::city_base_info* eg_city_base_info_notify::mutable_city_info() {
  set_has_city_info();
  if (city_info_ == NULL) city_info_ = new ::proto::common::city_base_info;
  return city_info_;
}
inline ::proto::common::city_base_info* eg_city_base_info_notify::release_city_info() {
  clear_has_city_info();
  ::proto::common::city_base_info* temp = city_info_;
  city_info_ = NULL;
  return temp;
}
inline void eg_city_base_info_notify::set_allocated_city_info(::proto::common::city_base_info* city_info) {
  delete city_info_;
  city_info_ = city_info;
  if (city_info) {
    set_has_city_info();
  } else {
    clear_has_city_info();
  }
}

// -------------------------------------------------------------------

// ge_get_city_list_request

// -------------------------------------------------------------------

// eg_get_city_list_reply

// repeated .proto.common.city_base_info city_list = 1;
inline int eg_get_city_list_reply::city_list_size() const {
  return city_list_.size();
}
inline void eg_get_city_list_reply::clear_city_list() {
  city_list_.Clear();
}
inline const ::proto::common::city_base_info& eg_get_city_list_reply::city_list(int index) const {
  return city_list_.Get(index);
}
inline ::proto::common::city_base_info* eg_get_city_list_reply::mutable_city_list(int index) {
  return city_list_.Mutable(index);
}
inline ::proto::common::city_base_info* eg_get_city_list_reply::add_city_list() {
  return city_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::common::city_base_info >&
eg_get_city_list_reply::city_list() const {
  return city_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto::common::city_base_info >*
eg_get_city_list_reply::mutable_city_list() {
  return &city_list_;
}

// -------------------------------------------------------------------

// eh_test_request

// -------------------------------------------------------------------

// he_test_reply

// -------------------------------------------------------------------

// ge_update_rank_notify

// optional uint32 rank_type = 1;
inline bool ge_update_rank_notify::has_rank_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ge_update_rank_notify::set_has_rank_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ge_update_rank_notify::clear_has_rank_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ge_update_rank_notify::clear_rank_type() {
  rank_type_ = 0u;
  clear_has_rank_type();
}
inline ::google::protobuf::uint32 ge_update_rank_notify::rank_type() const {
  return rank_type_;
}
inline void ge_update_rank_notify::set_rank_type(::google::protobuf::uint32 value) {
  set_has_rank_type();
  rank_type_ = value;
}

// optional uint32 key = 2;
inline bool ge_update_rank_notify::has_key() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ge_update_rank_notify::set_has_key() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ge_update_rank_notify::clear_has_key() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ge_update_rank_notify::clear_key() {
  key_ = 0u;
  clear_has_key();
}
inline ::google::protobuf::uint32 ge_update_rank_notify::key() const {
  return key_;
}
inline void ge_update_rank_notify::set_key(::google::protobuf::uint32 value) {
  set_has_key();
  key_ = value;
}

// optional uint64 owner = 3;
inline bool ge_update_rank_notify::has_owner() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ge_update_rank_notify::set_has_owner() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ge_update_rank_notify::clear_has_owner() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ge_update_rank_notify::clear_owner() {
  owner_ = GOOGLE_ULONGLONG(0);
  clear_has_owner();
}
inline ::google::protobuf::uint64 ge_update_rank_notify::owner() const {
  return owner_;
}
inline void ge_update_rank_notify::set_owner(::google::protobuf::uint64 value) {
  set_has_owner();
  owner_ = value;
}

// optional .proto.common.rank_data_extra extra = 4;
inline bool ge_update_rank_notify::has_extra() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ge_update_rank_notify::set_has_extra() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ge_update_rank_notify::clear_has_extra() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ge_update_rank_notify::clear_extra() {
  if (extra_ != NULL) extra_->::proto::common::rank_data_extra::Clear();
  clear_has_extra();
}
inline const ::proto::common::rank_data_extra& ge_update_rank_notify::extra() const {
  return extra_ != NULL ? *extra_ : *default_instance_->extra_;
}
inline ::proto::common::rank_data_extra* ge_update_rank_notify::mutable_extra() {
  set_has_extra();
  if (extra_ == NULL) extra_ = new ::proto::common::rank_data_extra;
  return extra_;
}
inline ::proto::common::rank_data_extra* ge_update_rank_notify::release_extra() {
  clear_has_extra();
  ::proto::common::rank_data_extra* temp = extra_;
  extra_ = NULL;
  return temp;
}
inline void ge_update_rank_notify::set_allocated_extra(::proto::common::rank_data_extra* extra) {
  delete extra_;
  extra_ = extra;
  if (extra) {
    set_has_extra();
  } else {
    clear_has_extra();
  }
}

// -------------------------------------------------------------------

// ge_create_family_request

// optional string name = 1;
inline bool ge_create_family_request::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ge_create_family_request::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ge_create_family_request::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ge_create_family_request::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& ge_create_family_request::name() const {
  return *name_;
}
inline void ge_create_family_request::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void ge_create_family_request::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void ge_create_family_request::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ge_create_family_request::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* ge_create_family_request::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ge_create_family_request::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string declaration = 2;
inline bool ge_create_family_request::has_declaration() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ge_create_family_request::set_has_declaration() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ge_create_family_request::clear_has_declaration() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ge_create_family_request::clear_declaration() {
  if (declaration_ != &::google::protobuf::internal::kEmptyString) {
    declaration_->clear();
  }
  clear_has_declaration();
}
inline const ::std::string& ge_create_family_request::declaration() const {
  return *declaration_;
}
inline void ge_create_family_request::set_declaration(const ::std::string& value) {
  set_has_declaration();
  if (declaration_ == &::google::protobuf::internal::kEmptyString) {
    declaration_ = new ::std::string;
  }
  declaration_->assign(value);
}
inline void ge_create_family_request::set_declaration(const char* value) {
  set_has_declaration();
  if (declaration_ == &::google::protobuf::internal::kEmptyString) {
    declaration_ = new ::std::string;
  }
  declaration_->assign(value);
}
inline void ge_create_family_request::set_declaration(const char* value, size_t size) {
  set_has_declaration();
  if (declaration_ == &::google::protobuf::internal::kEmptyString) {
    declaration_ = new ::std::string;
  }
  declaration_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ge_create_family_request::mutable_declaration() {
  set_has_declaration();
  if (declaration_ == &::google::protobuf::internal::kEmptyString) {
    declaration_ = new ::std::string;
  }
  return declaration_;
}
inline ::std::string* ge_create_family_request::release_declaration() {
  clear_has_declaration();
  if (declaration_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = declaration_;
    declaration_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ge_create_family_request::set_allocated_declaration(::std::string* declaration) {
  if (declaration_ != &::google::protobuf::internal::kEmptyString) {
    delete declaration_;
  }
  if (declaration) {
    set_has_declaration();
    declaration_ = declaration;
  } else {
    clear_has_declaration();
    declaration_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// eg_update_family_info_notify

// optional uint64 id = 1;
inline bool eg_update_family_info_notify::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void eg_update_family_info_notify::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void eg_update_family_info_notify::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void eg_update_family_info_notify::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::uint64 eg_update_family_info_notify::id() const {
  return id_;
}
inline void eg_update_family_info_notify::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
}

// optional string name = 2;
inline bool eg_update_family_info_notify::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void eg_update_family_info_notify::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void eg_update_family_info_notify::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void eg_update_family_info_notify::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& eg_update_family_info_notify::name() const {
  return *name_;
}
inline void eg_update_family_info_notify::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void eg_update_family_info_notify::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void eg_update_family_info_notify::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* eg_update_family_info_notify::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* eg_update_family_info_notify::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void eg_update_family_info_notify::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 officer = 3;
inline bool eg_update_family_info_notify::has_officer() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void eg_update_family_info_notify::set_has_officer() {
  _has_bits_[0] |= 0x00000004u;
}
inline void eg_update_family_info_notify::clear_has_officer() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void eg_update_family_info_notify::clear_officer() {
  officer_ = 0u;
  clear_has_officer();
}
inline ::google::protobuf::uint32 eg_update_family_info_notify::officer() const {
  return officer_;
}
inline void eg_update_family_info_notify::set_officer(::google::protobuf::uint32 value) {
  set_has_officer();
  officer_ = value;
}

// optional uint32 country_id = 4;
inline bool eg_update_family_info_notify::has_country_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void eg_update_family_info_notify::set_has_country_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void eg_update_family_info_notify::clear_has_country_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void eg_update_family_info_notify::clear_country_id() {
  country_id_ = 0u;
  clear_has_country_id();
}
inline ::google::protobuf::uint32 eg_update_family_info_notify::country_id() const {
  return country_id_;
}
inline void eg_update_family_info_notify::set_country_id(::google::protobuf::uint32 value) {
  set_has_country_id();
  country_id_ = value;
}

// optional uint32 family_lv = 5;
inline bool eg_update_family_info_notify::has_family_lv() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void eg_update_family_info_notify::set_has_family_lv() {
  _has_bits_[0] |= 0x00000010u;
}
inline void eg_update_family_info_notify::clear_has_family_lv() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void eg_update_family_info_notify::clear_family_lv() {
  family_lv_ = 0u;
  clear_has_family_lv();
}
inline ::google::protobuf::uint32 eg_update_family_info_notify::family_lv() const {
  return family_lv_;
}
inline void eg_update_family_info_notify::set_family_lv(::google::protobuf::uint32 value) {
  set_has_family_lv();
  family_lv_ = value;
}

// -------------------------------------------------------------------

// eg_create_family_reply

// optional uint32 reply_code = 1;
inline bool eg_create_family_reply::has_reply_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void eg_create_family_reply::set_has_reply_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void eg_create_family_reply::clear_has_reply_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void eg_create_family_reply::clear_reply_code() {
  reply_code_ = 0u;
  clear_has_reply_code();
}
inline ::google::protobuf::uint32 eg_create_family_reply::reply_code() const {
  return reply_code_;
}
inline void eg_create_family_reply::set_reply_code(::google::protobuf::uint32 value) {
  set_has_reply_code();
  reply_code_ = value;
}

// optional .proto.server.eg_update_family_info_notify info = 2;
inline bool eg_create_family_reply::has_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void eg_create_family_reply::set_has_info() {
  _has_bits_[0] |= 0x00000002u;
}
inline void eg_create_family_reply::clear_has_info() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void eg_create_family_reply::clear_info() {
  if (info_ != NULL) info_->::proto::server::eg_update_family_info_notify::Clear();
  clear_has_info();
}
inline const ::proto::server::eg_update_family_info_notify& eg_create_family_reply::info() const {
  return info_ != NULL ? *info_ : *default_instance_->info_;
}
inline ::proto::server::eg_update_family_info_notify* eg_create_family_reply::mutable_info() {
  set_has_info();
  if (info_ == NULL) info_ = new ::proto::server::eg_update_family_info_notify;
  return info_;
}
inline ::proto::server::eg_update_family_info_notify* eg_create_family_reply::release_info() {
  clear_has_info();
  ::proto::server::eg_update_family_info_notify* temp = info_;
  info_ = NULL;
  return temp;
}
inline void eg_create_family_reply::set_allocated_info(::proto::server::eg_update_family_info_notify* info) {
  delete info_;
  info_ = info;
  if (info) {
    set_has_info();
  } else {
    clear_has_info();
  }
}

// -------------------------------------------------------------------

// ge_impeach_family_general_request

// -------------------------------------------------------------------

// eg_impeach_family_general_reply

// optional uint32 reply_code = 1;
inline bool eg_impeach_family_general_reply::has_reply_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void eg_impeach_family_general_reply::set_has_reply_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void eg_impeach_family_general_reply::clear_has_reply_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void eg_impeach_family_general_reply::clear_reply_code() {
  reply_code_ = 0u;
  clear_has_reply_code();
}
inline ::google::protobuf::uint32 eg_impeach_family_general_reply::reply_code() const {
  return reply_code_;
}
inline void eg_impeach_family_general_reply::set_reply_code(::google::protobuf::uint32 value) {
  set_has_reply_code();
  reply_code_ = value;
}

// -------------------------------------------------------------------

// eg_notify_game_impeach_result

// optional bool is_succeed = 1;
inline bool eg_notify_game_impeach_result::has_is_succeed() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void eg_notify_game_impeach_result::set_has_is_succeed() {
  _has_bits_[0] |= 0x00000001u;
}
inline void eg_notify_game_impeach_result::clear_has_is_succeed() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void eg_notify_game_impeach_result::clear_is_succeed() {
  is_succeed_ = false;
  clear_has_is_succeed();
}
inline bool eg_notify_game_impeach_result::is_succeed() const {
  return is_succeed_;
}
inline void eg_notify_game_impeach_result::set_is_succeed(bool value) {
  set_has_is_succeed();
  is_succeed_ = value;
}

// optional uint32 money_return = 2;
inline bool eg_notify_game_impeach_result::has_money_return() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void eg_notify_game_impeach_result::set_has_money_return() {
  _has_bits_[0] |= 0x00000002u;
}
inline void eg_notify_game_impeach_result::clear_has_money_return() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void eg_notify_game_impeach_result::clear_money_return() {
  money_return_ = 0u;
  clear_has_money_return();
}
inline ::google::protobuf::uint32 eg_notify_game_impeach_result::money_return() const {
  return money_return_;
}
inline void eg_notify_game_impeach_result::set_money_return(::google::protobuf::uint32 value) {
  set_has_money_return();
  money_return_ = value;
}

// optional uint64 role_id = 3;
inline bool eg_notify_game_impeach_result::has_role_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void eg_notify_game_impeach_result::set_has_role_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void eg_notify_game_impeach_result::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void eg_notify_game_impeach_result::clear_role_id() {
  role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_role_id();
}
inline ::google::protobuf::uint64 eg_notify_game_impeach_result::role_id() const {
  return role_id_;
}
inline void eg_notify_game_impeach_result::set_role_id(::google::protobuf::uint64 value) {
  set_has_role_id();
  role_id_ = value;
}

// -------------------------------------------------------------------

// family_war_dungeon_info

// optional uint64 family_id = 1;
inline bool family_war_dungeon_info::has_family_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void family_war_dungeon_info::set_has_family_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void family_war_dungeon_info::clear_has_family_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void family_war_dungeon_info::clear_family_id() {
  family_id_ = GOOGLE_ULONGLONG(0);
  clear_has_family_id();
}
inline ::google::protobuf::uint64 family_war_dungeon_info::family_id() const {
  return family_id_;
}
inline void family_war_dungeon_info::set_family_id(::google::protobuf::uint64 value) {
  set_has_family_id();
  family_id_ = value;
}

// optional string family_name = 2;
inline bool family_war_dungeon_info::has_family_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void family_war_dungeon_info::set_has_family_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void family_war_dungeon_info::clear_has_family_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void family_war_dungeon_info::clear_family_name() {
  if (family_name_ != &::google::protobuf::internal::kEmptyString) {
    family_name_->clear();
  }
  clear_has_family_name();
}
inline const ::std::string& family_war_dungeon_info::family_name() const {
  return *family_name_;
}
inline void family_war_dungeon_info::set_family_name(const ::std::string& value) {
  set_has_family_name();
  if (family_name_ == &::google::protobuf::internal::kEmptyString) {
    family_name_ = new ::std::string;
  }
  family_name_->assign(value);
}
inline void family_war_dungeon_info::set_family_name(const char* value) {
  set_has_family_name();
  if (family_name_ == &::google::protobuf::internal::kEmptyString) {
    family_name_ = new ::std::string;
  }
  family_name_->assign(value);
}
inline void family_war_dungeon_info::set_family_name(const char* value, size_t size) {
  set_has_family_name();
  if (family_name_ == &::google::protobuf::internal::kEmptyString) {
    family_name_ = new ::std::string;
  }
  family_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* family_war_dungeon_info::mutable_family_name() {
  set_has_family_name();
  if (family_name_ == &::google::protobuf::internal::kEmptyString) {
    family_name_ = new ::std::string;
  }
  return family_name_;
}
inline ::std::string* family_war_dungeon_info::release_family_name() {
  clear_has_family_name();
  if (family_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = family_name_;
    family_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void family_war_dungeon_info::set_allocated_family_name(::std::string* family_name) {
  if (family_name_ != &::google::protobuf::internal::kEmptyString) {
    delete family_name_;
  }
  if (family_name) {
    set_has_family_name();
    family_name_ = family_name;
  } else {
    clear_has_family_name();
    family_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// family_war_dungeon_data

// optional uint32 id = 1;
inline bool family_war_dungeon_data::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void family_war_dungeon_data::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void family_war_dungeon_data::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void family_war_dungeon_data::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 family_war_dungeon_data::id() const {
  return id_;
}
inline void family_war_dungeon_data::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// optional .proto.server.family_war_dungeon_info left_family = 2;
inline bool family_war_dungeon_data::has_left_family() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void family_war_dungeon_data::set_has_left_family() {
  _has_bits_[0] |= 0x00000002u;
}
inline void family_war_dungeon_data::clear_has_left_family() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void family_war_dungeon_data::clear_left_family() {
  if (left_family_ != NULL) left_family_->::proto::server::family_war_dungeon_info::Clear();
  clear_has_left_family();
}
inline const ::proto::server::family_war_dungeon_info& family_war_dungeon_data::left_family() const {
  return left_family_ != NULL ? *left_family_ : *default_instance_->left_family_;
}
inline ::proto::server::family_war_dungeon_info* family_war_dungeon_data::mutable_left_family() {
  set_has_left_family();
  if (left_family_ == NULL) left_family_ = new ::proto::server::family_war_dungeon_info;
  return left_family_;
}
inline ::proto::server::family_war_dungeon_info* family_war_dungeon_data::release_left_family() {
  clear_has_left_family();
  ::proto::server::family_war_dungeon_info* temp = left_family_;
  left_family_ = NULL;
  return temp;
}
inline void family_war_dungeon_data::set_allocated_left_family(::proto::server::family_war_dungeon_info* left_family) {
  delete left_family_;
  left_family_ = left_family;
  if (left_family) {
    set_has_left_family();
  } else {
    clear_has_left_family();
  }
}

// optional .proto.server.family_war_dungeon_info right_family = 3;
inline bool family_war_dungeon_data::has_right_family() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void family_war_dungeon_data::set_has_right_family() {
  _has_bits_[0] |= 0x00000004u;
}
inline void family_war_dungeon_data::clear_has_right_family() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void family_war_dungeon_data::clear_right_family() {
  if (right_family_ != NULL) right_family_->::proto::server::family_war_dungeon_info::Clear();
  clear_has_right_family();
}
inline const ::proto::server::family_war_dungeon_info& family_war_dungeon_data::right_family() const {
  return right_family_ != NULL ? *right_family_ : *default_instance_->right_family_;
}
inline ::proto::server::family_war_dungeon_info* family_war_dungeon_data::mutable_right_family() {
  set_has_right_family();
  if (right_family_ == NULL) right_family_ = new ::proto::server::family_war_dungeon_info;
  return right_family_;
}
inline ::proto::server::family_war_dungeon_info* family_war_dungeon_data::release_right_family() {
  clear_has_right_family();
  ::proto::server::family_war_dungeon_info* temp = right_family_;
  right_family_ = NULL;
  return temp;
}
inline void family_war_dungeon_data::set_allocated_right_family(::proto::server::family_war_dungeon_info* right_family) {
  delete right_family_;
  right_family_ = right_family;
  if (right_family) {
    set_has_right_family();
  } else {
    clear_has_right_family();
  }
}

// -------------------------------------------------------------------

// family_war_dungeon_back

// optional uint32 id = 1;
inline bool family_war_dungeon_back::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void family_war_dungeon_back::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void family_war_dungeon_back::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void family_war_dungeon_back::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 family_war_dungeon_back::id() const {
  return id_;
}
inline void family_war_dungeon_back::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// optional .proto.server.game_scene_reg_info info = 2;
inline bool family_war_dungeon_back::has_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void family_war_dungeon_back::set_has_info() {
  _has_bits_[0] |= 0x00000002u;
}
inline void family_war_dungeon_back::clear_has_info() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void family_war_dungeon_back::clear_info() {
  if (info_ != NULL) info_->::proto::server::game_scene_reg_info::Clear();
  clear_has_info();
}
inline const ::proto::server::game_scene_reg_info& family_war_dungeon_back::info() const {
  return info_ != NULL ? *info_ : *default_instance_->info_;
}
inline ::proto::server::game_scene_reg_info* family_war_dungeon_back::mutable_info() {
  set_has_info();
  if (info_ == NULL) info_ = new ::proto::server::game_scene_reg_info;
  return info_;
}
inline ::proto::server::game_scene_reg_info* family_war_dungeon_back::release_info() {
  clear_has_info();
  ::proto::server::game_scene_reg_info* temp = info_;
  info_ = NULL;
  return temp;
}
inline void family_war_dungeon_back::set_allocated_info(::proto::server::game_scene_reg_info* info) {
  delete info_;
  info_ = info;
  if (info) {
    set_has_info();
  } else {
    clear_has_info();
  }
}

// -------------------------------------------------------------------

// eg_prepare_family_war_request

// optional uint32 start_time = 1;
inline bool eg_prepare_family_war_request::has_start_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void eg_prepare_family_war_request::set_has_start_time() {
  _has_bits_[0] |= 0x00000001u;
}
inline void eg_prepare_family_war_request::clear_has_start_time() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void eg_prepare_family_war_request::clear_start_time() {
  start_time_ = 0u;
  clear_has_start_time();
}
inline ::google::protobuf::uint32 eg_prepare_family_war_request::start_time() const {
  return start_time_;
}
inline void eg_prepare_family_war_request::set_start_time(::google::protobuf::uint32 value) {
  set_has_start_time();
  start_time_ = value;
}

// repeated .proto.server.family_war_dungeon_data family_war_data = 2;
inline int eg_prepare_family_war_request::family_war_data_size() const {
  return family_war_data_.size();
}
inline void eg_prepare_family_war_request::clear_family_war_data() {
  family_war_data_.Clear();
}
inline const ::proto::server::family_war_dungeon_data& eg_prepare_family_war_request::family_war_data(int index) const {
  return family_war_data_.Get(index);
}
inline ::proto::server::family_war_dungeon_data* eg_prepare_family_war_request::mutable_family_war_data(int index) {
  return family_war_data_.Mutable(index);
}
inline ::proto::server::family_war_dungeon_data* eg_prepare_family_war_request::add_family_war_data() {
  return family_war_data_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::server::family_war_dungeon_data >&
eg_prepare_family_war_request::family_war_data() const {
  return family_war_data_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto::server::family_war_dungeon_data >*
eg_prepare_family_war_request::mutable_family_war_data() {
  return &family_war_data_;
}

// -------------------------------------------------------------------

// ge_prepare_family_war_reply

// repeated .proto.server.family_war_dungeon_back dungeons = 1;
inline int ge_prepare_family_war_reply::dungeons_size() const {
  return dungeons_.size();
}
inline void ge_prepare_family_war_reply::clear_dungeons() {
  dungeons_.Clear();
}
inline const ::proto::server::family_war_dungeon_back& ge_prepare_family_war_reply::dungeons(int index) const {
  return dungeons_.Get(index);
}
inline ::proto::server::family_war_dungeon_back* ge_prepare_family_war_reply::mutable_dungeons(int index) {
  return dungeons_.Mutable(index);
}
inline ::proto::server::family_war_dungeon_back* ge_prepare_family_war_reply::add_dungeons() {
  return dungeons_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::server::family_war_dungeon_back >&
ge_prepare_family_war_reply::dungeons() const {
  return dungeons_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto::server::family_war_dungeon_back >*
ge_prepare_family_war_reply::mutable_dungeons() {
  return &dungeons_;
}

// -------------------------------------------------------------------

// eg_family_war_start_notify

// optional uint32 end_time = 1;
inline bool eg_family_war_start_notify::has_end_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void eg_family_war_start_notify::set_has_end_time() {
  _has_bits_[0] |= 0x00000001u;
}
inline void eg_family_war_start_notify::clear_has_end_time() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void eg_family_war_start_notify::clear_end_time() {
  end_time_ = 0u;
  clear_has_end_time();
}
inline ::google::protobuf::uint32 eg_family_war_start_notify::end_time() const {
  return end_time_;
}
inline void eg_family_war_start_notify::set_end_time(::google::protobuf::uint32 value) {
  set_has_end_time();
  end_time_ = value;
}

// -------------------------------------------------------------------

// eg_family_war_end_notify

// -------------------------------------------------------------------

// eg_enter_family_war_scene_request

// optional uint64 uid = 1;
inline bool eg_enter_family_war_scene_request::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void eg_enter_family_war_scene_request::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void eg_enter_family_war_scene_request::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void eg_enter_family_war_scene_request::clear_uid() {
  uid_ = GOOGLE_ULONGLONG(0);
  clear_has_uid();
}
inline ::google::protobuf::uint64 eg_enter_family_war_scene_request::uid() const {
  return uid_;
}
inline void eg_enter_family_war_scene_request::set_uid(::google::protobuf::uint64 value) {
  set_has_uid();
  uid_ = value;
}

// optional uint64 family_dungeon_id = 2;
inline bool eg_enter_family_war_scene_request::has_family_dungeon_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void eg_enter_family_war_scene_request::set_has_family_dungeon_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void eg_enter_family_war_scene_request::clear_has_family_dungeon_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void eg_enter_family_war_scene_request::clear_family_dungeon_id() {
  family_dungeon_id_ = GOOGLE_ULONGLONG(0);
  clear_has_family_dungeon_id();
}
inline ::google::protobuf::uint64 eg_enter_family_war_scene_request::family_dungeon_id() const {
  return family_dungeon_id_;
}
inline void eg_enter_family_war_scene_request::set_family_dungeon_id(::google::protobuf::uint64 value) {
  set_has_family_dungeon_id();
  family_dungeon_id_ = value;
}

// -------------------------------------------------------------------

// family_war_personal

// optional uint64 uid = 1;
inline bool family_war_personal::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void family_war_personal::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void family_war_personal::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void family_war_personal::clear_uid() {
  uid_ = GOOGLE_ULONGLONG(0);
  clear_has_uid();
}
inline ::google::protobuf::uint64 family_war_personal::uid() const {
  return uid_;
}
inline void family_war_personal::set_uid(::google::protobuf::uint64 value) {
  set_has_uid();
  uid_ = value;
}

// optional uint64 exploit = 2;
inline bool family_war_personal::has_exploit() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void family_war_personal::set_has_exploit() {
  _has_bits_[0] |= 0x00000002u;
}
inline void family_war_personal::clear_has_exploit() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void family_war_personal::clear_exploit() {
  exploit_ = GOOGLE_ULONGLONG(0);
  clear_has_exploit();
}
inline ::google::protobuf::uint64 family_war_personal::exploit() const {
  return exploit_;
}
inline void family_war_personal::set_exploit(::google::protobuf::uint64 value) {
  set_has_exploit();
  exploit_ = value;
}

// optional uint32 rank = 3;
inline bool family_war_personal::has_rank() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void family_war_personal::set_has_rank() {
  _has_bits_[0] |= 0x00000004u;
}
inline void family_war_personal::clear_has_rank() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void family_war_personal::clear_rank() {
  rank_ = 0u;
  clear_has_rank();
}
inline ::google::protobuf::uint32 family_war_personal::rank() const {
  return rank_;
}
inline void family_war_personal::set_rank(::google::protobuf::uint32 value) {
  set_has_rank();
  rank_ = value;
}

// optional uint32 rank_level = 4;
inline bool family_war_personal::has_rank_level() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void family_war_personal::set_has_rank_level() {
  _has_bits_[0] |= 0x00000008u;
}
inline void family_war_personal::clear_has_rank_level() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void family_war_personal::clear_rank_level() {
  rank_level_ = 0u;
  clear_has_rank_level();
}
inline ::google::protobuf::uint32 family_war_personal::rank_level() const {
  return rank_level_;
}
inline void family_war_personal::set_rank_level(::google::protobuf::uint32 value) {
  set_has_rank_level();
  rank_level_ = value;
}

// optional uint32 exploit_level = 5;
inline bool family_war_personal::has_exploit_level() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void family_war_personal::set_has_exploit_level() {
  _has_bits_[0] |= 0x00000010u;
}
inline void family_war_personal::clear_has_exploit_level() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void family_war_personal::clear_exploit_level() {
  exploit_level_ = 0u;
  clear_has_exploit_level();
}
inline ::google::protobuf::uint32 family_war_personal::exploit_level() const {
  return exploit_level_;
}
inline void family_war_personal::set_exploit_level(::google::protobuf::uint32 value) {
  set_has_exploit_level();
  exploit_level_ = value;
}

// -------------------------------------------------------------------

// family_war_result_data

// optional uint32 id = 1;
inline bool family_war_result_data::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void family_war_result_data::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void family_war_result_data::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void family_war_result_data::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 family_war_result_data::id() const {
  return id_;
}
inline void family_war_result_data::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// optional uint64 win_family_id = 2;
inline bool family_war_result_data::has_win_family_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void family_war_result_data::set_has_win_family_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void family_war_result_data::clear_has_win_family_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void family_war_result_data::clear_win_family_id() {
  win_family_id_ = GOOGLE_ULONGLONG(0);
  clear_has_win_family_id();
}
inline ::google::protobuf::uint64 family_war_result_data::win_family_id() const {
  return win_family_id_;
}
inline void family_war_result_data::set_win_family_id(::google::protobuf::uint64 value) {
  set_has_win_family_id();
  win_family_id_ = value;
}

// optional uint32 left_family_score = 3;
inline bool family_war_result_data::has_left_family_score() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void family_war_result_data::set_has_left_family_score() {
  _has_bits_[0] |= 0x00000004u;
}
inline void family_war_result_data::clear_has_left_family_score() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void family_war_result_data::clear_left_family_score() {
  left_family_score_ = 0u;
  clear_has_left_family_score();
}
inline ::google::protobuf::uint32 family_war_result_data::left_family_score() const {
  return left_family_score_;
}
inline void family_war_result_data::set_left_family_score(::google::protobuf::uint32 value) {
  set_has_left_family_score();
  left_family_score_ = value;
}

// optional uint32 right_family_score = 4;
inline bool family_war_result_data::has_right_family_score() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void family_war_result_data::set_has_right_family_score() {
  _has_bits_[0] |= 0x00000008u;
}
inline void family_war_result_data::clear_has_right_family_score() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void family_war_result_data::clear_right_family_score() {
  right_family_score_ = 0u;
  clear_has_right_family_score();
}
inline ::google::protobuf::uint32 family_war_result_data::right_family_score() const {
  return right_family_score_;
}
inline void family_war_result_data::set_right_family_score(::google::protobuf::uint32 value) {
  set_has_right_family_score();
  right_family_score_ = value;
}

// repeated .proto.server.family_war_personal all_roles = 5;
inline int family_war_result_data::all_roles_size() const {
  return all_roles_.size();
}
inline void family_war_result_data::clear_all_roles() {
  all_roles_.Clear();
}
inline const ::proto::server::family_war_personal& family_war_result_data::all_roles(int index) const {
  return all_roles_.Get(index);
}
inline ::proto::server::family_war_personal* family_war_result_data::mutable_all_roles(int index) {
  return all_roles_.Mutable(index);
}
inline ::proto::server::family_war_personal* family_war_result_data::add_all_roles() {
  return all_roles_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::server::family_war_personal >&
family_war_result_data::all_roles() const {
  return all_roles_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto::server::family_war_personal >*
family_war_result_data::mutable_all_roles() {
  return &all_roles_;
}

// -------------------------------------------------------------------

// ge_family_war_early_result_notify

// optional .proto.server.family_war_result_data data = 1;
inline bool ge_family_war_early_result_notify::has_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ge_family_war_early_result_notify::set_has_data() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ge_family_war_early_result_notify::clear_has_data() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ge_family_war_early_result_notify::clear_data() {
  if (data_ != NULL) data_->::proto::server::family_war_result_data::Clear();
  clear_has_data();
}
inline const ::proto::server::family_war_result_data& ge_family_war_early_result_notify::data() const {
  return data_ != NULL ? *data_ : *default_instance_->data_;
}
inline ::proto::server::family_war_result_data* ge_family_war_early_result_notify::mutable_data() {
  set_has_data();
  if (data_ == NULL) data_ = new ::proto::server::family_war_result_data;
  return data_;
}
inline ::proto::server::family_war_result_data* ge_family_war_early_result_notify::release_data() {
  clear_has_data();
  ::proto::server::family_war_result_data* temp = data_;
  data_ = NULL;
  return temp;
}
inline void ge_family_war_early_result_notify::set_allocated_data(::proto::server::family_war_result_data* data) {
  delete data_;
  data_ = data;
  if (data) {
    set_has_data();
  } else {
    clear_has_data();
  }
}

// -------------------------------------------------------------------

// ge_family_war_result_notify

// repeated .proto.server.family_war_result_data datas = 1;
inline int ge_family_war_result_notify::datas_size() const {
  return datas_.size();
}
inline void ge_family_war_result_notify::clear_datas() {
  datas_.Clear();
}
inline const ::proto::server::family_war_result_data& ge_family_war_result_notify::datas(int index) const {
  return datas_.Get(index);
}
inline ::proto::server::family_war_result_data* ge_family_war_result_notify::mutable_datas(int index) {
  return datas_.Mutable(index);
}
inline ::proto::server::family_war_result_data* ge_family_war_result_notify::add_datas() {
  return datas_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::server::family_war_result_data >&
ge_family_war_result_notify::datas() const {
  return datas_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto::server::family_war_result_data >*
ge_family_war_result_notify::mutable_datas() {
  return &datas_;
}

// -------------------------------------------------------------------

// ge_family_update_glory_notify

// optional uint64 family_id = 1;
inline bool ge_family_update_glory_notify::has_family_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ge_family_update_glory_notify::set_has_family_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ge_family_update_glory_notify::clear_has_family_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ge_family_update_glory_notify::clear_family_id() {
  family_id_ = GOOGLE_ULONGLONG(0);
  clear_has_family_id();
}
inline ::google::protobuf::uint64 ge_family_update_glory_notify::family_id() const {
  return family_id_;
}
inline void ge_family_update_glory_notify::set_family_id(::google::protobuf::uint64 value) {
  set_has_family_id();
  family_id_ = value;
}

// optional uint32 glory = 2;
inline bool ge_family_update_glory_notify::has_glory() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ge_family_update_glory_notify::set_has_glory() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ge_family_update_glory_notify::clear_has_glory() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ge_family_update_glory_notify::clear_glory() {
  glory_ = 0u;
  clear_has_glory();
}
inline ::google::protobuf::uint32 ge_family_update_glory_notify::glory() const {
  return glory_;
}
inline void ge_family_update_glory_notify::set_glory(::google::protobuf::uint32 value) {
  set_has_glory();
  glory_ = value;
}

// -------------------------------------------------------------------

// ge_family_prayer_request

// optional uint32 hero_tid = 1;
inline bool ge_family_prayer_request::has_hero_tid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ge_family_prayer_request::set_has_hero_tid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ge_family_prayer_request::clear_has_hero_tid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ge_family_prayer_request::clear_hero_tid() {
  hero_tid_ = 0u;
  clear_has_hero_tid();
}
inline ::google::protobuf::uint32 ge_family_prayer_request::hero_tid() const {
  return hero_tid_;
}
inline void ge_family_prayer_request::set_hero_tid(::google::protobuf::uint32 value) {
  set_has_hero_tid();
  hero_tid_ = value;
}

// optional uint32 hero_num = 2;
inline bool ge_family_prayer_request::has_hero_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ge_family_prayer_request::set_has_hero_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ge_family_prayer_request::clear_has_hero_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ge_family_prayer_request::clear_hero_num() {
  hero_num_ = 0u;
  clear_has_hero_num();
}
inline ::google::protobuf::uint32 ge_family_prayer_request::hero_num() const {
  return hero_num_;
}
inline void ge_family_prayer_request::set_hero_num(::google::protobuf::uint32 value) {
  set_has_hero_num();
  hero_num_ = value;
}

// -------------------------------------------------------------------

// ge_family_prayer_gift_request

// optional uint64 role_id = 1;
inline bool ge_family_prayer_gift_request::has_role_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ge_family_prayer_gift_request::set_has_role_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ge_family_prayer_gift_request::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ge_family_prayer_gift_request::clear_role_id() {
  role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_role_id();
}
inline ::google::protobuf::uint64 ge_family_prayer_gift_request::role_id() const {
  return role_id_;
}
inline void ge_family_prayer_gift_request::set_role_id(::google::protobuf::uint64 value) {
  set_has_role_id();
  role_id_ = value;
}

// optional uint32 hero_tid = 2;
inline bool ge_family_prayer_gift_request::has_hero_tid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ge_family_prayer_gift_request::set_has_hero_tid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ge_family_prayer_gift_request::clear_has_hero_tid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ge_family_prayer_gift_request::clear_hero_tid() {
  hero_tid_ = 0u;
  clear_has_hero_tid();
}
inline ::google::protobuf::uint32 ge_family_prayer_gift_request::hero_tid() const {
  return hero_tid_;
}
inline void ge_family_prayer_gift_request::set_hero_tid(::google::protobuf::uint32 value) {
  set_has_hero_tid();
  hero_tid_ = value;
}

// optional uint32 hero_num = 3;
inline bool ge_family_prayer_gift_request::has_hero_num() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ge_family_prayer_gift_request::set_has_hero_num() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ge_family_prayer_gift_request::clear_has_hero_num() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ge_family_prayer_gift_request::clear_hero_num() {
  hero_num_ = 0u;
  clear_has_hero_num();
}
inline ::google::protobuf::uint32 ge_family_prayer_gift_request::hero_num() const {
  return hero_num_;
}
inline void ge_family_prayer_gift_request::set_hero_num(::google::protobuf::uint32 value) {
  set_has_hero_num();
  hero_num_ = value;
}

// optional uint32 hero_rarity = 4;
inline bool ge_family_prayer_gift_request::has_hero_rarity() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ge_family_prayer_gift_request::set_has_hero_rarity() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ge_family_prayer_gift_request::clear_has_hero_rarity() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ge_family_prayer_gift_request::clear_hero_rarity() {
  hero_rarity_ = 0u;
  clear_has_hero_rarity();
}
inline ::google::protobuf::uint32 ge_family_prayer_gift_request::hero_rarity() const {
  return hero_rarity_;
}
inline void ge_family_prayer_gift_request::set_hero_rarity(::google::protobuf::uint32 value) {
  set_has_hero_rarity();
  hero_rarity_ = value;
}

// optional uint32 hero_material_id = 5;
inline bool ge_family_prayer_gift_request::has_hero_material_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ge_family_prayer_gift_request::set_has_hero_material_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ge_family_prayer_gift_request::clear_has_hero_material_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ge_family_prayer_gift_request::clear_hero_material_id() {
  hero_material_id_ = 0u;
  clear_has_hero_material_id();
}
inline ::google::protobuf::uint32 ge_family_prayer_gift_request::hero_material_id() const {
  return hero_material_id_;
}
inline void ge_family_prayer_gift_request::set_hero_material_id(::google::protobuf::uint32 value) {
  set_has_hero_material_id();
  hero_material_id_ = value;
}

// optional .proto.common.role_change_data change_data = 6;
inline bool ge_family_prayer_gift_request::has_change_data() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ge_family_prayer_gift_request::set_has_change_data() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ge_family_prayer_gift_request::clear_has_change_data() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ge_family_prayer_gift_request::clear_change_data() {
  if (change_data_ != NULL) change_data_->::proto::common::role_change_data::Clear();
  clear_has_change_data();
}
inline const ::proto::common::role_change_data& ge_family_prayer_gift_request::change_data() const {
  return change_data_ != NULL ? *change_data_ : *default_instance_->change_data_;
}
inline ::proto::common::role_change_data* ge_family_prayer_gift_request::mutable_change_data() {
  set_has_change_data();
  if (change_data_ == NULL) change_data_ = new ::proto::common::role_change_data;
  return change_data_;
}
inline ::proto::common::role_change_data* ge_family_prayer_gift_request::release_change_data() {
  clear_has_change_data();
  ::proto::common::role_change_data* temp = change_data_;
  change_data_ = NULL;
  return temp;
}
inline void ge_family_prayer_gift_request::set_allocated_change_data(::proto::common::role_change_data* change_data) {
  delete change_data_;
  change_data_ = change_data;
  if (change_data) {
    set_has_change_data();
  } else {
    clear_has_change_data();
  }
}

// -------------------------------------------------------------------

// eg_family_prayer_gift_failed_notify

// optional uint32 reply_code = 1;
inline bool eg_family_prayer_gift_failed_notify::has_reply_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void eg_family_prayer_gift_failed_notify::set_has_reply_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void eg_family_prayer_gift_failed_notify::clear_has_reply_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void eg_family_prayer_gift_failed_notify::clear_reply_code() {
  reply_code_ = 0u;
  clear_has_reply_code();
}
inline ::google::protobuf::uint32 eg_family_prayer_gift_failed_notify::reply_code() const {
  return reply_code_;
}
inline void eg_family_prayer_gift_failed_notify::set_reply_code(::google::protobuf::uint32 value) {
  set_has_reply_code();
  reply_code_ = value;
}

// optional uint64 role_id = 2;
inline bool eg_family_prayer_gift_failed_notify::has_role_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void eg_family_prayer_gift_failed_notify::set_has_role_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void eg_family_prayer_gift_failed_notify::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void eg_family_prayer_gift_failed_notify::clear_role_id() {
  role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_role_id();
}
inline ::google::protobuf::uint64 eg_family_prayer_gift_failed_notify::role_id() const {
  return role_id_;
}
inline void eg_family_prayer_gift_failed_notify::set_role_id(::google::protobuf::uint64 value) {
  set_has_role_id();
  role_id_ = value;
}

// optional uint32 hero_tid = 3;
inline bool eg_family_prayer_gift_failed_notify::has_hero_tid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void eg_family_prayer_gift_failed_notify::set_has_hero_tid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void eg_family_prayer_gift_failed_notify::clear_has_hero_tid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void eg_family_prayer_gift_failed_notify::clear_hero_tid() {
  hero_tid_ = 0u;
  clear_has_hero_tid();
}
inline ::google::protobuf::uint32 eg_family_prayer_gift_failed_notify::hero_tid() const {
  return hero_tid_;
}
inline void eg_family_prayer_gift_failed_notify::set_hero_tid(::google::protobuf::uint32 value) {
  set_has_hero_tid();
  hero_tid_ = value;
}

// optional uint32 hero_num = 4;
inline bool eg_family_prayer_gift_failed_notify::has_hero_num() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void eg_family_prayer_gift_failed_notify::set_has_hero_num() {
  _has_bits_[0] |= 0x00000008u;
}
inline void eg_family_prayer_gift_failed_notify::clear_has_hero_num() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void eg_family_prayer_gift_failed_notify::clear_hero_num() {
  hero_num_ = 0u;
  clear_has_hero_num();
}
inline ::google::protobuf::uint32 eg_family_prayer_gift_failed_notify::hero_num() const {
  return hero_num_;
}
inline void eg_family_prayer_gift_failed_notify::set_hero_num(::google::protobuf::uint32 value) {
  set_has_hero_num();
  hero_num_ = value;
}

// optional uint32 hero_material_id = 5;
inline bool eg_family_prayer_gift_failed_notify::has_hero_material_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void eg_family_prayer_gift_failed_notify::set_has_hero_material_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void eg_family_prayer_gift_failed_notify::clear_has_hero_material_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void eg_family_prayer_gift_failed_notify::clear_hero_material_id() {
  hero_material_id_ = 0u;
  clear_has_hero_material_id();
}
inline ::google::protobuf::uint32 eg_family_prayer_gift_failed_notify::hero_material_id() const {
  return hero_material_id_;
}
inline void eg_family_prayer_gift_failed_notify::set_hero_material_id(::google::protobuf::uint32 value) {
  set_has_hero_material_id();
  hero_material_id_ = value;
}

// optional uint32 rwd_item = 6;
inline bool eg_family_prayer_gift_failed_notify::has_rwd_item() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void eg_family_prayer_gift_failed_notify::set_has_rwd_item() {
  _has_bits_[0] |= 0x00000020u;
}
inline void eg_family_prayer_gift_failed_notify::clear_has_rwd_item() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void eg_family_prayer_gift_failed_notify::clear_rwd_item() {
  rwd_item_ = 0u;
  clear_has_rwd_item();
}
inline ::google::protobuf::uint32 eg_family_prayer_gift_failed_notify::rwd_item() const {
  return rwd_item_;
}
inline void eg_family_prayer_gift_failed_notify::set_rwd_item(::google::protobuf::uint32 value) {
  set_has_rwd_item();
  rwd_item_ = value;
}

// optional .proto.common.role_change_data change_data = 7;
inline bool eg_family_prayer_gift_failed_notify::has_change_data() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void eg_family_prayer_gift_failed_notify::set_has_change_data() {
  _has_bits_[0] |= 0x00000040u;
}
inline void eg_family_prayer_gift_failed_notify::clear_has_change_data() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void eg_family_prayer_gift_failed_notify::clear_change_data() {
  if (change_data_ != NULL) change_data_->::proto::common::role_change_data::Clear();
  clear_has_change_data();
}
inline const ::proto::common::role_change_data& eg_family_prayer_gift_failed_notify::change_data() const {
  return change_data_ != NULL ? *change_data_ : *default_instance_->change_data_;
}
inline ::proto::common::role_change_data* eg_family_prayer_gift_failed_notify::mutable_change_data() {
  set_has_change_data();
  if (change_data_ == NULL) change_data_ = new ::proto::common::role_change_data;
  return change_data_;
}
inline ::proto::common::role_change_data* eg_family_prayer_gift_failed_notify::release_change_data() {
  clear_has_change_data();
  ::proto::common::role_change_data* temp = change_data_;
  change_data_ = NULL;
  return temp;
}
inline void eg_family_prayer_gift_failed_notify::set_allocated_change_data(::proto::common::role_change_data* change_data) {
  delete change_data_;
  change_data_ = change_data;
  if (change_data) {
    set_has_change_data();
  } else {
    clear_has_change_data();
  }
}

// -------------------------------------------------------------------

// eg_family_country_change_notify

// repeated uint64 role_list = 1;
inline int eg_family_country_change_notify::role_list_size() const {
  return role_list_.size();
}
inline void eg_family_country_change_notify::clear_role_list() {
  role_list_.Clear();
}
inline ::google::protobuf::uint64 eg_family_country_change_notify::role_list(int index) const {
  return role_list_.Get(index);
}
inline void eg_family_country_change_notify::set_role_list(int index, ::google::protobuf::uint64 value) {
  role_list_.Set(index, value);
}
inline void eg_family_country_change_notify::add_role_list(::google::protobuf::uint64 value) {
  role_list_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
eg_family_country_change_notify::role_list() const {
  return role_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
eg_family_country_change_notify::mutable_role_list() {
  return &role_list_;
}

// optional uint32 country_id = 2;
inline bool eg_family_country_change_notify::has_country_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void eg_family_country_change_notify::set_has_country_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void eg_family_country_change_notify::clear_has_country_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void eg_family_country_change_notify::clear_country_id() {
  country_id_ = 0u;
  clear_has_country_id();
}
inline ::google::protobuf::uint32 eg_family_country_change_notify::country_id() const {
  return country_id_;
}
inline void eg_family_country_change_notify::set_country_id(::google::protobuf::uint32 value) {
  set_has_country_id();
  country_id_ = value;
}

// -------------------------------------------------------------------

// eg_family_level_change_notify

// repeated uint64 role_list = 1;
inline int eg_family_level_change_notify::role_list_size() const {
  return role_list_.size();
}
inline void eg_family_level_change_notify::clear_role_list() {
  role_list_.Clear();
}
inline ::google::protobuf::uint64 eg_family_level_change_notify::role_list(int index) const {
  return role_list_.Get(index);
}
inline void eg_family_level_change_notify::set_role_list(int index, ::google::protobuf::uint64 value) {
  role_list_.Set(index, value);
}
inline void eg_family_level_change_notify::add_role_list(::google::protobuf::uint64 value) {
  role_list_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
eg_family_level_change_notify::role_list() const {
  return role_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
eg_family_level_change_notify::mutable_role_list() {
  return &role_list_;
}

// optional uint32 family_level = 2;
inline bool eg_family_level_change_notify::has_family_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void eg_family_level_change_notify::set_has_family_level() {
  _has_bits_[0] |= 0x00000002u;
}
inline void eg_family_level_change_notify::clear_has_family_level() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void eg_family_level_change_notify::clear_family_level() {
  family_level_ = 0u;
  clear_has_family_level();
}
inline ::google::protobuf::uint32 eg_family_level_change_notify::family_level() const {
  return family_level_;
}
inline void eg_family_level_change_notify::set_family_level(::google::protobuf::uint32 value) {
  set_has_family_level();
  family_level_ = value;
}

// -------------------------------------------------------------------

// ge_family_shop_buy_request

// optional uint32 index = 1;
inline bool ge_family_shop_buy_request::has_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ge_family_shop_buy_request::set_has_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ge_family_shop_buy_request::clear_has_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ge_family_shop_buy_request::clear_index() {
  index_ = 0u;
  clear_has_index();
}
inline ::google::protobuf::uint32 ge_family_shop_buy_request::index() const {
  return index_;
}
inline void ge_family_shop_buy_request::set_index(::google::protobuf::uint32 value) {
  set_has_index();
  index_ = value;
}

// optional uint32 shop_item = 2;
inline bool ge_family_shop_buy_request::has_shop_item() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ge_family_shop_buy_request::set_has_shop_item() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ge_family_shop_buy_request::clear_has_shop_item() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ge_family_shop_buy_request::clear_shop_item() {
  shop_item_ = 0u;
  clear_has_shop_item();
}
inline ::google::protobuf::uint32 ge_family_shop_buy_request::shop_item() const {
  return shop_item_;
}
inline void ge_family_shop_buy_request::set_shop_item(::google::protobuf::uint32 value) {
  set_has_shop_item();
  shop_item_ = value;
}

// optional uint32 num = 3;
inline bool ge_family_shop_buy_request::has_num() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ge_family_shop_buy_request::set_has_num() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ge_family_shop_buy_request::clear_has_num() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ge_family_shop_buy_request::clear_num() {
  num_ = 0u;
  clear_has_num();
}
inline ::google::protobuf::uint32 ge_family_shop_buy_request::num() const {
  return num_;
}
inline void ge_family_shop_buy_request::set_num(::google::protobuf::uint32 value) {
  set_has_num();
  num_ = value;
}

// -------------------------------------------------------------------

// eg_family_shop_buy_reply

// optional uint32 refresh_time = 1;
inline bool eg_family_shop_buy_reply::has_refresh_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void eg_family_shop_buy_reply::set_has_refresh_time() {
  _has_bits_[0] |= 0x00000001u;
}
inline void eg_family_shop_buy_reply::clear_has_refresh_time() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void eg_family_shop_buy_reply::clear_refresh_time() {
  refresh_time_ = 0u;
  clear_has_refresh_time();
}
inline ::google::protobuf::uint32 eg_family_shop_buy_reply::refresh_time() const {
  return refresh_time_;
}
inline void eg_family_shop_buy_reply::set_refresh_time(::google::protobuf::uint32 value) {
  set_has_refresh_time();
  refresh_time_ = value;
}

// optional uint32 index = 2;
inline bool eg_family_shop_buy_reply::has_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void eg_family_shop_buy_reply::set_has_index() {
  _has_bits_[0] |= 0x00000002u;
}
inline void eg_family_shop_buy_reply::clear_has_index() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void eg_family_shop_buy_reply::clear_index() {
  index_ = 0u;
  clear_has_index();
}
inline ::google::protobuf::uint32 eg_family_shop_buy_reply::index() const {
  return index_;
}
inline void eg_family_shop_buy_reply::set_index(::google::protobuf::uint32 value) {
  set_has_index();
  index_ = value;
}

// optional uint32 shop_item = 3;
inline bool eg_family_shop_buy_reply::has_shop_item() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void eg_family_shop_buy_reply::set_has_shop_item() {
  _has_bits_[0] |= 0x00000004u;
}
inline void eg_family_shop_buy_reply::clear_has_shop_item() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void eg_family_shop_buy_reply::clear_shop_item() {
  shop_item_ = 0u;
  clear_has_shop_item();
}
inline ::google::protobuf::uint32 eg_family_shop_buy_reply::shop_item() const {
  return shop_item_;
}
inline void eg_family_shop_buy_reply::set_shop_item(::google::protobuf::uint32 value) {
  set_has_shop_item();
  shop_item_ = value;
}

// optional uint32 num = 4;
inline bool eg_family_shop_buy_reply::has_num() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void eg_family_shop_buy_reply::set_has_num() {
  _has_bits_[0] |= 0x00000008u;
}
inline void eg_family_shop_buy_reply::clear_has_num() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void eg_family_shop_buy_reply::clear_num() {
  num_ = 0u;
  clear_has_num();
}
inline ::google::protobuf::uint32 eg_family_shop_buy_reply::num() const {
  return num_;
}
inline void eg_family_shop_buy_reply::set_num(::google::protobuf::uint32 value) {
  set_has_num();
  num_ = value;
}

// optional .proto.common.family_shop_data shop_data = 5;
inline bool eg_family_shop_buy_reply::has_shop_data() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void eg_family_shop_buy_reply::set_has_shop_data() {
  _has_bits_[0] |= 0x00000010u;
}
inline void eg_family_shop_buy_reply::clear_has_shop_data() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void eg_family_shop_buy_reply::clear_shop_data() {
  if (shop_data_ != NULL) shop_data_->::proto::common::family_shop_data::Clear();
  clear_has_shop_data();
}
inline const ::proto::common::family_shop_data& eg_family_shop_buy_reply::shop_data() const {
  return shop_data_ != NULL ? *shop_data_ : *default_instance_->shop_data_;
}
inline ::proto::common::family_shop_data* eg_family_shop_buy_reply::mutable_shop_data() {
  set_has_shop_data();
  if (shop_data_ == NULL) shop_data_ = new ::proto::common::family_shop_data;
  return shop_data_;
}
inline ::proto::common::family_shop_data* eg_family_shop_buy_reply::release_shop_data() {
  clear_has_shop_data();
  ::proto::common::family_shop_data* temp = shop_data_;
  shop_data_ = NULL;
  return temp;
}
inline void eg_family_shop_buy_reply::set_allocated_shop_data(::proto::common::family_shop_data* shop_data) {
  delete shop_data_;
  shop_data_ = shop_data;
  if (shop_data) {
    set_has_shop_data();
  } else {
    clear_has_shop_data();
  }
}

// optional .proto.common.family_shop_personal_data personal_data = 6;
inline bool eg_family_shop_buy_reply::has_personal_data() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void eg_family_shop_buy_reply::set_has_personal_data() {
  _has_bits_[0] |= 0x00000020u;
}
inline void eg_family_shop_buy_reply::clear_has_personal_data() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void eg_family_shop_buy_reply::clear_personal_data() {
  if (personal_data_ != NULL) personal_data_->::proto::common::family_shop_personal_data::Clear();
  clear_has_personal_data();
}
inline const ::proto::common::family_shop_personal_data& eg_family_shop_buy_reply::personal_data() const {
  return personal_data_ != NULL ? *personal_data_ : *default_instance_->personal_data_;
}
inline ::proto::common::family_shop_personal_data* eg_family_shop_buy_reply::mutable_personal_data() {
  set_has_personal_data();
  if (personal_data_ == NULL) personal_data_ = new ::proto::common::family_shop_personal_data;
  return personal_data_;
}
inline ::proto::common::family_shop_personal_data* eg_family_shop_buy_reply::release_personal_data() {
  clear_has_personal_data();
  ::proto::common::family_shop_personal_data* temp = personal_data_;
  personal_data_ = NULL;
  return temp;
}
inline void eg_family_shop_buy_reply::set_allocated_personal_data(::proto::common::family_shop_personal_data* personal_data) {
  delete personal_data_;
  personal_data_ = personal_data;
  if (personal_data) {
    set_has_personal_data();
  } else {
    clear_has_personal_data();
  }
}

// -------------------------------------------------------------------

// ge_family_shop_back_notify

// optional uint32 refresh_time = 1;
inline bool ge_family_shop_back_notify::has_refresh_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ge_family_shop_back_notify::set_has_refresh_time() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ge_family_shop_back_notify::clear_has_refresh_time() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ge_family_shop_back_notify::clear_refresh_time() {
  refresh_time_ = 0u;
  clear_has_refresh_time();
}
inline ::google::protobuf::uint32 ge_family_shop_back_notify::refresh_time() const {
  return refresh_time_;
}
inline void ge_family_shop_back_notify::set_refresh_time(::google::protobuf::uint32 value) {
  set_has_refresh_time();
  refresh_time_ = value;
}

// optional uint32 index = 2;
inline bool ge_family_shop_back_notify::has_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ge_family_shop_back_notify::set_has_index() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ge_family_shop_back_notify::clear_has_index() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ge_family_shop_back_notify::clear_index() {
  index_ = 0u;
  clear_has_index();
}
inline ::google::protobuf::uint32 ge_family_shop_back_notify::index() const {
  return index_;
}
inline void ge_family_shop_back_notify::set_index(::google::protobuf::uint32 value) {
  set_has_index();
  index_ = value;
}

// optional uint32 num = 3;
inline bool ge_family_shop_back_notify::has_num() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ge_family_shop_back_notify::set_has_num() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ge_family_shop_back_notify::clear_has_num() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ge_family_shop_back_notify::clear_num() {
  num_ = 0u;
  clear_has_num();
}
inline ::google::protobuf::uint32 ge_family_shop_back_notify::num() const {
  return num_;
}
inline void ge_family_shop_back_notify::set_num(::google::protobuf::uint32 value) {
  set_has_num();
  num_ = value;
}

// -------------------------------------------------------------------

// ge_gm_set_king_family_notify

// optional uint32 country_id = 1;
inline bool ge_gm_set_king_family_notify::has_country_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ge_gm_set_king_family_notify::set_has_country_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ge_gm_set_king_family_notify::clear_has_country_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ge_gm_set_king_family_notify::clear_country_id() {
  country_id_ = 0u;
  clear_has_country_id();
}
inline ::google::protobuf::uint32 ge_gm_set_king_family_notify::country_id() const {
  return country_id_;
}
inline void ge_gm_set_king_family_notify::set_country_id(::google::protobuf::uint32 value) {
  set_has_country_id();
  country_id_ = value;
}

// optional uint64 family_uid = 2;
inline bool ge_gm_set_king_family_notify::has_family_uid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ge_gm_set_king_family_notify::set_has_family_uid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ge_gm_set_king_family_notify::clear_has_family_uid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ge_gm_set_king_family_notify::clear_family_uid() {
  family_uid_ = GOOGLE_ULONGLONG(0);
  clear_has_family_uid();
}
inline ::google::protobuf::uint64 ge_gm_set_king_family_notify::family_uid() const {
  return family_uid_;
}
inline void ge_gm_set_king_family_notify::set_family_uid(::google::protobuf::uint64 value) {
  set_has_family_uid();
  family_uid_ = value;
}

// -------------------------------------------------------------------

// eg_update_country_notify

// repeated .proto.common.country_common countries = 1;
inline int eg_update_country_notify::countries_size() const {
  return countries_.size();
}
inline void eg_update_country_notify::clear_countries() {
  countries_.Clear();
}
inline const ::proto::common::country_common& eg_update_country_notify::countries(int index) const {
  return countries_.Get(index);
}
inline ::proto::common::country_common* eg_update_country_notify::mutable_countries(int index) {
  return countries_.Mutable(index);
}
inline ::proto::common::country_common* eg_update_country_notify::add_countries() {
  return countries_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::common::country_common >&
eg_update_country_notify::countries() const {
  return countries_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto::common::country_common >*
eg_update_country_notify::mutable_countries() {
  return &countries_;
}

// -------------------------------------------------------------------

// eg_country_name_change_request

// optional string name = 1;
inline bool eg_country_name_change_request::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void eg_country_name_change_request::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void eg_country_name_change_request::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void eg_country_name_change_request::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& eg_country_name_change_request::name() const {
  return *name_;
}
inline void eg_country_name_change_request::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void eg_country_name_change_request::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void eg_country_name_change_request::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* eg_country_name_change_request::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* eg_country_name_change_request::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void eg_country_name_change_request::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 flag_id = 2;
inline bool eg_country_name_change_request::has_flag_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void eg_country_name_change_request::set_has_flag_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void eg_country_name_change_request::clear_has_flag_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void eg_country_name_change_request::clear_flag_id() {
  flag_id_ = 0u;
  clear_has_flag_id();
}
inline ::google::protobuf::uint32 eg_country_name_change_request::flag_id() const {
  return flag_id_;
}
inline void eg_country_name_change_request::set_flag_id(::google::protobuf::uint32 value) {
  set_has_flag_id();
  flag_id_ = value;
}

// -------------------------------------------------------------------

// ge_country_name_change_reply

// optional uint32 reply_code = 1;
inline bool ge_country_name_change_reply::has_reply_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ge_country_name_change_reply::set_has_reply_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ge_country_name_change_reply::clear_has_reply_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ge_country_name_change_reply::clear_reply_code() {
  reply_code_ = 0u;
  clear_has_reply_code();
}
inline ::google::protobuf::uint32 ge_country_name_change_reply::reply_code() const {
  return reply_code_;
}
inline void ge_country_name_change_reply::set_reply_code(::google::protobuf::uint32 value) {
  set_has_reply_code();
  reply_code_ = value;
}

// optional string name = 2;
inline bool ge_country_name_change_reply::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ge_country_name_change_reply::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ge_country_name_change_reply::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ge_country_name_change_reply::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& ge_country_name_change_reply::name() const {
  return *name_;
}
inline void ge_country_name_change_reply::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void ge_country_name_change_reply::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void ge_country_name_change_reply::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ge_country_name_change_reply::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* ge_country_name_change_reply::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ge_country_name_change_reply::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 flag_id = 3;
inline bool ge_country_name_change_reply::has_flag_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ge_country_name_change_reply::set_has_flag_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ge_country_name_change_reply::clear_has_flag_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ge_country_name_change_reply::clear_flag_id() {
  flag_id_ = 0u;
  clear_has_flag_id();
}
inline ::google::protobuf::uint32 ge_country_name_change_reply::flag_id() const {
  return flag_id_;
}
inline void ge_country_name_change_reply::set_flag_id(::google::protobuf::uint32 value) {
  set_has_flag_id();
  flag_id_ = value;
}

// optional .proto.common.role_change_data change_data = 4;
inline bool ge_country_name_change_reply::has_change_data() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ge_country_name_change_reply::set_has_change_data() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ge_country_name_change_reply::clear_has_change_data() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ge_country_name_change_reply::clear_change_data() {
  if (change_data_ != NULL) change_data_->::proto::common::role_change_data::Clear();
  clear_has_change_data();
}
inline const ::proto::common::role_change_data& ge_country_name_change_reply::change_data() const {
  return change_data_ != NULL ? *change_data_ : *default_instance_->change_data_;
}
inline ::proto::common::role_change_data* ge_country_name_change_reply::mutable_change_data() {
  set_has_change_data();
  if (change_data_ == NULL) change_data_ = new ::proto::common::role_change_data;
  return change_data_;
}
inline ::proto::common::role_change_data* ge_country_name_change_reply::release_change_data() {
  clear_has_change_data();
  ::proto::common::role_change_data* temp = change_data_;
  change_data_ = NULL;
  return temp;
}
inline void ge_country_name_change_reply::set_allocated_change_data(::proto::common::role_change_data* change_data) {
  delete change_data_;
  change_data_ = change_data;
  if (change_data) {
    set_has_change_data();
  } else {
    clear_has_change_data();
  }
}

// -------------------------------------------------------------------

// eg_country_year_name_request

// optional string name = 1;
inline bool eg_country_year_name_request::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void eg_country_year_name_request::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void eg_country_year_name_request::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void eg_country_year_name_request::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& eg_country_year_name_request::name() const {
  return *name_;
}
inline void eg_country_year_name_request::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void eg_country_year_name_request::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void eg_country_year_name_request::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* eg_country_year_name_request::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* eg_country_year_name_request::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void eg_country_year_name_request::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// ge_country_year_name_reply

// optional uint32 reply_code = 1;
inline bool ge_country_year_name_reply::has_reply_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ge_country_year_name_reply::set_has_reply_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ge_country_year_name_reply::clear_has_reply_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ge_country_year_name_reply::clear_reply_code() {
  reply_code_ = 0u;
  clear_has_reply_code();
}
inline ::google::protobuf::uint32 ge_country_year_name_reply::reply_code() const {
  return reply_code_;
}
inline void ge_country_year_name_reply::set_reply_code(::google::protobuf::uint32 value) {
  set_has_reply_code();
  reply_code_ = value;
}

// optional string name = 2;
inline bool ge_country_year_name_reply::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ge_country_year_name_reply::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ge_country_year_name_reply::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ge_country_year_name_reply::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& ge_country_year_name_reply::name() const {
  return *name_;
}
inline void ge_country_year_name_reply::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void ge_country_year_name_reply::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void ge_country_year_name_reply::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ge_country_year_name_reply::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* ge_country_year_name_reply::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ge_country_year_name_reply::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .proto.common.role_change_data change_data = 3;
inline bool ge_country_year_name_reply::has_change_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ge_country_year_name_reply::set_has_change_data() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ge_country_year_name_reply::clear_has_change_data() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ge_country_year_name_reply::clear_change_data() {
  if (change_data_ != NULL) change_data_->::proto::common::role_change_data::Clear();
  clear_has_change_data();
}
inline const ::proto::common::role_change_data& ge_country_year_name_reply::change_data() const {
  return change_data_ != NULL ? *change_data_ : *default_instance_->change_data_;
}
inline ::proto::common::role_change_data* ge_country_year_name_reply::mutable_change_data() {
  set_has_change_data();
  if (change_data_ == NULL) change_data_ = new ::proto::common::role_change_data;
  return change_data_;
}
inline ::proto::common::role_change_data* ge_country_year_name_reply::release_change_data() {
  clear_has_change_data();
  ::proto::common::role_change_data* temp = change_data_;
  change_data_ = NULL;
  return temp;
}
inline void ge_country_year_name_reply::set_allocated_change_data(::proto::common::role_change_data* change_data) {
  delete change_data_;
  change_data_ = change_data;
  if (change_data) {
    set_has_change_data();
  } else {
    clear_has_change_data();
  }
}

// -------------------------------------------------------------------

// eg_sync_data_request

// repeated .proto.server.data_sync_item items = 1;
inline int eg_sync_data_request::items_size() const {
  return items_.size();
}
inline void eg_sync_data_request::clear_items() {
  items_.Clear();
}
inline const ::proto::server::data_sync_item& eg_sync_data_request::items(int index) const {
  return items_.Get(index);
}
inline ::proto::server::data_sync_item* eg_sync_data_request::mutable_items(int index) {
  return items_.Mutable(index);
}
inline ::proto::server::data_sync_item* eg_sync_data_request::add_items() {
  return items_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::server::data_sync_item >&
eg_sync_data_request::items() const {
  return items_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto::server::data_sync_item >*
eg_sync_data_request::mutable_items() {
  return &items_;
}

// -------------------------------------------------------------------

// ge_sync_data_request

// repeated .proto.server.data_sync_item items = 1;
inline int ge_sync_data_request::items_size() const {
  return items_.size();
}
inline void ge_sync_data_request::clear_items() {
  items_.Clear();
}
inline const ::proto::server::data_sync_item& ge_sync_data_request::items(int index) const {
  return items_.Get(index);
}
inline ::proto::server::data_sync_item* ge_sync_data_request::mutable_items(int index) {
  return items_.Mutable(index);
}
inline ::proto::server::data_sync_item* ge_sync_data_request::add_items() {
  return items_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::server::data_sync_item >&
ge_sync_data_request::items() const {
  return items_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto::server::data_sync_item >*
ge_sync_data_request::mutable_items() {
  return &items_;
}

// -------------------------------------------------------------------

// ge_ready_enter_scene_notify

// -------------------------------------------------------------------

// eg_summon_field_boss_request

// optional uint32 id = 1;
inline bool eg_summon_field_boss_request::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void eg_summon_field_boss_request::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void eg_summon_field_boss_request::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void eg_summon_field_boss_request::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 eg_summon_field_boss_request::id() const {
  return id_;
}
inline void eg_summon_field_boss_request::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// optional uint64 scene_id = 2;
inline bool eg_summon_field_boss_request::has_scene_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void eg_summon_field_boss_request::set_has_scene_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void eg_summon_field_boss_request::clear_has_scene_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void eg_summon_field_boss_request::clear_scene_id() {
  scene_id_ = GOOGLE_ULONGLONG(0);
  clear_has_scene_id();
}
inline ::google::protobuf::uint64 eg_summon_field_boss_request::scene_id() const {
  return scene_id_;
}
inline void eg_summon_field_boss_request::set_scene_id(::google::protobuf::uint64 value) {
  set_has_scene_id();
  scene_id_ = value;
}

// optional uint64 object_id = 3;
inline bool eg_summon_field_boss_request::has_object_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void eg_summon_field_boss_request::set_has_object_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void eg_summon_field_boss_request::clear_has_object_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void eg_summon_field_boss_request::clear_object_id() {
  object_id_ = GOOGLE_ULONGLONG(0);
  clear_has_object_id();
}
inline ::google::protobuf::uint64 eg_summon_field_boss_request::object_id() const {
  return object_id_;
}
inline void eg_summon_field_boss_request::set_object_id(::google::protobuf::uint64 value) {
  set_has_object_id();
  object_id_ = value;
}

// optional uint32 monster_id = 4;
inline bool eg_summon_field_boss_request::has_monster_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void eg_summon_field_boss_request::set_has_monster_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void eg_summon_field_boss_request::clear_has_monster_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void eg_summon_field_boss_request::clear_monster_id() {
  monster_id_ = 0u;
  clear_has_monster_id();
}
inline ::google::protobuf::uint32 eg_summon_field_boss_request::monster_id() const {
  return monster_id_;
}
inline void eg_summon_field_boss_request::set_monster_id(::google::protobuf::uint32 value) {
  set_has_monster_id();
  monster_id_ = value;
}

// optional uint32 pos_x = 5;
inline bool eg_summon_field_boss_request::has_pos_x() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void eg_summon_field_boss_request::set_has_pos_x() {
  _has_bits_[0] |= 0x00000010u;
}
inline void eg_summon_field_boss_request::clear_has_pos_x() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void eg_summon_field_boss_request::clear_pos_x() {
  pos_x_ = 0u;
  clear_has_pos_x();
}
inline ::google::protobuf::uint32 eg_summon_field_boss_request::pos_x() const {
  return pos_x_;
}
inline void eg_summon_field_boss_request::set_pos_x(::google::protobuf::uint32 value) {
  set_has_pos_x();
  pos_x_ = value;
}

// optional uint32 pos_y = 6;
inline bool eg_summon_field_boss_request::has_pos_y() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void eg_summon_field_boss_request::set_has_pos_y() {
  _has_bits_[0] |= 0x00000020u;
}
inline void eg_summon_field_boss_request::clear_has_pos_y() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void eg_summon_field_boss_request::clear_pos_y() {
  pos_y_ = 0u;
  clear_has_pos_y();
}
inline ::google::protobuf::uint32 eg_summon_field_boss_request::pos_y() const {
  return pos_y_;
}
inline void eg_summon_field_boss_request::set_pos_y(::google::protobuf::uint32 value) {
  set_has_pos_y();
  pos_y_ = value;
}

// optional uint32 dir = 7;
inline bool eg_summon_field_boss_request::has_dir() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void eg_summon_field_boss_request::set_has_dir() {
  _has_bits_[0] |= 0x00000040u;
}
inline void eg_summon_field_boss_request::clear_has_dir() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void eg_summon_field_boss_request::clear_dir() {
  dir_ = 0u;
  clear_has_dir();
}
inline ::google::protobuf::uint32 eg_summon_field_boss_request::dir() const {
  return dir_;
}
inline void eg_summon_field_boss_request::set_dir(::google::protobuf::uint32 value) {
  set_has_dir();
  dir_ = value;
}

// -------------------------------------------------------------------

// eg_field_boss_die_notify

// optional uint64 object_id = 1;
inline bool eg_field_boss_die_notify::has_object_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void eg_field_boss_die_notify::set_has_object_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void eg_field_boss_die_notify::clear_has_object_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void eg_field_boss_die_notify::clear_object_id() {
  object_id_ = GOOGLE_ULONGLONG(0);
  clear_has_object_id();
}
inline ::google::protobuf::uint64 eg_field_boss_die_notify::object_id() const {
  return object_id_;
}
inline void eg_field_boss_die_notify::set_object_id(::google::protobuf::uint64 value) {
  set_has_object_id();
  object_id_ = value;
}

// optional .proto.server.EM_FIELD_MODE mode = 2 [default = FIELD_BOSS_NONE];
inline bool eg_field_boss_die_notify::has_mode() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void eg_field_boss_die_notify::set_has_mode() {
  _has_bits_[0] |= 0x00000002u;
}
inline void eg_field_boss_die_notify::clear_has_mode() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void eg_field_boss_die_notify::clear_mode() {
  mode_ = 0;
  clear_has_mode();
}
inline ::proto::server::EM_FIELD_MODE eg_field_boss_die_notify::mode() const {
  return static_cast< ::proto::server::EM_FIELD_MODE >(mode_);
}
inline void eg_field_boss_die_notify::set_mode(::proto::server::EM_FIELD_MODE value) {
  assert(::proto::server::EM_FIELD_MODE_IsValid(value));
  set_has_mode();
  mode_ = value;
}

// -------------------------------------------------------------------

// ge_summon_field_boss_replay

// optional uint32 reply_code = 1;
inline bool ge_summon_field_boss_replay::has_reply_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ge_summon_field_boss_replay::set_has_reply_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ge_summon_field_boss_replay::clear_has_reply_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ge_summon_field_boss_replay::clear_reply_code() {
  reply_code_ = 0u;
  clear_has_reply_code();
}
inline ::google::protobuf::uint32 ge_summon_field_boss_replay::reply_code() const {
  return reply_code_;
}
inline void ge_summon_field_boss_replay::set_reply_code(::google::protobuf::uint32 value) {
  set_has_reply_code();
  reply_code_ = value;
}

// optional uint32 id = 2;
inline bool ge_summon_field_boss_replay::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ge_summon_field_boss_replay::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ge_summon_field_boss_replay::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ge_summon_field_boss_replay::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 ge_summon_field_boss_replay::id() const {
  return id_;
}
inline void ge_summon_field_boss_replay::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// optional uint64 object_id = 3;
inline bool ge_summon_field_boss_replay::has_object_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ge_summon_field_boss_replay::set_has_object_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ge_summon_field_boss_replay::clear_has_object_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ge_summon_field_boss_replay::clear_object_id() {
  object_id_ = GOOGLE_ULONGLONG(0);
  clear_has_object_id();
}
inline ::google::protobuf::uint64 ge_summon_field_boss_replay::object_id() const {
  return object_id_;
}
inline void ge_summon_field_boss_replay::set_object_id(::google::protobuf::uint64 value) {
  set_has_object_id();
  object_id_ = value;
}

// -------------------------------------------------------------------

// eg_clear_all_boss_notify

// repeated uint64 object_ids = 1;
inline int eg_clear_all_boss_notify::object_ids_size() const {
  return object_ids_.size();
}
inline void eg_clear_all_boss_notify::clear_object_ids() {
  object_ids_.Clear();
}
inline ::google::protobuf::uint64 eg_clear_all_boss_notify::object_ids(int index) const {
  return object_ids_.Get(index);
}
inline void eg_clear_all_boss_notify::set_object_ids(int index, ::google::protobuf::uint64 value) {
  object_ids_.Set(index, value);
}
inline void eg_clear_all_boss_notify::add_object_ids(::google::protobuf::uint64 value) {
  object_ids_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
eg_clear_all_boss_notify::object_ids() const {
  return object_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
eg_clear_all_boss_notify::mutable_object_ids() {
  return &object_ids_;
}

// -------------------------------------------------------------------

// ge_field_boss_killed_notify

// optional uint32 id = 1;
inline bool ge_field_boss_killed_notify::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ge_field_boss_killed_notify::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ge_field_boss_killed_notify::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ge_field_boss_killed_notify::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 ge_field_boss_killed_notify::id() const {
  return id_;
}
inline void ge_field_boss_killed_notify::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// optional uint64 object_id = 2;
inline bool ge_field_boss_killed_notify::has_object_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ge_field_boss_killed_notify::set_has_object_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ge_field_boss_killed_notify::clear_has_object_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ge_field_boss_killed_notify::clear_object_id() {
  object_id_ = GOOGLE_ULONGLONG(0);
  clear_has_object_id();
}
inline ::google::protobuf::uint64 ge_field_boss_killed_notify::object_id() const {
  return object_id_;
}
inline void ge_field_boss_killed_notify::set_object_id(::google::protobuf::uint64 value) {
  set_has_object_id();
  object_id_ = value;
}

// optional string killer_name = 4;
inline bool ge_field_boss_killed_notify::has_killer_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ge_field_boss_killed_notify::set_has_killer_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ge_field_boss_killed_notify::clear_has_killer_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ge_field_boss_killed_notify::clear_killer_name() {
  if (killer_name_ != &::google::protobuf::internal::kEmptyString) {
    killer_name_->clear();
  }
  clear_has_killer_name();
}
inline const ::std::string& ge_field_boss_killed_notify::killer_name() const {
  return *killer_name_;
}
inline void ge_field_boss_killed_notify::set_killer_name(const ::std::string& value) {
  set_has_killer_name();
  if (killer_name_ == &::google::protobuf::internal::kEmptyString) {
    killer_name_ = new ::std::string;
  }
  killer_name_->assign(value);
}
inline void ge_field_boss_killed_notify::set_killer_name(const char* value) {
  set_has_killer_name();
  if (killer_name_ == &::google::protobuf::internal::kEmptyString) {
    killer_name_ = new ::std::string;
  }
  killer_name_->assign(value);
}
inline void ge_field_boss_killed_notify::set_killer_name(const char* value, size_t size) {
  set_has_killer_name();
  if (killer_name_ == &::google::protobuf::internal::kEmptyString) {
    killer_name_ = new ::std::string;
  }
  killer_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ge_field_boss_killed_notify::mutable_killer_name() {
  set_has_killer_name();
  if (killer_name_ == &::google::protobuf::internal::kEmptyString) {
    killer_name_ = new ::std::string;
  }
  return killer_name_;
}
inline ::std::string* ge_field_boss_killed_notify::release_killer_name() {
  clear_has_killer_name();
  if (killer_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = killer_name_;
    killer_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ge_field_boss_killed_notify::set_allocated_killer_name(::std::string* killer_name) {
  if (killer_name_ != &::google::protobuf::internal::kEmptyString) {
    delete killer_name_;
  }
  if (killer_name) {
    set_has_killer_name();
    killer_name_ = killer_name;
  } else {
    clear_has_killer_name();
    killer_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// field_boss_rank

// optional uint32 rank_id = 1;
inline bool field_boss_rank::has_rank_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void field_boss_rank::set_has_rank_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void field_boss_rank::clear_has_rank_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void field_boss_rank::clear_rank_id() {
  rank_id_ = 0u;
  clear_has_rank_id();
}
inline ::google::protobuf::uint32 field_boss_rank::rank_id() const {
  return rank_id_;
}
inline void field_boss_rank::set_rank_id(::google::protobuf::uint32 value) {
  set_has_rank_id();
  rank_id_ = value;
}

// repeated uint64 uids = 2;
inline int field_boss_rank::uids_size() const {
  return uids_.size();
}
inline void field_boss_rank::clear_uids() {
  uids_.Clear();
}
inline ::google::protobuf::uint64 field_boss_rank::uids(int index) const {
  return uids_.Get(index);
}
inline void field_boss_rank::set_uids(int index, ::google::protobuf::uint64 value) {
  uids_.Set(index, value);
}
inline void field_boss_rank::add_uids(::google::protobuf::uint64 value) {
  uids_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
field_boss_rank::uids() const {
  return uids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
field_boss_rank::mutable_uids() {
  return &uids_;
}

// -------------------------------------------------------------------

// ge_field_boss_rank_notify

// optional uint32 id = 1;
inline bool ge_field_boss_rank_notify::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ge_field_boss_rank_notify::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ge_field_boss_rank_notify::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ge_field_boss_rank_notify::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 ge_field_boss_rank_notify::id() const {
  return id_;
}
inline void ge_field_boss_rank_notify::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// optional uint32 monster_id = 2;
inline bool ge_field_boss_rank_notify::has_monster_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ge_field_boss_rank_notify::set_has_monster_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ge_field_boss_rank_notify::clear_has_monster_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ge_field_boss_rank_notify::clear_monster_id() {
  monster_id_ = 0u;
  clear_has_monster_id();
}
inline ::google::protobuf::uint32 ge_field_boss_rank_notify::monster_id() const {
  return monster_id_;
}
inline void ge_field_boss_rank_notify::set_monster_id(::google::protobuf::uint32 value) {
  set_has_monster_id();
  monster_id_ = value;
}

// optional .proto.server.EM_FIELD_MODE mode = 3 [default = FIELD_BOSS_NONE];
inline bool ge_field_boss_rank_notify::has_mode() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ge_field_boss_rank_notify::set_has_mode() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ge_field_boss_rank_notify::clear_has_mode() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ge_field_boss_rank_notify::clear_mode() {
  mode_ = 0;
  clear_has_mode();
}
inline ::proto::server::EM_FIELD_MODE ge_field_boss_rank_notify::mode() const {
  return static_cast< ::proto::server::EM_FIELD_MODE >(mode_);
}
inline void ge_field_boss_rank_notify::set_mode(::proto::server::EM_FIELD_MODE value) {
  assert(::proto::server::EM_FIELD_MODE_IsValid(value));
  set_has_mode();
  mode_ = value;
}

// repeated .proto.server.field_boss_rank persion_ranks = 4;
inline int ge_field_boss_rank_notify::persion_ranks_size() const {
  return persion_ranks_.size();
}
inline void ge_field_boss_rank_notify::clear_persion_ranks() {
  persion_ranks_.Clear();
}
inline const ::proto::server::field_boss_rank& ge_field_boss_rank_notify::persion_ranks(int index) const {
  return persion_ranks_.Get(index);
}
inline ::proto::server::field_boss_rank* ge_field_boss_rank_notify::mutable_persion_ranks(int index) {
  return persion_ranks_.Mutable(index);
}
inline ::proto::server::field_boss_rank* ge_field_boss_rank_notify::add_persion_ranks() {
  return persion_ranks_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::server::field_boss_rank >&
ge_field_boss_rank_notify::persion_ranks() const {
  return persion_ranks_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto::server::field_boss_rank >*
ge_field_boss_rank_notify::mutable_persion_ranks() {
  return &persion_ranks_;
}

// repeated .proto.server.field_boss_rank family_ranks = 5;
inline int ge_field_boss_rank_notify::family_ranks_size() const {
  return family_ranks_.size();
}
inline void ge_field_boss_rank_notify::clear_family_ranks() {
  family_ranks_.Clear();
}
inline const ::proto::server::field_boss_rank& ge_field_boss_rank_notify::family_ranks(int index) const {
  return family_ranks_.Get(index);
}
inline ::proto::server::field_boss_rank* ge_field_boss_rank_notify::mutable_family_ranks(int index) {
  return family_ranks_.Mutable(index);
}
inline ::proto::server::field_boss_rank* ge_field_boss_rank_notify::add_family_ranks() {
  return family_ranks_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::server::field_boss_rank >&
ge_field_boss_rank_notify::family_ranks() const {
  return family_ranks_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto::server::field_boss_rank >*
ge_field_boss_rank_notify::mutable_family_ranks() {
  return &family_ranks_;
}

// repeated uint64 killers = 6;
inline int ge_field_boss_rank_notify::killers_size() const {
  return killers_.size();
}
inline void ge_field_boss_rank_notify::clear_killers() {
  killers_.Clear();
}
inline ::google::protobuf::uint64 ge_field_boss_rank_notify::killers(int index) const {
  return killers_.Get(index);
}
inline void ge_field_boss_rank_notify::set_killers(int index, ::google::protobuf::uint64 value) {
  killers_.Set(index, value);
}
inline void ge_field_boss_rank_notify::add_killers(::google::protobuf::uint64 value) {
  killers_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
ge_field_boss_rank_notify::killers() const {
  return killers_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
ge_field_boss_rank_notify::mutable_killers() {
  return &killers_;
}

// -------------------------------------------------------------------

// ge_check_drop_items_request

// repeated .proto.common.item_limit_data item_list = 1;
inline int ge_check_drop_items_request::item_list_size() const {
  return item_list_.size();
}
inline void ge_check_drop_items_request::clear_item_list() {
  item_list_.Clear();
}
inline const ::proto::common::item_limit_data& ge_check_drop_items_request::item_list(int index) const {
  return item_list_.Get(index);
}
inline ::proto::common::item_limit_data* ge_check_drop_items_request::mutable_item_list(int index) {
  return item_list_.Mutable(index);
}
inline ::proto::common::item_limit_data* ge_check_drop_items_request::add_item_list() {
  return item_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::common::item_limit_data >&
ge_check_drop_items_request::item_list() const {
  return item_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto::common::item_limit_data >*
ge_check_drop_items_request::mutable_item_list() {
  return &item_list_;
}

// -------------------------------------------------------------------

// eg_check_drop_items_reply

// repeated .proto.common.item_limit_data item_list = 3;
inline int eg_check_drop_items_reply::item_list_size() const {
  return item_list_.size();
}
inline void eg_check_drop_items_reply::clear_item_list() {
  item_list_.Clear();
}
inline const ::proto::common::item_limit_data& eg_check_drop_items_reply::item_list(int index) const {
  return item_list_.Get(index);
}
inline ::proto::common::item_limit_data* eg_check_drop_items_reply::mutable_item_list(int index) {
  return item_list_.Mutable(index);
}
inline ::proto::common::item_limit_data* eg_check_drop_items_reply::add_item_list() {
  return item_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::common::item_limit_data >&
eg_check_drop_items_reply::item_list() const {
  return item_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto::common::item_limit_data >*
eg_check_drop_items_reply::mutable_item_list() {
  return &item_list_;
}

// -------------------------------------------------------------------

// eg_syn_item_limit_notify

// repeated .proto.common.item_limit_data item_list = 1;
inline int eg_syn_item_limit_notify::item_list_size() const {
  return item_list_.size();
}
inline void eg_syn_item_limit_notify::clear_item_list() {
  item_list_.Clear();
}
inline const ::proto::common::item_limit_data& eg_syn_item_limit_notify::item_list(int index) const {
  return item_list_.Get(index);
}
inline ::proto::common::item_limit_data* eg_syn_item_limit_notify::mutable_item_list(int index) {
  return item_list_.Mutable(index);
}
inline ::proto::common::item_limit_data* eg_syn_item_limit_notify::add_item_list() {
  return item_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::common::item_limit_data >&
eg_syn_item_limit_notify::item_list() const {
  return item_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto::common::item_limit_data >*
eg_syn_item_limit_notify::mutable_item_list() {
  return &item_list_;
}

// -------------------------------------------------------------------

// ge_redbag_send_notify

// optional uint32 count = 1;
inline bool ge_redbag_send_notify::has_count() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ge_redbag_send_notify::set_has_count() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ge_redbag_send_notify::clear_has_count() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ge_redbag_send_notify::clear_count() {
  count_ = 0u;
  clear_has_count();
}
inline ::google::protobuf::uint32 ge_redbag_send_notify::count() const {
  return count_;
}
inline void ge_redbag_send_notify::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
}

// optional uint32 money = 2;
inline bool ge_redbag_send_notify::has_money() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ge_redbag_send_notify::set_has_money() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ge_redbag_send_notify::clear_has_money() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ge_redbag_send_notify::clear_money() {
  money_ = 0u;
  clear_has_money();
}
inline ::google::protobuf::uint32 ge_redbag_send_notify::money() const {
  return money_;
}
inline void ge_redbag_send_notify::set_money(::google::protobuf::uint32 value) {
  set_has_money();
  money_ = value;
}

// -------------------------------------------------------------------

// eg_redbag_draw_notify

// optional uint32 money = 1;
inline bool eg_redbag_draw_notify::has_money() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void eg_redbag_draw_notify::set_has_money() {
  _has_bits_[0] |= 0x00000001u;
}
inline void eg_redbag_draw_notify::clear_has_money() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void eg_redbag_draw_notify::clear_money() {
  money_ = 0u;
  clear_has_money();
}
inline ::google::protobuf::uint32 eg_redbag_draw_notify::money() const {
  return money_;
}
inline void eg_redbag_draw_notify::set_money(::google::protobuf::uint32 value) {
  set_has_money();
  money_ = value;
}

// -------------------------------------------------------------------

// gall_reload_config_notify

// -------------------------------------------------------------------

// eg_chat_get_role_info_request

// repeated .proto.common.chat_param param_list = 1;
inline int eg_chat_get_role_info_request::param_list_size() const {
  return param_list_.size();
}
inline void eg_chat_get_role_info_request::clear_param_list() {
  param_list_.Clear();
}
inline const ::proto::common::chat_param& eg_chat_get_role_info_request::param_list(int index) const {
  return param_list_.Get(index);
}
inline ::proto::common::chat_param* eg_chat_get_role_info_request::mutable_param_list(int index) {
  return param_list_.Mutable(index);
}
inline ::proto::common::chat_param* eg_chat_get_role_info_request::add_param_list() {
  return param_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::common::chat_param >&
eg_chat_get_role_info_request::param_list() const {
  return param_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto::common::chat_param >*
eg_chat_get_role_info_request::mutable_param_list() {
  return &param_list_;
}

// required .proto.common.chat_common_data chat_notify = 2;
inline bool eg_chat_get_role_info_request::has_chat_notify() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void eg_chat_get_role_info_request::set_has_chat_notify() {
  _has_bits_[0] |= 0x00000002u;
}
inline void eg_chat_get_role_info_request::clear_has_chat_notify() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void eg_chat_get_role_info_request::clear_chat_notify() {
  if (chat_notify_ != NULL) chat_notify_->::proto::common::chat_common_data::Clear();
  clear_has_chat_notify();
}
inline const ::proto::common::chat_common_data& eg_chat_get_role_info_request::chat_notify() const {
  return chat_notify_ != NULL ? *chat_notify_ : *default_instance_->chat_notify_;
}
inline ::proto::common::chat_common_data* eg_chat_get_role_info_request::mutable_chat_notify() {
  set_has_chat_notify();
  if (chat_notify_ == NULL) chat_notify_ = new ::proto::common::chat_common_data;
  return chat_notify_;
}
inline ::proto::common::chat_common_data* eg_chat_get_role_info_request::release_chat_notify() {
  clear_has_chat_notify();
  ::proto::common::chat_common_data* temp = chat_notify_;
  chat_notify_ = NULL;
  return temp;
}
inline void eg_chat_get_role_info_request::set_allocated_chat_notify(::proto::common::chat_common_data* chat_notify) {
  delete chat_notify_;
  chat_notify_ = chat_notify;
  if (chat_notify) {
    set_has_chat_notify();
  } else {
    clear_has_chat_notify();
  }
}

// -------------------------------------------------------------------

// ge_chat_get_role_info_reply

// optional uint32 reply_code = 1;
inline bool ge_chat_get_role_info_reply::has_reply_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ge_chat_get_role_info_reply::set_has_reply_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ge_chat_get_role_info_reply::clear_has_reply_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ge_chat_get_role_info_reply::clear_reply_code() {
  reply_code_ = 0u;
  clear_has_reply_code();
}
inline ::google::protobuf::uint32 ge_chat_get_role_info_reply::reply_code() const {
  return reply_code_;
}
inline void ge_chat_get_role_info_reply::set_reply_code(::google::protobuf::uint32 value) {
  set_has_reply_code();
  reply_code_ = value;
}

// optional .proto.common.chat_common_role_info chat_role_info = 2;
inline bool ge_chat_get_role_info_reply::has_chat_role_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ge_chat_get_role_info_reply::set_has_chat_role_info() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ge_chat_get_role_info_reply::clear_has_chat_role_info() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ge_chat_get_role_info_reply::clear_chat_role_info() {
  if (chat_role_info_ != NULL) chat_role_info_->::proto::common::chat_common_role_info::Clear();
  clear_has_chat_role_info();
}
inline const ::proto::common::chat_common_role_info& ge_chat_get_role_info_reply::chat_role_info() const {
  return chat_role_info_ != NULL ? *chat_role_info_ : *default_instance_->chat_role_info_;
}
inline ::proto::common::chat_common_role_info* ge_chat_get_role_info_reply::mutable_chat_role_info() {
  set_has_chat_role_info();
  if (chat_role_info_ == NULL) chat_role_info_ = new ::proto::common::chat_common_role_info;
  return chat_role_info_;
}
inline ::proto::common::chat_common_role_info* ge_chat_get_role_info_reply::release_chat_role_info() {
  clear_has_chat_role_info();
  ::proto::common::chat_common_role_info* temp = chat_role_info_;
  chat_role_info_ = NULL;
  return temp;
}
inline void ge_chat_get_role_info_reply::set_allocated_chat_role_info(::proto::common::chat_common_role_info* chat_role_info) {
  delete chat_role_info_;
  chat_role_info_ = chat_role_info;
  if (chat_role_info) {
    set_has_chat_role_info();
  } else {
    clear_has_chat_role_info();
  }
}

// required .proto.common.chat_common_data chat_notify = 3;
inline bool ge_chat_get_role_info_reply::has_chat_notify() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ge_chat_get_role_info_reply::set_has_chat_notify() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ge_chat_get_role_info_reply::clear_has_chat_notify() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ge_chat_get_role_info_reply::clear_chat_notify() {
  if (chat_notify_ != NULL) chat_notify_->::proto::common::chat_common_data::Clear();
  clear_has_chat_notify();
}
inline const ::proto::common::chat_common_data& ge_chat_get_role_info_reply::chat_notify() const {
  return chat_notify_ != NULL ? *chat_notify_ : *default_instance_->chat_notify_;
}
inline ::proto::common::chat_common_data* ge_chat_get_role_info_reply::mutable_chat_notify() {
  set_has_chat_notify();
  if (chat_notify_ == NULL) chat_notify_ = new ::proto::common::chat_common_data;
  return chat_notify_;
}
inline ::proto::common::chat_common_data* ge_chat_get_role_info_reply::release_chat_notify() {
  clear_has_chat_notify();
  ::proto::common::chat_common_data* temp = chat_notify_;
  chat_notify_ = NULL;
  return temp;
}
inline void ge_chat_get_role_info_reply::set_allocated_chat_notify(::proto::common::chat_common_data* chat_notify) {
  delete chat_notify_;
  chat_notify_ = chat_notify;
  if (chat_notify) {
    set_has_chat_notify();
  } else {
    clear_has_chat_notify();
  }
}

// -------------------------------------------------------------------

// fr_syn_transfer_info_request

// required uint32 server_id = 1;
inline bool fr_syn_transfer_info_request::has_server_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void fr_syn_transfer_info_request::set_has_server_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void fr_syn_transfer_info_request::clear_has_server_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void fr_syn_transfer_info_request::clear_server_id() {
  server_id_ = 0u;
  clear_has_server_id();
}
inline ::google::protobuf::uint32 fr_syn_transfer_info_request::server_id() const {
  return server_id_;
}
inline void fr_syn_transfer_info_request::set_server_id(::google::protobuf::uint32 value) {
  set_has_server_id();
  server_id_ = value;
}

// -------------------------------------------------------------------

// fr_test_request

// optional uint32 test1 = 1;
inline bool fr_test_request::has_test1() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void fr_test_request::set_has_test1() {
  _has_bits_[0] |= 0x00000001u;
}
inline void fr_test_request::clear_has_test1() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void fr_test_request::clear_test1() {
  test1_ = 0u;
  clear_has_test1();
}
inline ::google::protobuf::uint32 fr_test_request::test1() const {
  return test1_;
}
inline void fr_test_request::set_test1(::google::protobuf::uint32 value) {
  set_has_test1();
  test1_ = value;
}

// -------------------------------------------------------------------

// rf_test_reply

// optional uint32 test1 = 1;
inline bool rf_test_reply::has_test1() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void rf_test_reply::set_has_test1() {
  _has_bits_[0] |= 0x00000001u;
}
inline void rf_test_reply::clear_has_test1() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void rf_test_reply::clear_test1() {
  test1_ = 0u;
  clear_has_test1();
}
inline ::google::protobuf::uint32 rf_test_reply::test1() const {
  return test1_;
}
inline void rf_test_reply::set_test1(::google::protobuf::uint32 value) {
  set_has_test1();
  test1_ = value;
}

// -------------------------------------------------------------------

// mail_get_addenda

// optional uint64 mail_id = 1;
inline bool mail_get_addenda::has_mail_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void mail_get_addenda::set_has_mail_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void mail_get_addenda::clear_has_mail_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void mail_get_addenda::clear_mail_id() {
  mail_id_ = GOOGLE_ULONGLONG(0);
  clear_has_mail_id();
}
inline ::google::protobuf::uint64 mail_get_addenda::mail_id() const {
  return mail_id_;
}
inline void mail_get_addenda::set_mail_id(::google::protobuf::uint64 value) {
  set_has_mail_id();
  mail_id_ = value;
}

// repeated .proto.common.mail_item_obj objs = 2;
inline int mail_get_addenda::objs_size() const {
  return objs_.size();
}
inline void mail_get_addenda::clear_objs() {
  objs_.Clear();
}
inline const ::proto::common::mail_item_obj& mail_get_addenda::objs(int index) const {
  return objs_.Get(index);
}
inline ::proto::common::mail_item_obj* mail_get_addenda::mutable_objs(int index) {
  return objs_.Mutable(index);
}
inline ::proto::common::mail_item_obj* mail_get_addenda::add_objs() {
  return objs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::common::mail_item_obj >&
mail_get_addenda::objs() const {
  return objs_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto::common::mail_item_obj >*
mail_get_addenda::mutable_objs() {
  return &objs_;
}

// optional uint32 item_type = 3;
inline bool mail_get_addenda::has_item_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void mail_get_addenda::set_has_item_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void mail_get_addenda::clear_has_item_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void mail_get_addenda::clear_item_type() {
  item_type_ = 0u;
  clear_has_item_type();
}
inline ::google::protobuf::uint32 mail_get_addenda::item_type() const {
  return item_type_;
}
inline void mail_get_addenda::set_item_type(::google::protobuf::uint32 value) {
  set_has_item_type();
  item_type_ = value;
}

// -------------------------------------------------------------------

// eg_mail_get_addenda_request

// optional uint64 uid = 1;
inline bool eg_mail_get_addenda_request::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void eg_mail_get_addenda_request::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void eg_mail_get_addenda_request::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void eg_mail_get_addenda_request::clear_uid() {
  uid_ = GOOGLE_ULONGLONG(0);
  clear_has_uid();
}
inline ::google::protobuf::uint64 eg_mail_get_addenda_request::uid() const {
  return uid_;
}
inline void eg_mail_get_addenda_request::set_uid(::google::protobuf::uint64 value) {
  set_has_uid();
  uid_ = value;
}

// repeated .proto.server.mail_get_addenda addendas = 2;
inline int eg_mail_get_addenda_request::addendas_size() const {
  return addendas_.size();
}
inline void eg_mail_get_addenda_request::clear_addendas() {
  addendas_.Clear();
}
inline const ::proto::server::mail_get_addenda& eg_mail_get_addenda_request::addendas(int index) const {
  return addendas_.Get(index);
}
inline ::proto::server::mail_get_addenda* eg_mail_get_addenda_request::mutable_addendas(int index) {
  return addendas_.Mutable(index);
}
inline ::proto::server::mail_get_addenda* eg_mail_get_addenda_request::add_addendas() {
  return addendas_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::server::mail_get_addenda >&
eg_mail_get_addenda_request::addendas() const {
  return addendas_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto::server::mail_get_addenda >*
eg_mail_get_addenda_request::mutable_addendas() {
  return &addendas_;
}

// -------------------------------------------------------------------

// mail_get_addenda_back

// optional uint64 mail_id = 1;
inline bool mail_get_addenda_back::has_mail_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void mail_get_addenda_back::set_has_mail_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void mail_get_addenda_back::clear_has_mail_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void mail_get_addenda_back::clear_mail_id() {
  mail_id_ = GOOGLE_ULONGLONG(0);
  clear_has_mail_id();
}
inline ::google::protobuf::uint64 mail_get_addenda_back::mail_id() const {
  return mail_id_;
}
inline void mail_get_addenda_back::set_mail_id(::google::protobuf::uint64 value) {
  set_has_mail_id();
  mail_id_ = value;
}

// optional uint32 reply_code = 2;
inline bool mail_get_addenda_back::has_reply_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void mail_get_addenda_back::set_has_reply_code() {
  _has_bits_[0] |= 0x00000002u;
}
inline void mail_get_addenda_back::clear_has_reply_code() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void mail_get_addenda_back::clear_reply_code() {
  reply_code_ = 0u;
  clear_has_reply_code();
}
inline ::google::protobuf::uint32 mail_get_addenda_back::reply_code() const {
  return reply_code_;
}
inline void mail_get_addenda_back::set_reply_code(::google::protobuf::uint32 value) {
  set_has_reply_code();
  reply_code_ = value;
}

// -------------------------------------------------------------------

// ge_mail_get_addenda_reply

// optional uint64 uid = 1;
inline bool ge_mail_get_addenda_reply::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ge_mail_get_addenda_reply::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ge_mail_get_addenda_reply::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ge_mail_get_addenda_reply::clear_uid() {
  uid_ = GOOGLE_ULONGLONG(0);
  clear_has_uid();
}
inline ::google::protobuf::uint64 ge_mail_get_addenda_reply::uid() const {
  return uid_;
}
inline void ge_mail_get_addenda_reply::set_uid(::google::protobuf::uint64 value) {
  set_has_uid();
  uid_ = value;
}

// repeated .proto.server.mail_get_addenda_back backs = 2;
inline int ge_mail_get_addenda_reply::backs_size() const {
  return backs_.size();
}
inline void ge_mail_get_addenda_reply::clear_backs() {
  backs_.Clear();
}
inline const ::proto::server::mail_get_addenda_back& ge_mail_get_addenda_reply::backs(int index) const {
  return backs_.Get(index);
}
inline ::proto::server::mail_get_addenda_back* ge_mail_get_addenda_reply::mutable_backs(int index) {
  return backs_.Mutable(index);
}
inline ::proto::server::mail_get_addenda_back* ge_mail_get_addenda_reply::add_backs() {
  return backs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::server::mail_get_addenda_back >&
ge_mail_get_addenda_reply::backs() const {
  return backs_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto::server::mail_get_addenda_back >*
ge_mail_get_addenda_reply::mutable_backs() {
  return &backs_;
}

// -------------------------------------------------------------------

// ge_mail_new_notify

// repeated uint64 uids = 1;
inline int ge_mail_new_notify::uids_size() const {
  return uids_.size();
}
inline void ge_mail_new_notify::clear_uids() {
  uids_.Clear();
}
inline ::google::protobuf::uint64 ge_mail_new_notify::uids(int index) const {
  return uids_.Get(index);
}
inline void ge_mail_new_notify::set_uids(int index, ::google::protobuf::uint64 value) {
  uids_.Set(index, value);
}
inline void ge_mail_new_notify::add_uids(::google::protobuf::uint64 value) {
  uids_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
ge_mail_new_notify::uids() const {
  return uids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
ge_mail_new_notify::mutable_uids() {
  return &uids_;
}

// optional .proto.common.em_mail_type mail_type = 2;
inline bool ge_mail_new_notify::has_mail_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ge_mail_new_notify::set_has_mail_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ge_mail_new_notify::clear_has_mail_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ge_mail_new_notify::clear_mail_type() {
  mail_type_ = 0;
  clear_has_mail_type();
}
inline ::proto::common::em_mail_type ge_mail_new_notify::mail_type() const {
  return static_cast< ::proto::common::em_mail_type >(mail_type_);
}
inline void ge_mail_new_notify::set_mail_type(::proto::common::em_mail_type value) {
  assert(::proto::common::em_mail_type_IsValid(value));
  set_has_mail_type();
  mail_type_ = value;
}

// optional uint64 from_id = 3;
inline bool ge_mail_new_notify::has_from_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ge_mail_new_notify::set_has_from_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ge_mail_new_notify::clear_has_from_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ge_mail_new_notify::clear_from_id() {
  from_id_ = GOOGLE_ULONGLONG(0);
  clear_has_from_id();
}
inline ::google::protobuf::uint64 ge_mail_new_notify::from_id() const {
  return from_id_;
}
inline void ge_mail_new_notify::set_from_id(::google::protobuf::uint64 value) {
  set_has_from_id();
  from_id_ = value;
}

// optional string from_name = 4;
inline bool ge_mail_new_notify::has_from_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ge_mail_new_notify::set_has_from_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ge_mail_new_notify::clear_has_from_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ge_mail_new_notify::clear_from_name() {
  if (from_name_ != &::google::protobuf::internal::kEmptyString) {
    from_name_->clear();
  }
  clear_has_from_name();
}
inline const ::std::string& ge_mail_new_notify::from_name() const {
  return *from_name_;
}
inline void ge_mail_new_notify::set_from_name(const ::std::string& value) {
  set_has_from_name();
  if (from_name_ == &::google::protobuf::internal::kEmptyString) {
    from_name_ = new ::std::string;
  }
  from_name_->assign(value);
}
inline void ge_mail_new_notify::set_from_name(const char* value) {
  set_has_from_name();
  if (from_name_ == &::google::protobuf::internal::kEmptyString) {
    from_name_ = new ::std::string;
  }
  from_name_->assign(value);
}
inline void ge_mail_new_notify::set_from_name(const char* value, size_t size) {
  set_has_from_name();
  if (from_name_ == &::google::protobuf::internal::kEmptyString) {
    from_name_ = new ::std::string;
  }
  from_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ge_mail_new_notify::mutable_from_name() {
  set_has_from_name();
  if (from_name_ == &::google::protobuf::internal::kEmptyString) {
    from_name_ = new ::std::string;
  }
  return from_name_;
}
inline ::std::string* ge_mail_new_notify::release_from_name() {
  clear_has_from_name();
  if (from_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = from_name_;
    from_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ge_mail_new_notify::set_allocated_from_name(::std::string* from_name) {
  if (from_name_ != &::google::protobuf::internal::kEmptyString) {
    delete from_name_;
  }
  if (from_name) {
    set_has_from_name();
    from_name_ = from_name;
  } else {
    clear_has_from_name();
    from_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 content_id = 5;
inline bool ge_mail_new_notify::has_content_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ge_mail_new_notify::set_has_content_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ge_mail_new_notify::clear_has_content_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ge_mail_new_notify::clear_content_id() {
  content_id_ = 0u;
  clear_has_content_id();
}
inline ::google::protobuf::uint32 ge_mail_new_notify::content_id() const {
  return content_id_;
}
inline void ge_mail_new_notify::set_content_id(::google::protobuf::uint32 value) {
  set_has_content_id();
  content_id_ = value;
}

// optional string title = 6;
inline bool ge_mail_new_notify::has_title() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ge_mail_new_notify::set_has_title() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ge_mail_new_notify::clear_has_title() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ge_mail_new_notify::clear_title() {
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    title_->clear();
  }
  clear_has_title();
}
inline const ::std::string& ge_mail_new_notify::title() const {
  return *title_;
}
inline void ge_mail_new_notify::set_title(const ::std::string& value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(value);
}
inline void ge_mail_new_notify::set_title(const char* value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(value);
}
inline void ge_mail_new_notify::set_title(const char* value, size_t size) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ge_mail_new_notify::mutable_title() {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  return title_;
}
inline ::std::string* ge_mail_new_notify::release_title() {
  clear_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = title_;
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ge_mail_new_notify::set_allocated_title(::std::string* title) {
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    delete title_;
  }
  if (title) {
    set_has_title();
    title_ = title;
  } else {
    clear_has_title();
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string content = 7;
inline bool ge_mail_new_notify::has_content() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ge_mail_new_notify::set_has_content() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ge_mail_new_notify::clear_has_content() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ge_mail_new_notify::clear_content() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& ge_mail_new_notify::content() const {
  return *content_;
}
inline void ge_mail_new_notify::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void ge_mail_new_notify::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void ge_mail_new_notify::set_content(const char* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ge_mail_new_notify::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  return content_;
}
inline ::std::string* ge_mail_new_notify::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ge_mail_new_notify::set_allocated_content(::std::string* content) {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (content) {
    set_has_content();
    content_ = content;
  } else {
    clear_has_content();
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string items = 8;
inline bool ge_mail_new_notify::has_items() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ge_mail_new_notify::set_has_items() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ge_mail_new_notify::clear_has_items() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ge_mail_new_notify::clear_items() {
  if (items_ != &::google::protobuf::internal::kEmptyString) {
    items_->clear();
  }
  clear_has_items();
}
inline const ::std::string& ge_mail_new_notify::items() const {
  return *items_;
}
inline void ge_mail_new_notify::set_items(const ::std::string& value) {
  set_has_items();
  if (items_ == &::google::protobuf::internal::kEmptyString) {
    items_ = new ::std::string;
  }
  items_->assign(value);
}
inline void ge_mail_new_notify::set_items(const char* value) {
  set_has_items();
  if (items_ == &::google::protobuf::internal::kEmptyString) {
    items_ = new ::std::string;
  }
  items_->assign(value);
}
inline void ge_mail_new_notify::set_items(const char* value, size_t size) {
  set_has_items();
  if (items_ == &::google::protobuf::internal::kEmptyString) {
    items_ = new ::std::string;
  }
  items_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ge_mail_new_notify::mutable_items() {
  set_has_items();
  if (items_ == &::google::protobuf::internal::kEmptyString) {
    items_ = new ::std::string;
  }
  return items_;
}
inline ::std::string* ge_mail_new_notify::release_items() {
  clear_has_items();
  if (items_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = items_;
    items_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ge_mail_new_notify::set_allocated_items(::std::string* items) {
  if (items_ != &::google::protobuf::internal::kEmptyString) {
    delete items_;
  }
  if (items) {
    set_has_items();
    items_ = items;
  } else {
    clear_has_items();
    items_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .proto.common.em_mail_get_type get_type = 9;
inline bool ge_mail_new_notify::has_get_type() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ge_mail_new_notify::set_has_get_type() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ge_mail_new_notify::clear_has_get_type() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ge_mail_new_notify::clear_get_type() {
  get_type_ = 0;
  clear_has_get_type();
}
inline ::proto::common::em_mail_get_type ge_mail_new_notify::get_type() const {
  return static_cast< ::proto::common::em_mail_get_type >(get_type_);
}
inline void ge_mail_new_notify::set_get_type(::proto::common::em_mail_get_type value) {
  assert(::proto::common::em_mail_get_type_IsValid(value));
  set_has_get_type();
  get_type_ = value;
}

// -------------------------------------------------------------------

// sr_syn_cross_info_notify

// optional uint32 cross_id = 1;
inline bool sr_syn_cross_info_notify::has_cross_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void sr_syn_cross_info_notify::set_has_cross_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void sr_syn_cross_info_notify::clear_has_cross_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void sr_syn_cross_info_notify::clear_cross_id() {
  cross_id_ = 0u;
  clear_has_cross_id();
}
inline ::google::protobuf::uint32 sr_syn_cross_info_notify::cross_id() const {
  return cross_id_;
}
inline void sr_syn_cross_info_notify::set_cross_id(::google::protobuf::uint32 value) {
  set_has_cross_id();
  cross_id_ = value;
}

// -------------------------------------------------------------------

// rs_syn_area_info_notify

// -------------------------------------------------------------------

// rs_cross_fight_test_notify

// optional .proto.common.fight_param fight = 1;
inline bool rs_cross_fight_test_notify::has_fight() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void rs_cross_fight_test_notify::set_has_fight() {
  _has_bits_[0] |= 0x00000001u;
}
inline void rs_cross_fight_test_notify::clear_has_fight() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void rs_cross_fight_test_notify::clear_fight() {
  if (fight_ != NULL) fight_->::proto::common::fight_param::Clear();
  clear_has_fight();
}
inline const ::proto::common::fight_param& rs_cross_fight_test_notify::fight() const {
  return fight_ != NULL ? *fight_ : *default_instance_->fight_;
}
inline ::proto::common::fight_param* rs_cross_fight_test_notify::mutable_fight() {
  set_has_fight();
  if (fight_ == NULL) fight_ = new ::proto::common::fight_param;
  return fight_;
}
inline ::proto::common::fight_param* rs_cross_fight_test_notify::release_fight() {
  clear_has_fight();
  ::proto::common::fight_param* temp = fight_;
  fight_ = NULL;
  return temp;
}
inline void rs_cross_fight_test_notify::set_allocated_fight(::proto::common::fight_param* fight) {
  delete fight_;
  fight_ = fight;
  if (fight) {
    set_has_fight();
  } else {
    clear_has_fight();
  }
}

// optional .proto.common.role_cross_data user1 = 2;
inline bool rs_cross_fight_test_notify::has_user1() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void rs_cross_fight_test_notify::set_has_user1() {
  _has_bits_[0] |= 0x00000002u;
}
inline void rs_cross_fight_test_notify::clear_has_user1() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void rs_cross_fight_test_notify::clear_user1() {
  if (user1_ != NULL) user1_->::proto::common::role_cross_data::Clear();
  clear_has_user1();
}
inline const ::proto::common::role_cross_data& rs_cross_fight_test_notify::user1() const {
  return user1_ != NULL ? *user1_ : *default_instance_->user1_;
}
inline ::proto::common::role_cross_data* rs_cross_fight_test_notify::mutable_user1() {
  set_has_user1();
  if (user1_ == NULL) user1_ = new ::proto::common::role_cross_data;
  return user1_;
}
inline ::proto::common::role_cross_data* rs_cross_fight_test_notify::release_user1() {
  clear_has_user1();
  ::proto::common::role_cross_data* temp = user1_;
  user1_ = NULL;
  return temp;
}
inline void rs_cross_fight_test_notify::set_allocated_user1(::proto::common::role_cross_data* user1) {
  delete user1_;
  user1_ = user1;
  if (user1) {
    set_has_user1();
  } else {
    clear_has_user1();
  }
}

// optional .proto.common.role_cross_data user2 = 3;
inline bool rs_cross_fight_test_notify::has_user2() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void rs_cross_fight_test_notify::set_has_user2() {
  _has_bits_[0] |= 0x00000004u;
}
inline void rs_cross_fight_test_notify::clear_has_user2() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void rs_cross_fight_test_notify::clear_user2() {
  if (user2_ != NULL) user2_->::proto::common::role_cross_data::Clear();
  clear_has_user2();
}
inline const ::proto::common::role_cross_data& rs_cross_fight_test_notify::user2() const {
  return user2_ != NULL ? *user2_ : *default_instance_->user2_;
}
inline ::proto::common::role_cross_data* rs_cross_fight_test_notify::mutable_user2() {
  set_has_user2();
  if (user2_ == NULL) user2_ = new ::proto::common::role_cross_data;
  return user2_;
}
inline ::proto::common::role_cross_data* rs_cross_fight_test_notify::release_user2() {
  clear_has_user2();
  ::proto::common::role_cross_data* temp = user2_;
  user2_ = NULL;
  return temp;
}
inline void rs_cross_fight_test_notify::set_allocated_user2(::proto::common::role_cross_data* user2) {
  delete user2_;
  user2_ = user2;
  if (user2) {
    set_has_user2();
  } else {
    clear_has_user2();
  }
}

// -------------------------------------------------------------------

// gr_cross_fight_test_notify

// optional .proto.common.role_cross_data user = 1;
inline bool gr_cross_fight_test_notify::has_user() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gr_cross_fight_test_notify::set_has_user() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gr_cross_fight_test_notify::clear_has_user() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gr_cross_fight_test_notify::clear_user() {
  if (user_ != NULL) user_->::proto::common::role_cross_data::Clear();
  clear_has_user();
}
inline const ::proto::common::role_cross_data& gr_cross_fight_test_notify::user() const {
  return user_ != NULL ? *user_ : *default_instance_->user_;
}
inline ::proto::common::role_cross_data* gr_cross_fight_test_notify::mutable_user() {
  set_has_user();
  if (user_ == NULL) user_ = new ::proto::common::role_cross_data;
  return user_;
}
inline ::proto::common::role_cross_data* gr_cross_fight_test_notify::release_user() {
  clear_has_user();
  ::proto::common::role_cross_data* temp = user_;
  user_ = NULL;
  return temp;
}
inline void gr_cross_fight_test_notify::set_allocated_user(::proto::common::role_cross_data* user) {
  delete user_;
  user_ = user;
  if (user) {
    set_has_user();
  } else {
    clear_has_user();
  }
}

// -------------------------------------------------------------------

// ef_syn_center_info_notify

// optional uint32 server_id = 1;
inline bool ef_syn_center_info_notify::has_server_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ef_syn_center_info_notify::set_has_server_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ef_syn_center_info_notify::clear_has_server_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ef_syn_center_info_notify::clear_server_id() {
  server_id_ = 0u;
  clear_has_server_id();
}
inline ::google::protobuf::uint32 ef_syn_center_info_notify::server_id() const {
  return server_id_;
}
inline void ef_syn_center_info_notify::set_server_id(::google::protobuf::uint32 value) {
  set_has_server_id();
  server_id_ = value;
}

// -------------------------------------------------------------------

// ef_test_request

// optional uint32 role_game_server_id = 1;
inline bool ef_test_request::has_role_game_server_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ef_test_request::set_has_role_game_server_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ef_test_request::clear_has_role_game_server_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ef_test_request::clear_role_game_server_id() {
  role_game_server_id_ = 0u;
  clear_has_role_game_server_id();
}
inline ::google::protobuf::uint32 ef_test_request::role_game_server_id() const {
  return role_game_server_id_;
}
inline void ef_test_request::set_role_game_server_id(::google::protobuf::uint32 value) {
  set_has_role_game_server_id();
  role_game_server_id_ = value;
}

// optional uint32 test1 = 2;
inline bool ef_test_request::has_test1() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ef_test_request::set_has_test1() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ef_test_request::clear_has_test1() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ef_test_request::clear_test1() {
  test1_ = 0u;
  clear_has_test1();
}
inline ::google::protobuf::uint32 ef_test_request::test1() const {
  return test1_;
}
inline void ef_test_request::set_test1(::google::protobuf::uint32 value) {
  set_has_test1();
  test1_ = value;
}

// -------------------------------------------------------------------

// fe_syn_transfer_info_notify

// optional uint32 server_id = 1;
inline bool fe_syn_transfer_info_notify::has_server_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void fe_syn_transfer_info_notify::set_has_server_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void fe_syn_transfer_info_notify::clear_has_server_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void fe_syn_transfer_info_notify::clear_server_id() {
  server_id_ = 0u;
  clear_has_server_id();
}
inline ::google::protobuf::uint32 fe_syn_transfer_info_notify::server_id() const {
  return server_id_;
}
inline void fe_syn_transfer_info_notify::set_server_id(::google::protobuf::uint32 value) {
  set_has_server_id();
  server_id_ = value;
}

// -------------------------------------------------------------------

// fe_test_reply

// optional uint32 role_game_server_id = 1;
inline bool fe_test_reply::has_role_game_server_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void fe_test_reply::set_has_role_game_server_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void fe_test_reply::clear_has_role_game_server_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void fe_test_reply::clear_role_game_server_id() {
  role_game_server_id_ = 0u;
  clear_has_role_game_server_id();
}
inline ::google::protobuf::uint32 fe_test_reply::role_game_server_id() const {
  return role_game_server_id_;
}
inline void fe_test_reply::set_role_game_server_id(::google::protobuf::uint32 value) {
  set_has_role_game_server_id();
  role_game_server_id_ = value;
}

// optional uint32 test1 = 2;
inline bool fe_test_reply::has_test1() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void fe_test_reply::set_has_test1() {
  _has_bits_[0] |= 0x00000002u;
}
inline void fe_test_reply::clear_has_test1() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void fe_test_reply::clear_test1() {
  test1_ = 0u;
  clear_has_test1();
}
inline ::google::protobuf::uint32 fe_test_reply::test1() const {
  return test1_;
}
inline void fe_test_reply::set_test1(::google::protobuf::uint32 value) {
  set_has_test1();
  test1_ = value;
}

// -------------------------------------------------------------------

// rs_arena_battle_notify

// optional .proto.common.fight_param fight = 1;
inline bool rs_arena_battle_notify::has_fight() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void rs_arena_battle_notify::set_has_fight() {
  _has_bits_[0] |= 0x00000001u;
}
inline void rs_arena_battle_notify::clear_has_fight() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void rs_arena_battle_notify::clear_fight() {
  if (fight_ != NULL) fight_->::proto::common::fight_param::Clear();
  clear_has_fight();
}
inline const ::proto::common::fight_param& rs_arena_battle_notify::fight() const {
  return fight_ != NULL ? *fight_ : *default_instance_->fight_;
}
inline ::proto::common::fight_param* rs_arena_battle_notify::mutable_fight() {
  set_has_fight();
  if (fight_ == NULL) fight_ = new ::proto::common::fight_param;
  return fight_;
}
inline ::proto::common::fight_param* rs_arena_battle_notify::release_fight() {
  clear_has_fight();
  ::proto::common::fight_param* temp = fight_;
  fight_ = NULL;
  return temp;
}
inline void rs_arena_battle_notify::set_allocated_fight(::proto::common::fight_param* fight) {
  delete fight_;
  fight_ = fight;
  if (fight) {
    set_has_fight();
  } else {
    clear_has_fight();
  }
}

// optional .proto.common.role_cross_data user1 = 2;
inline bool rs_arena_battle_notify::has_user1() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void rs_arena_battle_notify::set_has_user1() {
  _has_bits_[0] |= 0x00000002u;
}
inline void rs_arena_battle_notify::clear_has_user1() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void rs_arena_battle_notify::clear_user1() {
  if (user1_ != NULL) user1_->::proto::common::role_cross_data::Clear();
  clear_has_user1();
}
inline const ::proto::common::role_cross_data& rs_arena_battle_notify::user1() const {
  return user1_ != NULL ? *user1_ : *default_instance_->user1_;
}
inline ::proto::common::role_cross_data* rs_arena_battle_notify::mutable_user1() {
  set_has_user1();
  if (user1_ == NULL) user1_ = new ::proto::common::role_cross_data;
  return user1_;
}
inline ::proto::common::role_cross_data* rs_arena_battle_notify::release_user1() {
  clear_has_user1();
  ::proto::common::role_cross_data* temp = user1_;
  user1_ = NULL;
  return temp;
}
inline void rs_arena_battle_notify::set_allocated_user1(::proto::common::role_cross_data* user1) {
  delete user1_;
  user1_ = user1;
  if (user1) {
    set_has_user1();
  } else {
    clear_has_user1();
  }
}

// optional .proto.common.role_cross_data user2 = 3;
inline bool rs_arena_battle_notify::has_user2() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void rs_arena_battle_notify::set_has_user2() {
  _has_bits_[0] |= 0x00000004u;
}
inline void rs_arena_battle_notify::clear_has_user2() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void rs_arena_battle_notify::clear_user2() {
  if (user2_ != NULL) user2_->::proto::common::role_cross_data::Clear();
  clear_has_user2();
}
inline const ::proto::common::role_cross_data& rs_arena_battle_notify::user2() const {
  return user2_ != NULL ? *user2_ : *default_instance_->user2_;
}
inline ::proto::common::role_cross_data* rs_arena_battle_notify::mutable_user2() {
  set_has_user2();
  if (user2_ == NULL) user2_ = new ::proto::common::role_cross_data;
  return user2_;
}
inline ::proto::common::role_cross_data* rs_arena_battle_notify::release_user2() {
  clear_has_user2();
  ::proto::common::role_cross_data* temp = user2_;
  user2_ = NULL;
  return temp;
}
inline void rs_arena_battle_notify::set_allocated_user2(::proto::common::role_cross_data* user2) {
  delete user2_;
  user2_ = user2;
  if (user2) {
    set_has_user2();
  } else {
    clear_has_user2();
  }
}

// -------------------------------------------------------------------

// rs_arena_battle_ai_notify

// optional .proto.common.fight_param fight = 1;
inline bool rs_arena_battle_ai_notify::has_fight() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void rs_arena_battle_ai_notify::set_has_fight() {
  _has_bits_[0] |= 0x00000001u;
}
inline void rs_arena_battle_ai_notify::clear_has_fight() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void rs_arena_battle_ai_notify::clear_fight() {
  if (fight_ != NULL) fight_->::proto::common::fight_param::Clear();
  clear_has_fight();
}
inline const ::proto::common::fight_param& rs_arena_battle_ai_notify::fight() const {
  return fight_ != NULL ? *fight_ : *default_instance_->fight_;
}
inline ::proto::common::fight_param* rs_arena_battle_ai_notify::mutable_fight() {
  set_has_fight();
  if (fight_ == NULL) fight_ = new ::proto::common::fight_param;
  return fight_;
}
inline ::proto::common::fight_param* rs_arena_battle_ai_notify::release_fight() {
  clear_has_fight();
  ::proto::common::fight_param* temp = fight_;
  fight_ = NULL;
  return temp;
}
inline void rs_arena_battle_ai_notify::set_allocated_fight(::proto::common::fight_param* fight) {
  delete fight_;
  fight_ = fight;
  if (fight) {
    set_has_fight();
  } else {
    clear_has_fight();
  }
}

// optional .proto.common.role_cross_data user1 = 2;
inline bool rs_arena_battle_ai_notify::has_user1() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void rs_arena_battle_ai_notify::set_has_user1() {
  _has_bits_[0] |= 0x00000002u;
}
inline void rs_arena_battle_ai_notify::clear_has_user1() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void rs_arena_battle_ai_notify::clear_user1() {
  if (user1_ != NULL) user1_->::proto::common::role_cross_data::Clear();
  clear_has_user1();
}
inline const ::proto::common::role_cross_data& rs_arena_battle_ai_notify::user1() const {
  return user1_ != NULL ? *user1_ : *default_instance_->user1_;
}
inline ::proto::common::role_cross_data* rs_arena_battle_ai_notify::mutable_user1() {
  set_has_user1();
  if (user1_ == NULL) user1_ = new ::proto::common::role_cross_data;
  return user1_;
}
inline ::proto::common::role_cross_data* rs_arena_battle_ai_notify::release_user1() {
  clear_has_user1();
  ::proto::common::role_cross_data* temp = user1_;
  user1_ = NULL;
  return temp;
}
inline void rs_arena_battle_ai_notify::set_allocated_user1(::proto::common::role_cross_data* user1) {
  delete user1_;
  user1_ = user1;
  if (user1) {
    set_has_user1();
  } else {
    clear_has_user1();
  }
}

// optional .proto.common.mirror_fight_data npc = 3;
inline bool rs_arena_battle_ai_notify::has_npc() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void rs_arena_battle_ai_notify::set_has_npc() {
  _has_bits_[0] |= 0x00000004u;
}
inline void rs_arena_battle_ai_notify::clear_has_npc() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void rs_arena_battle_ai_notify::clear_npc() {
  if (npc_ != NULL) npc_->::proto::common::mirror_fight_data::Clear();
  clear_has_npc();
}
inline const ::proto::common::mirror_fight_data& rs_arena_battle_ai_notify::npc() const {
  return npc_ != NULL ? *npc_ : *default_instance_->npc_;
}
inline ::proto::common::mirror_fight_data* rs_arena_battle_ai_notify::mutable_npc() {
  set_has_npc();
  if (npc_ == NULL) npc_ = new ::proto::common::mirror_fight_data;
  return npc_;
}
inline ::proto::common::mirror_fight_data* rs_arena_battle_ai_notify::release_npc() {
  clear_has_npc();
  ::proto::common::mirror_fight_data* temp = npc_;
  npc_ = NULL;
  return temp;
}
inline void rs_arena_battle_ai_notify::set_allocated_npc(::proto::common::mirror_fight_data* npc) {
  delete npc_;
  npc_ = npc;
  if (npc) {
    set_has_npc();
  } else {
    clear_has_npc();
  }
}

// -------------------------------------------------------------------

// sr_arena_battle_result_notify

// optional .proto.common.obj_single win_obj = 1;
inline bool sr_arena_battle_result_notify::has_win_obj() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void sr_arena_battle_result_notify::set_has_win_obj() {
  _has_bits_[0] |= 0x00000001u;
}
inline void sr_arena_battle_result_notify::clear_has_win_obj() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void sr_arena_battle_result_notify::clear_win_obj() {
  if (win_obj_ != NULL) win_obj_->::proto::common::obj_single::Clear();
  clear_has_win_obj();
}
inline const ::proto::common::obj_single& sr_arena_battle_result_notify::win_obj() const {
  return win_obj_ != NULL ? *win_obj_ : *default_instance_->win_obj_;
}
inline ::proto::common::obj_single* sr_arena_battle_result_notify::mutable_win_obj() {
  set_has_win_obj();
  if (win_obj_ == NULL) win_obj_ = new ::proto::common::obj_single;
  return win_obj_;
}
inline ::proto::common::obj_single* sr_arena_battle_result_notify::release_win_obj() {
  clear_has_win_obj();
  ::proto::common::obj_single* temp = win_obj_;
  win_obj_ = NULL;
  return temp;
}
inline void sr_arena_battle_result_notify::set_allocated_win_obj(::proto::common::obj_single* win_obj) {
  delete win_obj_;
  win_obj_ = win_obj;
  if (win_obj) {
    set_has_win_obj();
  } else {
    clear_has_win_obj();
  }
}

// optional .proto.common.obj_single lose_obj = 2;
inline bool sr_arena_battle_result_notify::has_lose_obj() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void sr_arena_battle_result_notify::set_has_lose_obj() {
  _has_bits_[0] |= 0x00000002u;
}
inline void sr_arena_battle_result_notify::clear_has_lose_obj() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void sr_arena_battle_result_notify::clear_lose_obj() {
  if (lose_obj_ != NULL) lose_obj_->::proto::common::obj_single::Clear();
  clear_has_lose_obj();
}
inline const ::proto::common::obj_single& sr_arena_battle_result_notify::lose_obj() const {
  return lose_obj_ != NULL ? *lose_obj_ : *default_instance_->lose_obj_;
}
inline ::proto::common::obj_single* sr_arena_battle_result_notify::mutable_lose_obj() {
  set_has_lose_obj();
  if (lose_obj_ == NULL) lose_obj_ = new ::proto::common::obj_single;
  return lose_obj_;
}
inline ::proto::common::obj_single* sr_arena_battle_result_notify::release_lose_obj() {
  clear_has_lose_obj();
  ::proto::common::obj_single* temp = lose_obj_;
  lose_obj_ = NULL;
  return temp;
}
inline void sr_arena_battle_result_notify::set_allocated_lose_obj(::proto::common::obj_single* lose_obj) {
  delete lose_obj_;
  lose_obj_ = lose_obj;
  if (lose_obj) {
    set_has_lose_obj();
  } else {
    clear_has_lose_obj();
  }
}

// optional .proto.common.fight_param fight = 3;
inline bool sr_arena_battle_result_notify::has_fight() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void sr_arena_battle_result_notify::set_has_fight() {
  _has_bits_[0] |= 0x00000004u;
}
inline void sr_arena_battle_result_notify::clear_has_fight() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void sr_arena_battle_result_notify::clear_fight() {
  if (fight_ != NULL) fight_->::proto::common::fight_param::Clear();
  clear_has_fight();
}
inline const ::proto::common::fight_param& sr_arena_battle_result_notify::fight() const {
  return fight_ != NULL ? *fight_ : *default_instance_->fight_;
}
inline ::proto::common::fight_param* sr_arena_battle_result_notify::mutable_fight() {
  set_has_fight();
  if (fight_ == NULL) fight_ = new ::proto::common::fight_param;
  return fight_;
}
inline ::proto::common::fight_param* sr_arena_battle_result_notify::release_fight() {
  clear_has_fight();
  ::proto::common::fight_param* temp = fight_;
  fight_ = NULL;
  return temp;
}
inline void sr_arena_battle_result_notify::set_allocated_fight(::proto::common::fight_param* fight) {
  delete fight_;
  fight_ = fight;
  if (fight) {
    set_has_fight();
  } else {
    clear_has_fight();
  }
}

// optional .proto.common.hero_data win_heros = 4;
inline bool sr_arena_battle_result_notify::has_win_heros() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void sr_arena_battle_result_notify::set_has_win_heros() {
  _has_bits_[0] |= 0x00000008u;
}
inline void sr_arena_battle_result_notify::clear_has_win_heros() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void sr_arena_battle_result_notify::clear_win_heros() {
  if (win_heros_ != NULL) win_heros_->::proto::common::hero_data::Clear();
  clear_has_win_heros();
}
inline const ::proto::common::hero_data& sr_arena_battle_result_notify::win_heros() const {
  return win_heros_ != NULL ? *win_heros_ : *default_instance_->win_heros_;
}
inline ::proto::common::hero_data* sr_arena_battle_result_notify::mutable_win_heros() {
  set_has_win_heros();
  if (win_heros_ == NULL) win_heros_ = new ::proto::common::hero_data;
  return win_heros_;
}
inline ::proto::common::hero_data* sr_arena_battle_result_notify::release_win_heros() {
  clear_has_win_heros();
  ::proto::common::hero_data* temp = win_heros_;
  win_heros_ = NULL;
  return temp;
}
inline void sr_arena_battle_result_notify::set_allocated_win_heros(::proto::common::hero_data* win_heros) {
  delete win_heros_;
  win_heros_ = win_heros;
  if (win_heros) {
    set_has_win_heros();
  } else {
    clear_has_win_heros();
  }
}

// optional .proto.common.hero_data lose_heros = 5;
inline bool sr_arena_battle_result_notify::has_lose_heros() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void sr_arena_battle_result_notify::set_has_lose_heros() {
  _has_bits_[0] |= 0x00000010u;
}
inline void sr_arena_battle_result_notify::clear_has_lose_heros() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void sr_arena_battle_result_notify::clear_lose_heros() {
  if (lose_heros_ != NULL) lose_heros_->::proto::common::hero_data::Clear();
  clear_has_lose_heros();
}
inline const ::proto::common::hero_data& sr_arena_battle_result_notify::lose_heros() const {
  return lose_heros_ != NULL ? *lose_heros_ : *default_instance_->lose_heros_;
}
inline ::proto::common::hero_data* sr_arena_battle_result_notify::mutable_lose_heros() {
  set_has_lose_heros();
  if (lose_heros_ == NULL) lose_heros_ = new ::proto::common::hero_data;
  return lose_heros_;
}
inline ::proto::common::hero_data* sr_arena_battle_result_notify::release_lose_heros() {
  clear_has_lose_heros();
  ::proto::common::hero_data* temp = lose_heros_;
  lose_heros_ = NULL;
  return temp;
}
inline void sr_arena_battle_result_notify::set_allocated_lose_heros(::proto::common::hero_data* lose_heros) {
  delete lose_heros_;
  lose_heros_ = lose_heros;
  if (lose_heros) {
    set_has_lose_heros();
  } else {
    clear_has_lose_heros();
  }
}

// -------------------------------------------------------------------

// gr_arena_match_request

// optional uint32 score = 1;
inline bool gr_arena_match_request::has_score() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gr_arena_match_request::set_has_score() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gr_arena_match_request::clear_has_score() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gr_arena_match_request::clear_score() {
  score_ = 0u;
  clear_has_score();
}
inline ::google::protobuf::uint32 gr_arena_match_request::score() const {
  return score_;
}
inline void gr_arena_match_request::set_score(::google::protobuf::uint32 value) {
  set_has_score();
  score_ = value;
}

// optional uint32 arena_level = 2;
inline bool gr_arena_match_request::has_arena_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gr_arena_match_request::set_has_arena_level() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gr_arena_match_request::clear_has_arena_level() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gr_arena_match_request::clear_arena_level() {
  arena_level_ = 0u;
  clear_has_arena_level();
}
inline ::google::protobuf::uint32 gr_arena_match_request::arena_level() const {
  return arena_level_;
}
inline void gr_arena_match_request::set_arena_level(::google::protobuf::uint32 value) {
  set_has_arena_level();
  arena_level_ = value;
}

// optional .proto.common.role_cross_data user = 3;
inline bool gr_arena_match_request::has_user() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void gr_arena_match_request::set_has_user() {
  _has_bits_[0] |= 0x00000004u;
}
inline void gr_arena_match_request::clear_has_user() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void gr_arena_match_request::clear_user() {
  if (user_ != NULL) user_->::proto::common::role_cross_data::Clear();
  clear_has_user();
}
inline const ::proto::common::role_cross_data& gr_arena_match_request::user() const {
  return user_ != NULL ? *user_ : *default_instance_->user_;
}
inline ::proto::common::role_cross_data* gr_arena_match_request::mutable_user() {
  set_has_user();
  if (user_ == NULL) user_ = new ::proto::common::role_cross_data;
  return user_;
}
inline ::proto::common::role_cross_data* gr_arena_match_request::release_user() {
  clear_has_user();
  ::proto::common::role_cross_data* temp = user_;
  user_ = NULL;
  return temp;
}
inline void gr_arena_match_request::set_allocated_user(::proto::common::role_cross_data* user) {
  delete user_;
  user_ = user;
  if (user) {
    set_has_user();
  } else {
    clear_has_user();
  }
}

// -------------------------------------------------------------------

// rg_arena_match_reply

// optional uint32 reply_code = 1;
inline bool rg_arena_match_reply::has_reply_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void rg_arena_match_reply::set_has_reply_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void rg_arena_match_reply::clear_has_reply_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void rg_arena_match_reply::clear_reply_code() {
  reply_code_ = 0u;
  clear_has_reply_code();
}
inline ::google::protobuf::uint32 rg_arena_match_reply::reply_code() const {
  return reply_code_;
}
inline void rg_arena_match_reply::set_reply_code(::google::protobuf::uint32 value) {
  set_has_reply_code();
  reply_code_ = value;
}

// optional uint32 target_score = 2;
inline bool rg_arena_match_reply::has_target_score() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void rg_arena_match_reply::set_has_target_score() {
  _has_bits_[0] |= 0x00000002u;
}
inline void rg_arena_match_reply::clear_has_target_score() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void rg_arena_match_reply::clear_target_score() {
  target_score_ = 0u;
  clear_has_target_score();
}
inline ::google::protobuf::uint32 rg_arena_match_reply::target_score() const {
  return target_score_;
}
inline void rg_arena_match_reply::set_target_score(::google::protobuf::uint32 value) {
  set_has_target_score();
  target_score_ = value;
}

// optional uint32 target_arena_level = 3;
inline bool rg_arena_match_reply::has_target_arena_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void rg_arena_match_reply::set_has_target_arena_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void rg_arena_match_reply::clear_has_target_arena_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void rg_arena_match_reply::clear_target_arena_level() {
  target_arena_level_ = 0u;
  clear_has_target_arena_level();
}
inline ::google::protobuf::uint32 rg_arena_match_reply::target_arena_level() const {
  return target_arena_level_;
}
inline void rg_arena_match_reply::set_target_arena_level(::google::protobuf::uint32 value) {
  set_has_target_arena_level();
  target_arena_level_ = value;
}

// optional uint32 server_id = 4;
inline bool rg_arena_match_reply::has_server_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void rg_arena_match_reply::set_has_server_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void rg_arena_match_reply::clear_has_server_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void rg_arena_match_reply::clear_server_id() {
  server_id_ = 0u;
  clear_has_server_id();
}
inline ::google::protobuf::uint32 rg_arena_match_reply::server_id() const {
  return server_id_;
}
inline void rg_arena_match_reply::set_server_id(::google::protobuf::uint32 value) {
  set_has_server_id();
  server_id_ = value;
}

// optional .proto.common.role_cross_data target_user = 5;
inline bool rg_arena_match_reply::has_target_user() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void rg_arena_match_reply::set_has_target_user() {
  _has_bits_[0] |= 0x00000010u;
}
inline void rg_arena_match_reply::clear_has_target_user() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void rg_arena_match_reply::clear_target_user() {
  if (target_user_ != NULL) target_user_->::proto::common::role_cross_data::Clear();
  clear_has_target_user();
}
inline const ::proto::common::role_cross_data& rg_arena_match_reply::target_user() const {
  return target_user_ != NULL ? *target_user_ : *default_instance_->target_user_;
}
inline ::proto::common::role_cross_data* rg_arena_match_reply::mutable_target_user() {
  set_has_target_user();
  if (target_user_ == NULL) target_user_ = new ::proto::common::role_cross_data;
  return target_user_;
}
inline ::proto::common::role_cross_data* rg_arena_match_reply::release_target_user() {
  clear_has_target_user();
  ::proto::common::role_cross_data* temp = target_user_;
  target_user_ = NULL;
  return temp;
}
inline void rg_arena_match_reply::set_allocated_target_user(::proto::common::role_cross_data* target_user) {
  delete target_user_;
  target_user_ = target_user;
  if (target_user) {
    set_has_target_user();
  } else {
    clear_has_target_user();
  }
}

// -------------------------------------------------------------------

// gr_arena_cancel_match_request

// -------------------------------------------------------------------

// rg_arena_cancel_match_reply

// optional uint32 server_id = 1;
inline bool rg_arena_cancel_match_reply::has_server_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void rg_arena_cancel_match_reply::set_has_server_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void rg_arena_cancel_match_reply::clear_has_server_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void rg_arena_cancel_match_reply::clear_server_id() {
  server_id_ = 0u;
  clear_has_server_id();
}
inline ::google::protobuf::uint32 rg_arena_cancel_match_reply::server_id() const {
  return server_id_;
}
inline void rg_arena_cancel_match_reply::set_server_id(::google::protobuf::uint32 value) {
  set_has_server_id();
  server_id_ = value;
}

// -------------------------------------------------------------------

// rg_arena_battle_result_notify

// optional uint32 is_win = 1;
inline bool rg_arena_battle_result_notify::has_is_win() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void rg_arena_battle_result_notify::set_has_is_win() {
  _has_bits_[0] |= 0x00000001u;
}
inline void rg_arena_battle_result_notify::clear_has_is_win() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void rg_arena_battle_result_notify::clear_is_win() {
  is_win_ = 0u;
  clear_has_is_win();
}
inline ::google::protobuf::uint32 rg_arena_battle_result_notify::is_win() const {
  return is_win_;
}
inline void rg_arena_battle_result_notify::set_is_win(::google::protobuf::uint32 value) {
  set_has_is_win();
  is_win_ = value;
}

// optional uint32 target_score = 2;
inline bool rg_arena_battle_result_notify::has_target_score() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void rg_arena_battle_result_notify::set_has_target_score() {
  _has_bits_[0] |= 0x00000002u;
}
inline void rg_arena_battle_result_notify::clear_has_target_score() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void rg_arena_battle_result_notify::clear_target_score() {
  target_score_ = 0u;
  clear_has_target_score();
}
inline ::google::protobuf::uint32 rg_arena_battle_result_notify::target_score() const {
  return target_score_;
}
inline void rg_arena_battle_result_notify::set_target_score(::google::protobuf::uint32 value) {
  set_has_target_score();
  target_score_ = value;
}

// optional uint32 target_arena_level = 3;
inline bool rg_arena_battle_result_notify::has_target_arena_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void rg_arena_battle_result_notify::set_has_target_arena_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void rg_arena_battle_result_notify::clear_has_target_arena_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void rg_arena_battle_result_notify::clear_target_arena_level() {
  target_arena_level_ = 0u;
  clear_has_target_arena_level();
}
inline ::google::protobuf::uint32 rg_arena_battle_result_notify::target_arena_level() const {
  return target_arena_level_;
}
inline void rg_arena_battle_result_notify::set_target_arena_level(::google::protobuf::uint32 value) {
  set_has_target_arena_level();
  target_arena_level_ = value;
}

// optional .proto.common.role_cross_data target = 4;
inline bool rg_arena_battle_result_notify::has_target() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void rg_arena_battle_result_notify::set_has_target() {
  _has_bits_[0] |= 0x00000008u;
}
inline void rg_arena_battle_result_notify::clear_has_target() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void rg_arena_battle_result_notify::clear_target() {
  if (target_ != NULL) target_->::proto::common::role_cross_data::Clear();
  clear_has_target();
}
inline const ::proto::common::role_cross_data& rg_arena_battle_result_notify::target() const {
  return target_ != NULL ? *target_ : *default_instance_->target_;
}
inline ::proto::common::role_cross_data* rg_arena_battle_result_notify::mutable_target() {
  set_has_target();
  if (target_ == NULL) target_ = new ::proto::common::role_cross_data;
  return target_;
}
inline ::proto::common::role_cross_data* rg_arena_battle_result_notify::release_target() {
  clear_has_target();
  ::proto::common::role_cross_data* temp = target_;
  target_ = NULL;
  return temp;
}
inline void rg_arena_battle_result_notify::set_allocated_target(::proto::common::role_cross_data* target) {
  delete target_;
  target_ = target;
  if (target) {
    set_has_target();
  } else {
    clear_has_target();
  }
}

// optional int32 own_rank_up = 5;
inline bool rg_arena_battle_result_notify::has_own_rank_up() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void rg_arena_battle_result_notify::set_has_own_rank_up() {
  _has_bits_[0] |= 0x00000010u;
}
inline void rg_arena_battle_result_notify::clear_has_own_rank_up() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void rg_arena_battle_result_notify::clear_own_rank_up() {
  own_rank_up_ = 0;
  clear_has_own_rank_up();
}
inline ::google::protobuf::int32 rg_arena_battle_result_notify::own_rank_up() const {
  return own_rank_up_;
}
inline void rg_arena_battle_result_notify::set_own_rank_up(::google::protobuf::int32 value) {
  set_has_own_rank_up();
  own_rank_up_ = value;
}

// optional uint32 own_new_rank = 6;
inline bool rg_arena_battle_result_notify::has_own_new_rank() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void rg_arena_battle_result_notify::set_has_own_new_rank() {
  _has_bits_[0] |= 0x00000020u;
}
inline void rg_arena_battle_result_notify::clear_has_own_new_rank() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void rg_arena_battle_result_notify::clear_own_new_rank() {
  own_new_rank_ = 0u;
  clear_has_own_new_rank();
}
inline ::google::protobuf::uint32 rg_arena_battle_result_notify::own_new_rank() const {
  return own_new_rank_;
}
inline void rg_arena_battle_result_notify::set_own_new_rank(::google::protobuf::uint32 value) {
  set_has_own_new_rank();
  own_new_rank_ = value;
}

// optional uint32 server_id = 7;
inline bool rg_arena_battle_result_notify::has_server_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void rg_arena_battle_result_notify::set_has_server_id() {
  _has_bits_[0] |= 0x00000040u;
}
inline void rg_arena_battle_result_notify::clear_has_server_id() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void rg_arena_battle_result_notify::clear_server_id() {
  server_id_ = 0u;
  clear_has_server_id();
}
inline ::google::protobuf::uint32 rg_arena_battle_result_notify::server_id() const {
  return server_id_;
}
inline void rg_arena_battle_result_notify::set_server_id(::google::protobuf::uint32 value) {
  set_has_server_id();
  server_id_ = value;
}

// -------------------------------------------------------------------

// gr_get_arena_rank_data_request

// optional uint32 rank_start_pos = 1;
inline bool gr_get_arena_rank_data_request::has_rank_start_pos() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gr_get_arena_rank_data_request::set_has_rank_start_pos() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gr_get_arena_rank_data_request::clear_has_rank_start_pos() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gr_get_arena_rank_data_request::clear_rank_start_pos() {
  rank_start_pos_ = 0u;
  clear_has_rank_start_pos();
}
inline ::google::protobuf::uint32 gr_get_arena_rank_data_request::rank_start_pos() const {
  return rank_start_pos_;
}
inline void gr_get_arena_rank_data_request::set_rank_start_pos(::google::protobuf::uint32 value) {
  set_has_rank_start_pos();
  rank_start_pos_ = value;
}

// optional uint32 server_id = 2;
inline bool gr_get_arena_rank_data_request::has_server_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gr_get_arena_rank_data_request::set_has_server_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gr_get_arena_rank_data_request::clear_has_server_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gr_get_arena_rank_data_request::clear_server_id() {
  server_id_ = 0u;
  clear_has_server_id();
}
inline ::google::protobuf::uint32 gr_get_arena_rank_data_request::server_id() const {
  return server_id_;
}
inline void gr_get_arena_rank_data_request::set_server_id(::google::protobuf::uint32 value) {
  set_has_server_id();
  server_id_ = value;
}

// -------------------------------------------------------------------

// rg_get_arena_rank_data_reply

// optional .proto.common.arena_rank_info_array rand_data = 1;
inline bool rg_get_arena_rank_data_reply::has_rand_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void rg_get_arena_rank_data_reply::set_has_rand_data() {
  _has_bits_[0] |= 0x00000001u;
}
inline void rg_get_arena_rank_data_reply::clear_has_rand_data() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void rg_get_arena_rank_data_reply::clear_rand_data() {
  if (rand_data_ != NULL) rand_data_->::proto::common::arena_rank_info_array::Clear();
  clear_has_rand_data();
}
inline const ::proto::common::arena_rank_info_array& rg_get_arena_rank_data_reply::rand_data() const {
  return rand_data_ != NULL ? *rand_data_ : *default_instance_->rand_data_;
}
inline ::proto::common::arena_rank_info_array* rg_get_arena_rank_data_reply::mutable_rand_data() {
  set_has_rand_data();
  if (rand_data_ == NULL) rand_data_ = new ::proto::common::arena_rank_info_array;
  return rand_data_;
}
inline ::proto::common::arena_rank_info_array* rg_get_arena_rank_data_reply::release_rand_data() {
  clear_has_rand_data();
  ::proto::common::arena_rank_info_array* temp = rand_data_;
  rand_data_ = NULL;
  return temp;
}
inline void rg_get_arena_rank_data_reply::set_allocated_rand_data(::proto::common::arena_rank_info_array* rand_data) {
  delete rand_data_;
  rand_data_ = rand_data;
  if (rand_data) {
    set_has_rand_data();
  } else {
    clear_has_rand_data();
  }
}

// optional uint32 server_id = 2;
inline bool rg_get_arena_rank_data_reply::has_server_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void rg_get_arena_rank_data_reply::set_has_server_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void rg_get_arena_rank_data_reply::clear_has_server_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void rg_get_arena_rank_data_reply::clear_server_id() {
  server_id_ = 0u;
  clear_has_server_id();
}
inline ::google::protobuf::uint32 rg_get_arena_rank_data_reply::server_id() const {
  return server_id_;
}
inline void rg_get_arena_rank_data_reply::set_server_id(::google::protobuf::uint32 value) {
  set_has_server_id();
  server_id_ = value;
}

// -------------------------------------------------------------------

// gr_arena_self_rank_request

// optional uint32 server_id = 1;
inline bool gr_arena_self_rank_request::has_server_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gr_arena_self_rank_request::set_has_server_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gr_arena_self_rank_request::clear_has_server_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gr_arena_self_rank_request::clear_server_id() {
  server_id_ = 0u;
  clear_has_server_id();
}
inline ::google::protobuf::uint32 gr_arena_self_rank_request::server_id() const {
  return server_id_;
}
inline void gr_arena_self_rank_request::set_server_id(::google::protobuf::uint32 value) {
  set_has_server_id();
  server_id_ = value;
}

// -------------------------------------------------------------------

// rg_arena_self_rank_reply

// optional uint32 server_id = 1;
inline bool rg_arena_self_rank_reply::has_server_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void rg_arena_self_rank_reply::set_has_server_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void rg_arena_self_rank_reply::clear_has_server_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void rg_arena_self_rank_reply::clear_server_id() {
  server_id_ = 0u;
  clear_has_server_id();
}
inline ::google::protobuf::uint32 rg_arena_self_rank_reply::server_id() const {
  return server_id_;
}
inline void rg_arena_self_rank_reply::set_server_id(::google::protobuf::uint32 value) {
  set_has_server_id();
  server_id_ = value;
}

// optional uint32 rank = 2;
inline bool rg_arena_self_rank_reply::has_rank() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void rg_arena_self_rank_reply::set_has_rank() {
  _has_bits_[0] |= 0x00000002u;
}
inline void rg_arena_self_rank_reply::clear_has_rank() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void rg_arena_self_rank_reply::clear_rank() {
  rank_ = 0u;
  clear_has_rank();
}
inline ::google::protobuf::uint32 rg_arena_self_rank_reply::rank() const {
  return rank_;
}
inline void rg_arena_self_rank_reply::set_rank(::google::protobuf::uint32 value) {
  set_has_rank();
  rank_ = value;
}

// -------------------------------------------------------------------

// ge_arena_fight_data_notify

// optional uint32 fight_value = 1;
inline bool ge_arena_fight_data_notify::has_fight_value() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ge_arena_fight_data_notify::set_has_fight_value() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ge_arena_fight_data_notify::clear_has_fight_value() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ge_arena_fight_data_notify::clear_fight_value() {
  fight_value_ = 0u;
  clear_has_fight_value();
}
inline ::google::protobuf::uint32 ge_arena_fight_data_notify::fight_value() const {
  return fight_value_;
}
inline void ge_arena_fight_data_notify::set_fight_value(::google::protobuf::uint32 value) {
  set_has_fight_value();
  fight_value_ = value;
}

// optional .proto.common.mirror_fight_data fight_data = 2;
inline bool ge_arena_fight_data_notify::has_fight_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ge_arena_fight_data_notify::set_has_fight_data() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ge_arena_fight_data_notify::clear_has_fight_data() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ge_arena_fight_data_notify::clear_fight_data() {
  if (fight_data_ != NULL) fight_data_->::proto::common::mirror_fight_data::Clear();
  clear_has_fight_data();
}
inline const ::proto::common::mirror_fight_data& ge_arena_fight_data_notify::fight_data() const {
  return fight_data_ != NULL ? *fight_data_ : *default_instance_->fight_data_;
}
inline ::proto::common::mirror_fight_data* ge_arena_fight_data_notify::mutable_fight_data() {
  set_has_fight_data();
  if (fight_data_ == NULL) fight_data_ = new ::proto::common::mirror_fight_data;
  return fight_data_;
}
inline ::proto::common::mirror_fight_data* ge_arena_fight_data_notify::release_fight_data() {
  clear_has_fight_data();
  ::proto::common::mirror_fight_data* temp = fight_data_;
  fight_data_ = NULL;
  return temp;
}
inline void ge_arena_fight_data_notify::set_allocated_fight_data(::proto::common::mirror_fight_data* fight_data) {
  delete fight_data_;
  fight_data_ = fight_data;
  if (fight_data) {
    set_has_fight_data();
  } else {
    clear_has_fight_data();
  }
}

// -------------------------------------------------------------------

// ge_role_online_notify

// optional uint32 online = 1;
inline bool ge_role_online_notify::has_online() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ge_role_online_notify::set_has_online() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ge_role_online_notify::clear_has_online() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ge_role_online_notify::clear_online() {
  online_ = 0u;
  clear_has_online();
}
inline ::google::protobuf::uint32 ge_role_online_notify::online() const {
  return online_;
}
inline void ge_role_online_notify::set_online(::google::protobuf::uint32 value) {
  set_has_online();
  online_ = value;
}

// -------------------------------------------------------------------

// ge_challenge_request

// optional uint64 target_uid = 1;
inline bool ge_challenge_request::has_target_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ge_challenge_request::set_has_target_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ge_challenge_request::clear_has_target_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ge_challenge_request::clear_target_uid() {
  target_uid_ = GOOGLE_ULONGLONG(0);
  clear_has_target_uid();
}
inline ::google::protobuf::uint64 ge_challenge_request::target_uid() const {
  return target_uid_;
}
inline void ge_challenge_request::set_target_uid(::google::protobuf::uint64 value) {
  set_has_target_uid();
  target_uid_ = value;
}

// -------------------------------------------------------------------

// eg_challenge_reply

// optional uint32 reply_code = 1;
inline bool eg_challenge_reply::has_reply_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void eg_challenge_reply::set_has_reply_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void eg_challenge_reply::clear_has_reply_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void eg_challenge_reply::clear_reply_code() {
  reply_code_ = 0u;
  clear_has_reply_code();
}
inline ::google::protobuf::uint32 eg_challenge_reply::reply_code() const {
  return reply_code_;
}
inline void eg_challenge_reply::set_reply_code(::google::protobuf::uint32 value) {
  set_has_reply_code();
  reply_code_ = value;
}

// -------------------------------------------------------------------

// ge_challenge_process_request

// optional uint32 process = 1;
inline bool ge_challenge_process_request::has_process() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ge_challenge_process_request::set_has_process() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ge_challenge_process_request::clear_has_process() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ge_challenge_process_request::clear_process() {
  process_ = 0u;
  clear_has_process();
}
inline ::google::protobuf::uint32 ge_challenge_process_request::process() const {
  return process_;
}
inline void ge_challenge_process_request::set_process(::google::protobuf::uint32 value) {
  set_has_process();
  process_ = value;
}

// -------------------------------------------------------------------

// eg_challenge_process_reply

// optional uint32 reply_code = 1;
inline bool eg_challenge_process_reply::has_reply_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void eg_challenge_process_reply::set_has_reply_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void eg_challenge_process_reply::clear_has_reply_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void eg_challenge_process_reply::clear_reply_code() {
  reply_code_ = 0u;
  clear_has_reply_code();
}
inline ::google::protobuf::uint32 eg_challenge_process_reply::reply_code() const {
  return reply_code_;
}
inline void eg_challenge_process_reply::set_reply_code(::google::protobuf::uint32 value) {
  set_has_reply_code();
  reply_code_ = value;
}

// optional uint32 process = 2;
inline bool eg_challenge_process_reply::has_process() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void eg_challenge_process_reply::set_has_process() {
  _has_bits_[0] |= 0x00000002u;
}
inline void eg_challenge_process_reply::clear_has_process() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void eg_challenge_process_reply::clear_process() {
  process_ = 0u;
  clear_has_process();
}
inline ::google::protobuf::uint32 eg_challenge_process_reply::process() const {
  return process_;
}
inline void eg_challenge_process_reply::set_process(::google::protobuf::uint32 value) {
  set_has_process();
  process_ = value;
}

// -------------------------------------------------------------------

// eg_challenge_fight_request

// optional uint64 target_uid = 1;
inline bool eg_challenge_fight_request::has_target_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void eg_challenge_fight_request::set_has_target_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void eg_challenge_fight_request::clear_has_target_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void eg_challenge_fight_request::clear_target_uid() {
  target_uid_ = GOOGLE_ULONGLONG(0);
  clear_has_target_uid();
}
inline ::google::protobuf::uint64 eg_challenge_fight_request::target_uid() const {
  return target_uid_;
}
inline void eg_challenge_fight_request::set_target_uid(::google::protobuf::uint64 value) {
  set_has_target_uid();
  target_uid_ = value;
}

// -------------------------------------------------------------------

// ge_challenge_fight_reply

// optional uint32 result = 1;
inline bool ge_challenge_fight_reply::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ge_challenge_fight_reply::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ge_challenge_fight_reply::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ge_challenge_fight_reply::clear_result() {
  result_ = 0u;
  clear_has_result();
}
inline ::google::protobuf::uint32 ge_challenge_fight_reply::result() const {
  return result_;
}
inline void ge_challenge_fight_reply::set_result(::google::protobuf::uint32 value) {
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// ge_pk_beat_criminal_notify

// optional uint64 criminal_uid = 1;
inline bool ge_pk_beat_criminal_notify::has_criminal_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ge_pk_beat_criminal_notify::set_has_criminal_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ge_pk_beat_criminal_notify::clear_has_criminal_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ge_pk_beat_criminal_notify::clear_criminal_uid() {
  criminal_uid_ = GOOGLE_ULONGLONG(0);
  clear_has_criminal_uid();
}
inline ::google::protobuf::uint64 ge_pk_beat_criminal_notify::criminal_uid() const {
  return criminal_uid_;
}
inline void ge_pk_beat_criminal_notify::set_criminal_uid(::google::protobuf::uint64 value) {
  set_has_criminal_uid();
  criminal_uid_ = value;
}

// -------------------------------------------------------------------

// eg_challenge_transfer_notify

// -------------------------------------------------------------------

// eg_king_war_state_notify

// optional uint32 country_id = 1;
inline bool eg_king_war_state_notify::has_country_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void eg_king_war_state_notify::set_has_country_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void eg_king_war_state_notify::clear_has_country_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void eg_king_war_state_notify::clear_country_id() {
  country_id_ = 0u;
  clear_has_country_id();
}
inline ::google::protobuf::uint32 eg_king_war_state_notify::country_id() const {
  return country_id_;
}
inline void eg_king_war_state_notify::set_country_id(::google::protobuf::uint32 value) {
  set_has_country_id();
  country_id_ = value;
}

// optional .proto.common.king_war_state state = 2 [default = king_war_state_end];
inline bool eg_king_war_state_notify::has_state() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void eg_king_war_state_notify::set_has_state() {
  _has_bits_[0] |= 0x00000002u;
}
inline void eg_king_war_state_notify::clear_has_state() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void eg_king_war_state_notify::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::proto::common::king_war_state eg_king_war_state_notify::state() const {
  return static_cast< ::proto::common::king_war_state >(state_);
}
inline void eg_king_war_state_notify::set_state(::proto::common::king_war_state value) {
  assert(::proto::common::king_war_state_IsValid(value));
  set_has_state();
  state_ = value;
}

// optional uint64 def_family_id = 3;
inline bool eg_king_war_state_notify::has_def_family_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void eg_king_war_state_notify::set_has_def_family_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void eg_king_war_state_notify::clear_has_def_family_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void eg_king_war_state_notify::clear_def_family_id() {
  def_family_id_ = GOOGLE_ULONGLONG(0);
  clear_has_def_family_id();
}
inline ::google::protobuf::uint64 eg_king_war_state_notify::def_family_id() const {
  return def_family_id_;
}
inline void eg_king_war_state_notify::set_def_family_id(::google::protobuf::uint64 value) {
  set_has_def_family_id();
  def_family_id_ = value;
}

// optional string def_family_name = 4;
inline bool eg_king_war_state_notify::has_def_family_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void eg_king_war_state_notify::set_has_def_family_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void eg_king_war_state_notify::clear_has_def_family_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void eg_king_war_state_notify::clear_def_family_name() {
  if (def_family_name_ != &::google::protobuf::internal::kEmptyString) {
    def_family_name_->clear();
  }
  clear_has_def_family_name();
}
inline const ::std::string& eg_king_war_state_notify::def_family_name() const {
  return *def_family_name_;
}
inline void eg_king_war_state_notify::set_def_family_name(const ::std::string& value) {
  set_has_def_family_name();
  if (def_family_name_ == &::google::protobuf::internal::kEmptyString) {
    def_family_name_ = new ::std::string;
  }
  def_family_name_->assign(value);
}
inline void eg_king_war_state_notify::set_def_family_name(const char* value) {
  set_has_def_family_name();
  if (def_family_name_ == &::google::protobuf::internal::kEmptyString) {
    def_family_name_ = new ::std::string;
  }
  def_family_name_->assign(value);
}
inline void eg_king_war_state_notify::set_def_family_name(const char* value, size_t size) {
  set_has_def_family_name();
  if (def_family_name_ == &::google::protobuf::internal::kEmptyString) {
    def_family_name_ = new ::std::string;
  }
  def_family_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* eg_king_war_state_notify::mutable_def_family_name() {
  set_has_def_family_name();
  if (def_family_name_ == &::google::protobuf::internal::kEmptyString) {
    def_family_name_ = new ::std::string;
  }
  return def_family_name_;
}
inline ::std::string* eg_king_war_state_notify::release_def_family_name() {
  clear_has_def_family_name();
  if (def_family_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = def_family_name_;
    def_family_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void eg_king_war_state_notify::set_allocated_def_family_name(::std::string* def_family_name) {
  if (def_family_name_ != &::google::protobuf::internal::kEmptyString) {
    delete def_family_name_;
  }
  if (def_family_name) {
    set_has_def_family_name();
    def_family_name_ = def_family_name;
  } else {
    clear_has_def_family_name();
    def_family_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint64 att_family_id = 5;
inline bool eg_king_war_state_notify::has_att_family_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void eg_king_war_state_notify::set_has_att_family_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void eg_king_war_state_notify::clear_has_att_family_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void eg_king_war_state_notify::clear_att_family_id() {
  att_family_id_ = GOOGLE_ULONGLONG(0);
  clear_has_att_family_id();
}
inline ::google::protobuf::uint64 eg_king_war_state_notify::att_family_id() const {
  return att_family_id_;
}
inline void eg_king_war_state_notify::set_att_family_id(::google::protobuf::uint64 value) {
  set_has_att_family_id();
  att_family_id_ = value;
}

// optional string att_family_name = 6;
inline bool eg_king_war_state_notify::has_att_family_name() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void eg_king_war_state_notify::set_has_att_family_name() {
  _has_bits_[0] |= 0x00000020u;
}
inline void eg_king_war_state_notify::clear_has_att_family_name() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void eg_king_war_state_notify::clear_att_family_name() {
  if (att_family_name_ != &::google::protobuf::internal::kEmptyString) {
    att_family_name_->clear();
  }
  clear_has_att_family_name();
}
inline const ::std::string& eg_king_war_state_notify::att_family_name() const {
  return *att_family_name_;
}
inline void eg_king_war_state_notify::set_att_family_name(const ::std::string& value) {
  set_has_att_family_name();
  if (att_family_name_ == &::google::protobuf::internal::kEmptyString) {
    att_family_name_ = new ::std::string;
  }
  att_family_name_->assign(value);
}
inline void eg_king_war_state_notify::set_att_family_name(const char* value) {
  set_has_att_family_name();
  if (att_family_name_ == &::google::protobuf::internal::kEmptyString) {
    att_family_name_ = new ::std::string;
  }
  att_family_name_->assign(value);
}
inline void eg_king_war_state_notify::set_att_family_name(const char* value, size_t size) {
  set_has_att_family_name();
  if (att_family_name_ == &::google::protobuf::internal::kEmptyString) {
    att_family_name_ = new ::std::string;
  }
  att_family_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* eg_king_war_state_notify::mutable_att_family_name() {
  set_has_att_family_name();
  if (att_family_name_ == &::google::protobuf::internal::kEmptyString) {
    att_family_name_ = new ::std::string;
  }
  return att_family_name_;
}
inline ::std::string* eg_king_war_state_notify::release_att_family_name() {
  clear_has_att_family_name();
  if (att_family_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = att_family_name_;
    att_family_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void eg_king_war_state_notify::set_allocated_att_family_name(::std::string* att_family_name) {
  if (att_family_name_ != &::google::protobuf::internal::kEmptyString) {
    delete att_family_name_;
  }
  if (att_family_name) {
    set_has_att_family_name();
    att_family_name_ = att_family_name;
  } else {
    clear_has_att_family_name();
    att_family_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint64 def_help_family = 7;
inline bool eg_king_war_state_notify::has_def_help_family() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void eg_king_war_state_notify::set_has_def_help_family() {
  _has_bits_[0] |= 0x00000040u;
}
inline void eg_king_war_state_notify::clear_has_def_help_family() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void eg_king_war_state_notify::clear_def_help_family() {
  def_help_family_ = GOOGLE_ULONGLONG(0);
  clear_has_def_help_family();
}
inline ::google::protobuf::uint64 eg_king_war_state_notify::def_help_family() const {
  return def_help_family_;
}
inline void eg_king_war_state_notify::set_def_help_family(::google::protobuf::uint64 value) {
  set_has_def_help_family();
  def_help_family_ = value;
}

// optional string def_help_family_name = 8;
inline bool eg_king_war_state_notify::has_def_help_family_name() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void eg_king_war_state_notify::set_has_def_help_family_name() {
  _has_bits_[0] |= 0x00000080u;
}
inline void eg_king_war_state_notify::clear_has_def_help_family_name() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void eg_king_war_state_notify::clear_def_help_family_name() {
  if (def_help_family_name_ != &::google::protobuf::internal::kEmptyString) {
    def_help_family_name_->clear();
  }
  clear_has_def_help_family_name();
}
inline const ::std::string& eg_king_war_state_notify::def_help_family_name() const {
  return *def_help_family_name_;
}
inline void eg_king_war_state_notify::set_def_help_family_name(const ::std::string& value) {
  set_has_def_help_family_name();
  if (def_help_family_name_ == &::google::protobuf::internal::kEmptyString) {
    def_help_family_name_ = new ::std::string;
  }
  def_help_family_name_->assign(value);
}
inline void eg_king_war_state_notify::set_def_help_family_name(const char* value) {
  set_has_def_help_family_name();
  if (def_help_family_name_ == &::google::protobuf::internal::kEmptyString) {
    def_help_family_name_ = new ::std::string;
  }
  def_help_family_name_->assign(value);
}
inline void eg_king_war_state_notify::set_def_help_family_name(const char* value, size_t size) {
  set_has_def_help_family_name();
  if (def_help_family_name_ == &::google::protobuf::internal::kEmptyString) {
    def_help_family_name_ = new ::std::string;
  }
  def_help_family_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* eg_king_war_state_notify::mutable_def_help_family_name() {
  set_has_def_help_family_name();
  if (def_help_family_name_ == &::google::protobuf::internal::kEmptyString) {
    def_help_family_name_ = new ::std::string;
  }
  return def_help_family_name_;
}
inline ::std::string* eg_king_war_state_notify::release_def_help_family_name() {
  clear_has_def_help_family_name();
  if (def_help_family_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = def_help_family_name_;
    def_help_family_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void eg_king_war_state_notify::set_allocated_def_help_family_name(::std::string* def_help_family_name) {
  if (def_help_family_name_ != &::google::protobuf::internal::kEmptyString) {
    delete def_help_family_name_;
  }
  if (def_help_family_name) {
    set_has_def_help_family_name();
    def_help_family_name_ = def_help_family_name;
  } else {
    clear_has_def_help_family_name();
    def_help_family_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint64 att_help_family = 9;
inline bool eg_king_war_state_notify::has_att_help_family() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void eg_king_war_state_notify::set_has_att_help_family() {
  _has_bits_[0] |= 0x00000100u;
}
inline void eg_king_war_state_notify::clear_has_att_help_family() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void eg_king_war_state_notify::clear_att_help_family() {
  att_help_family_ = GOOGLE_ULONGLONG(0);
  clear_has_att_help_family();
}
inline ::google::protobuf::uint64 eg_king_war_state_notify::att_help_family() const {
  return att_help_family_;
}
inline void eg_king_war_state_notify::set_att_help_family(::google::protobuf::uint64 value) {
  set_has_att_help_family();
  att_help_family_ = value;
}

// optional string att_help_family_name = 10;
inline bool eg_king_war_state_notify::has_att_help_family_name() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void eg_king_war_state_notify::set_has_att_help_family_name() {
  _has_bits_[0] |= 0x00000200u;
}
inline void eg_king_war_state_notify::clear_has_att_help_family_name() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void eg_king_war_state_notify::clear_att_help_family_name() {
  if (att_help_family_name_ != &::google::protobuf::internal::kEmptyString) {
    att_help_family_name_->clear();
  }
  clear_has_att_help_family_name();
}
inline const ::std::string& eg_king_war_state_notify::att_help_family_name() const {
  return *att_help_family_name_;
}
inline void eg_king_war_state_notify::set_att_help_family_name(const ::std::string& value) {
  set_has_att_help_family_name();
  if (att_help_family_name_ == &::google::protobuf::internal::kEmptyString) {
    att_help_family_name_ = new ::std::string;
  }
  att_help_family_name_->assign(value);
}
inline void eg_king_war_state_notify::set_att_help_family_name(const char* value) {
  set_has_att_help_family_name();
  if (att_help_family_name_ == &::google::protobuf::internal::kEmptyString) {
    att_help_family_name_ = new ::std::string;
  }
  att_help_family_name_->assign(value);
}
inline void eg_king_war_state_notify::set_att_help_family_name(const char* value, size_t size) {
  set_has_att_help_family_name();
  if (att_help_family_name_ == &::google::protobuf::internal::kEmptyString) {
    att_help_family_name_ = new ::std::string;
  }
  att_help_family_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* eg_king_war_state_notify::mutable_att_help_family_name() {
  set_has_att_help_family_name();
  if (att_help_family_name_ == &::google::protobuf::internal::kEmptyString) {
    att_help_family_name_ = new ::std::string;
  }
  return att_help_family_name_;
}
inline ::std::string* eg_king_war_state_notify::release_att_help_family_name() {
  clear_has_att_help_family_name();
  if (att_help_family_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = att_help_family_name_;
    att_help_family_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void eg_king_war_state_notify::set_allocated_att_help_family_name(::std::string* att_help_family_name) {
  if (att_help_family_name_ != &::google::protobuf::internal::kEmptyString) {
    delete att_help_family_name_;
  }
  if (att_help_family_name) {
    set_has_att_help_family_name();
    att_help_family_name_ = att_help_family_name;
  } else {
    clear_has_att_help_family_name();
    att_help_family_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// eg_king_war_time_end_notify

// optional uint32 country_id = 1;
inline bool eg_king_war_time_end_notify::has_country_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void eg_king_war_time_end_notify::set_has_country_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void eg_king_war_time_end_notify::clear_has_country_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void eg_king_war_time_end_notify::clear_country_id() {
  country_id_ = 0u;
  clear_has_country_id();
}
inline ::google::protobuf::uint32 eg_king_war_time_end_notify::country_id() const {
  return country_id_;
}
inline void eg_king_war_time_end_notify::set_country_id(::google::protobuf::uint32 value) {
  set_has_country_id();
  country_id_ = value;
}

// -------------------------------------------------------------------

// king_war_personal

// optional uint64 uid = 1;
inline bool king_war_personal::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void king_war_personal::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void king_war_personal::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void king_war_personal::clear_uid() {
  uid_ = GOOGLE_ULONGLONG(0);
  clear_has_uid();
}
inline ::google::protobuf::uint64 king_war_personal::uid() const {
  return uid_;
}
inline void king_war_personal::set_uid(::google::protobuf::uint64 value) {
  set_has_uid();
  uid_ = value;
}

// optional uint64 exploit = 2;
inline bool king_war_personal::has_exploit() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void king_war_personal::set_has_exploit() {
  _has_bits_[0] |= 0x00000002u;
}
inline void king_war_personal::clear_has_exploit() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void king_war_personal::clear_exploit() {
  exploit_ = GOOGLE_ULONGLONG(0);
  clear_has_exploit();
}
inline ::google::protobuf::uint64 king_war_personal::exploit() const {
  return exploit_;
}
inline void king_war_personal::set_exploit(::google::protobuf::uint64 value) {
  set_has_exploit();
  exploit_ = value;
}

// optional uint32 rank = 3;
inline bool king_war_personal::has_rank() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void king_war_personal::set_has_rank() {
  _has_bits_[0] |= 0x00000004u;
}
inline void king_war_personal::clear_has_rank() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void king_war_personal::clear_rank() {
  rank_ = 0u;
  clear_has_rank();
}
inline ::google::protobuf::uint32 king_war_personal::rank() const {
  return rank_;
}
inline void king_war_personal::set_rank(::google::protobuf::uint32 value) {
  set_has_rank();
  rank_ = value;
}

// optional uint32 rank_level = 4;
inline bool king_war_personal::has_rank_level() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void king_war_personal::set_has_rank_level() {
  _has_bits_[0] |= 0x00000008u;
}
inline void king_war_personal::clear_has_rank_level() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void king_war_personal::clear_rank_level() {
  rank_level_ = 0u;
  clear_has_rank_level();
}
inline ::google::protobuf::uint32 king_war_personal::rank_level() const {
  return rank_level_;
}
inline void king_war_personal::set_rank_level(::google::protobuf::uint32 value) {
  set_has_rank_level();
  rank_level_ = value;
}

// optional uint32 exploit_level = 5;
inline bool king_war_personal::has_exploit_level() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void king_war_personal::set_has_exploit_level() {
  _has_bits_[0] |= 0x00000010u;
}
inline void king_war_personal::clear_has_exploit_level() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void king_war_personal::clear_exploit_level() {
  exploit_level_ = 0u;
  clear_has_exploit_level();
}
inline ::google::protobuf::uint32 king_war_personal::exploit_level() const {
  return exploit_level_;
}
inline void king_war_personal::set_exploit_level(::google::protobuf::uint32 value) {
  set_has_exploit_level();
  exploit_level_ = value;
}

// -------------------------------------------------------------------

// ge_king_war_result_notify

// optional uint32 country_id = 1;
inline bool ge_king_war_result_notify::has_country_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ge_king_war_result_notify::set_has_country_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ge_king_war_result_notify::clear_has_country_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ge_king_war_result_notify::clear_country_id() {
  country_id_ = 0u;
  clear_has_country_id();
}
inline ::google::protobuf::uint32 ge_king_war_result_notify::country_id() const {
  return country_id_;
}
inline void ge_king_war_result_notify::set_country_id(::google::protobuf::uint32 value) {
  set_has_country_id();
  country_id_ = value;
}

// optional uint64 win_family_id = 2;
inline bool ge_king_war_result_notify::has_win_family_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ge_king_war_result_notify::set_has_win_family_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ge_king_war_result_notify::clear_has_win_family_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ge_king_war_result_notify::clear_win_family_id() {
  win_family_id_ = GOOGLE_ULONGLONG(0);
  clear_has_win_family_id();
}
inline ::google::protobuf::uint64 ge_king_war_result_notify::win_family_id() const {
  return win_family_id_;
}
inline void ge_king_war_result_notify::set_win_family_id(::google::protobuf::uint64 value) {
  set_has_win_family_id();
  win_family_id_ = value;
}

// repeated .proto.server.king_war_personal all_roles = 3;
inline int ge_king_war_result_notify::all_roles_size() const {
  return all_roles_.size();
}
inline void ge_king_war_result_notify::clear_all_roles() {
  all_roles_.Clear();
}
inline const ::proto::server::king_war_personal& ge_king_war_result_notify::all_roles(int index) const {
  return all_roles_.Get(index);
}
inline ::proto::server::king_war_personal* ge_king_war_result_notify::mutable_all_roles(int index) {
  return all_roles_.Mutable(index);
}
inline ::proto::server::king_war_personal* ge_king_war_result_notify::add_all_roles() {
  return all_roles_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::server::king_war_personal >&
ge_king_war_result_notify::all_roles() const {
  return all_roles_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto::server::king_war_personal >*
ge_king_war_result_notify::mutable_all_roles() {
  return &all_roles_;
}

// -------------------------------------------------------------------

// ge_king_war_scene_user_num_notify

// optional uint32 country_id = 1;
inline bool ge_king_war_scene_user_num_notify::has_country_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ge_king_war_scene_user_num_notify::set_has_country_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ge_king_war_scene_user_num_notify::clear_has_country_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ge_king_war_scene_user_num_notify::clear_country_id() {
  country_id_ = 0u;
  clear_has_country_id();
}
inline ::google::protobuf::uint32 ge_king_war_scene_user_num_notify::country_id() const {
  return country_id_;
}
inline void ge_king_war_scene_user_num_notify::set_country_id(::google::protobuf::uint32 value) {
  set_has_country_id();
  country_id_ = value;
}

// optional uint32 att_num = 2;
inline bool ge_king_war_scene_user_num_notify::has_att_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ge_king_war_scene_user_num_notify::set_has_att_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ge_king_war_scene_user_num_notify::clear_has_att_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ge_king_war_scene_user_num_notify::clear_att_num() {
  att_num_ = 0u;
  clear_has_att_num();
}
inline ::google::protobuf::uint32 ge_king_war_scene_user_num_notify::att_num() const {
  return att_num_;
}
inline void ge_king_war_scene_user_num_notify::set_att_num(::google::protobuf::uint32 value) {
  set_has_att_num();
  att_num_ = value;
}

// optional uint32 def_num = 3;
inline bool ge_king_war_scene_user_num_notify::has_def_num() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ge_king_war_scene_user_num_notify::set_has_def_num() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ge_king_war_scene_user_num_notify::clear_has_def_num() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ge_king_war_scene_user_num_notify::clear_def_num() {
  def_num_ = 0u;
  clear_has_def_num();
}
inline ::google::protobuf::uint32 ge_king_war_scene_user_num_notify::def_num() const {
  return def_num_;
}
inline void ge_king_war_scene_user_num_notify::set_def_num(::google::protobuf::uint32 value) {
  set_has_def_num();
  def_num_ = value;
}

// -------------------------------------------------------------------

// eg_check_user_buy_goods_request

// optional uint64 uid = 1;
inline bool eg_check_user_buy_goods_request::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void eg_check_user_buy_goods_request::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void eg_check_user_buy_goods_request::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void eg_check_user_buy_goods_request::clear_uid() {
  uid_ = GOOGLE_ULONGLONG(0);
  clear_has_uid();
}
inline ::google::protobuf::uint64 eg_check_user_buy_goods_request::uid() const {
  return uid_;
}
inline void eg_check_user_buy_goods_request::set_uid(::google::protobuf::uint64 value) {
  set_has_uid();
  uid_ = value;
}

// optional .proto.common.user_buy_goods info = 2;
inline bool eg_check_user_buy_goods_request::has_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void eg_check_user_buy_goods_request::set_has_info() {
  _has_bits_[0] |= 0x00000002u;
}
inline void eg_check_user_buy_goods_request::clear_has_info() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void eg_check_user_buy_goods_request::clear_info() {
  if (info_ != NULL) info_->::proto::common::user_buy_goods::Clear();
  clear_has_info();
}
inline const ::proto::common::user_buy_goods& eg_check_user_buy_goods_request::info() const {
  return info_ != NULL ? *info_ : *default_instance_->info_;
}
inline ::proto::common::user_buy_goods* eg_check_user_buy_goods_request::mutable_info() {
  set_has_info();
  if (info_ == NULL) info_ = new ::proto::common::user_buy_goods;
  return info_;
}
inline ::proto::common::user_buy_goods* eg_check_user_buy_goods_request::release_info() {
  clear_has_info();
  ::proto::common::user_buy_goods* temp = info_;
  info_ = NULL;
  return temp;
}
inline void eg_check_user_buy_goods_request::set_allocated_info(::proto::common::user_buy_goods* info) {
  delete info_;
  info_ = info;
  if (info) {
    set_has_info();
  } else {
    clear_has_info();
  }
}

// optional uint32 purchased = 3;
inline bool eg_check_user_buy_goods_request::has_purchased() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void eg_check_user_buy_goods_request::set_has_purchased() {
  _has_bits_[0] |= 0x00000004u;
}
inline void eg_check_user_buy_goods_request::clear_has_purchased() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void eg_check_user_buy_goods_request::clear_purchased() {
  purchased_ = 0u;
  clear_has_purchased();
}
inline ::google::protobuf::uint32 eg_check_user_buy_goods_request::purchased() const {
  return purchased_;
}
inline void eg_check_user_buy_goods_request::set_purchased(::google::protobuf::uint32 value) {
  set_has_purchased();
  purchased_ = value;
}

// -------------------------------------------------------------------

// ge_check_user_buy_goods_reply

// optional uint64 uid = 1;
inline bool ge_check_user_buy_goods_reply::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ge_check_user_buy_goods_reply::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ge_check_user_buy_goods_reply::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ge_check_user_buy_goods_reply::clear_uid() {
  uid_ = GOOGLE_ULONGLONG(0);
  clear_has_uid();
}
inline ::google::protobuf::uint64 ge_check_user_buy_goods_reply::uid() const {
  return uid_;
}
inline void ge_check_user_buy_goods_reply::set_uid(::google::protobuf::uint64 value) {
  set_has_uid();
  uid_ = value;
}

// optional .proto.common.user_buy_goods info = 2;
inline bool ge_check_user_buy_goods_reply::has_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ge_check_user_buy_goods_reply::set_has_info() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ge_check_user_buy_goods_reply::clear_has_info() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ge_check_user_buy_goods_reply::clear_info() {
  if (info_ != NULL) info_->::proto::common::user_buy_goods::Clear();
  clear_has_info();
}
inline const ::proto::common::user_buy_goods& ge_check_user_buy_goods_reply::info() const {
  return info_ != NULL ? *info_ : *default_instance_->info_;
}
inline ::proto::common::user_buy_goods* ge_check_user_buy_goods_reply::mutable_info() {
  set_has_info();
  if (info_ == NULL) info_ = new ::proto::common::user_buy_goods;
  return info_;
}
inline ::proto::common::user_buy_goods* ge_check_user_buy_goods_reply::release_info() {
  clear_has_info();
  ::proto::common::user_buy_goods* temp = info_;
  info_ = NULL;
  return temp;
}
inline void ge_check_user_buy_goods_reply::set_allocated_info(::proto::common::user_buy_goods* info) {
  delete info_;
  info_ = info;
  if (info) {
    set_has_info();
  } else {
    clear_has_info();
  }
}

// optional .proto.common.role_change_data change_data = 3;
inline bool ge_check_user_buy_goods_reply::has_change_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ge_check_user_buy_goods_reply::set_has_change_data() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ge_check_user_buy_goods_reply::clear_has_change_data() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ge_check_user_buy_goods_reply::clear_change_data() {
  if (change_data_ != NULL) change_data_->::proto::common::role_change_data::Clear();
  clear_has_change_data();
}
inline const ::proto::common::role_change_data& ge_check_user_buy_goods_reply::change_data() const {
  return change_data_ != NULL ? *change_data_ : *default_instance_->change_data_;
}
inline ::proto::common::role_change_data* ge_check_user_buy_goods_reply::mutable_change_data() {
  set_has_change_data();
  if (change_data_ == NULL) change_data_ = new ::proto::common::role_change_data;
  return change_data_;
}
inline ::proto::common::role_change_data* ge_check_user_buy_goods_reply::release_change_data() {
  clear_has_change_data();
  ::proto::common::role_change_data* temp = change_data_;
  change_data_ = NULL;
  return temp;
}
inline void ge_check_user_buy_goods_reply::set_allocated_change_data(::proto::common::role_change_data* change_data) {
  delete change_data_;
  change_data_ = change_data;
  if (change_data) {
    set_has_change_data();
  } else {
    clear_has_change_data();
  }
}

// optional uint32 purchased = 4;
inline bool ge_check_user_buy_goods_reply::has_purchased() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ge_check_user_buy_goods_reply::set_has_purchased() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ge_check_user_buy_goods_reply::clear_has_purchased() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ge_check_user_buy_goods_reply::clear_purchased() {
  purchased_ = 0u;
  clear_has_purchased();
}
inline ::google::protobuf::uint32 ge_check_user_buy_goods_reply::purchased() const {
  return purchased_;
}
inline void ge_check_user_buy_goods_reply::set_purchased(::google::protobuf::uint32 value) {
  set_has_purchased();
  purchased_ = value;
}

// -------------------------------------------------------------------

// eg_give_user_goods_notify

// optional uint64 uid = 1;
inline bool eg_give_user_goods_notify::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void eg_give_user_goods_notify::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void eg_give_user_goods_notify::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void eg_give_user_goods_notify::clear_uid() {
  uid_ = GOOGLE_ULONGLONG(0);
  clear_has_uid();
}
inline ::google::protobuf::uint64 eg_give_user_goods_notify::uid() const {
  return uid_;
}
inline void eg_give_user_goods_notify::set_uid(::google::protobuf::uint64 value) {
  set_has_uid();
  uid_ = value;
}

// optional uint32 reply_code = 2;
inline bool eg_give_user_goods_notify::has_reply_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void eg_give_user_goods_notify::set_has_reply_code() {
  _has_bits_[0] |= 0x00000002u;
}
inline void eg_give_user_goods_notify::clear_has_reply_code() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void eg_give_user_goods_notify::clear_reply_code() {
  reply_code_ = 0u;
  clear_has_reply_code();
}
inline ::google::protobuf::uint32 eg_give_user_goods_notify::reply_code() const {
  return reply_code_;
}
inline void eg_give_user_goods_notify::set_reply_code(::google::protobuf::uint32 value) {
  set_has_reply_code();
  reply_code_ = value;
}

// optional .proto.common.user_buy_goods info = 3;
inline bool eg_give_user_goods_notify::has_info() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void eg_give_user_goods_notify::set_has_info() {
  _has_bits_[0] |= 0x00000004u;
}
inline void eg_give_user_goods_notify::clear_has_info() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void eg_give_user_goods_notify::clear_info() {
  if (info_ != NULL) info_->::proto::common::user_buy_goods::Clear();
  clear_has_info();
}
inline const ::proto::common::user_buy_goods& eg_give_user_goods_notify::info() const {
  return info_ != NULL ? *info_ : *default_instance_->info_;
}
inline ::proto::common::user_buy_goods* eg_give_user_goods_notify::mutable_info() {
  set_has_info();
  if (info_ == NULL) info_ = new ::proto::common::user_buy_goods;
  return info_;
}
inline ::proto::common::user_buy_goods* eg_give_user_goods_notify::release_info() {
  clear_has_info();
  ::proto::common::user_buy_goods* temp = info_;
  info_ = NULL;
  return temp;
}
inline void eg_give_user_goods_notify::set_allocated_info(::proto::common::user_buy_goods* info) {
  delete info_;
  info_ = info;
  if (info) {
    set_has_info();
  } else {
    clear_has_info();
  }
}

// optional uint32 purchased = 4;
inline bool eg_give_user_goods_notify::has_purchased() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void eg_give_user_goods_notify::set_has_purchased() {
  _has_bits_[0] |= 0x00000008u;
}
inline void eg_give_user_goods_notify::clear_has_purchased() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void eg_give_user_goods_notify::clear_purchased() {
  purchased_ = 0u;
  clear_has_purchased();
}
inline ::google::protobuf::uint32 eg_give_user_goods_notify::purchased() const {
  return purchased_;
}
inline void eg_give_user_goods_notify::set_purchased(::google::protobuf::uint32 value) {
  set_has_purchased();
  purchased_ = value;
}

// optional .proto.common.role_change_data change_data = 5;
inline bool eg_give_user_goods_notify::has_change_data() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void eg_give_user_goods_notify::set_has_change_data() {
  _has_bits_[0] |= 0x00000010u;
}
inline void eg_give_user_goods_notify::clear_has_change_data() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void eg_give_user_goods_notify::clear_change_data() {
  if (change_data_ != NULL) change_data_->::proto::common::role_change_data::Clear();
  clear_has_change_data();
}
inline const ::proto::common::role_change_data& eg_give_user_goods_notify::change_data() const {
  return change_data_ != NULL ? *change_data_ : *default_instance_->change_data_;
}
inline ::proto::common::role_change_data* eg_give_user_goods_notify::mutable_change_data() {
  set_has_change_data();
  if (change_data_ == NULL) change_data_ = new ::proto::common::role_change_data;
  return change_data_;
}
inline ::proto::common::role_change_data* eg_give_user_goods_notify::release_change_data() {
  clear_has_change_data();
  ::proto::common::role_change_data* temp = change_data_;
  change_data_ = NULL;
  return temp;
}
inline void eg_give_user_goods_notify::set_allocated_change_data(::proto::common::role_change_data* change_data) {
  delete change_data_;
  change_data_ = change_data;
  if (change_data) {
    set_has_change_data();
  } else {
    clear_has_change_data();
  }
}

// optional .proto.common.shop_goods shop_goods_data = 6;
inline bool eg_give_user_goods_notify::has_shop_goods_data() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void eg_give_user_goods_notify::set_has_shop_goods_data() {
  _has_bits_[0] |= 0x00000020u;
}
inline void eg_give_user_goods_notify::clear_has_shop_goods_data() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void eg_give_user_goods_notify::clear_shop_goods_data() {
  if (shop_goods_data_ != NULL) shop_goods_data_->::proto::common::shop_goods::Clear();
  clear_has_shop_goods_data();
}
inline const ::proto::common::shop_goods& eg_give_user_goods_notify::shop_goods_data() const {
  return shop_goods_data_ != NULL ? *shop_goods_data_ : *default_instance_->shop_goods_data_;
}
inline ::proto::common::shop_goods* eg_give_user_goods_notify::mutable_shop_goods_data() {
  set_has_shop_goods_data();
  if (shop_goods_data_ == NULL) shop_goods_data_ = new ::proto::common::shop_goods;
  return shop_goods_data_;
}
inline ::proto::common::shop_goods* eg_give_user_goods_notify::release_shop_goods_data() {
  clear_has_shop_goods_data();
  ::proto::common::shop_goods* temp = shop_goods_data_;
  shop_goods_data_ = NULL;
  return temp;
}
inline void eg_give_user_goods_notify::set_allocated_shop_goods_data(::proto::common::shop_goods* shop_goods_data) {
  delete shop_goods_data_;
  shop_goods_data_ = shop_goods_data;
  if (shop_goods_data) {
    set_has_shop_goods_data();
  } else {
    clear_has_shop_goods_data();
  }
}

// optional .proto.common.user_goods user_goods_data = 7;
inline bool eg_give_user_goods_notify::has_user_goods_data() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void eg_give_user_goods_notify::set_has_user_goods_data() {
  _has_bits_[0] |= 0x00000040u;
}
inline void eg_give_user_goods_notify::clear_has_user_goods_data() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void eg_give_user_goods_notify::clear_user_goods_data() {
  if (user_goods_data_ != NULL) user_goods_data_->::proto::common::user_goods::Clear();
  clear_has_user_goods_data();
}
inline const ::proto::common::user_goods& eg_give_user_goods_notify::user_goods_data() const {
  return user_goods_data_ != NULL ? *user_goods_data_ : *default_instance_->user_goods_data_;
}
inline ::proto::common::user_goods* eg_give_user_goods_notify::mutable_user_goods_data() {
  set_has_user_goods_data();
  if (user_goods_data_ == NULL) user_goods_data_ = new ::proto::common::user_goods;
  return user_goods_data_;
}
inline ::proto::common::user_goods* eg_give_user_goods_notify::release_user_goods_data() {
  clear_has_user_goods_data();
  ::proto::common::user_goods* temp = user_goods_data_;
  user_goods_data_ = NULL;
  return temp;
}
inline void eg_give_user_goods_notify::set_allocated_user_goods_data(::proto::common::user_goods* user_goods_data) {
  delete user_goods_data_;
  user_goods_data_ = user_goods_data;
  if (user_goods_data) {
    set_has_user_goods_data();
  } else {
    clear_has_user_goods_data();
  }
}

// -------------------------------------------------------------------

// er_world_cup_data_request

// optional uint32 server_id = 1;
inline bool er_world_cup_data_request::has_server_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void er_world_cup_data_request::set_has_server_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void er_world_cup_data_request::clear_has_server_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void er_world_cup_data_request::clear_server_id() {
  server_id_ = 0u;
  clear_has_server_id();
}
inline ::google::protobuf::uint32 er_world_cup_data_request::server_id() const {
  return server_id_;
}
inline void er_world_cup_data_request::set_server_id(::google::protobuf::uint32 value) {
  set_has_server_id();
  server_id_ = value;
}

// -------------------------------------------------------------------

// re_world_cup_data_reply

// optional .proto.common.world_cup_data world_cup_info = 1;
inline bool re_world_cup_data_reply::has_world_cup_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void re_world_cup_data_reply::set_has_world_cup_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void re_world_cup_data_reply::clear_has_world_cup_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void re_world_cup_data_reply::clear_world_cup_info() {
  if (world_cup_info_ != NULL) world_cup_info_->::proto::common::world_cup_data::Clear();
  clear_has_world_cup_info();
}
inline const ::proto::common::world_cup_data& re_world_cup_data_reply::world_cup_info() const {
  return world_cup_info_ != NULL ? *world_cup_info_ : *default_instance_->world_cup_info_;
}
inline ::proto::common::world_cup_data* re_world_cup_data_reply::mutable_world_cup_info() {
  set_has_world_cup_info();
  if (world_cup_info_ == NULL) world_cup_info_ = new ::proto::common::world_cup_data;
  return world_cup_info_;
}
inline ::proto::common::world_cup_data* re_world_cup_data_reply::release_world_cup_info() {
  clear_has_world_cup_info();
  ::proto::common::world_cup_data* temp = world_cup_info_;
  world_cup_info_ = NULL;
  return temp;
}
inline void re_world_cup_data_reply::set_allocated_world_cup_info(::proto::common::world_cup_data* world_cup_info) {
  delete world_cup_info_;
  world_cup_info_ = world_cup_info;
  if (world_cup_info) {
    set_has_world_cup_info();
  } else {
    clear_has_world_cup_info();
  }
}

// optional uint32 server_id = 2;
inline bool re_world_cup_data_reply::has_server_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void re_world_cup_data_reply::set_has_server_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void re_world_cup_data_reply::clear_has_server_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void re_world_cup_data_reply::clear_server_id() {
  server_id_ = 0u;
  clear_has_server_id();
}
inline ::google::protobuf::uint32 re_world_cup_data_reply::server_id() const {
  return server_id_;
}
inline void re_world_cup_data_reply::set_server_id(::google::protobuf::uint32 value) {
  set_has_server_id();
  server_id_ = value;
}

// -------------------------------------------------------------------

// re_world_cup_battle_notify

// optional .proto.common.world_cup_battle battle_info = 1;
inline bool re_world_cup_battle_notify::has_battle_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void re_world_cup_battle_notify::set_has_battle_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void re_world_cup_battle_notify::clear_has_battle_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void re_world_cup_battle_notify::clear_battle_info() {
  if (battle_info_ != NULL) battle_info_->::proto::common::world_cup_battle::Clear();
  clear_has_battle_info();
}
inline const ::proto::common::world_cup_battle& re_world_cup_battle_notify::battle_info() const {
  return battle_info_ != NULL ? *battle_info_ : *default_instance_->battle_info_;
}
inline ::proto::common::world_cup_battle* re_world_cup_battle_notify::mutable_battle_info() {
  set_has_battle_info();
  if (battle_info_ == NULL) battle_info_ = new ::proto::common::world_cup_battle;
  return battle_info_;
}
inline ::proto::common::world_cup_battle* re_world_cup_battle_notify::release_battle_info() {
  clear_has_battle_info();
  ::proto::common::world_cup_battle* temp = battle_info_;
  battle_info_ = NULL;
  return temp;
}
inline void re_world_cup_battle_notify::set_allocated_battle_info(::proto::common::world_cup_battle* battle_info) {
  delete battle_info_;
  battle_info_ = battle_info;
  if (battle_info) {
    set_has_battle_info();
  } else {
    clear_has_battle_info();
  }
}

// -------------------------------------------------------------------

// re_world_cup_mail_notify

// optional uint32 server_id = 1;
inline bool re_world_cup_mail_notify::has_server_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void re_world_cup_mail_notify::set_has_server_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void re_world_cup_mail_notify::clear_has_server_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void re_world_cup_mail_notify::clear_server_id() {
  server_id_ = 0u;
  clear_has_server_id();
}
inline ::google::protobuf::uint32 re_world_cup_mail_notify::server_id() const {
  return server_id_;
}
inline void re_world_cup_mail_notify::set_server_id(::google::protobuf::uint32 value) {
  set_has_server_id();
  server_id_ = value;
}

// optional string player_name = 2;
inline bool re_world_cup_mail_notify::has_player_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void re_world_cup_mail_notify::set_has_player_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void re_world_cup_mail_notify::clear_has_player_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void re_world_cup_mail_notify::clear_player_name() {
  if (player_name_ != &::google::protobuf::internal::kEmptyString) {
    player_name_->clear();
  }
  clear_has_player_name();
}
inline const ::std::string& re_world_cup_mail_notify::player_name() const {
  return *player_name_;
}
inline void re_world_cup_mail_notify::set_player_name(const ::std::string& value) {
  set_has_player_name();
  if (player_name_ == &::google::protobuf::internal::kEmptyString) {
    player_name_ = new ::std::string;
  }
  player_name_->assign(value);
}
inline void re_world_cup_mail_notify::set_player_name(const char* value) {
  set_has_player_name();
  if (player_name_ == &::google::protobuf::internal::kEmptyString) {
    player_name_ = new ::std::string;
  }
  player_name_->assign(value);
}
inline void re_world_cup_mail_notify::set_player_name(const char* value, size_t size) {
  set_has_player_name();
  if (player_name_ == &::google::protobuf::internal::kEmptyString) {
    player_name_ = new ::std::string;
  }
  player_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* re_world_cup_mail_notify::mutable_player_name() {
  set_has_player_name();
  if (player_name_ == &::google::protobuf::internal::kEmptyString) {
    player_name_ = new ::std::string;
  }
  return player_name_;
}
inline ::std::string* re_world_cup_mail_notify::release_player_name() {
  clear_has_player_name();
  if (player_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = player_name_;
    player_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void re_world_cup_mail_notify::set_allocated_player_name(::std::string* player_name) {
  if (player_name_ != &::google::protobuf::internal::kEmptyString) {
    delete player_name_;
  }
  if (player_name) {
    set_has_player_name();
    player_name_ = player_name;
  } else {
    clear_has_player_name();
    player_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 round = 3;
inline bool re_world_cup_mail_notify::has_round() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void re_world_cup_mail_notify::set_has_round() {
  _has_bits_[0] |= 0x00000004u;
}
inline void re_world_cup_mail_notify::clear_has_round() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void re_world_cup_mail_notify::clear_round() {
  round_ = 0u;
  clear_has_round();
}
inline ::google::protobuf::uint32 re_world_cup_mail_notify::round() const {
  return round_;
}
inline void re_world_cup_mail_notify::set_round(::google::protobuf::uint32 value) {
  set_has_round();
  round_ = value;
}

// -------------------------------------------------------------------

// re_world_cup_coming_quarter_notify

// optional uint32 server_id = 1;
inline bool re_world_cup_coming_quarter_notify::has_server_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void re_world_cup_coming_quarter_notify::set_has_server_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void re_world_cup_coming_quarter_notify::clear_has_server_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void re_world_cup_coming_quarter_notify::clear_server_id() {
  server_id_ = 0u;
  clear_has_server_id();
}
inline ::google::protobuf::uint32 re_world_cup_coming_quarter_notify::server_id() const {
  return server_id_;
}
inline void re_world_cup_coming_quarter_notify::set_server_id(::google::protobuf::uint32 value) {
  set_has_server_id();
  server_id_ = value;
}

// optional uint32 time_remain = 2;
inline bool re_world_cup_coming_quarter_notify::has_time_remain() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void re_world_cup_coming_quarter_notify::set_has_time_remain() {
  _has_bits_[0] |= 0x00000002u;
}
inline void re_world_cup_coming_quarter_notify::clear_has_time_remain() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void re_world_cup_coming_quarter_notify::clear_time_remain() {
  time_remain_ = 0u;
  clear_has_time_remain();
}
inline ::google::protobuf::uint32 re_world_cup_coming_quarter_notify::time_remain() const {
  return time_remain_;
}
inline void re_world_cup_coming_quarter_notify::set_time_remain(::google::protobuf::uint32 value) {
  set_has_time_remain();
  time_remain_ = value;
}

// -------------------------------------------------------------------

// re_world_cup_coming_soon_notify

// optional uint32 server_id = 1;
inline bool re_world_cup_coming_soon_notify::has_server_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void re_world_cup_coming_soon_notify::set_has_server_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void re_world_cup_coming_soon_notify::clear_has_server_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void re_world_cup_coming_soon_notify::clear_server_id() {
  server_id_ = 0u;
  clear_has_server_id();
}
inline ::google::protobuf::uint32 re_world_cup_coming_soon_notify::server_id() const {
  return server_id_;
}
inline void re_world_cup_coming_soon_notify::set_server_id(::google::protobuf::uint32 value) {
  set_has_server_id();
  server_id_ = value;
}

// optional uint32 time_remain = 2;
inline bool re_world_cup_coming_soon_notify::has_time_remain() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void re_world_cup_coming_soon_notify::set_has_time_remain() {
  _has_bits_[0] |= 0x00000002u;
}
inline void re_world_cup_coming_soon_notify::clear_has_time_remain() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void re_world_cup_coming_soon_notify::clear_time_remain() {
  time_remain_ = 0u;
  clear_has_time_remain();
}
inline ::google::protobuf::uint32 re_world_cup_coming_soon_notify::time_remain() const {
  return time_remain_;
}
inline void re_world_cup_coming_soon_notify::set_time_remain(::google::protobuf::uint32 value) {
  set_has_time_remain();
  time_remain_ = value;
}

// -------------------------------------------------------------------

// re_world_cup_ready_notify

// optional uint32 server_id = 1;
inline bool re_world_cup_ready_notify::has_server_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void re_world_cup_ready_notify::set_has_server_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void re_world_cup_ready_notify::clear_has_server_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void re_world_cup_ready_notify::clear_server_id() {
  server_id_ = 0u;
  clear_has_server_id();
}
inline ::google::protobuf::uint32 re_world_cup_ready_notify::server_id() const {
  return server_id_;
}
inline void re_world_cup_ready_notify::set_server_id(::google::protobuf::uint32 value) {
  set_has_server_id();
  server_id_ = value;
}

// optional .proto.common.world_cup_battle battle_info = 2;
inline bool re_world_cup_ready_notify::has_battle_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void re_world_cup_ready_notify::set_has_battle_info() {
  _has_bits_[0] |= 0x00000002u;
}
inline void re_world_cup_ready_notify::clear_has_battle_info() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void re_world_cup_ready_notify::clear_battle_info() {
  if (battle_info_ != NULL) battle_info_->::proto::common::world_cup_battle::Clear();
  clear_has_battle_info();
}
inline const ::proto::common::world_cup_battle& re_world_cup_ready_notify::battle_info() const {
  return battle_info_ != NULL ? *battle_info_ : *default_instance_->battle_info_;
}
inline ::proto::common::world_cup_battle* re_world_cup_ready_notify::mutable_battle_info() {
  set_has_battle_info();
  if (battle_info_ == NULL) battle_info_ = new ::proto::common::world_cup_battle;
  return battle_info_;
}
inline ::proto::common::world_cup_battle* re_world_cup_ready_notify::release_battle_info() {
  clear_has_battle_info();
  ::proto::common::world_cup_battle* temp = battle_info_;
  battle_info_ = NULL;
  return temp;
}
inline void re_world_cup_ready_notify::set_allocated_battle_info(::proto::common::world_cup_battle* battle_info) {
  delete battle_info_;
  battle_info_ = battle_info;
  if (battle_info) {
    set_has_battle_info();
  } else {
    clear_has_battle_info();
  }
}

// optional uint32 time_remain = 3;
inline bool re_world_cup_ready_notify::has_time_remain() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void re_world_cup_ready_notify::set_has_time_remain() {
  _has_bits_[0] |= 0x00000004u;
}
inline void re_world_cup_ready_notify::clear_has_time_remain() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void re_world_cup_ready_notify::clear_time_remain() {
  time_remain_ = 0u;
  clear_has_time_remain();
}
inline ::google::protobuf::uint32 re_world_cup_ready_notify::time_remain() const {
  return time_remain_;
}
inline void re_world_cup_ready_notify::set_time_remain(::google::protobuf::uint32 value) {
  set_has_time_remain();
  time_remain_ = value;
}

// -------------------------------------------------------------------

// gr_world_cup_play_request

// optional uint32 server_id = 1;
inline bool gr_world_cup_play_request::has_server_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gr_world_cup_play_request::set_has_server_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gr_world_cup_play_request::clear_has_server_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gr_world_cup_play_request::clear_server_id() {
  server_id_ = 0u;
  clear_has_server_id();
}
inline ::google::protobuf::uint32 gr_world_cup_play_request::server_id() const {
  return server_id_;
}
inline void gr_world_cup_play_request::set_server_id(::google::protobuf::uint32 value) {
  set_has_server_id();
  server_id_ = value;
}

// optional .proto.common.role_cross_data rcd = 2;
inline bool gr_world_cup_play_request::has_rcd() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gr_world_cup_play_request::set_has_rcd() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gr_world_cup_play_request::clear_has_rcd() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gr_world_cup_play_request::clear_rcd() {
  if (rcd_ != NULL) rcd_->::proto::common::role_cross_data::Clear();
  clear_has_rcd();
}
inline const ::proto::common::role_cross_data& gr_world_cup_play_request::rcd() const {
  return rcd_ != NULL ? *rcd_ : *default_instance_->rcd_;
}
inline ::proto::common::role_cross_data* gr_world_cup_play_request::mutable_rcd() {
  set_has_rcd();
  if (rcd_ == NULL) rcd_ = new ::proto::common::role_cross_data;
  return rcd_;
}
inline ::proto::common::role_cross_data* gr_world_cup_play_request::release_rcd() {
  clear_has_rcd();
  ::proto::common::role_cross_data* temp = rcd_;
  rcd_ = NULL;
  return temp;
}
inline void gr_world_cup_play_request::set_allocated_rcd(::proto::common::role_cross_data* rcd) {
  delete rcd_;
  rcd_ = rcd;
  if (rcd) {
    set_has_rcd();
  } else {
    clear_has_rcd();
  }
}

// -------------------------------------------------------------------

// rg_world_cup_play_reply

// optional uint32 server_id = 1;
inline bool rg_world_cup_play_reply::has_server_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void rg_world_cup_play_reply::set_has_server_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void rg_world_cup_play_reply::clear_has_server_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void rg_world_cup_play_reply::clear_server_id() {
  server_id_ = 0u;
  clear_has_server_id();
}
inline ::google::protobuf::uint32 rg_world_cup_play_reply::server_id() const {
  return server_id_;
}
inline void rg_world_cup_play_reply::set_server_id(::google::protobuf::uint32 value) {
  set_has_server_id();
  server_id_ = value;
}

// optional uint32 reply_code = 2;
inline bool rg_world_cup_play_reply::has_reply_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void rg_world_cup_play_reply::set_has_reply_code() {
  _has_bits_[0] |= 0x00000002u;
}
inline void rg_world_cup_play_reply::clear_has_reply_code() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void rg_world_cup_play_reply::clear_reply_code() {
  reply_code_ = 0u;
  clear_has_reply_code();
}
inline ::google::protobuf::uint32 rg_world_cup_play_reply::reply_code() const {
  return reply_code_;
}
inline void rg_world_cup_play_reply::set_reply_code(::google::protobuf::uint32 value) {
  set_has_reply_code();
  reply_code_ = value;
}

// -------------------------------------------------------------------

// re_world_cup_update_notify

// optional .proto.common.world_cup_battle battle_info = 1;
inline bool re_world_cup_update_notify::has_battle_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void re_world_cup_update_notify::set_has_battle_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void re_world_cup_update_notify::clear_has_battle_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void re_world_cup_update_notify::clear_battle_info() {
  if (battle_info_ != NULL) battle_info_->::proto::common::world_cup_battle::Clear();
  clear_has_battle_info();
}
inline const ::proto::common::world_cup_battle& re_world_cup_update_notify::battle_info() const {
  return battle_info_ != NULL ? *battle_info_ : *default_instance_->battle_info_;
}
inline ::proto::common::world_cup_battle* re_world_cup_update_notify::mutable_battle_info() {
  set_has_battle_info();
  if (battle_info_ == NULL) battle_info_ = new ::proto::common::world_cup_battle;
  return battle_info_;
}
inline ::proto::common::world_cup_battle* re_world_cup_update_notify::release_battle_info() {
  clear_has_battle_info();
  ::proto::common::world_cup_battle* temp = battle_info_;
  battle_info_ = NULL;
  return temp;
}
inline void re_world_cup_update_notify::set_allocated_battle_info(::proto::common::world_cup_battle* battle_info) {
  delete battle_info_;
  battle_info_ = battle_info;
  if (battle_info) {
    set_has_battle_info();
  } else {
    clear_has_battle_info();
  }
}

// -------------------------------------------------------------------

// er_world_cup_bet_data_request

// optional uint32 server_id = 1;
inline bool er_world_cup_bet_data_request::has_server_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void er_world_cup_bet_data_request::set_has_server_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void er_world_cup_bet_data_request::clear_has_server_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void er_world_cup_bet_data_request::clear_server_id() {
  server_id_ = 0u;
  clear_has_server_id();
}
inline ::google::protobuf::uint32 er_world_cup_bet_data_request::server_id() const {
  return server_id_;
}
inline void er_world_cup_bet_data_request::set_server_id(::google::protobuf::uint32 value) {
  set_has_server_id();
  server_id_ = value;
}

// -------------------------------------------------------------------

// re_world_cup_bet_data_reply

// optional uint32 server_id = 1;
inline bool re_world_cup_bet_data_reply::has_server_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void re_world_cup_bet_data_reply::set_has_server_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void re_world_cup_bet_data_reply::clear_has_server_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void re_world_cup_bet_data_reply::clear_server_id() {
  server_id_ = 0u;
  clear_has_server_id();
}
inline ::google::protobuf::uint32 re_world_cup_bet_data_reply::server_id() const {
  return server_id_;
}
inline void re_world_cup_bet_data_reply::set_server_id(::google::protobuf::uint32 value) {
  set_has_server_id();
  server_id_ = value;
}

// repeated .proto.common.world_cup_bet bet_data = 2;
inline int re_world_cup_bet_data_reply::bet_data_size() const {
  return bet_data_.size();
}
inline void re_world_cup_bet_data_reply::clear_bet_data() {
  bet_data_.Clear();
}
inline const ::proto::common::world_cup_bet& re_world_cup_bet_data_reply::bet_data(int index) const {
  return bet_data_.Get(index);
}
inline ::proto::common::world_cup_bet* re_world_cup_bet_data_reply::mutable_bet_data(int index) {
  return bet_data_.Mutable(index);
}
inline ::proto::common::world_cup_bet* re_world_cup_bet_data_reply::add_bet_data() {
  return bet_data_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::common::world_cup_bet >&
re_world_cup_bet_data_reply::bet_data() const {
  return bet_data_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto::common::world_cup_bet >*
re_world_cup_bet_data_reply::mutable_bet_data() {
  return &bet_data_;
}

// -------------------------------------------------------------------

// gr_world_cup_bet_request

// optional uint64 battle_uid = 1;
inline bool gr_world_cup_bet_request::has_battle_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gr_world_cup_bet_request::set_has_battle_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gr_world_cup_bet_request::clear_has_battle_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gr_world_cup_bet_request::clear_battle_uid() {
  battle_uid_ = GOOGLE_ULONGLONG(0);
  clear_has_battle_uid();
}
inline ::google::protobuf::uint64 gr_world_cup_bet_request::battle_uid() const {
  return battle_uid_;
}
inline void gr_world_cup_bet_request::set_battle_uid(::google::protobuf::uint64 value) {
  set_has_battle_uid();
  battle_uid_ = value;
}

// optional uint64 winner = 2;
inline bool gr_world_cup_bet_request::has_winner() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gr_world_cup_bet_request::set_has_winner() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gr_world_cup_bet_request::clear_has_winner() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gr_world_cup_bet_request::clear_winner() {
  winner_ = GOOGLE_ULONGLONG(0);
  clear_has_winner();
}
inline ::google::protobuf::uint64 gr_world_cup_bet_request::winner() const {
  return winner_;
}
inline void gr_world_cup_bet_request::set_winner(::google::protobuf::uint64 value) {
  set_has_winner();
  winner_ = value;
}

// optional uint32 odds = 3;
inline bool gr_world_cup_bet_request::has_odds() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void gr_world_cup_bet_request::set_has_odds() {
  _has_bits_[0] |= 0x00000004u;
}
inline void gr_world_cup_bet_request::clear_has_odds() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void gr_world_cup_bet_request::clear_odds() {
  odds_ = 0u;
  clear_has_odds();
}
inline ::google::protobuf::uint32 gr_world_cup_bet_request::odds() const {
  return odds_;
}
inline void gr_world_cup_bet_request::set_odds(::google::protobuf::uint32 value) {
  set_has_odds();
  odds_ = value;
}

// optional uint32 bet = 4;
inline bool gr_world_cup_bet_request::has_bet() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void gr_world_cup_bet_request::set_has_bet() {
  _has_bits_[0] |= 0x00000008u;
}
inline void gr_world_cup_bet_request::clear_has_bet() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void gr_world_cup_bet_request::clear_bet() {
  bet_ = 0u;
  clear_has_bet();
}
inline ::google::protobuf::uint32 gr_world_cup_bet_request::bet() const {
  return bet_;
}
inline void gr_world_cup_bet_request::set_bet(::google::protobuf::uint32 value) {
  set_has_bet();
  bet_ = value;
}

// optional uint32 server_id = 5;
inline bool gr_world_cup_bet_request::has_server_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void gr_world_cup_bet_request::set_has_server_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void gr_world_cup_bet_request::clear_has_server_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void gr_world_cup_bet_request::clear_server_id() {
  server_id_ = 0u;
  clear_has_server_id();
}
inline ::google::protobuf::uint32 gr_world_cup_bet_request::server_id() const {
  return server_id_;
}
inline void gr_world_cup_bet_request::set_server_id(::google::protobuf::uint32 value) {
  set_has_server_id();
  server_id_ = value;
}

// -------------------------------------------------------------------

// rg_world_cup_bet_reply

// optional uint32 reply_code = 1;
inline bool rg_world_cup_bet_reply::has_reply_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void rg_world_cup_bet_reply::set_has_reply_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void rg_world_cup_bet_reply::clear_has_reply_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void rg_world_cup_bet_reply::clear_reply_code() {
  reply_code_ = 0u;
  clear_has_reply_code();
}
inline ::google::protobuf::uint32 rg_world_cup_bet_reply::reply_code() const {
  return reply_code_;
}
inline void rg_world_cup_bet_reply::set_reply_code(::google::protobuf::uint32 value) {
  set_has_reply_code();
  reply_code_ = value;
}

// optional uint32 odds = 2;
inline bool rg_world_cup_bet_reply::has_odds() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void rg_world_cup_bet_reply::set_has_odds() {
  _has_bits_[0] |= 0x00000002u;
}
inline void rg_world_cup_bet_reply::clear_has_odds() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void rg_world_cup_bet_reply::clear_odds() {
  odds_ = 0u;
  clear_has_odds();
}
inline ::google::protobuf::uint32 rg_world_cup_bet_reply::odds() const {
  return odds_;
}
inline void rg_world_cup_bet_reply::set_odds(::google::protobuf::uint32 value) {
  set_has_odds();
  odds_ = value;
}

// optional uint32 bet = 3;
inline bool rg_world_cup_bet_reply::has_bet() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void rg_world_cup_bet_reply::set_has_bet() {
  _has_bits_[0] |= 0x00000004u;
}
inline void rg_world_cup_bet_reply::clear_has_bet() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void rg_world_cup_bet_reply::clear_bet() {
  bet_ = 0u;
  clear_has_bet();
}
inline ::google::protobuf::uint32 rg_world_cup_bet_reply::bet() const {
  return bet_;
}
inline void rg_world_cup_bet_reply::set_bet(::google::protobuf::uint32 value) {
  set_has_bet();
  bet_ = value;
}

// optional .proto.common.world_cup_bet self_bet = 4;
inline bool rg_world_cup_bet_reply::has_self_bet() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void rg_world_cup_bet_reply::set_has_self_bet() {
  _has_bits_[0] |= 0x00000008u;
}
inline void rg_world_cup_bet_reply::clear_has_self_bet() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void rg_world_cup_bet_reply::clear_self_bet() {
  if (self_bet_ != NULL) self_bet_->::proto::common::world_cup_bet::Clear();
  clear_has_self_bet();
}
inline const ::proto::common::world_cup_bet& rg_world_cup_bet_reply::self_bet() const {
  return self_bet_ != NULL ? *self_bet_ : *default_instance_->self_bet_;
}
inline ::proto::common::world_cup_bet* rg_world_cup_bet_reply::mutable_self_bet() {
  set_has_self_bet();
  if (self_bet_ == NULL) self_bet_ = new ::proto::common::world_cup_bet;
  return self_bet_;
}
inline ::proto::common::world_cup_bet* rg_world_cup_bet_reply::release_self_bet() {
  clear_has_self_bet();
  ::proto::common::world_cup_bet* temp = self_bet_;
  self_bet_ = NULL;
  return temp;
}
inline void rg_world_cup_bet_reply::set_allocated_self_bet(::proto::common::world_cup_bet* self_bet) {
  delete self_bet_;
  self_bet_ = self_bet;
  if (self_bet) {
    set_has_self_bet();
  } else {
    clear_has_self_bet();
  }
}

// optional uint32 server_id = 5;
inline bool rg_world_cup_bet_reply::has_server_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void rg_world_cup_bet_reply::set_has_server_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void rg_world_cup_bet_reply::clear_has_server_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void rg_world_cup_bet_reply::clear_server_id() {
  server_id_ = 0u;
  clear_has_server_id();
}
inline ::google::protobuf::uint32 rg_world_cup_bet_reply::server_id() const {
  return server_id_;
}
inline void rg_world_cup_bet_reply::set_server_id(::google::protobuf::uint32 value) {
  set_has_server_id();
  server_id_ = value;
}

// -------------------------------------------------------------------

// gr_world_cup_bet_reward_request

// optional uint64 battle_uid = 1;
inline bool gr_world_cup_bet_reward_request::has_battle_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gr_world_cup_bet_reward_request::set_has_battle_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gr_world_cup_bet_reward_request::clear_has_battle_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gr_world_cup_bet_reward_request::clear_battle_uid() {
  battle_uid_ = GOOGLE_ULONGLONG(0);
  clear_has_battle_uid();
}
inline ::google::protobuf::uint64 gr_world_cup_bet_reward_request::battle_uid() const {
  return battle_uid_;
}
inline void gr_world_cup_bet_reward_request::set_battle_uid(::google::protobuf::uint64 value) {
  set_has_battle_uid();
  battle_uid_ = value;
}

// optional uint32 server_id = 2;
inline bool gr_world_cup_bet_reward_request::has_server_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gr_world_cup_bet_reward_request::set_has_server_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gr_world_cup_bet_reward_request::clear_has_server_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gr_world_cup_bet_reward_request::clear_server_id() {
  server_id_ = 0u;
  clear_has_server_id();
}
inline ::google::protobuf::uint32 gr_world_cup_bet_reward_request::server_id() const {
  return server_id_;
}
inline void gr_world_cup_bet_reward_request::set_server_id(::google::protobuf::uint32 value) {
  set_has_server_id();
  server_id_ = value;
}

// -------------------------------------------------------------------

// rg_world_cup_bet_reward_reply

// optional uint32 reply_code = 1;
inline bool rg_world_cup_bet_reward_reply::has_reply_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void rg_world_cup_bet_reward_reply::set_has_reply_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void rg_world_cup_bet_reward_reply::clear_has_reply_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void rg_world_cup_bet_reward_reply::clear_reply_code() {
  reply_code_ = 0u;
  clear_has_reply_code();
}
inline ::google::protobuf::uint32 rg_world_cup_bet_reward_reply::reply_code() const {
  return reply_code_;
}
inline void rg_world_cup_bet_reward_reply::set_reply_code(::google::protobuf::uint32 value) {
  set_has_reply_code();
  reply_code_ = value;
}

// optional uint32 reward = 2;
inline bool rg_world_cup_bet_reward_reply::has_reward() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void rg_world_cup_bet_reward_reply::set_has_reward() {
  _has_bits_[0] |= 0x00000002u;
}
inline void rg_world_cup_bet_reward_reply::clear_has_reward() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void rg_world_cup_bet_reward_reply::clear_reward() {
  reward_ = 0u;
  clear_has_reward();
}
inline ::google::protobuf::uint32 rg_world_cup_bet_reward_reply::reward() const {
  return reward_;
}
inline void rg_world_cup_bet_reward_reply::set_reward(::google::protobuf::uint32 value) {
  set_has_reward();
  reward_ = value;
}

// optional uint32 server_id = 3;
inline bool rg_world_cup_bet_reward_reply::has_server_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void rg_world_cup_bet_reward_reply::set_has_server_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void rg_world_cup_bet_reward_reply::clear_has_server_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void rg_world_cup_bet_reward_reply::clear_server_id() {
  server_id_ = 0u;
  clear_has_server_id();
}
inline ::google::protobuf::uint32 rg_world_cup_bet_reward_reply::server_id() const {
  return server_id_;
}
inline void rg_world_cup_bet_reward_reply::set_server_id(::google::protobuf::uint32 value) {
  set_has_server_id();
  server_id_ = value;
}

// -------------------------------------------------------------------

// er_world_cup_odds_request

// optional uint32 server_id = 1;
inline bool er_world_cup_odds_request::has_server_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void er_world_cup_odds_request::set_has_server_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void er_world_cup_odds_request::clear_has_server_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void er_world_cup_odds_request::clear_server_id() {
  server_id_ = 0u;
  clear_has_server_id();
}
inline ::google::protobuf::uint32 er_world_cup_odds_request::server_id() const {
  return server_id_;
}
inline void er_world_cup_odds_request::set_server_id(::google::protobuf::uint32 value) {
  set_has_server_id();
  server_id_ = value;
}

// optional uint64 battle_uid = 2;
inline bool er_world_cup_odds_request::has_battle_uid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void er_world_cup_odds_request::set_has_battle_uid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void er_world_cup_odds_request::clear_has_battle_uid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void er_world_cup_odds_request::clear_battle_uid() {
  battle_uid_ = GOOGLE_ULONGLONG(0);
  clear_has_battle_uid();
}
inline ::google::protobuf::uint64 er_world_cup_odds_request::battle_uid() const {
  return battle_uid_;
}
inline void er_world_cup_odds_request::set_battle_uid(::google::protobuf::uint64 value) {
  set_has_battle_uid();
  battle_uid_ = value;
}

// -------------------------------------------------------------------

// re_world_cup_odds_reply

// optional uint32 server_id = 1;
inline bool re_world_cup_odds_reply::has_server_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void re_world_cup_odds_reply::set_has_server_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void re_world_cup_odds_reply::clear_has_server_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void re_world_cup_odds_reply::clear_server_id() {
  server_id_ = 0u;
  clear_has_server_id();
}
inline ::google::protobuf::uint32 re_world_cup_odds_reply::server_id() const {
  return server_id_;
}
inline void re_world_cup_odds_reply::set_server_id(::google::protobuf::uint32 value) {
  set_has_server_id();
  server_id_ = value;
}

// optional .proto.common.world_cup_odds odds_data = 2;
inline bool re_world_cup_odds_reply::has_odds_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void re_world_cup_odds_reply::set_has_odds_data() {
  _has_bits_[0] |= 0x00000002u;
}
inline void re_world_cup_odds_reply::clear_has_odds_data() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void re_world_cup_odds_reply::clear_odds_data() {
  if (odds_data_ != NULL) odds_data_->::proto::common::world_cup_odds::Clear();
  clear_has_odds_data();
}
inline const ::proto::common::world_cup_odds& re_world_cup_odds_reply::odds_data() const {
  return odds_data_ != NULL ? *odds_data_ : *default_instance_->odds_data_;
}
inline ::proto::common::world_cup_odds* re_world_cup_odds_reply::mutable_odds_data() {
  set_has_odds_data();
  if (odds_data_ == NULL) odds_data_ = new ::proto::common::world_cup_odds;
  return odds_data_;
}
inline ::proto::common::world_cup_odds* re_world_cup_odds_reply::release_odds_data() {
  clear_has_odds_data();
  ::proto::common::world_cup_odds* temp = odds_data_;
  odds_data_ = NULL;
  return temp;
}
inline void re_world_cup_odds_reply::set_allocated_odds_data(::proto::common::world_cup_odds* odds_data) {
  delete odds_data_;
  odds_data_ = odds_data;
  if (odds_data) {
    set_has_odds_data();
  } else {
    clear_has_odds_data();
  }
}

// -------------------------------------------------------------------

// eg_red_point_notify

// optional uint64 uid = 1;
inline bool eg_red_point_notify::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void eg_red_point_notify::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void eg_red_point_notify::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void eg_red_point_notify::clear_uid() {
  uid_ = GOOGLE_ULONGLONG(0);
  clear_has_uid();
}
inline ::google::protobuf::uint64 eg_red_point_notify::uid() const {
  return uid_;
}
inline void eg_red_point_notify::set_uid(::google::protobuf::uint64 value) {
  set_has_uid();
  uid_ = value;
}

// optional .proto.common.RED_POINT_TYPE red_type = 2;
inline bool eg_red_point_notify::has_red_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void eg_red_point_notify::set_has_red_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void eg_red_point_notify::clear_has_red_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void eg_red_point_notify::clear_red_type() {
  red_type_ = 0;
  clear_has_red_type();
}
inline ::proto::common::RED_POINT_TYPE eg_red_point_notify::red_type() const {
  return static_cast< ::proto::common::RED_POINT_TYPE >(red_type_);
}
inline void eg_red_point_notify::set_red_type(::proto::common::RED_POINT_TYPE value) {
  assert(::proto::common::RED_POINT_TYPE_IsValid(value));
  set_has_red_type();
  red_type_ = value;
}

// repeated uint32 param = 3;
inline int eg_red_point_notify::param_size() const {
  return param_.size();
}
inline void eg_red_point_notify::clear_param() {
  param_.Clear();
}
inline ::google::protobuf::uint32 eg_red_point_notify::param(int index) const {
  return param_.Get(index);
}
inline void eg_red_point_notify::set_param(int index, ::google::protobuf::uint32 value) {
  param_.Set(index, value);
}
inline void eg_red_point_notify::add_param(::google::protobuf::uint32 value) {
  param_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
eg_red_point_notify::param() const {
  return param_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
eg_red_point_notify::mutable_param() {
  return &param_;
}

// -------------------------------------------------------------------

// troop_shadow_base

// optional uint64 role_uid = 1;
inline bool troop_shadow_base::has_role_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void troop_shadow_base::set_has_role_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void troop_shadow_base::clear_has_role_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void troop_shadow_base::clear_role_uid() {
  role_uid_ = GOOGLE_ULONGLONG(0);
  clear_has_role_uid();
}
inline ::google::protobuf::uint64 troop_shadow_base::role_uid() const {
  return role_uid_;
}
inline void troop_shadow_base::set_role_uid(::google::protobuf::uint64 value) {
  set_has_role_uid();
  role_uid_ = value;
}

// optional .proto.common.role_blob_data blob = 2;
inline bool troop_shadow_base::has_blob() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void troop_shadow_base::set_has_blob() {
  _has_bits_[0] |= 0x00000002u;
}
inline void troop_shadow_base::clear_has_blob() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void troop_shadow_base::clear_blob() {
  if (blob_ != NULL) blob_->::proto::common::role_blob_data::Clear();
  clear_has_blob();
}
inline const ::proto::common::role_blob_data& troop_shadow_base::blob() const {
  return blob_ != NULL ? *blob_ : *default_instance_->blob_;
}
inline ::proto::common::role_blob_data* troop_shadow_base::mutable_blob() {
  set_has_blob();
  if (blob_ == NULL) blob_ = new ::proto::common::role_blob_data;
  return blob_;
}
inline ::proto::common::role_blob_data* troop_shadow_base::release_blob() {
  clear_has_blob();
  ::proto::common::role_blob_data* temp = blob_;
  blob_ = NULL;
  return temp;
}
inline void troop_shadow_base::set_allocated_blob(::proto::common::role_blob_data* blob) {
  delete blob_;
  blob_ = blob;
  if (blob) {
    set_has_blob();
  } else {
    clear_has_blob();
  }
}

// optional uint32 country = 3;
inline bool troop_shadow_base::has_country() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void troop_shadow_base::set_has_country() {
  _has_bits_[0] |= 0x00000004u;
}
inline void troop_shadow_base::clear_has_country() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void troop_shadow_base::clear_country() {
  country_ = 0u;
  clear_has_country();
}
inline ::google::protobuf::uint32 troop_shadow_base::country() const {
  return country_;
}
inline void troop_shadow_base::set_country(::google::protobuf::uint32 value) {
  set_has_country();
  country_ = value;
}

// optional uint32 plugin_modle = 4;
inline bool troop_shadow_base::has_plugin_modle() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void troop_shadow_base::set_has_plugin_modle() {
  _has_bits_[0] |= 0x00000008u;
}
inline void troop_shadow_base::clear_has_plugin_modle() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void troop_shadow_base::clear_plugin_modle() {
  plugin_modle_ = 0u;
  clear_has_plugin_modle();
}
inline ::google::protobuf::uint32 troop_shadow_base::plugin_modle() const {
  return plugin_modle_;
}
inline void troop_shadow_base::set_plugin_modle(::google::protobuf::uint32 value) {
  set_has_plugin_modle();
  plugin_modle_ = value;
}

// optional uint32 country_officer = 5;
inline bool troop_shadow_base::has_country_officer() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void troop_shadow_base::set_has_country_officer() {
  _has_bits_[0] |= 0x00000010u;
}
inline void troop_shadow_base::clear_has_country_officer() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void troop_shadow_base::clear_country_officer() {
  country_officer_ = 0u;
  clear_has_country_officer();
}
inline ::google::protobuf::uint32 troop_shadow_base::country_officer() const {
  return country_officer_;
}
inline void troop_shadow_base::set_country_officer(::google::protobuf::uint32 value) {
  set_has_country_officer();
  country_officer_ = value;
}

// optional uint64 family_id = 6;
inline bool troop_shadow_base::has_family_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void troop_shadow_base::set_has_family_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void troop_shadow_base::clear_has_family_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void troop_shadow_base::clear_family_id() {
  family_id_ = GOOGLE_ULONGLONG(0);
  clear_has_family_id();
}
inline ::google::protobuf::uint64 troop_shadow_base::family_id() const {
  return family_id_;
}
inline void troop_shadow_base::set_family_id(::google::protobuf::uint64 value) {
  set_has_family_id();
  family_id_ = value;
}

// optional string family_name = 7;
inline bool troop_shadow_base::has_family_name() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void troop_shadow_base::set_has_family_name() {
  _has_bits_[0] |= 0x00000040u;
}
inline void troop_shadow_base::clear_has_family_name() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void troop_shadow_base::clear_family_name() {
  if (family_name_ != &::google::protobuf::internal::kEmptyString) {
    family_name_->clear();
  }
  clear_has_family_name();
}
inline const ::std::string& troop_shadow_base::family_name() const {
  return *family_name_;
}
inline void troop_shadow_base::set_family_name(const ::std::string& value) {
  set_has_family_name();
  if (family_name_ == &::google::protobuf::internal::kEmptyString) {
    family_name_ = new ::std::string;
  }
  family_name_->assign(value);
}
inline void troop_shadow_base::set_family_name(const char* value) {
  set_has_family_name();
  if (family_name_ == &::google::protobuf::internal::kEmptyString) {
    family_name_ = new ::std::string;
  }
  family_name_->assign(value);
}
inline void troop_shadow_base::set_family_name(const char* value, size_t size) {
  set_has_family_name();
  if (family_name_ == &::google::protobuf::internal::kEmptyString) {
    family_name_ = new ::std::string;
  }
  family_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* troop_shadow_base::mutable_family_name() {
  set_has_family_name();
  if (family_name_ == &::google::protobuf::internal::kEmptyString) {
    family_name_ = new ::std::string;
  }
  return family_name_;
}
inline ::std::string* troop_shadow_base::release_family_name() {
  clear_has_family_name();
  if (family_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = family_name_;
    family_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void troop_shadow_base::set_allocated_family_name(::std::string* family_name) {
  if (family_name_ != &::google::protobuf::internal::kEmptyString) {
    delete family_name_;
  }
  if (family_name) {
    set_has_family_name();
    family_name_ = family_name;
  } else {
    clear_has_family_name();
    family_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 family_officer = 8;
inline bool troop_shadow_base::has_family_officer() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void troop_shadow_base::set_has_family_officer() {
  _has_bits_[0] |= 0x00000080u;
}
inline void troop_shadow_base::clear_has_family_officer() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void troop_shadow_base::clear_family_officer() {
  family_officer_ = 0u;
  clear_has_family_officer();
}
inline ::google::protobuf::uint32 troop_shadow_base::family_officer() const {
  return family_officer_;
}
inline void troop_shadow_base::set_family_officer(::google::protobuf::uint32 value) {
  set_has_family_officer();
  family_officer_ = value;
}

// -------------------------------------------------------------------

// troop_extra_info

// optional uint32 tutor_tid = 1;
inline bool troop_extra_info::has_tutor_tid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void troop_extra_info::set_has_tutor_tid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void troop_extra_info::clear_has_tutor_tid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void troop_extra_info::clear_tutor_tid() {
  tutor_tid_ = 0u;
  clear_has_tutor_tid();
}
inline ::google::protobuf::uint32 troop_extra_info::tutor_tid() const {
  return tutor_tid_;
}
inline void troop_extra_info::set_tutor_tid(::google::protobuf::uint32 value) {
  set_has_tutor_tid();
  tutor_tid_ = value;
}

// optional .proto.server.troop_shadow_base shadow_info = 2;
inline bool troop_extra_info::has_shadow_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void troop_extra_info::set_has_shadow_info() {
  _has_bits_[0] |= 0x00000002u;
}
inline void troop_extra_info::clear_has_shadow_info() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void troop_extra_info::clear_shadow_info() {
  if (shadow_info_ != NULL) shadow_info_->::proto::server::troop_shadow_base::Clear();
  clear_has_shadow_info();
}
inline const ::proto::server::troop_shadow_base& troop_extra_info::shadow_info() const {
  return shadow_info_ != NULL ? *shadow_info_ : *default_instance_->shadow_info_;
}
inline ::proto::server::troop_shadow_base* troop_extra_info::mutable_shadow_info() {
  set_has_shadow_info();
  if (shadow_info_ == NULL) shadow_info_ = new ::proto::server::troop_shadow_base;
  return shadow_info_;
}
inline ::proto::server::troop_shadow_base* troop_extra_info::release_shadow_info() {
  clear_has_shadow_info();
  ::proto::server::troop_shadow_base* temp = shadow_info_;
  shadow_info_ = NULL;
  return temp;
}
inline void troop_extra_info::set_allocated_shadow_info(::proto::server::troop_shadow_base* shadow_info) {
  delete shadow_info_;
  shadow_info_ = shadow_info;
  if (shadow_info) {
    set_has_shadow_info();
  } else {
    clear_has_shadow_info();
  }
}

// -------------------------------------------------------------------

// troop_server_data

// optional .proto.common.troop_data base = 1;
inline bool troop_server_data::has_base() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void troop_server_data::set_has_base() {
  _has_bits_[0] |= 0x00000001u;
}
inline void troop_server_data::clear_has_base() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void troop_server_data::clear_base() {
  if (base_ != NULL) base_->::proto::common::troop_data::Clear();
  clear_has_base();
}
inline const ::proto::common::troop_data& troop_server_data::base() const {
  return base_ != NULL ? *base_ : *default_instance_->base_;
}
inline ::proto::common::troop_data* troop_server_data::mutable_base() {
  set_has_base();
  if (base_ == NULL) base_ = new ::proto::common::troop_data;
  return base_;
}
inline ::proto::common::troop_data* troop_server_data::release_base() {
  clear_has_base();
  ::proto::common::troop_data* temp = base_;
  base_ = NULL;
  return temp;
}
inline void troop_server_data::set_allocated_base(::proto::common::troop_data* base) {
  delete base_;
  base_ = base;
  if (base) {
    set_has_base();
  } else {
    clear_has_base();
  }
}

// optional .proto.server.troop_extra_info extra_data = 2;
inline bool troop_server_data::has_extra_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void troop_server_data::set_has_extra_data() {
  _has_bits_[0] |= 0x00000002u;
}
inline void troop_server_data::clear_has_extra_data() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void troop_server_data::clear_extra_data() {
  if (extra_data_ != NULL) extra_data_->::proto::server::troop_extra_info::Clear();
  clear_has_extra_data();
}
inline const ::proto::server::troop_extra_info& troop_server_data::extra_data() const {
  return extra_data_ != NULL ? *extra_data_ : *default_instance_->extra_data_;
}
inline ::proto::server::troop_extra_info* troop_server_data::mutable_extra_data() {
  set_has_extra_data();
  if (extra_data_ == NULL) extra_data_ = new ::proto::server::troop_extra_info;
  return extra_data_;
}
inline ::proto::server::troop_extra_info* troop_server_data::release_extra_data() {
  clear_has_extra_data();
  ::proto::server::troop_extra_info* temp = extra_data_;
  extra_data_ = NULL;
  return temp;
}
inline void troop_server_data::set_allocated_extra_data(::proto::server::troop_extra_info* extra_data) {
  delete extra_data_;
  extra_data_ = extra_data;
  if (extra_data) {
    set_has_extra_data();
  } else {
    clear_has_extra_data();
  }
}

// -------------------------------------------------------------------

// eg_troop_event_notify

// optional uint32 event = 1;
inline bool eg_troop_event_notify::has_event() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void eg_troop_event_notify::set_has_event() {
  _has_bits_[0] |= 0x00000001u;
}
inline void eg_troop_event_notify::clear_has_event() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void eg_troop_event_notify::clear_event() {
  event_ = 0u;
  clear_has_event();
}
inline ::google::protobuf::uint32 eg_troop_event_notify::event() const {
  return event_;
}
inline void eg_troop_event_notify::set_event(::google::protobuf::uint32 value) {
  set_has_event();
  event_ = value;
}

// optional uint64 member_id = 2;
inline bool eg_troop_event_notify::has_member_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void eg_troop_event_notify::set_has_member_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void eg_troop_event_notify::clear_has_member_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void eg_troop_event_notify::clear_member_id() {
  member_id_ = GOOGLE_ULONGLONG(0);
  clear_has_member_id();
}
inline ::google::protobuf::uint64 eg_troop_event_notify::member_id() const {
  return member_id_;
}
inline void eg_troop_event_notify::set_member_id(::google::protobuf::uint64 value) {
  set_has_member_id();
  member_id_ = value;
}

// optional .proto.server.troop_server_data troop = 3;
inline bool eg_troop_event_notify::has_troop() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void eg_troop_event_notify::set_has_troop() {
  _has_bits_[0] |= 0x00000004u;
}
inline void eg_troop_event_notify::clear_has_troop() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void eg_troop_event_notify::clear_troop() {
  if (troop_ != NULL) troop_->::proto::server::troop_server_data::Clear();
  clear_has_troop();
}
inline const ::proto::server::troop_server_data& eg_troop_event_notify::troop() const {
  return troop_ != NULL ? *troop_ : *default_instance_->troop_;
}
inline ::proto::server::troop_server_data* eg_troop_event_notify::mutable_troop() {
  set_has_troop();
  if (troop_ == NULL) troop_ = new ::proto::server::troop_server_data;
  return troop_;
}
inline ::proto::server::troop_server_data* eg_troop_event_notify::release_troop() {
  clear_has_troop();
  ::proto::server::troop_server_data* temp = troop_;
  troop_ = NULL;
  return temp;
}
inline void eg_troop_event_notify::set_allocated_troop(::proto::server::troop_server_data* troop) {
  delete troop_;
  troop_ = troop;
  if (troop) {
    set_has_troop();
  } else {
    clear_has_troop();
  }
}

// -------------------------------------------------------------------

// ge_troop_create_request

// optional uint32 type = 1;
inline bool ge_troop_create_request::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ge_troop_create_request::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ge_troop_create_request::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ge_troop_create_request::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 ge_troop_create_request::type() const {
  return type_;
}
inline void ge_troop_create_request::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
}

// optional uint64 role_uid = 2;
inline bool ge_troop_create_request::has_role_uid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ge_troop_create_request::set_has_role_uid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ge_troop_create_request::clear_has_role_uid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ge_troop_create_request::clear_role_uid() {
  role_uid_ = GOOGLE_ULONGLONG(0);
  clear_has_role_uid();
}
inline ::google::protobuf::uint64 ge_troop_create_request::role_uid() const {
  return role_uid_;
}
inline void ge_troop_create_request::set_role_uid(::google::protobuf::uint64 value) {
  set_has_role_uid();
  role_uid_ = value;
}

// -------------------------------------------------------------------

// ge_troop_auto_match_request

// optional uint32 type = 1;
inline bool ge_troop_auto_match_request::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ge_troop_auto_match_request::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ge_troop_auto_match_request::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ge_troop_auto_match_request::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 ge_troop_auto_match_request::type() const {
  return type_;
}
inline void ge_troop_auto_match_request::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
}

// -------------------------------------------------------------------

// ge_troop_join_request

// optional uint64 troop_id = 1;
inline bool ge_troop_join_request::has_troop_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ge_troop_join_request::set_has_troop_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ge_troop_join_request::clear_has_troop_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ge_troop_join_request::clear_troop_id() {
  troop_id_ = GOOGLE_ULONGLONG(0);
  clear_has_troop_id();
}
inline ::google::protobuf::uint64 ge_troop_join_request::troop_id() const {
  return troop_id_;
}
inline void ge_troop_join_request::set_troop_id(::google::protobuf::uint64 value) {
  set_has_troop_id();
  troop_id_ = value;
}

// -------------------------------------------------------------------

// eg_troop_agree_apply_request

// optional uint64 apply_uid = 1;
inline bool eg_troop_agree_apply_request::has_apply_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void eg_troop_agree_apply_request::set_has_apply_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void eg_troop_agree_apply_request::clear_has_apply_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void eg_troop_agree_apply_request::clear_apply_uid() {
  apply_uid_ = GOOGLE_ULONGLONG(0);
  clear_has_apply_uid();
}
inline ::google::protobuf::uint64 eg_troop_agree_apply_request::apply_uid() const {
  return apply_uid_;
}
inline void eg_troop_agree_apply_request::set_apply_uid(::google::protobuf::uint64 value) {
  set_has_apply_uid();
  apply_uid_ = value;
}

// -------------------------------------------------------------------

// ge_troop_agree_apply_reply

// optional uint64 apply_uid = 1;
inline bool ge_troop_agree_apply_reply::has_apply_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ge_troop_agree_apply_reply::set_has_apply_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ge_troop_agree_apply_reply::clear_has_apply_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ge_troop_agree_apply_reply::clear_apply_uid() {
  apply_uid_ = GOOGLE_ULONGLONG(0);
  clear_has_apply_uid();
}
inline ::google::protobuf::uint64 ge_troop_agree_apply_reply::apply_uid() const {
  return apply_uid_;
}
inline void ge_troop_agree_apply_reply::set_apply_uid(::google::protobuf::uint64 value) {
  set_has_apply_uid();
  apply_uid_ = value;
}

// optional uint32 reply_code = 2;
inline bool ge_troop_agree_apply_reply::has_reply_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ge_troop_agree_apply_reply::set_has_reply_code() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ge_troop_agree_apply_reply::clear_has_reply_code() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ge_troop_agree_apply_reply::clear_reply_code() {
  reply_code_ = 0u;
  clear_has_reply_code();
}
inline ::google::protobuf::uint32 ge_troop_agree_apply_reply::reply_code() const {
  return reply_code_;
}
inline void ge_troop_agree_apply_reply::set_reply_code(::google::protobuf::uint32 value) {
  set_has_reply_code();
  reply_code_ = value;
}

// -------------------------------------------------------------------

// ge_troop_process_invite_request

// optional uint64 troop_id = 1;
inline bool ge_troop_process_invite_request::has_troop_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ge_troop_process_invite_request::set_has_troop_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ge_troop_process_invite_request::clear_has_troop_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ge_troop_process_invite_request::clear_troop_id() {
  troop_id_ = GOOGLE_ULONGLONG(0);
  clear_has_troop_id();
}
inline ::google::protobuf::uint64 ge_troop_process_invite_request::troop_id() const {
  return troop_id_;
}
inline void ge_troop_process_invite_request::set_troop_id(::google::protobuf::uint64 value) {
  set_has_troop_id();
  troop_id_ = value;
}

// optional uint32 process = 2;
inline bool ge_troop_process_invite_request::has_process() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ge_troop_process_invite_request::set_has_process() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ge_troop_process_invite_request::clear_has_process() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ge_troop_process_invite_request::clear_process() {
  process_ = 0u;
  clear_has_process();
}
inline ::google::protobuf::uint32 ge_troop_process_invite_request::process() const {
  return process_;
}
inline void ge_troop_process_invite_request::set_process(::google::protobuf::uint32 value) {
  set_has_process();
  process_ = value;
}

// optional uint32 game_code = 3;
inline bool ge_troop_process_invite_request::has_game_code() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ge_troop_process_invite_request::set_has_game_code() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ge_troop_process_invite_request::clear_has_game_code() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ge_troop_process_invite_request::clear_game_code() {
  game_code_ = 0u;
  clear_has_game_code();
}
inline ::google::protobuf::uint32 ge_troop_process_invite_request::game_code() const {
  return game_code_;
}
inline void ge_troop_process_invite_request::set_game_code(::google::protobuf::uint32 value) {
  set_has_game_code();
  game_code_ = value;
}

// -------------------------------------------------------------------

// ge_troop_dissolve_notify

// -------------------------------------------------------------------

// ge_troop_back_request

// -------------------------------------------------------------------

// ge_troop_transmission_notify

// optional uint32 result = 1;
inline bool ge_troop_transmission_notify::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ge_troop_transmission_notify::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ge_troop_transmission_notify::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ge_troop_transmission_notify::clear_result() {
  result_ = 0u;
  clear_has_result();
}
inline ::google::protobuf::uint32 ge_troop_transmission_notify::result() const {
  return result_;
}
inline void ge_troop_transmission_notify::set_result(::google::protobuf::uint32 value) {
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// ge_troop_escape_notify

// -------------------------------------------------------------------

// eg_troop_invite_shadow_notify

// optional .proto.common.friend_member member_info = 1;
inline bool eg_troop_invite_shadow_notify::has_member_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void eg_troop_invite_shadow_notify::set_has_member_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void eg_troop_invite_shadow_notify::clear_has_member_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void eg_troop_invite_shadow_notify::clear_member_info() {
  if (member_info_ != NULL) member_info_->::proto::common::friend_member::Clear();
  clear_has_member_info();
}
inline const ::proto::common::friend_member& eg_troop_invite_shadow_notify::member_info() const {
  return member_info_ != NULL ? *member_info_ : *default_instance_->member_info_;
}
inline ::proto::common::friend_member* eg_troop_invite_shadow_notify::mutable_member_info() {
  set_has_member_info();
  if (member_info_ == NULL) member_info_ = new ::proto::common::friend_member;
  return member_info_;
}
inline ::proto::common::friend_member* eg_troop_invite_shadow_notify::release_member_info() {
  clear_has_member_info();
  ::proto::common::friend_member* temp = member_info_;
  member_info_ = NULL;
  return temp;
}
inline void eg_troop_invite_shadow_notify::set_allocated_member_info(::proto::common::friend_member* member_info) {
  delete member_info_;
  member_info_ = member_info;
  if (member_info) {
    set_has_member_info();
  } else {
    clear_has_member_info();
  }
}

// -------------------------------------------------------------------

// ge_troop_del_shadow_notify

// optional uint64 troop_id = 1;
inline bool ge_troop_del_shadow_notify::has_troop_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ge_troop_del_shadow_notify::set_has_troop_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ge_troop_del_shadow_notify::clear_has_troop_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ge_troop_del_shadow_notify::clear_troop_id() {
  troop_id_ = GOOGLE_ULONGLONG(0);
  clear_has_troop_id();
}
inline ::google::protobuf::uint64 ge_troop_del_shadow_notify::troop_id() const {
  return troop_id_;
}
inline void ge_troop_del_shadow_notify::set_troop_id(::google::protobuf::uint64 value) {
  set_has_troop_id();
  troop_id_ = value;
}

// optional uint64 member_id = 2;
inline bool ge_troop_del_shadow_notify::has_member_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ge_troop_del_shadow_notify::set_has_member_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ge_troop_del_shadow_notify::clear_has_member_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ge_troop_del_shadow_notify::clear_member_id() {
  member_id_ = GOOGLE_ULONGLONG(0);
  clear_has_member_id();
}
inline ::google::protobuf::uint64 ge_troop_del_shadow_notify::member_id() const {
  return member_id_;
}
inline void ge_troop_del_shadow_notify::set_member_id(::google::protobuf::uint64 value) {
  set_has_member_id();
  member_id_ = value;
}

// -------------------------------------------------------------------

// ge_troop_friend_notify

// optional uint64 troop_id = 1;
inline bool ge_troop_friend_notify::has_troop_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ge_troop_friend_notify::set_has_troop_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ge_troop_friend_notify::clear_has_troop_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ge_troop_friend_notify::clear_troop_id() {
  troop_id_ = GOOGLE_ULONGLONG(0);
  clear_has_troop_id();
}
inline ::google::protobuf::uint64 ge_troop_friend_notify::troop_id() const {
  return troop_id_;
}
inline void ge_troop_friend_notify::set_troop_id(::google::protobuf::uint64 value) {
  set_has_troop_id();
  troop_id_ = value;
}

// -------------------------------------------------------------------

// game_scene_reg_info

// optional uint64 scene_id = 1;
inline bool game_scene_reg_info::has_scene_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void game_scene_reg_info::set_has_scene_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void game_scene_reg_info::clear_has_scene_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void game_scene_reg_info::clear_scene_id() {
  scene_id_ = GOOGLE_ULONGLONG(0);
  clear_has_scene_id();
}
inline ::google::protobuf::uint64 game_scene_reg_info::scene_id() const {
  return scene_id_;
}
inline void game_scene_reg_info::set_scene_id(::google::protobuf::uint64 value) {
  set_has_scene_id();
  scene_id_ = value;
}

// optional uint32 map_tid = 2;
inline bool game_scene_reg_info::has_map_tid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void game_scene_reg_info::set_has_map_tid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void game_scene_reg_info::clear_has_map_tid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void game_scene_reg_info::clear_map_tid() {
  map_tid_ = 0u;
  clear_has_map_tid();
}
inline ::google::protobuf::uint32 game_scene_reg_info::map_tid() const {
  return map_tid_;
}
inline void game_scene_reg_info::set_map_tid(::google::protobuf::uint32 value) {
  set_has_map_tid();
  map_tid_ = value;
}

// optional uint32 num = 3;
inline bool game_scene_reg_info::has_num() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void game_scene_reg_info::set_has_num() {
  _has_bits_[0] |= 0x00000004u;
}
inline void game_scene_reg_info::clear_has_num() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void game_scene_reg_info::clear_num() {
  num_ = 0u;
  clear_has_num();
}
inline ::google::protobuf::uint32 game_scene_reg_info::num() const {
  return num_;
}
inline void game_scene_reg_info::set_num(::google::protobuf::uint32 value) {
  set_has_num();
  num_ = value;
}

// optional bool is_diversion = 4;
inline bool game_scene_reg_info::has_is_diversion() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void game_scene_reg_info::set_has_is_diversion() {
  _has_bits_[0] |= 0x00000008u;
}
inline void game_scene_reg_info::clear_has_is_diversion() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void game_scene_reg_info::clear_is_diversion() {
  is_diversion_ = false;
  clear_has_is_diversion();
}
inline bool game_scene_reg_info::is_diversion() const {
  return is_diversion_;
}
inline void game_scene_reg_info::set_is_diversion(bool value) {
  set_has_is_diversion();
  is_diversion_ = value;
}

// -------------------------------------------------------------------

// game_scene_reg_ret

// optional uint64 scene_id = 1;
inline bool game_scene_reg_ret::has_scene_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void game_scene_reg_ret::set_has_scene_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void game_scene_reg_ret::clear_has_scene_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void game_scene_reg_ret::clear_scene_id() {
  scene_id_ = GOOGLE_ULONGLONG(0);
  clear_has_scene_id();
}
inline ::google::protobuf::uint64 game_scene_reg_ret::scene_id() const {
  return scene_id_;
}
inline void game_scene_reg_ret::set_scene_id(::google::protobuf::uint64 value) {
  set_has_scene_id();
  scene_id_ = value;
}

// optional bool is_success = 2;
inline bool game_scene_reg_ret::has_is_success() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void game_scene_reg_ret::set_has_is_success() {
  _has_bits_[0] |= 0x00000002u;
}
inline void game_scene_reg_ret::clear_has_is_success() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void game_scene_reg_ret::clear_is_success() {
  is_success_ = false;
  clear_has_is_success();
}
inline bool game_scene_reg_ret::is_success() const {
  return is_success_;
}
inline void game_scene_reg_ret::set_is_success(bool value) {
  set_has_is_success();
  is_success_ = value;
}

// -------------------------------------------------------------------

// ge_game_scene_reg_request

// repeated .proto.server.game_scene_reg_info scene_infos = 2;
inline int ge_game_scene_reg_request::scene_infos_size() const {
  return scene_infos_.size();
}
inline void ge_game_scene_reg_request::clear_scene_infos() {
  scene_infos_.Clear();
}
inline const ::proto::server::game_scene_reg_info& ge_game_scene_reg_request::scene_infos(int index) const {
  return scene_infos_.Get(index);
}
inline ::proto::server::game_scene_reg_info* ge_game_scene_reg_request::mutable_scene_infos(int index) {
  return scene_infos_.Mutable(index);
}
inline ::proto::server::game_scene_reg_info* ge_game_scene_reg_request::add_scene_infos() {
  return scene_infos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::server::game_scene_reg_info >&
ge_game_scene_reg_request::scene_infos() const {
  return scene_infos_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto::server::game_scene_reg_info >*
ge_game_scene_reg_request::mutable_scene_infos() {
  return &scene_infos_;
}

// -------------------------------------------------------------------

// eg_game_scene_reg_reply

// optional uint32 game_id = 1;
inline bool eg_game_scene_reg_reply::has_game_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void eg_game_scene_reg_reply::set_has_game_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void eg_game_scene_reg_reply::clear_has_game_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void eg_game_scene_reg_reply::clear_game_id() {
  game_id_ = 0u;
  clear_has_game_id();
}
inline ::google::protobuf::uint32 eg_game_scene_reg_reply::game_id() const {
  return game_id_;
}
inline void eg_game_scene_reg_reply::set_game_id(::google::protobuf::uint32 value) {
  set_has_game_id();
  game_id_ = value;
}

// repeated .proto.server.game_scene_reg_ret rets = 2;
inline int eg_game_scene_reg_reply::rets_size() const {
  return rets_.size();
}
inline void eg_game_scene_reg_reply::clear_rets() {
  rets_.Clear();
}
inline const ::proto::server::game_scene_reg_ret& eg_game_scene_reg_reply::rets(int index) const {
  return rets_.Get(index);
}
inline ::proto::server::game_scene_reg_ret* eg_game_scene_reg_reply::mutable_rets(int index) {
  return rets_.Mutable(index);
}
inline ::proto::server::game_scene_reg_ret* eg_game_scene_reg_reply::add_rets() {
  return rets_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::server::game_scene_reg_ret >&
eg_game_scene_reg_reply::rets() const {
  return rets_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto::server::game_scene_reg_ret >*
eg_game_scene_reg_reply::mutable_rets() {
  return &rets_;
}

// -------------------------------------------------------------------

// ge_role_scene_info_notify

// optional uint64 scene_id = 1;
inline bool ge_role_scene_info_notify::has_scene_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ge_role_scene_info_notify::set_has_scene_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ge_role_scene_info_notify::clear_has_scene_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ge_role_scene_info_notify::clear_scene_id() {
  scene_id_ = GOOGLE_ULONGLONG(0);
  clear_has_scene_id();
}
inline ::google::protobuf::uint64 ge_role_scene_info_notify::scene_id() const {
  return scene_id_;
}
inline void ge_role_scene_info_notify::set_scene_id(::google::protobuf::uint64 value) {
  set_has_scene_id();
  scene_id_ = value;
}

// optional uint32 map_tid = 2;
inline bool ge_role_scene_info_notify::has_map_tid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ge_role_scene_info_notify::set_has_map_tid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ge_role_scene_info_notify::clear_has_map_tid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ge_role_scene_info_notify::clear_map_tid() {
  map_tid_ = 0u;
  clear_has_map_tid();
}
inline ::google::protobuf::uint32 ge_role_scene_info_notify::map_tid() const {
  return map_tid_;
}
inline void ge_role_scene_info_notify::set_map_tid(::google::protobuf::uint32 value) {
  set_has_map_tid();
  map_tid_ = value;
}

// -------------------------------------------------------------------

// ge_game_scene_unload_notify

// optional uint64 scene_id = 1;
inline bool ge_game_scene_unload_notify::has_scene_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ge_game_scene_unload_notify::set_has_scene_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ge_game_scene_unload_notify::clear_has_scene_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ge_game_scene_unload_notify::clear_scene_id() {
  scene_id_ = GOOGLE_ULONGLONG(0);
  clear_has_scene_id();
}
inline ::google::protobuf::uint64 ge_game_scene_unload_notify::scene_id() const {
  return scene_id_;
}
inline void ge_game_scene_unload_notify::set_scene_id(::google::protobuf::uint64 value) {
  set_has_scene_id();
  scene_id_ = value;
}

// optional uint32 mpa_tid = 2;
inline bool ge_game_scene_unload_notify::has_mpa_tid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ge_game_scene_unload_notify::set_has_mpa_tid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ge_game_scene_unload_notify::clear_has_mpa_tid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ge_game_scene_unload_notify::clear_mpa_tid() {
  mpa_tid_ = 0u;
  clear_has_mpa_tid();
}
inline ::google::protobuf::uint32 ge_game_scene_unload_notify::mpa_tid() const {
  return mpa_tid_;
}
inline void ge_game_scene_unload_notify::set_mpa_tid(::google::protobuf::uint32 value) {
  set_has_mpa_tid();
  mpa_tid_ = value;
}

// -------------------------------------------------------------------

// dungeon_create_data

// optional uint32 game_id = 1;
inline bool dungeon_create_data::has_game_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void dungeon_create_data::set_has_game_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void dungeon_create_data::clear_has_game_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void dungeon_create_data::clear_game_id() {
  game_id_ = 0u;
  clear_has_game_id();
}
inline ::google::protobuf::uint32 dungeon_create_data::game_id() const {
  return game_id_;
}
inline void dungeon_create_data::set_game_id(::google::protobuf::uint32 value) {
  set_has_game_id();
  game_id_ = value;
}

// optional uint32 dungeon_id = 2;
inline bool dungeon_create_data::has_dungeon_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void dungeon_create_data::set_has_dungeon_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void dungeon_create_data::clear_has_dungeon_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void dungeon_create_data::clear_dungeon_id() {
  dungeon_id_ = 0u;
  clear_has_dungeon_id();
}
inline ::google::protobuf::uint32 dungeon_create_data::dungeon_id() const {
  return dungeon_id_;
}
inline void dungeon_create_data::set_dungeon_id(::google::protobuf::uint32 value) {
  set_has_dungeon_id();
  dungeon_id_ = value;
}

// optional .proto.server.dungeon_create_type type = 3;
inline bool dungeon_create_data::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void dungeon_create_data::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void dungeon_create_data::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void dungeon_create_data::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::proto::server::dungeon_create_type dungeon_create_data::type() const {
  return static_cast< ::proto::server::dungeon_create_type >(type_);
}
inline void dungeon_create_data::set_type(::proto::server::dungeon_create_type value) {
  assert(::proto::server::dungeon_create_type_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional uint64 dungeon_create_id = 4;
inline bool dungeon_create_data::has_dungeon_create_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void dungeon_create_data::set_has_dungeon_create_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void dungeon_create_data::clear_has_dungeon_create_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void dungeon_create_data::clear_dungeon_create_id() {
  dungeon_create_id_ = GOOGLE_ULONGLONG(0);
  clear_has_dungeon_create_id();
}
inline ::google::protobuf::uint64 dungeon_create_data::dungeon_create_id() const {
  return dungeon_create_id_;
}
inline void dungeon_create_data::set_dungeon_create_id(::google::protobuf::uint64 value) {
  set_has_dungeon_create_id();
  dungeon_create_id_ = value;
}

// -------------------------------------------------------------------

// ge_open_dungeon_request

// optional .proto.server.dungeon_create_data data = 1;
inline bool ge_open_dungeon_request::has_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ge_open_dungeon_request::set_has_data() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ge_open_dungeon_request::clear_has_data() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ge_open_dungeon_request::clear_data() {
  if (data_ != NULL) data_->::proto::server::dungeon_create_data::Clear();
  clear_has_data();
}
inline const ::proto::server::dungeon_create_data& ge_open_dungeon_request::data() const {
  return data_ != NULL ? *data_ : *default_instance_->data_;
}
inline ::proto::server::dungeon_create_data* ge_open_dungeon_request::mutable_data() {
  set_has_data();
  if (data_ == NULL) data_ = new ::proto::server::dungeon_create_data;
  return data_;
}
inline ::proto::server::dungeon_create_data* ge_open_dungeon_request::release_data() {
  clear_has_data();
  ::proto::server::dungeon_create_data* temp = data_;
  data_ = NULL;
  return temp;
}
inline void ge_open_dungeon_request::set_allocated_data(::proto::server::dungeon_create_data* data) {
  delete data_;
  data_ = data;
  if (data) {
    set_has_data();
  } else {
    clear_has_data();
  }
}

// -------------------------------------------------------------------

// eg_create_dugeon_request

// optional .proto.server.dungeon_create_data data = 1;
inline bool eg_create_dugeon_request::has_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void eg_create_dugeon_request::set_has_data() {
  _has_bits_[0] |= 0x00000001u;
}
inline void eg_create_dugeon_request::clear_has_data() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void eg_create_dugeon_request::clear_data() {
  if (data_ != NULL) data_->::proto::server::dungeon_create_data::Clear();
  clear_has_data();
}
inline const ::proto::server::dungeon_create_data& eg_create_dugeon_request::data() const {
  return data_ != NULL ? *data_ : *default_instance_->data_;
}
inline ::proto::server::dungeon_create_data* eg_create_dugeon_request::mutable_data() {
  set_has_data();
  if (data_ == NULL) data_ = new ::proto::server::dungeon_create_data;
  return data_;
}
inline ::proto::server::dungeon_create_data* eg_create_dugeon_request::release_data() {
  clear_has_data();
  ::proto::server::dungeon_create_data* temp = data_;
  data_ = NULL;
  return temp;
}
inline void eg_create_dugeon_request::set_allocated_data(::proto::server::dungeon_create_data* data) {
  delete data_;
  data_ = data;
  if (data) {
    set_has_data();
  } else {
    clear_has_data();
  }
}

// -------------------------------------------------------------------

// ge_create_dugeon_reply

// optional uint32 reply_code = 1;
inline bool ge_create_dugeon_reply::has_reply_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ge_create_dugeon_reply::set_has_reply_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ge_create_dugeon_reply::clear_has_reply_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ge_create_dugeon_reply::clear_reply_code() {
  reply_code_ = 0u;
  clear_has_reply_code();
}
inline ::google::protobuf::uint32 ge_create_dugeon_reply::reply_code() const {
  return reply_code_;
}
inline void ge_create_dugeon_reply::set_reply_code(::google::protobuf::uint32 value) {
  set_has_reply_code();
  reply_code_ = value;
}

// optional .proto.server.dungeon_create_data data = 2;
inline bool ge_create_dugeon_reply::has_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ge_create_dugeon_reply::set_has_data() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ge_create_dugeon_reply::clear_has_data() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ge_create_dugeon_reply::clear_data() {
  if (data_ != NULL) data_->::proto::server::dungeon_create_data::Clear();
  clear_has_data();
}
inline const ::proto::server::dungeon_create_data& ge_create_dugeon_reply::data() const {
  return data_ != NULL ? *data_ : *default_instance_->data_;
}
inline ::proto::server::dungeon_create_data* ge_create_dugeon_reply::mutable_data() {
  set_has_data();
  if (data_ == NULL) data_ = new ::proto::server::dungeon_create_data;
  return data_;
}
inline ::proto::server::dungeon_create_data* ge_create_dugeon_reply::release_data() {
  clear_has_data();
  ::proto::server::dungeon_create_data* temp = data_;
  data_ = NULL;
  return temp;
}
inline void ge_create_dugeon_reply::set_allocated_data(::proto::server::dungeon_create_data* data) {
  delete data_;
  data_ = data;
  if (data) {
    set_has_data();
  } else {
    clear_has_data();
  }
}

// optional .proto.server.game_scene_reg_info info = 3;
inline bool ge_create_dugeon_reply::has_info() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ge_create_dugeon_reply::set_has_info() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ge_create_dugeon_reply::clear_has_info() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ge_create_dugeon_reply::clear_info() {
  if (info_ != NULL) info_->::proto::server::game_scene_reg_info::Clear();
  clear_has_info();
}
inline const ::proto::server::game_scene_reg_info& ge_create_dugeon_reply::info() const {
  return info_ != NULL ? *info_ : *default_instance_->info_;
}
inline ::proto::server::game_scene_reg_info* ge_create_dugeon_reply::mutable_info() {
  set_has_info();
  if (info_ == NULL) info_ = new ::proto::server::game_scene_reg_info;
  return info_;
}
inline ::proto::server::game_scene_reg_info* ge_create_dugeon_reply::release_info() {
  clear_has_info();
  ::proto::server::game_scene_reg_info* temp = info_;
  info_ = NULL;
  return temp;
}
inline void ge_create_dugeon_reply::set_allocated_info(::proto::server::game_scene_reg_info* info) {
  delete info_;
  info_ = info;
  if (info) {
    set_has_info();
  } else {
    clear_has_info();
  }
}

// -------------------------------------------------------------------

// eg_open_dungeon_reply

// optional uint32 reply_code = 1;
inline bool eg_open_dungeon_reply::has_reply_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void eg_open_dungeon_reply::set_has_reply_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void eg_open_dungeon_reply::clear_has_reply_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void eg_open_dungeon_reply::clear_reply_code() {
  reply_code_ = 0u;
  clear_has_reply_code();
}
inline ::google::protobuf::uint32 eg_open_dungeon_reply::reply_code() const {
  return reply_code_;
}
inline void eg_open_dungeon_reply::set_reply_code(::google::protobuf::uint32 value) {
  set_has_reply_code();
  reply_code_ = value;
}

// optional .proto.server.dungeon_create_data data = 2;
inline bool eg_open_dungeon_reply::has_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void eg_open_dungeon_reply::set_has_data() {
  _has_bits_[0] |= 0x00000002u;
}
inline void eg_open_dungeon_reply::clear_has_data() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void eg_open_dungeon_reply::clear_data() {
  if (data_ != NULL) data_->::proto::server::dungeon_create_data::Clear();
  clear_has_data();
}
inline const ::proto::server::dungeon_create_data& eg_open_dungeon_reply::data() const {
  return data_ != NULL ? *data_ : *default_instance_->data_;
}
inline ::proto::server::dungeon_create_data* eg_open_dungeon_reply::mutable_data() {
  set_has_data();
  if (data_ == NULL) data_ = new ::proto::server::dungeon_create_data;
  return data_;
}
inline ::proto::server::dungeon_create_data* eg_open_dungeon_reply::release_data() {
  clear_has_data();
  ::proto::server::dungeon_create_data* temp = data_;
  data_ = NULL;
  return temp;
}
inline void eg_open_dungeon_reply::set_allocated_data(::proto::server::dungeon_create_data* data) {
  delete data_;
  data_ = data;
  if (data) {
    set_has_data();
  } else {
    clear_has_data();
  }
}

// optional .proto.server.game_scene_reg_info info = 3;
inline bool eg_open_dungeon_reply::has_info() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void eg_open_dungeon_reply::set_has_info() {
  _has_bits_[0] |= 0x00000004u;
}
inline void eg_open_dungeon_reply::clear_has_info() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void eg_open_dungeon_reply::clear_info() {
  if (info_ != NULL) info_->::proto::server::game_scene_reg_info::Clear();
  clear_has_info();
}
inline const ::proto::server::game_scene_reg_info& eg_open_dungeon_reply::info() const {
  return info_ != NULL ? *info_ : *default_instance_->info_;
}
inline ::proto::server::game_scene_reg_info* eg_open_dungeon_reply::mutable_info() {
  set_has_info();
  if (info_ == NULL) info_ = new ::proto::server::game_scene_reg_info;
  return info_;
}
inline ::proto::server::game_scene_reg_info* eg_open_dungeon_reply::release_info() {
  clear_has_info();
  ::proto::server::game_scene_reg_info* temp = info_;
  info_ = NULL;
  return temp;
}
inline void eg_open_dungeon_reply::set_allocated_info(::proto::server::game_scene_reg_info* info) {
  delete info_;
  info_ = info;
  if (info) {
    set_has_info();
  } else {
    clear_has_info();
  }
}

// -------------------------------------------------------------------

// ge_scene_state_notify

// optional uint64 scene_id = 1;
inline bool ge_scene_state_notify::has_scene_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ge_scene_state_notify::set_has_scene_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ge_scene_state_notify::clear_has_scene_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ge_scene_state_notify::clear_scene_id() {
  scene_id_ = GOOGLE_ULONGLONG(0);
  clear_has_scene_id();
}
inline ::google::protobuf::uint64 ge_scene_state_notify::scene_id() const {
  return scene_id_;
}
inline void ge_scene_state_notify::set_scene_id(::google::protobuf::uint64 value) {
  set_has_scene_id();
  scene_id_ = value;
}

// optional uint32 state = 2;
inline bool ge_scene_state_notify::has_state() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ge_scene_state_notify::set_has_state() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ge_scene_state_notify::clear_has_state() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ge_scene_state_notify::clear_state() {
  state_ = 0u;
  clear_has_state();
}
inline ::google::protobuf::uint32 ge_scene_state_notify::state() const {
  return state_;
}
inline void ge_scene_state_notify::set_state(::google::protobuf::uint32 value) {
  set_has_state();
  state_ = value;
}

// -------------------------------------------------------------------

// ge_goods_buy_request

// optional uint64 goods_uid = 1;
inline bool ge_goods_buy_request::has_goods_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ge_goods_buy_request::set_has_goods_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ge_goods_buy_request::clear_has_goods_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ge_goods_buy_request::clear_goods_uid() {
  goods_uid_ = GOOGLE_ULONGLONG(0);
  clear_has_goods_uid();
}
inline ::google::protobuf::uint64 ge_goods_buy_request::goods_uid() const {
  return goods_uid_;
}
inline void ge_goods_buy_request::set_goods_uid(::google::protobuf::uint64 value) {
  set_has_goods_uid();
  goods_uid_ = value;
}

// optional uint32 item_tid = 2;
inline bool ge_goods_buy_request::has_item_tid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ge_goods_buy_request::set_has_item_tid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ge_goods_buy_request::clear_has_item_tid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ge_goods_buy_request::clear_item_tid() {
  item_tid_ = 0u;
  clear_has_item_tid();
}
inline ::google::protobuf::uint32 ge_goods_buy_request::item_tid() const {
  return item_tid_;
}
inline void ge_goods_buy_request::set_item_tid(::google::protobuf::uint32 value) {
  set_has_item_tid();
  item_tid_ = value;
}

// optional uint32 buy_count = 3;
inline bool ge_goods_buy_request::has_buy_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ge_goods_buy_request::set_has_buy_count() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ge_goods_buy_request::clear_has_buy_count() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ge_goods_buy_request::clear_buy_count() {
  buy_count_ = 0u;
  clear_has_buy_count();
}
inline ::google::protobuf::uint32 ge_goods_buy_request::buy_count() const {
  return buy_count_;
}
inline void ge_goods_buy_request::set_buy_count(::google::protobuf::uint32 value) {
  set_has_buy_count();
  buy_count_ = value;
}

// optional uint32 price = 4;
inline bool ge_goods_buy_request::has_price() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ge_goods_buy_request::set_has_price() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ge_goods_buy_request::clear_has_price() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ge_goods_buy_request::clear_price() {
  price_ = 0u;
  clear_has_price();
}
inline ::google::protobuf::uint32 ge_goods_buy_request::price() const {
  return price_;
}
inline void ge_goods_buy_request::set_price(::google::protobuf::uint32 value) {
  set_has_price();
  price_ = value;
}

// optional .proto.common.ex_reason reason = 5;
inline bool ge_goods_buy_request::has_reason() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ge_goods_buy_request::set_has_reason() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ge_goods_buy_request::clear_has_reason() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ge_goods_buy_request::clear_reason() {
  if (reason_ != NULL) reason_->::proto::common::ex_reason::Clear();
  clear_has_reason();
}
inline const ::proto::common::ex_reason& ge_goods_buy_request::reason() const {
  return reason_ != NULL ? *reason_ : *default_instance_->reason_;
}
inline ::proto::common::ex_reason* ge_goods_buy_request::mutable_reason() {
  set_has_reason();
  if (reason_ == NULL) reason_ = new ::proto::common::ex_reason;
  return reason_;
}
inline ::proto::common::ex_reason* ge_goods_buy_request::release_reason() {
  clear_has_reason();
  ::proto::common::ex_reason* temp = reason_;
  reason_ = NULL;
  return temp;
}
inline void ge_goods_buy_request::set_allocated_reason(::proto::common::ex_reason* reason) {
  delete reason_;
  reason_ = reason;
  if (reason) {
    set_has_reason();
  } else {
    clear_has_reason();
  }
}

// -------------------------------------------------------------------

// eg_goods_buy_reply

// optional uint32 reply_code = 1;
inline bool eg_goods_buy_reply::has_reply_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void eg_goods_buy_reply::set_has_reply_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void eg_goods_buy_reply::clear_has_reply_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void eg_goods_buy_reply::clear_reply_code() {
  reply_code_ = 0u;
  clear_has_reply_code();
}
inline ::google::protobuf::uint32 eg_goods_buy_reply::reply_code() const {
  return reply_code_;
}
inline void eg_goods_buy_reply::set_reply_code(::google::protobuf::uint32 value) {
  set_has_reply_code();
  reply_code_ = value;
}

// optional uint32 buy_count = 2;
inline bool eg_goods_buy_reply::has_buy_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void eg_goods_buy_reply::set_has_buy_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void eg_goods_buy_reply::clear_has_buy_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void eg_goods_buy_reply::clear_buy_count() {
  buy_count_ = 0u;
  clear_has_buy_count();
}
inline ::google::protobuf::uint32 eg_goods_buy_reply::buy_count() const {
  return buy_count_;
}
inline void eg_goods_buy_reply::set_buy_count(::google::protobuf::uint32 value) {
  set_has_buy_count();
  buy_count_ = value;
}

// optional uint32 price = 3;
inline bool eg_goods_buy_reply::has_price() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void eg_goods_buy_reply::set_has_price() {
  _has_bits_[0] |= 0x00000004u;
}
inline void eg_goods_buy_reply::clear_has_price() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void eg_goods_buy_reply::clear_price() {
  price_ = 0u;
  clear_has_price();
}
inline ::google::protobuf::uint32 eg_goods_buy_reply::price() const {
  return price_;
}
inline void eg_goods_buy_reply::set_price(::google::protobuf::uint32 value) {
  set_has_price();
  price_ = value;
}

// optional .proto.common.goods_item item_info = 4;
inline bool eg_goods_buy_reply::has_item_info() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void eg_goods_buy_reply::set_has_item_info() {
  _has_bits_[0] |= 0x00000008u;
}
inline void eg_goods_buy_reply::clear_has_item_info() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void eg_goods_buy_reply::clear_item_info() {
  if (item_info_ != NULL) item_info_->::proto::common::goods_item::Clear();
  clear_has_item_info();
}
inline const ::proto::common::goods_item& eg_goods_buy_reply::item_info() const {
  return item_info_ != NULL ? *item_info_ : *default_instance_->item_info_;
}
inline ::proto::common::goods_item* eg_goods_buy_reply::mutable_item_info() {
  set_has_item_info();
  if (item_info_ == NULL) item_info_ = new ::proto::common::goods_item;
  return item_info_;
}
inline ::proto::common::goods_item* eg_goods_buy_reply::release_item_info() {
  clear_has_item_info();
  ::proto::common::goods_item* temp = item_info_;
  item_info_ = NULL;
  return temp;
}
inline void eg_goods_buy_reply::set_allocated_item_info(::proto::common::goods_item* item_info) {
  delete item_info_;
  item_info_ = item_info;
  if (item_info) {
    set_has_item_info();
  } else {
    clear_has_item_info();
  }
}

// optional .proto.common.ex_reason reason = 5;
inline bool eg_goods_buy_reply::has_reason() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void eg_goods_buy_reply::set_has_reason() {
  _has_bits_[0] |= 0x00000010u;
}
inline void eg_goods_buy_reply::clear_has_reason() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void eg_goods_buy_reply::clear_reason() {
  if (reason_ != NULL) reason_->::proto::common::ex_reason::Clear();
  clear_has_reason();
}
inline const ::proto::common::ex_reason& eg_goods_buy_reply::reason() const {
  return reason_ != NULL ? *reason_ : *default_instance_->reason_;
}
inline ::proto::common::ex_reason* eg_goods_buy_reply::mutable_reason() {
  set_has_reason();
  if (reason_ == NULL) reason_ = new ::proto::common::ex_reason;
  return reason_;
}
inline ::proto::common::ex_reason* eg_goods_buy_reply::release_reason() {
  clear_has_reason();
  ::proto::common::ex_reason* temp = reason_;
  reason_ = NULL;
  return temp;
}
inline void eg_goods_buy_reply::set_allocated_reason(::proto::common::ex_reason* reason) {
  delete reason_;
  reason_ = reason;
  if (reason) {
    set_has_reason();
  } else {
    clear_has_reason();
  }
}

// -------------------------------------------------------------------

// ge_goods_sell_request

// optional uint64 item_uid = 1;
inline bool ge_goods_sell_request::has_item_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ge_goods_sell_request::set_has_item_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ge_goods_sell_request::clear_has_item_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ge_goods_sell_request::clear_item_uid() {
  item_uid_ = GOOGLE_ULONGLONG(0);
  clear_has_item_uid();
}
inline ::google::protobuf::uint64 ge_goods_sell_request::item_uid() const {
  return item_uid_;
}
inline void ge_goods_sell_request::set_item_uid(::google::protobuf::uint64 value) {
  set_has_item_uid();
  item_uid_ = value;
}

// optional uint32 price = 2;
inline bool ge_goods_sell_request::has_price() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ge_goods_sell_request::set_has_price() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ge_goods_sell_request::clear_has_price() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ge_goods_sell_request::clear_price() {
  price_ = 0u;
  clear_has_price();
}
inline ::google::protobuf::uint32 ge_goods_sell_request::price() const {
  return price_;
}
inline void ge_goods_sell_request::set_price(::google::protobuf::uint32 value) {
  set_has_price();
  price_ = value;
}

// optional .proto.common.goods_item item_info = 3;
inline bool ge_goods_sell_request::has_item_info() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ge_goods_sell_request::set_has_item_info() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ge_goods_sell_request::clear_has_item_info() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ge_goods_sell_request::clear_item_info() {
  if (item_info_ != NULL) item_info_->::proto::common::goods_item::Clear();
  clear_has_item_info();
}
inline const ::proto::common::goods_item& ge_goods_sell_request::item_info() const {
  return item_info_ != NULL ? *item_info_ : *default_instance_->item_info_;
}
inline ::proto::common::goods_item* ge_goods_sell_request::mutable_item_info() {
  set_has_item_info();
  if (item_info_ == NULL) item_info_ = new ::proto::common::goods_item;
  return item_info_;
}
inline ::proto::common::goods_item* ge_goods_sell_request::release_item_info() {
  clear_has_item_info();
  ::proto::common::goods_item* temp = item_info_;
  item_info_ = NULL;
  return temp;
}
inline void ge_goods_sell_request::set_allocated_item_info(::proto::common::goods_item* item_info) {
  delete item_info_;
  item_info_ = item_info;
  if (item_info) {
    set_has_item_info();
  } else {
    clear_has_item_info();
  }
}

// -------------------------------------------------------------------

// eg_goods_sell_reply

// optional uint32 reply_code = 1;
inline bool eg_goods_sell_reply::has_reply_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void eg_goods_sell_reply::set_has_reply_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void eg_goods_sell_reply::clear_has_reply_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void eg_goods_sell_reply::clear_reply_code() {
  reply_code_ = 0u;
  clear_has_reply_code();
}
inline ::google::protobuf::uint32 eg_goods_sell_reply::reply_code() const {
  return reply_code_;
}
inline void eg_goods_sell_reply::set_reply_code(::google::protobuf::uint32 value) {
  set_has_reply_code();
  reply_code_ = value;
}

// optional uint64 item_uid = 2;
inline bool eg_goods_sell_reply::has_item_uid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void eg_goods_sell_reply::set_has_item_uid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void eg_goods_sell_reply::clear_has_item_uid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void eg_goods_sell_reply::clear_item_uid() {
  item_uid_ = GOOGLE_ULONGLONG(0);
  clear_has_item_uid();
}
inline ::google::protobuf::uint64 eg_goods_sell_reply::item_uid() const {
  return item_uid_;
}
inline void eg_goods_sell_reply::set_item_uid(::google::protobuf::uint64 value) {
  set_has_item_uid();
  item_uid_ = value;
}

// optional uint32 price = 3;
inline bool eg_goods_sell_reply::has_price() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void eg_goods_sell_reply::set_has_price() {
  _has_bits_[0] |= 0x00000004u;
}
inline void eg_goods_sell_reply::clear_has_price() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void eg_goods_sell_reply::clear_price() {
  price_ = 0u;
  clear_has_price();
}
inline ::google::protobuf::uint32 eg_goods_sell_reply::price() const {
  return price_;
}
inline void eg_goods_sell_reply::set_price(::google::protobuf::uint32 value) {
  set_has_price();
  price_ = value;
}

// optional .proto.common.goods_item item_info = 4;
inline bool eg_goods_sell_reply::has_item_info() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void eg_goods_sell_reply::set_has_item_info() {
  _has_bits_[0] |= 0x00000008u;
}
inline void eg_goods_sell_reply::clear_has_item_info() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void eg_goods_sell_reply::clear_item_info() {
  if (item_info_ != NULL) item_info_->::proto::common::goods_item::Clear();
  clear_has_item_info();
}
inline const ::proto::common::goods_item& eg_goods_sell_reply::item_info() const {
  return item_info_ != NULL ? *item_info_ : *default_instance_->item_info_;
}
inline ::proto::common::goods_item* eg_goods_sell_reply::mutable_item_info() {
  set_has_item_info();
  if (item_info_ == NULL) item_info_ = new ::proto::common::goods_item;
  return item_info_;
}
inline ::proto::common::goods_item* eg_goods_sell_reply::release_item_info() {
  clear_has_item_info();
  ::proto::common::goods_item* temp = item_info_;
  item_info_ = NULL;
  return temp;
}
inline void eg_goods_sell_reply::set_allocated_item_info(::proto::common::goods_item* item_info) {
  delete item_info_;
  item_info_ = item_info;
  if (item_info) {
    set_has_item_info();
  } else {
    clear_has_item_info();
  }
}

// -------------------------------------------------------------------

// ge_goods_return_request

// optional uint64 goods_uid = 1;
inline bool ge_goods_return_request::has_goods_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ge_goods_return_request::set_has_goods_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ge_goods_return_request::clear_has_goods_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ge_goods_return_request::clear_goods_uid() {
  goods_uid_ = GOOGLE_ULONGLONG(0);
  clear_has_goods_uid();
}
inline ::google::protobuf::uint64 ge_goods_return_request::goods_uid() const {
  return goods_uid_;
}
inline void ge_goods_return_request::set_goods_uid(::google::protobuf::uint64 value) {
  set_has_goods_uid();
  goods_uid_ = value;
}

// -------------------------------------------------------------------

// eg_goods_return_reply

// optional uint32 reply_code = 1;
inline bool eg_goods_return_reply::has_reply_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void eg_goods_return_reply::set_has_reply_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void eg_goods_return_reply::clear_has_reply_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void eg_goods_return_reply::clear_reply_code() {
  reply_code_ = 0u;
  clear_has_reply_code();
}
inline ::google::protobuf::uint32 eg_goods_return_reply::reply_code() const {
  return reply_code_;
}
inline void eg_goods_return_reply::set_reply_code(::google::protobuf::uint32 value) {
  set_has_reply_code();
  reply_code_ = value;
}

// optional .proto.common.goods_item item_info = 2;
inline bool eg_goods_return_reply::has_item_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void eg_goods_return_reply::set_has_item_info() {
  _has_bits_[0] |= 0x00000002u;
}
inline void eg_goods_return_reply::clear_has_item_info() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void eg_goods_return_reply::clear_item_info() {
  if (item_info_ != NULL) item_info_->::proto::common::goods_item::Clear();
  clear_has_item_info();
}
inline const ::proto::common::goods_item& eg_goods_return_reply::item_info() const {
  return item_info_ != NULL ? *item_info_ : *default_instance_->item_info_;
}
inline ::proto::common::goods_item* eg_goods_return_reply::mutable_item_info() {
  set_has_item_info();
  if (item_info_ == NULL) item_info_ = new ::proto::common::goods_item;
  return item_info_;
}
inline ::proto::common::goods_item* eg_goods_return_reply::release_item_info() {
  clear_has_item_info();
  ::proto::common::goods_item* temp = item_info_;
  item_info_ = NULL;
  return temp;
}
inline void eg_goods_return_reply::set_allocated_item_info(::proto::common::goods_item* item_info) {
  delete item_info_;
  item_info_ = item_info;
  if (item_info) {
    set_has_item_info();
  } else {
    clear_has_item_info();
  }
}

// -------------------------------------------------------------------

// ge_goods_resell_request

// optional uint64 goods_uid = 1;
inline bool ge_goods_resell_request::has_goods_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ge_goods_resell_request::set_has_goods_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ge_goods_resell_request::clear_has_goods_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ge_goods_resell_request::clear_goods_uid() {
  goods_uid_ = GOOGLE_ULONGLONG(0);
  clear_has_goods_uid();
}
inline ::google::protobuf::uint64 ge_goods_resell_request::goods_uid() const {
  return goods_uid_;
}
inline void ge_goods_resell_request::set_goods_uid(::google::protobuf::uint64 value) {
  set_has_goods_uid();
  goods_uid_ = value;
}

// optional uint32 sell_count = 2;
inline bool ge_goods_resell_request::has_sell_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ge_goods_resell_request::set_has_sell_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ge_goods_resell_request::clear_has_sell_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ge_goods_resell_request::clear_sell_count() {
  sell_count_ = 0u;
  clear_has_sell_count();
}
inline ::google::protobuf::uint32 ge_goods_resell_request::sell_count() const {
  return sell_count_;
}
inline void ge_goods_resell_request::set_sell_count(::google::protobuf::uint32 value) {
  set_has_sell_count();
  sell_count_ = value;
}

// optional uint32 price = 3;
inline bool ge_goods_resell_request::has_price() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ge_goods_resell_request::set_has_price() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ge_goods_resell_request::clear_has_price() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ge_goods_resell_request::clear_price() {
  price_ = 0u;
  clear_has_price();
}
inline ::google::protobuf::uint32 ge_goods_resell_request::price() const {
  return price_;
}
inline void ge_goods_resell_request::set_price(::google::protobuf::uint32 value) {
  set_has_price();
  price_ = value;
}

// -------------------------------------------------------------------

// eg_goods_resell_reply

// optional uint32 reply_code = 1;
inline bool eg_goods_resell_reply::has_reply_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void eg_goods_resell_reply::set_has_reply_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void eg_goods_resell_reply::clear_has_reply_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void eg_goods_resell_reply::clear_reply_code() {
  reply_code_ = 0u;
  clear_has_reply_code();
}
inline ::google::protobuf::uint32 eg_goods_resell_reply::reply_code() const {
  return reply_code_;
}
inline void eg_goods_resell_reply::set_reply_code(::google::protobuf::uint32 value) {
  set_has_reply_code();
  reply_code_ = value;
}

// optional uint32 sell_count = 2;
inline bool eg_goods_resell_reply::has_sell_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void eg_goods_resell_reply::set_has_sell_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void eg_goods_resell_reply::clear_has_sell_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void eg_goods_resell_reply::clear_sell_count() {
  sell_count_ = 0u;
  clear_has_sell_count();
}
inline ::google::protobuf::uint32 eg_goods_resell_reply::sell_count() const {
  return sell_count_;
}
inline void eg_goods_resell_reply::set_sell_count(::google::protobuf::uint32 value) {
  set_has_sell_count();
  sell_count_ = value;
}

// optional uint32 price = 3;
inline bool eg_goods_resell_reply::has_price() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void eg_goods_resell_reply::set_has_price() {
  _has_bits_[0] |= 0x00000004u;
}
inline void eg_goods_resell_reply::clear_has_price() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void eg_goods_resell_reply::clear_price() {
  price_ = 0u;
  clear_has_price();
}
inline ::google::protobuf::uint32 eg_goods_resell_reply::price() const {
  return price_;
}
inline void eg_goods_resell_reply::set_price(::google::protobuf::uint32 value) {
  set_has_price();
  price_ = value;
}

// -------------------------------------------------------------------

// ge_goods_profit_request

// -------------------------------------------------------------------

// eg_goods_profit_reply

// optional uint32 reply_code = 1;
inline bool eg_goods_profit_reply::has_reply_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void eg_goods_profit_reply::set_has_reply_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void eg_goods_profit_reply::clear_has_reply_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void eg_goods_profit_reply::clear_reply_code() {
  reply_code_ = 0u;
  clear_has_reply_code();
}
inline ::google::protobuf::uint32 eg_goods_profit_reply::reply_code() const {
  return reply_code_;
}
inline void eg_goods_profit_reply::set_reply_code(::google::protobuf::uint32 value) {
  set_has_reply_code();
  reply_code_ = value;
}

// optional uint32 profit = 2;
inline bool eg_goods_profit_reply::has_profit() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void eg_goods_profit_reply::set_has_profit() {
  _has_bits_[0] |= 0x00000002u;
}
inline void eg_goods_profit_reply::clear_has_profit() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void eg_goods_profit_reply::clear_profit() {
  profit_ = 0u;
  clear_has_profit();
}
inline ::google::protobuf::uint32 eg_goods_profit_reply::profit() const {
  return profit_;
}
inline void eg_goods_profit_reply::set_profit(::google::protobuf::uint32 value) {
  set_has_profit();
  profit_ = value;
}

// -------------------------------------------------------------------

// ge_expedition_fight_data_request

// optional uint32 level = 1;
inline bool ge_expedition_fight_data_request::has_level() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ge_expedition_fight_data_request::set_has_level() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ge_expedition_fight_data_request::clear_has_level() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ge_expedition_fight_data_request::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 ge_expedition_fight_data_request::level() const {
  return level_;
}
inline void ge_expedition_fight_data_request::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
}

// -------------------------------------------------------------------

// eg_expedition_fight_data_reply

// repeated .proto.common.expedition_stage_single stage_list = 1;
inline int eg_expedition_fight_data_reply::stage_list_size() const {
  return stage_list_.size();
}
inline void eg_expedition_fight_data_reply::clear_stage_list() {
  stage_list_.Clear();
}
inline const ::proto::common::expedition_stage_single& eg_expedition_fight_data_reply::stage_list(int index) const {
  return stage_list_.Get(index);
}
inline ::proto::common::expedition_stage_single* eg_expedition_fight_data_reply::mutable_stage_list(int index) {
  return stage_list_.Mutable(index);
}
inline ::proto::common::expedition_stage_single* eg_expedition_fight_data_reply::add_stage_list() {
  return stage_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::common::expedition_stage_single >&
eg_expedition_fight_data_reply::stage_list() const {
  return stage_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto::common::expedition_stage_single >*
eg_expedition_fight_data_reply::mutable_stage_list() {
  return &stage_list_;
}

// -------------------------------------------------------------------

// ge_expedition_refresh_request

// optional uint32 level = 1;
inline bool ge_expedition_refresh_request::has_level() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ge_expedition_refresh_request::set_has_level() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ge_expedition_refresh_request::clear_has_level() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ge_expedition_refresh_request::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 ge_expedition_refresh_request::level() const {
  return level_;
}
inline void ge_expedition_refresh_request::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
}

// -------------------------------------------------------------------

// eg_expedition_refresh_reply

// repeated .proto.common.expedition_stage_single stage_list = 1;
inline int eg_expedition_refresh_reply::stage_list_size() const {
  return stage_list_.size();
}
inline void eg_expedition_refresh_reply::clear_stage_list() {
  stage_list_.Clear();
}
inline const ::proto::common::expedition_stage_single& eg_expedition_refresh_reply::stage_list(int index) const {
  return stage_list_.Get(index);
}
inline ::proto::common::expedition_stage_single* eg_expedition_refresh_reply::mutable_stage_list(int index) {
  return stage_list_.Mutable(index);
}
inline ::proto::common::expedition_stage_single* eg_expedition_refresh_reply::add_stage_list() {
  return stage_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::common::expedition_stage_single >&
eg_expedition_refresh_reply::stage_list() const {
  return stage_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto::common::expedition_stage_single >*
eg_expedition_refresh_reply::mutable_stage_list() {
  return &stage_list_;
}

// -------------------------------------------------------------------

// ge_expedition_refresh_stage_request

// optional uint32 level = 1;
inline bool ge_expedition_refresh_stage_request::has_level() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ge_expedition_refresh_stage_request::set_has_level() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ge_expedition_refresh_stage_request::clear_has_level() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ge_expedition_refresh_stage_request::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 ge_expedition_refresh_stage_request::level() const {
  return level_;
}
inline void ge_expedition_refresh_stage_request::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
}

// optional uint32 stage_id = 2;
inline bool ge_expedition_refresh_stage_request::has_stage_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ge_expedition_refresh_stage_request::set_has_stage_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ge_expedition_refresh_stage_request::clear_has_stage_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ge_expedition_refresh_stage_request::clear_stage_id() {
  stage_id_ = 0u;
  clear_has_stage_id();
}
inline ::google::protobuf::uint32 ge_expedition_refresh_stage_request::stage_id() const {
  return stage_id_;
}
inline void ge_expedition_refresh_stage_request::set_stage_id(::google::protobuf::uint32 value) {
  set_has_stage_id();
  stage_id_ = value;
}

// -------------------------------------------------------------------

// eg_expedition_refresh_stage_reply

// optional .proto.common.expedition_stage_single stage_data = 1;
inline bool eg_expedition_refresh_stage_reply::has_stage_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void eg_expedition_refresh_stage_reply::set_has_stage_data() {
  _has_bits_[0] |= 0x00000001u;
}
inline void eg_expedition_refresh_stage_reply::clear_has_stage_data() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void eg_expedition_refresh_stage_reply::clear_stage_data() {
  if (stage_data_ != NULL) stage_data_->::proto::common::expedition_stage_single::Clear();
  clear_has_stage_data();
}
inline const ::proto::common::expedition_stage_single& eg_expedition_refresh_stage_reply::stage_data() const {
  return stage_data_ != NULL ? *stage_data_ : *default_instance_->stage_data_;
}
inline ::proto::common::expedition_stage_single* eg_expedition_refresh_stage_reply::mutable_stage_data() {
  set_has_stage_data();
  if (stage_data_ == NULL) stage_data_ = new ::proto::common::expedition_stage_single;
  return stage_data_;
}
inline ::proto::common::expedition_stage_single* eg_expedition_refresh_stage_reply::release_stage_data() {
  clear_has_stage_data();
  ::proto::common::expedition_stage_single* temp = stage_data_;
  stage_data_ = NULL;
  return temp;
}
inline void eg_expedition_refresh_stage_reply::set_allocated_stage_data(::proto::common::expedition_stage_single* stage_data) {
  delete stage_data_;
  stage_data_ = stage_data;
  if (stage_data) {
    set_has_stage_data();
  } else {
    clear_has_stage_data();
  }
}

// -------------------------------------------------------------------

// ge_expedition_help_request

// repeated uint64 helper_list = 1;
inline int ge_expedition_help_request::helper_list_size() const {
  return helper_list_.size();
}
inline void ge_expedition_help_request::clear_helper_list() {
  helper_list_.Clear();
}
inline ::google::protobuf::uint64 ge_expedition_help_request::helper_list(int index) const {
  return helper_list_.Get(index);
}
inline void ge_expedition_help_request::set_helper_list(int index, ::google::protobuf::uint64 value) {
  helper_list_.Set(index, value);
}
inline void ge_expedition_help_request::add_helper_list(::google::protobuf::uint64 value) {
  helper_list_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
ge_expedition_help_request::helper_list() const {
  return helper_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
ge_expedition_help_request::mutable_helper_list() {
  return &helper_list_;
}

// -------------------------------------------------------------------

// eg_expedition_help_reply

// optional uint32 reply_code = 1;
inline bool eg_expedition_help_reply::has_reply_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void eg_expedition_help_reply::set_has_reply_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void eg_expedition_help_reply::clear_has_reply_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void eg_expedition_help_reply::clear_reply_code() {
  reply_code_ = 0u;
  clear_has_reply_code();
}
inline ::google::protobuf::uint32 eg_expedition_help_reply::reply_code() const {
  return reply_code_;
}
inline void eg_expedition_help_reply::set_reply_code(::google::protobuf::uint32 value) {
  set_has_reply_code();
  reply_code_ = value;
}

// -------------------------------------------------------------------

// global_data_day_update_time

// optional uint32 update_time = 1;
inline bool global_data_day_update_time::has_update_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void global_data_day_update_time::set_has_update_time() {
  _has_bits_[0] |= 0x00000001u;
}
inline void global_data_day_update_time::clear_has_update_time() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void global_data_day_update_time::clear_update_time() {
  update_time_ = 0u;
  clear_has_update_time();
}
inline ::google::protobuf::uint32 global_data_day_update_time::update_time() const {
  return update_time_;
}
inline void global_data_day_update_time::set_update_time(::google::protobuf::uint32 value) {
  set_has_update_time();
  update_time_ = value;
}

// -------------------------------------------------------------------

// global_data_family_war

// optional uint32 week_id = 1;
inline bool global_data_family_war::has_week_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void global_data_family_war::set_has_week_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void global_data_family_war::clear_has_week_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void global_data_family_war::clear_week_id() {
  week_id_ = 0u;
  clear_has_week_id();
}
inline ::google::protobuf::uint32 global_data_family_war::week_id() const {
  return week_id_;
}
inline void global_data_family_war::set_week_id(::google::protobuf::uint32 value) {
  set_has_week_id();
  week_id_ = value;
}

// optional .proto.common.family_war_state state = 2 [default = family_war_state_end];
inline bool global_data_family_war::has_state() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void global_data_family_war::set_has_state() {
  _has_bits_[0] |= 0x00000002u;
}
inline void global_data_family_war::clear_has_state() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void global_data_family_war::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::proto::common::family_war_state global_data_family_war::state() const {
  return static_cast< ::proto::common::family_war_state >(state_);
}
inline void global_data_family_war::set_state(::proto::common::family_war_state value) {
  assert(::proto::common::family_war_state_IsValid(value));
  set_has_state();
  state_ = value;
}

// -------------------------------------------------------------------

// global_data_country_data

// optional uint32 period_type = 1;
inline bool global_data_country_data::has_period_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void global_data_country_data::set_has_period_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void global_data_country_data::clear_has_period_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void global_data_country_data::clear_period_type() {
  period_type_ = 0u;
  clear_has_period_type();
}
inline ::google::protobuf::uint32 global_data_country_data::period_type() const {
  return period_type_;
}
inline void global_data_country_data::set_period_type(::google::protobuf::uint32 value) {
  set_has_period_type();
  period_type_ = value;
}

// optional uint32 period_time = 2;
inline bool global_data_country_data::has_period_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void global_data_country_data::set_has_period_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void global_data_country_data::clear_has_period_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void global_data_country_data::clear_period_time() {
  period_time_ = 0u;
  clear_has_period_time();
}
inline ::google::protobuf::uint32 global_data_country_data::period_time() const {
  return period_time_;
}
inline void global_data_country_data::set_period_time(::google::protobuf::uint32 value) {
  set_has_period_time();
  period_time_ = value;
}

// -------------------------------------------------------------------

// global_data_king_war_data

// optional uint32 state = 1;
inline bool global_data_king_war_data::has_state() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void global_data_king_war_data::set_has_state() {
  _has_bits_[0] |= 0x00000001u;
}
inline void global_data_king_war_data::clear_has_state() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void global_data_king_war_data::clear_state() {
  state_ = 0u;
  clear_has_state();
}
inline ::google::protobuf::uint32 global_data_king_war_data::state() const {
  return state_;
}
inline void global_data_king_war_data::set_state(::google::protobuf::uint32 value) {
  set_has_state();
  state_ = value;
}

// optional uint32 state_end_time = 2;
inline bool global_data_king_war_data::has_state_end_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void global_data_king_war_data::set_has_state_end_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void global_data_king_war_data::clear_has_state_end_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void global_data_king_war_data::clear_state_end_time() {
  state_end_time_ = 0u;
  clear_has_state_end_time();
}
inline ::google::protobuf::uint32 global_data_king_war_data::state_end_time() const {
  return state_end_time_;
}
inline void global_data_king_war_data::set_state_end_time(::google::protobuf::uint32 value) {
  set_has_state_end_time();
  state_end_time_ = value;
}

// optional uint32 battle_time = 3;
inline bool global_data_king_war_data::has_battle_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void global_data_king_war_data::set_has_battle_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void global_data_king_war_data::clear_has_battle_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void global_data_king_war_data::clear_battle_time() {
  battle_time_ = 0u;
  clear_has_battle_time();
}
inline ::google::protobuf::uint32 global_data_king_war_data::battle_time() const {
  return battle_time_;
}
inline void global_data_king_war_data::set_battle_time(::google::protobuf::uint32 value) {
  set_has_battle_time();
  battle_time_ = value;
}

// -------------------------------------------------------------------

// eg_offline_data_notify

// optional .proto.common.offline_role_data ord = 1;
inline bool eg_offline_data_notify::has_ord() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void eg_offline_data_notify::set_has_ord() {
  _has_bits_[0] |= 0x00000001u;
}
inline void eg_offline_data_notify::clear_has_ord() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void eg_offline_data_notify::clear_ord() {
  if (ord_ != NULL) ord_->::proto::common::offline_role_data::Clear();
  clear_has_ord();
}
inline const ::proto::common::offline_role_data& eg_offline_data_notify::ord() const {
  return ord_ != NULL ? *ord_ : *default_instance_->ord_;
}
inline ::proto::common::offline_role_data* eg_offline_data_notify::mutable_ord() {
  set_has_ord();
  if (ord_ == NULL) ord_ = new ::proto::common::offline_role_data;
  return ord_;
}
inline ::proto::common::offline_role_data* eg_offline_data_notify::release_ord() {
  clear_has_ord();
  ::proto::common::offline_role_data* temp = ord_;
  ord_ = NULL;
  return temp;
}
inline void eg_offline_data_notify::set_allocated_ord(::proto::common::offline_role_data* ord) {
  delete ord_;
  ord_ = ord;
  if (ord) {
    set_has_ord();
  } else {
    clear_has_ord();
  }
}

// -------------------------------------------------------------------

// ge_offline_data_notify

// optional .proto.common.offline_role_data ord = 1;
inline bool ge_offline_data_notify::has_ord() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ge_offline_data_notify::set_has_ord() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ge_offline_data_notify::clear_has_ord() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ge_offline_data_notify::clear_ord() {
  if (ord_ != NULL) ord_->::proto::common::offline_role_data::Clear();
  clear_has_ord();
}
inline const ::proto::common::offline_role_data& ge_offline_data_notify::ord() const {
  return ord_ != NULL ? *ord_ : *default_instance_->ord_;
}
inline ::proto::common::offline_role_data* ge_offline_data_notify::mutable_ord() {
  set_has_ord();
  if (ord_ == NULL) ord_ = new ::proto::common::offline_role_data;
  return ord_;
}
inline ::proto::common::offline_role_data* ge_offline_data_notify::release_ord() {
  clear_has_ord();
  ::proto::common::offline_role_data* temp = ord_;
  ord_ = NULL;
  return temp;
}
inline void ge_offline_data_notify::set_allocated_ord(::proto::common::offline_role_data* ord) {
  delete ord_;
  ord_ = ord;
  if (ord) {
    set_has_ord();
  } else {
    clear_has_ord();
  }
}

// -------------------------------------------------------------------

// eg_notify_progress_state_notify

// optional uint32 type = 1;
inline bool eg_notify_progress_state_notify::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void eg_notify_progress_state_notify::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void eg_notify_progress_state_notify::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void eg_notify_progress_state_notify::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 eg_notify_progress_state_notify::type() const {
  return type_;
}
inline void eg_notify_progress_state_notify::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
}

// optional uint32 param1 = 2;
inline bool eg_notify_progress_state_notify::has_param1() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void eg_notify_progress_state_notify::set_has_param1() {
  _has_bits_[0] |= 0x00000002u;
}
inline void eg_notify_progress_state_notify::clear_has_param1() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void eg_notify_progress_state_notify::clear_param1() {
  param1_ = 0u;
  clear_has_param1();
}
inline ::google::protobuf::uint32 eg_notify_progress_state_notify::param1() const {
  return param1_;
}
inline void eg_notify_progress_state_notify::set_param1(::google::protobuf::uint32 value) {
  set_has_param1();
  param1_ = value;
}

// optional uint32 param2 = 3;
inline bool eg_notify_progress_state_notify::has_param2() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void eg_notify_progress_state_notify::set_has_param2() {
  _has_bits_[0] |= 0x00000004u;
}
inline void eg_notify_progress_state_notify::clear_has_param2() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void eg_notify_progress_state_notify::clear_param2() {
  param2_ = 0u;
  clear_has_param2();
}
inline ::google::protobuf::uint32 eg_notify_progress_state_notify::param2() const {
  return param2_;
}
inline void eg_notify_progress_state_notify::set_param2(::google::protobuf::uint32 value) {
  set_has_param2();
  param2_ = value;
}

// -------------------------------------------------------------------

// hg_notify_progress_state_notify

// optional uint32 type = 1;
inline bool hg_notify_progress_state_notify::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void hg_notify_progress_state_notify::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void hg_notify_progress_state_notify::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void hg_notify_progress_state_notify::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 hg_notify_progress_state_notify::type() const {
  return type_;
}
inline void hg_notify_progress_state_notify::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
}

// optional uint32 param1 = 2;
inline bool hg_notify_progress_state_notify::has_param1() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void hg_notify_progress_state_notify::set_has_param1() {
  _has_bits_[0] |= 0x00000002u;
}
inline void hg_notify_progress_state_notify::clear_has_param1() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void hg_notify_progress_state_notify::clear_param1() {
  param1_ = 0u;
  clear_has_param1();
}
inline ::google::protobuf::uint32 hg_notify_progress_state_notify::param1() const {
  return param1_;
}
inline void hg_notify_progress_state_notify::set_param1(::google::protobuf::uint32 value) {
  set_has_param1();
  param1_ = value;
}

// optional uint32 param2 = 3;
inline bool hg_notify_progress_state_notify::has_param2() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void hg_notify_progress_state_notify::set_has_param2() {
  _has_bits_[0] |= 0x00000004u;
}
inline void hg_notify_progress_state_notify::clear_has_param2() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void hg_notify_progress_state_notify::clear_param2() {
  param2_ = 0u;
  clear_has_param2();
}
inline ::google::protobuf::uint32 hg_notify_progress_state_notify::param2() const {
  return param2_;
}
inline void hg_notify_progress_state_notify::set_param2(::google::protobuf::uint32 value) {
  set_has_param2();
  param2_ = value;
}

// -------------------------------------------------------------------

// ge_tower_trigger_notify

// repeated .proto.common.tower_trigger tower_trigger = 1;
inline int ge_tower_trigger_notify::tower_trigger_size() const {
  return tower_trigger_.size();
}
inline void ge_tower_trigger_notify::clear_tower_trigger() {
  tower_trigger_.Clear();
}
inline const ::proto::common::tower_trigger& ge_tower_trigger_notify::tower_trigger(int index) const {
  return tower_trigger_.Get(index);
}
inline ::proto::common::tower_trigger* ge_tower_trigger_notify::mutable_tower_trigger(int index) {
  return tower_trigger_.Mutable(index);
}
inline ::proto::common::tower_trigger* ge_tower_trigger_notify::add_tower_trigger() {
  return tower_trigger_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::common::tower_trigger >&
ge_tower_trigger_notify::tower_trigger() const {
  return tower_trigger_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto::common::tower_trigger >*
ge_tower_trigger_notify::mutable_tower_trigger() {
  return &tower_trigger_;
}

// optional uint64 friend_uid = 2;
inline bool ge_tower_trigger_notify::has_friend_uid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ge_tower_trigger_notify::set_has_friend_uid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ge_tower_trigger_notify::clear_has_friend_uid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ge_tower_trigger_notify::clear_friend_uid() {
  friend_uid_ = GOOGLE_ULONGLONG(0);
  clear_has_friend_uid();
}
inline ::google::protobuf::uint64 ge_tower_trigger_notify::friend_uid() const {
  return friend_uid_;
}
inline void ge_tower_trigger_notify::set_friend_uid(::google::protobuf::uint64 value) {
  set_has_friend_uid();
  friend_uid_ = value;
}

// -------------------------------------------------------------------

// eg_tower_trigger_notify

// repeated .proto.common.tower_trigger tower_trigger = 1;
inline int eg_tower_trigger_notify::tower_trigger_size() const {
  return tower_trigger_.size();
}
inline void eg_tower_trigger_notify::clear_tower_trigger() {
  tower_trigger_.Clear();
}
inline const ::proto::common::tower_trigger& eg_tower_trigger_notify::tower_trigger(int index) const {
  return tower_trigger_.Get(index);
}
inline ::proto::common::tower_trigger* eg_tower_trigger_notify::mutable_tower_trigger(int index) {
  return tower_trigger_.Mutable(index);
}
inline ::proto::common::tower_trigger* eg_tower_trigger_notify::add_tower_trigger() {
  return tower_trigger_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::common::tower_trigger >&
eg_tower_trigger_notify::tower_trigger() const {
  return tower_trigger_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto::common::tower_trigger >*
eg_tower_trigger_notify::mutable_tower_trigger() {
  return &tower_trigger_;
}

// -------------------------------------------------------------------

// eg_two_side_friend_notify

// optional uint64 friend_uid = 1;
inline bool eg_two_side_friend_notify::has_friend_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void eg_two_side_friend_notify::set_has_friend_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void eg_two_side_friend_notify::clear_has_friend_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void eg_two_side_friend_notify::clear_friend_uid() {
  friend_uid_ = GOOGLE_ULONGLONG(0);
  clear_has_friend_uid();
}
inline ::google::protobuf::uint64 eg_two_side_friend_notify::friend_uid() const {
  return friend_uid_;
}
inline void eg_two_side_friend_notify::set_friend_uid(::google::protobuf::uint64 value) {
  set_has_friend_uid();
  friend_uid_ = value;
}

// -------------------------------------------------------------------

// ge_check_sys_notice_request

// optional .proto.common.sys_notity_data sys_notice_list = 1;
inline bool ge_check_sys_notice_request::has_sys_notice_list() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ge_check_sys_notice_request::set_has_sys_notice_list() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ge_check_sys_notice_request::clear_has_sys_notice_list() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ge_check_sys_notice_request::clear_sys_notice_list() {
  if (sys_notice_list_ != NULL) sys_notice_list_->::proto::common::sys_notity_data::Clear();
  clear_has_sys_notice_list();
}
inline const ::proto::common::sys_notity_data& ge_check_sys_notice_request::sys_notice_list() const {
  return sys_notice_list_ != NULL ? *sys_notice_list_ : *default_instance_->sys_notice_list_;
}
inline ::proto::common::sys_notity_data* ge_check_sys_notice_request::mutable_sys_notice_list() {
  set_has_sys_notice_list();
  if (sys_notice_list_ == NULL) sys_notice_list_ = new ::proto::common::sys_notity_data;
  return sys_notice_list_;
}
inline ::proto::common::sys_notity_data* ge_check_sys_notice_request::release_sys_notice_list() {
  clear_has_sys_notice_list();
  ::proto::common::sys_notity_data* temp = sys_notice_list_;
  sys_notice_list_ = NULL;
  return temp;
}
inline void ge_check_sys_notice_request::set_allocated_sys_notice_list(::proto::common::sys_notity_data* sys_notice_list) {
  delete sys_notice_list_;
  sys_notice_list_ = sys_notice_list;
  if (sys_notice_list) {
    set_has_sys_notice_list();
  } else {
    clear_has_sys_notice_list();
  }
}

// -------------------------------------------------------------------

// eg_check_sys_notice_reply

// optional .proto.common.sys_notity_data sys_notice_list = 1;
inline bool eg_check_sys_notice_reply::has_sys_notice_list() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void eg_check_sys_notice_reply::set_has_sys_notice_list() {
  _has_bits_[0] |= 0x00000001u;
}
inline void eg_check_sys_notice_reply::clear_has_sys_notice_list() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void eg_check_sys_notice_reply::clear_sys_notice_list() {
  if (sys_notice_list_ != NULL) sys_notice_list_->::proto::common::sys_notity_data::Clear();
  clear_has_sys_notice_list();
}
inline const ::proto::common::sys_notity_data& eg_check_sys_notice_reply::sys_notice_list() const {
  return sys_notice_list_ != NULL ? *sys_notice_list_ : *default_instance_->sys_notice_list_;
}
inline ::proto::common::sys_notity_data* eg_check_sys_notice_reply::mutable_sys_notice_list() {
  set_has_sys_notice_list();
  if (sys_notice_list_ == NULL) sys_notice_list_ = new ::proto::common::sys_notity_data;
  return sys_notice_list_;
}
inline ::proto::common::sys_notity_data* eg_check_sys_notice_reply::release_sys_notice_list() {
  clear_has_sys_notice_list();
  ::proto::common::sys_notity_data* temp = sys_notice_list_;
  sys_notice_list_ = NULL;
  return temp;
}
inline void eg_check_sys_notice_reply::set_allocated_sys_notice_list(::proto::common::sys_notity_data* sys_notice_list) {
  delete sys_notice_list_;
  sys_notice_list_ = sys_notice_list;
  if (sys_notice_list) {
    set_has_sys_notice_list();
  } else {
    clear_has_sys_notice_list();
  }
}

// -------------------------------------------------------------------

// eg_syn_sys_notice_notify

// optional .proto.common.sys_notity_data sys_notice_list = 1;
inline bool eg_syn_sys_notice_notify::has_sys_notice_list() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void eg_syn_sys_notice_notify::set_has_sys_notice_list() {
  _has_bits_[0] |= 0x00000001u;
}
inline void eg_syn_sys_notice_notify::clear_has_sys_notice_list() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void eg_syn_sys_notice_notify::clear_sys_notice_list() {
  if (sys_notice_list_ != NULL) sys_notice_list_->::proto::common::sys_notity_data::Clear();
  clear_has_sys_notice_list();
}
inline const ::proto::common::sys_notity_data& eg_syn_sys_notice_notify::sys_notice_list() const {
  return sys_notice_list_ != NULL ? *sys_notice_list_ : *default_instance_->sys_notice_list_;
}
inline ::proto::common::sys_notity_data* eg_syn_sys_notice_notify::mutable_sys_notice_list() {
  set_has_sys_notice_list();
  if (sys_notice_list_ == NULL) sys_notice_list_ = new ::proto::common::sys_notity_data;
  return sys_notice_list_;
}
inline ::proto::common::sys_notity_data* eg_syn_sys_notice_notify::release_sys_notice_list() {
  clear_has_sys_notice_list();
  ::proto::common::sys_notity_data* temp = sys_notice_list_;
  sys_notice_list_ = NULL;
  return temp;
}
inline void eg_syn_sys_notice_notify::set_allocated_sys_notice_list(::proto::common::sys_notity_data* sys_notice_list) {
  delete sys_notice_list_;
  sys_notice_list_ = sys_notice_list;
  if (sys_notice_list) {
    set_has_sys_notice_list();
  } else {
    clear_has_sys_notice_list();
  }
}

// -------------------------------------------------------------------

// ge_gm_clear_notice_request

// -------------------------------------------------------------------

// eg_gm_clear_notice_notify

// -------------------------------------------------------------------

// ge_role_simple_data_notify

// optional .proto.common.role_data_type type = 1 [default = simple_info_type];
inline bool ge_role_simple_data_notify::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ge_role_simple_data_notify::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ge_role_simple_data_notify::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ge_role_simple_data_notify::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::proto::common::role_data_type ge_role_simple_data_notify::type() const {
  return static_cast< ::proto::common::role_data_type >(type_);
}
inline void ge_role_simple_data_notify::set_type(::proto::common::role_data_type value) {
  assert(::proto::common::role_data_type_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional .proto.common.role_blob_data simple_data = 2;
inline bool ge_role_simple_data_notify::has_simple_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ge_role_simple_data_notify::set_has_simple_data() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ge_role_simple_data_notify::clear_has_simple_data() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ge_role_simple_data_notify::clear_simple_data() {
  if (simple_data_ != NULL) simple_data_->::proto::common::role_blob_data::Clear();
  clear_has_simple_data();
}
inline const ::proto::common::role_blob_data& ge_role_simple_data_notify::simple_data() const {
  return simple_data_ != NULL ? *simple_data_ : *default_instance_->simple_data_;
}
inline ::proto::common::role_blob_data* ge_role_simple_data_notify::mutable_simple_data() {
  set_has_simple_data();
  if (simple_data_ == NULL) simple_data_ = new ::proto::common::role_blob_data;
  return simple_data_;
}
inline ::proto::common::role_blob_data* ge_role_simple_data_notify::release_simple_data() {
  clear_has_simple_data();
  ::proto::common::role_blob_data* temp = simple_data_;
  simple_data_ = NULL;
  return temp;
}
inline void ge_role_simple_data_notify::set_allocated_simple_data(::proto::common::role_blob_data* simple_data) {
  delete simple_data_;
  simple_data_ = simple_data;
  if (simple_data) {
    set_has_simple_data();
  } else {
    clear_has_simple_data();
  }
}

// -------------------------------------------------------------------

// eg_offline_arena_join_notify

// -------------------------------------------------------------------

// ge_offline_arena_form_notify

// optional .proto.common.mirror_fight_data form_data = 1;
inline bool ge_offline_arena_form_notify::has_form_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ge_offline_arena_form_notify::set_has_form_data() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ge_offline_arena_form_notify::clear_has_form_data() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ge_offline_arena_form_notify::clear_form_data() {
  if (form_data_ != NULL) form_data_->::proto::common::mirror_fight_data::Clear();
  clear_has_form_data();
}
inline const ::proto::common::mirror_fight_data& ge_offline_arena_form_notify::form_data() const {
  return form_data_ != NULL ? *form_data_ : *default_instance_->form_data_;
}
inline ::proto::common::mirror_fight_data* ge_offline_arena_form_notify::mutable_form_data() {
  set_has_form_data();
  if (form_data_ == NULL) form_data_ = new ::proto::common::mirror_fight_data;
  return form_data_;
}
inline ::proto::common::mirror_fight_data* ge_offline_arena_form_notify::release_form_data() {
  clear_has_form_data();
  ::proto::common::mirror_fight_data* temp = form_data_;
  form_data_ = NULL;
  return temp;
}
inline void ge_offline_arena_form_notify::set_allocated_form_data(::proto::common::mirror_fight_data* form_data) {
  delete form_data_;
  form_data_ = form_data;
  if (form_data) {
    set_has_form_data();
  } else {
    clear_has_form_data();
  }
}

// -------------------------------------------------------------------

// eg_offline_arena_fight_request

// optional .proto.common.mirror_fight_data enemy_data = 1;
inline bool eg_offline_arena_fight_request::has_enemy_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void eg_offline_arena_fight_request::set_has_enemy_data() {
  _has_bits_[0] |= 0x00000001u;
}
inline void eg_offline_arena_fight_request::clear_has_enemy_data() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void eg_offline_arena_fight_request::clear_enemy_data() {
  if (enemy_data_ != NULL) enemy_data_->::proto::common::mirror_fight_data::Clear();
  clear_has_enemy_data();
}
inline const ::proto::common::mirror_fight_data& eg_offline_arena_fight_request::enemy_data() const {
  return enemy_data_ != NULL ? *enemy_data_ : *default_instance_->enemy_data_;
}
inline ::proto::common::mirror_fight_data* eg_offline_arena_fight_request::mutable_enemy_data() {
  set_has_enemy_data();
  if (enemy_data_ == NULL) enemy_data_ = new ::proto::common::mirror_fight_data;
  return enemy_data_;
}
inline ::proto::common::mirror_fight_data* eg_offline_arena_fight_request::release_enemy_data() {
  clear_has_enemy_data();
  ::proto::common::mirror_fight_data* temp = enemy_data_;
  enemy_data_ = NULL;
  return temp;
}
inline void eg_offline_arena_fight_request::set_allocated_enemy_data(::proto::common::mirror_fight_data* enemy_data) {
  delete enemy_data_;
  enemy_data_ = enemy_data;
  if (enemy_data) {
    set_has_enemy_data();
  } else {
    clear_has_enemy_data();
  }
}

// optional uint32 offline_arena_class = 2;
inline bool eg_offline_arena_fight_request::has_offline_arena_class() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void eg_offline_arena_fight_request::set_has_offline_arena_class() {
  _has_bits_[0] |= 0x00000002u;
}
inline void eg_offline_arena_fight_request::clear_has_offline_arena_class() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void eg_offline_arena_fight_request::clear_offline_arena_class() {
  offline_arena_class_ = 0u;
  clear_has_offline_arena_class();
}
inline ::google::protobuf::uint32 eg_offline_arena_fight_request::offline_arena_class() const {
  return offline_arena_class_;
}
inline void eg_offline_arena_fight_request::set_offline_arena_class(::google::protobuf::uint32 value) {
  set_has_offline_arena_class();
  offline_arena_class_ = value;
}

// -------------------------------------------------------------------

// ge_offline_arena_fight_reply

// optional uint32 is_win = 1;
inline bool ge_offline_arena_fight_reply::has_is_win() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ge_offline_arena_fight_reply::set_has_is_win() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ge_offline_arena_fight_reply::clear_has_is_win() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ge_offline_arena_fight_reply::clear_is_win() {
  is_win_ = 0u;
  clear_has_is_win();
}
inline ::google::protobuf::uint32 ge_offline_arena_fight_reply::is_win() const {
  return is_win_;
}
inline void ge_offline_arena_fight_reply::set_is_win(::google::protobuf::uint32 value) {
  set_has_is_win();
  is_win_ = value;
}

// -------------------------------------------------------------------

// eg_offline_arena_record_award_notify

// repeated .proto.common.mail_item_obj item_list = 1;
inline int eg_offline_arena_record_award_notify::item_list_size() const {
  return item_list_.size();
}
inline void eg_offline_arena_record_award_notify::clear_item_list() {
  item_list_.Clear();
}
inline const ::proto::common::mail_item_obj& eg_offline_arena_record_award_notify::item_list(int index) const {
  return item_list_.Get(index);
}
inline ::proto::common::mail_item_obj* eg_offline_arena_record_award_notify::mutable_item_list(int index) {
  return item_list_.Mutable(index);
}
inline ::proto::common::mail_item_obj* eg_offline_arena_record_award_notify::add_item_list() {
  return item_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::common::mail_item_obj >&
eg_offline_arena_record_award_notify::item_list() const {
  return item_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto::common::mail_item_obj >*
eg_offline_arena_record_award_notify::mutable_item_list() {
  return &item_list_;
}

// -------------------------------------------------------------------

// eg_offline_arena_score_award_notify

// optional uint32 drop_id = 1;
inline bool eg_offline_arena_score_award_notify::has_drop_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void eg_offline_arena_score_award_notify::set_has_drop_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void eg_offline_arena_score_award_notify::clear_has_drop_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void eg_offline_arena_score_award_notify::clear_drop_id() {
  drop_id_ = 0u;
  clear_has_drop_id();
}
inline ::google::protobuf::uint32 eg_offline_arena_score_award_notify::drop_id() const {
  return drop_id_;
}
inline void eg_offline_arena_score_award_notify::set_drop_id(::google::protobuf::uint32 value) {
  set_has_drop_id();
  drop_id_ = value;
}

// -------------------------------------------------------------------

// eg_offline_arena_sweep_award_notify

// optional uint32 drop_id = 1;
inline bool eg_offline_arena_sweep_award_notify::has_drop_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void eg_offline_arena_sweep_award_notify::set_has_drop_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void eg_offline_arena_sweep_award_notify::clear_has_drop_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void eg_offline_arena_sweep_award_notify::clear_drop_id() {
  drop_id_ = 0u;
  clear_has_drop_id();
}
inline ::google::protobuf::uint32 eg_offline_arena_sweep_award_notify::drop_id() const {
  return drop_id_;
}
inline void eg_offline_arena_sweep_award_notify::set_drop_id(::google::protobuf::uint32 value) {
  set_has_drop_id();
  drop_id_ = value;
}

// optional uint32 count = 2;
inline bool eg_offline_arena_sweep_award_notify::has_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void eg_offline_arena_sweep_award_notify::set_has_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void eg_offline_arena_sweep_award_notify::clear_has_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void eg_offline_arena_sweep_award_notify::clear_count() {
  count_ = 0u;
  clear_has_count();
}
inline ::google::protobuf::uint32 eg_offline_arena_sweep_award_notify::count() const {
  return count_;
}
inline void eg_offline_arena_sweep_award_notify::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
}

// -------------------------------------------------------------------

// eg_offline_arena_class_award_notify

// repeated uint32 drop_id = 1;
inline int eg_offline_arena_class_award_notify::drop_id_size() const {
  return drop_id_.size();
}
inline void eg_offline_arena_class_award_notify::clear_drop_id() {
  drop_id_.Clear();
}
inline ::google::protobuf::uint32 eg_offline_arena_class_award_notify::drop_id(int index) const {
  return drop_id_.Get(index);
}
inline void eg_offline_arena_class_award_notify::set_drop_id(int index, ::google::protobuf::uint32 value) {
  drop_id_.Set(index, value);
}
inline void eg_offline_arena_class_award_notify::add_drop_id(::google::protobuf::uint32 value) {
  drop_id_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
eg_offline_arena_class_award_notify::drop_id() const {
  return drop_id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
eg_offline_arena_class_award_notify::mutable_drop_id() {
  return &drop_id_;
}

// optional uint32 cur_class = 2;
inline bool eg_offline_arena_class_award_notify::has_cur_class() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void eg_offline_arena_class_award_notify::set_has_cur_class() {
  _has_bits_[0] |= 0x00000002u;
}
inline void eg_offline_arena_class_award_notify::clear_has_cur_class() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void eg_offline_arena_class_award_notify::clear_cur_class() {
  cur_class_ = 0u;
  clear_has_cur_class();
}
inline ::google::protobuf::uint32 eg_offline_arena_class_award_notify::cur_class() const {
  return cur_class_;
}
inline void eg_offline_arena_class_award_notify::set_cur_class(::google::protobuf::uint32 value) {
  set_has_cur_class();
  cur_class_ = value;
}

// -------------------------------------------------------------------

// ge_offline_arena_buy_request

// optional uint32 money = 1;
inline bool ge_offline_arena_buy_request::has_money() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ge_offline_arena_buy_request::set_has_money() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ge_offline_arena_buy_request::clear_has_money() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ge_offline_arena_buy_request::clear_money() {
  money_ = 0u;
  clear_has_money();
}
inline ::google::protobuf::uint32 ge_offline_arena_buy_request::money() const {
  return money_;
}
inline void ge_offline_arena_buy_request::set_money(::google::protobuf::uint32 value) {
  set_has_money();
  money_ = value;
}

// -------------------------------------------------------------------

// eg_offline_arena_buy_reply

// optional uint32 reply_code = 1;
inline bool eg_offline_arena_buy_reply::has_reply_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void eg_offline_arena_buy_reply::set_has_reply_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void eg_offline_arena_buy_reply::clear_has_reply_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void eg_offline_arena_buy_reply::clear_reply_code() {
  reply_code_ = 0u;
  clear_has_reply_code();
}
inline ::google::protobuf::uint32 eg_offline_arena_buy_reply::reply_code() const {
  return reply_code_;
}
inline void eg_offline_arena_buy_reply::set_reply_code(::google::protobuf::uint32 value) {
  set_has_reply_code();
  reply_code_ = value;
}

// optional uint32 money = 2;
inline bool eg_offline_arena_buy_reply::has_money() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void eg_offline_arena_buy_reply::set_has_money() {
  _has_bits_[0] |= 0x00000002u;
}
inline void eg_offline_arena_buy_reply::clear_has_money() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void eg_offline_arena_buy_reply::clear_money() {
  money_ = 0u;
  clear_has_money();
}
inline ::google::protobuf::uint32 eg_offline_arena_buy_reply::money() const {
  return money_;
}
inline void eg_offline_arena_buy_reply::set_money(::google::protobuf::uint32 value) {
  set_has_money();
  money_ = value;
}

// -------------------------------------------------------------------

// ge_offline_arena_gmrank_notify

// optional uint32 rank = 1;
inline bool ge_offline_arena_gmrank_notify::has_rank() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ge_offline_arena_gmrank_notify::set_has_rank() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ge_offline_arena_gmrank_notify::clear_has_rank() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ge_offline_arena_gmrank_notify::clear_rank() {
  rank_ = 0u;
  clear_has_rank();
}
inline ::google::protobuf::uint32 ge_offline_arena_gmrank_notify::rank() const {
  return rank_;
}
inline void ge_offline_arena_gmrank_notify::set_rank(::google::protobuf::uint32 value) {
  set_has_rank();
  rank_ = value;
}

// -------------------------------------------------------------------

// hr_get_hero_strategy_info_request

// optional uint32 server_id = 1;
inline bool hr_get_hero_strategy_info_request::has_server_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void hr_get_hero_strategy_info_request::set_has_server_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void hr_get_hero_strategy_info_request::clear_has_server_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void hr_get_hero_strategy_info_request::clear_server_id() {
  server_id_ = 0u;
  clear_has_server_id();
}
inline ::google::protobuf::uint32 hr_get_hero_strategy_info_request::server_id() const {
  return server_id_;
}
inline void hr_get_hero_strategy_info_request::set_server_id(::google::protobuf::uint32 value) {
  set_has_server_id();
  server_id_ = value;
}

// -------------------------------------------------------------------

// rh_get_hero_strategy_info_reply

// optional uint32 server_id = 1;
inline bool rh_get_hero_strategy_info_reply::has_server_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void rh_get_hero_strategy_info_reply::set_has_server_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void rh_get_hero_strategy_info_reply::clear_has_server_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void rh_get_hero_strategy_info_reply::clear_server_id() {
  server_id_ = 0u;
  clear_has_server_id();
}
inline ::google::protobuf::uint32 rh_get_hero_strategy_info_reply::server_id() const {
  return server_id_;
}
inline void rh_get_hero_strategy_info_reply::set_server_id(::google::protobuf::uint32 value) {
  set_has_server_id();
  server_id_ = value;
}

// repeated .proto.common.hero_strategy_info hero_info = 2;
inline int rh_get_hero_strategy_info_reply::hero_info_size() const {
  return hero_info_.size();
}
inline void rh_get_hero_strategy_info_reply::clear_hero_info() {
  hero_info_.Clear();
}
inline const ::proto::common::hero_strategy_info& rh_get_hero_strategy_info_reply::hero_info(int index) const {
  return hero_info_.Get(index);
}
inline ::proto::common::hero_strategy_info* rh_get_hero_strategy_info_reply::mutable_hero_info(int index) {
  return hero_info_.Mutable(index);
}
inline ::proto::common::hero_strategy_info* rh_get_hero_strategy_info_reply::add_hero_info() {
  return hero_info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::common::hero_strategy_info >&
rh_get_hero_strategy_info_reply::hero_info() const {
  return hero_info_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto::common::hero_strategy_info >*
rh_get_hero_strategy_info_reply::mutable_hero_info() {
  return &hero_info_;
}

// -------------------------------------------------------------------

// ge_troop_sync_task_request

// optional uint64 troop_id = 1;
inline bool ge_troop_sync_task_request::has_troop_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ge_troop_sync_task_request::set_has_troop_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ge_troop_sync_task_request::clear_has_troop_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ge_troop_sync_task_request::clear_troop_id() {
  troop_id_ = GOOGLE_ULONGLONG(0);
  clear_has_troop_id();
}
inline ::google::protobuf::uint64 ge_troop_sync_task_request::troop_id() const {
  return troop_id_;
}
inline void ge_troop_sync_task_request::set_troop_id(::google::protobuf::uint64 value) {
  set_has_troop_id();
  troop_id_ = value;
}

// optional .proto.common.task_state task_info = 2;
inline bool ge_troop_sync_task_request::has_task_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ge_troop_sync_task_request::set_has_task_info() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ge_troop_sync_task_request::clear_has_task_info() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ge_troop_sync_task_request::clear_task_info() {
  if (task_info_ != NULL) task_info_->::proto::common::task_state::Clear();
  clear_has_task_info();
}
inline const ::proto::common::task_state& ge_troop_sync_task_request::task_info() const {
  return task_info_ != NULL ? *task_info_ : *default_instance_->task_info_;
}
inline ::proto::common::task_state* ge_troop_sync_task_request::mutable_task_info() {
  set_has_task_info();
  if (task_info_ == NULL) task_info_ = new ::proto::common::task_state;
  return task_info_;
}
inline ::proto::common::task_state* ge_troop_sync_task_request::release_task_info() {
  clear_has_task_info();
  ::proto::common::task_state* temp = task_info_;
  task_info_ = NULL;
  return temp;
}
inline void ge_troop_sync_task_request::set_allocated_task_info(::proto::common::task_state* task_info) {
  delete task_info_;
  task_info_ = task_info;
  if (task_info) {
    set_has_task_info();
  } else {
    clear_has_task_info();
  }
}

// -------------------------------------------------------------------

// eg_buy_wish_summon_request

// optional uint32 summon_id = 1;
inline bool eg_buy_wish_summon_request::has_summon_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void eg_buy_wish_summon_request::set_has_summon_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void eg_buy_wish_summon_request::clear_has_summon_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void eg_buy_wish_summon_request::clear_summon_id() {
  summon_id_ = 0u;
  clear_has_summon_id();
}
inline ::google::protobuf::uint32 eg_buy_wish_summon_request::summon_id() const {
  return summon_id_;
}
inline void eg_buy_wish_summon_request::set_summon_id(::google::protobuf::uint32 value) {
  set_has_summon_id();
  summon_id_ = value;
}

// optional uint32 reply_code = 2;
inline bool eg_buy_wish_summon_request::has_reply_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void eg_buy_wish_summon_request::set_has_reply_code() {
  _has_bits_[0] |= 0x00000002u;
}
inline void eg_buy_wish_summon_request::clear_has_reply_code() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void eg_buy_wish_summon_request::clear_reply_code() {
  reply_code_ = 0u;
  clear_has_reply_code();
}
inline ::google::protobuf::uint32 eg_buy_wish_summon_request::reply_code() const {
  return reply_code_;
}
inline void eg_buy_wish_summon_request::set_reply_code(::google::protobuf::uint32 value) {
  set_has_reply_code();
  reply_code_ = value;
}

// -------------------------------------------------------------------

// ge_buy_wish_summon_reply

// optional uint32 summon_id = 1;
inline bool ge_buy_wish_summon_reply::has_summon_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ge_buy_wish_summon_reply::set_has_summon_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ge_buy_wish_summon_reply::clear_has_summon_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ge_buy_wish_summon_reply::clear_summon_id() {
  summon_id_ = 0u;
  clear_has_summon_id();
}
inline ::google::protobuf::uint32 ge_buy_wish_summon_reply::summon_id() const {
  return summon_id_;
}
inline void ge_buy_wish_summon_reply::set_summon_id(::google::protobuf::uint32 value) {
  set_has_summon_id();
  summon_id_ = value;
}

// optional uint32 reply_code = 2;
inline bool ge_buy_wish_summon_reply::has_reply_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ge_buy_wish_summon_reply::set_has_reply_code() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ge_buy_wish_summon_reply::clear_has_reply_code() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ge_buy_wish_summon_reply::clear_reply_code() {
  reply_code_ = 0u;
  clear_has_reply_code();
}
inline ::google::protobuf::uint32 ge_buy_wish_summon_reply::reply_code() const {
  return reply_code_;
}
inline void ge_buy_wish_summon_reply::set_reply_code(::google::protobuf::uint32 value) {
  set_has_reply_code();
  reply_code_ = value;
}

// -------------------------------------------------------------------

// eg_king_open_wish_summon_request

// optional uint32 summon_id = 1;
inline bool eg_king_open_wish_summon_request::has_summon_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void eg_king_open_wish_summon_request::set_has_summon_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void eg_king_open_wish_summon_request::clear_has_summon_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void eg_king_open_wish_summon_request::clear_summon_id() {
  summon_id_ = 0u;
  clear_has_summon_id();
}
inline ::google::protobuf::uint32 eg_king_open_wish_summon_request::summon_id() const {
  return summon_id_;
}
inline void eg_king_open_wish_summon_request::set_summon_id(::google::protobuf::uint32 value) {
  set_has_summon_id();
  summon_id_ = value;
}

// optional uint32 reply_code = 2;
inline bool eg_king_open_wish_summon_request::has_reply_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void eg_king_open_wish_summon_request::set_has_reply_code() {
  _has_bits_[0] |= 0x00000002u;
}
inline void eg_king_open_wish_summon_request::clear_has_reply_code() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void eg_king_open_wish_summon_request::clear_reply_code() {
  reply_code_ = 0u;
  clear_has_reply_code();
}
inline ::google::protobuf::uint32 eg_king_open_wish_summon_request::reply_code() const {
  return reply_code_;
}
inline void eg_king_open_wish_summon_request::set_reply_code(::google::protobuf::uint32 value) {
  set_has_reply_code();
  reply_code_ = value;
}

// -------------------------------------------------------------------

// ge_king_open_wish_summon_reply

// optional uint32 summon_id = 1;
inline bool ge_king_open_wish_summon_reply::has_summon_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ge_king_open_wish_summon_reply::set_has_summon_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ge_king_open_wish_summon_reply::clear_has_summon_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ge_king_open_wish_summon_reply::clear_summon_id() {
  summon_id_ = 0u;
  clear_has_summon_id();
}
inline ::google::protobuf::uint32 ge_king_open_wish_summon_reply::summon_id() const {
  return summon_id_;
}
inline void ge_king_open_wish_summon_reply::set_summon_id(::google::protobuf::uint32 value) {
  set_has_summon_id();
  summon_id_ = value;
}

// optional uint32 reply_code = 2;
inline bool ge_king_open_wish_summon_reply::has_reply_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ge_king_open_wish_summon_reply::set_has_reply_code() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ge_king_open_wish_summon_reply::clear_has_reply_code() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ge_king_open_wish_summon_reply::clear_reply_code() {
  reply_code_ = 0u;
  clear_has_reply_code();
}
inline ::google::protobuf::uint32 ge_king_open_wish_summon_reply::reply_code() const {
  return reply_code_;
}
inline void ge_king_open_wish_summon_reply::set_reply_code(::google::protobuf::uint32 value) {
  set_has_reply_code();
  reply_code_ = value;
}

// optional .proto.common.role_change_data rcd = 3;
inline bool ge_king_open_wish_summon_reply::has_rcd() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ge_king_open_wish_summon_reply::set_has_rcd() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ge_king_open_wish_summon_reply::clear_has_rcd() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ge_king_open_wish_summon_reply::clear_rcd() {
  if (rcd_ != NULL) rcd_->::proto::common::role_change_data::Clear();
  clear_has_rcd();
}
inline const ::proto::common::role_change_data& ge_king_open_wish_summon_reply::rcd() const {
  return rcd_ != NULL ? *rcd_ : *default_instance_->rcd_;
}
inline ::proto::common::role_change_data* ge_king_open_wish_summon_reply::mutable_rcd() {
  set_has_rcd();
  if (rcd_ == NULL) rcd_ = new ::proto::common::role_change_data;
  return rcd_;
}
inline ::proto::common::role_change_data* ge_king_open_wish_summon_reply::release_rcd() {
  clear_has_rcd();
  ::proto::common::role_change_data* temp = rcd_;
  rcd_ = NULL;
  return temp;
}
inline void ge_king_open_wish_summon_reply::set_allocated_rcd(::proto::common::role_change_data* rcd) {
  delete rcd_;
  rcd_ = rcd;
  if (rcd) {
    set_has_rcd();
  } else {
    clear_has_rcd();
  }
}

// -------------------------------------------------------------------

// ge_modify_family_money_request

// optional uint64 family_id = 1;
inline bool ge_modify_family_money_request::has_family_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ge_modify_family_money_request::set_has_family_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ge_modify_family_money_request::clear_has_family_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ge_modify_family_money_request::clear_family_id() {
  family_id_ = GOOGLE_ULONGLONG(0);
  clear_has_family_id();
}
inline ::google::protobuf::uint64 ge_modify_family_money_request::family_id() const {
  return family_id_;
}
inline void ge_modify_family_money_request::set_family_id(::google::protobuf::uint64 value) {
  set_has_family_id();
  family_id_ = value;
}

// optional uint32 type = 2;
inline bool ge_modify_family_money_request::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ge_modify_family_money_request::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ge_modify_family_money_request::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ge_modify_family_money_request::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 ge_modify_family_money_request::type() const {
  return type_;
}
inline void ge_modify_family_money_request::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
}

// optional uint32 num = 3;
inline bool ge_modify_family_money_request::has_num() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ge_modify_family_money_request::set_has_num() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ge_modify_family_money_request::clear_has_num() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ge_modify_family_money_request::clear_num() {
  num_ = 0u;
  clear_has_num();
}
inline ::google::protobuf::uint32 ge_modify_family_money_request::num() const {
  return num_;
}
inline void ge_modify_family_money_request::set_num(::google::protobuf::uint32 value) {
  set_has_num();
  num_ = value;
}

// optional uint32 source_type = 4;
inline bool ge_modify_family_money_request::has_source_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ge_modify_family_money_request::set_has_source_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ge_modify_family_money_request::clear_has_source_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ge_modify_family_money_request::clear_source_type() {
  source_type_ = 0u;
  clear_has_source_type();
}
inline ::google::protobuf::uint32 ge_modify_family_money_request::source_type() const {
  return source_type_;
}
inline void ge_modify_family_money_request::set_source_type(::google::protobuf::uint32 value) {
  set_has_source_type();
  source_type_ = value;
}

// optional uint32 source_param = 5;
inline bool ge_modify_family_money_request::has_source_param() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ge_modify_family_money_request::set_has_source_param() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ge_modify_family_money_request::clear_has_source_param() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ge_modify_family_money_request::clear_source_param() {
  source_param_ = 0u;
  clear_has_source_param();
}
inline ::google::protobuf::uint32 ge_modify_family_money_request::source_param() const {
  return source_param_;
}
inline void ge_modify_family_money_request::set_source_param(::google::protobuf::uint32 value) {
  set_has_source_param();
  source_param_ = value;
}

// -------------------------------------------------------------------

// ge_modify_country_money_request

// optional uint32 country_id = 1;
inline bool ge_modify_country_money_request::has_country_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ge_modify_country_money_request::set_has_country_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ge_modify_country_money_request::clear_has_country_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ge_modify_country_money_request::clear_country_id() {
  country_id_ = 0u;
  clear_has_country_id();
}
inline ::google::protobuf::uint32 ge_modify_country_money_request::country_id() const {
  return country_id_;
}
inline void ge_modify_country_money_request::set_country_id(::google::protobuf::uint32 value) {
  set_has_country_id();
  country_id_ = value;
}

// optional uint32 type = 2;
inline bool ge_modify_country_money_request::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ge_modify_country_money_request::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ge_modify_country_money_request::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ge_modify_country_money_request::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 ge_modify_country_money_request::type() const {
  return type_;
}
inline void ge_modify_country_money_request::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
}

// optional uint32 num = 3;
inline bool ge_modify_country_money_request::has_num() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ge_modify_country_money_request::set_has_num() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ge_modify_country_money_request::clear_has_num() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ge_modify_country_money_request::clear_num() {
  num_ = 0u;
  clear_has_num();
}
inline ::google::protobuf::uint32 ge_modify_country_money_request::num() const {
  return num_;
}
inline void ge_modify_country_money_request::set_num(::google::protobuf::uint32 value) {
  set_has_num();
  num_ = value;
}

// optional uint32 source_type = 4;
inline bool ge_modify_country_money_request::has_source_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ge_modify_country_money_request::set_has_source_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ge_modify_country_money_request::clear_has_source_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ge_modify_country_money_request::clear_source_type() {
  source_type_ = 0u;
  clear_has_source_type();
}
inline ::google::protobuf::uint32 ge_modify_country_money_request::source_type() const {
  return source_type_;
}
inline void ge_modify_country_money_request::set_source_type(::google::protobuf::uint32 value) {
  set_has_source_type();
  source_type_ = value;
}

// optional uint32 source_param = 5;
inline bool ge_modify_country_money_request::has_source_param() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ge_modify_country_money_request::set_has_source_param() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ge_modify_country_money_request::clear_has_source_param() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ge_modify_country_money_request::clear_source_param() {
  source_param_ = 0u;
  clear_has_source_param();
}
inline ::google::protobuf::uint32 ge_modify_country_money_request::source_param() const {
  return source_param_;
}
inline void ge_modify_country_money_request::set_source_param(::google::protobuf::uint32 value) {
  set_has_source_param();
  source_param_ = value;
}

// -------------------------------------------------------------------

// ge_get_wish_summon_info_reply

// repeated .proto.common.buy_summon_info buy_info = 1;
inline int ge_get_wish_summon_info_reply::buy_info_size() const {
  return buy_info_.size();
}
inline void ge_get_wish_summon_info_reply::clear_buy_info() {
  buy_info_.Clear();
}
inline const ::proto::common::buy_summon_info& ge_get_wish_summon_info_reply::buy_info(int index) const {
  return buy_info_.Get(index);
}
inline ::proto::common::buy_summon_info* ge_get_wish_summon_info_reply::mutable_buy_info(int index) {
  return buy_info_.Mutable(index);
}
inline ::proto::common::buy_summon_info* ge_get_wish_summon_info_reply::add_buy_info() {
  return buy_info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::common::buy_summon_info >&
ge_get_wish_summon_info_reply::buy_info() const {
  return buy_info_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto::common::buy_summon_info >*
ge_get_wish_summon_info_reply::mutable_buy_info() {
  return &buy_info_;
}

// -------------------------------------------------------------------

// ge_destine_item_request

// optional uint64 role_id = 1;
inline bool ge_destine_item_request::has_role_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ge_destine_item_request::set_has_role_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ge_destine_item_request::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ge_destine_item_request::clear_role_id() {
  role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_role_id();
}
inline ::google::protobuf::uint64 ge_destine_item_request::role_id() const {
  return role_id_;
}
inline void ge_destine_item_request::set_role_id(::google::protobuf::uint64 value) {
  set_has_role_id();
  role_id_ = value;
}

// optional uint32 search_id = 2;
inline bool ge_destine_item_request::has_search_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ge_destine_item_request::set_has_search_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ge_destine_item_request::clear_has_search_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ge_destine_item_request::clear_search_id() {
  search_id_ = 0u;
  clear_has_search_id();
}
inline ::google::protobuf::uint32 ge_destine_item_request::search_id() const {
  return search_id_;
}
inline void ge_destine_item_request::set_search_id(::google::protobuf::uint32 value) {
  set_has_search_id();
  search_id_ = value;
}

// optional uint32 num = 3;
inline bool ge_destine_item_request::has_num() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ge_destine_item_request::set_has_num() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ge_destine_item_request::clear_has_num() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ge_destine_item_request::clear_num() {
  num_ = 0u;
  clear_has_num();
}
inline ::google::protobuf::uint32 ge_destine_item_request::num() const {
  return num_;
}
inline void ge_destine_item_request::set_num(::google::protobuf::uint32 value) {
  set_has_num();
  num_ = value;
}

// optional .proto.common.ex_reason reason = 4;
inline bool ge_destine_item_request::has_reason() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ge_destine_item_request::set_has_reason() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ge_destine_item_request::clear_has_reason() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ge_destine_item_request::clear_reason() {
  if (reason_ != NULL) reason_->::proto::common::ex_reason::Clear();
  clear_has_reason();
}
inline const ::proto::common::ex_reason& ge_destine_item_request::reason() const {
  return reason_ != NULL ? *reason_ : *default_instance_->reason_;
}
inline ::proto::common::ex_reason* ge_destine_item_request::mutable_reason() {
  set_has_reason();
  if (reason_ == NULL) reason_ = new ::proto::common::ex_reason;
  return reason_;
}
inline ::proto::common::ex_reason* ge_destine_item_request::release_reason() {
  clear_has_reason();
  ::proto::common::ex_reason* temp = reason_;
  reason_ = NULL;
  return temp;
}
inline void ge_destine_item_request::set_allocated_reason(::proto::common::ex_reason* reason) {
  delete reason_;
  reason_ = reason;
  if (reason) {
    set_has_reason();
  } else {
    clear_has_reason();
  }
}

// -------------------------------------------------------------------

// eg_destine_item_reply

// optional uint64 role_id = 1;
inline bool eg_destine_item_reply::has_role_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void eg_destine_item_reply::set_has_role_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void eg_destine_item_reply::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void eg_destine_item_reply::clear_role_id() {
  role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_role_id();
}
inline ::google::protobuf::uint64 eg_destine_item_reply::role_id() const {
  return role_id_;
}
inline void eg_destine_item_reply::set_role_id(::google::protobuf::uint64 value) {
  set_has_role_id();
  role_id_ = value;
}

// optional uint64 goods_uid = 2;
inline bool eg_destine_item_reply::has_goods_uid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void eg_destine_item_reply::set_has_goods_uid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void eg_destine_item_reply::clear_has_goods_uid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void eg_destine_item_reply::clear_goods_uid() {
  goods_uid_ = GOOGLE_ULONGLONG(0);
  clear_has_goods_uid();
}
inline ::google::protobuf::uint64 eg_destine_item_reply::goods_uid() const {
  return goods_uid_;
}
inline void eg_destine_item_reply::set_goods_uid(::google::protobuf::uint64 value) {
  set_has_goods_uid();
  goods_uid_ = value;
}

// optional uint32 item_id = 3;
inline bool eg_destine_item_reply::has_item_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void eg_destine_item_reply::set_has_item_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void eg_destine_item_reply::clear_has_item_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void eg_destine_item_reply::clear_item_id() {
  item_id_ = 0u;
  clear_has_item_id();
}
inline ::google::protobuf::uint32 eg_destine_item_reply::item_id() const {
  return item_id_;
}
inline void eg_destine_item_reply::set_item_id(::google::protobuf::uint32 value) {
  set_has_item_id();
  item_id_ = value;
}

// optional uint32 num = 4;
inline bool eg_destine_item_reply::has_num() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void eg_destine_item_reply::set_has_num() {
  _has_bits_[0] |= 0x00000008u;
}
inline void eg_destine_item_reply::clear_has_num() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void eg_destine_item_reply::clear_num() {
  num_ = 0u;
  clear_has_num();
}
inline ::google::protobuf::uint32 eg_destine_item_reply::num() const {
  return num_;
}
inline void eg_destine_item_reply::set_num(::google::protobuf::uint32 value) {
  set_has_num();
  num_ = value;
}

// optional uint32 price = 5;
inline bool eg_destine_item_reply::has_price() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void eg_destine_item_reply::set_has_price() {
  _has_bits_[0] |= 0x00000010u;
}
inline void eg_destine_item_reply::clear_has_price() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void eg_destine_item_reply::clear_price() {
  price_ = 0u;
  clear_has_price();
}
inline ::google::protobuf::uint32 eg_destine_item_reply::price() const {
  return price_;
}
inline void eg_destine_item_reply::set_price(::google::protobuf::uint32 value) {
  set_has_price();
  price_ = value;
}

// optional .proto.common.ex_reason reason = 6;
inline bool eg_destine_item_reply::has_reason() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void eg_destine_item_reply::set_has_reason() {
  _has_bits_[0] |= 0x00000020u;
}
inline void eg_destine_item_reply::clear_has_reason() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void eg_destine_item_reply::clear_reason() {
  if (reason_ != NULL) reason_->::proto::common::ex_reason::Clear();
  clear_has_reason();
}
inline const ::proto::common::ex_reason& eg_destine_item_reply::reason() const {
  return reason_ != NULL ? *reason_ : *default_instance_->reason_;
}
inline ::proto::common::ex_reason* eg_destine_item_reply::mutable_reason() {
  set_has_reason();
  if (reason_ == NULL) reason_ = new ::proto::common::ex_reason;
  return reason_;
}
inline ::proto::common::ex_reason* eg_destine_item_reply::release_reason() {
  clear_has_reason();
  ::proto::common::ex_reason* temp = reason_;
  reason_ = NULL;
  return temp;
}
inline void eg_destine_item_reply::set_allocated_reason(::proto::common::ex_reason* reason) {
  delete reason_;
  reason_ = reason;
  if (reason) {
    set_has_reason();
  } else {
    clear_has_reason();
  }
}

// optional uint32 reply_code = 7;
inline bool eg_destine_item_reply::has_reply_code() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void eg_destine_item_reply::set_has_reply_code() {
  _has_bits_[0] |= 0x00000040u;
}
inline void eg_destine_item_reply::clear_has_reply_code() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void eg_destine_item_reply::clear_reply_code() {
  reply_code_ = 0u;
  clear_has_reply_code();
}
inline ::google::protobuf::uint32 eg_destine_item_reply::reply_code() const {
  return reply_code_;
}
inline void eg_destine_item_reply::set_reply_code(::google::protobuf::uint32 value) {
  set_has_reply_code();
  reply_code_ = value;
}

// -------------------------------------------------------------------

// ge_undestine_item_request

// optional uint64 goods_uid = 1;
inline bool ge_undestine_item_request::has_goods_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ge_undestine_item_request::set_has_goods_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ge_undestine_item_request::clear_has_goods_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ge_undestine_item_request::clear_goods_uid() {
  goods_uid_ = GOOGLE_ULONGLONG(0);
  clear_has_goods_uid();
}
inline ::google::protobuf::uint64 ge_undestine_item_request::goods_uid() const {
  return goods_uid_;
}
inline void ge_undestine_item_request::set_goods_uid(::google::protobuf::uint64 value) {
  set_has_goods_uid();
  goods_uid_ = value;
}

// -------------------------------------------------------------------

// ge_push_general_event_request

// optional uint32 index = 1;
inline bool ge_push_general_event_request::has_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ge_push_general_event_request::set_has_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ge_push_general_event_request::clear_has_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ge_push_general_event_request::clear_index() {
  index_ = 0u;
  clear_has_index();
}
inline ::google::protobuf::uint32 ge_push_general_event_request::index() const {
  return index_;
}
inline void ge_push_general_event_request::set_index(::google::protobuf::uint32 value) {
  set_has_index();
  index_ = value;
}

// optional uint64 role_uid = 2;
inline bool ge_push_general_event_request::has_role_uid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ge_push_general_event_request::set_has_role_uid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ge_push_general_event_request::clear_has_role_uid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ge_push_general_event_request::clear_role_uid() {
  role_uid_ = GOOGLE_ULONGLONG(0);
  clear_has_role_uid();
}
inline ::google::protobuf::uint64 ge_push_general_event_request::role_uid() const {
  return role_uid_;
}
inline void ge_push_general_event_request::set_role_uid(::google::protobuf::uint64 value) {
  set_has_role_uid();
  role_uid_ = value;
}

// optional string name = 3;
inline bool ge_push_general_event_request::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ge_push_general_event_request::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ge_push_general_event_request::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ge_push_general_event_request::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& ge_push_general_event_request::name() const {
  return *name_;
}
inline void ge_push_general_event_request::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void ge_push_general_event_request::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void ge_push_general_event_request::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ge_push_general_event_request::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* ge_push_general_event_request::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ge_push_general_event_request::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 value = 4;
inline bool ge_push_general_event_request::has_value() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ge_push_general_event_request::set_has_value() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ge_push_general_event_request::clear_has_value() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ge_push_general_event_request::clear_value() {
  value_ = 0u;
  clear_has_value();
}
inline ::google::protobuf::uint32 ge_push_general_event_request::value() const {
  return value_;
}
inline void ge_push_general_event_request::set_value(::google::protobuf::uint32 value) {
  set_has_value();
  value_ = value;
}

// -------------------------------------------------------------------

// eg_sync_general_event_count_info

// repeated .proto.common.general_info_single general_info = 1;
inline int eg_sync_general_event_count_info::general_info_size() const {
  return general_info_.size();
}
inline void eg_sync_general_event_count_info::clear_general_info() {
  general_info_.Clear();
}
inline const ::proto::common::general_info_single& eg_sync_general_event_count_info::general_info(int index) const {
  return general_info_.Get(index);
}
inline ::proto::common::general_info_single* eg_sync_general_event_count_info::mutable_general_info(int index) {
  return general_info_.Mutable(index);
}
inline ::proto::common::general_info_single* eg_sync_general_event_count_info::add_general_info() {
  return general_info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::common::general_info_single >&
eg_sync_general_event_count_info::general_info() const {
  return general_info_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto::common::general_info_single >*
eg_sync_general_event_count_info::mutable_general_info() {
  return &general_info_;
}

// -------------------------------------------------------------------

// eg_sync_general_event_data

// repeated .proto.common.general_event_data info = 1;
inline int eg_sync_general_event_data::info_size() const {
  return info_.size();
}
inline void eg_sync_general_event_data::clear_info() {
  info_.Clear();
}
inline const ::proto::common::general_event_data& eg_sync_general_event_data::info(int index) const {
  return info_.Get(index);
}
inline ::proto::common::general_event_data* eg_sync_general_event_data::mutable_info(int index) {
  return info_.Mutable(index);
}
inline ::proto::common::general_event_data* eg_sync_general_event_data::add_info() {
  return info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::common::general_event_data >&
eg_sync_general_event_data::info() const {
  return info_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto::common::general_event_data >*
eg_sync_general_event_data::mutable_info() {
  return &info_;
}

// -------------------------------------------------------------------

// eg_sync_general_event_open

// optional uint32 id = 1;
inline bool eg_sync_general_event_open::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void eg_sync_general_event_open::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void eg_sync_general_event_open::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void eg_sync_general_event_open::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 eg_sync_general_event_open::id() const {
  return id_;
}
inline void eg_sync_general_event_open::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// optional .proto.common.general_event_data info = 2;
inline bool eg_sync_general_event_open::has_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void eg_sync_general_event_open::set_has_info() {
  _has_bits_[0] |= 0x00000002u;
}
inline void eg_sync_general_event_open::clear_has_info() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void eg_sync_general_event_open::clear_info() {
  if (info_ != NULL) info_->::proto::common::general_event_data::Clear();
  clear_has_info();
}
inline const ::proto::common::general_event_data& eg_sync_general_event_open::info() const {
  return info_ != NULL ? *info_ : *default_instance_->info_;
}
inline ::proto::common::general_event_data* eg_sync_general_event_open::mutable_info() {
  set_has_info();
  if (info_ == NULL) info_ = new ::proto::common::general_event_data;
  return info_;
}
inline ::proto::common::general_event_data* eg_sync_general_event_open::release_info() {
  clear_has_info();
  ::proto::common::general_event_data* temp = info_;
  info_ = NULL;
  return temp;
}
inline void eg_sync_general_event_open::set_allocated_info(::proto::common::general_event_data* info) {
  delete info_;
  info_ = info;
  if (info) {
    set_has_info();
  } else {
    clear_has_info();
  }
}

// -------------------------------------------------------------------

// eg_sync_general_event_done

// optional uint32 id = 1;
inline bool eg_sync_general_event_done::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void eg_sync_general_event_done::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void eg_sync_general_event_done::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void eg_sync_general_event_done::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 eg_sync_general_event_done::id() const {
  return id_;
}
inline void eg_sync_general_event_done::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// optional .proto.common.general_event_data info = 2;
inline bool eg_sync_general_event_done::has_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void eg_sync_general_event_done::set_has_info() {
  _has_bits_[0] |= 0x00000002u;
}
inline void eg_sync_general_event_done::clear_has_info() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void eg_sync_general_event_done::clear_info() {
  if (info_ != NULL) info_->::proto::common::general_event_data::Clear();
  clear_has_info();
}
inline const ::proto::common::general_event_data& eg_sync_general_event_done::info() const {
  return info_ != NULL ? *info_ : *default_instance_->info_;
}
inline ::proto::common::general_event_data* eg_sync_general_event_done::mutable_info() {
  set_has_info();
  if (info_ == NULL) info_ = new ::proto::common::general_event_data;
  return info_;
}
inline ::proto::common::general_event_data* eg_sync_general_event_done::release_info() {
  clear_has_info();
  ::proto::common::general_event_data* temp = info_;
  info_ = NULL;
  return temp;
}
inline void eg_sync_general_event_done::set_allocated_info(::proto::common::general_event_data* info) {
  delete info_;
  info_ = info;
  if (info) {
    set_has_info();
  } else {
    clear_has_info();
  }
}

// -------------------------------------------------------------------

// eg_sync_server_level

// optional uint32 level = 1;
inline bool eg_sync_server_level::has_level() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void eg_sync_server_level::set_has_level() {
  _has_bits_[0] |= 0x00000001u;
}
inline void eg_sync_server_level::clear_has_level() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void eg_sync_server_level::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 eg_sync_server_level::level() const {
  return level_;
}
inline void eg_sync_server_level::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
}

// -------------------------------------------------------------------

// me_transport_ntf

// optional uint64 role_uid = 1;
inline bool me_transport_ntf::has_role_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void me_transport_ntf::set_has_role_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void me_transport_ntf::clear_has_role_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void me_transport_ntf::clear_role_uid() {
  role_uid_ = GOOGLE_ULONGLONG(0);
  clear_has_role_uid();
}
inline ::google::protobuf::uint64 me_transport_ntf::role_uid() const {
  return role_uid_;
}
inline void me_transport_ntf::set_role_uid(::google::protobuf::uint64 value) {
  set_has_role_uid();
  role_uid_ = value;
}

// optional uint32 scene_id = 2;
inline bool me_transport_ntf::has_scene_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void me_transport_ntf::set_has_scene_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void me_transport_ntf::clear_has_scene_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void me_transport_ntf::clear_scene_id() {
  scene_id_ = 0u;
  clear_has_scene_id();
}
inline ::google::protobuf::uint32 me_transport_ntf::scene_id() const {
  return scene_id_;
}
inline void me_transport_ntf::set_scene_id(::google::protobuf::uint32 value) {
  set_has_scene_id();
  scene_id_ = value;
}

// -------------------------------------------------------------------

// eg_gm_transport_ntf

// optional uint64 role_uid = 1;
inline bool eg_gm_transport_ntf::has_role_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void eg_gm_transport_ntf::set_has_role_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void eg_gm_transport_ntf::clear_has_role_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void eg_gm_transport_ntf::clear_role_uid() {
  role_uid_ = GOOGLE_ULONGLONG(0);
  clear_has_role_uid();
}
inline ::google::protobuf::uint64 eg_gm_transport_ntf::role_uid() const {
  return role_uid_;
}
inline void eg_gm_transport_ntf::set_role_uid(::google::protobuf::uint64 value) {
  set_has_role_uid();
  role_uid_ = value;
}

// optional uint32 scene_id = 2;
inline bool eg_gm_transport_ntf::has_scene_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void eg_gm_transport_ntf::set_has_scene_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void eg_gm_transport_ntf::clear_has_scene_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void eg_gm_transport_ntf::clear_scene_id() {
  scene_id_ = 0u;
  clear_has_scene_id();
}
inline ::google::protobuf::uint32 eg_gm_transport_ntf::scene_id() const {
  return scene_id_;
}
inline void eg_gm_transport_ntf::set_scene_id(::google::protobuf::uint32 value) {
  set_has_scene_id();
  scene_id_ = value;
}

// -------------------------------------------------------------------

// ea_send_gm_msg_to_account_request

// optional uint32 cmd_type = 1;
inline bool ea_send_gm_msg_to_account_request::has_cmd_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ea_send_gm_msg_to_account_request::set_has_cmd_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ea_send_gm_msg_to_account_request::clear_has_cmd_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ea_send_gm_msg_to_account_request::clear_cmd_type() {
  cmd_type_ = 0u;
  clear_has_cmd_type();
}
inline ::google::protobuf::uint32 ea_send_gm_msg_to_account_request::cmd_type() const {
  return cmd_type_;
}
inline void ea_send_gm_msg_to_account_request::set_cmd_type(::google::protobuf::uint32 value) {
  set_has_cmd_type();
  cmd_type_ = value;
}

// optional .proto.common.gm_msg_to_account msg = 2;
inline bool ea_send_gm_msg_to_account_request::has_msg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ea_send_gm_msg_to_account_request::set_has_msg() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ea_send_gm_msg_to_account_request::clear_has_msg() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ea_send_gm_msg_to_account_request::clear_msg() {
  if (msg_ != NULL) msg_->::proto::common::gm_msg_to_account::Clear();
  clear_has_msg();
}
inline const ::proto::common::gm_msg_to_account& ea_send_gm_msg_to_account_request::msg() const {
  return msg_ != NULL ? *msg_ : *default_instance_->msg_;
}
inline ::proto::common::gm_msg_to_account* ea_send_gm_msg_to_account_request::mutable_msg() {
  set_has_msg();
  if (msg_ == NULL) msg_ = new ::proto::common::gm_msg_to_account;
  return msg_;
}
inline ::proto::common::gm_msg_to_account* ea_send_gm_msg_to_account_request::release_msg() {
  clear_has_msg();
  ::proto::common::gm_msg_to_account* temp = msg_;
  msg_ = NULL;
  return temp;
}
inline void ea_send_gm_msg_to_account_request::set_allocated_msg(::proto::common::gm_msg_to_account* msg) {
  delete msg_;
  msg_ = msg;
  if (msg) {
    set_has_msg();
  } else {
    clear_has_msg();
  }
}

// -------------------------------------------------------------------

// ae_send_gm_msg_to_account_reply

// optional uint32 reply_code = 1;
inline bool ae_send_gm_msg_to_account_reply::has_reply_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ae_send_gm_msg_to_account_reply::set_has_reply_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ae_send_gm_msg_to_account_reply::clear_has_reply_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ae_send_gm_msg_to_account_reply::clear_reply_code() {
  reply_code_ = 0u;
  clear_has_reply_code();
}
inline ::google::protobuf::uint32 ae_send_gm_msg_to_account_reply::reply_code() const {
  return reply_code_;
}
inline void ae_send_gm_msg_to_account_reply::set_reply_code(::google::protobuf::uint32 value) {
  set_has_reply_code();
  reply_code_ = value;
}

// -------------------------------------------------------------------

// al_send_gm_msg_to_account_requst

// optional uint32 cmd_type = 1;
inline bool al_send_gm_msg_to_account_requst::has_cmd_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void al_send_gm_msg_to_account_requst::set_has_cmd_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void al_send_gm_msg_to_account_requst::clear_has_cmd_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void al_send_gm_msg_to_account_requst::clear_cmd_type() {
  cmd_type_ = 0u;
  clear_has_cmd_type();
}
inline ::google::protobuf::uint32 al_send_gm_msg_to_account_requst::cmd_type() const {
  return cmd_type_;
}
inline void al_send_gm_msg_to_account_requst::set_cmd_type(::google::protobuf::uint32 value) {
  set_has_cmd_type();
  cmd_type_ = value;
}

// optional .proto.common.gm_msg_to_account msg = 2;
inline bool al_send_gm_msg_to_account_requst::has_msg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void al_send_gm_msg_to_account_requst::set_has_msg() {
  _has_bits_[0] |= 0x00000002u;
}
inline void al_send_gm_msg_to_account_requst::clear_has_msg() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void al_send_gm_msg_to_account_requst::clear_msg() {
  if (msg_ != NULL) msg_->::proto::common::gm_msg_to_account::Clear();
  clear_has_msg();
}
inline const ::proto::common::gm_msg_to_account& al_send_gm_msg_to_account_requst::msg() const {
  return msg_ != NULL ? *msg_ : *default_instance_->msg_;
}
inline ::proto::common::gm_msg_to_account* al_send_gm_msg_to_account_requst::mutable_msg() {
  set_has_msg();
  if (msg_ == NULL) msg_ = new ::proto::common::gm_msg_to_account;
  return msg_;
}
inline ::proto::common::gm_msg_to_account* al_send_gm_msg_to_account_requst::release_msg() {
  clear_has_msg();
  ::proto::common::gm_msg_to_account* temp = msg_;
  msg_ = NULL;
  return temp;
}
inline void al_send_gm_msg_to_account_requst::set_allocated_msg(::proto::common::gm_msg_to_account* msg) {
  delete msg_;
  msg_ = msg;
  if (msg) {
    set_has_msg();
  } else {
    clear_has_msg();
  }
}

// -------------------------------------------------------------------

// la_send_gm_msg_to_account_reply

// optional uint32 reply_code = 1;
inline bool la_send_gm_msg_to_account_reply::has_reply_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void la_send_gm_msg_to_account_reply::set_has_reply_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void la_send_gm_msg_to_account_reply::clear_has_reply_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void la_send_gm_msg_to_account_reply::clear_reply_code() {
  reply_code_ = 0u;
  clear_has_reply_code();
}
inline ::google::protobuf::uint32 la_send_gm_msg_to_account_reply::reply_code() const {
  return reply_code_;
}
inline void la_send_gm_msg_to_account_reply::set_reply_code(::google::protobuf::uint32 value) {
  set_has_reply_code();
  reply_code_ = value;
}

// -------------------------------------------------------------------

// ln_send_gm_msg_to_account_request

// optional uint32 cmd_type = 1;
inline bool ln_send_gm_msg_to_account_request::has_cmd_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ln_send_gm_msg_to_account_request::set_has_cmd_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ln_send_gm_msg_to_account_request::clear_has_cmd_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ln_send_gm_msg_to_account_request::clear_cmd_type() {
  cmd_type_ = 0u;
  clear_has_cmd_type();
}
inline ::google::protobuf::uint32 ln_send_gm_msg_to_account_request::cmd_type() const {
  return cmd_type_;
}
inline void ln_send_gm_msg_to_account_request::set_cmd_type(::google::protobuf::uint32 value) {
  set_has_cmd_type();
  cmd_type_ = value;
}

// optional uint32 server_id = 2;
inline bool ln_send_gm_msg_to_account_request::has_server_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ln_send_gm_msg_to_account_request::set_has_server_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ln_send_gm_msg_to_account_request::clear_has_server_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ln_send_gm_msg_to_account_request::clear_server_id() {
  server_id_ = 0u;
  clear_has_server_id();
}
inline ::google::protobuf::uint32 ln_send_gm_msg_to_account_request::server_id() const {
  return server_id_;
}
inline void ln_send_gm_msg_to_account_request::set_server_id(::google::protobuf::uint32 value) {
  set_has_server_id();
  server_id_ = value;
}

// optional .proto.common.gm_msg_to_account msg = 3;
inline bool ln_send_gm_msg_to_account_request::has_msg() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ln_send_gm_msg_to_account_request::set_has_msg() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ln_send_gm_msg_to_account_request::clear_has_msg() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ln_send_gm_msg_to_account_request::clear_msg() {
  if (msg_ != NULL) msg_->::proto::common::gm_msg_to_account::Clear();
  clear_has_msg();
}
inline const ::proto::common::gm_msg_to_account& ln_send_gm_msg_to_account_request::msg() const {
  return msg_ != NULL ? *msg_ : *default_instance_->msg_;
}
inline ::proto::common::gm_msg_to_account* ln_send_gm_msg_to_account_request::mutable_msg() {
  set_has_msg();
  if (msg_ == NULL) msg_ = new ::proto::common::gm_msg_to_account;
  return msg_;
}
inline ::proto::common::gm_msg_to_account* ln_send_gm_msg_to_account_request::release_msg() {
  clear_has_msg();
  ::proto::common::gm_msg_to_account* temp = msg_;
  msg_ = NULL;
  return temp;
}
inline void ln_send_gm_msg_to_account_request::set_allocated_msg(::proto::common::gm_msg_to_account* msg) {
  delete msg_;
  msg_ = msg;
  if (msg) {
    set_has_msg();
  } else {
    clear_has_msg();
  }
}

// -------------------------------------------------------------------

// nl_send_gm_msg_to_account_reply

// optional uint32 reply_code = 1;
inline bool nl_send_gm_msg_to_account_reply::has_reply_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void nl_send_gm_msg_to_account_reply::set_has_reply_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void nl_send_gm_msg_to_account_reply::clear_has_reply_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void nl_send_gm_msg_to_account_reply::clear_reply_code() {
  reply_code_ = 0u;
  clear_has_reply_code();
}
inline ::google::protobuf::uint32 nl_send_gm_msg_to_account_reply::reply_code() const {
  return reply_code_;
}
inline void nl_send_gm_msg_to_account_reply::set_reply_code(::google::protobuf::uint32 value) {
  set_has_reply_code();
  reply_code_ = value;
}

// -------------------------------------------------------------------

// me_manage_role_ntf

// repeated uint64 role_uid = 1;
inline int me_manage_role_ntf::role_uid_size() const {
  return role_uid_.size();
}
inline void me_manage_role_ntf::clear_role_uid() {
  role_uid_.Clear();
}
inline ::google::protobuf::uint64 me_manage_role_ntf::role_uid(int index) const {
  return role_uid_.Get(index);
}
inline void me_manage_role_ntf::set_role_uid(int index, ::google::protobuf::uint64 value) {
  role_uid_.Set(index, value);
}
inline void me_manage_role_ntf::add_role_uid(::google::protobuf::uint64 value) {
  role_uid_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
me_manage_role_ntf::role_uid() const {
  return role_uid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
me_manage_role_ntf::mutable_role_uid() {
  return &role_uid_;
}

// optional uint32 manage_type = 2;
inline bool me_manage_role_ntf::has_manage_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void me_manage_role_ntf::set_has_manage_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void me_manage_role_ntf::clear_has_manage_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void me_manage_role_ntf::clear_manage_type() {
  manage_type_ = 0u;
  clear_has_manage_type();
}
inline ::google::protobuf::uint32 me_manage_role_ntf::manage_type() const {
  return manage_type_;
}
inline void me_manage_role_ntf::set_manage_type(::google::protobuf::uint32 value) {
  set_has_manage_type();
  manage_type_ = value;
}

// optional uint32 offset_time = 3;
inline bool me_manage_role_ntf::has_offset_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void me_manage_role_ntf::set_has_offset_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void me_manage_role_ntf::clear_has_offset_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void me_manage_role_ntf::clear_offset_time() {
  offset_time_ = 0u;
  clear_has_offset_time();
}
inline ::google::protobuf::uint32 me_manage_role_ntf::offset_time() const {
  return offset_time_;
}
inline void me_manage_role_ntf::set_offset_time(::google::protobuf::uint32 value) {
  set_has_offset_time();
  offset_time_ = value;
}

// optional uint32 admin_id = 4;
inline bool me_manage_role_ntf::has_admin_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void me_manage_role_ntf::set_has_admin_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void me_manage_role_ntf::clear_has_admin_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void me_manage_role_ntf::clear_admin_id() {
  admin_id_ = 0u;
  clear_has_admin_id();
}
inline ::google::protobuf::uint32 me_manage_role_ntf::admin_id() const {
  return admin_id_;
}
inline void me_manage_role_ntf::set_admin_id(::google::protobuf::uint32 value) {
  set_has_admin_id();
  admin_id_ = value;
}

// optional string reason = 5;
inline bool me_manage_role_ntf::has_reason() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void me_manage_role_ntf::set_has_reason() {
  _has_bits_[0] |= 0x00000010u;
}
inline void me_manage_role_ntf::clear_has_reason() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void me_manage_role_ntf::clear_reason() {
  if (reason_ != &::google::protobuf::internal::kEmptyString) {
    reason_->clear();
  }
  clear_has_reason();
}
inline const ::std::string& me_manage_role_ntf::reason() const {
  return *reason_;
}
inline void me_manage_role_ntf::set_reason(const ::std::string& value) {
  set_has_reason();
  if (reason_ == &::google::protobuf::internal::kEmptyString) {
    reason_ = new ::std::string;
  }
  reason_->assign(value);
}
inline void me_manage_role_ntf::set_reason(const char* value) {
  set_has_reason();
  if (reason_ == &::google::protobuf::internal::kEmptyString) {
    reason_ = new ::std::string;
  }
  reason_->assign(value);
}
inline void me_manage_role_ntf::set_reason(const char* value, size_t size) {
  set_has_reason();
  if (reason_ == &::google::protobuf::internal::kEmptyString) {
    reason_ = new ::std::string;
  }
  reason_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* me_manage_role_ntf::mutable_reason() {
  set_has_reason();
  if (reason_ == &::google::protobuf::internal::kEmptyString) {
    reason_ = new ::std::string;
  }
  return reason_;
}
inline ::std::string* me_manage_role_ntf::release_reason() {
  clear_has_reason();
  if (reason_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = reason_;
    reason_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void me_manage_role_ntf::set_allocated_reason(::std::string* reason) {
  if (reason_ != &::google::protobuf::internal::kEmptyString) {
    delete reason_;
  }
  if (reason) {
    set_has_reason();
    reason_ = reason;
  } else {
    clear_has_reason();
    reason_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string oper_name = 6;
inline bool me_manage_role_ntf::has_oper_name() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void me_manage_role_ntf::set_has_oper_name() {
  _has_bits_[0] |= 0x00000020u;
}
inline void me_manage_role_ntf::clear_has_oper_name() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void me_manage_role_ntf::clear_oper_name() {
  if (oper_name_ != &::google::protobuf::internal::kEmptyString) {
    oper_name_->clear();
  }
  clear_has_oper_name();
}
inline const ::std::string& me_manage_role_ntf::oper_name() const {
  return *oper_name_;
}
inline void me_manage_role_ntf::set_oper_name(const ::std::string& value) {
  set_has_oper_name();
  if (oper_name_ == &::google::protobuf::internal::kEmptyString) {
    oper_name_ = new ::std::string;
  }
  oper_name_->assign(value);
}
inline void me_manage_role_ntf::set_oper_name(const char* value) {
  set_has_oper_name();
  if (oper_name_ == &::google::protobuf::internal::kEmptyString) {
    oper_name_ = new ::std::string;
  }
  oper_name_->assign(value);
}
inline void me_manage_role_ntf::set_oper_name(const char* value, size_t size) {
  set_has_oper_name();
  if (oper_name_ == &::google::protobuf::internal::kEmptyString) {
    oper_name_ = new ::std::string;
  }
  oper_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* me_manage_role_ntf::mutable_oper_name() {
  set_has_oper_name();
  if (oper_name_ == &::google::protobuf::internal::kEmptyString) {
    oper_name_ = new ::std::string;
  }
  return oper_name_;
}
inline ::std::string* me_manage_role_ntf::release_oper_name() {
  clear_has_oper_name();
  if (oper_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = oper_name_;
    oper_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void me_manage_role_ntf::set_allocated_oper_name(::std::string* oper_name) {
  if (oper_name_ != &::google::protobuf::internal::kEmptyString) {
    delete oper_name_;
  }
  if (oper_name) {
    set_has_oper_name();
    oper_name_ = oper_name;
  } else {
    clear_has_oper_name();
    oper_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// em_manage_role_ntf

// repeated .proto.gm_common.manage_reply_single reply_data = 1;
inline int em_manage_role_ntf::reply_data_size() const {
  return reply_data_.size();
}
inline void em_manage_role_ntf::clear_reply_data() {
  reply_data_.Clear();
}
inline const ::proto::gm_common::manage_reply_single& em_manage_role_ntf::reply_data(int index) const {
  return reply_data_.Get(index);
}
inline ::proto::gm_common::manage_reply_single* em_manage_role_ntf::mutable_reply_data(int index) {
  return reply_data_.Mutable(index);
}
inline ::proto::gm_common::manage_reply_single* em_manage_role_ntf::add_reply_data() {
  return reply_data_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::gm_common::manage_reply_single >&
em_manage_role_ntf::reply_data() const {
  return reply_data_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto::gm_common::manage_reply_single >*
em_manage_role_ntf::mutable_reply_data() {
  return &reply_data_;
}

// optional uint32 admin_id = 2;
inline bool em_manage_role_ntf::has_admin_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void em_manage_role_ntf::set_has_admin_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void em_manage_role_ntf::clear_has_admin_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void em_manage_role_ntf::clear_admin_id() {
  admin_id_ = 0u;
  clear_has_admin_id();
}
inline ::google::protobuf::uint32 em_manage_role_ntf::admin_id() const {
  return admin_id_;
}
inline void em_manage_role_ntf::set_admin_id(::google::protobuf::uint32 value) {
  set_has_admin_id();
  admin_id_ = value;
}

// optional uint32 manage_type = 3;
inline bool em_manage_role_ntf::has_manage_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void em_manage_role_ntf::set_has_manage_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void em_manage_role_ntf::clear_has_manage_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void em_manage_role_ntf::clear_manage_type() {
  manage_type_ = 0u;
  clear_has_manage_type();
}
inline ::google::protobuf::uint32 em_manage_role_ntf::manage_type() const {
  return manage_type_;
}
inline void em_manage_role_ntf::set_manage_type(::google::protobuf::uint32 value) {
  set_has_manage_type();
  manage_type_ = value;
}

// optional uint32 offset_time = 4;
inline bool em_manage_role_ntf::has_offset_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void em_manage_role_ntf::set_has_offset_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void em_manage_role_ntf::clear_has_offset_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void em_manage_role_ntf::clear_offset_time() {
  offset_time_ = 0u;
  clear_has_offset_time();
}
inline ::google::protobuf::uint32 em_manage_role_ntf::offset_time() const {
  return offset_time_;
}
inline void em_manage_role_ntf::set_offset_time(::google::protobuf::uint32 value) {
  set_has_offset_time();
  offset_time_ = value;
}

// optional string reason = 5;
inline bool em_manage_role_ntf::has_reason() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void em_manage_role_ntf::set_has_reason() {
  _has_bits_[0] |= 0x00000010u;
}
inline void em_manage_role_ntf::clear_has_reason() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void em_manage_role_ntf::clear_reason() {
  if (reason_ != &::google::protobuf::internal::kEmptyString) {
    reason_->clear();
  }
  clear_has_reason();
}
inline const ::std::string& em_manage_role_ntf::reason() const {
  return *reason_;
}
inline void em_manage_role_ntf::set_reason(const ::std::string& value) {
  set_has_reason();
  if (reason_ == &::google::protobuf::internal::kEmptyString) {
    reason_ = new ::std::string;
  }
  reason_->assign(value);
}
inline void em_manage_role_ntf::set_reason(const char* value) {
  set_has_reason();
  if (reason_ == &::google::protobuf::internal::kEmptyString) {
    reason_ = new ::std::string;
  }
  reason_->assign(value);
}
inline void em_manage_role_ntf::set_reason(const char* value, size_t size) {
  set_has_reason();
  if (reason_ == &::google::protobuf::internal::kEmptyString) {
    reason_ = new ::std::string;
  }
  reason_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* em_manage_role_ntf::mutable_reason() {
  set_has_reason();
  if (reason_ == &::google::protobuf::internal::kEmptyString) {
    reason_ = new ::std::string;
  }
  return reason_;
}
inline ::std::string* em_manage_role_ntf::release_reason() {
  clear_has_reason();
  if (reason_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = reason_;
    reason_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void em_manage_role_ntf::set_allocated_reason(::std::string* reason) {
  if (reason_ != &::google::protobuf::internal::kEmptyString) {
    delete reason_;
  }
  if (reason) {
    set_has_reason();
    reason_ = reason;
  } else {
    clear_has_reason();
    reason_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string oper_name = 6;
inline bool em_manage_role_ntf::has_oper_name() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void em_manage_role_ntf::set_has_oper_name() {
  _has_bits_[0] |= 0x00000020u;
}
inline void em_manage_role_ntf::clear_has_oper_name() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void em_manage_role_ntf::clear_oper_name() {
  if (oper_name_ != &::google::protobuf::internal::kEmptyString) {
    oper_name_->clear();
  }
  clear_has_oper_name();
}
inline const ::std::string& em_manage_role_ntf::oper_name() const {
  return *oper_name_;
}
inline void em_manage_role_ntf::set_oper_name(const ::std::string& value) {
  set_has_oper_name();
  if (oper_name_ == &::google::protobuf::internal::kEmptyString) {
    oper_name_ = new ::std::string;
  }
  oper_name_->assign(value);
}
inline void em_manage_role_ntf::set_oper_name(const char* value) {
  set_has_oper_name();
  if (oper_name_ == &::google::protobuf::internal::kEmptyString) {
    oper_name_ = new ::std::string;
  }
  oper_name_->assign(value);
}
inline void em_manage_role_ntf::set_oper_name(const char* value, size_t size) {
  set_has_oper_name();
  if (oper_name_ == &::google::protobuf::internal::kEmptyString) {
    oper_name_ = new ::std::string;
  }
  oper_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* em_manage_role_ntf::mutable_oper_name() {
  set_has_oper_name();
  if (oper_name_ == &::google::protobuf::internal::kEmptyString) {
    oper_name_ = new ::std::string;
  }
  return oper_name_;
}
inline ::std::string* em_manage_role_ntf::release_oper_name() {
  clear_has_oper_name();
  if (oper_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = oper_name_;
    oper_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void em_manage_role_ntf::set_allocated_oper_name(::std::string* oper_name) {
  if (oper_name_ != &::google::protobuf::internal::kEmptyString) {
    delete oper_name_;
  }
  if (oper_name) {
    set_has_oper_name();
    oper_name_ = oper_name;
  } else {
    clear_has_oper_name();
    oper_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// eh_silence_role_notify

// optional uint32 silence_time = 1;
inline bool eh_silence_role_notify::has_silence_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void eh_silence_role_notify::set_has_silence_time() {
  _has_bits_[0] |= 0x00000001u;
}
inline void eh_silence_role_notify::clear_has_silence_time() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void eh_silence_role_notify::clear_silence_time() {
  silence_time_ = 0u;
  clear_has_silence_time();
}
inline ::google::protobuf::uint32 eh_silence_role_notify::silence_time() const {
  return silence_time_;
}
inline void eh_silence_role_notify::set_silence_time(::google::protobuf::uint32 value) {
  set_has_silence_time();
  silence_time_ = value;
}

// -------------------------------------------------------------------

// nl_syn_account_info_notify

// optional uint32 account_id = 1;
inline bool nl_syn_account_info_notify::has_account_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void nl_syn_account_info_notify::set_has_account_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void nl_syn_account_info_notify::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void nl_syn_account_info_notify::clear_account_id() {
  account_id_ = 0u;
  clear_has_account_id();
}
inline ::google::protobuf::uint32 nl_syn_account_info_notify::account_id() const {
  return account_id_;
}
inline void nl_syn_account_info_notify::set_account_id(::google::protobuf::uint32 value) {
  set_has_account_id();
  account_id_ = value;
}

// -------------------------------------------------------------------

// nd_syn_account_info_notify

// optional uint32 account_id = 1;
inline bool nd_syn_account_info_notify::has_account_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void nd_syn_account_info_notify::set_has_account_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void nd_syn_account_info_notify::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void nd_syn_account_info_notify::clear_account_id() {
  account_id_ = 0u;
  clear_has_account_id();
}
inline ::google::protobuf::uint32 nd_syn_account_info_notify::account_id() const {
  return account_id_;
}
inline void nd_syn_account_info_notify::set_account_id(::google::protobuf::uint32 value) {
  set_has_account_id();
  account_id_ = value;
}

// -------------------------------------------------------------------

// gd_change_name_request

// optional string new_name = 1;
inline bool gd_change_name_request::has_new_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gd_change_name_request::set_has_new_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gd_change_name_request::clear_has_new_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gd_change_name_request::clear_new_name() {
  if (new_name_ != &::google::protobuf::internal::kEmptyString) {
    new_name_->clear();
  }
  clear_has_new_name();
}
inline const ::std::string& gd_change_name_request::new_name() const {
  return *new_name_;
}
inline void gd_change_name_request::set_new_name(const ::std::string& value) {
  set_has_new_name();
  if (new_name_ == &::google::protobuf::internal::kEmptyString) {
    new_name_ = new ::std::string;
  }
  new_name_->assign(value);
}
inline void gd_change_name_request::set_new_name(const char* value) {
  set_has_new_name();
  if (new_name_ == &::google::protobuf::internal::kEmptyString) {
    new_name_ = new ::std::string;
  }
  new_name_->assign(value);
}
inline void gd_change_name_request::set_new_name(const char* value, size_t size) {
  set_has_new_name();
  if (new_name_ == &::google::protobuf::internal::kEmptyString) {
    new_name_ = new ::std::string;
  }
  new_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* gd_change_name_request::mutable_new_name() {
  set_has_new_name();
  if (new_name_ == &::google::protobuf::internal::kEmptyString) {
    new_name_ = new ::std::string;
  }
  return new_name_;
}
inline ::std::string* gd_change_name_request::release_new_name() {
  clear_has_new_name();
  if (new_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = new_name_;
    new_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void gd_change_name_request::set_allocated_new_name(::std::string* new_name) {
  if (new_name_ != &::google::protobuf::internal::kEmptyString) {
    delete new_name_;
  }
  if (new_name) {
    set_has_new_name();
    new_name_ = new_name;
  } else {
    clear_has_new_name();
    new_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 cost = 2;
inline bool gd_change_name_request::has_cost() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gd_change_name_request::set_has_cost() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gd_change_name_request::clear_has_cost() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gd_change_name_request::clear_cost() {
  cost_ = 0u;
  clear_has_cost();
}
inline ::google::protobuf::uint32 gd_change_name_request::cost() const {
  return cost_;
}
inline void gd_change_name_request::set_cost(::google::protobuf::uint32 value) {
  set_has_cost();
  cost_ = value;
}

// -------------------------------------------------------------------

// dg_change_name_reply

// optional uint32 reply_code = 1;
inline bool dg_change_name_reply::has_reply_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void dg_change_name_reply::set_has_reply_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void dg_change_name_reply::clear_has_reply_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void dg_change_name_reply::clear_reply_code() {
  reply_code_ = 0u;
  clear_has_reply_code();
}
inline ::google::protobuf::uint32 dg_change_name_reply::reply_code() const {
  return reply_code_;
}
inline void dg_change_name_reply::set_reply_code(::google::protobuf::uint32 value) {
  set_has_reply_code();
  reply_code_ = value;
}

// optional string new_name = 2;
inline bool dg_change_name_reply::has_new_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void dg_change_name_reply::set_has_new_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void dg_change_name_reply::clear_has_new_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void dg_change_name_reply::clear_new_name() {
  if (new_name_ != &::google::protobuf::internal::kEmptyString) {
    new_name_->clear();
  }
  clear_has_new_name();
}
inline const ::std::string& dg_change_name_reply::new_name() const {
  return *new_name_;
}
inline void dg_change_name_reply::set_new_name(const ::std::string& value) {
  set_has_new_name();
  if (new_name_ == &::google::protobuf::internal::kEmptyString) {
    new_name_ = new ::std::string;
  }
  new_name_->assign(value);
}
inline void dg_change_name_reply::set_new_name(const char* value) {
  set_has_new_name();
  if (new_name_ == &::google::protobuf::internal::kEmptyString) {
    new_name_ = new ::std::string;
  }
  new_name_->assign(value);
}
inline void dg_change_name_reply::set_new_name(const char* value, size_t size) {
  set_has_new_name();
  if (new_name_ == &::google::protobuf::internal::kEmptyString) {
    new_name_ = new ::std::string;
  }
  new_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* dg_change_name_reply::mutable_new_name() {
  set_has_new_name();
  if (new_name_ == &::google::protobuf::internal::kEmptyString) {
    new_name_ = new ::std::string;
  }
  return new_name_;
}
inline ::std::string* dg_change_name_reply::release_new_name() {
  clear_has_new_name();
  if (new_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = new_name_;
    new_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void dg_change_name_reply::set_allocated_new_name(::std::string* new_name) {
  if (new_name_ != &::google::protobuf::internal::kEmptyString) {
    delete new_name_;
  }
  if (new_name) {
    set_has_new_name();
    new_name_ = new_name;
  } else {
    clear_has_new_name();
    new_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 cost = 3;
inline bool dg_change_name_reply::has_cost() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void dg_change_name_reply::set_has_cost() {
  _has_bits_[0] |= 0x00000004u;
}
inline void dg_change_name_reply::clear_has_cost() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void dg_change_name_reply::clear_cost() {
  cost_ = 0u;
  clear_has_cost();
}
inline ::google::protobuf::uint32 dg_change_name_reply::cost() const {
  return cost_;
}
inline void dg_change_name_reply::set_cost(::google::protobuf::uint32 value) {
  set_has_cost();
  cost_ = value;
}

// -------------------------------------------------------------------

// de_change_name_notify

// optional string new_name = 1;
inline bool de_change_name_notify::has_new_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void de_change_name_notify::set_has_new_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void de_change_name_notify::clear_has_new_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void de_change_name_notify::clear_new_name() {
  if (new_name_ != &::google::protobuf::internal::kEmptyString) {
    new_name_->clear();
  }
  clear_has_new_name();
}
inline const ::std::string& de_change_name_notify::new_name() const {
  return *new_name_;
}
inline void de_change_name_notify::set_new_name(const ::std::string& value) {
  set_has_new_name();
  if (new_name_ == &::google::protobuf::internal::kEmptyString) {
    new_name_ = new ::std::string;
  }
  new_name_->assign(value);
}
inline void de_change_name_notify::set_new_name(const char* value) {
  set_has_new_name();
  if (new_name_ == &::google::protobuf::internal::kEmptyString) {
    new_name_ = new ::std::string;
  }
  new_name_->assign(value);
}
inline void de_change_name_notify::set_new_name(const char* value, size_t size) {
  set_has_new_name();
  if (new_name_ == &::google::protobuf::internal::kEmptyString) {
    new_name_ = new ::std::string;
  }
  new_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* de_change_name_notify::mutable_new_name() {
  set_has_new_name();
  if (new_name_ == &::google::protobuf::internal::kEmptyString) {
    new_name_ = new ::std::string;
  }
  return new_name_;
}
inline ::std::string* de_change_name_notify::release_new_name() {
  clear_has_new_name();
  if (new_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = new_name_;
    new_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void de_change_name_notify::set_allocated_new_name(::std::string* new_name) {
  if (new_name_ != &::google::protobuf::internal::kEmptyString) {
    delete new_name_;
  }
  if (new_name) {
    set_has_new_name();
    new_name_ = new_name;
  } else {
    clear_has_new_name();
    new_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// eh_change_name_notify

// optional string new_name = 1;
inline bool eh_change_name_notify::has_new_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void eh_change_name_notify::set_has_new_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void eh_change_name_notify::clear_has_new_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void eh_change_name_notify::clear_new_name() {
  if (new_name_ != &::google::protobuf::internal::kEmptyString) {
    new_name_->clear();
  }
  clear_has_new_name();
}
inline const ::std::string& eh_change_name_notify::new_name() const {
  return *new_name_;
}
inline void eh_change_name_notify::set_new_name(const ::std::string& value) {
  set_has_new_name();
  if (new_name_ == &::google::protobuf::internal::kEmptyString) {
    new_name_ = new ::std::string;
  }
  new_name_->assign(value);
}
inline void eh_change_name_notify::set_new_name(const char* value) {
  set_has_new_name();
  if (new_name_ == &::google::protobuf::internal::kEmptyString) {
    new_name_ = new ::std::string;
  }
  new_name_->assign(value);
}
inline void eh_change_name_notify::set_new_name(const char* value, size_t size) {
  set_has_new_name();
  if (new_name_ == &::google::protobuf::internal::kEmptyString) {
    new_name_ = new ::std::string;
  }
  new_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* eh_change_name_notify::mutable_new_name() {
  set_has_new_name();
  if (new_name_ == &::google::protobuf::internal::kEmptyString) {
    new_name_ = new ::std::string;
  }
  return new_name_;
}
inline ::std::string* eh_change_name_notify::release_new_name() {
  clear_has_new_name();
  if (new_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = new_name_;
    new_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void eh_change_name_notify::set_allocated_new_name(::std::string* new_name) {
  if (new_name_ != &::google::protobuf::internal::kEmptyString) {
    delete new_name_;
  }
  if (new_name) {
    set_has_new_name();
    new_name_ = new_name;
  } else {
    clear_has_new_name();
    new_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// me_reload_config_notify

// optional uint32 load_type = 1;
inline bool me_reload_config_notify::has_load_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void me_reload_config_notify::set_has_load_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void me_reload_config_notify::clear_has_load_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void me_reload_config_notify::clear_load_type() {
  load_type_ = 0u;
  clear_has_load_type();
}
inline ::google::protobuf::uint32 me_reload_config_notify::load_type() const {
  return load_type_;
}
inline void me_reload_config_notify::set_load_type(::google::protobuf::uint32 value) {
  set_has_load_type();
  load_type_ = value;
}

// optional string file_name = 2;
inline bool me_reload_config_notify::has_file_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void me_reload_config_notify::set_has_file_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void me_reload_config_notify::clear_has_file_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void me_reload_config_notify::clear_file_name() {
  if (file_name_ != &::google::protobuf::internal::kEmptyString) {
    file_name_->clear();
  }
  clear_has_file_name();
}
inline const ::std::string& me_reload_config_notify::file_name() const {
  return *file_name_;
}
inline void me_reload_config_notify::set_file_name(const ::std::string& value) {
  set_has_file_name();
  if (file_name_ == &::google::protobuf::internal::kEmptyString) {
    file_name_ = new ::std::string;
  }
  file_name_->assign(value);
}
inline void me_reload_config_notify::set_file_name(const char* value) {
  set_has_file_name();
  if (file_name_ == &::google::protobuf::internal::kEmptyString) {
    file_name_ = new ::std::string;
  }
  file_name_->assign(value);
}
inline void me_reload_config_notify::set_file_name(const char* value, size_t size) {
  set_has_file_name();
  if (file_name_ == &::google::protobuf::internal::kEmptyString) {
    file_name_ = new ::std::string;
  }
  file_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* me_reload_config_notify::mutable_file_name() {
  set_has_file_name();
  if (file_name_ == &::google::protobuf::internal::kEmptyString) {
    file_name_ = new ::std::string;
  }
  return file_name_;
}
inline ::std::string* me_reload_config_notify::release_file_name() {
  clear_has_file_name();
  if (file_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = file_name_;
    file_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void me_reload_config_notify::set_allocated_file_name(::std::string* file_name) {
  if (file_name_ != &::google::protobuf::internal::kEmptyString) {
    delete file_name_;
  }
  if (file_name) {
    set_has_file_name();
    file_name_ = file_name;
  } else {
    clear_has_file_name();
    file_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// eg_reload_config_notify

// optional uint32 load_type = 1;
inline bool eg_reload_config_notify::has_load_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void eg_reload_config_notify::set_has_load_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void eg_reload_config_notify::clear_has_load_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void eg_reload_config_notify::clear_load_type() {
  load_type_ = 0u;
  clear_has_load_type();
}
inline ::google::protobuf::uint32 eg_reload_config_notify::load_type() const {
  return load_type_;
}
inline void eg_reload_config_notify::set_load_type(::google::protobuf::uint32 value) {
  set_has_load_type();
  load_type_ = value;
}

// optional string file_name = 2;
inline bool eg_reload_config_notify::has_file_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void eg_reload_config_notify::set_has_file_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void eg_reload_config_notify::clear_has_file_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void eg_reload_config_notify::clear_file_name() {
  if (file_name_ != &::google::protobuf::internal::kEmptyString) {
    file_name_->clear();
  }
  clear_has_file_name();
}
inline const ::std::string& eg_reload_config_notify::file_name() const {
  return *file_name_;
}
inline void eg_reload_config_notify::set_file_name(const ::std::string& value) {
  set_has_file_name();
  if (file_name_ == &::google::protobuf::internal::kEmptyString) {
    file_name_ = new ::std::string;
  }
  file_name_->assign(value);
}
inline void eg_reload_config_notify::set_file_name(const char* value) {
  set_has_file_name();
  if (file_name_ == &::google::protobuf::internal::kEmptyString) {
    file_name_ = new ::std::string;
  }
  file_name_->assign(value);
}
inline void eg_reload_config_notify::set_file_name(const char* value, size_t size) {
  set_has_file_name();
  if (file_name_ == &::google::protobuf::internal::kEmptyString) {
    file_name_ = new ::std::string;
  }
  file_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* eg_reload_config_notify::mutable_file_name() {
  set_has_file_name();
  if (file_name_ == &::google::protobuf::internal::kEmptyString) {
    file_name_ = new ::std::string;
  }
  return file_name_;
}
inline ::std::string* eg_reload_config_notify::release_file_name() {
  clear_has_file_name();
  if (file_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = file_name_;
    file_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void eg_reload_config_notify::set_allocated_file_name(::std::string* file_name) {
  if (file_name_ != &::google::protobuf::internal::kEmptyString) {
    delete file_name_;
  }
  if (file_name) {
    set_has_file_name();
    file_name_ = file_name;
  } else {
    clear_has_file_name();
    file_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// ge_change_friendliness_request

// optional uint64 my_role_id = 1;
inline bool ge_change_friendliness_request::has_my_role_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ge_change_friendliness_request::set_has_my_role_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ge_change_friendliness_request::clear_has_my_role_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ge_change_friendliness_request::clear_my_role_id() {
  my_role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_my_role_id();
}
inline ::google::protobuf::uint64 ge_change_friendliness_request::my_role_id() const {
  return my_role_id_;
}
inline void ge_change_friendliness_request::set_my_role_id(::google::protobuf::uint64 value) {
  set_has_my_role_id();
  my_role_id_ = value;
}

// optional uint64 friend_role_id = 2;
inline bool ge_change_friendliness_request::has_friend_role_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ge_change_friendliness_request::set_has_friend_role_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ge_change_friendliness_request::clear_has_friend_role_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ge_change_friendliness_request::clear_friend_role_id() {
  friend_role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_friend_role_id();
}
inline ::google::protobuf::uint64 ge_change_friendliness_request::friend_role_id() const {
  return friend_role_id_;
}
inline void ge_change_friendliness_request::set_friend_role_id(::google::protobuf::uint64 value) {
  set_has_friend_role_id();
  friend_role_id_ = value;
}

// optional int32 change_value = 3;
inline bool ge_change_friendliness_request::has_change_value() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ge_change_friendliness_request::set_has_change_value() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ge_change_friendliness_request::clear_has_change_value() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ge_change_friendliness_request::clear_change_value() {
  change_value_ = 0;
  clear_has_change_value();
}
inline ::google::protobuf::int32 ge_change_friendliness_request::change_value() const {
  return change_value_;
}
inline void ge_change_friendliness_request::set_change_value(::google::protobuf::int32 value) {
  set_has_change_value();
  change_value_ = value;
}

// optional .proto.common.change_friendliness_reason reason = 4;
inline bool ge_change_friendliness_request::has_reason() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ge_change_friendliness_request::set_has_reason() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ge_change_friendliness_request::clear_has_reason() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ge_change_friendliness_request::clear_reason() {
  reason_ = 1;
  clear_has_reason();
}
inline ::proto::common::change_friendliness_reason ge_change_friendliness_request::reason() const {
  return static_cast< ::proto::common::change_friendliness_reason >(reason_);
}
inline void ge_change_friendliness_request::set_reason(::proto::common::change_friendliness_reason value) {
  assert(::proto::common::change_friendliness_reason_IsValid(value));
  set_has_reason();
  reason_ = value;
}

// -------------------------------------------------------------------

// eg_change_friendliness_notify

// optional uint64 my_role_id = 1;
inline bool eg_change_friendliness_notify::has_my_role_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void eg_change_friendliness_notify::set_has_my_role_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void eg_change_friendliness_notify::clear_has_my_role_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void eg_change_friendliness_notify::clear_my_role_id() {
  my_role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_my_role_id();
}
inline ::google::protobuf::uint64 eg_change_friendliness_notify::my_role_id() const {
  return my_role_id_;
}
inline void eg_change_friendliness_notify::set_my_role_id(::google::protobuf::uint64 value) {
  set_has_my_role_id();
  my_role_id_ = value;
}

// optional uint64 friend_role_id = 2;
inline bool eg_change_friendliness_notify::has_friend_role_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void eg_change_friendliness_notify::set_has_friend_role_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void eg_change_friendliness_notify::clear_has_friend_role_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void eg_change_friendliness_notify::clear_friend_role_id() {
  friend_role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_friend_role_id();
}
inline ::google::protobuf::uint64 eg_change_friendliness_notify::friend_role_id() const {
  return friend_role_id_;
}
inline void eg_change_friendliness_notify::set_friend_role_id(::google::protobuf::uint64 value) {
  set_has_friend_role_id();
  friend_role_id_ = value;
}

// optional int32 change_value = 3;
inline bool eg_change_friendliness_notify::has_change_value() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void eg_change_friendliness_notify::set_has_change_value() {
  _has_bits_[0] |= 0x00000004u;
}
inline void eg_change_friendliness_notify::clear_has_change_value() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void eg_change_friendliness_notify::clear_change_value() {
  change_value_ = 0;
  clear_has_change_value();
}
inline ::google::protobuf::int32 eg_change_friendliness_notify::change_value() const {
  return change_value_;
}
inline void eg_change_friendliness_notify::set_change_value(::google::protobuf::int32 value) {
  set_has_change_value();
  change_value_ = value;
}

// optional .proto.common.change_friendliness_reason reason = 4;
inline bool eg_change_friendliness_notify::has_reason() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void eg_change_friendliness_notify::set_has_reason() {
  _has_bits_[0] |= 0x00000008u;
}
inline void eg_change_friendliness_notify::clear_has_reason() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void eg_change_friendliness_notify::clear_reason() {
  reason_ = 1;
  clear_has_reason();
}
inline ::proto::common::change_friendliness_reason eg_change_friendliness_notify::reason() const {
  return static_cast< ::proto::common::change_friendliness_reason >(reason_);
}
inline void eg_change_friendliness_notify::set_reason(::proto::common::change_friendliness_reason value) {
  assert(::proto::common::change_friendliness_reason_IsValid(value));
  set_has_reason();
  reason_ = value;
}

// -------------------------------------------------------------------

// ge_get_friendliness_request

// optional uint64 role_id = 1;
inline bool ge_get_friendliness_request::has_role_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ge_get_friendliness_request::set_has_role_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ge_get_friendliness_request::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ge_get_friendliness_request::clear_role_id() {
  role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_role_id();
}
inline ::google::protobuf::uint64 ge_get_friendliness_request::role_id() const {
  return role_id_;
}
inline void ge_get_friendliness_request::set_role_id(::google::protobuf::uint64 value) {
  set_has_role_id();
  role_id_ = value;
}

// -------------------------------------------------------------------

// player_friendliness

// optional uint64 friend_role_id = 1;
inline bool player_friendliness::has_friend_role_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void player_friendliness::set_has_friend_role_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void player_friendliness::clear_has_friend_role_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void player_friendliness::clear_friend_role_id() {
  friend_role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_friend_role_id();
}
inline ::google::protobuf::uint64 player_friendliness::friend_role_id() const {
  return friend_role_id_;
}
inline void player_friendliness::set_friend_role_id(::google::protobuf::uint64 value) {
  set_has_friend_role_id();
  friend_role_id_ = value;
}

// optional uint32 friendliness = 2;
inline bool player_friendliness::has_friendliness() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void player_friendliness::set_has_friendliness() {
  _has_bits_[0] |= 0x00000002u;
}
inline void player_friendliness::clear_has_friendliness() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void player_friendliness::clear_friendliness() {
  friendliness_ = 0u;
  clear_has_friendliness();
}
inline ::google::protobuf::uint32 player_friendliness::friendliness() const {
  return friendliness_;
}
inline void player_friendliness::set_friendliness(::google::protobuf::uint32 value) {
  set_has_friendliness();
  friendliness_ = value;
}

// -------------------------------------------------------------------

// eg_get_friendliness_reply

// optional uint64 role_id = 1;
inline bool eg_get_friendliness_reply::has_role_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void eg_get_friendliness_reply::set_has_role_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void eg_get_friendliness_reply::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void eg_get_friendliness_reply::clear_role_id() {
  role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_role_id();
}
inline ::google::protobuf::uint64 eg_get_friendliness_reply::role_id() const {
  return role_id_;
}
inline void eg_get_friendliness_reply::set_role_id(::google::protobuf::uint64 value) {
  set_has_role_id();
  role_id_ = value;
}

// repeated .proto.server.player_friendliness friendliness = 2;
inline int eg_get_friendliness_reply::friendliness_size() const {
  return friendliness_.size();
}
inline void eg_get_friendliness_reply::clear_friendliness() {
  friendliness_.Clear();
}
inline const ::proto::server::player_friendliness& eg_get_friendliness_reply::friendliness(int index) const {
  return friendliness_.Get(index);
}
inline ::proto::server::player_friendliness* eg_get_friendliness_reply::mutable_friendliness(int index) {
  return friendliness_.Mutable(index);
}
inline ::proto::server::player_friendliness* eg_get_friendliness_reply::add_friendliness() {
  return friendliness_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::server::player_friendliness >&
eg_get_friendliness_reply::friendliness() const {
  return friendliness_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto::server::player_friendliness >*
eg_get_friendliness_reply::mutable_friendliness() {
  return &friendliness_;
}

// -------------------------------------------------------------------

// eg_friend_point_operation_request

// optional uint64 role_id = 1;
inline bool eg_friend_point_operation_request::has_role_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void eg_friend_point_operation_request::set_has_role_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void eg_friend_point_operation_request::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void eg_friend_point_operation_request::clear_role_id() {
  role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_role_id();
}
inline ::google::protobuf::uint64 eg_friend_point_operation_request::role_id() const {
  return role_id_;
}
inline void eg_friend_point_operation_request::set_role_id(::google::protobuf::uint64 value) {
  set_has_role_id();
  role_id_ = value;
}

// optional uint64 friend_role_id = 2;
inline bool eg_friend_point_operation_request::has_friend_role_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void eg_friend_point_operation_request::set_has_friend_role_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void eg_friend_point_operation_request::clear_has_friend_role_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void eg_friend_point_operation_request::clear_friend_role_id() {
  friend_role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_friend_role_id();
}
inline ::google::protobuf::uint64 eg_friend_point_operation_request::friend_role_id() const {
  return friend_role_id_;
}
inline void eg_friend_point_operation_request::set_friend_role_id(::google::protobuf::uint64 value) {
  set_has_friend_role_id();
  friend_role_id_ = value;
}

// optional .proto.server.friend_point_operation operation = 3;
inline bool eg_friend_point_operation_request::has_operation() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void eg_friend_point_operation_request::set_has_operation() {
  _has_bits_[0] |= 0x00000004u;
}
inline void eg_friend_point_operation_request::clear_has_operation() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void eg_friend_point_operation_request::clear_operation() {
  operation_ = 1;
  clear_has_operation();
}
inline ::proto::server::friend_point_operation eg_friend_point_operation_request::operation() const {
  return static_cast< ::proto::server::friend_point_operation >(operation_);
}
inline void eg_friend_point_operation_request::set_operation(::proto::server::friend_point_operation value) {
  assert(::proto::server::friend_point_operation_IsValid(value));
  set_has_operation();
  operation_ = value;
}

// optional int32 parameter1 = 4;
inline bool eg_friend_point_operation_request::has_parameter1() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void eg_friend_point_operation_request::set_has_parameter1() {
  _has_bits_[0] |= 0x00000008u;
}
inline void eg_friend_point_operation_request::clear_has_parameter1() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void eg_friend_point_operation_request::clear_parameter1() {
  parameter1_ = 0;
  clear_has_parameter1();
}
inline ::google::protobuf::int32 eg_friend_point_operation_request::parameter1() const {
  return parameter1_;
}
inline void eg_friend_point_operation_request::set_parameter1(::google::protobuf::int32 value) {
  set_has_parameter1();
  parameter1_ = value;
}

// optional int32 parameter2 = 5;
inline bool eg_friend_point_operation_request::has_parameter2() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void eg_friend_point_operation_request::set_has_parameter2() {
  _has_bits_[0] |= 0x00000010u;
}
inline void eg_friend_point_operation_request::clear_has_parameter2() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void eg_friend_point_operation_request::clear_parameter2() {
  parameter2_ = 0;
  clear_has_parameter2();
}
inline ::google::protobuf::int32 eg_friend_point_operation_request::parameter2() const {
  return parameter2_;
}
inline void eg_friend_point_operation_request::set_parameter2(::google::protobuf::int32 value) {
  set_has_parameter2();
  parameter2_ = value;
}

// -------------------------------------------------------------------

// ge_friend_point_operation_reply

// optional uint64 role_id = 1;
inline bool ge_friend_point_operation_reply::has_role_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ge_friend_point_operation_reply::set_has_role_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ge_friend_point_operation_reply::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ge_friend_point_operation_reply::clear_role_id() {
  role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_role_id();
}
inline ::google::protobuf::uint64 ge_friend_point_operation_reply::role_id() const {
  return role_id_;
}
inline void ge_friend_point_operation_reply::set_role_id(::google::protobuf::uint64 value) {
  set_has_role_id();
  role_id_ = value;
}

// optional uint64 friend_role_id = 2;
inline bool ge_friend_point_operation_reply::has_friend_role_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ge_friend_point_operation_reply::set_has_friend_role_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ge_friend_point_operation_reply::clear_has_friend_role_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ge_friend_point_operation_reply::clear_friend_role_id() {
  friend_role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_friend_role_id();
}
inline ::google::protobuf::uint64 ge_friend_point_operation_reply::friend_role_id() const {
  return friend_role_id_;
}
inline void ge_friend_point_operation_reply::set_friend_role_id(::google::protobuf::uint64 value) {
  set_has_friend_role_id();
  friend_role_id_ = value;
}

// optional .proto.server.friend_point_operation operation = 3;
inline bool ge_friend_point_operation_reply::has_operation() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ge_friend_point_operation_reply::set_has_operation() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ge_friend_point_operation_reply::clear_has_operation() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ge_friend_point_operation_reply::clear_operation() {
  operation_ = 1;
  clear_has_operation();
}
inline ::proto::server::friend_point_operation ge_friend_point_operation_reply::operation() const {
  return static_cast< ::proto::server::friend_point_operation >(operation_);
}
inline void ge_friend_point_operation_reply::set_operation(::proto::server::friend_point_operation value) {
  assert(::proto::server::friend_point_operation_IsValid(value));
  set_has_operation();
  operation_ = value;
}

// optional int32 parameter1 = 4;
inline bool ge_friend_point_operation_reply::has_parameter1() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ge_friend_point_operation_reply::set_has_parameter1() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ge_friend_point_operation_reply::clear_has_parameter1() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ge_friend_point_operation_reply::clear_parameter1() {
  parameter1_ = 0;
  clear_has_parameter1();
}
inline ::google::protobuf::int32 ge_friend_point_operation_reply::parameter1() const {
  return parameter1_;
}
inline void ge_friend_point_operation_reply::set_parameter1(::google::protobuf::int32 value) {
  set_has_parameter1();
  parameter1_ = value;
}

// optional int32 parameter2 = 5;
inline bool ge_friend_point_operation_reply::has_parameter2() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ge_friend_point_operation_reply::set_has_parameter2() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ge_friend_point_operation_reply::clear_has_parameter2() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ge_friend_point_operation_reply::clear_parameter2() {
  parameter2_ = 0;
  clear_has_parameter2();
}
inline ::google::protobuf::int32 ge_friend_point_operation_reply::parameter2() const {
  return parameter2_;
}
inline void ge_friend_point_operation_reply::set_parameter2(::google::protobuf::int32 value) {
  set_has_parameter2();
  parameter2_ = value;
}

// optional int32 info1 = 6;
inline bool ge_friend_point_operation_reply::has_info1() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ge_friend_point_operation_reply::set_has_info1() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ge_friend_point_operation_reply::clear_has_info1() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ge_friend_point_operation_reply::clear_info1() {
  info1_ = 0;
  clear_has_info1();
}
inline ::google::protobuf::int32 ge_friend_point_operation_reply::info1() const {
  return info1_;
}
inline void ge_friend_point_operation_reply::set_info1(::google::protobuf::int32 value) {
  set_has_info1();
  info1_ = value;
}

// optional int32 info2 = 7;
inline bool ge_friend_point_operation_reply::has_info2() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ge_friend_point_operation_reply::set_has_info2() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ge_friend_point_operation_reply::clear_has_info2() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ge_friend_point_operation_reply::clear_info2() {
  info2_ = 0;
  clear_has_info2();
}
inline ::google::protobuf::int32 ge_friend_point_operation_reply::info2() const {
  return info2_;
}
inline void ge_friend_point_operation_reply::set_info2(::google::protobuf::int32 value) {
  set_has_info2();
  info2_ = value;
}

// optional string info3 = 10;
inline bool ge_friend_point_operation_reply::has_info3() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ge_friend_point_operation_reply::set_has_info3() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ge_friend_point_operation_reply::clear_has_info3() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ge_friend_point_operation_reply::clear_info3() {
  if (info3_ != &::google::protobuf::internal::kEmptyString) {
    info3_->clear();
  }
  clear_has_info3();
}
inline const ::std::string& ge_friend_point_operation_reply::info3() const {
  return *info3_;
}
inline void ge_friend_point_operation_reply::set_info3(const ::std::string& value) {
  set_has_info3();
  if (info3_ == &::google::protobuf::internal::kEmptyString) {
    info3_ = new ::std::string;
  }
  info3_->assign(value);
}
inline void ge_friend_point_operation_reply::set_info3(const char* value) {
  set_has_info3();
  if (info3_ == &::google::protobuf::internal::kEmptyString) {
    info3_ = new ::std::string;
  }
  info3_->assign(value);
}
inline void ge_friend_point_operation_reply::set_info3(const char* value, size_t size) {
  set_has_info3();
  if (info3_ == &::google::protobuf::internal::kEmptyString) {
    info3_ = new ::std::string;
  }
  info3_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ge_friend_point_operation_reply::mutable_info3() {
  set_has_info3();
  if (info3_ == &::google::protobuf::internal::kEmptyString) {
    info3_ = new ::std::string;
  }
  return info3_;
}
inline ::std::string* ge_friend_point_operation_reply::release_info3() {
  clear_has_info3();
  if (info3_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = info3_;
    info3_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ge_friend_point_operation_reply::set_allocated_info3(::std::string* info3) {
  if (info3_ != &::google::protobuf::internal::kEmptyString) {
    delete info3_;
  }
  if (info3) {
    set_has_info3();
    info3_ = info3;
  } else {
    clear_has_info3();
    info3_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .proto.common.role_change_data change_data = 8;
inline bool ge_friend_point_operation_reply::has_change_data() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ge_friend_point_operation_reply::set_has_change_data() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ge_friend_point_operation_reply::clear_has_change_data() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ge_friend_point_operation_reply::clear_change_data() {
  if (change_data_ != NULL) change_data_->::proto::common::role_change_data::Clear();
  clear_has_change_data();
}
inline const ::proto::common::role_change_data& ge_friend_point_operation_reply::change_data() const {
  return change_data_ != NULL ? *change_data_ : *default_instance_->change_data_;
}
inline ::proto::common::role_change_data* ge_friend_point_operation_reply::mutable_change_data() {
  set_has_change_data();
  if (change_data_ == NULL) change_data_ = new ::proto::common::role_change_data;
  return change_data_;
}
inline ::proto::common::role_change_data* ge_friend_point_operation_reply::release_change_data() {
  clear_has_change_data();
  ::proto::common::role_change_data* temp = change_data_;
  change_data_ = NULL;
  return temp;
}
inline void ge_friend_point_operation_reply::set_allocated_change_data(::proto::common::role_change_data* change_data) {
  delete change_data_;
  change_data_ = change_data;
  if (change_data) {
    set_has_change_data();
  } else {
    clear_has_change_data();
  }
}

// optional int32 reply_code = 9;
inline bool ge_friend_point_operation_reply::has_reply_code() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ge_friend_point_operation_reply::set_has_reply_code() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ge_friend_point_operation_reply::clear_has_reply_code() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ge_friend_point_operation_reply::clear_reply_code() {
  reply_code_ = 0;
  clear_has_reply_code();
}
inline ::google::protobuf::int32 ge_friend_point_operation_reply::reply_code() const {
  return reply_code_;
}
inline void ge_friend_point_operation_reply::set_reply_code(::google::protobuf::int32 value) {
  set_has_reply_code();
  reply_code_ = value;
}

// optional int32 info4 = 11;
inline bool ge_friend_point_operation_reply::has_info4() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ge_friend_point_operation_reply::set_has_info4() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ge_friend_point_operation_reply::clear_has_info4() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ge_friend_point_operation_reply::clear_info4() {
  info4_ = 0;
  clear_has_info4();
}
inline ::google::protobuf::int32 ge_friend_point_operation_reply::info4() const {
  return info4_;
}
inline void ge_friend_point_operation_reply::set_info4(::google::protobuf::int32 value) {
  set_has_info4();
  info4_ = value;
}

// -------------------------------------------------------------------

// sv_cross_area_video_notify

// optional .proto.common.video_single_base base = 1;
inline bool sv_cross_area_video_notify::has_base() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void sv_cross_area_video_notify::set_has_base() {
  _has_bits_[0] |= 0x00000001u;
}
inline void sv_cross_area_video_notify::clear_has_base() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void sv_cross_area_video_notify::clear_base() {
  if (base_ != NULL) base_->::proto::common::video_single_base::Clear();
  clear_has_base();
}
inline const ::proto::common::video_single_base& sv_cross_area_video_notify::base() const {
  return base_ != NULL ? *base_ : *default_instance_->base_;
}
inline ::proto::common::video_single_base* sv_cross_area_video_notify::mutable_base() {
  set_has_base();
  if (base_ == NULL) base_ = new ::proto::common::video_single_base;
  return base_;
}
inline ::proto::common::video_single_base* sv_cross_area_video_notify::release_base() {
  clear_has_base();
  ::proto::common::video_single_base* temp = base_;
  base_ = NULL;
  return temp;
}
inline void sv_cross_area_video_notify::set_allocated_base(::proto::common::video_single_base* base) {
  delete base_;
  base_ = base;
  if (base) {
    set_has_base();
  } else {
    clear_has_base();
  }
}

// optional bytes fight_data = 2;
inline bool sv_cross_area_video_notify::has_fight_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void sv_cross_area_video_notify::set_has_fight_data() {
  _has_bits_[0] |= 0x00000002u;
}
inline void sv_cross_area_video_notify::clear_has_fight_data() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void sv_cross_area_video_notify::clear_fight_data() {
  if (fight_data_ != &::google::protobuf::internal::kEmptyString) {
    fight_data_->clear();
  }
  clear_has_fight_data();
}
inline const ::std::string& sv_cross_area_video_notify::fight_data() const {
  return *fight_data_;
}
inline void sv_cross_area_video_notify::set_fight_data(const ::std::string& value) {
  set_has_fight_data();
  if (fight_data_ == &::google::protobuf::internal::kEmptyString) {
    fight_data_ = new ::std::string;
  }
  fight_data_->assign(value);
}
inline void sv_cross_area_video_notify::set_fight_data(const char* value) {
  set_has_fight_data();
  if (fight_data_ == &::google::protobuf::internal::kEmptyString) {
    fight_data_ = new ::std::string;
  }
  fight_data_->assign(value);
}
inline void sv_cross_area_video_notify::set_fight_data(const void* value, size_t size) {
  set_has_fight_data();
  if (fight_data_ == &::google::protobuf::internal::kEmptyString) {
    fight_data_ = new ::std::string;
  }
  fight_data_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sv_cross_area_video_notify::mutable_fight_data() {
  set_has_fight_data();
  if (fight_data_ == &::google::protobuf::internal::kEmptyString) {
    fight_data_ = new ::std::string;
  }
  return fight_data_;
}
inline ::std::string* sv_cross_area_video_notify::release_fight_data() {
  clear_has_fight_data();
  if (fight_data_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = fight_data_;
    fight_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void sv_cross_area_video_notify::set_allocated_fight_data(::std::string* fight_data) {
  if (fight_data_ != &::google::protobuf::internal::kEmptyString) {
    delete fight_data_;
  }
  if (fight_data) {
    set_has_fight_data();
    fight_data_ = fight_data;
  } else {
    clear_has_fight_data();
    fight_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// gv_tower_video_notify

// optional .proto.common.video_single_base base = 1;
inline bool gv_tower_video_notify::has_base() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gv_tower_video_notify::set_has_base() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gv_tower_video_notify::clear_has_base() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gv_tower_video_notify::clear_base() {
  if (base_ != NULL) base_->::proto::common::video_single_base::Clear();
  clear_has_base();
}
inline const ::proto::common::video_single_base& gv_tower_video_notify::base() const {
  return base_ != NULL ? *base_ : *default_instance_->base_;
}
inline ::proto::common::video_single_base* gv_tower_video_notify::mutable_base() {
  set_has_base();
  if (base_ == NULL) base_ = new ::proto::common::video_single_base;
  return base_;
}
inline ::proto::common::video_single_base* gv_tower_video_notify::release_base() {
  clear_has_base();
  ::proto::common::video_single_base* temp = base_;
  base_ = NULL;
  return temp;
}
inline void gv_tower_video_notify::set_allocated_base(::proto::common::video_single_base* base) {
  delete base_;
  base_ = base;
  if (base) {
    set_has_base();
  } else {
    clear_has_base();
  }
}

// optional bytes fight_data = 2;
inline bool gv_tower_video_notify::has_fight_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gv_tower_video_notify::set_has_fight_data() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gv_tower_video_notify::clear_has_fight_data() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gv_tower_video_notify::clear_fight_data() {
  if (fight_data_ != &::google::protobuf::internal::kEmptyString) {
    fight_data_->clear();
  }
  clear_has_fight_data();
}
inline const ::std::string& gv_tower_video_notify::fight_data() const {
  return *fight_data_;
}
inline void gv_tower_video_notify::set_fight_data(const ::std::string& value) {
  set_has_fight_data();
  if (fight_data_ == &::google::protobuf::internal::kEmptyString) {
    fight_data_ = new ::std::string;
  }
  fight_data_->assign(value);
}
inline void gv_tower_video_notify::set_fight_data(const char* value) {
  set_has_fight_data();
  if (fight_data_ == &::google::protobuf::internal::kEmptyString) {
    fight_data_ = new ::std::string;
  }
  fight_data_->assign(value);
}
inline void gv_tower_video_notify::set_fight_data(const void* value, size_t size) {
  set_has_fight_data();
  if (fight_data_ == &::google::protobuf::internal::kEmptyString) {
    fight_data_ = new ::std::string;
  }
  fight_data_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* gv_tower_video_notify::mutable_fight_data() {
  set_has_fight_data();
  if (fight_data_ == &::google::protobuf::internal::kEmptyString) {
    fight_data_ = new ::std::string;
  }
  return fight_data_;
}
inline ::std::string* gv_tower_video_notify::release_fight_data() {
  clear_has_fight_data();
  if (fight_data_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = fight_data_;
    fight_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void gv_tower_video_notify::set_allocated_fight_data(::std::string* fight_data) {
  if (fight_data_ != &::google::protobuf::internal::kEmptyString) {
    delete fight_data_;
  }
  if (fight_data) {
    set_has_fight_data();
    fight_data_ = fight_data;
  } else {
    clear_has_fight_data();
    fight_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace server
}  // namespace proto

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::server::data_sync_type>() {
  return ::proto::server::data_sync_type_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::server::scene_change_type>() {
  return ::proto::server::scene_change_type_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::server::family_money_change_type>() {
  return ::proto::server::family_money_change_type_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::server::country_money_change_type>() {
  return ::proto::server::country_money_change_type_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::server::EM_FIELD_MODE>() {
  return ::proto::server::EM_FIELD_MODE_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::server::em_map_type>() {
  return ::proto::server::em_map_type_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::server::dungeon_create_type>() {
  return ::proto::server::dungeon_create_type_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::server::em_scene_type>() {
  return ::proto::server::em_scene_type_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::server::global_data_type>() {
  return ::proto::server::global_data_type_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::server::friend_point_operation>() {
  return ::proto::server::friend_point_operation_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_server_2eproto__INCLUDED
